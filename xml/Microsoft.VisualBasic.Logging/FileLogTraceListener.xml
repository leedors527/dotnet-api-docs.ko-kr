<Type Name="FileLogTraceListener" FullName="Microsoft.VisualBasic.Logging.FileLogTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5c8f4a74112262aff62d14801e197459fe889648" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57925669" /></Metadata><TypeSignature Language="C#" Value="public class FileLogTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileLogTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class FileLogTraceListener&#xA;Inherits TraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileLogTraceListener : System::Diagnostics::TraceListener" />
  <TypeSignature Language="F#" Value="type FileLogTraceListener = class&#xA;    inherit TraceListener" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>로깅 출력을 파일로 보내는 간단한 수신기를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 클래스 일별 또는 응용 프로그램에서 필요에 따라 로그 파일을 보관 하려면 자동된 유지 관리 기능을 제공 합니다. 이 자동 보관 기능 개발자와 관리자의 유지 관리 부담을 줄일 수 있습니다.  
  
 인스턴스의 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 에 추가할 수는 <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType> 또는 <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> 텍스트 파일 로깅 출력을 리디렉션하는 컬렉션입니다. 이 클래스의 인스턴스를 추가할 수도 있습니다 `My.Application.Log` 또는 `My.Log` (웹 응용 프로그램)에 대 한 Visual Basic 응용 프로그램에서 합니다. 자세한 내용은 [연습: My.application.log가 정보를 기록 하는 위치 변경](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)`.`  
  
 이 클래스의 주요 기능은 다음과 같습니다.  
  
1.  *보관 기능*합니다. 이 클래스에 의해 생성 된 로그 파일의 이름은 기본 이름 및 이후 버전 로그의 로그 파일을 구분 하는 번호와 함께 날짜에 따라 지정 됩니다. 새 로그 파일에는 필요에 따라 생성 됩니다.  
  
     파일 이름의 명시적 형식은 `baseName`[-`dateStamp`] [-`version`].log 이며 여기서:  
  
    -   합니다 `baseName` 부분은 지정 된 기본 로그 이름을 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> 속성입니다.  
  
    -   합니다 `dateStamp` 부분에 "YYYY-월-일" 형식이 있으며 때 표시 됩니다 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> 됩니다 <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> 또는 <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>합니다.  
  
    -   같은 둘 이상의 로그 파일이 필요한 경우 `baseName` 하 고 `dateStamp`의 `version` 부를 양수 `Integer`, 파일 이름에 추가 됩니다.  
  
2.  *여러 클래스 인스턴스*합니다. 인스턴스는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 클래스를 사용 중인 파일에 씁니다.  
  
    -   클래스의 다른 인스턴스에서 사용 되는 경우에 파일 공유는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 동일한 프로세스에서 클래스입니다.  
  
    -   클래스 파일을 다른 프로세스에서 사용 중인 경우에 다음 사용 가능한 이름을 사용 하 여 새 로그 파일을 만듭니다.  
  
3.  *스레드로부터의 안전성*합니다. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 클래스는 스레드로부터 안전 합니다. 이렇게 하면 안전 하 게에 메시지를 쓸 로그 여러 스레드에서 잠금을 사용 하지 않고 있습니다.  
  
 **로그 파일 위치**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> 속성이 사용 하는 한 <xref:Microsoft.VisualBasic.Logging.LogFileLocation> 로그 파일을 쓸 일반적인 디렉터리 중 하나를 지정 하는 열거형입니다.  
  
-   다른 위치에 로그를 쓸 설정 된 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> 해당 위치에 대 한 속성입니다.  
  
 **로그 파일 이름**  
  
-   로그 파일에 대 한 기본 이름이 지정 된 된 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> 속성입니다.  
  
-   현재 로그 파일 이름을 읽을 수는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 속성입니다. 파일 시스템에 다른 여러 속성 및 로그의 현재 상태에서 파생 됩니다.  
  
 **로그 유지 관리**  
  
-   새 로그 파일을 만들기 위한 최소 빈도 의해 결정 됩니다는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> 속성입니다. 값이 <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> 또는 <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>, 매일 또는 매주, 최소 한 번 새 로그 파일을 만들 및 날짜 스탬프는 통합 된 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 이름입니다.  
  
-   로그 파일의 최대 크기 (바이트)에 의해 결정 됩니다는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> 속성입니다. 로그에 기록 하는 추가 메시지는 삭제 되 고에 따라 로그 파일 크기가이 크기를 초과 하는 경우는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> 속성인 예외가 throw 됩니다.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> 속성 결정 얼마나 많은 여유 공간 (바이트)를 사용할 수 있어야 합니다. 이렇게 하면는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 클래스는 모든 사용 가능한 디스크 공간을 사용 하지 것입니다. 사용 하 여는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> 로그의 동작을 지정 하는 속성 쓰는 경우 보다 작은 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> 사용 가능한 바이트.  
  
 **로그 파일 출력 설정**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> 속성이 있는지 여부를 내부 스트림에 플러시될 자동으로 기록할 때마다 로그 파일에 지정 합니다.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> 속성이 허용 되는 경우 현재 로그 파일에 메시지를 추가 하거나 새 로그 파일을 쓸 것인지를 지정 합니다.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> 속성 로그 메시지에서 필드를 구분 하는 데 문자열을 지정 합니다.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> 속성 새 로그 파일을 만들 때 사용할 인코딩을 지정 합니다.  
  
 **로그 파일 출력**  
  
-   합니다 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> 고 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> 메서드는 로그 파일에 메시지를 씁니다. 이러한 메서드를 확인 합니다 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> 새 로그를 만들어야 하는지 확인 하려면 동일한 기본 이름 사용 하 여 기존 로그와 함께 속성입니다.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> 메서드는 로그 파일에 출력 버퍼에서 현재 메시지를 플러시합니다.  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> 메서드 다른 프로세스에서 사용할 수 있도록 로그 파일을 닫습니다.  
  
 **출력을 사용 하도록 설정**  
  
 추적 수신기를 사용 하려면 추적 또는 디버깅을 활성화 해야 합니다. 다음 구문은 특정 컴파일러입니다. C# 또는 Visual Basic 이외의 컴파일러를 사용 하면 컴파일러에 대 한 설명서를 참조 합니다.  
  
-   C# 디버깅을 사용 하려면 다음을 추가 합니다 `/d:DEBUG` 플래그를 추가할 수 있습니다 하거나 코드를 컴파일할 때 컴파일러 명령줄 `#define DEBUG` 파일의 맨 위로 이동 합니다. Visual Basic에서 추가 된 `/d:DEBUG=True` 컴파일러 명령줄 플래그입니다.  
  
-   C#에서 추적을 사용 하려면 추가 합니다 `/d:TRACE` 코드를 컴파일할 때 컴파일러 명령줄 플래그 `#define TRACE` 파일의 맨 위로 이동 합니다. Visual Basic에서 추가 된 `/d:TRACE=True` 컴파일러 명령줄 플래그입니다.  
  
 수신기의 수준을 설정 하려면 응용 프로그램에 대 한 구성 파일을 편집 합니다. 이 파일에 수신기를 추가, 해당 형식을 설정 하 고 해당 매개 변수를 설정, 수신기를 제거 하거나 지울 수 응용 프로그램에서 이전에 설정한 모든 수신기입니다. 다음 예제와 같이 구성 파일의 형식은 같아야 합니다.  
  
 이 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다. 참조 된 정규화 된 어셈블리 이름을 가져오는 방법에 대 한 내용은 [어셈블리 이름](~/docs/framework/app-domains/assembly-names.md)합니다.  
  
```xml  
<configuration>  
    <system.diagnostics>  
        <sharedListeners>  
            <add name="FileLog"  
                type="Microsoft.VisualBasic.Logging.FileLogTraceListener,   
                      Microsoft.VisualBasic, Version=8.0.0.0,   
                      Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,   
                      processorArchitecture=MSIL"   
                initializeData="FileLogWriter"/>  
        </sharedListeners>  
    </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
    <related type="Article" href="https://msdn.microsoft.com/library/ecc74f95-743c-450d-93f6-09a30db0fe4a">연습: My.application.log가 정보를 기록 하는 위치 변경</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 클래스의 새 인스턴스를 초기화하고 이름을 설정합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>기본 이름을 사용하여 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인스턴스 이름을 설정 하는이 메서드는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> FileLogTraceListener 클래스입니다.  
  
 인스턴스 이름을 통해 액세스할 수 있습니다는 <xref:System.Diagnostics.TraceListener.Name%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.FileLogTraceListener : string -&gt; Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="new Microsoft.VisualBasic.Logging.FileLogTraceListener name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><see langword="String" />. 인스턴스 개체의 이름입니다.</param>
        <summary>제공된 이름을 사용하여 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 인스턴스 이름을 설정 합니다 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 클래스를 `name`입니다.  
  
 인스턴스 이름을 생각에 액세스할 수 있습니다는 <xref:System.Diagnostics.TraceListener.Name%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public bool Append { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Append" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberSignature Language="VB.NET" Value="Public Property Append As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Append { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Append : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 파일에 출력을 추가할지 또는 새 파일에 쓸지 여부를 확인합니다.</summary>
        <value><see langword="Boolean" />. <see langword="True" />는 출력이 현재 파일에 추가됨을 나타내고 <see langword="False" />는 출력이 새 파일에 쓰여짐을 나타냅니다. 이 속성의 기본 설정은 <see langword="True" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> 속성은 `False`, 새 파일에 출력 됩니다. 속성이 `True`을 하지 않으면 출력이 현재 파일에 추가 됩니다.  
  
-   출력 파일 다른 프로세스에 의해 잠겨 있습니다. 이 경우에 통합 된 버전 번호를 사용 하 여 새 로그 파일이 만들어집니다는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 이름입니다.  
  
-   현재 파일 크기 보다 크면는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> 속성을 사용 하면 됩니다. 이 경우 추가 메시지는 삭제 되 고, 따라는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> 속성인 예외가 throw 됩니다.  
  
-   기존 파일 이름이 지정 된 로그 생성 일정에 따라 만료 된 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> 속성입니다. 이 경우 새 로그 파일이 생성 되 고 날짜 스탬프는 통합 된 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 이름입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoFlush : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>로그 파일 스트림에 쓰고 버퍼를 플러시하는지 여부를 나타냅니다.</summary>
        <value><see langword="Boolean" />. <see langword="True" />는 쓸 때마다 스트림을 플러시함을 나타내고, 그렇지 않으면 로그 항목이 보다 효율적으로 버퍼링되고 쓰여집니다. 이 속성의 기본 설정은 <see langword="False" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `False` 에 대 한 설정의 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> 속성 로그 파일에 한 번에 여러 메시지를 작성 하는 것이 효율적 이므로 대부분의 응용 프로그램에 대 한 최상의 성능을 제공 합니다. 사용할 수는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> 현재 로그 파일에 있는 모든 메시지를 플러시할 방법의 버퍼를 출력 합니다. 사용할 수도 있습니다는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> 메서드를 암시적으로 로그 파일을 닫기 전에 스트림을 플러시합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      </Docs>
    </Member>
    <Member MemberName="BaseFileName">
      <MemberSignature Language="C#" Value="public string BaseFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseFileName : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>로그 파일의 기본 이름을 가져오거나 설정합니다. 이 이름은 전체 로그 파일 이름을 만드는 데 사용됩니다.</summary>
        <value><see langword="String" />. 로그 파일의 기본 이름입니다. 기본값은 응용 프로그램의 제품 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> 는 로그 파일에 대 한 기본 이름을 확인 하는 속성을 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 클래스를 씁니다.  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 속성은 현재 전체 로그 파일 이름을 제공 합니다. 로그의 다른 버전을 구분 하기 위해 로그 경로, 기본 이름, 날짜 및 숫자에 따라 생성 됩니다. 새 로그 파일에는 필요에 따라 생성 됩니다.  
  
 전체 로그 파일 이름의 명시적 형식은 `path` \\ `baseName`[-`dateStamp`] [-`iteration`].log 이며 여기서  
  
-   `path` 부분에 의해 결정 됩니다 합니다 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> 속성 및 해당 속성 값으로 설정 됩니다 <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>의 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> 속성입니다.  
  
-   합니다 `baseName` 부분은 지정 된 기본 로그 이름을 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> 속성입니다.  
  
-   합니다 `dateStamp` 부분에 "YYYY-월-일" 형식이 있으며 때 표시 됩니다 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> 로 설정 된 <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> 또는 <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>합니다.  
  
-   같은 둘 이상의 로그 파일이 필요한 경우 `baseName` 하 고 `dateStamp`의 `iteration` 부를 양수 `Integer`, 파일 이름에 추가 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="fileLogTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 로그 파일의 내부 스트림을 닫고 현재 스트림과 관련된 모든 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출할 필요가 없습니다를 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> 메서드 명시적으로 하기 때문에 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 클래스는 기본 스트림을 관리 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomLocation">
      <MemberSignature Language="C#" Value="public string CustomLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomLocation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomLocation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CustomLocation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomLocation : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" /> 속성이 <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />으로 설정될 때 로그 파일 디렉터리를 가져오거나 설정합니다.</summary>
        <value><see langword="String" />. 로그 파일 디렉터리의 이름입니다. 이 속성의 기본 설정은 응용 프로그램 데이터에 대한 사용자 디렉터리입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> 속성을 설정 하면 설정 합니다 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> 속성을 <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>입니다.  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> 속성 디렉터리를 확인할 수 없으면 예외가 throw 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public string Delimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Delimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Delimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiter : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>로그 메시지에서 필드를 구분하는 데 사용되는 구분 기호를 가져오거나 설정합니다.</summary>
        <value><see langword="String" />. 로그 메시지의 필드에 사용되는 구분 기호입니다. 이 속성의 기본 설정은 TAB 문자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> 속성을 사용 하면 기본 구분 기호를 변경할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiskSpaceExhaustedBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property DiskSpaceExhaustedBehavior As DiskSpaceExhaustedOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption get(); void set(Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption value); };" />
      <MemberSignature Language="F#" Value="member this.DiskSpaceExhaustedBehavior : Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>로그 파일에 쓸 때 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> 속성에서 지정한 사용 가능한 공간보다 공간이 더 적은 경우 취할 동작을 결정합니다.</summary>
        <value><see cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />. 로그 파일에 쓸 때 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> 속성에서 지정한 사용 가능한 공간보다 공간이 더 적거나 로그 파일 크기가 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" /> 속성에서 허용하는 크기보다 큰 경우 취할 동작을 결정합니다. 기본값은 <see cref="F:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> 속성이 <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages>, 예약 된 디스크 공간이 충분 하지 않은 경우 로그 메시지를 자동으로 삭제 됩니다. 이 기본 동작 및 간단한 응용 프로그램에 디스크가 꽉 찼을 경우 오류가 발생 합니다.  
  
 보다 강력한 응용 프로그램을 설정할 수는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> 속성을 <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.ThrowException>를 추가 하 고 `Try...Catch` 로그에 기록 하는 모든 코드의 바깥쪽 블록입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="fileLogTraceListener.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="True" />는 관리되는 리소스와 관리되지 않는 리소스를 모두 해제합니다. <see langword="False" />는 관리되지 않는 리소스만 해제합니다.</param>
        <summary>내부 스트림을 닫고 관리되는 리소스를 선택적으로 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `disposing` 매개 변수가 `True`인 경우 이 메서드는 이 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다. 이 메서드는 참조되는 각 개체의 `Dispose` 메서드를 호출합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다. <see langword="Dispose" />를 재정의할 때 이전 <see langword="Dispose" /> 호출에서 삭제된 개체를 참조하지 않도록 주의하십시오.  
  
이 메서드를 호출 합니다 <see langword="Dispose" /> 기본 클래스 메서드의 <see langword="Dispose" />합니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>새 로그 파일을 만들 때 사용할 인코딩을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Text.Encoding" />. 새 로그 파일을 만들 때 사용할 인코딩입니다. 이 속성의 기본값은 <see cref="T:System.Text.UTF8Encoding" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기존 로그 파일에 텍스트를 추가 하는 경우 해당 파일에 대 한 인코딩이 지정 하는 대신 사용 됩니다는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.Text.UTF8Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="fileLogTraceListener.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 로그 파일에 쓰는 내부 스트림을 플러시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> 현재 로그 파일에 버퍼링 된 모든 데이터를 작성 하는 방법입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullLogFileName">
      <MemberSignature Language="C#" Value="public string FullLogFileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullLogFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullLogFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullLogFileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullLogFileName : string" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 전체 로그 파일 이름을 가져옵니다.</summary>
        <value><see langword="String" />. 현재 전체 로그 파일 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 속성은 현재 전체 로그 파일 이름을 제공 합니다. 로그의 다른 버전을 구분 하기 위해 로그 경로, 기본 이름, 날짜 및 숫자에 따라 생성 됩니다. 새 로그 파일에는 필요에 따라 생성 됩니다.  
  
 전체 로그 파일 이름의 명시적 형식은 `path` \\ `baseName`[-`dateStamp`] [-`iteration`].log 이며 여기서:  
  
-   `path` 부분에 의해 결정 됩니다 합니다 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> 속성 및 해당 속성 값으로 설정 됩니다 <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>의 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> 속성입니다.  
  
-   합니다 `baseName` 부분은 지정 된 기본 로그 이름을 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> 속성입니다.  
  
-   `dateStamp` 파트의 형식은 YYYY-월-일 및 때 표시 됩니다 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> 됩니다 <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> 또는 <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>합니다.  
  
-   같은 둘 이상의 로그 파일이 필요한 경우 `baseName` 하 고 `dateStamp`의 `iteration` 부를 양수 `Integer`, 파일 이름에 추가 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberSignature Language="F#" Value="override this.GetSupportedAttributes : unit -&gt; string[]" Usage="fileLogTraceListener.GetSupportedAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>추적 수신기가 지원하는 사용자 지정 XML 구성 특성을 가져옵니다.</summary>
        <returns>이 수신기가 인식하는 XML 구성 특성이 포함된 <see langword="String" /> 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 사용자 지정 특성을 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 인스턴스의 동작을 제어 하는 것에 대 한 XML 구성 파일에서 사용할 수는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 클래스입니다. 다른 특성을 사용 하면 구성 예외가 발생 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.TraceSource.GetSupportedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IncludeHostName">
      <MemberSignature Language="C#" Value="public bool IncludeHostName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeHostName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeHostName { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeHostName : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>로깅 시스템의 호스트 이름이 출력에 포함되어야 하는지 여부를 나타냅니다.</summary>
        <value><see langword="Boolean" />. 호스트 식별자가 포함되어야 하면 <see langword="True" />를 사용하고, 그렇지 않으면 <see langword="False" />를 사용합니다. 기본값은 <see langword="False" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 동작을 구성 하려면 속성을 사용 합니다 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> 고 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileLocation Location" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As LogFileLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileLocation Location { Microsoft::VisualBasic::Logging::LogFileLocation get(); void set(Microsoft::VisualBasic::Logging::LogFileLocation value); };" />
      <MemberSignature Language="F#" Value="member this.Location : Microsoft.VisualBasic.Logging.LogFileLocation with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>로그 파일의 위치를 가져오거나 설정합니다.</summary>
        <value><see cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />. 로그 파일의 위치입니다. 기본값은 <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 합니다 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> 속성에 의해 결정 된 미리 정의 된 경로 중 하나에 로그 경로 설정 하는 <xref:Microsoft.VisualBasic.Logging.LogFileLocation> 열거형 값입니다.  
  
|**위치 값**|**Path**|  
|------------------------|--------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.CommonApplicationDirectory>|형식 사용 하 여 모든 사용자 간에 공유 되는 응용 프로그램 데이터에 대 한 경로:<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> 에 대 한 일반적인 값 `BasePath` 됩니다.<br /><br /> C:\Documents and Settings\All Users\Application Data<br /><br /> 값 `CompanyName`, `ProductName`, 및 `ProductVersion` 어셈블리에서 제공 됩니다.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.ExecutableDirectory>|응용 프로그램을 시작한 실행 파일의 경로입니다.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory>|형식 사용 하 여 사용자의 응용 프로그램 데이터에 대 한 경로:<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> 에 대 한 일반적인 값 `BasePath` 됩니다.<br /><br /> C:\Documents and Settings\\`username`\Application Data<br /><br /> 값 `CompanyName`, `ProductName`, 및 `ProductVersion` 어셈블리 폼을 제공 합니다.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.TempDirectory>|현재 시스템의 임시 폴더의 경로입니다.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>|문자열을 지정 하 여 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> 없습니다 비어를 경로로 사용 않으면 그렇지 않으면 사용자의 응용 프로그램 데이터에 대 한 경로 사용 합니다.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />
      </Docs>
    </Member>
    <Member MemberName="LogFileCreationSchedule">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberSignature Language="VB.NET" Value="Public Property LogFileCreationSchedule As LogFileCreationScheduleOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption LogFileCreationSchedule { Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption get(); void set(Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption value); };" />
      <MemberSignature Language="F#" Value="member this.LogFileCreationSchedule : Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>로그 파일 이름에 포함할 날짜를 결정합니다.</summary>
        <value><see cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />. 로그 파일 이름에 포함할 날짜를 나타냅니다. 기본값은 <see cref="F:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 중 하나를 할당 합니다 <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> 열거형 값을 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> 속성을 통해 로그 파일의 이름에 포함할 날짜를 지정 합니다.  
  
 날짜 형식은 YYYY-MM-dd입니다. 로그 파일 이름의 형식에 자세한 내용은 참조 하세요. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>합니다.  
  
|**LogFileCreationSchedule 값**|**로그 파일 이름에 날짜**|  
|---------------------------------------|-----------------------------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>|로그 파일 이름에 현재 날짜를 포함합니다.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None>|로그 파일 이름에 날짜를 포함하지 않습니다.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>|로그 파일 이름에 현재 주의 첫째 요일을 포함합니다.<br /><br /> 주는 토요일에서 시작합니다.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="MaxFileSize">
      <MemberSignature Language="C#" Value="public long MaxFileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxFileSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxFileSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxFileSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxFileSize : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>로그 파일의 최대 허용 크기(바이트)를 가져오거나 설정합니다.</summary>
        <value><see langword="Long" />. 로그 파일의 최대 허용 크기(바이트)입니다. 기본값은 5000000 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 사용 하 여 로그 파일이 너무 큼 증가 하지 수행 되도록 합니다.  
  
 로그 파일 크기 (바이트) 하는 경우 이면이 속성의 값 보다 큰 경우는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 를값에따라클래스가메시지는삭제되고오류는자동또는예외가메시지로그에쓰려고하면throw되<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>속성입니다. 바이트 단위로 사용 가능한 디스크 공간의 양이 로그에 메시지가 기록 되는 고, 그렇지 미만 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">이 속성이 1000보다 작은 값으로 설정된 경우</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="ReserveDiskSpace">
      <MemberSignature Language="C#" Value="public long ReserveDiskSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReserveDiskSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ReserveDiskSpace As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReserveDiskSpace { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.ReserveDiskSpace : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>메시지를 로그 파일에 쓰기 위해 필요한 사용 가능한 디스크 공간의 크기(바이트)를 가져오거나 설정합니다.</summary>
        <value><see langword="Long" />. 필요한 사용 가능한 디스크 공간의 크기입니다. 기본값은 10000000 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 사용 하 여는 로그 파일이 완전히 채우지 않을 디스크 되도록 합니다.  
  
 사용 가능한 디스크 공간 (바이트)의 경우 이면이 속성의 값 보다 작은 경우는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 값에 따라 클래스 쓰기 시도로 메시지를 로그에 메시지를 무시 하 고 오류 자동 되거나 예외가 throw 되는 < c2 > <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>  속성입니다. 로그 파일 크기 (바이트) 보다 크면 메시지가 로그에 기록 하는 고, 그렇지 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">이 속성이 0보다 작은 값으로 설정된 경우입니다.</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>추적 데이터를 출력 파일에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> 응용 프로그램 코드에서 호출할 메서드를 사용 하는 것이 없습니다. 멤버에 의해 이러한 메서드를 호출 합니다 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource> 추적 데이터를 출력을 작성 하는 클래스입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">현재 프로세스 ID, 스레드 ID 및 스택 추적 정보가 포함된 <see cref="T:System.Diagnostics.TraceEventCache" /> 개체입니다.</param>
        <param name="source">이 메서드를 호출한 추적 소스의 이름입니다.</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 열거형 값 중 하나입니다.</param>
        <param name="id">이벤트의 숫자 식별자입니다.</param>
        <param name="data">내보낼 출력 데이터입니다.</param>
        <summary>추적 정보, 데이터 개체 및 이벤트 정보를 출력 파일이나 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 방법:  
  
1.  출력에 대 한 데이터 및 컨텍스트 정보 형식을 지정합니다.  
  
2.  필요한 경우 새 로그 파일을 만듭니다.  
  
3.  로그 파일에 정보를 씁니다.  
  
 새 로그 파일을 만드는 방법에 대 한 자세한 내용은 참조 하세요. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>합니다.  
  
 다음 표에서 표시 되는 순서는 출력 필드를 나열 합니다. 필드는 문자열을 구분 하는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> 속성을 지정 하 고 뒤에 줄 종결자입니다.  
  
|**필드**|**출력 조건**|**설명**|  
|---------------|--------------------------|---------------------|  
|`source`|Always|`name`의 값|  
|`severity`|Always|열거형 값 이름을 `eventType`입니다.|  
|`id`|Always|`id`의 문자열 표현입니다.|  
|`message`|Always|`data`의 문자열 표현입니다.|  
|`callStack`|경우는 <xref:System.Diagnostics.TraceOptions.Callstack> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|합니다 <xref:System.Diagnostics.TraceEventCache.Callstack%2A> 속성의 `eventCache`합니다.|  
|`CorrelationID`|경우는 <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|합니다 <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> 속성의 `eventCache`합니다.|  
|`DateTime`|경우는 <xref:System.Diagnostics.TraceOptions.DateTime> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|문자열 표현 합니다 <xref:System.Diagnostics.TraceEventCache.DateTime%2A> 속성의 `eventCache`합니다. 고정 문화권 문자열 변환을 위해 사용 됩니다.|  
|`ProcessID`|경우는 <xref:System.Diagnostics.TraceOptions.ProcessId> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|문자열 표현 합니다 <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> 속성의 `eventCache`합니다. 고정 문화권 문자열 변환을 위해 사용 됩니다.|  
|`ThreadID`|경우는 <xref:System.Diagnostics.TraceOptions.ThreadId> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|합니다 <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> 속성의 `eventCache`합니다.|  
|`Timestamp`|경우는 <xref:System.Diagnostics.TraceOptions.Timestamp> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|문자열 표현 합니다 <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> 속성의 `eventCache`합니다. 고정 문화권 문자열 변환을 위해 사용 됩니다.|  
|`HostName`|경우는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> 속성은 `True`합니다.|컴퓨터의 이름입니다.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">현재 프로세스 ID, 스레드 ID 및 스택 추적 정보가 포함된 <see cref="T:System.Diagnostics.TraceEventCache" /> 개체입니다.</param>
        <param name="source">이 메서드를 호출한 추적 소스의 이름입니다.</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 열거형 값 중 하나입니다.</param>
        <param name="id">이벤트의 숫자 식별자입니다.</param>
        <param name="data">데이터로 내보낼 개체 배열입니다.</param>
        <summary>추적 정보, 데이터 개체의 배열 및 이벤트 정보를 출력 파일이나 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 방법:  
  
1.  출력에 대 한 데이터 및 컨텍스트 정보 형식  
  
2.  필요한 경우 새 로그 파일을 만듭니다.  
  
3.  로그 파일에 정보를 씁니다.  
  
 새 로그 파일을 만드는 방법에 대 한 자세한 내용은 참조 하세요. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>합니다.  
  
 이 테이블에 나타나는 순서 대로 출력 필드를 나열 합니다. 필드는 문자열을 구분 하는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> 속성을 지정 하 고 뒤에 줄 종결자입니다.  
  
|**필드**|**출력 조건**|**설명**|  
|---------------|--------------------------|---------------------|  
|`source`|Always|`name`의 값|  
|`severity`|Always|열거형 값 이름을 `eventType`입니다.|  
|`id`|Always|`id`의 문자열 표현입니다.|  
|`message`|Always|각 요소에 대 한 문자열 표현의 구성 하는 문자열로 `data`구분 하 여, <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>합니다.|  
|`callStack`|경우는 <xref:System.Diagnostics.TraceOptions.Callstack> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|합니다 <xref:System.Diagnostics.TraceEventCache.Callstack%2A> 속성의 `eventCache`합니다.|  
|`CorrelationID`|경우는 <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|합니다 <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> 속성의 `eventCache`합니다.|  
|`DateTime`|경우는 <xref:System.Diagnostics.TraceOptions.DateTime> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|문자열 표현 합니다 <xref:System.Diagnostics.TraceEventCache.DateTime%2A> 속성의 `eventCache`합니다. 고정 문화권 문자열 변환을 위해 사용 됩니다.|  
|`ProcessID`|경우는 <xref:System.Diagnostics.TraceOptions.ProcessId> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|문자열 표현 합니다 <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> 속성의 `eventCache`합니다. 고정 문화권 문자열 변환을 위해 사용 됩니다.|  
|`ThreadID`|경우는 <xref:System.Diagnostics.TraceOptions.ThreadId> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|합니다 <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> 속성의 `eventCache`합니다.|  
|`Timestamp`|경우는 <xref:System.Diagnostics.TraceOptions.Timestamp> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|문자열 표현 합니다 <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> 속성의 `eventCache`합니다. 고정 문화권 문자열 변환을 위해 사용 됩니다.|  
|`HostName`|경우는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> 속성은 `True`합니다.|컴퓨터의 이름입니다.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>추적 및 이벤트 정보를 출력 파일이나 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> 응용 프로그램 코드에서 호출할 메서드를 사용 하는 것이 없습니다. 멤버에 의해 이러한 메서드를 호출 합니다 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource> 추적 데이터를 출력을 작성 하는 클래스입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">현재 프로세스 ID, 스레드 ID 및 스택 추적 정보가 포함된 <see cref="T:System.Diagnostics.TraceEventCache" /> 개체입니다.</param>
        <param name="source">이 메서드를 호출한 추적 소스의 이름입니다.</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 열거형 값 중 하나입니다.</param>
        <param name="id">이벤트의 숫자 식별자입니다.</param>
        <param name="message">쓸 메시지입니다.</param>
        <summary>추적 정보, 메시지 및 이벤트 정보를 출력 파일이나 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 방법:  
  
1.  출력에 대 한 데이터 및 컨텍스트 정보 형식을 지정합니다.  
  
2.  필요한 경우 새 로그 파일을 만듭니다.  
  
3.  로그 파일에 정보를 씁니다.  
  
 새 로그 파일을 만드는 방법에 대 한 자세한 내용은 참조 하세요. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>합니다.  
  
 이 테이블에 나타나는 순서 대로 출력 필드를 나열 합니다. 필드는 문자열을 구분 하는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> 속성을 지정 하 고 뒤에 줄 종결자입니다.  
  
|**필드**|**출력 조건**|**설명**|  
|---------------|--------------------------|---------------------|  
|`source`|항상|`name`의 값|  
|`severity`|항상|열거형 값 이름을 `eventType`입니다.|  
|`id`|항상|`id`의 문자열 표현입니다.|  
|`message`|항상|`message`의 값|  
|`callStack`|경우는 <xref:System.Diagnostics.TraceOptions.Callstack> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|합니다 <xref:System.Diagnostics.TraceEventCache.Callstack%2A> 속성의 `eventCache`합니다.|  
|`CorrelationID`|경우는 <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|합니다 <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> 속성의 `eventCache`합니다.|  
|`DateTime`|경우는 <xref:System.Diagnostics.TraceOptions.DateTime> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|문자열 표현 합니다 <xref:System.Diagnostics.TraceEventCache.DateTime%2A> 속성의 `eventCache`합니다. 고정 문화권 문자열 변환을 위해 사용 됩니다.|  
|`ProcessID`|경우는 <xref:System.Diagnostics.TraceOptions.ProcessId> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|문자열 표현 합니다 <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> 속성의 `eventCache`합니다. 고정 문화권 문자열 변환을 위해 사용 됩니다.|  
|`ThreadID`|경우는 <xref:System.Diagnostics.TraceOptions.ThreadId> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|합니다 <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> 속성의 `eventCache`합니다.|  
|`Timestamp`|경우는 <xref:System.Diagnostics.TraceOptions.Timestamp> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|문자열 표현 합니다 <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> 속성의 `eventCache`합니다. 고정 문화권 문자열 변환을 위해 사용 됩니다.|  
|`HostName`|경우는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> 속성은 `True`합니다.|컴퓨터의 이름입니다.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">현재 프로세스 ID, 스레드 ID 및 스택 추적 정보가 포함된 <see cref="T:System.Diagnostics.TraceEventCache" /> 개체입니다.</param>
        <param name="source">이 메서드를 호출한 추적 소스의 이름입니다.</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 열거형 값 중 하나입니다.</param>
        <param name="id">이벤트의 숫자 식별자입니다.</param>
        <param name="format"><paramref name="args" /> 배열에 들어 있는 개체에 해당하는 0개 이상의 형식 항목이 포함된 형식 문자열입니다.</param>
        <param name="args">형식을 지정할 개체를 0개 이상 포함하는 <see langword="Object" /> 배열입니다.</param>
        <summary>추적 정보, 형식 지정된 개체 배열 및 이벤트 정보를 출력 파일이나 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 방법:  
  
1.  출력에 대 한 데이터 및 컨텍스트 정보 형식을 지정합니다.  
  
2.  새 새 로그 파일을 필요한 경우 만듭니다.  
  
3.  로그 파일에 정보를 씁니다.  
  
 새 로그 파일을 만드는 방법에 대 한 자세한 내용은 참조 하세요. <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>합니다.  
  
 이 테이블에 나타나는 순서 대로 출력 필드를 나열 합니다. 필드는 문자열을 구분 하는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> 속성을 지정 하 고 뒤에 줄 종결자입니다.  
  
|**필드**|**출력 조건**|**설명**|  
|---------------|--------------------------|---------------------|  
|`source`|Always|`name`의 값|  
|`severity`|Always|열거형 값 이름을 `eventType`입니다.|  
|`id`|Always|`id`의 문자열 표현입니다.|  
|`message`|Always|데이터 `args` 로 포맷 합니다 `format` 문자열과 고정 문화권을 사용 하 여 문자열 변환에 대 한 합니다.|  
|`callStack`|경우는 <xref:System.Diagnostics.TraceOptions.Callstack> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|합니다 <xref:System.Diagnostics.TraceEventCache.Callstack%2A> 속성의 `eventCache`합니다.|  
|`CorrelationID`|경우는 <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|합니다 <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> 속성의 `eventCache`합니다.|  
|`DateTime`|경우는 <xref:System.Diagnostics.TraceOptions.DateTime> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|문자열 표현 합니다 <xref:System.Diagnostics.TraceEventCache.DateTime%2A> 속성의 `eventCache`합니다. 고정 문화권 문자열 변환을 위해 사용 됩니다.|  
|`ProcessID`|경우는 <xref:System.Diagnostics.TraceOptions.ProcessId> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|문자열 표현 합니다 <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> 속성의 `eventCache`합니다. 고정 문화권 문자열 변환을 위해 사용 됩니다.|  
|`ThreadID`|경우는 <xref:System.Diagnostics.TraceOptions.ThreadId> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|합니다 <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> 속성의 `eventCache`합니다.|  
|`Timestamp`|경우는 <xref:System.Diagnostics.TraceOptions.Timestamp> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성.|문자열 표현 합니다 <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> 속성의 `eventCache`합니다. 고정 문화권 문자열 변환을 위해 사용 됩니다.|  
|`HostName`|경우는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> 속성은 `True`합니다.|컴퓨터의 이름입니다.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="fileLogTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><see langword="String" />. 쓸 사용자 지정 메시지입니다.</param>
        <summary>추가 컨텍스트 정보 없이 디스크에 약어 메시지를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A> 메서드 추가 컨텍스트 정보 없이 로그 파일을 특정 메시지를 씁니다.  
  
 중 하나를 사용 합니다 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> 로그 출력에 컨텍스트 정보를 포함 하는 방법입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="fileLogTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><see langword="String" />. 쓸 사용자 지정 메시지입니다.</param>
        <summary>추가 컨텍스트 정보 없이 디스크에 약어 메시지를 씁니다. 메시지 다음에는 현재 줄 종결자가 표시됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A> 메서드 추가 컨텍스트 정보 없이 로그 파일을 특정 메시지를 씁니다.  
  
 중 하나를 사용 합니다 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> 로그 출력에 컨텍스트 정보를 포함 하는 방법입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>