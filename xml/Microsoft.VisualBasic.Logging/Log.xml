<Type Name="Log" FullName="Microsoft.VisualBasic.Logging.Log">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4887174e081b6a4a938d5fa3843766d3f9961379" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55348893" /></Metadata><TypeSignature Language="C#" Value="public class Log" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Log extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.Log" />
  <TypeSignature Language="VB.NET" Value="Public Class Log" />
  <TypeSignature Language="C++ CLI" Value="public ref class Log" />
  <TypeSignature Language="F#" Value="type Log = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>이벤트와 예외 정보를 애플리케이션의 로그 수신기에 쓰기 위한 속성과 메서드를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `My.Application.Log` 개체에 액세스할 수 있는에서 간단 하 게 진입점을 제공 합니다 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]의 로깅 서비스입니다. 합니다 `WriteEntry` 고 `WriteException` 메서드는 애플리케이션의 로그 수신기에 메시지를 씁니다. 애플리케이션의 구성 파일에서 수신기를 구성할 수 있습니다. 자세한 내용은 [연습: 변경 Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md) 하 고 [애플리케이션 로그 작업](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)합니다.  
  
 `My.Application.Log` 개체가 클라이언트 애플리케이션 에서만 사용할 수 있습니다. 웹 애플리케이션을 사용 하 여 `My.Log`입니다. 자세한 내용은 <xref:Microsoft.VisualBasic.Logging.AspLog>을 참조하세요.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Application.Log` 개체입니다.  
  
|대상|참조|  
|--------|---------|  
|애플리케이션의 로그 수신기에 이벤트 정보 쓰기|[방법: 로그 메시지 쓰기](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|애플리케이션의 로그 수신기에 예외 정보를 기록 합니다.|[방법: 예외 기록](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|위치를 결정 `My.Application.Log` 정보 기록|[연습: My.Application.Log가 정보를 기록하는 위치 확인](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
   
  
## Examples  
 이 예제에서는 `My.Application.Log.WriteEntry` 메서드를 사용하여 추적 정보를 기록하는 방법을 보여 줍니다. 자세한 내용은 [방법: 로그 메시지 쓰기](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)합니다.  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:Microsoft.VisualBasic.Logging.Log" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:Microsoft.VisualBasic.Logging.Log" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.Log : string -&gt; Microsoft.VisualBasic.Logging.Log" Usage="new Microsoft.VisualBasic.Logging.Log name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><see cref="T:System.String" />. <see cref="P:Microsoft.VisualBasic.Logging.Log.TraceSource" /> 속성 개체에 지정할 이름입니다.</param>
        <summary><see cref="T:Microsoft.VisualBasic.Logging.Log" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultFileLogWriter">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultFileLogWriter As FileLogTraceListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::FileLogTraceListener ^ DefaultFileLogWriter { Microsoft::VisualBasic::Logging::FileLogTraceListener ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultFileLogWriter : Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.FileLogTraceListener</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Log" /> 개체의 기반이 되는 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 개체 파일을 가져옵니다.</summary>
        <value>합니다 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 개체의 기반이 되는 <see langword="Log" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 구성을 확인 하려면이 속성을 사용할 수는 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 개체입니다.  
  
 클라이언트 애플리케이션에는 `Log` 개체를 통해 사용할 수는 `My.Application.Log` 개체입니다. 웹 애플리케이션에는 `Log` 개체를 통해 사용할 수는 `My.Log` 개체입니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ac6eb760-3d5d-461e-aedd-40599ee22e49">문제 해결: 로그 수신기</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeWithDefaultsSinceNoConfigExists">
      <MemberSignature Language="C#" Value="protected internal virtual void InitializeWithDefaultsSinceNoConfigExists ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblynewslot virtual instance void InitializeWithDefaultsSinceNoConfigExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub InitializeWithDefaultsSinceNoConfigExists ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void InitializeWithDefaultsSinceNoConfigExists();" />
      <MemberSignature Language="F#" Value="abstract member InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit&#xA;override this.InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit" Usage="log.InitializeWithDefaultsSinceNoConfigExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>새 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 개체를 만들어 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 컬렉션에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 만듭니다 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>에 해당 이름을 설정 `FileLog`, 심각도 사용 하 여 메시지를 기록 하도록 구성 <xref:System.Diagnostics.SourceLevels.Information> 이상. 새 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 개체에 추가 되는 <xref:System.Diagnostics.TraceSource.Listeners%2A> 컬렉션입니다.  
  
 합니다 <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> 메서드를 호출 하는 경우는 <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> 속성 구성 되지 않았습니다. 애플리케이션의 구성 파일에 추적 소스를 구성할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="TraceSource">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceSource TraceSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.TraceSource TraceSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceSource As TraceSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceSource ^ TraceSource { System::Diagnostics::TraceSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TraceSource : System.Diagnostics.TraceSource" Usage="Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Log" /> 개체의 기반이 되는 <see cref="T:System.Diagnostics.TraceSource" /> 개체를 가져옵니다.</summary>
        <value>합니다 <see cref="T:System.Diagnostics.TraceSource" /> 개체의 기반이 되는 <see langword="Log" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 구성을 확인 하려면이 속성을 사용할 수는 `Log` 개체입니다.  
  
 클라이언트 애플리케이션에는 `Log` 개체를 통해 사용할 수는 `My.Application.Log` 개체입니다. 웹 애플리케이션에는 `Log` 개체를 통해 사용할 수는 `My.Log` 개체입니다.  
  
 이 메서드는 고급 멤버; 선택 하지 않으면 IntelliSense에 표시 되지 않습니다 합니다 **모든** 탭 합니다.  
  
 다음 표에서 관련 된 작업의 예로 `TraceSource` 속성입니다.  
  
|대상|보기|  
|--------|---------|  
|각각에 대 한 정보는 `Log` 개체의 로그 수신기입니다.|[문제 해결: 로그 수신기](~/docs/visual-basic/developing-apps/programming/log-info/troubleshooting-log-listeners.md)|  
  
## <a name="availability-by-project-type"></a>프로젝트 형식에 따라 가용성  
  
|프로젝트 형식|사용 가능|  
|------------------|---------------|  
|Windows 애플리케이션|**예**|  
|클래스 라이브러리|**예**|  
|콘솔 애플리케이션|**예**|  
|Windows 컨트롤 라이브러리|**예**|  
|웹 컨트롤 라이브러리|아니요|  
|Windows 서비스|**예**|  
|웹 사이트|**예**|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSource" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ac6eb760-3d5d-461e-aedd-40599ee22e49">문제 해결: 로그 수신기</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteEntry">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>애플리케이션의 로그 수신기에 메시지를 씁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string -&gt; unit" Usage="log.WriteEntry message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">필수. 기록할 메시지입니다. <paramref name="message" />가 <see langword="Nothing" />이면 빈 문자열이 사용됩니다.</param>
        <summary>애플리케이션의 로그 수신기에 메시지를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry` 메서드는 애플리케이션의 이벤트 로그 수신기에 메시지를 기록 합니다.  
  
 클라이언트 애플리케이션에는 `Log` 개체를 통해 사용할 수는 `My.Application.Log` 개체입니다. 웹 애플리케이션에는 `Log` 개체를 통해 사용할 수는 `My.Log` 개체입니다.  
  
 수신기는 로그에 대해 알아보려면 수신 합니다 `WriteEntry` 메서드의 메시지를 참조 하세요 [연습: 결정 Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)합니다. 기본 로그 수신기를 변경할 수 있습니다. 자세한 내용은 [애플리케이션 로그 작업](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)을 참조하세요.  
  
 사용 하지 않는 오버 로드에 대 한는 `id` 인수를는 `id` 쓸 로그는 다음 표에 정의 됩니다.  
  
|`severity`|기본 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|10|  
  
 다음 표에서 관련 된 작업의 예제는 `WriteEntry` 메서드.  
  
|대상|참조|  
|--------|---------|  
|애플리케이션의 로그 수신기에 이벤트 정보 쓰기|[방법: 로그 메시지 쓰기](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|위치를 결정 `Log` 정보 기록|[연습: My.Application.Log가 정보를 기록하는 위치 확인](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>프로젝트 형식에 따라 가용성  
  
|프로젝트 형식|사용 가능|  
|------------------|---------------|  
|Windows 애플리케이션|**예**|  
|클래스 라이브러리|**예**|  
|콘솔 애플리케이션|**예**|  
|Windows 컨트롤 라이브러리|**예**|  
|웹 컨트롤 라이브러리|아니요|  
|Windows 서비스|**예**|  
|웹 사이트|**예**|  
  
   
  
## Examples  
 이 예제에서는 `My.Application.Log.WriteEntry` 메서드를 사용하여 추적 정보를 기록하는 방법을 보여 줍니다. 자세한 내용은 [방법: 로그 메시지 쓰기](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)합니다.  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 이 코드 예제에서는 클라이언트 애플리케이션 내 에서만 실행할 수 있습니다. 변경 `My.Application.Log.WriteEntry` 에 `My.Log.WriteEntry` 웹 애플리케이션에 대 한 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">부분 신뢰 코드에서 메서드를 호출하지만 완전 신뢰가 필요한 이벤트 로그 수신기에 기록하는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Visual Basic에서 애플리케이션 로그 작업</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">방법: 로그 메시지 쓰기</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">연습: My.Application.Log가 정보를 기록하는 위치 확인</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType -&gt; unit" Usage="log.WriteEntry (message, severity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
      </Parameters>
      <Docs>
        <param name="message">필수. 기록할 메시지입니다. <paramref name="message" />가 <see langword="Nothing" />이면 빈 문자열이 사용됩니다.</param>
        <param name="severity">메시지의 형식입니다. 기본적으로 <see langword="TraceEventType.Information" />입니다.</param>
        <summary>애플리케이션의 로그 수신기에 메시지를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry` 메서드는 애플리케이션의 이벤트 로그 수신기에 메시지를 기록 합니다.  
  
 클라이언트 애플리케이션에는 `Log` 개체를 통해 사용할 수는 `My.Application.Log` 개체입니다. 웹 애플리케이션에는 `Log` 개체를 통해 사용할 수는 `My.Log` 개체입니다.  
  
 수신기는 로그에 대해 알아보려면 수신 합니다 `WriteEntry` 메서드의 메시지를 참조 하세요 [연습: 결정 Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)합니다. 기본 로그 수신기를 변경할 수 있습니다. 자세한 내용은 [애플리케이션 로그 작업](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)을 참조하세요.  
  
 사용 하지 않는 오버 로드에 대 한는 `id` 인수를는 `id` 쓸 로그는 다음 표에 정의 됩니다.  
  
|`severity`|기본 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|10|  
  
 다음 표에서 관련 된 작업의 예제는 `WriteEntry` 메서드.  
  
|대상|참조|  
|--------|---------|  
|애플리케이션의 로그 수신기에 이벤트 정보 쓰기|[방법: 로그 메시지 쓰기](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|위치를 결정 `Log` 정보 기록|[연습: My.Application.Log가 정보를 기록하는 위치 확인](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>프로젝트 형식에 따라 가용성  
  
|프로젝트 형식|사용 가능|  
|------------------|---------------|  
|Windows 애플리케이션|**예**|  
|클래스 라이브러리|**예**|  
|콘솔 애플리케이션|**예**|  
|Windows 컨트롤 라이브러리|**예**|  
|웹 컨트롤 라이브러리|아니요|  
|Windows 서비스|**예**|  
|웹 사이트|**예**|  
  
   
  
## Examples  
 이 예제에서는 `My.Application.Log.WriteEntry` 메서드를 사용하여 추적 정보를 기록하는 방법을 보여 줍니다. 자세한 내용은 [방법: 로그 메시지 쓰기](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)합니다.  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 이 코드 예제에서는 클라이언트 애플리케이션 내 에서만 실행할 수 있습니다. 변경 `My.Application.Log.WriteEntry` 에 `My.Log.WriteEntry` 웹 애플리케이션에 대 한 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">메시지 형식이 <see cref="T:System.Diagnostics.TraceEventType" /> 열거형 값 중 하나가 아닌 경우</exception>
        <exception cref="T:System.Security.SecurityException">부분 신뢰 코드에서 메서드를 호출하지만 완전 신뢰가 필요한 이벤트 로그 수신기에 기록하는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Visual Basic에서 애플리케이션 로그 작업</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">방법: 로그 메시지 쓰기</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">연습: My.Application.Log가 정보를 기록하는 위치 확인</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType * int -&gt; unit" Usage="log.WriteEntry (message, severity, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">필수. 기록할 메시지입니다. <paramref name="message" />가 <see langword="Nothing" />이면 빈 문자열이 사용됩니다.</param>
        <param name="severity">메시지의 형식입니다. 기본적으로 <see langword="TraceEventType.Information" />입니다.</param>
        <param name="id">일반적으로 상관 관계에 사용되는 메시지 식별자입니다. 기본적으로 표에 설명된 대로 <c>entryType</c>과 관련이 있습니다.</param>
        <summary>애플리케이션의 로그 수신기에 메시지를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry` 메서드는 애플리케이션의 이벤트 로그 수신기에 메시지를 기록 합니다.  
  
 클라이언트 애플리케이션에는 `Log` 개체를 통해 사용할 수는 `My.Application.Log` 개체입니다. 웹 애플리케이션에는 `Log` 개체를 통해 사용할 수는 `My.Log` 개체입니다.  
  
 수신기는 로그에 대해 알아보려면 수신 합니다 `WriteEntry` 메서드의 메시지를 참조 하세요 [연습: 결정 Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)합니다. 기본 로그 수신기를 변경할 수 있습니다. 자세한 내용은 [애플리케이션 로그 작업](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)을 참조하세요.  
  
 사용 하지 않는 오버 로드에 대 한는 `id` 인수를는 `id` 쓸 로그는 다음 표에 정의 됩니다.  
  
|`severity`|기본 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|10|  
  
 다음 표에서 관련 된 작업의 예제는 `WriteEntry` 메서드.  
  
|대상|참조|  
|--------|---------|  
|애플리케이션의 로그 수신기에 이벤트 정보 쓰기|[방법: 로그 메시지 쓰기](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|위치를 결정 `Log` 정보 기록|[연습: My.Application.Log가 정보를 기록하는 위치 확인](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>프로젝트 형식에 따라 가용성  
  
|프로젝트 형식|사용 가능|  
|------------------|---------------|  
|Windows 애플리케이션|**예**|  
|클래스 라이브러리|**예**|  
|콘솔 애플리케이션|**예**|  
|Windows 컨트롤 라이브러리|**예**|  
|웹 컨트롤 라이브러리|아니요|  
|Windows 서비스|**예**|  
|웹 사이트|**예**|  
  
   
  
## Examples  
 이 예제에서는 `My.Application.Log.WriteEntry` 메서드를 사용하여 추적 정보를 기록하는 방법을 보여 줍니다. 자세한 내용은 [방법: 로그 메시지 쓰기](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)합니다.  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 이 코드 예제에서는 클라이언트 애플리케이션 내 에서만 실행할 수 있습니다. 변경 `My.Application.Log.WriteEntry` 에 `My.Log.WriteEntry` 웹 애플리케이션에 대 한 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">메시지 형식이 <see cref="T:System.Diagnostics.TraceEventType" /> 열거형 값 중 하나가 아닌 경우</exception>
        <exception cref="T:System.Security.SecurityException">부분 신뢰 코드에서 메서드를 호출하지만 완전 신뢰가 필요한 이벤트 로그 수신기에 기록하는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Visual Basic에서 애플리케이션 로그 작업</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">방법: 로그 메시지 쓰기</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">연습: My.Application.Log가 정보를 기록하는 위치 확인</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteException">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>애플리케이션의 로그 수신기에 예외 정보를 씁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception -&gt; unit" Usage="log.WriteException ex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">필수. 기록할 예외입니다.</param>
        <summary>애플리케이션의 로그 수신기에 예외 정보를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException` 메서드는 애플리케이션 이벤트 로그 수신기는 예외에 포함 된 정보를 씁니다.  
  
 클라이언트 애플리케이션에는 `Log` 개체를 통해 사용할 수는 `My.Application.Log` 개체입니다. 웹 애플리케이션에는 `Log` 개체를 통해 사용할 수는 `My.Log` 개체입니다.  
  
 수신기는 로그에 대해 알아보려면 수신 합니다 `WriteException` 메서드의 메시지를 참조 하세요 [연습: 결정 Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)합니다. 기본 로그 수신기를 변경할 수 있습니다. 자세한 내용은 [애플리케이션 로그 작업](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)을 참조하세요.  
  
 사용 하지 않는 오버 로드에 대해는 `id` 인수를 로그에 기록 된 식별자는 다음 표에 정의 됩니다.  
  
|`severity`|기본 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|10|  
  
 다음 표에서 관련 된 작업의 예제는 `WriteException` 메서드.  
  
|대상|보기|  
|--------|---------|  
|애플리케이션의 이벤트 로그 수신기에 예외 정보를 씁니다.|[방법: 예외 기록](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|`Log`가 정보를 쓰는 위치를 확인합니다.|[연습: My.Application.Log가 정보를 기록하는 위치 확인](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>프로젝트 형식에 따라 가용성  
  
|프로젝트 형식|사용 가능|  
|------------------|---------------|  
|Windows 애플리케이션|**예**|  
|클래스 라이브러리|**예**|  
|콘솔 애플리케이션|**예**|  
|Windows 컨트롤 라이브러리|**예**|  
|웹 컨트롤 라이브러리|아니요|  
|Windows 서비스|**예**|  
|웹 사이트|**예**|  
  
   
  
## Examples  
 사용 하는 방법을 보여 주는이 예제는 `My.Application.Log.WriteException` 예외를 기록 하는 방법입니다. `Dim` 및 `MsgBox` 줄의 주석 처리를 제거하여 <xref:System.NullReferenceException> 예외를 발생시킵니다. 자세한 내용은 [방법: 예외 기록](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)합니다.  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 이 코드 예제에서는 클라이언트 애플리케이션 내 에서만 실행할 수 있습니다. 변경 `My.Application.Log.WriteException` 에 `My.Log.WriteException` 웹 애플리케이션에 대 한 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ex" />가 <see langword="Nothing" />인 경우</exception>
        <exception cref="T:System.Security.SecurityException">부분 신뢰 코드에서 메서드를 호출하지만 완전 신뢰가 필요한 이벤트 로그 수신기에 기록하는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Visual Basic에서 애플리케이션 로그 작업</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">방법: Visual Basic에서 예외 기록</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">연습: My.Application.Log가 정보를 기록하는 위치 확인</related>
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ex">필수. 기록할 예외입니다.</param>
        <param name="severity">메시지의 형식입니다. 기본적으로 <see cref="F:System.Diagnostics.TraceEventType.Error" />입니다.</param>
        <param name="additionalInfo">메시지에 추가할 문자열입니다. 기본값은 빈 문자열입니다.</param>
        <summary>애플리케이션의 로그 수신기에 예외 정보를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException` 메서드는 애플리케이션 이벤트 로그 수신기는 예외에 포함 된 정보를 씁니다.  
  
 클라이언트 애플리케이션에는 `Log` 개체를 통해 사용할 수는 `My.Application.Log` 개체입니다. 웹 애플리케이션에는 `Log` 개체를 통해 사용할 수는 `My.Log` 개체입니다.  
  
 수신기는 로그에 대해 알아보려면 수신 합니다 `WriteException` 메서드의 메시지를 참조 하세요 [연습: 결정 Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)합니다. 기본 로그 수신기를 변경할 수 있습니다. 자세한 내용은 [애플리케이션 로그 작업](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)을 참조하세요.  
  
 사용 하지 않는 오버 로드에 대해는 `id` 인수를 로그에 기록 된 식별자는 다음 표에 정의 됩니다.  
  
|`severity`|기본 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|10|  
  
 다음 표에서 관련 된 작업의 예제는 `WriteException` 메서드.  
  
|대상|보기|  
|--------|---------|  
|애플리케이션의 이벤트 로그 수신기에 예외 정보를 씁니다.|[방법: 예외 기록](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|`Log`가 정보를 쓰는 위치를 확인합니다.|[연습: My.Application.Log가 정보를 기록하는 위치 확인](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>프로젝트 형식에 따라 가용성  
  
|프로젝트 형식|사용 가능|  
|------------------|---------------|  
|Windows 애플리케이션|**예**|  
|클래스 라이브러리|**예**|  
|콘솔 애플리케이션|**예**|  
|Windows 컨트롤 라이브러리|**예**|  
|웹 컨트롤 라이브러리|아니요|  
|Windows 서비스|**예**|  
|웹 사이트|**예**|  
  
   
  
## Examples  
 사용 하는 방법을 보여 주는이 예제는 `My.Application.Log.WriteException` 예외를 기록 하는 방법입니다. `Dim` 및 `MsgBox` 줄의 주석 처리를 제거하여 <xref:System.NullReferenceException> 예외를 발생시킵니다. 자세한 내용은 [방법: 예외 기록](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)합니다.  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 이 코드 예제에서는 클라이언트 애플리케이션 내 에서만 실행할 수 있습니다. 변경 `My.Application.Log.WriteException` 에 `My.Log.WriteException` 웹 애플리케이션에 대 한 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ex" />가 <see langword="Nothing" />인 경우</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">메시지 형식이 <see cref="T:System.Diagnostics.TraceEventType" /> 열거형 값 중 하나가 아닌 경우</exception>
        <exception cref="T:System.Security.SecurityException">부분 신뢰 코드에서 메서드를 호출하지만 완전 신뢰가 필요한 이벤트 로그 수신기에 기록하는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Visual Basic에서 애플리케이션 로그 작업</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">방법: Visual Basic에서 예외 기록</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">연습: My.Application.Log가 정보를 기록하는 위치 확인</related>
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string * int -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ex">필수. 기록할 예외입니다.</param>
        <param name="severity">메시지의 형식입니다. 기본적으로 <see cref="F:System.Diagnostics.TraceEventType.Error" />입니다.</param>
        <param name="additionalInfo">메시지에 추가할 문자열입니다. 기본값은 빈 문자열입니다.</param>
        <param name="id">일반적으로 상관 관계에 사용되는 메시지 식별자입니다. 기본적으로 설명 부분에 있는 표에 설명된 대로 <c>entryType</c>과 관련이 있습니다.</param>
        <summary>애플리케이션의 로그 수신기에 예외 정보를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException` 메서드는 애플리케이션 이벤트 로그 수신기는 예외에 포함 된 정보를 씁니다.  
  
 클라이언트 애플리케이션에는 `Log` 개체를 통해 사용할 수는 `My.Application.Log` 개체입니다. 웹 애플리케이션에는 `Log` 개체를 통해 사용할 수는 `My.Log` 개체입니다.  
  
 수신기는 로그에 대해 알아보려면 수신 합니다 `WriteException` 메서드의 메시지를 참조 하세요 [연습: 결정 Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)합니다. 기본 로그 수신기를 변경할 수 있습니다. 자세한 내용은 [애플리케이션 로그 작업](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)을 참조하세요.  
  
 사용 하지 않는 오버 로드에 대해는 `id` 인수를 로그에 기록 된 식별자는 다음 표에 정의 됩니다.  
  
|`severity`|기본 `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|10|  
  
 다음 표에서 관련 된 작업의 예제는 `WriteException` 메서드.  
  
|대상|보기|  
|--------|---------|  
|애플리케이션의 이벤트 로그 수신기에 예외 정보를 씁니다.|[방법: 예외 기록](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|`Log`가 정보를 쓰는 위치를 확인합니다.|[연습: My.Application.Log가 정보를 기록하는 위치 확인](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>프로젝트 형식에 따라 가용성  
  
|프로젝트 형식|사용 가능|  
|------------------|---------------|  
|Windows 애플리케이션|**예**|  
|클래스 라이브러리|**예**|  
|콘솔 애플리케이션|**예**|  
|Windows 컨트롤 라이브러리|**예**|  
|웹 컨트롤 라이브러리|아니요|  
|Windows 서비스|**예**|  
|웹 사이트|**예**|  
  
   
  
## Examples  
 사용 하는 방법을 보여 주는이 예제는 `My.Application.Log.WriteException` 예외를 기록 하는 방법입니다. `Dim` 및 `MsgBox` 줄의 주석 처리를 제거하여 <xref:System.NullReferenceException> 예외를 발생시킵니다. 자세한 내용은 [방법: 예외 기록](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)합니다.  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 이 코드 예제에서는 클라이언트 애플리케이션 내 에서만 실행할 수 있습니다. 변경 `My.Application.Log.WriteException` 에 `My.Log.WriteException` 웹 애플리케이션에 대 한 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ex" />가 <see langword="Nothing" />인 경우</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">메시지 형식이 <see cref="T:System.Diagnostics.TraceEventType" /> 열거형 값 중 하나가 아닌 경우</exception>
        <exception cref="T:System.Security.SecurityException">부분 신뢰 코드에서 메서드를 호출하지만 완전 신뢰가 필요한 이벤트 로그 수신기에 기록하는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Visual Basic에서 애플리케이션 로그 작업</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">방법: Visual Basic에서 예외 기록</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">연습: My.Application.Log가 정보를 기록하는 위치 확인</related>
      </Docs>
    </Member>
  </Members>
</Type>