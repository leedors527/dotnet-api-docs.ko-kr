<Type Name="FileSystemProxy" FullName="Microsoft.VisualBasic.MyServices.FileSystemProxy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="97a1b6fb2067ee561a33673df5beabe5d4526fbc" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57926984" /></Metadata><TypeSignature Language="C#" Value="public class FileSystemProxy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FileSystemProxy extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.MyServices.FileSystemProxy" />
  <TypeSignature Language="VB.NET" Value="Public Class FileSystemProxy" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystemProxy" />
  <TypeSignature Language="F#" Value="type FileSystemProxy = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>드라이브, 파일 및 디렉터리를 사용하기 위한 속성 및 메서드를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem` 개체입니다.  
  
|대상|참조|  
|--------|---------|  
|텍스트 파일에서 읽기|[방법: 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
|구분 기호로 분리 된 텍스트 파일에서 읽기|[방법: 쉼표로 구분된 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|고정 너비 텍스트 파일에서 읽기|[방법: 고정 너비 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|여러 형식의 텍스트 파일에서 읽기|[방법: 여러 형식의 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
|이진 파일에서 읽기|[방법: 이진 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-binary-files.md)|  
|사용 하 여 텍스트 파일에서 읽기를 <xref:System.IO.StreamReader>|[방법: StreamReader를 사용하여 파일에서 텍스트 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
|텍스트 파일에 쓰기|[방법: 파일에 텍스트 쓰기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|텍스트 파일에 추가 합니다.|[방법: 텍스트 파일에 추가](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
|이진 파일에 쓰기|[방법: 이진 파일에 쓰기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files.md)|  
|텍스트 파일에 쓰기를 **MyDocuments** 디렉터리|[방법: 내 문서 디렉터리의 파일에 텍스트 쓰기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-in-the-my-documents-directory.md)|  
|사용 하 여 텍스트 파일에 쓰기를 `StreamWriter`|[방법: StreamWriter를 사용하여 파일에 텍스트 쓰기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
|특정 패턴을 사용 하 여 파일 복사|[방법: 특정 패턴의 파일을 디렉터리에 복사](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md)|  
|동일한 디렉터리에 파일을 복사 합니다.|[방법: 동일한 디렉터리에 파일의 복사본 만들기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|다른 디렉터리에 파일을 복사 합니다.|[방법: 다른 디렉터리에 파일의 복사본 만들기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
|파일 만들기|[방법: 파일 만들기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-file.md)|  
|파일 삭제|[방법: 파일 삭제](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
|특정 패턴의 파일 찾기|[방법: 특정 패턴의 파일 찾기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
|파일 이동|[방법: 파일 이동](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
|파일 이름 바꾸기|[방법: 파일 이름 바꾸기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md)|  
|디렉터리를 다른 디렉터리에 복사|[방법: 디렉터리를 다른 디렉터리에 복사](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
|디렉터리 만들기|[방법: 디렉터리 만들기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md)|  
|특정 패턴의 하위 디렉터리 찾기|[방법: 특정 패턴의 하위 디렉터리 찾기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
|디렉터리에 있는 파일의 컬렉션을 가져옵니다.|[방법: 디렉터리의 파일 컬렉션 가져오기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|읽기를 **MyDocuments** 디렉터리|[방법: 내 문서 디렉터리의 내용 검색](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-retrieve-the-contents-of-the-my-documents-directory.md)|  
|파일 경로 구문 분석|[방법: 파일 경로의 구문 분석](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 이 예제에서는 확인 하려면 확인 여부를 폴더 `C:\backup\logs` 존재 하 고 해당 속성을 확인 합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#23)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" />
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
  </Docs>
  <Members>
    <Member MemberName="CombinePath">
      <MemberSignature Language="C#" Value="public string CombinePath (string baseDirectory, string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string CombinePath(string baseDirectory, string relativePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CombinePath(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CombinePath (baseDirectory As String, relativePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ CombinePath(System::String ^ baseDirectory, System::String ^ relativePath);" />
      <MemberSignature Language="F#" Value="member this.CombinePath : string * string -&gt; string" Usage="fileSystemProxy.CombinePath (baseDirectory, relativePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseDirectory" Type="System.String" />
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseDirectory"><see langword="String" />. 결합할 첫 번째 경로입니다.</param>
        <param name="relativePath"><see langword="String" />. 결합할 두 번째 경로입니다.</param>
        <summary>두 경로를 결합하여 올바른 형식의 경로를 반환합니다.</summary>
        <returns>지정된 경로의 조합입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 올바른 형식의 경로 만들려면 과도 한 슬래시 문자를 삭제 합니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.CombinePath` 메서드.  
  
|대상|참조|  
|--------|---------|  
|디렉터리 경로 파일 이름을 결합합니다|[방법: 파일 경로의 구문 분석](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 이 예제에서는 올바른 형식의 경로 만들려면 디렉터리 경로 파일 이름을 결합 합니다.  
  
 [!code-vb[VbRefFile#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#3)]  
  
 이 예제에서는 올바른 형식의 경로 만들려면 두 경로 결합 합니다.  
  
 [!code-vb[VbRefFile#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#4)]  
  
 이 예제에서는 반환 `C:\Dir1\Dir2\Dir4\Dir5\File.txt`합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="baseDirectory" /> 또는  <paramref name="relativePath" />에 잘못된 경로가 있습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>디렉터리를 다른 디렉터리에 복사합니다.</summary>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">방법: Visual Basic에서 디렉터리의 파일 컬렉션 가져오기</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="member this.CopyDirectory : string * string -&gt; unit" Usage="fileSystemProxy.CopyDirectory (sourceDirectoryName, destinationDirectoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">복사할 디렉터리입니다.</param>
        <param name="destinationDirectoryName">디렉터리가 복사될 위치입니다.</param>
        <summary>디렉터리를 다른 디렉터리에 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 디렉터리 자체뿐만 아니라 디렉터리 내용을 복사합니다. 대상 디렉터리가 없으면 자동으로 만들어집니다. 동일한 이름의 디렉터리가 대상 위치에 있는 경우 두 디렉터리의 내용은 병합 됩니다. 작업 중에 디렉터리의 새 이름을 지정할 수 있습니다.  
  
 디렉터리 내의 파일을 복사할 때 예외가 throw 될 수 있습니다 발생 하는 특정 파일입니다. 이러한 예외가 throw 되는 통합는 단일 예외에 해당 `Data` 형식의 항목을 보유 한 속성을 <xref:System.Collections.IDictionary> 파일 또는 디렉터리 경로가 키가 고 특정 예외 메시지에 포함 된를 해당 값입니다. 사용 하 여 `For…Each` 항목을 열거 합니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.CopyDirectory` 메서드.  
  
|대상|참조|  
|--------|---------|  
|디렉터리 복사|[방법: 디렉터리를 다른 디렉터리에 복사](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 다음 예제에서는 디렉터리에 복사 합니다 `TestDirectory1` 에 `TestDirectory2`, 기존 파일을 덮어씁니다.  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 바꿉니다 `C:\TestDirectory1` 고 `C:\TestDirectory2` 복사 하려는 디렉터리 및 복사 하려는 위치 이름과 경로 사용 하 여 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 경로가 디바이스 경로인 경우(\\\\.\\로 시작됨)와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> 또는 <paramref name="sourceDirectoryName" />가 <see langword="Nothing" />이거나 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">소스 디렉터리가 없는 경우</exception>
        <exception cref="T:System.IO.IOException">소스 경로와 대상 경로가 같은 경우</exception>
        <exception cref="T:System.InvalidOperationException">작업이 순환적인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 폴더 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">대상 파일은 있지만 액세스할 수 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">방법: Visual Basic에서 디렉터리의 파일 컬렉션 가져오기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">방법: Visual Basic에서 파일 경로의 구문 분석</related>
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="member this.CopyDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="fileSystemProxy.CopyDirectory (sourceDirectoryName, destinationDirectoryName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">복사할 디렉터리입니다.</param>
        <param name="destinationDirectoryName">디렉터리가 복사될 위치입니다.</param>
        <param name="showUI">작업 진행을 시각적으로 추적할지 여부입니다. 기본값은 <see langword="UIOption.OnlyErrorDialogs" />입니다.</param>
        <summary>디렉터리를 다른 디렉터리에 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 디렉터리 자체뿐만 아니라 디렉터리 내용을 복사합니다. 대상 디렉터리가 없으면 자동으로 만들어집니다. 동일한 이름의 디렉터리가 대상 위치에 있는 경우 두 디렉터리의 내용은 병합 됩니다. 작업 중에 디렉터리의 새 이름을 지정할 수 있습니다.  
  
 디렉터리 내의 파일을 복사할 때 예외가 throw 될 수 있습니다 발생 하는 특정 파일입니다. 이러한 예외가 throw 되는 통합는 단일 예외에 해당 `Data` 형식의 항목을 보유 한 속성을 <xref:System.Collections.IDictionary> 파일 또는 디렉터리 경로가 키가 고 특정 예외 메시지에 포함 된를 해당 값입니다. 사용 하 여 `For…Each` 항목을 열거 합니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.CopyDirectory` 메서드.  
  
|대상|참조|  
|--------|---------|  
|디렉터리 복사|[방법: 디렉터리를 다른 디렉터리에 복사](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 다음 예제에서는 디렉터리에 복사 합니다 `TestDirectory1` 에 `TestDirectory2`, 기존 파일을 덮어씁니다.  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 바꿉니다 `C:\TestDirectory1` 고 `C:\TestDirectory2` 복사 하려는 디렉터리 및 복사 하려는 위치 이름과 경로 사용 하 여 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 경로가 디바이스 경로인 경우(\\\\.\\로 시작됨)와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> 또는 <paramref name="sourceDirectoryName" />가 <see langword="Nothing" />이거나 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">소스 디렉터리가 없는 경우</exception>
        <exception cref="T:System.IO.IOException">소스 경로와 대상 경로가 같은 경우</exception>
        <exception cref="T:System.InvalidOperationException">작업이 순환적인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 폴더 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">대상 파일은 있지만 액세스할 수 없는 경우</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="ShowUI" />가 <see langword="UIOption.AllDialogs" />로 설정되어 있는데 사용자가 작업을 취소했거나 디렉터리에서 하나 이상의 파일을 복사할 수 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">사용자 인터페이스 및 클립보드와 관련 된 사용 권한을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">방법: Visual Basic에서 디렉터리의 파일 컬렉션 가져오기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">방법: Visual Basic에서 파일 경로의 구문 분석</related>
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.CopyDirectory : string * string * bool -&gt; unit" Usage="fileSystemProxy.CopyDirectory (sourceDirectoryName, destinationDirectoryName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">복사할 디렉터리입니다.</param>
        <param name="destinationDirectoryName">디렉터리가 복사될 위치입니다.</param>
        <param name="overwrite">기존 파일을 덮어쓰려면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다. 기본값은 <see langword="False" />입니다.</param>
        <summary>디렉터리를 다른 디렉터리에 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 디렉터리 자체뿐만 아니라 디렉터리 내용을 복사합니다. 대상 디렉터리가 없으면 자동으로 만들어집니다. 동일한 이름의 디렉터리가 대상 위치에 있는 경우 두 디렉터리의 내용은 병합 됩니다. 작업 중에 디렉터리의 새 이름을 지정할 수 있습니다.  
  
 디렉터리 내의 파일을 복사할 때 예외가 throw 될 수 있습니다 발생 하는 동안 병합 중에 있는 파일 등의 특정 파일에서 `overwrite` 로 설정 된 `False`합니다. 이러한 예외가 throw 되는 통합는 단일 예외에 해당 `Data` 형식의 항목을 보유 한 속성을 <xref:System.Collections.IDictionary> 파일 또는 디렉터리 경로가 키가 고 특정 예외 메시지에 포함 된를 해당 값입니다. 사용 하 여 `For…Each` 항목을 열거 합니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.CopyDirectory` 메서드.  
  
|대상|참조|  
|--------|---------|  
|디렉터리 복사|[방법: 디렉터리를 다른 디렉터리에 복사](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 다음 예제에서는 디렉터리에 복사 합니다 `TestDirectory1` 에 `TestDirectory2`, 기존 파일을 덮어씁니다.  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 바꿉니다 `C:\TestDirectory1` 고 `C:\TestDirectory2` 복사 하려는 디렉터리 및 복사 하려는 위치 이름과 경로 사용 하 여 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 경로가 디바이스 경로인 경우(\\\\.\\로 시작됨)와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> 또는 <paramref name="sourceDirectoryName" />가 <see langword="Nothing" />이거나 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">소스 디렉터리가 없는 경우</exception>
        <exception cref="T:System.IO.IOException">소스 경로와 대상 경로가 같은 경우</exception>
        <exception cref="T:System.InvalidOperationException">작업이 순환적인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 폴더 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">대상 파일은 있지만 액세스할 수 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">방법: Visual Basic에서 디렉터리의 파일 컬렉션 가져오기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">방법: Visual Basic에서 파일 경로의 구문 분석</related>
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.CopyDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.CopyDirectory (sourceDirectoryName, destinationDirectoryName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">복사할 디렉터리입니다.</param>
        <param name="destinationDirectoryName">디렉터리가 복사될 위치입니다.</param>
        <param name="showUI">작업 진행을 시각적으로 추적할지 여부입니다. 기본값은 <see langword="UIOption.OnlyErrorDialogs" />입니다.</param>
        <param name="onUserCancel">작업 중에 사용자가 **취소**를 클릭하는 경우 수행할 작업을 지정합니다. 기본값은 <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />입니다.</param>
        <summary>디렉터리를 다른 디렉터리에 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 디렉터리 자체뿐만 아니라 디렉터리 내용을 복사합니다. 대상 디렉터리가 없으면 자동으로 만들어집니다. 동일한 이름의 디렉터리가 대상 위치에 있는 경우 두 디렉터리의 내용은 병합 됩니다. 작업 중에 디렉터리의 새 이름을 지정할 수 있습니다.  
  
 디렉터리 내의 파일을 복사할 때 예외가 throw 될 수 있습니다 발생 하는 특정 파일입니다. 이러한 예외가 throw 되는 통합는 단일 예외에 해당 `Data` 형식의 항목을 보유 한 속성을 <xref:System.Collections.IDictionary> 파일 또는 디렉터리 경로가 키가 고 특정 예외 메시지에 포함 된를 해당 값입니다. 사용 하 여 `For…Each` 항목을 열거 합니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.CopyDirectory` 메서드.  
  
|대상|참조|  
|--------|---------|  
|디렉터리 복사|[방법: 디렉터리를 다른 디렉터리에 복사](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md)|  
  
   
  
## Examples  
 다음 예제에서는 디렉터리에 복사 합니다 `TestDirectory1` 에 `TestDirectory2`, 기존 파일을 덮어씁니다.  
  
 [!code-vb[VbVbcnMyFileSystem#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 바꿉니다 `C:\TestDirectory1` 고 `C:\TestDirectory2` 복사 하려는 디렉터리 및 복사 하려는 위치 이름과 경로 사용 하 여 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 경로가 디바이스 경로인 경우(\\\\.\\로 시작됨)와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationDirectoryName" /> 또는 <paramref name="sourceDirectoryName" />가 <see langword="Nothing" />이거나 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">소스 디렉터리가 없는 경우</exception>
        <exception cref="T:System.IO.IOException">소스 경로와 대상 경로가 같은 경우</exception>
        <exception cref="T:System.InvalidOperationException">작업이 순환적인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 폴더 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">대상 파일은 있지만 액세스할 수 없는 경우</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="ShowUI" />가 <see langword="UIOption.AllDialogs" />로 설정되어 있는데 사용자가 작업을 취소했거나 디렉터리에서 하나 이상의 파일을 복사할 수 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">사용자 인터페이스 및 클립보드와 관련 된 사용 권한을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">방법: Visual Basic에서 디렉터리의 파일 컬렉션 가져오기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">방법: Visual Basic에서 파일 경로의 구문 분석</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>파일을 새 위치에 복사합니다.</summary>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md">방법: Visual Basic에서 특정 패턴의 파일을 디렉터리에 복사</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">방법: Visual Basic에서 동일한 디렉터리에 파일의 복사본 만들기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">방법: Visual Basic에서 디렉터리를 다른 디렉터리에 복사</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">방법: Visual Basic에서 파일 이름 바꾸기</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName);" />
      <MemberSignature Language="F#" Value="member this.CopyFile : string * string -&gt; unit" Usage="fileSystemProxy.CopyFile (sourceFileName, destinationFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">복사할 파일입니다.</param>
        <param name="destinationFileName">파일을 복사할 대상 위치입니다.</param>
        <summary>파일을 새 위치에 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` Ace (액세스 제어 항목)를 유지 하지 않습니다. 새로 생성된 된 파일 생성 된 디렉터리에서 기본 Ace를 상속 합니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.CopyFile` 메서드.  
  
|대상|참조|  
|--------|---------|  
|동일한 디렉터리에 파일을 복사 합니다.|[방법: 동일한 디렉터리에 파일의 복사본 만들기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|다른 디렉터리에 파일을 복사 합니다.|[방법: 다른 디렉터리에 파일의 복사본 만들기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 파일을 복사 하는이 예제 `Test.txt` 디렉터리로 `TestFiles2` 기존 파일을 덮어쓰지 않고 합니다.  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 코드에서 사용 하려는 경로와 파일 경로 대체 합니다.  
  
 파일을 복사 하는이 예제 `Test.txt` 디렉터리로 `TestFiles2` 하 고 이름을 `NewFile.txt`입니다.  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 코드에서 사용 하려는 경로와 파일 경로 대체 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationFileName" />에 경로 정보가 포함된 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> 또는 <paramref name="sourceFileName" />가 <see langword="Nothing" />이거나 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">소스 파일이 올바르지 않거나 없는 경우</exception>
        <exception cref="T:System.IO.IOException">대상 디렉터리에서 같은 이름의 파일이 사용 중인 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">모든 환경 변수를 액세스 하는 기능을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">레지스트리 변수에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md">방법: Visual Basic에서 특정 패턴의 파일을 디렉터리에 복사</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">방법: Visual Basic에서 동일한 디렉터리에 파일의 복사본 만들기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">방법: Visual Basic에서 디렉터리를 다른 디렉터리에 복사</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">방법: Visual Basic에서 파일 이름 바꾸기</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="member this.CopyFile : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="fileSystemProxy.CopyFile (sourceFileName, destinationFileName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">복사할 파일입니다.</param>
        <param name="destinationFileName">파일을 복사할 대상 위치입니다.</param>
        <param name="showUI">작업 진행을 시각적으로 추적할지 여부입니다. 기본값은 <see langword="UIOption.OnlyErrorDialogs" />입니다.</param>
        <summary>파일을 새 위치에 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` Ace (액세스 제어 항목)를 유지 하지 않습니다. 새로 생성된 된 파일 생성 된 디렉터리에서 기본 Ace를 상속 합니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.CopyFile` 메서드.  
  
|대상|참조|  
|--------|---------|  
|동일한 디렉터리에 파일을 복사 합니다.|[방법: 동일한 디렉터리에 파일의 복사본 만들기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|다른 디렉터리에 파일을 복사 합니다.|[방법: 다른 디렉터리에 파일의 복사본 만들기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 파일을 복사 하는이 예제 `Test.txt` 디렉터리로 `TestFiles2` 기존 파일을 덮어쓰지 않고 합니다.  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 코드에서 사용 하려는 경로와 파일 경로 대체 합니다.  
  
 파일을 복사 하는이 예제 `Test.txt` 디렉터리로 `TestFiles2` 하 고 이름을 `NewFile.txt`입니다.  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 코드에서 사용 하려는 경로와 파일 경로 대체 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationFileName" />에 경로 정보가 포함된 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> 또는 <paramref name="sourceFileName" />가 <see langword="Nothing" />이거나 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">소스 파일이 올바르지 않거나 없는 경우</exception>
        <exception cref="T:System.IO.IOException">대상 파일이 있고 <paramref name="overwrite" />가 <see langword="False" />로 설정된 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">모든 환경 변수를 액세스 하는 기능을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">레지스트리 변수에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">사용자 인터페이스 및 클립보드와 관련 된 사용 권한을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md">방법: Visual Basic에서 특정 패턴의 파일을 디렉터리에 복사</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">방법: Visual Basic에서 동일한 디렉터리에 파일의 복사본 만들기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">방법: Visual Basic에서 디렉터리를 다른 디렉터리에 복사</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">방법: Visual Basic에서 파일 이름 바꾸기</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.CopyFile : string * string * bool -&gt; unit" Usage="fileSystemProxy.CopyFile (sourceFileName, destinationFileName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">복사할 파일입니다.</param>
        <param name="destinationFileName">파일을 복사할 대상 위치입니다.</param>
        <param name="overwrite">기존 파일을 덮어써야 하면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다. 기본값은 <see langword="False" />입니다.</param>
        <summary>파일을 새 위치에 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` Ace (액세스 제어 항목)를 유지 하지 않습니다. 새로 생성된 된 파일 생성 된 디렉터리에서 기본 Ace를 상속 합니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.CopyFile` 메서드.  
  
|대상|참조|  
|--------|---------|  
|동일한 디렉터리에 파일을 복사 합니다.|[방법: 동일한 디렉터리에 파일의 복사본 만들기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|다른 디렉터리에 파일을 복사 합니다.|[방법: 다른 디렉터리에 파일의 복사본 만들기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 파일을 복사 하는이 예제 `Test.txt` 디렉터리로 `TestFiles2` 기존 파일을 덮어쓰지 않고 합니다.  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 코드에서 사용 하려는 경로와 파일 경로 대체 합니다.  
  
 파일을 복사 하는이 예제 `Test.txt` 디렉터리로 `TestFiles2` 하 고 이름을 `NewFile.txt`입니다.  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 코드에서 사용 하려는 경로와 파일 경로 대체 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationFileName" />에 경로 정보가 포함된 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> 또는 <paramref name="sourceFileName" />가 <see langword="Nothing" />이거나 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">소스 파일이 올바르지 않거나 없는 경우</exception>
        <exception cref="T:System.IO.IOException">대상 파일이 있고 <paramref name="overwrite" />가 <see langword="False" />로 설정된 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">모든 환경 변수를 액세스 하는 기능을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">레지스트리 변수에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md">방법: Visual Basic에서 특정 패턴의 파일을 디렉터리에 복사</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">방법: Visual Basic에서 동일한 디렉터리에 파일의 복사본 만들기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">방법: Visual Basic에서 디렉터리를 다른 디렉터리에 복사</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">방법: Visual Basic에서 파일 이름 바꾸기</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFile (sourceFileName As String, destinationFileName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.CopyFile : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.CopyFile (sourceFileName, destinationFileName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">복사할 파일입니다.</param>
        <param name="destinationFileName">파일을 복사할 대상 위치입니다.</param>
        <param name="showUI">작업 진행을 시각적으로 추적할지 여부입니다. 기본값은 <see langword="UIOption.OnlyErrorDialogs" />입니다.</param>
        <param name="onUserCancel">작업 중에 사용자가 **취소**를 클릭하는 경우 수행할 작업을 지정합니다. 기본값은 <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />입니다.</param>
        <summary>파일을 새 위치에 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CopyFile` Ace (액세스 제어 항목)를 유지 하지 않습니다. 새로 생성된 된 파일 생성 된 디렉터리에서 기본 Ace를 상속 합니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.CopyFile` 메서드.  
  
|대상|참조|  
|--------|---------|  
|동일한 디렉터리에 파일을 복사 합니다.|[방법: 동일한 디렉터리에 파일의 복사본 만들기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md)|  
|다른 디렉터리에 파일을 복사 합니다.|[방법: 다른 디렉터리에 파일의 복사본 만들기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md)|  
  
   
  
## Examples  
 파일을 복사 하는이 예제 `Test.txt` 디렉터리로 `TestFiles2` 기존 파일을 덮어쓰지 않고 합니다.  
  
 [!code-vb[VbRefFile#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 코드에서 사용 하려는 경로와 파일 경로 대체 합니다.  
  
 파일을 복사 하는이 예제 `Test.txt` 디렉터리로 `TestFiles2` 하 고 이름을 `NewFile.txt`입니다.  
  
 [!code-vb[VbRefFile#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 코드에서 사용 하려는 경로와 파일 경로 대체 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="destinationFileName" />에 경로 정보가 포함된 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" /> 또는 <paramref name="sourceFileName" />가 <see langword="Nothing" />이거나 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">소스 파일이 올바르지 않거나 없는 경우</exception>
        <exception cref="T:System.IO.IOException">대상 파일이 있고 <paramref name="overwrite" />가 <see langword="False" />로 설정된 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="UICancelOption" />이 <see langword="ThrowException" />으로 설정된 상태에서 사용자가 작업을 취소했거나 지정되지 않은 I/O 오류가 발생한 경우</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">모든 환경 변수를 액세스 하는 기능을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">레지스트리 변수에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">사용자 인터페이스 및 클립보드와 관련 된 사용 권한을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-files-with-a-specific-pattern-to-a-directory.md">방법: Visual Basic에서 특정 패턴의 파일을 디렉터리에 복사</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md">방법: Visual Basic에서 동일한 디렉터리에 파일의 복사본 만들기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md">방법: Visual Basic에서 디렉터리를 다른 디렉터리에 복사</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md">방법: Visual Basic에서 파일 이름 바꾸기</related>
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public void CreateDirectory (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void CreateDirectory(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CreateDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateDirectory (directory As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateDirectory(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.CreateDirectory : string -&gt; unit" Usage="fileSystemProxy.CreateDirectory directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">디렉터리의 이름과 위치입니다.</param>
        <summary>디렉터리를 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 디렉터리가 이미 있는 경우 예외가 throw되지 않습니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.CreateDirectory` 메서드.  
  
|대상|참조|  
|--------|---------|  
|디렉터리 만들기|[방법: 디렉터리 만들기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md)|  
  
   
  
## Examples  
 이 예제에서는 디렉터리를 만듭니다 `NewDirectory`의 `C:\Documents and Settings\All Users\Documents`합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">디렉터리 이름 형식이 잘못된 경우. 예를 들어, 파일 이름에 잘못된 문자가 들어 있거나 파일 이름이 공백인 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">디렉터리 이름이 너무 긴 경우</exception>
        <exception cref="T:System.NotSupportedException">디렉터리 이름이 콜론(:)인 경우</exception>
        <exception cref="T:System.IO.IOException">만들 디렉터리의 부모 디렉터리가 읽기 전용인 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 디렉터리를 만들 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.IO.Directory.CreateDirectory(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentDirectory">
      <MemberSignature Language="C#" Value="public string CurrentDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentDirectory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.CurrentDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrentDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrentDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDirectory : string with get, set" Usage="Microsoft.VisualBasic.MyServices.FileSystemProxy.CurrentDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 디렉터리를 가져오거나 설정합니다.</summary>
        <value>파일 I/O 작업의 현재 디렉터리입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CurrentDirectory` 시스템 수준 환경 변수가입니다.  
  
   
  
## Examples  
 이 예제는 현재 디렉터리를 반환 하 고 메시지 상자에 표시 됩니다.  
  
 [!code-vb[VbVbcnMyFileSystem#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#18)]  
  
 현재 디렉터리 설정 하는이 예제 `C:\TestDirectory`합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">경로가 잘못된 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>디렉터리를 삭제합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDirectory (directory As String, onDirectoryNotEmpty As DeleteDirectoryOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::DeleteDirectoryOption onDirectoryNotEmpty);" />
      <MemberSignature Language="F#" Value="member this.DeleteDirectory : string * Microsoft.VisualBasic.FileIO.DeleteDirectoryOption -&gt; unit" Usage="fileSystemProxy.DeleteDirectory (directory, onDirectoryNotEmpty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="onDirectoryNotEmpty" Type="Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
      </Parameters>
      <Docs>
        <param name="directory">삭제할 디렉터리입니다.</param>
        <param name="onDirectoryNotEmpty">삭제될 디렉터리에 파일이나 디렉터리가 포함된 경우 수행해야 하는 작업을 지정합니다. 기본값은 <see langword="DeleteDirectoryOption.DeleteAllContents" />입니다.</param>
        <summary>디렉터리를 삭제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 디렉터리를 삭제 하는 예제 `OldDirectory` 비어 있는 경우에 합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 디렉터리를 삭제 하는이 예제 `OldDirectory` 및 모든 해당 내용을 합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 디렉터리를 삭제 하는이 예제 `OldDirectory` 콘텐츠가 삭제를 확인 하려면 사용자에 게 콘텐츠를 전달 하지 않는 모든 및를 **휴지통**합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 디렉터리를 삭제 하는이 예제 `OldDirectory` 및 모든 해당 콘텐츠를 전송 하는 **휴지통**, 하지만 작업의 진행률을 표시 되지 않습니다.  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">경로가 길이가 0인 문자열이거나, 형식이 잘못되었거나, 공백만 포함하거나, 와일드카드 문자를 비롯한 잘못된 문자를 포함하는 경우 경로가 \\\\.\\로 시작하는 디바이스 경로인 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">디렉터리가 없거나 파일인 경우</exception>
        <exception cref="T:System.IO.IOException">디렉터리나 하위 디렉터리의 파일이 사용되고 있는 경우</exception>
        <exception cref="T:System.NotSupportedException">디렉터리 이름에 콜론(:)이 포함됩니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.Security.SecurityException">사용자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.OperationCanceledException">사용자가 작업을 취소했거나 디렉터리를 삭제할 수 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">방법: Visual Basic에서 파일 삭제</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDirectory (directory As String, showUI As UIOption, recycle As RecycleOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle);" />
      <MemberSignature Language="F#" Value="member this.DeleteDirectory : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption -&gt; unit" Usage="fileSystemProxy.DeleteDirectory (directory, showUI, recycle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="directory">삭제할 디렉터리입니다.</param>
        <param name="showUI">작업 진행을 시각적으로 추적할지 여부를 지정합니다. 기본값은 <see langword="UIOption.OnlyErrorDialogs" />입니다.</param>
        <param name="recycle">삭제한 파일을 **휴지통**으로 보낼지 여부를 지정합니다. 기본값은 <see langword="RecycleOption.DeletePermanently" />입니다.</param>
        <summary>디렉터리를 삭제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `showUI` 고 `recycle` 매개 변수는 Windows 서비스와 같은 대화형 사용자 없는 응용 프로그램에서 지원 되지 않습니다.  
  
   
  
## Examples  
 디렉터리를 삭제 하는 예제 `OldDirectory` 비어 있는 경우에 합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 디렉터리를 삭제 하는이 예제 `OldDirectory` 및 모든 해당 내용을 합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 디렉터리를 삭제 하는이 예제 `OldDirectory` 콘텐츠가 삭제를 확인 하려면 사용자에 게 콘텐츠를 전달 하지 않는 모든 및를 **휴지통**합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 디렉터리를 삭제 하는이 예제 `OldDirectory` 및 모든 해당 콘텐츠를 전송 하는 **휴지통**, 하지만 작업의 진행률을 표시 되지 않습니다.  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">경로가 길이가 0인 문자열이거나, 형식이 잘못되었거나, 공백만 포함하거나, 와일드카드 문자를 비롯한 잘못된 문자를 포함하는 경우 경로가 \\\\.\\로 시작하는 디바이스 경로인 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">디렉터리가 없거나 파일인 경우</exception>
        <exception cref="T:System.IO.IOException">디렉터리나 하위 디렉터리의 파일이 사용되고 있는 경우</exception>
        <exception cref="T:System.NotSupportedException">디렉터리 이름에 콜론(:)이 포함됩니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.Security.SecurityException">사용자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.OperationCanceledException">사용자가 작업을 취소했거나 디렉터리를 삭제할 수 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">사용자 인터페이스 및 클립보드와 관련 된 사용 권한을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">방법: Visual Basic에서 파일 삭제</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDirectory (directory As String, showUI As UIOption, recycle As RecycleOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDirectory(System::String ^ directory, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.DeleteDirectory : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.DeleteDirectory (directory, showUI, recycle, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="directory">삭제할 디렉터리입니다.</param>
        <param name="showUI">작업 진행을 시각적으로 추적할지 여부를 지정합니다. 기본값은 <see langword="UIOption.OnlyErrorDialogs" />입니다.</param>
        <param name="recycle">삭제한 파일을 **휴지통**으로 보낼지 여부를 지정합니다. 기본값은 <see langword="RecycleOption.DeletePermanently" />입니다.</param>
        <param name="onUserCancel">사용자가 **취소**를 클릭하는 경우 예외를 throw할지 여부를 지정합니다.</param>
        <summary>디렉터리를 삭제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `showUI`, `recycle`, 및 `onUserCancel` 매개 변수는 Windows 서비스와 같은 대화형 사용자 없는 응용 프로그램에서 지원 되지 않습니다.  
  
   
  
## Examples  
 디렉터리를 삭제 하는 예제 `OldDirectory` 비어 있는 경우에 합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 디렉터리를 삭제 하는이 예제 `OldDirectory` 및 모든 해당 내용을 합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 디렉터리를 삭제 하는이 예제 `OldDirectory` 콘텐츠가 삭제를 확인 하려면 사용자에 게 콘텐츠를 전달 하지 않는 모든 및를 **휴지통**합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 디렉터리를 삭제 하는이 예제 `OldDirectory` 및 모든 해당 콘텐츠를 전송 하는 **휴지통**, 하지만 작업의 진행률을 표시 되지 않습니다.  
  
 [!code-vb[VbVbcnMyFileSystem#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">경로가 길이가 0인 문자열이거나, 형식이 잘못되었거나, 공백만 포함하거나, 와일드카드 문자를 비롯한 잘못된 문자를 포함하는 경우 경로가 \\\\.\\로 시작하는 디바이스 경로인 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">디렉터리가 없거나 파일인 경우</exception>
        <exception cref="T:System.IO.IOException">디렉터리나 하위 디렉터리의 파일이 사용되고 있는 경우</exception>
        <exception cref="T:System.NotSupportedException">디렉터리 이름에 콜론(:)이 포함됩니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.Security.SecurityException">사용자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.OperationCanceledException">사용자가 작업을 취소했거나 디렉터리를 삭제할 수 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">사용자 인터페이스 및 클립보드와 관련 된 사용 권한을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">방법: Visual Basic에서 파일 삭제</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>파일을 삭제합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteFile (file As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteFile(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.DeleteFile : string -&gt; unit" Usage="fileSystemProxy.DeleteFile file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">삭제할 파일의 이름과 경로입니다.</param>
        <summary>파일을 삭제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.DeleteFile` 메서드.  
  
|대상|참조|  
|--------|---------|  
|파일을 삭제 하려면|[방법: 파일 삭제](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 파일을 삭제 하는이 예제 `Test.txt`합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 파일을 삭제 하는이 예제 `Test.txt` 파일을 삭제 해야 함을 확인 하 고 사용자 수 있도록 합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 파일을 삭제 하는이 예제 `Test.txt` 로 보냅니다 합니다 **휴지통**합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 파일을 지정해야 하는 경로 마지막에 슬래시가 있거나, \\\\.\\로 시작하는 디바이스 경로와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">파일이 사용 중인 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">파일이 없습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 파일을 삭제할 권한이 없거나 파일이 읽기 전용인 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">방법: Visual Basic에서 파일 삭제</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteFile (file As String, showUI As UIOption, recycle As RecycleOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteFile(System::String ^ file, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle);" />
      <MemberSignature Language="F#" Value="member this.DeleteFile : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption -&gt; unit" Usage="fileSystemProxy.DeleteFile (file, showUI, recycle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="file">삭제할 파일의 이름과 경로입니다.</param>
        <param name="showUI">작업 진행을 시각적으로 추적할지 여부입니다. 기본값은 <see langword="UIOption.OnlyErrorDialogs" />입니다.</param>
        <param name="recycle">삭제한 파일을 **휴지통**으로 보낼지 여부입니다. 기본값은 <see langword="RecycleOption.DeletePermanently" />입니다.</param>
        <summary>파일을 삭제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `showUI` 고 `recycle` 매개 변수는 Windows 서비스와 같은 대화형 사용자 없는 응용 프로그램에서 지원 되지 않습니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.DeleteFile` 메서드.  
  
|대상|참조|  
|--------|---------|  
|파일을 삭제 하려면|[방법: 파일 삭제](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 파일을 삭제 하는이 예제 `Test.txt`합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 파일을 삭제 하는이 예제 `Test.txt` 파일을 삭제 해야 함을 확인 하 고 사용자 수 있도록 합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 파일을 삭제 하는이 예제 `Test.txt` 로 보냅니다 합니다 **휴지통**합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 파일을 지정해야 하는 경로 마지막에 슬래시가 있거나, \\\\.\\로 시작하는 디바이스 경로와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">파일이 사용 중인 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">파일이 없습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 파일을 삭제할 권한이 없거나 파일이 읽기 전용인 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">사용자 인터페이스 및 클립보드와 관련 된 사용 권한을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">방법: Visual Basic에서 파일 삭제</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteFile (file As String, showUI As UIOption, recycle As RecycleOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteFile(System::String ^ file, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::RecycleOption recycle, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.DeleteFile : string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.RecycleOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.DeleteFile (file, showUI, recycle, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="file">삭제할 파일의 이름과 경로입니다.</param>
        <param name="showUI">작업 진행을 시각적으로 추적할지 여부입니다. 기본값은 <see langword="UIOption.OnlyErrorDialogs" />입니다.</param>
        <param name="recycle">삭제한 파일을 **휴지통**으로 보낼지 여부입니다. 기본값은 <see langword="RecycleOption.DeletePermanently" />입니다.</param>
        <param name="onUserCancel">사용자가 작업을 취소하는 경우 예외를 throw할지 여부를 지정합니다. 기본값은 <see langword="UICancelOption.ThrowException" />입니다.</param>
        <summary>파일을 삭제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `showUI`, `recycle`, 및 `onUserCancel` 매개 변수는 Windows 서비스와 같은 대화형 사용자 없는 응용 프로그램에서 지원 되지 않습니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.DeleteFile` 메서드.  
  
|대상|참조|  
|--------|---------|  
|파일을 삭제 하려면|[방법: 파일 삭제](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md)|  
  
   
  
## Examples  
 파일을 삭제 하는이 예제 `Test.txt`합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 파일을 삭제 하는이 예제 `Test.txt` 파일을 삭제 해야 함을 확인 하 고 사용자 수 있도록 합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 파일을 삭제 하는이 예제 `Test.txt` 로 보냅니다 합니다 **휴지통**합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 파일을 지정해야 하는 경로 마지막에 슬래시가 있거나, \\\\.\\로 시작하는 디바이스 경로와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">파일이 사용 중인 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">파일이 없습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 파일을 삭제할 권한이 없거나 파일이 읽기 전용인 경우</exception>
        <exception cref="T:System.OperationCanceledException">사용자가 작업을 취소했고 <paramref name="onUserCancel" />이 <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />으로 설정된 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">사용자 인터페이스 및 클립보드와 관련 된 사용 권한을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-delete-a-file.md">방법: Visual Basic에서 파일 삭제</related>
      </Docs>
    </Member>
    <Member MemberName="DirectoryExists">
      <MemberSignature Language="C#" Value="public bool DirectoryExists (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool DirectoryExists(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.DirectoryExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DirectoryExists (directory As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DirectoryExists(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.DirectoryExists : string -&gt; bool" Usage="fileSystemProxy.DirectoryExists directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">디렉터리 경로입니다.</param>
        <summary>지정된 디렉터리가 있으면 <see langword="True" />를 반환합니다.</summary>
        <returns>디렉터리가 있으면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 이 예제에서는 확인 하는지 여부를 디렉터리 `C:\backup\logs` 존재 하 고 해당 속성을 확인 합니다.  
  
 [!code-vb[VbRefFile#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Visual Basic에서 파일/디렉터리 만들기, 삭제 및 이동</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">연습: Visual Basic에서 파일과 디렉터리 조작</related>
      </Docs>
    </Member>
    <Member MemberName="Drives">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt; Drives { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IO.DriveInfo&gt; Drives" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Drives As ReadOnlyCollection(Of DriveInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::DriveInfo ^&gt; ^ Drives { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::DriveInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Drives : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt;" Usage="Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용 가능한 모든 드라이브 이름의 읽기 전용 컬렉션을 반환합니다.</summary>
        <value><see cref="T:System.IO.DriveInfo" /> 개체인 사용 가능한 모든 드라이브의 읽기 전용 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에는 논리 드라이브를 모두 반환합니다.  
  
   
  
## Examples  
 이 예제에서는 메시지 상자에 사용 가능한 드라이브 이름을 표시 합니다.  
  
 [!code-vb[VbRefFile#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <altmember cref="T:System.IO.DriveInfo" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="FileExists">
      <MemberSignature Language="C#" Value="public bool FileExists (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool FileExists(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.FileExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileExists (file As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool FileExists(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.FileExists : string -&gt; bool" Usage="fileSystemProxy.FileExists file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">파일의 이름과 경로입니다.</param>
        <summary>지정된 파일이 있으면 <see langword="True" />를 반환합니다.</summary>
        <returns>이 메서드는 해당 파일이 있으면 <see langword="True" />를 반환하고, 그렇지 않으면 <see langword="False" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 응용 프로그램에 지정된 된 파일을 읽을 수 있는 권한이 없는 경우는 `FileExists` 메서드가 반환 되는 `False`, 메서드가 경로의 존재 여부에 관계 없이 예외를 throw 하지 않습니다.  
  
   
  
## Examples  
 이 예제에서는 확인 여부 파일 `Check.txt` 존재 하 고 메시지 상자에 정보를 제공 합니다.  
  
 [!code-vb[VbRefFile#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">파일의 이름이 백슬래시(\\)로 끝나는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Visual Basic에서 파일/디렉터리 만들기, 삭제 및 이동</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">연습: Visual Basic에서 파일과 디렉터리 조작</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindInFiles">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 텍스트를 포함하는 파일 이름을 나타내는 문자열의 읽기 전용 컬렉션을 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindInFiles (directory As String, containsText As String, ignoreCase As Boolean, searchType As SearchOption) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ FindInFiles(System::String ^ directory, System::String ^ containsText, bool ignoreCase, Microsoft::VisualBasic::FileIO::SearchOption searchType);" />
      <MemberSignature Language="F#" Value="member this.FindInFiles : string * string * bool * Microsoft.VisualBasic.FileIO.SearchOption -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.FindInFiles (directory, containsText, ignoreCase, searchType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="directory">검색할 디렉터리입니다.</param>
        <param name="containsText">검색 텍스트입니다.</param>
        <param name="ignoreCase">검색 시 대/소문자를 구분해야 하면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다. 기본값은 <see langword="True" />입니다.</param>
        <param name="searchType">하위 폴더를 포함할지 여부입니다. 기본값은 <see langword="SearchOption.SearchTopLevelOnly" />입니다.</param>
        <summary>지정된 텍스트를 포함하는 파일 이름을 나타내는 문자열의 읽기 전용 컬렉션을 반환합니다.</summary>
        <returns>지정된 텍스트가 들어 있는 파일 이름의 읽기 전용 컬렉션입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정한 패턴과 일치하는 파일이 없으면 빈 컬렉션이 반환됩니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.FindInFiles` 메서드.  
  
|대상|참조|  
|--------|---------|  
|특정 문자열을 포함 하는 파일의 디렉터리 검색|[연습: Visual Basic에서 파일과 디렉터리 조작](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)|  
  
   
  
## Examples  
 디렉터리를 검색 하는이 예제 `C:\TestDir` 문자열이 포함 된 모든 파일에 대 한 `"sample string"` 에 결과 표시 하 고 `ListBox1`입니다.  
  
 [!code-vb[VbRefFile#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#12)]  
  
 작동 하기 위해 프로젝트를 포함 해야 합니다는 `ListBox` 라는 `ListBox1`합니다.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">경로가 0 길이 문자열이거나, 경로에 공백만 포함되어 있거나, 잘못된 문자가 포함되어 있거나, 경로가 디바이스 경로인 경우(<c>\\.\</c>로 시작됨) 등의 이유로 경로가 올바르지 않습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정한 디렉터리가 없습니다.</exception>
        <exception cref="T:System.IO.IOException">지정한 디렉터리가 기존 파일을 가리킵니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">지정한 디렉터리 경로에 콜론(:)이 포함되어 있거나 잘못된 형식입니다.</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">연습: Visual Basic에서 파일과 디렉터리 조작</related>
      </Docs>
    </Member>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] fileWildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] fileWildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function FindInFiles (directory As String, containsText As String, ignoreCase As Boolean, searchType As SearchOption, ParamArray fileWildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ FindInFiles(System::String ^ directory, System::String ^ containsText, bool ignoreCase, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ fileWildcards);" />
      <MemberSignature Language="F#" Value="member this.FindInFiles : string * string * bool * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.FindInFiles (directory, containsText, ignoreCase, searchType, fileWildcards)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="fileWildcards" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">검색할 디렉터리입니다.</param>
        <param name="containsText">검색 텍스트입니다.</param>
        <param name="ignoreCase">검색 시 대/소문자를 구분해야 하면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다. 기본값은 <see langword="True" />입니다.</param>
        <param name="searchType">하위 폴더를 포함할지 여부입니다. 기본값은 <see langword="SearchOption.SearchTopLevelOnly" />입니다.</param>
        <param name="fileWildcards">일치할 패턴입니다.</param>
        <summary>지정된 텍스트를 포함하는 파일 이름을 나타내는 문자열의 읽기 전용 컬렉션을 반환합니다.</summary>
        <returns>지정된 텍스트가 들어 있는 파일 이름의 읽기 전용 컬렉션입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정한 패턴과 일치하는 파일이 없으면 빈 컬렉션이 반환됩니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.FindInFiles` 메서드.  
  
|대상|참조|  
|--------|---------|  
|특정 문자열을 포함 하는 파일의 디렉터리 검색|[연습: Visual Basic에서 파일과 디렉터리 조작](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md)|  
  
   
  
## Examples  
 디렉터리를 검색 하는이 예제 `C:\TestDir` 문자열이 포함 된 모든 파일에 대 한 `"sample string"` 에 결과 표시 하 고 `ListBox1`입니다.  
  
 [!code-vb[VbRefFile#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#12)]  
  
 작동 하기 위해 프로젝트를 포함 해야 합니다는 `ListBox` 라는 `ListBox1`합니다.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">경로가 0 길이 문자열이거나, 경로에 공백만 포함되어 있거나, 잘못된 문자가 포함되어 있거나, 경로가 디바이스 경로인 경우(<c>\\.\</c>로 시작됨) 등의 이유로 경로가 올바르지 않습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정한 디렉터리가 없습니다.</exception>
        <exception cref="T:System.IO.IOException">지정한 디렉터리가 기존 파일을 가리킵니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">지정한 디렉터리 경로에 콜론(:)이 포함되어 있거나 잘못된 형식입니다.</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">연습: Visual Basic에서 파일과 디렉터리 조작</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDirectories">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>디렉터리에 있는 하위 디렉터리의 경로 이름을 나타내는 문자열 컬렉션을 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectories (directory As String) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetDirectories(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.GetDirectories : string -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.GetDirectories directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">디렉터리의 이름과 경로입니다.</param>
        <summary>디렉터리에 있는 하위 디렉터리의 경로 이름을 나타내는 문자열 컬렉션을 반환합니다.</summary>
        <returns>지정된 디렉터리 안에 있는 하위 디렉터리의 경로 이름으로 구성된 읽기 전용 컬렉션입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.GetDirectories` 메서드.  
  
|대상|참조|  
|--------|---------|  
|특정 패턴의 하위 디렉터리 목록|[방법: 특정 패턴의 하위 디렉터리 찾기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 다음 예제에서는 단어가 포함 된 디렉터리 구조에서 모든 디렉터리를 반환 `Logs` 이름에 추가 합니다 `ListBox1`합니다.  
  
 [!code-vb[VbRefFile#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#10)]  
  
 이 예제를 실행 하려면를 `ListBox` 라는 `ListBox1` 양식의 합니다.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 경로가 디바이스 경로인 경우(\\\\.\\로 시작됨)와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정한 디렉터리가 없습니다.</exception>
        <exception cref="T:System.IO.IOException">지정한 디렉터리가 기존 파일을 가리킵니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectories (directory As String, searchType As SearchOption, ParamArray wildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetDirectories(System::String ^ directory, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ wildcards);" />
      <MemberSignature Language="F#" Value="member this.GetDirectories : string * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.GetDirectories (directory, searchType, wildcards)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">디렉터리의 이름과 경로입니다.</param>
        <param name="searchType">하위 폴더를 포함할지 여부입니다. 기본값은 <see langword="SearchOption.SearchTopLevelOnly" />입니다.</param>
        <param name="wildcards">이름을 일치시킬 패턴입니다.</param>
        <summary>디렉터리에 있는 하위 디렉터리의 경로 이름을 나타내는 문자열 컬렉션을 반환합니다.</summary>
        <returns>지정된 디렉터리 안에 있는 하위 디렉터리의 경로 이름으로 구성된 읽기 전용 컬렉션입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `wildcards` 매개 변수를 사용하여 특정 패턴을 지정할 수 있습니다. 하위 디렉터리의 내용을 검색에 포함하려면 `searchType` 매개 변수를 `SearchAllSubDirectories`로 설정합니다.  
  
 지정한 패턴과 일치하는 디렉터리가 없으면 빈 컬렉션이 반환됩니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.GetDirectories` 메서드.  
  
|대상|참조|  
|--------|---------|  
|특정 패턴의 하위 디렉터리 목록|[방법: 특정 패턴의 하위 디렉터리 찾기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-subdirectories-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 다음 예제에서는 단어가 포함 된 디렉터리 구조에서 모든 디렉터리를 반환 `Logs` 이름에 추가 합니다 `ListBox1`합니다.  
  
 [!code-vb[VbRefFile#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#10)]  
  
 이 예제를 실행 하려면를 `ListBox` 라는 `ListBox1` 양식의 합니다.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 경로가 디바이스 경로인 경우(\\\\.\\로 시작됨)와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException">지정한 와일드카드 문자 중 하나 이상이 <see langword="Nothing" />이거나, 빈 문자열이거나, 공백만 있는 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">지정한 디렉터리가 없습니다.</exception>
        <exception cref="T:System.IO.IOException">지정한 디렉터리가 기존 파일을 가리킵니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryInfo">
      <MemberSignature Language="C#" Value="public System.IO.DirectoryInfo GetDirectoryInfo (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.DirectoryInfo GetDirectoryInfo(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDirectoryInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectoryInfo (directory As String) As DirectoryInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::DirectoryInfo ^ GetDirectoryInfo(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.GetDirectoryInfo : string -&gt; System.IO.DirectoryInfo" Usage="fileSystemProxy.GetDirectoryInfo directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory"><see langword="String" />. 디렉터리 경로입니다.</param>
        <summary>지정한 경로에 대한 <see cref="T:System.IO.DirectoryInfo" /> 개체를 반환합니다.</summary>
        <returns>지정된 경로에 대한 <see cref="T:System.IO.DirectoryInfo" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 디렉터리가 없으면 예외가 throw 되지 않습니다 처음까지 속성은 <xref:System.IO.DirectoryInfo> 액세스 합니다.  
  
   
  
## Examples  
 이 예제는 <xref:System.IO.DirectoryInfo> 디렉터리에 대 한 개체 `C:\Documents and Settings` 디렉터리의 만든 시간, 마지막 액세스 시간 및 마지막으로 쓴 시간 표시 합니다.  
  
 [!code-vb[VbRefFile#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 경로가 디바이스 경로인 경우(\\\\.\\로 시작됨)와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">디렉터리 경로에 콜론(:)이 포함되어 있거나 잘못된 형식입니다.</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.IO.DirectoryInfo" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetDriveInfo">
      <MemberSignature Language="C#" Value="public System.IO.DriveInfo GetDriveInfo (string drive);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.DriveInfo GetDriveInfo(string drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetDriveInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDriveInfo (drive As String) As DriveInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::DriveInfo ^ GetDriveInfo(System::String ^ drive);" />
      <MemberSignature Language="F#" Value="member this.GetDriveInfo : string -&gt; System.IO.DriveInfo" Usage="fileSystemProxy.GetDriveInfo drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DriveInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="drive">검사할 드라이브입니다.</param>
        <summary>지정한 드라이브에 대한 <see cref="T:System.IO.DriveInfo" /> 개체를 반환합니다.</summary>
        <returns>지정된 드라이브에 대한 <see cref="T:System.IO.DriveInfo" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.DriveInfo> 클래스는 드라이브를 모델링 하 고 드라이브 정보를 쿼리 하는 속성과 메서드를 제공 합니다. 사용 하 여 <xref:System.IO.DriveInfo> 어떤 드라이브 사용 가능한와 어떤 유형의 드라이브를 확인 하려면. 속성의 용량과 드라이브에서 사용 가능한 공간을 쿼리할 수도 있습니다.  
  
   
  
## Examples  
 이 예에서는 <xref:System.IO.DriveInfo> C 드라이브에 대 한 개체는 드라이브에 대 한 정보를 표시 하는 데 사용 합니다.  
  
 [!code-vb[VbRefFile#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#11)]  
  
 다른 드라이브 유형에 대 한 자세한 내용은 <xref:System.IO.DriveType>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 경로가 디바이스 경로인 경우(\\\\.\\로 시작됨)와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="drive" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.IO.DriveInfo" />
        <altmember cref="T:System.IO.DriveType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetFileInfo">
      <MemberSignature Language="C#" Value="public System.IO.FileInfo GetFileInfo (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.FileInfo GetFileInfo(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFileInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFileInfo (file As String) As FileInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::FileInfo ^ GetFileInfo(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.GetFileInfo : string -&gt; System.IO.FileInfo" Usage="fileSystemProxy.GetFileInfo file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">파일의 이름과 경로입니다.</param>
        <summary>지정한 파일에 대한 <see cref="T:System.IO.FileInfo" /> 개체를 반환합니다.</summary>
        <returns>지정된 파일에 대한 <see cref="T:System.IO.FileInfo" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파일이 없는 경우 예외가 throw 되지 않습니다. 대신 throw 되는 처음으로 개체의 속성에 액세스 합니다.  
  
 다음 표에서 관련 된 작업의 예로 `My.Computer.FileSystem.GetFileInfo` 메서드.  
  
|대상|참조|  
|--------|---------|  
|파일의 이름 및 경로 확인|[방법: 파일 경로의 구문 분석](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 이 예제에서는 검색을 <xref:System.IO.FileInfo?displayProperty=nameWithType> 파일에 대 한 개체 `MyLogFile.log` 파일의 전체 이름, 마지막 액세스 시간 및 길이 보고 하는 데 사용 합니다.  
  
 [!code-vb[VbRefFile#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">경로 이름 형식이 잘못되었습니다. 예를 들어 파일 이름에 잘못된 문자가 들어 있거나 공백이 있을 수 있습니다. 파일 이름 마지막에 슬래시가 있는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.NotSupportedException">경로에서 문자열 중간에 콜론이 포함된 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 너무 깁니다.</exception>
        <exception cref="T:System.Security.SecurityException">사용자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 파일에 대한 ACL(액세스 제어 목록) 액세스 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.IO.FileInfo" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">연습: Visual Basic에서 파일과 디렉터리 조작</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFiles">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>디렉터리에 있는 파일 이름을 나타내는 문자열의 읽기 전용 컬렉션을 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFiles (directory As String) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetFiles(System::String ^ directory);" />
      <MemberSignature Language="F#" Value="member this.GetFiles : string -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.GetFiles directory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">검색할 디렉터리입니다.</param>
        <summary>디렉터리에 있는 파일 이름을 나타내는 문자열의 읽기 전용 컬렉션을 반환합니다.</summary>
        <returns>지정된 디렉터리에 있는 파일 이름의 읽기 전용 컬렉션입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정한 패턴과 일치하는 파일이 없으면 빈 컬렉션이 반환됩니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.GetFiles` 메서드.  
  
|대상|참조|  
|--------|---------|  
|디렉터리에 있는 파일의 컬렉션을 가져옵니다.|[방법: 디렉터리의 파일 컬렉션 가져오기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|디렉터리에서 특정 패턴의 파일 찾기|[방법: 특정 패턴의 파일 찾기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 다음 예제에서는 디렉터리의 모든 파일을 반환하여 `ListBox1`에 추가합니다.  
  
 [!code-vb[VbRefFile#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#5)]  
  
 이 예제를 실행 하려면를 `ListBox` 라는 `ListBox1` 양식의 합니다.  
  
 이 예제에서는 확장을 사용 하 여 디렉터리의 모든 파일 반환 `.txt` 에 추가 합니다 `ListBox1`합니다.  
  
 [!code-vb[VbRefFile#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#6)]  
  
 이 예제를 실행 하려면를 `ListBox` 라는 `ListBox1` 양식의 합니다.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 경로가 디바이스 경로인 경우(\\\\.\\로 시작됨)와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />가 <see langword="Nothing" />입니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">검색할 디렉터리가 없습니다.</exception>
        <exception cref="T:System.IO.IOException"><paramref name="directory" />가 기존 파일을 가리키는 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md">방법: Visual Basic에서 특정 패턴의 파일 찾기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">방법: Visual Basic에서 디렉터리의 파일 컬렉션 가져오기</related>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, params string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFiles (directory As String, searchType As SearchOption, ParamArray wildcards As String()) As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ GetFiles(System::String ^ directory, Microsoft::VisualBasic::FileIO::SearchOption searchType, ... cli::array &lt;System::String ^&gt; ^ wildcards);" />
      <MemberSignature Language="F#" Value="member this.GetFiles : string * Microsoft.VisualBasic.FileIO.SearchOption * string[] -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="fileSystemProxy.GetFiles (directory, searchType, wildcards)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">검색할 디렉터리입니다.</param>
        <param name="searchType">하위 폴더를 포함할지 여부입니다. 기본값은 <see langword="SearchOption.SearchTopLevelOnly" />입니다.</param>
        <param name="wildcards">일치할 패턴입니다.</param>
        <summary>디렉터리에 있는 파일 이름을 나타내는 문자열의 읽기 전용 컬렉션을 반환합니다.</summary>
        <returns>지정된 디렉터리에 있는 파일 이름의 읽기 전용 컬렉션입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정한 패턴과 일치하는 파일이 없으면 빈 컬렉션이 반환됩니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.GetFiles` 메서드.  
  
|대상|참조|  
|--------|---------|  
|디렉터리에 있는 파일의 컬렉션을 가져옵니다.|[방법: 디렉터리의 파일 컬렉션 가져오기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md)|  
|디렉터리에서 특정 패턴의 파일 찾기|[방법: 특정 패턴의 파일 찾기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md)|  
  
   
  
## Examples  
 다음 예제에서는 디렉터리의 모든 파일을 반환하여 `ListBox1`에 추가합니다.  
  
 [!code-vb[VbRefFile#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#5)]  
  
 이 예제를 실행 하려면를 `ListBox` 라는 `ListBox1` 양식의 합니다.  
  
 이 예제에서는 확장을 사용 하 여 디렉터리의 모든 파일 반환 `.txt` 에 추가 합니다 `ListBox1`합니다.  
  
 [!code-vb[VbRefFile#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#6)]  
  
 이 예제를 실행 하려면를 `ListBox` 라는 `ListBox1` 양식의 합니다.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 경로가 디바이스 경로인 경우(\\\\.\\로 시작됨)와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />가 <see langword="Nothing" />입니다.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">검색할 디렉터리가 없습니다.</exception>
        <exception cref="T:System.IO.IOException"><paramref name="directory" />가 기존 파일을 가리키는 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-find-files-with-a-specific-pattern.md">방법: Visual Basic에서 특정 패턴의 파일 찾기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-get-the-collection-of-files-in-a-directory.md">방법: Visual Basic에서 디렉터리의 파일 컬렉션 가져오기</related>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public string GetName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetName (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetName(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.GetName : string -&gt; string" Usage="fileSystemProxy.GetName path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">필수 요소. 구문 분석할 경로입니다. <see langword="String" />.</param>
        <summary>제공된 경로에서 파일 이름을 구문 분석합니다.</summary>
        <returns>지정된 경로의 파일 이름입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 문자열 연산입니다. `FileSystem` 를 검사 하지 않습니다.  
  
 `GetName` 메서드는 경로 끝에 발생 하는 슬래시를 무시 합니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.GetFileName` 메서드.  
  
|대상|참조|  
|--------|---------|  
|파일 경로 구문 분석|[방법: 파일 경로의 구문 분석](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md)|  
  
   
  
## Examples  
 다음 예제에서는 파일 경로 구문 분석 하 고 파일의 이름을 반환 합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#21)]  
  
 경로 `C:\Testdirectory\Testfile` 를 구문 분석할 경로 사용 하 여 합니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="GetParentPath">
      <MemberSignature Language="C#" Value="public string GetParentPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetParentPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetParentPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParentPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetParentPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.GetParentPath : string -&gt; string" Usage="fileSystemProxy.GetParentPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">검사할 경로입니다.</param>
        <summary>제공된 경로의 부모 경로를 반환합니다.</summary>
        <returns>제공된 경로의 부모 경로입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 문자열 연산입니다. 파일 시스템은 검사 하지 않습니다.  
  
   
  
## Examples  
 이 예제에 대 한 부모 경로 가져옵니다 `C:\Backups\Tmp\Test`합니다.  
  
 [!code-vb[VbRefFile#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">경로가 루트 경로이기 때문에 부모 경로를 포함하지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" />가 <see langword="Nothing" />입니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">방법: Visual Basic에서 파일 경로의 구문 분석</related>
      </Docs>
    </Member>
    <Member MemberName="GetTempFileName">
      <MemberSignature Language="C#" Value="public string GetTempFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string GetTempFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.GetTempFileName" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTempFileName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTempFileName();" />
      <MemberSignature Language="F#" Value="member this.GetTempFileName : unit -&gt; string" Usage="fileSystemProxy.GetTempFileName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>디스크에서 크기가 0바이트인 고유한 이름의 임시 파일을 만들고 해당 파일의 전체 경로를 반환합니다.</summary>
        <returns>임시 파일의 전체 경로를 포함하는 <see langword="String" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 임시 파일을 만드는 데 사용할 수 있습니다.  
  
   
  
## Examples  
 이 예제에서는 임시 파일을 만들고 해당 경로 반환 합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Visual Basic에서 파일/디렉터리 만들기, 삭제 및 이동</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>디렉터리를 한 위치에서 다른 위치로 이동합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName);" />
      <MemberSignature Language="F#" Value="member this.MoveDirectory : string * string -&gt; unit" Usage="fileSystemProxy.MoveDirectory (sourceDirectoryName, destinationDirectoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">이동할 디렉터리의 경로입니다.</param>
        <param name="destinationDirectoryName">소스 디렉터리가 이동되는 대상 디렉터리의 경로입니다.</param>
        <summary>디렉터리를 한 위치에서 다른 위치로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 존재 하지 않는 디렉터리 내에 디렉터리를 이동 하려고 하는 경우 대상 구조가 생성 됩니다.  
  
   
  
## Examples  
 이 예제에서는 이동 `Directory1` 내부 `Directory2`합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 이 예제에서는 이동 `Directory1` 내부 `Directory2`, 이미 있는 경우 디렉터리를 덮어씁니다.  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 경로가 디바이스 경로인 경우(\\\\.\\로 시작됨)와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> 또는 <paramref name="destinationDirectoryName" />가 <see langword="Nothing" />이거나 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">디렉터리가 없는 경우</exception>
        <exception cref="T:System.IO.IOException">소스는 루트 디렉터리이며 소스 경로와 대상 경로가 같습니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.InvalidOperationException">작업이 순환적인 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Visual Basic에서 파일/디렉터리 만들기, 삭제 및 이동</related>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="member this.MoveDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="fileSystemProxy.MoveDirectory (sourceDirectoryName, destinationDirectoryName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">이동할 디렉터리의 경로입니다.</param>
        <param name="destinationDirectoryName">소스 디렉터리가 이동되는 대상 디렉터리의 경로입니다.</param>
        <param name="showUI">작업 진행을 시각적으로 추적할지 여부를 지정합니다. 기본값은 <see langword="UIOption.OnlyErrorDialogs" />입니다.</param>
        <summary>디렉터리를 한 위치에서 다른 위치로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 존재 하지 않는 디렉터리 내에 디렉터리를 이동 하려고 하는 경우 대상 구조가 생성 됩니다.  
  
   
  
## Examples  
 이 예제에서는 이동 `Directory1` 내부 `Directory2`합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 이 예제에서는 이동 `Directory1` 내부 `Directory2`, 이미 있는 경우 디렉터리를 덮어씁니다.  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 경로가 디바이스 경로인 경우(\\\\.\\로 시작됨)와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> 또는 <paramref name="destinationDirectoryName" />가 <see langword="Nothing" />이거나 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">디렉터리가 없는 경우</exception>
        <exception cref="T:System.IO.IOException">대상 디렉터리가 이미 있고 <paramref name="overwrite" />가 <see langword="False" />로 설정됩니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.InvalidOperationException">작업이 순환적인 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">사용자 인터페이스 및 클립보드와 관련 된 사용 권한을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Visual Basic에서 파일/디렉터리 만들기, 삭제 및 이동</related>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.MoveDirectory : string * string * bool -&gt; unit" Usage="fileSystemProxy.MoveDirectory (sourceDirectoryName, destinationDirectoryName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">이동할 디렉터리의 경로입니다.</param>
        <param name="destinationDirectoryName">소스 디렉터리가 이동되는 대상 디렉터리의 경로입니다.</param>
        <param name="overwrite">기존 디렉터리를 덮어써야 하면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다. 기본값은 <see langword="False" />입니다.</param>
        <summary>디렉터리를 한 위치에서 다른 위치로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 존재 하지 않는 디렉터리 내에 디렉터리를 이동 하려고 하는 경우 대상 구조가 생성 됩니다.  
  
   
  
## Examples  
 이 예제에서는 이동 `Directory1` 내부 `Directory2`합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 이 예제에서는 이동 `Directory1` 내부 `Directory2`, 이미 있는 경우 디렉터리를 덮어씁니다.  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 경로가 디바이스 경로인 경우(\\\\.\\로 시작됨)와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> 또는 <paramref name="destinationDirectoryName" />가 <see langword="Nothing" />이거나 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">디렉터리가 없는 경우</exception>
        <exception cref="T:System.IO.IOException">대상 디렉터리가 이미 있고 <paramref name="overwrite" />가 <see langword="False" />로 설정됩니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.InvalidOperationException">작업이 순환적인 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Visual Basic에서 파일/디렉터리 만들기, 삭제 및 이동</related>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveDirectory (sourceDirectoryName As String, destinationDirectoryName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveDirectory(System::String ^ sourceDirectoryName, System::String ^ destinationDirectoryName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.MoveDirectory : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.MoveDirectory (sourceDirectoryName, destinationDirectoryName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">이동할 디렉터리의 경로입니다.</param>
        <param name="destinationDirectoryName">소스 디렉터리가 이동되는 대상 디렉터리의 경로입니다.</param>
        <param name="showUI">작업 진행을 시각적으로 추적할지 여부를 지정합니다. 기본값은 <see langword="UIOption.OnlyErrorDialogs" />입니다.</param>
        <param name="onUserCancel">사용자가 작업을 취소하는 경우 예외를 throw할지 여부를 지정합니다. 기본값은 <see langword="UICancelOption.ThrowException" />입니다.</param>
        <summary>디렉터리를 한 위치에서 다른 위치로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 존재 하지 않는 디렉터리 내에 디렉터리를 이동 하려고 하는 경우 대상 구조가 생성 됩니다.  
  
   
  
## Examples  
 이 예제에서는 이동 `Directory1` 내부 `Directory2`합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 이 예제에서는 이동 `Directory1` 내부 `Directory2`, 이미 있는 경우 디렉터리를 덮어씁니다.  
  
 [!code-vb[VbVbcnMyFileSystem#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, 경로가 디바이스 경로인 경우(\\\\.\\로 시작됨)와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceDirectoryName" /> 또는 <paramref name="destinationDirectoryName" />가 <see langword="Nothing" />이거나 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">디렉터리가 없는 경우</exception>
        <exception cref="T:System.IO.IOException"><paramref name="onUserCancel" />이 <see langword="ThrowException" />으로 설정되고 파일의 하위 디렉터리를 복사할 수 없는 경우</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="onUserCancel" />이 <see langword="ThrowException" />으로 설정되고 사용자가 작업을 취소하거나 작업을 완료할 수 없는 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.InvalidOperationException">작업이 순환적인 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">사용자 인터페이스 및 클립보드와 관련 된 사용 권한을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.CopyDirectory(System.String,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Visual Basic에서 파일/디렉터리 만들기, 삭제 및 이동</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>파일을 새 위치로 이동합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName);" />
      <MemberSignature Language="F#" Value="member this.MoveFile : string * string -&gt; unit" Usage="fileSystemProxy.MoveFile (sourceFileName, destinationFileName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">이동할 파일의 경로입니다.</param>
        <param name="destinationFileName">파일이 이동되는 대상 디렉터리의 경로입니다.</param>
        <summary>파일을 새 위치로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대상 구조체가 없는 경우 자동으로 만들어집니다.  
  
 `MoveFile` 메서드 Ace (액세스 제어 항목) 동일한 볼륨 내의 파일을 이동할 때만 유지 합니다. (직접 Ace 우선 상속 된 Ace)를 이동 하는 경우 직접 Ace가 상속 된 Ace를 포함 합니다. 파일 볼륨 간에 이동 되 면 Ace 복사 되지 않습니다.  
  
 다음 표에서 관련 된 작업의 예로 `My.Computer.FileSystem.MoveFile` 메서드.  
  
|대상|참조|  
|--------|---------|  
|파일 이동|[방법: 파일 이동](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 파일을 이동 하는이 예제 `Test.txt` 에서 `TestDir1` 에 `TestDir2`입니다.  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 파일을 이동 하는이 예제 `Test.txt` 에서 `TestDir1` 하 `TestDir2` 하 고 이름을 `Test2.txt`입니다.  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, \\\\.\\로 시작하는 디바이스 경로와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우, 슬래시()로 끝나는 경우.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">소스 파일이 올바르지 않거나 없는 경우</exception>
        <exception cref="T:System.IO.IOException">다른 프로세스에서 파일을 사용 중이거나 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">모든 환경 변수를 액세스 하는 기능을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">레지스트리 변수에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Visual Basic에서 파일/디렉터리 만들기, 삭제 및 이동</related>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String, showUI As UIOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI);" />
      <MemberSignature Language="F#" Value="member this.MoveFile : string * string * Microsoft.VisualBasic.FileIO.UIOption -&gt; unit" Usage="fileSystemProxy.MoveFile (sourceFileName, destinationFileName, showUI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">이동할 파일의 경로입니다.</param>
        <param name="destinationFileName">파일이 이동되는 대상 디렉터리의 경로입니다.</param>
        <param name="showUI">작업 진행을 시각적으로 추적할지 여부를 지정합니다. 기본값은 <see langword="UIOption.OnlyErrorDialogs" />입니다.</param>
        <summary>파일을 새 위치로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대상 구조체가 없는 경우 자동으로 만들어집니다.  
  
 `MoveFile` 메서드 Ace (액세스 제어 항목) 동일한 볼륨 내의 파일을 이동할 때만 유지 합니다. (직접 Ace 우선 상속 된 Ace)를 이동 하는 경우 직접 Ace가 상속 된 Ace를 포함 합니다. 파일 볼륨 간에 이동 되 면 Ace 복사 되지 않습니다.  
  
 다음 표에서 관련 된 작업의 예로 `My.Computer.FileSystem.MoveFile` 메서드.  
  
|대상|참조|  
|--------|---------|  
|파일 이동|[방법: 파일 이동](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 파일을 이동 하는이 예제 `Test.txt` 에서 `TestDir1` 에 `TestDir2`입니다.  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 파일을 이동 하는이 예제 `Test.txt` 에서 `TestDir1` 하 `TestDir2` 하 고 이름을 `Test2.txt`입니다.  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, \\\\.\\로 시작하는 디바이스 경로와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우, 슬래시()로 끝나는 경우.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">소스 파일이 올바르지 않거나 없는 경우</exception>
        <exception cref="T:System.IO.IOException">다른 프로세스에서 파일을 사용 중이거나 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">모든 환경 변수를 액세스 하는 기능을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">레지스트리 변수에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">사용자 인터페이스 및 클립보드와 관련 된 사용 권한을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Visual Basic에서 파일/디렉터리 만들기, 삭제 및 이동</related>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String, overwrite As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, bool overwrite);" />
      <MemberSignature Language="F#" Value="member this.MoveFile : string * string * bool -&gt; unit" Usage="fileSystemProxy.MoveFile (sourceFileName, destinationFileName, overwrite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">이동할 파일의 경로입니다.</param>
        <param name="destinationFileName">파일이 이동되는 대상 디렉터리의 경로입니다.</param>
        <param name="overwrite">기존 파일을 덮어쓰려면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다. 기본값은 <see langword="False" />입니다.</param>
        <summary>파일을 새 위치로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대상 구조체가 없는 경우 자동으로 만들어집니다.  
  
 `MoveFile` 메서드 Ace (액세스 제어 항목) 동일한 볼륨 내의 파일을 이동할 때만 유지 합니다. (직접 Ace 우선 상속 된 Ace)를 이동 하는 경우 직접 Ace가 상속 된 Ace를 포함 합니다. 파일 볼륨 간에 이동 되 면 Ace 복사 되지 않습니다.  
  
 다음 표에서 관련 된 작업의 예는 `My.Computer.FileSystem.MoveFile` 메서드.  
  
|대상|참조|  
|--------|---------|  
|파일 이동|[방법: 파일 이동](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 파일을 이동 하는이 예제 `Test.txt` 에서 `TestDir1` 에 `TestDir2`입니다.  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 파일을 이동 하는이 예제 `Test.txt` 에서 `TestDir1` 하 `TestDir2` 하 고 이름을 `Test2.txt`입니다.  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, \\\\.\\로 시작하는 디바이스 경로와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우, 슬래시()로 끝나는 경우.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">소스 파일이 올바르지 않거나 없는 경우</exception>
        <exception cref="T:System.IO.IOException">다른 프로세스에서 파일을 사용 중이거나 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">모든 환경 변수를 액세스 하는 기능을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">레지스트리 변수에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Visual Basic에서 파일/디렉터리 만들기, 삭제 및 이동</related>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveFile (sourceFileName As String, destinationFileName As String, showUI As UIOption, onUserCancel As UICancelOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveFile(System::String ^ sourceFileName, System::String ^ destinationFileName, Microsoft::VisualBasic::FileIO::UIOption showUI, Microsoft::VisualBasic::FileIO::UICancelOption onUserCancel);" />
      <MemberSignature Language="F#" Value="member this.MoveFile : string * string * Microsoft.VisualBasic.FileIO.UIOption * Microsoft.VisualBasic.FileIO.UICancelOption -&gt; unit" Usage="fileSystemProxy.MoveFile (sourceFileName, destinationFileName, showUI, onUserCancel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">이동할 파일의 경로입니다.</param>
        <param name="destinationFileName">파일이 이동되는 대상 디렉터리의 경로입니다.</param>
        <param name="showUI">작업 진행을 시각적으로 추적할지 여부를 지정합니다. 기본값은 <see langword="UIOption.OnlyErrorDialogs" />입니다.</param>
        <param name="onUserCancel">사용자가 작업을 취소하는 경우 예외를 throw할지 여부를 지정합니다. 기본값은 <see langword="UICancelOption.ThrowException" />입니다.</param>
        <summary>파일을 새 위치로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대상 구조체가 없는 경우 자동으로 만들어집니다.  
  
 `MoveFile` 메서드 Ace (액세스 제어 항목) 동일한 볼륨 내의 파일을 이동할 때만 유지 합니다. (직접 Ace 우선 상속 된 Ace)를 이동 하는 경우 직접 Ace가 상속 된 Ace를 포함 합니다. 파일 볼륨 간에 이동 되 면 Ace 복사 되지 않습니다.  
  
 다음 표에서 관련 된 작업의 예로 `My.Computer.FileSystem.MoveFile` 메서드.  
  
|대상|참조|  
|--------|---------|  
|파일 이동|[방법: 파일 이동](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-move-a-file.md)|  
  
   
  
## Examples  
 파일을 이동 하는이 예제 `Test.txt` 에서 `TestDir1` 에 `TestDir2`입니다.  
  
 [!code-vb[VbVbcnMyFileSystem#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 파일을 이동 하는이 예제 `Test.txt` 에서 `TestDir1` 하 `TestDir2` 하 고 이름을 `Test2.txt`입니다.  
  
 [!code-vb[VbVbcnMyFileSystem#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, \\\\.\\로 시작하는 디바이스 경로와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우, 슬래시()로 끝나는 경우.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationFileName" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">소스 파일이 올바르지 않거나 없는 경우</exception>
        <exception cref="T:System.IO.IOException">다른 프로세스에서 파일을 사용 중이거나 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="onUserCancel" />이 <see langword="ThrowException" />으로 설정된 상태에서 사용자가 작업을 취소했거나 지정되지 않은 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">모든 환경 변수를 액세스 하는 기능을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">레지스트리 변수에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">사용자 인터페이스 및 클립보드와 관련 된 사용 권한을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Visual Basic에서 파일/디렉터리 만들기, 삭제 및 이동</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFieldParser">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see langword="OpenTextFieldParser" /> 메서드를 사용하면 로그와 같은 구조적 텍스트 파일을 쉽고 효과적으로 구문 분석하는 방법을 제공하는 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체를 만들 수 있습니다. <see langword="TextFieldParser" /> 개체는 구분된 파일과 고정 너비 파일을 모두 읽는 데 사용될 수 있습니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFieldParser (file As String) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFieldParser : string -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="fileSystemProxy.OpenTextFieldParser file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file"><see langword="TextFieldParser" />로 열 파일입니다.</param>
        <summary><see langword="OpenTextFieldParser" /> 메서드를 사용하면 로그와 같은 구조적 텍스트 파일을 쉽고 효과적으로 구문 분석하는 방법을 제공하는 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체를 만들 수 있습니다. <see langword="TextFieldParser" /> 개체는 구분된 파일과 고정 너비 파일을 모두 읽는 데 사용될 수 있습니다.</summary>
        <returns>지정된 파일을 읽을 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.OpenTextFieldParser` 메서드.  
  
|대상|참조|  
|--------|---------|  
|구분 기호로 분리 된 텍스트 파일에서 읽기|[방법: 쉼표로 구분된 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|고정 너비 텍스트 파일에서 읽기|[방법: 고정 너비 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|여러 형식의 텍스트 파일에서 읽기|[방법: 여러 형식의 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 이 예제에서는 합니다 `TextFieldParser.reader` 에서 읽기를 사용 하 여 `C:\TestFolder1\Test1.txt`입니다.  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, \\\\.\\로 시작하는 디바이스 경로와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우, 슬래시()로 끝나는 경우.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />가 <see langword="Nothing" />입니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">파일이 없습니다.</exception>
        <exception cref="T:System.IO.IOException">다른 프로세스에서 파일을 사용 중이거나 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">지정된 형식을 사용하여 행을 구문 분석할 수 없는 경우 예외 메시지에는 예외를 발생시키는 줄이 지정되어 있지만 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> 속성은 해당 줄에 포함되어 있는 텍스트에 할당됩니다.</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">코드에 적용되는 보안 권한 집합을 설명합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md">방법: Visual Basic에서 텍스트 파일 읽기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일 읽기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">방법: Visual Basic에서 여러 형식의 텍스트 파일 읽기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Visual Basic에서 파일 읽기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</related>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String,System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFieldParser (file As String, ParamArray fieldWidths As Integer()) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file, ... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFieldParser : string * int[] -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="fileSystemProxy.OpenTextFieldParser (file, fieldWidths)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file"><see langword="TextFieldParser" />로 열 파일입니다.</param>
        <param name="fieldWidths">필드의 너비입니다.</param>
        <summary><see langword="OpenTextFieldParser" /> 메서드를 사용하면 로그와 같은 구조적 텍스트 파일을 쉽고 효과적으로 구문 분석하는 방법을 제공하는 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체를 만들 수 있습니다. <see langword="TextFieldParser" /> 개체는 구분된 파일과 고정 너비 파일을 모두 읽는 데 사용될 수 있습니다.</summary>
        <returns>지정된 파일을 읽을 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.OpenTextFieldParser` 메서드.  
  
|대상|참조|  
|--------|---------|  
|구분 기호로 분리 된 텍스트 파일에서 읽기|[방법: 쉼표로 구분된 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|고정 너비 텍스트 파일에서 읽기|[방법: 고정 너비 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|여러 형식의 텍스트 파일에서 읽기|[방법: 여러 형식의 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 이 예제에서는 합니다 `TextFieldParser.reader` 에서 읽기를 사용 하 여 `C:\TestFolder1\Test1.txt`입니다.  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, \\\\.\\로 시작하는 디바이스 경로와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우, 슬래시()로 끝나는 경우.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />가 <see langword="Nothing" />입니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">파일이 없습니다.</exception>
        <exception cref="T:System.IO.IOException">다른 프로세스에서 파일을 사용 중이거나 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">지정된 형식을 사용하여 행을 구문 분석할 수 없는 경우 예외 메시지에는 예외를 발생시키는 줄이 지정되어 있지만 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> 속성은 해당 줄에 포함되어 있는 텍스트에 할당됩니다.</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">코드에 적용되는 보안 권한 집합을 설명합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md">방법: Visual Basic에서 텍스트 파일 읽기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일 읽기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">방법: Visual Basic에서 여러 형식의 텍스트 파일 읽기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Visual Basic에서 파일 읽기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</related>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFieldParser(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFieldParser (file As String, ParamArray delimiters As String()) As TextFieldParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualBasic::FileIO::TextFieldParser ^ OpenTextFieldParser(System::String ^ file, ... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFieldParser : string * string[] -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="fileSystemProxy.OpenTextFieldParser (file, delimiters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file"><see langword="TextFieldParser" />로 열 파일입니다.</param>
        <param name="delimiters">필드에 사용하는 구분 기호입니다.</param>
        <summary><see langword="OpenTextFieldParser" /> 메서드를 사용하면 로그와 같은 구조적 텍스트 파일을 쉽고 효과적으로 구문 분석하는 방법을 제공하는 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 개체를 만들 수 있습니다. <see langword="TextFieldParser" /> 개체는 구분된 파일과 고정 너비 파일을 모두 읽는 데 사용될 수 있습니다.</summary>
        <returns>지정된 파일을 읽을 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.OpenTextFieldParser` 메서드.  
  
|대상|참조|  
|--------|---------|  
|구분 기호로 분리 된 텍스트 파일에서 읽기|[방법: 쉼표로 구분된 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|고정 너비 텍스트 파일에서 읽기|[방법: 고정 너비 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|여러 형식의 텍스트 파일에서 읽기|[방법: 여러 형식의 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 이 예제에서는 합니다 `TextFieldParser.reader` 에서 읽기를 사용 하 여 `C:\TestFolder1\Test1.txt`입니다.  
  
 [!code-vb[VbRefFile#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, \\\\.\\로 시작하는 디바이스 경로와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우, 슬래시()로 끝나는 경우.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />가 <see langword="Nothing" />입니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">파일이 없습니다.</exception>
        <exception cref="T:System.IO.IOException">다른 프로세스에서 파일을 사용 중이거나 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">지정된 형식을 사용하여 행을 구문 분석할 수 없는 경우 예외 메시지에는 예외를 발생시키는 줄이 지정되어 있지만 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> 속성은 해당 줄에 포함되어 있는 텍스트에 할당됩니다.</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">코드에 적용되는 보안 권한 집합을 설명합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md">방법: Visual Basic에서 텍스트 파일 읽기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md">방법: Visual Basic에서 쉼표로 구분 된 텍스트 파일 읽기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md">방법: Visual Basic에서 여러 형식의 텍스트 파일 읽기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Visual Basic에서 파일 읽기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md">TextFieldParser 개체를 사용하여 텍스트 파일 구문 분석</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFileReader">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>파일을 읽기 위해 <see cref="T:System.IO.StreamReader" /> 개체를 엽니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader OpenTextFileReader (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamReader OpenTextFileReader(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFileReader (file As String) As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamReader ^ OpenTextFileReader(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFileReader : string -&gt; System.IO.StreamReader" Usage="fileSystemProxy.OpenTextFileReader file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">읽을 파일입니다.</param>
        <summary>파일을 읽기 위해 <see cref="T:System.IO.StreamReader" /> 개체를 엽니다.</summary>
        <returns>파일을 읽을 <see cref="T:System.IO.StreamReader" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 텍스트 파일에만 읽을 수 있는 한 <xref:System.IO.StreamReader>합니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.OpenTextFileReader` 메서드.  
  
|대상|참조|  
|--------|---------|  
|파일을 사용 하 여 열을 <xref:System.IO.StreamReader>|[방법: StreamReader를 사용하여 파일에서 텍스트 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
  
   
  
## Examples  
 이 예제에서는 파일을 엽니다 `Testfile.txt`, 한 줄에서 읽고에서 줄을 표시는 `MessageBox`합니다.  
  
 [!code-vb[VbRefFile#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">파일 이름이 백슬래시(\\)로 끝나는 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">지정된 파일을 찾을 수 없는 경우</exception>
        <exception cref="T:System.Security.SecurityException">파일을 읽는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamReader" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md">방법: StreamReader를 사용하여 파일에서 텍스트 읽기(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Visual Basic에서 파일 읽기</related>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader OpenTextFileReader (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamReader OpenTextFileReader(string file, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileReader(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamReader ^ OpenTextFileReader(System::String ^ file, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFileReader : string * System.Text.Encoding -&gt; System.IO.StreamReader" Usage="fileSystemProxy.OpenTextFileReader (file, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">읽을 파일입니다.</param>
        <param name="encoding">파일 내용에 사용할 인코딩입니다. 기본값은 ASCII입니다.</param>
        <summary>파일을 읽기 위해 <see cref="T:System.IO.StreamReader" /> 개체를 엽니다.</summary>
        <returns>파일을 읽을 <see cref="T:System.IO.StreamReader" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 텍스트 파일에만 읽을 수 있는 한 <xref:System.IO.StreamReader>합니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.OpenTextFileReader` 메서드.  
  
|대상|참조|  
|--------|---------|  
|파일을 사용 하 여 열을 <xref:System.IO.StreamReader>|[방법: StreamReader를 사용하여 파일에서 텍스트 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md)|  
  
   
  
## Examples  
 이 예제에서는 파일을 엽니다 `Testfile.txt`, 한 줄에서 읽고에서 줄을 표시는 `MessageBox`합니다.  
  
 [!code-vb[VbRefFile#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">파일 이름이 백슬래시(\\)로 끝나는 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">지정된 파일을 찾을 수 없는 경우</exception>
        <exception cref="T:System.Security.SecurityException">파일을 읽는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamReader" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md">방법: StreamReader를 사용하여 파일에서 텍스트 읽기(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Visual Basic에서 파일 읽기</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenTextFileWriter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 파일에 쓰기 위해 <see cref="T:System.IO.StreamWriter" /> 개체를 엽니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public System.IO.StreamWriter OpenTextFileWriter (string file, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamWriter OpenTextFileWriter(string file, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenTextFileWriter (file As String, append As Boolean) As StreamWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamWriter ^ OpenTextFileWriter(System::String ^ file, bool append);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFileWriter : string * bool -&gt; System.IO.StreamWriter" Usage="fileSystemProxy.OpenTextFileWriter (file, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">기록할 파일입니다.</param>
        <param name="append">파일 내용에 추가하려면 <see langword="True" />이고, 파일 내용을 덮어쓰려면 <see langword="False" />입니다. 기본값은 <see langword="False" />입니다.</param>
        <summary>지정된 파일에 쓰기 위해 <see cref="T:System.IO.StreamWriter" /> 개체를 엽니다.</summary>
        <returns>지정된 파일에 기록할 <see cref="T:System.IO.StreamWriter" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `OpenTextFileWriter` 메서드 및 파일 스트림을 초기화을 열고 다음을 반환 합니다 <xref:System.IO.StreamWriter> 해당 스트림에 대 한 개체입니다. 필요한 만큼 스트림을 쓸 수 있으며 완료 했으면 다음 닫습니다.  
  
> [!NOTE]
>  호출 해야 합니다는 <xref:System.IO.StreamWriter.Close%2A> 메서드를 <xref:System.IO.StreamWriter> 모든 데이터가 내부 스트림에 올바르게 기록 되도록 하는 개체입니다.  
  
 파일에 몇 가지 문자열만 작성 하는 경우 간단 하 게 사용할 수 있습니다는 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A> 메서드.  
  
 다음 표에서 관련 된 작업의 예로 `My.Computer.FileSystem.OpenTextFileWriter` 메서드.  
  
|대상|참조|  
|--------|---------|  
|사용 하 여 파일에 텍스트 쓰기는 `StreamWriter`|[방법: StreamWriter를 사용하여 파일에 텍스트 쓰기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
  
   
  
## Examples  
 이 예제에서는 <xref:System.IO.StreamWriter> 사용 하 여는 `My.Computer.FileSystem.OpenTextFileWriter` 메서드 문자열을 사용 하 여 텍스트 파일에 기록 하는 데 사용 합니다 `WriteLine` 메서드의 `StreamWriter` 클래스.  
  
 [!code-vb[VbRefFile#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">파일 이름의 마지막에 슬래시가 있는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamWriter" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</related>
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public System.IO.StreamWriter OpenTextFileWriter (string file, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.IO.StreamWriter OpenTextFileWriter(string file, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::StreamWriter ^ OpenTextFileWriter(System::String ^ file, bool append, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="member this.OpenTextFileWriter : string * bool * System.Text.Encoding -&gt; System.IO.StreamWriter" Usage="fileSystemProxy.OpenTextFileWriter (file, append, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">기록할 파일입니다.</param>
        <param name="append">파일 내용에 추가하려면 <see langword="True" />이고, 파일 내용을 덮어쓰려면 <see langword="False" />입니다. 기본값은 <see langword="False" />입니다.</param>
        <param name="encoding">파일에 쓸 때 사용할 인코딩입니다. 기본값은 ASCII입니다.</param>
        <summary>지정된 파일에 쓰기 위해 <see cref="T:System.IO.StreamWriter" />를 엽니다.</summary>
        <returns>지정된 파일에 기록할 <see cref="T:System.IO.StreamWriter" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `OpenTextFileWriter` 메서드 및 파일 스트림을 초기화을 열고 다음을 반환 합니다 <xref:System.IO.StreamWriter> 해당 스트림에 대 한 개체입니다. 필요한 만큼 스트림을 쓸 수 있으며 완료 했으면 다음 닫습니다.  
  
> [!NOTE]
>  호출 해야 합니다는 <xref:System.IO.StreamWriter.Close%2A> 메서드를 <xref:System.IO.StreamWriter> 모든 데이터가 내부 스트림에 올바르게 기록 되도록 하는 개체입니다.  
  
 파일에 몇 가지 문자열만 작성 하는 경우 간단 하 게 사용할 수 있습니다는 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A> 메서드.  
  
 다음 표에서 관련 된 작업의 예로 `My.Computer.FileSystem.OpenTextFileWriter` 메서드.  
  
|대상|참조|  
|--------|---------|  
|사용 하 여 파일에 텍스트 쓰기는 `StreamWriter`|[방법: StreamWriter를 사용하여 파일에 텍스트 쓰기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md)|  
  
   
  
## Examples  
 이 예제에서는 <xref:System.IO.StreamWriter> 사용 하 여는 `My.Computer.FileSystem.OpenTextFileWriter` 메서드 문자열을 사용 하 여 텍스트 파일에 기록 하는 데 사용 합니다 `WriteLine` 메서드의 `StreamWriter` 클래스.  
  
 [!code-vb[VbRefFile#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">파일 이름의 마지막에 슬래시가 있는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamWriter" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md">방법: Streamwriter (Visual Basic)를 사용 하 여 파일에 텍스트 쓰기</related>
      </Docs>
    </Member>
    <Member MemberName="ReadAllBytes">
      <MemberSignature Language="C#" Value="public byte[] ReadAllBytes (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance unsigned int8[] ReadAllBytes(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAllBytes (file As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ReadAllBytes(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.ReadAllBytes : string -&gt; byte[]" Usage="fileSystemProxy.ReadAllBytes file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">읽을 파일입니다.</param>
        <summary>파일의 내용을 바이트 배열로 반환합니다.</summary>
        <returns>파일의 내용을 포함하는 <see langword="Byte" /> 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `ReadAllBytes` 메서드는 `My.Computer.FileSystem` 개체를 사용 하면 이진 파일에서 읽을 수 있습니다. 파일의 내용은 바이트 배열로 반환 됩니다.  
  
 파일 이름을 바탕으로 파일 내용을 판단하면 안 됩니다. 예를 들어 Form1.vb 파일이 Visual Basic 소스 파일이 아닐 수도 있습니다. 애플리케이션에서 데이터를 사용하기 전에 모든 입력을 확인해야 합니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.ReadAllBytes` 메서드.  
  
|대상|참조|  
|--------|---------|  
|이진 파일에서 읽기|[방법: 이진 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-binary-files.md)|  
  
   
  
## Examples  
 이 예제에서는 파일에서 읽기 `C:/Documents and Settings/selfportrait.jpg.`  
  
 [!code-vb[VbVbcnMyFileSystem#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, \\\\.\\로 시작하는 디바이스 경로와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우, 슬래시()로 끝나는 경우.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />가 <see langword="Nothing" />입니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">파일이 없습니다.</exception>
        <exception cref="T:System.IO.IOException">다른 프로세스에서 파일을 사용 중이거나 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.OutOfMemoryException">문자열을 버퍼에 쓰기 위한 메모리가 부족한 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Visual Basic에서 파일 읽기</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadAllText">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>텍스트 파일의 내용을 <see langword="String" />으로 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public string ReadAllText (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadAllText(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAllText (file As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadAllText(System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.ReadAllText : string -&gt; string" Usage="fileSystemProxy.ReadAllText file" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">읽을 파일의 이름과 경로입니다.</param>
        <summary>텍스트 파일의 내용을 <see langword="String" />으로 반환합니다.</summary>
        <returns>파일의 내용을 포함하는 <see langword="String" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadAllText` 개체의 `My.Computer.FileSystem` 메서드를 사용하면 텍스트 파일을 읽을 수 있습니다. 파일의 내용은 문자열로 반환 됩니다.  
  
 파일 인코딩을 지정할 수 있습니다 하는 경우 파일의 내용이 예: ASCII 또는 utf-8 인코딩을 지정 합니다. 다른 오버 로드를 사용 하 여 파일 인코딩을 지정 해야 하는 확장 된 문자를 사용 하 여 파일에서 읽는 경우를 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText%2A> 메서드.  
  
 파일 이름을 바탕으로 파일 내용을 판단하면 안 됩니다. 예를 들어 Form1.vb 파일이 Visual Basic 소스 파일이 아닐 수도 있습니다. 애플리케이션에서 데이터를 사용하기 전에 모든 입력을 확인해야 합니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.ReadAllText` 메서드.  
  
|대상|참조|  
|--------|---------|  
|텍스트 파일에서 읽기|[방법: 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
  
   
  
## Examples  
 이 예의 내용을 읽어서 `Test.txt` 문자열로 메시지 상자에 표시 합니다.  
  
 [!code-vb[VbRefFile#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#8)]  
  
 이 예에서는 ASCII 파일의 내용을 읽어서 `Test.txt` 문자열로 메시지 상자에 표시 합니다.  
  
 [!code-vb[VbRefFile#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, \\\\.\\로 시작하는 디바이스 경로와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우, 슬래시()로 끝나는 경우.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />가 <see langword="Nothing" />입니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">파일이 없습니다.</exception>
        <exception cref="T:System.IO.IOException">다른 프로세스에서 파일을 사용 중이거나 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.OutOfMemoryException">문자열을 버퍼에 쓰기 위한 메모리가 부족한 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String)" />
        <altmember cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Visual Basic에서 파일 읽기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md">방법: StreamReader를 사용하여 파일에서 텍스트 읽기(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/troubleshooting-reading-from-and-writing-to-text-files.md">문제 해결: 읽기 및 텍스트 파일에 쓰기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">연습: Visual Basic에서 파일과 디렉터리 조작</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-encodings.md">파일 인코딩</related>
      </Docs>
    </Member>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public string ReadAllText (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadAllText(string file, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.ReadAllText(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadAllText(System::String ^ file, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="member this.ReadAllText : string * System.Text.Encoding -&gt; string" Usage="fileSystemProxy.ReadAllText (file, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">읽을 파일의 이름과 경로입니다.</param>
        <param name="encoding">파일을 읽을 때 사용할 문자 인코딩입니다. 기본값은 UTF-8입니다.</param>
        <summary>텍스트 파일의 내용을 <see langword="String" />으로 반환합니다.</summary>
        <returns>파일의 내용을 포함하는 <see langword="String" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReadAllText` 개체의 `My.Computer.FileSystem` 메서드를 사용하면 텍스트 파일을 읽을 수 있습니다. 파일의 내용은 문자열로 반환 됩니다.  
  
 파일 인코딩을 지정할 수 있습니다 하는 경우 파일의 내용이 예: ASCII 또는 utf-8 인코딩을 지정 합니다. 확장 된 문자를 사용 하 여 파일에서 읽을 때는 파일 인코딩을 지정 해야 합니다.  
  
 파일 이름을 바탕으로 파일 내용을 판단하면 안 됩니다. 예를 들어 Form1.vb 파일이 Visual Basic 소스 파일이 아닐 수도 있습니다. 애플리케이션에서 데이터를 사용하기 전에 모든 입력을 확인해야 합니다.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.ReadAllText` 메서드.  
  
|대상|참조|  
|--------|---------|  
|텍스트 파일에서 읽기|[방법: 텍스트 파일에서 읽기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files.md)|  
  
   
  
## Examples  
 이 예의 내용을 읽어서 `Test.txt` 문자열로 메시지 상자에 표시 합니다.  
  
 [!code-vb[VbRefFile#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#8)]  
  
 이 예에서는 ASCII 파일의 내용을 읽어서 `Test.txt` 문자열로 메시지 상자에 표시 합니다.  
  
 [!code-vb[VbRefFile#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, \\\\.\\로 시작하는 디바이스 경로와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우, 슬래시()로 끝나는 경우.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />가 <see langword="Nothing" />입니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">파일이 없습니다.</exception>
        <exception cref="T:System.IO.IOException">다른 프로세스에서 파일을 사용 중이거나 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.OutOfMemoryException">문자열을 버퍼에 쓰기 위한 메모리가 부족한 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md">Visual Basic에서 파일 읽기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md">방법: StreamReader를 사용하여 파일에서 텍스트 읽기(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/troubleshooting-reading-from-and-writing-to-text-files.md">문제 해결: 읽기 및 텍스트 파일에 쓰기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md">연습: Visual Basic에서 파일과 디렉터리 조작</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-encodings.md">파일 인코딩</related>
      </Docs>
    </Member>
    <Member MemberName="RenameDirectory">
      <MemberSignature Language="C#" Value="public void RenameDirectory (string directory, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void RenameDirectory(string directory, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameDirectory(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RenameDirectory (directory As String, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RenameDirectory(System::String ^ directory, System::String ^ newName);" />
      <MemberSignature Language="F#" Value="member this.RenameDirectory : string * string -&gt; unit" Usage="fileSystemProxy.RenameDirectory (directory, newName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">이름을 바꿀 디렉터리의 경로와 이름입니다.</param>
        <param name="newName">디렉터리의 새 이름입니다.</param>
        <summary>디렉터리의 이름을 바꿉니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하는 디렉터리를 이동할 수 없습니다. 사용 하 여를 `MoveDirectory` 메서드를 이동 하 고 디렉터리를 이름을 바꿉니다.  
  
   
  
## Examples  
 이 예제는 `Test` 디렉터리를 `SecondTest`입니다.  
  
 [!code-vb[VbVbcnMyFileSystem#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="newName" />에 경로 정보가 포함된 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="directory" />가 <see langword="Nothing" />입니다.  
  
또는 
 <paramref name="newName" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">디렉터리가 없는 경우</exception>
        <exception cref="T:System.IO.IOException"><paramref name="newName" />에 지정된 이름을 갖는 파일이나 디렉터리가 이미 있는 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md">방법: Visual Basic에서 파일 경로의 구문 분석</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Visual Basic에서 파일/디렉터리 만들기, 삭제 및 이동</related>
      </Docs>
    </Member>
    <Member MemberName="RenameFile">
      <MemberSignature Language="C#" Value="public void RenameFile (string file, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void RenameFile(string file, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.RenameFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RenameFile (file As String, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RenameFile(System::String ^ file, System::String ^ newName);" />
      <MemberSignature Language="F#" Value="member this.RenameFile : string * string -&gt; unit" Usage="fileSystemProxy.RenameFile (file, newName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">이름을 바꿀 파일입니다.</param>
        <param name="newName">파일의 새 이름입니다.</param>
        <summary>파일 이름을 바꿉니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용하여 파일을 이동할 수는 없습니다. 파일을 이동하고 파일 이름을 바꾸려면 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.MoveFile%2A> 메서드를 사용합니다.  
  
 다음 표에서 관련 된 작업의 예로 `My.Computer.FileSystem.RenameFile` 메서드.  
  
|대상|참조|  
|--------|---------|  
|파일 이름 바꾸기|[방법: 파일 이름 바꾸기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md)|  
  
   
  
## Examples  
 이 예제에서는 파일 이름을 바꿉니다 `Test.txt` 에 `SecondTest.txt`입니다.  
  
 [!code-vb[VbVbcnMyFileSystem#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#1)]  
  
 변경 "`C:\Test.txt`" 이름을 바꿀 파일의 경로 및 파일 이름입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="newName" />에는 백슬래시(\\)로 끝나는 경로 정보가 포함되어 있습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />가 <see langword="Nothing" />입니다.  
  
또는 
 <paramref name="newName" />이 <see langword="Nothing" /> 또는 빈 문자열인 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">파일이 없습니다.</exception>
        <exception cref="T:System.IO.IOException"><paramref name="newName" />에 지정된 이름을 갖는 파일이나 디렉터리가 이미 있는 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 필요한 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md">Visual Basic에서 파일/디렉터리 만들기, 삭제 및 이동</related>
      </Docs>
    </Member>
    <Member MemberName="SpecialDirectories">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy SpecialDirectories { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy SpecialDirectories" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SpecialDirectories As SpecialDirectoriesProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::MyServices::SpecialDirectoriesProxy ^ SpecialDirectories { Microsoft::VisualBasic::MyServices::SpecialDirectoriesProxy ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SpecialDirectories : Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy" Usage="Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>주로 참조되는 디렉터리에 액세스하기 위한 속성을 제공하는 개체를 가져옵니다.</summary>
        <value>이 속성은 컴퓨터의 <see cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" /> 개체를 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 이 예제에서는 사용자의 데스크톱 디렉터리에 대 한 파일 경로 반환 하 고이 표시 합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#80](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#80)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="WriteAllBytes">
      <MemberSignature Language="C#" Value="public void WriteAllBytes (string file, byte[] data, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllBytes(string file, unsigned int8[] data, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllBytes(System.String,System.Byte[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAllBytes (file As String, data As Byte(), append As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAllBytes(System::String ^ file, cli::array &lt;System::Byte&gt; ^ data, bool append);" />
      <MemberSignature Language="F#" Value="member this.WriteAllBytes : string * byte[] * bool -&gt; unit" Usage="fileSystemProxy.WriteAllBytes (file, data, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">기록할 파일의 경로와 이름입니다.</param>
        <param name="data">파일에 쓸 데이터입니다.</param>
        <param name="append">파일 내용에 추가하려면 <see langword="True" />이고, 파일 내용을 덮어쓰려면 <see langword="False" />입니다. 기본값은 <see langword="False" />입니다.</param>
        <summary>이진 파일에 데이터를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정된 된 경로 파일 이름을 제외한 유효 하지 않은 경우는 <xref:System.IO.DirectoryNotFoundException> 예외가 throw 됩니다. 경로가 유효한 파일이 존재 하지 않습니다 하지만 경우에 파일이 생성 됩니다.  
  
> [!NOTE]
>  `WriteAllBytes` 메서드 파일을 엽니다를 작성 하 고 다음 닫습니다. 사용 하는 코드를 `WriteAllBytes` 메서드를 사용 하는 코드 보다 간단를 <xref:System.IO.BinaryWriter> 개체입니다. 그러나 루프를 사용 하 여 파일에 데이터를 추가 하는 경우는 <xref:System.IO.BinaryWriter> 개체를 열고 파일을 한 번 닫을 하나만 있으므로 더 나은 성능을 제공할 수 있습니다.  
  
 다음 표에서 관련 된 작업의 예로 `My.Computer.FileSystem.WriteAllBytes` 메서드.  
  
|대상|참조|  
|--------|---------|  
|이진 파일에 쓰기|[방법: 이진 파일에 쓰기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files.md)|  
  
   
  
## Examples  
 이 예제에서는 추가 데이터 배열의 `CustomerData` 파일로 `CollectedData`합니다.  
  
 [!code-vb[VbVbcnMyFileSystem#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, \\\\.\\로 시작하는 디바이스 경로와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우, 슬래시()로 끝나는 경우.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />가 <see langword="Nothing" />입니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">파일이 없습니다.</exception>
        <exception cref="T:System.IO.IOException">다른 프로세스에서 파일을 사용 중이거나 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.OutOfMemoryException">문자열을 버퍼에 쓰기 위한 메모리가 부족한 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-to-binary-files.md">방법: Visual Basic에서 이진 파일에 쓰기</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">Visual Basic에서 파일에 쓰기</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAllText">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>파일에 텍스트를 씁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public void WriteAllText (string file, string text, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllText(string file, string text, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteAllText (file As String, text As String, append As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAllText(System::String ^ file, System::String ^ text, bool append);" />
      <MemberSignature Language="F#" Value="member this.WriteAllText : string * string * bool -&gt; unit" Usage="fileSystemProxy.WriteAllText (file, text, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">기록할 파일입니다.</param>
        <param name="text">파일에 쓸 텍스트입니다.</param>
        <param name="append">파일 내용에 추가하려면 <see langword="True" />이고, 파일 내용을 덮어쓰려면 <see langword="False" />입니다. 기본값은 <see langword="False" />입니다.</param>
        <summary>파일에 텍스트를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 U t F-8 인코딩 파일에 쓸 사용 됩니다. 다른 인코딩을 지정 하려면 다른 오버 로드를 사용 합니다 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText%2A> 메서드.  
  
 지정한 파일이 없으면 새로 만들어집니다.  
  
 지정 된 인코딩을 파일의 기존 인코딩과 일치 하지 않으면 지정 된 코딩 무시 됩니다.  
  
> [!NOTE]
>  `WriteAllText` 메서드 파일을 엽니다를 작성 하 고 다음 닫습니다. 사용 하는 코드를 `WriteAllText` 메서드를 사용 하는 코드 보다 간단를 <xref:System.IO.StreamWriter> 개체입니다. 그러나 추가 하는 경우 문자열을 파일에는 루프를 사용 하 여,는 <xref:System.IO.StreamWriter> 개체 열기 및 닫기 파일을 한 번에 하나만 있으므로 더 나은 성능을 제공할 수 있습니다. 자세한 내용은 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter%2A> 메서드를 참조하세요.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.WriteAllText` 메서드.  
  
|대상|참조|  
|--------|---------|  
|파일에 텍스트 쓰기|[방법: 파일에 텍스트 쓰기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|파일에 텍스트 추가|[방법: 텍스트 파일에 추가](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
  
   
  
## Examples  
 이 예제에서는 줄을 씁니다 `"This is new text to be added."` 파일로 `Test.txt`, 파일에서 기존 텍스트를 덮어씁니다.  
  
 [!code-vb[VbRefFile#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#21)]  
  
 이 예제에서는 파일의 이름을 작성 합니다 `Documents and Settings` 폴더를 `FileList.txt`, 캐리지 리턴을 삽입 가독성을 높이기 위해 각 사이입니다.  
  
 [!code-vb[VbRefFile#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, \\\\.\\로 시작하는 디바이스 경로와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우, 슬래시()로 끝나는 경우.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />가 <see langword="Nothing" />입니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">파일이 없습니다.</exception>
        <exception cref="T:System.IO.IOException">다른 프로세스에서 파일을 사용 중이거나 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.OutOfMemoryException">문자열을 버퍼에 쓰기 위한 메모리가 부족한 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">Visual Basic에서 파일에 쓰기</related>
      </Docs>
    </Member>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public void WriteAllText (string file, string text, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteAllText(string file, string text, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.MyServices.FileSystemProxy.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteAllText(System::String ^ file, System::String ^ text, bool append, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="member this.WriteAllText : string * string * bool * System.Text.Encoding -&gt; unit" Usage="fileSystemProxy.WriteAllText (file, text, append, encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">기록할 파일입니다.</param>
        <param name="text">파일에 쓸 텍스트입니다.</param>
        <param name="append">파일 내용에 추가하려면 <see langword="True" />이고, 파일 내용을 덮어쓰려면 <see langword="False" />입니다. 기본값은 <see langword="False" />입니다.</param>
        <param name="encoding">파일에 쓸 때 사용할 인코딩입니다. 기본값은 UTF-8입니다.</param>
        <summary>파일에 텍스트를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정한 파일이 없으면 새로 만들어집니다.  
  
 지정 된 인코딩을 파일의 기존 인코딩과 일치 하지 않으면 지정 된 코딩 무시 됩니다.  
  
> [!NOTE]
>  `WriteAllText` 메서드 파일을 엽니다를 작성 하 고 다음 닫습니다. 사용 하는 코드를 `WriteAllText` 메서드를 사용 하는 코드 보다 간단를 <xref:System.IO.StreamWriter> 개체입니다. 그러나 추가 하는 경우 문자열을 파일에는 루프를 사용 하 여,는 <xref:System.IO.StreamWriter> 개체 열기 및 닫기 파일을 한 번에 하나만 있으므로 더 나은 성능을 제공할 수 있습니다. 자세한 내용은 <xref:Microsoft.VisualBasic.MyServices.FileSystemProxy.OpenTextFileWriter%2A> 메서드를 참조하세요.  
  
 다음 표에서 관련 된 작업의 예제는 `My.Computer.FileSystem.WriteAllText` 메서드.  
  
|대상|참조|  
|--------|---------|  
|파일에 텍스트 쓰기|[방법: 파일에 텍스트 쓰기](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md)|  
|파일에 텍스트 추가|[방법: 텍스트 파일에 추가](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-append-to-text-files.md)|  
  
   
  
## Examples  
 이 예제에서는 줄을 씁니다 `"This is new text to be added."` 파일로 `Test.txt`, 파일에서 기존 텍스트를 덮어씁니다.  
  
 [!code-vb[VbRefFile#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#21)]  
  
 이 예제에서는 파일의 이름을 작성 합니다 `Documents and Settings` 폴더를 `FileList.txt`, 캐리지 리턴을 삽입 가독성을 높이기 위해 각 사이입니다.  
  
 [!code-vb[VbRefFile#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">길이가 0인 문자열이거나, 공백만 포함하거나, 잘못된 문자를 포함하거나, \\\\.\\로 시작하는 디바이스 경로와 같은 여러 가지 이유 중 하나로 경로가 올바르지 않은 경우, 슬래시()로 끝나는 경우.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="file" />가 <see langword="Nothing" />입니다.</exception>
        <exception cref="T:System.IO.FileNotFoundException">파일이 없습니다.</exception>
        <exception cref="T:System.IO.IOException">다른 프로세스에서 파일을 사용 중이거나 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">경로가 시스템 정의 최대 길이를 초과하는 경우</exception>
        <exception cref="T:System.NotSupportedException">경로의 파일 이름이나 디렉터리 이름에 콜론(:)이 있거나 이름의 형식이 잘못된 경우</exception>
        <exception cref="T:System.OutOfMemoryException">문자열을 버퍼에 쓰기 위한 메모리가 부족한 경우</exception>
        <exception cref="T:System.Security.SecurityException">경로를 보는 데 필요한 권한이 사용자에게 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Text.Encoding" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">개체(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md">Visual Basic에서 파일에 쓰기</related>
      </Docs>
    </Member>
  </Members>
</Type>