<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9765a35a73e33a7e4affa6bc4de891155e6dac2a" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57950151" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Conversion" /> 모듈에는 다양한 변환 작업을 수행하는 데 사용되는 프로시저가 포함되어 있습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 모듈에서는 Visual Basic 언어 키워드 및 10 진수를 다른 진수로 변환 하는 런타임 라이브러리 멤버를 다른 숫자 문자열, 숫자, 문자열 및 데이터를 입력 합니다.  
  
   
  
## Examples  
 이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">키워드(Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic 런타임 라이브러리 멤버</related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="TargetType" Type="System.Type" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">변환할 개체입니다.</param>
        <param name="TargetType">개체를 변환할 대상 형식입니다.</param>
        <summary>개체를 지정된 형식으로 변환합니다.</summary>
        <returns>런타임에서의 형식이 요청된 대상 형식인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CTypeDynamic` 메서드 변환으로 전달 되는 개체를 `Expression` 에 지정 된 형식 매개 변수는 `TargetType` 매개 변수입니다. 개체가 동적 개체를 하는 경우는 `CTypeDynamic` 메서드 사용 가능한 동적 변환을 적용 합니다.  
  
 `CTypeDynamic` 메서드 개체 자체에 의해 정의 된 변환 의미 체계에 따라 동적 변환을 적용 합니다. 동적 개체에서 상속 하는 경우 <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` 메서드는 먼저, 정적 사용자 정의 변환을 사용 하 여 변환을 수행 하려고 시도 합니다. 사용자 정의 정적 변환에 실패 하는 경우는 `CTypeDynamic` 메서드는 동적 변환을 사용 하 여 변환을 수행 하려고 시도 합니다. 동적 개체를 구현 하는 경우 <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` 메서드는 정적 사용자 정의 변환을 통해 동적 변환 우선 순위를 제공 합니다.  
  
   
  
## Examples  
 다음 예제에서는 `CTypeDynamic` 동적 개체에서 정의한 변환을 사용 하 여 동적 개체를 문자열로 변환 하는 방법입니다.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">동적 개체 작업(Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">연습: 동적 개체 만들기 및 사용(C# 및 Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">개체를 변환할 대상 형식입니다.</typeparam>
        <param name="Expression">변환할 개체입니다.</param>
        <summary>개체를 지정된 제네릭 형식으로 변환합니다.</summary>
        <returns>요청된 제네릭 형식으로 정적 형식이 지정된 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `CTypeDynamic` 메서드 변환으로 전달 되는 개체는 `Expression` 제네릭 매개 변수의 형식으로 지정 된 형식 매개 변수입니다. 개체가 동적 개체를 하는 경우는 `CTypeDynamic` 메서드 사용 가능한 동적 변환을 적용 합니다.  
  
 `CTypeDynamic` 메서드 개체 자체에 의해 정의 된 변환 의미 체계에 따라 동적 변환을 적용 합니다. 동적 개체에서 상속 하는 경우 <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` 메서드는 먼저, 정적 사용자 정의 변환을 사용 하 여 변환을 수행 하려고 시도 합니다. 사용자 정의 정적 변환에 실패 하는 경우는 `CTypeDynamic` 메서드는 동적 변환을 사용 하 여 변환을 수행 하려고 시도 합니다. 동적 개체를 구현 하는 경우 <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` 메서드는 정적 사용자 정의 변환을 통해 동적 변환 우선 순위를 제공 합니다.  
  
   
  
## Examples  
 다음 예제에서는 `CTypeDynamic` 동적 개체에서 정의한 변환을 사용 하 여 동적 개체를 문자열로 변환 하는 방법입니다.  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">동적 개체 작업(Visual Basic)</related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">연습: 동적 개체 만들기 및 사용(C# 및 Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정한 오류 번호에 해당하는 오류 메시지를 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>지정한 오류 번호에 해당하는 오류 메시지를 반환합니다.</summary>
        <returns>최근 런타임 오류에 해당하는 오류 메시지입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `ErrorToString` 의 속성 설정을 검사 하는 함수는 `Err` 최근 런타임 오류를 식별 하는 개체입니다. 반환 값을 `ErrorToString` 에 해당 하는 함수를 `Description` 의 속성은 `Err` 개체입니다. 런타임 오류가 발생 하지 않은, 경우 `ErrorToString` 길이가 0 인 문자열을 반환 합니다 ("").  
  
 Visual Basic 6.0 및 이전 버전에서는이 기능에서 제공한는 `Error` 함수입니다.  
  
   
  
## Examples  
 다음 코드에서는 `ErrorToString` 함수를 지정 된 오류 번호에 해당 하는 오류 메시지를 표시 합니다.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ErrorNumber" />이 범위에서 벗어난 경우.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">선택 사항입니다. 유효한 임의의 오류 번호입니다.</param>
        <summary>지정한 오류 번호에 해당하는 오류 메시지를 반환합니다.</summary>
        <returns>지정한 오류 번호에 해당하는 오류 메시지입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `ErrorToString` 의 속성 설정을 검사 하는 함수는 `Err` 최근 런타임 오류를 식별 하는 개체입니다. 반환 값을 `ErrorToString` 에 해당 하는 함수를 `Description` 의 속성은 `Err` 개체입니다. 하는 경우 `ErrorNumber` 알맞은 오류 번호를 되었지만 정의 되어 있지 `ErrorToString` 문자열을 반환 합니다 `"Application-defined or object-defined error."` 경우 `ErrorNumber` 유효 하지 않은 오류가 발생 합니다. 경우 `ErrorNumber` 를 생략 하면 가장 최근의 해당 메시지에서 런타임 오류가 반환 됩니다. 런타임 오류가 발생 하지 않은 경우 또는 `ErrorNumber` 가 0 이면 `ErrorToString` 길이가 0 인 문자열을 반환 합니다 ("").  
  
 Visual Basic 6.0 및 이전 버전에서는이 기능에서 제공한는 `Error` 함수입니다.  
  
   
  
## Examples  
 다음 코드에서는 `ErrorToString` 함수를 지정 된 오류 번호에 해당 하는 오류 메시지를 표시 합니다.  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ErrorNumber" />이 범위에서 벗어난 경우.</exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>숫자의 정수 부분을 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. <see langword="Decimal" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</param>
        <summary>숫자의 정수 부분을 반환합니다.</summary>
        <returns>숫자의 정수 부분입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.  
  
 차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다. 예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.  
  
 `Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`  
  
## Examples  
 이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다. 인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다. 다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다. 그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다. 예:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다. 예:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number를 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException">Number가 숫자 형식이 아닙니다.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">수학 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">수학 함수(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</param>
        <summary>숫자의 정수 부분을 반환합니다.</summary>
        <returns>숫자의 정수 부분입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.  
  
 차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다. 예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.  
  
 `Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`  

성능, Visual Basic 15.8부터 `Double`-에-정수로 변환 하 여 반환 되는 값을 전달 하는 경우 최적화 된를 `Fix` 메서드 중 하나를 [정수 계열 변환 함수](~/docs/visual-basic/language-reference/functions/conversion-functions.md), 또는 경우에는 `Double`에서 반환 된 값 `Fix` 포함 된 정수를 암시적으로 변환 됩니다 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) 로 `Off`합니다. 이 최적화에는 코드를를 더 빠르게-많은 수의 정수 형식 변환 수행 하는 코드에 대 한 빠른 배까지 실행할 수 있습니다. 다음 예제에서는 이러한 최적화 된 변환을 보여 줍니다.

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다. 인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다. 다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다. 그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다. 예:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다. 예:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number를 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException">Number가 숫자 형식이 아닙니다.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">수학 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">수학 함수(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. <see langword="Short" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</param>
        <summary>숫자의 정수 부분을 반환합니다.</summary>
        <returns>숫자의 정수 부분입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.  
  
 차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다. 예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.  
  
 `Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다. 인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다. 다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다. 그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다. 예:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다. 예:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number를 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException">Number가 숫자 형식이 아닙니다.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">수학 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">수학 함수(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. <see langword="Integer" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</param>
        <summary>숫자의 정수 부분을 반환합니다.</summary>
        <returns>숫자의 정수 부분입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.  
  
 차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다. 예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.  
  
 `Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다. 인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다. 다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다. 그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다. 예:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다. 예:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number를 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException">Number가 숫자 형식이 아닙니다.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">수학 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">수학 함수(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. <see langword="Long" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</param>
        <summary>숫자의 정수 부분을 반환합니다.</summary>
        <returns>숫자의 정수 부분입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.  
  
 차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다. 예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.  
  
 `Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다. 인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다. 다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다. 그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다. 예:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다. 예:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number를 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException">Number가 숫자 형식이 아닙니다.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">수학 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">수학 함수(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. <see langword="Object" /> 형식의 수이거나 임의의 유효한 숫자 식입니다. <paramref name="Number" />에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</param>
        <summary>숫자의 정수 부분을 반환합니다.</summary>
        <returns>숫자의 정수 부분입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.  
  
 차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다. 예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.  
  
 `Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`  

부터는 Visual Basic 15.8를 `Number` 인수는 런타임 형식이 개체 `Double` 또는 `Single`를 반환 하는 값을 전달 하는 경우 부동으로 소수점을 정수로 변환의 성능을 최적화는 `Fix` 메서드 중 하나를 [정수 계열 변환 함수](~/docs/visual-basic/language-reference/functions/conversion-functions.md), 아니면 반환한 값 `Fix` 정수 이며 자동으로 변환 되며 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) Off로 설정 합니다. 이 최적화에는 코드를를 더 빠르게-많은 수의 정수 형식 변환 수행 하는 코드에 대 한 빠른 배까지 실행할 수 있습니다. 예:

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다. 인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다. 다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다. 그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다. 예:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다. 예:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number를 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException">Number가 숫자 형식이 아닙니다.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">수학 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">수학 함수(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. <see langword="Single" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</param>
        <summary>숫자의 정수 부분을 반환합니다.</summary>
        <returns>숫자의 정수 부분입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.  
  
 차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다. 예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.  
  
 `Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`  
  
성능, Visual Basic 15.8부터 `Single`-에-정수로 변환 하 여 반환 되는 값을 전달 하는 경우 최적화 된를 `Fix` 메서드 중 하나를 [정수 계열 변환 함수](~/docs/visual-basic/language-reference/functions/conversion-functions.md), 또는 경우에는 `Single`에서 반환 된 값 `Fix` 정수를 사용 하 여 자동으로 변환 되며 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) Off로 설정 합니다. 이 최적화에는 코드를를 더 빠르게-많은 수의 정수 형식 변환 수행 하는 코드에 대 한 빠른 배까지 실행할 수 있습니다. 다음 예제에서는 이러한 최적화 된 변환을 보여 줍니다.
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다. 인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다. 다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다. 그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다. 예:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다. 예:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number를 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException">Number가 숫자 형식이 아닙니다.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">수학 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">수학 함수(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>숫자의 16진수 값을 나타내는 문자열을 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 16진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 16진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|경우 `Number` 됩니다|16 진수를 반환합니다.|  
|-|-|  
|Empty|영 (0)|  
|모든 숫자 값|최대 16 개의 16 진수 문자|  
  
 16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다. 예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.  
  
   
  
## Examples  
 이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">방법: 16 진수 문자열을 숫자로 변환</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 16진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 16진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|경우 `Number` 됩니다|16 진수를 반환합니다.|  
|-|-|  
|Empty|영 (0)|  
|모든 숫자 값|최대 16 개의 16 진수 문자|  
  
 16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다. 예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.  
  
   
  
## Examples  
 이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">방법: 16 진수 문자열을 숫자로 변환</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 16진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 16진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|경우 `Number` 됩니다|16 진수를 반환합니다.|  
|-|-|  
|Empty|영 (0)|  
|모든 숫자 값|최대 16 개의 16 진수 문자|  
  
 16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다. 예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.  
  
   
  
## Examples  
 이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">방법: 16 진수 문자열을 숫자로 변환</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 16진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 16진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|경우 `Number` 됩니다|16 진수를 반환합니다.|  
|-|-|  
|Empty|영 (0)|  
|모든 숫자 값|최대 16 개의 16 진수 문자|  
  
 16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다. 예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.  
  
   
  
## Examples  
 이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">방법: 16 진수 문자열을 숫자로 변환</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 16진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 16진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|경우 `Number` 됩니다|16 진수를 반환합니다.|  
|-|-|  
|Empty|영 (0)|  
|모든 숫자 값|최대 16 개의 16 진수 문자|  
  
 16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다. 예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.  
  
   
  
## Examples  
 이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">방법: 16 진수 문자열을 숫자로 변환</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 16진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 16진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|경우 `Number` 됩니다|16 진수를 반환합니다.|  
|-|-|  
|Empty|영 (0)|  
|모든 숫자 값|최대 16 개의 16 진수 문자|  
  
 16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다. 예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.  
  
   
  
## Examples  
 이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">방법: 16 진수 문자열을 숫자로 변환</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 16진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 16진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|경우 `Number` 됩니다|16 진수를 반환합니다.|  
|-|-|  
|Empty|영 (0)|  
|모든 숫자 값|최대 16 개의 16 진수 문자|  
  
 16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다. 예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.  
  
   
  
## Examples  
 이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">방법: 16 진수 문자열을 숫자로 변환</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 16진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 16진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|경우 `Number` 됩니다|16 진수를 반환합니다.|  
|-|-|  
|Empty|영 (0)|  
|모든 숫자 값|최대 16 개의 16 진수 문자|  
  
 16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다. 예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.  
  
   
  
## Examples  
 이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">방법: 16 진수 문자열을 숫자로 변환</related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 16진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 16진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|경우 `Number` 됩니다|16 진수를 반환합니다.|  
|-|-|  
|Empty|영 (0)|  
|모든 숫자 값|최대 16 개의 16 진수 문자|  
  
 16 진수 숫자 앞에 사용 하 여 적절 한 범위에서 직접 나타낼 수 있습니다 `&H`합니다. 예를 들어 `&H10` 10 진수 16 진수 표기법으로 나타냅니다.  
  
   
  
## Examples  
 이 예제에서는 `Hex` 숫자의 16 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">방법: 16 진수 문자열을 숫자로 변환</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>숫자의 정수 부분을 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. <see langword="Decimal" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</param>
        <summary>숫자의 정수 부분을 반환합니다.</summary>
        <returns>숫자의 정수 부분입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.  
  
 차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다. 예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.  
  
 `Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`  
  
## Examples  
 이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다. 인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다. 다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다. 그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다. 예:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다. 예:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number를 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException">Number가 숫자 형식이 아닙니다.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">수학 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">수학 함수(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. <see langword="Double" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</param>
        <summary>숫자의 정수 부분을 반환합니다.</summary>
        <returns>숫자의 정수 부분입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.  
  
 차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다. 예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.  
  
 `Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`  
  
Visual Basic 15.8부터 Double을 정수로 변환의 성능을 최적화 된 반환 값을 전달 하는 경우는 `Int` 메서드 중 하나를 합니다 [정수 계열 변환 함수](~/docs/visual-basic/language-reference/functions/conversion-functions.md), 이거나 Double 값 반환한 `Int` 자동으로 포함 된 정수 변환할 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) Off로 설정 합니다. 이 최적화에는 코드를를 더 빠르게-많은 수의 정수 형식 변환 수행 하는 코드에 대 한 빠른 배까지 실행할 수 있습니다. 다음 예제에서는 이러한 최적화 된 변환을 보여 줍니다.

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다. 인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다. 다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다. 그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다. 예:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다. 예:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number를 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException">Number가 숫자 형식이 아닙니다.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">수학 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">수학 함수(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. <see langword="Short" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</param>
        <summary>숫자의 정수 부분을 반환합니다.</summary>
        <returns>숫자의 정수 부분입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.  
  
 차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다. 예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.  
  
 `Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다. 인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다. 다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다. 그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다. 예:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다. 예:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number를 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException">Number가 숫자 형식이 아닙니다.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">수학 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">수학 함수(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. <see langword="Integer" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</param>
        <summary>숫자의 정수 부분을 반환합니다.</summary>
        <returns>숫자의 정수 부분입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.  
  
 차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다. 예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.  
  
 `Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다. 인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다. 다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다. 그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다. 예:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다. 예:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number를 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException">Number가 숫자 형식이 아닙니다.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">수학 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">수학 함수(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. <see langword="Long" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</param>
        <summary>숫자의 정수 부분을 반환합니다.</summary>
        <returns>숫자의 정수 부분입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.  
  
 차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다. 예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.  
  
 `Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`  
  
   
  
## Examples  
 이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다. 인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다. 다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다. 그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다. 예:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다. 예:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number를 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException">Number가 숫자 형식이 아닙니다.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">수학 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">수학 함수(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. <see langword="Object" /> 형식의 수이거나 임의의 유효한 숫자 식입니다. <paramref name="Number" />에 <see langword="Nothing" />이 포함되어 있으면 <see langword="Nothing" />이 반환됩니다.</param>
        <summary>숫자의 정수 부분을 반환합니다.</summary>
        <returns>숫자의 정수 부분입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.  
  
 차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다. 예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.  
  
 `Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`  
  
부터는 Visual Basic 15.8를 `Number` 인수는 런타임 형식이 개체 `Double` 또는 `Single`를 반환 하는 값을 전달 하는 경우 부동으로 소수점을 정수로 변환의 성능을 최적화는 `Int` 메서드 중 하나를 [정수 계열 변환 함수](~/docs/visual-basic/language-reference/functions/conversion-functions.md), 아니면 반환한 값 `Int` 정수 이며 자동으로 변환 되며 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) Off로 설정 합니다. 이 최적화에는 코드를를 더 빠르게-많은 수의 정수 형식 변환 수행 하는 코드에 대 한 빠른 배까지 실행할 수 있습니다. 예:

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다. 인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다. 다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다. 그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다. 예:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다. 예:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number를 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException">Number가 숫자 형식이 아닙니다.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">수학 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">수학 함수(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. <see langword="Single" /> 형식의 수이거나 임의의 유효한 숫자 식입니다.</param>
        <summary>숫자의 정수 부분을 반환합니다.</summary>
        <returns>숫자의 정수 부분입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 `Int` 하 고 `Fix` 의 소수 부분을 제거 하는 함수 `Number` 결과 정수 값을 반환 합니다.  
  
 차이점 `Int` 및 `Fix` 함수는 경우 `Number` 음수 이면 `Int` 보다 작거나 같음 첫 번째 음의 정수를 반환 `Number`반면 `Fix` 첫 번째 음의 정수를 반환 합니다. 보다 크거나 같은 `Number`합니다. 예를 들어 `Int` -8.4-9, 변환 및 `Fix` -8.4-8로 변환 합니다.  
  
 `Fix(number)` 해당 하는 `Sign(number) * Int(Abs(number)).`  
  
성능, Visual Basic 15.8부터 `Single`-에-정수로 변환 하 여 반환 되는 값을 전달 하는 경우 최적화 된를 `Int` 메서드 중 하나를 [정수 계열 변환 함수](~/docs/visual-basic/language-reference/functions/conversion-functions.md), 또는 경우에는 `Single`에서 반환 된 값 `Int` 정수를 사용 하 여 자동으로 변환 되며 [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) Off로 설정 합니다. 이 최적화에는 코드를를 더 빠르게-많은 수의 정수 형식 변환 수행 하는 코드에 대 한 빠른 배까지 실행할 수 있습니다. 다음 예제에서는 이러한 최적화 된 변환을 보여 줍니다.

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 이 예제는 방법을 `Int` 및 `Fix` 함수는 숫자의 정수 부분을 반환 합니다. 인수가 음수인 경우는 `Int` 함수는 첫 번째 음의 정수를 반환 수; 보다 작거나는 `Fix` 수 보다 크거나 같은 경우 함수는 첫 번째 음의 정수를 반환 합니다. 다음 예제에서는 지정 해야 `Option Strict Off` 형식에서 암시적 변환을 `Double` 입력할 `Integer` 허용 되지 않습니다 `Option Strict On`:  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 사용할 수는 `CInt` 함수를 명시적으로 다른 데이터 형식을 형식으로 변환 `Integer` 사용 하 여 `Option Strict Off`입니다. 그러나 `CInt` 숫자의 소수 부분을 잘라내는 하는 대신 가장 가까운 정수로 반올림 합니다. 예:  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 사용할 수는 `CInt` 함수에 대 한 호출의 결과에 `Fix` 또는 `Int` 반올림 하지 않고 정수로 변환 하는 명시적 변환을 수행 합니다. 예:  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 에 대 한 자세한 `CInt`를 참조 하세요 [형식 변환 함수](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Number를 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException">Number가 숫자 형식이 아닙니다.</exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">수학 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">수학 함수(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>숫자의 8진수 값을 나타내는 문자열을 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 8진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 8진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|Number가|10 월 반환|  
|-|-|  
|Empty|영 (0)|  
|다른 모든 숫자|22 최대 8 진수 문자|  
  
 숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다. 예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.  
  
   
  
## Examples  
 이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 8진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 8진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|Number가|10 월 반환|  
|-|-|  
|Empty|영 (0)|  
|다른 모든 숫자|22 최대 8 진수 문자|  
  
 숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다. 예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.  
  
   
  
## Examples  
 이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 8진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 8진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|Number가|10 월 반환|  
|-|-|  
|Empty|영 (0)|  
|다른 모든 숫자|22 최대 8 진수 문자|  
  
 숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다. 예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.  
  
   
  
## Examples  
 이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 8진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 8진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|Number가|10 월 반환|  
|-|-|  
|Empty|영 (0)|  
|다른 모든 숫자|22 최대 8 진수 문자|  
  
 숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다. 예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.  
  
   
  
## Examples  
 이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 8진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 8진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|Number가|10 월 반환|  
|-|-|  
|Empty|영 (0)|  
|다른 모든 숫자|22 최대 8 진수 문자|  
  
 숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다. 예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.  
  
   
  
## Examples  
 이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 8진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 8진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|Number가|10 월 반환|  
|-|-|  
|Empty|영 (0)|  
|다른 모든 숫자|22 최대 8 진수 문자|  
  
 숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다. 예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.  
  
   
  
## Examples  
 이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 8진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 8진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|Number가|10 월 반환|  
|-|-|  
|Empty|영 (0)|  
|다른 모든 숫자|22 최대 8 진수 문자|  
  
 숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다. 예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.  
  
   
  
## Examples  
 이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 8진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 8진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|Number가|10 월 반환|  
|-|-|  
|Empty|영 (0)|  
|다른 모든 숫자|22 최대 8 진수 문자|  
  
 숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다. 예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.  
  
   
  
## Examples  
 이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식 또는 <see langword="String" /> 식입니다.</param>
        <summary>숫자의 8진수 값을 나타내는 문자열을 반환합니다.</summary>
        <returns>숫자의 8진수 값을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `Number` 하지 않은 정수 계산 되기 전에 가장 가까운 정수로 반올림 됩니다.  
  
|Number가|10 월 반환|  
|-|-|  
|Empty|영 (0)|  
|다른 모든 숫자|22 최대 8 진수 문자|  
  
 숫자 앞에 사용 하 여 적절 한 범위에서 직접 8 진수 숫자를 나타낼 수 있습니다 `&O`합니다. 예를 들어 `&O10` 는 10 진수 8에 대 한 8 진수 표기법입니다.  
  
   
  
## Examples  
 이 예제에서는 `Oct` 숫자의 8 진수 값을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">필수 요소. 임의의 유효한 숫자 식을 포함하는 <see langword="Object" />입니다.</param>
        <summary>숫자를 나타내는 <see langword="String" />을 반환합니다.</summary>
        <returns>숫자의 <see langword="String" /> 표현입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 부호에 대 한 숫자를 문자열로 변환 되 면 선행 공백이 항상 예약 됩니다 `Number`합니다. 경우 `Number` 이 양수인 경우 반환 되는 문자열 앞에 공백이 있고 더하기 인 것으로 간주 합니다. 음수는 빼기 기호 (-) 및 선행 공백 없이 포함 됩니다.  
  
 사용 된 `Format` 숫자 값을 형식이 지정 된 날짜, 시간 또는 통화 또는 다른 사용자 정의 형식으로 변환 하는 함수입니다. 와 달리 합니다 `Str` 함수는 `Format` 함수의 부호에 대 한 선행 공백을 포함 하지 않습니다 `Number`합니다.  
  
> [!NOTE]
>  합니다 `Str` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다. 다른 소수 구분 기호 (예를 들어 국가별 애플리케이션)에서 사용 하는 경우 사용 합니다 `CStr` 또는 `Format` 숫자를 문자열로 변환 하는 함수입니다. 숫자의 문자열 표현을 특정 문화권에서을 사용 수의 `ToString(IFormatProvider)` 메서드. 사용 예를 들어 <xref:System.Double.ToString%2A> 형식의 값을 변환할 때는 `Double` 문자열로 합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 `Str` 함수를 반환 하는 `String` 숫자로 표현 합니다. 양수 값을 문자열로 변환할 때, 해당 로그인에 대 한 선행 공백이 항상 예약 됩니다.  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Number" />을(를) 지정하지 않았습니다.</exception>
        <exception cref="T:System.InvalidCastException"><paramref name="Number" />가 숫자 형식이 아닙니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">변환 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">필수 요소. 모든 유효한 <see langword="String" /> 식, <see langword="Object" /> 변수 또는 <see langword="Char" /> 값입니다. <paramref name="Expression" />이 <see langword="Object" /> 형식인 경우 해당 값을 <see langword="String" />으로 변환할 수 있어야 합니다. 그렇지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</param>
        <summary>문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</summary>
        <returns>문자열에 포함된 숫자는 적절한 형식의 숫자 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val` 함수는 숫자의 일부분으로 인식할 수 없는 첫 문자에서 문자열 읽기를 중지 합니다. 주로 달러 기호 및 쉼표와 같은 숫자 값의 일부로 간주 되는 기호 및 문자 인식 되지 않습니다. 그러나 함수 인식 기 접두사 `&O` (에 대 한 8 진수) 및 `&H` (16 진수)에 대 한 합니다. 공백, 탭 및 줄 바꿈 문자 인수에서 제거 됩니다.  
  
 다음 호출에서는 값 1615198이 반환합니다.  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
다음 호출 10 진수 값-1을 반환 합니다.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  합니다 `Val` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다. 10 진수 구분 하는 경우 사용 하 여 `CDbl` 또는 `CInt` 대신 문자열을 숫자로 변환 하 합니다. 사용할 숫자 형식의 숫자 값을 특정 문화권의 숫자의 문자열 표현으로 변환 하려면 `Parse(String, IFormatProvider)` 메서드. 사용 예를 들어 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 문자열을 변환 하는 경우는 `Double`합니다.  
  
<xref:System.InvalidCastException> 일반적이 지 않은 특정 숫자 형식에 대 한 응답에서 예외를 throw 될 수 있습니다. 예를 들어, 다음 코드는이 예외가 발생합니다.  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

사이 충돌이 형식으로 지정는 `Double` 하며 `Integer` 및 `Long` 형식 문자는 문자열에 포함 되지 않은 경우 컴파일러에서 포착 됩니다.  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 다음 예제에서는 `Val` 각 문자열에 포함 된 숫자를 반환 하는 함수입니다. `Val` 숫자, 숫자 한정자, 숫자 문장 부호, 공백 또는 해석 될 수 없는 첫 번째 문자에서 변환 중지 합니다.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" />이 너무 큰 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" />은 <see langword="String" />으로 변환할 수 없는 <see langword="Object" /> 형식의 식인 경우</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">필수 요소. 모든 유효한 <see langword="String" /> 식, <see langword="Object" /> 변수 또는 <see langword="Char" /> 값입니다. <paramref name="Expression" />이 <see langword="Object" /> 형식인 경우 해당 값을 <see langword="String" />으로 변환할 수 있어야 합니다. 그렇지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</param>
        <summary>문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</summary>
        <returns>문자열에 포함된 숫자는 적절한 형식의 숫자 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val` 함수는 숫자의 일부분으로 인식할 수 없는 첫 문자에서 문자열 읽기를 중지 합니다. 주로 달러 기호 및 쉼표와 같은 숫자 값의 일부로 간주 되는 기호 및 문자 인식 되지 않습니다. 그러나 함수 인식 기 접두사 `&O` (에 대 한 8 진수) 및 `&H` (16 진수)에 대 한 합니다. 공백, 탭 및 줄 바꿈 문자 인수에서 제거 됩니다.  
  
 다음 호출 1234123 값을 반환 합니다.  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
다음 호출 10 진수 값-1을 반환 합니다.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  합니다 `Val` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다. 국가별 애플리케이션, 다른 소수 구분 기호를 사용 하는 경우 사용할 `CDbl` 또는 `CInt` 대신 문자열을 숫자로 변환 하 합니다. 사용할 숫자 형식의 숫자 값을 특정 문화권의 숫자의 문자열 표현으로 변환 하려면 `Parse(String, IFormatProvider)` 메서드. 사용 예를 들어 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 문자열을 변환 하는 경우는 `Double`합니다.  
  
> [!NOTE]
>  <xref:System.InvalidCastException> 일반적이 지 않은 특정 숫자 형식에 대 한 응답에서 예외를 throw 될 수 있습니다. 예를 들어, 다음 코드는이 예외가 발생합니다.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  사이 충돌이 형식으로 지정 된 `Double` 및 `Integer` 및 `Long` 충돌 문자열에 포함 되지 않은 경우 컴파일러에서 형식 문자를 포착 됩니다.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 다음 예제에서는 `Val` 각 문자열에 포함 된 숫자를 반환 하는 함수입니다. `Val` 숫자, 숫자 한정자, 숫자 문장 부호, 공백 또는 해석 될 수 없는 첫 번째 문자에서 변환 중지 합니다.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" />이 너무 큰 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" />은 <see langword="String" />으로 변환할 수 없는 <see langword="Object" /> 형식의 식인 경우</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">필수 요소. 모든 유효한 <see langword="String" /> 식, <see langword="Object" /> 변수 또는 <see langword="Char" /> 값입니다. <paramref name="Expression" />이 <see langword="Object" /> 형식인 경우 해당 값을 <see langword="String" />으로 변환할 수 있어야 합니다. 그렇지 않으면 <see cref="T:System.ArgumentException" /> 오류가 발생합니다.</param>
        <summary>문자열에 포함된 숫자를 적절한 형식의 숫자 값으로 반환합니다.</summary>
        <returns>문자열에 포함된 숫자는 적절한 형식의 숫자 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Val` 함수는 숫자의 일부분으로 인식할 수 없는 첫 문자에서 문자열 읽기를 중지 합니다. 주로 달러 기호 및 쉼표와 같은 숫자 값의 일부로 간주 되는 기호 및 문자 인식 되지 않습니다. 그러나 함수 인식 기 접두사 `&O` (에 대 한 8 진수) 및 `&H` (16 진수)에 대 한 합니다. 공백, 탭 및 줄 바꿈 문자 인수에서 제거 됩니다.  
  
 다음 호출 1234123 값을 반환 합니다.  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
다음 호출 10 진수 값-1을 반환 합니다.  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  합니다 `Val` 기간만 인식 합니다 (`.`) 유효한 소수 구분 기호로 합니다. 국가별 애플리케이션, 다른 소수 구분 기호를 사용 하는 경우 사용할 `CDbl` 또는 `CInt` 대신 문자열을 숫자로 변환 하 합니다. 사용할 숫자 형식의 숫자 값을 특정 문화권의 숫자의 문자열 표현으로 변환 하려면 `Parse(String, IFormatProvider)` 메서드. 사용 예를 들어 <xref:System.Double.Parse%2A?displayProperty=nameWithType> 문자열을 변환 하는 경우는 `Double`합니다.  
  
> [!NOTE]
>  <xref:System.InvalidCastException> 일반적이 지 않은 특정 숫자 형식에 대 한 응답에서 예외가 발생할 수 있습니다. 예를 들어, 다음 코드는이 예외가 발생합니다.  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  사이 충돌이 형식으로 지정 된 `Double` 및 `Integer` 및 `Long` 충돌 문자열에 포함 되지 않은 경우 컴파일러에서 형식 문자를 포착 됩니다.  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 다음 예제에서는 `Val` 각 문자열에 포함 된 숫자를 반환 하는 함수입니다. `Val` 숫자, 숫자 한정자, 숫자 문장 부호, 공백 또는 해석 될 수 없는 첫 번째 문자에서 변환 중지 합니다.  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><paramref name="InputStr" />이 너무 큰 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Expression" />은 <see langword="String" />으로 변환할 수 없는 <see langword="Object" /> 형식의 식인 경우</exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">형식 변환 함수</related>
      </Docs>
    </Member>
  </Members>
</Type>