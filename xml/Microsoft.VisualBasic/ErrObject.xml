<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b5a525046ea00f94cc4f8cdb6d8426f085173ad6" /><Meta Name="ms.sourcegitcommit" Value="9802d4c6745a8ae514b26f144fb3969265b224ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="12/22/2018" /><Meta Name="ms.locfileid" Value="53750220" /></Metadata><TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ErrObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ErrObject sealed" />
  <TypeSignature Language="F#" Value="type ErrObject = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see langword="ErrObject" /> 모듈에는 <see langword="Err" /> 개체를 사용하여 런타임 오류를 식별하고 처리하는 속성과 프로시저가 포함되어 있습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `ErrObject` 모듈을 지원 합니다 `Err` 개체입니다. 자세한 내용은 <xref:Microsoft.VisualBasic.Information.Err%2A>을 참조하세요.  
  
   
  
## Examples  
 속성을 사용 하 여이 예제는 `Err` 개체 오류 메시지 대화 상자를 생성 합니다. 사용 하는 경우 어떻게 되는지 살펴보십시오를 `Clear` 메서드 첫 번째: 다음 사용 하 여 Visual Basic 오류를 생성할 때를 `Raise` 메서드를 Visual Basic의 기본 값의 속성 수는 `Err` 개체입니다.  
  
```vb  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error 문(Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Try...Catch...Finally 문(Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">키워드(Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic 런타임 라이브러리 멤버</related>
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="errObject.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see langword="Err" /> 개체의 모든 속성 설정을 지웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 `Clear` 명시적으로 선택 취소 합니다 `Err` 오류가 처리 된 후에 지연 된 오류 처리를 사용 하는 경우와 같이 개체 `On Error Resume Next`합니다. `Clear` 메서드는 다음 문을 실행할 때마다:  
  
-   모든 유형의 `Resume` 문  
  
-   `Exit Sub`, `Exit Function`또는 `Exit Property`  
  
-   모든 `On Error` 문  
  
-   모든 `Try...Catch...Finally` 문  
  
    > [!NOTE]
    >  합니다 `On Error Resume Next` 구문에 더 적합할 수 있습니다 `On Error GoTo` 다른 개체에 액세스 하는 동안 발생 한 오류를 처리 하는 경우. 검사 `Err` 각 상호 작용 후 개체를 사용 하 여 코드에서 액세스 하는 개체를: 확인할 수 있는 개체의 오류 코드에 배치 `Err.Number`, 개체가 원래 오류 (개체를 생성 하는 데 뿐만 아니라 에 지정 된 `Err.Source`).  
  
   
  
## Examples  
 이 예에서는 `Err` 개체의 `Clear` 의 숫자 속성을 다시 설정 하는 방법은 `Err` 개체 0, 길이가 0 인 문자열에 문자열 속성입니다. 호출 하지 않고 `Clear`, 두 번째 호출은 `MsgBox` 동일한 오류 메시지가 표시 됩니다.  
  
 [!code-vb[VbVbalrErrorHandling#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error 문(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>오류와 연결된 설명 문자열을 포함하는 <see langword="String" /> 식을 반환하거나 설정합니다. 읽기/쓰기입니다.</summary>
        <value>오류와 연결된 설명 문자열을 포함하는 <see langword="String" /> 식을 반환하거나 설정합니다. 읽기/쓰기입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Description` 오류에 대 한 간단한 설명을 속성 설정을 구성 합니다. 이 속성을 사용 하 여 오류를 처리할 수 없거나 처리 하지 않으려는 사용자 경고를 발생 합니다. 사용자 정의 오류를 생성 하는 경우 해당 오류에 대 한 간단한 설명을 할당 된 `Description` 속성입니다. 경우는 `Description` 속성에서는 채워지지 않습니다 값과는 <xref:Microsoft.VisualBasic.ErrObject.Number%2A> Visual Basic 런타임 오류에 해당 하는 속성을 반환 하는 문자열이 <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> 함수에 설정 된는 `Description` 오류가 생성 될 때 속성.  
  
   
  
## Examples  
 사용자 정의 메시지를 지정 하는이 예제는 `Description` 의 속성을 `Err` 개체입니다.  
  
 [!code-vb[VbVbalrErrorHandling#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Erl As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Erl { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Erl : int" Usage="Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마지막으로 실행된 문의 줄 번호를 나타내는 정수를 가져옵니다.</summary>
        <value>마지막 실행 된 문의 줄 번호입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic에서 줄 번호 없음를 발견 하는 경우 0을 반환 합니다.  
  
   
  
## Examples  
 이 예제에서는 `Erl` 줄 번호를 표시 하는 속성입니다.  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberSignature Language="VB.NET" Value="Public Function GetException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetException();" />
      <MemberSignature Language="F#" Value="member this.GetException : unit -&gt; Exception" Usage="errObject.GetException " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>발생한 오류를 나타내는 예외를 반환합니다.</summary>
        <returns>발생한 오류를 나타내는 예외입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetException` 함수를 에서만 사용할 수는 `Err` 개체 클래스입니다. 와 함께 작동 합니다 `Exception` 의 속성은 `Err` 발생 한 오류를 표시 하도록 개체입니다.  
  
   
  
## Examples  
 다음 코드는 예외에 할당 된 메시지를 표시 합니다 `Err` 개체:  
  
 [!code-vb[VbVbalrCatRef#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpContext As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HelpContext { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HelpContext : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>도움말 파일 항목의 컨텍스트 ID를 포함하는 <see langword="Integer" />를 반환하거나 설정합니다. 읽기/쓰기입니다.</summary>
        <value>도움말 파일 항목의 컨텍스트 ID를 포함하는 <see langword="Integer" />를 반환하거나 설정합니다. 읽기/쓰기입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `HelpContext` 속성 애플리케이션에 대 한 상황에 맞는 도움말을 표시 하는 데 사용 됩니다. 도움말 파일에 지정 된 경우 `HelpFile`, `HelpContext` 속성 자동으로 식별 된 도움말 파일을 표시 하는 데 사용 됩니다. 모두를 `HelpFile` 및 `HelpContext` 속성은 비어 있는 경우 값은 <xref:Microsoft.VisualBasic.ErrObject.Number%2A> 속성을 검사 합니다. 경우 값은 `Number` 속성 값에 해당 하는 Visual Basic 런타임 오류를 오류에 대 한 Visual Basic 도움말 컨텍스트 ID가 사용 됩니다. 경우 값은 `Number` 속성 Visual Basic 오류에 해당 하지 않는, Visual Basic 도움말 파일에 대 한 내용을 화면이 표시 됩니다.  
  
> [!NOTE]
>  일반적인 오류 처리 애플리케이션에서 루틴을 작성 해야 합니다. 개체를 사용 하 여 프로그래밍 하는 경우에 오류 처리의 품질을 개선 하거나 오류를 복구할 수 없는 경우 사용자에 게 의미 있는 메시지를 표시 하려면 개체의 도움말 파일을 사용할 수 있습니다.  
  
   
  
## Examples  
 이 예제에서는 `HelpContext` 의 속성을 `Err` 개체에 대 한 Visual Basic 도움말 항목을 표시할는 `Overflow` 오류.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberSignature Language="VB.NET" Value="Public Property HelpFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HelpFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpFile : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>도움말 파일의 정규화된 경로를 포함하는 <see langword="String" /> 식을 반환하거나 설정합니다. 읽기/쓰기입니다.</summary>
        <value>도움말 파일의 정규화된 경로를 포함하는 <see langword="String" /> 식을 반환하거나 설정합니다. 읽기/쓰기입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 도움말 파일을 통해 지정 된 경우는 `HelpFile` 속성을 자동으로 호출 하는 사용자가 도움말 키 (또는 F1 키)를 누를 때 오류 메시지 대화 상자. 경우는 `HelpContext` 속성 지정된 된 파일을 해당 항목에 대 한 ID가 자동으로 표시 하는 올바른 컨텍스트를 포함 합니다. 없으면 `HelpFile` 지정, Visual Basic 도움말 파일을 표시 됩니다.  
  
> [!NOTE]
>  일반적인 오류 처리 애플리케이션에서 루틴을 작성 해야 합니다. 개체를 사용 하 여 프로그래밍 하는 경우에 오류 처리의 품질을 개선 하거나 오류를 복구할 수 없는 경우 사용자에 게 의미 있는 메시지를 표시 하려면 개체의 도움말 파일을 사용할 수 있습니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 `HelpFile` 의 속성을 `Err` 도움말 시스템을 시작 하는 개체. 기본적으로 `HelpFile` 속성 Visual Basic 도움말 파일의 이름을 포함 합니다.  
  
 [!code-vb[VbVbalrErrorHandling#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastDllError As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LastDllError { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LastDllError : int" Usage="Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>DLL(동적 연결 라이브러리)을 호출하는 경우 생성되는 시스템 오류 코드를 가져옵니다.</summary>
        <value>동적 연결 라이브러리 (DLL)를 호출 하 여 생성 된 시스템 오류 코드입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> Visual Basic 코드에서 DLL 호출에만 속성이 적용 됩니다. 호출된 된 함수에서 일반적으로 성공 또는 실패를 나타내는 코드를 반환 해당 호출이 이루어지면 및 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 속성이 채워집니다. 성공 또는 실패를 나타내는 반환 값을 확인 하려면 DLL의 함수에 대 한 설명서를 확인 합니다. Visual Basic 애플리케이션 즉시 확인 해야 때마다 오류 코드가 반환 되는 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 속성입니다. 예외가 발생 하지 않습니다 경우는 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 속성을 설정 합니다.  
  
> [!NOTE]
>  합니다 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 속성을 보호 <xref:System.Security.Permissions.SecurityAction.LinkDemand>를 통해 신뢰할 수 없는 코드에서 액세스 하지 못하게 방지 합니다. 그러나 <xref:System.Security.Permissions.SecurityAction.LinkDemand> 있어야 직접 실행 호출자만 <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> 권한. 코드는 부분적으로 신뢰할 수 있는 코드에서 호출할 수 있는, 경우 노출 값 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> 유효성 검사는 보안 위험 없이 합니다.  
>   
>  사용 하는 방법에 대 한 중요 한 제한 사항에 대해서는 <xref:System.Security.Permissions.SecurityAction.LinkDemand> 멤버 참조 [Demand 합니다. LinkDemand](https://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5)합니다. 사용 권한에 대 한 자세한 내용은 참조 하세요. <xref:System.Security.Permissions.SecurityPermission> 하 고 [코드 액세스 권한](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)합니다.  
  
 Note 스마트 디바이스에 대 한이 속성은 항상 0을 반환 합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다는 `LastDllError` Windows api에서 함수를 호출한 후 속성입니다. `PrintWindowCoordinates` 프로시저는 창을 호출 하는 핸들을 가져오고는 `GetWindowRect` 함수입니다. `GetWindowRect` 창 구성 하는 사각형의 면의 길이 사용 하 여 영역 데이터 구조를 채웁니다. 잘못 된 핸들을 전달 하면 오류가 발생 하 고 오류 번호를 통해 사용할 수는 `LastDllError` 속성입니다.  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberSignature Language="VB.NET" Value="Public Property Number As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Number { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Number : int with get, set" Usage="Microsoft.VisualBasic.ErrObject.Number" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>오류를 지정하는 숫자 값을 반환하거나 설정합니다. 읽기/쓰기입니다.</summary>
        <value>오류를 지정하는 숫자 값을 반환하거나 설정합니다. 읽기/쓰기입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 합니다 `Raise` 제외한 인수 `Number` 는 선택 사항입니다. 속성 설정 및 선택적 인수를 생략 하면는 `Err` 지워지지 않은 값을 포함 하는 개체, 해당 값이 오류에 대 한 값으로 사용 합니다.  
  
 때문에 `Err` 개체는 사용 하 여 오류를 생성 하는 경우 보다 더 많은 정보를 제공 합니다 `Error` 문을 `Raise` 클래스 모듈을 작성 하는 경우 오류를 생성 하는 데 유용 합니다. 예를 들어 합니다 `Raise` 메서드를 오류를 발생 시킨 소스에서 지정할 수 있습니다는 `Source` 속성을 오류에 대 한 온라인 도움말을 참조할 수 있습니다 및 등입니다.  
  
 개체에서 사용자 정의 오류를 반환 하는 경우 설정 `Err.Number` 을 오류 코드와 선택한 수를 추가 하 여를 `VbObjectError` 상수입니다. 예를 들어 오류 코드로 1051 개수를 반환 하려면 다음 코드를 사용 합니다.  
  
 [!code-vb[VbVbalrErrorHandling#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## Examples  
 이 예제에는 일반적인 사용 방법을 보여 줍니다.는 `Number` 오류 처리 루틴에서 속성입니다.  
  
 [!code-vb[VbVbalrErrorHandling#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 이 예제에서는 합니다 `Err` 개체의 `Raise` Visual Basic로 작성 된 함수에 원래 오류를 생성 하는 방법입니다. 호출 하는 함수는 오류를 catch 하 고 사용자에 게 보고할 수 있습니다. 프로시저 `CallingProcedure` 에서 파생 시킬 수 있는 정보를 대조를 `Err` 에서 파생 시킬 수 있는 정보를 사용 하 여 개체를 `Exception` 개체입니다.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" />가 65535보다 큽니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Raise (Number As Integer, Optional Source As Object = null, Optional Description As Object = null, Optional HelpFile As Object = null, Optional HelpContext As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Raise : int * obj * obj * obj * obj -&gt; unit" Usage="errObject.Raise (Number, Source, Description, HelpFile, HelpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">필수. 오류의 속성을 식별하는 <see langword="Long" /> 형식의 정수입니다. Visual Basic 오류의 범위는 0~65535 사이이며, 0~512 사이의 범위는 시스템 오류로 예약되어 있고, 513~65535 사이의 범위는 사용자 정의 오류로 사용할 수 있습니다. <see langword="Number" /> 속성을 클래스 모듈의 사용자 고유 오류 코드로 설정하는 경우 <see langword="vbObjectError" /> 상수에 사용자의 오류 코드 번호를 추가합니다. 예를 들어, 513 오류 번호를 생성하려면 <c>vbObjectError + 513</c>을 <see langword="Number" /> 속성에 할당합니다.</param>
        <param name="Source">선택 사항입니다. 오류를 생성한 개체 또는 애플리케이션의 이름을 지정하는 <see langword="String" /> 식입니다. 개체에 대해 이 속성을 설정할 때는 <c>project</c>.<c>class</c> 형식을 사용합니다. <paramref name="Source" />가 지정되어 있지 않으면 현재 Visual Basic 프로젝트의 프로세스 ID가 사용됩니다.</param>
        <param name="Description">선택 사항입니다. 오류를 설명하는 <see langword="String" /> 식입니다. 이 인수가 지정되지 않으면 <see langword="Number" /> 속성의 값이 검사됩니다. Visual Basic 런타임 오류 코드에 매핑될 수 있는 경우 <see langword="Error" /> 함수로 반환되는 문자열이 <see langword="Description" /> 속성으로 사용됩니다. <see langword="Number" /> 속성과 일치하는 Visual Basic 오류가 없으면 "애플리케이션 정의 또는 개체 정의 오류입니다."라는 메시지가 사용됩니다.</param>
        <param name="HelpFile">선택 사항입니다. 이 오류에 대한 도움말을 찾을 수 있는 도움말 파일의 정규화된 경로입니다. 이 인수가 지정되지 않으면 Visual Basic은 Visual Basic 도움말 파일의 정규화된 드라이브, 경로 및 파일 이름을 사용합니다.</param>
        <param name="HelpContext">선택 사항입니다. 오류에 대한 도움말이 제공되는 <paramref name="HelpFile" /> 내의 항목을 식별하는 컨텍스트 ID입니다. 이 인수가 생략된 경우 <see langword="Number" /> 속성에 해당하는 오류의 Visual Basic 도움말 파일 컨텍스트 ID가 있으면 해당 ID가 사용됩니다.</param>
        <summary>런타임 오류를 생성하며 <see langword="Error" /> 문 대신 사용할 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 합니다 `Raise` 제외한 인수 `Number` 는 선택 사항입니다. 속성 설정 및 선택적 인수를 생략 하면는 `Err` 지워지지 않은 값을 포함 하는 개체, 해당 값이 오류에 대 한 값으로 사용 합니다.  
  
 때문에 `Err` 개체는 사용 하 여 오류를 생성 하는 경우 보다 더 많은 정보를 제공 합니다 `Error` 문을 `Raise` 클래스 모듈을 작성 하는 경우 오류를 생성 하는 데 유용 합니다. 예를 들어 합니다 `Raise` 메서드를 오류를 발생 시킨 소스에서 지정할 수 있습니다는 `Source` 속성을 오류에 대 한 온라인 도움말을 참조할 수 있습니다 및 등입니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 `Err` 개체의 `Raise` Visual Basic로 작성 된 함수 내에서 오류를 생성 하는 방법입니다. 호출 하는 함수는 오류를 catch 하 고 메시지 상자를 사용 하 여 사용자에 게 보고할 수 있습니다.  
  
 [!code-vb[VbVbalrErrorHandling#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Error 문</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error 문(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="Microsoft.VisualBasic.ErrObject.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>오류를 생성한 원래 개체 또는 애플리케이션의 이름을 지정하는 <see langword="String" /> 식을 반환하거나 설정합니다. 읽기/쓰기입니다.</summary>
        <value>오류를 생성한 원래 개체 또는 애플리케이션의 이름을 지정하는 <see langword="String" /> 식을 반환하거나 설정합니다. 읽기/쓰기입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Source` 속성을 지정 된 `String` 개체를 나타내는 식을 오류를 생성 하는, 식은 일반적으로 개체의 클래스 이름 또는 프로세스 id입니다. 사용 된 `Source` 코드 액세스 된 개체에서 생성 된 오류를 처리할 수 없을 때 정보를 제공 하는 속성입니다. 예를 들어, Microsoft Excel을 액세스 하 고 생성 하는 경우는 `Division by zero` 오류를 Microsoft Excel 설정 `Err.Number` 집합과 오류에 대 한 해당 오류 코드로 `Source` "Excel.Application"를 합니다.  
  
 애플리케이션 코드에서 오류가 생성 되 면 `Source` 애플리케이션의 프로그래밍 ID입니다. 클래스 내의 `Source` 형식 이름이 있어야 *프로젝트*. *클래스*합니다. 코드에서 예기치 않은 오류가 발생 하는 경우는 `Source` 속성이 자동으로 채워집니다. 모듈에서 오류에 대 한 `Source` 프로젝트 이름을 포함 합니다.  
  
   
  
## Examples  
 이 예제에서는 사용 된 `Source` 일반적인 오류 처리 루틴에서 속성. 오류가 발생 하면 `Class1`, 문자열 `"Class1"` 에 할당 되는 `Source` 의 속성을 `Err` 개체입니다. 이 문자열은 다음 원본 및 오류 수를 나타내는 정보 메시지에 표시 됩니다.  
  
 [!code-vb[VbVbalrErrorHandling#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error 문(Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>