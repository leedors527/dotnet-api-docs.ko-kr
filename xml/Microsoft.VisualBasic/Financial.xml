<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata><Meta Name="ms.openlocfilehash" Value="68cb7062c69fe85409574dd4a06d5869858b371b" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58548395" /></Metadata><TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <TypeSignature Language="F#" Value="type Financial = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Financial" /> 모듈에는 재무 관련 작업을 수행하는 데 사용되는 프로시저가 포함되어 있습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 모듈은 감가상각, 현재와 미래 값, 금리, 요금 및 지불 재무 계산을 수행 하는 Visual Basic 런타임 라이브러리 멤버를 지원 합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 `Rate` 함수가 계산을 대출 금리 지불의 총 수를 지정 된 (`TotPmts`), 대출 상환금 양을 (`Payment`), 현재 가치 또는 대출에 대 한 보안 주체 (`PVal`), 미래 대출 값 (`FVal`)를 시작 또는 끝 지불 기간 결제 기한이 여부를 나타내는 숫자입니다 (`PayType`), 및 예상된 이자율 근사값 (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">회계 요약</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">키워드(Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic 런타임 라이브러리 멤버</related>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberSignature Language="F#" Value="static member DDB : double * double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.DDB (Cost, Salvage, Life, Period, Factor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">필수 요소. 초기 자산 비용입니다.</param>
        <param name="Salvage">필수 요소. 내용 연수 종료 시점의 자산 값입니다.</param>
        <param name="Life">필수 요소. 자산의 내용 연수 길이입니다.</param>
        <param name="Period">필수 요소. 자산 감가상각이 계산되는 기간입니다.</param>
        <param name="Factor">선택 사항입니다. 잔액 감소 비율입니다. 생략하면 2(이중 체감 잔액법)로 간주됩니다.</param>
        <summary>이중 체감 잔액법 또는 다른 방법을 사용하여 특정 기간의 자산에 대한 감가상각을 지정하는 값을 반환합니다.</summary>
        <returns>이중 체감 잔액법 또는 다른 방법을 사용하여 특정 기간의 자산에 대한 감가상각입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이중 체감 잔액 법 빠른 속도로 감가상각을 계산합니다. 감가상각 첫 번째 기간에서 가장 높은 하 고 연속 기간에서 감소 합니다.  
  
 합니다 `Life` 고 `Period` 인수는 같은 단위로 표현 해야 합니다. 예를 들어 경우 `Life` 월에 `Period` 개월 내에도 지정 되어야 합니다. 모든 인수는 양수 여야 합니다.  
  
 `DDB` 함수 지정 된 기간에 대 한 감가상각을 계산 하는 다음 수식을 사용 합니다.  
  
 감가상각 / 기간 = ((Cost-Salvage) * 비율) / 수명  
  
   
  
## Examples  
 이 예제에서는 합니다 `DDB` 초기 비용을 지정 하는 지정 된 기간 동안 자산의 감가상각을 반환 하는 함수 (`InitCost`), 자산의 수명 끝에 회수 되는 값 (`SalvageVal`), 총 기간 연 단위 (`LifeTime`), 감가상각이 계산 되는 년 기간 (`Depr`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Factor" /> &lt;= 0, <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &lt;= 0 또는 <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">회계 요약</related>
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member FV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.FV (Rate, NPer, Pmt, PV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">필수 요소. 기간당 이자율입니다. 예를 들어, APR(연간 이자율) 10%로 자동차 대부를 받은 다음 매월 갚아 나가는 경우 월 이자율은 0.1/12, 즉 0.0083입니다.</param>
        <param name="NPer">필수 요소. 연금의 총 지불 기간 수입니다. 예를 들어, 자동차 대부를 받아 4년간 매월 갚아 나가는 경우 상환 기간은 총 4 x 12, 즉 48입니다.</param>
        <param name="Pmt">필수 요소. 기간당 지불액입니다. 지불액에는 일반적으로 연금을 받는 기간 동안 변경되지 않는 원금과 이자가 포함됩니다.</param>
        <param name="PV">선택 사항입니다. 일련의 미래 지불액에 대한 현재 값 또는 총액입니다. 예를 들어, 자동차를 사기 위해 돈을 빌릴 경우 총 차입 금액은 매월 자동차 대금을 지불할 사람에게 갚아야 할 현재의 금액입니다. 생략된 경우 0이라고 가정합니다.</param>
        <param name="Due">선택 사항입니다. <see cref="T:Microsoft.VisualBasic.DueDate" /> 형식의 개체는 지불 기한을 지정합니다. 이 인수는 납입 기한 말에 납입이 되어야 하면 <see langword="DueDate.EndOfPeriod" />이고, 납입 기한 초에 납입이 되어야 하면 <see langword="DueDate.BegOfPeriod" />입니다. 생략된 경우 <see langword="DueDate.EndOfPeriod" />를 가정합니다.</param>
        <summary>일정 기간의 고정 지불액과 고정 이자율을 기준으로 한 예상 연금액을 지정하는 값을 반환합니다.</summary>
        <returns>일정 기간의 고정 지불액과 고정 이자율을 기준으로 한 예상 연금액입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 연금은 일련의 시간이 지남에 따라 정기적으로 고정된 금액을 지불 합니다. 연금 (예: 홈 담보 대출) 대출 또는 투자 (예: 월간 절감 계획) 수 있습니다.  
  
 합니다 `Rate` 및 `NPer` 인수는 같은 단위로 지불 기간을 사용 하 여 계산 해야 합니다. 예를 들어 경우 `Rate` 월을 사용 하 여 계산 됩니다 `NPer` 개월을 사용 하 여 계산할 수도 있어야 합니다.  
  
 모든 인수에 대 한 현금 지급 (예: 절약 예치금)은 표현 음수; (예: 피제수 검사) 받은 양수도 표시 됩니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 `FV` 함수를 지정 하 여 투자의 미래 값을 반환 하는 속도 기간당 (`APR / 12`), 총 지불 (`TotPmts`), 결제 (`Payment`)의 현재 값을를 투자 (`PVal`), 및 결제 시작과 끝 지불 기간 중에 수행 되는지 여부를 나타내는 숫자 (`PayType`). 되므로 `Payment` 현금 지급을 나타내는 것이 음수입니다.  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">회계 요약</related>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member IPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.IPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">필수 요소. 기간당 이자율입니다. 예를 들어, APR(연간 이자율) 10%로 자동차 대부를 받은 다음 매월 갚아 나가는 경우 월 이자율은 0.1/12, 즉 0.0083입니다.</param>
        <param name="Per">필수 요소. 1에서 <paramref name="NPer" />에 이르는 지불 기간입니다.</param>
        <param name="NPer">필수 요소. 연금의 총 지불 기간 수입니다. 예를 들어, 자동차 대부를 받아 4년간 매월 갚아 나가는 경우 상환 기간은 총 4 x 12, 즉 48입니다.</param>
        <param name="PV">필수 요소. 현재 값, 금일 값, 일련의 미래 지불액 또는 수령액입니다. 예를 들어, 자동차를 사기 위해 돈을 빌릴 경우 총 차입 금액은 매월 자동차 대금을 지불할 사람에게 갚아야 할 현재의 금액입니다.</param>
        <param name="FV">선택 사항입니다. 최종 지불 후 앞으로 지불할 미래 값 또는 현금 잔액입니다. 예를 들어, 최종 지불 후의 대출 값은 $0이므로 대출의 미래 값은 $0입니다. 그러나 자녀의 교육을 위해 18년간 $50,000를 저축하려고 할 경우 $50,000가 미래 값이 됩니다. 생략된 경우 0이라고 가정합니다.</param>
        <param name="Due">선택 사항입니다. <see cref="T:Microsoft.VisualBasic.DueDate" /> 형식의 개체는 지불 기한을 지정합니다. 이 인수는 납입 기한 말에 납입이 되어야 하면 <c>DueDate.EndOfPeriod</c>이고, 납입 기한 초에 납입이 되어야 하면 <c>DueDate.BegOfPeriod</c>입니다. 생략하면 <c>DueDate.EndOfPeriod</c>인 것으로 간주됩니다.</param>
        <summary>일정 기간의 고정 지불액과 고정 이자율을 기준으로 일정 기간의 연금에 대한 이자 지불액을 지정하는 값을 반환합니다.</summary>
        <returns>일정 기간의 고정 지불액과 고정 이자율을 기준으로 일정 기간의 연금에 대한 이자 지불액입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 연금은 일련의 시간이 지남에 따라 정기적으로 고정된 금액을 지불 합니다. 연금 (예: 홈 담보 대출) 대출 또는 투자 (예: 월간 절감 계획) 수 있습니다.  
  
 합니다 `Rate` 및 `NPer` 인수는 같은 단위로 지불 기간을 사용 하 여 계산 해야 합니다. 예를 들어 경우 `Rate` 월을 사용 하 여 계산 됩니다 `NPer` 개월을 사용 하 여 계산할 수도 있어야 합니다.  
  
 모든 인수에 대 한 현금 지급 (예: 절약 예치금)은 표현 음수; (예: 피제수 검사) 받은 양수도 표시 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `IPmt` 지불의 모든 지불은 경우 이자를 계산 하는 함수입니다. 기간당 이자율은 (`APR / 12`), 관심 부분에 필요한는 지불 기간 (`Period`), 총 지불 (`TotPmts`), 현재 가치 또는 대출에 대 한 보안 주체 (`PVal`), 대출의 미래 값 (`FVal`), 및 결제 시작 또는 끝 지불 기간 때문 인지 여부를 나타내는 숫자 (`PayType`).  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;= 0 또는 <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">회계 요약</related>
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member IRR :  * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.IRR (ValueArray, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">필수 요소. 현금 흐름 값을 지정하는 <see langword="Double" /> 형식의 배열입니다. 배열에는 하나 이상의 음수 값(지불)과 하나 이상의 양수 값(확인)이 포함되어야 합니다.</param>
        <param name="Guess">선택 사항입니다. <see langword="IRR" />에서 반환할 추정 값을 지정하는 개체입니다. 생략할 경우 <paramref name="Guess" />는 0.1(10%)이 됩니다.</param>
        <summary>일련의 주기적인 현금 흐름(지불액과 수령액)에 대한 내부 수익률을 지정하는 값을 반환합니다.</summary>
        <returns>일련의 주기적인 현금 흐름(지불액과 수령액)에 대한 내부 수익률입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 내부 수익률 지급액 및 수령액 정기적으로 발생 하는 구성 된 투자에 대 한 받는 이자율이 됩니다.  
  
 `IRR` 함수는 배열에 있는 값의 순서를 사용 하 여 지급액 및 수령액의 순서를 해석 합니다. 올바른 순서로 결제 및 수신 값을 입력 해야 합니다. 연금에 대 한 각 기간에 대 한 현금 흐름 수정 해야 할 필요가 없습니다.  
  
 `IRR` 반복적으로 계산 됩니다. 값을 사용 하 여 시작 `Guess`, `IRR` 계산 결과 0.00001%까지 순환 합니다. 경우 `IRR` 20 후 결과 가져오려고 시도, 실패를 찾을 수 없습니다.  
  
   
  
## Examples  
 이 예제는 `IRR` 함수는 일련의 배열에 포함 된 5 개의 현금 흐름에 대 한 내부 수익률을 반환 합니다. `Values()`합니다. 첫 번째 배열 요소는 비즈니스 착수 비용을 나타내는 부정 현금 흐름입니다. 나머지 4 개의 현금 흐름은 다음 4 년에 대 한 양의 현금 흐름을 나타냅니다. `Guess` 예상된 내부 수익률을 됩니다.  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">배열 인수 값이 잘못되었거나 <paramref name="Guess" /> &lt;= -1입니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">회계 요약</related>
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="F#" Value="static member MIRR :  * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.MIRR (ValueArray, FinanceRate, ReinvestRate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">필수 요소. 현금 흐름 값을 지정하는 <see langword="Double" /> 형식의 배열입니다. 배열에는 하나 이상의 음수 값(지불)과 하나 이상의 양수 값(확인)이 포함되어야 합니다.</param>
        <param name="FinanceRate">필수 요소. 출자 비용으로 지불될 이자율입니다.</param>
        <param name="ReinvestRate">필수 요소. 현금 재투자로 인한 수익에서 받는 이자율입니다.</param>
        <summary>일련의 주기적인 현금 흐름(지불액과 수령액)에 대해 수정된 내부 수익률을 지정하는 값을 반환합니다.</summary>
        <returns>일련의 주기적인 현금 흐름(지불액과 수령액)에 대해 수정된 내부 수익률입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 수정 된 내부 수익률 내부 수익률 경우 지급액 및 수령액 서로 다른 속도로 충당 됩니다. 합니다 `MIRR` 함수는 계정에 대 한 투자 비용과 (`FinanceRate`) 및 현금 재투자 금리 (`ReinvestRate`).  
  
 합니다 `FinanceRate` 고 `ReinvestRate` 인수는 10 진수 값으로 표현 하는 백분율입니다. 예를 들어, 12 %0.12로 표현 됩니다.  
  
 `MIRR` 함수는 배열에 있는 값의 순서를 사용 하 여 지급액 및 수령액의 순서를 해석 합니다. 올바른 순서로 결제 및 수신 값을 입력 해야 합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 `MIRR` 일련의 현금 흐름을 배열에 포함 된 수정 된 내부 수익률을 반환 하는 함수 `Values()`합니다. `LoanAPR` 이자율을 나타내는 및 `InvAPR` 재투자 금리를 나타냅니다.  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ValueArray" /> 차수가 1이 아니거나, <paramref name="FinanceRate" />가 -1이거나, <paramref name="ReinvestRate" />가 -1입니다.</exception>
        <exception cref="T:System.DivideByZeroException">0으로 나누었습니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">회계 요약</related>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member NPer : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPer (Rate, Pmt, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">필수 요소. 기간당 이자율입니다. 예를 들어, APR(연간 이자율) 10%로 자동차 대부를 받은 다음 매월 갚아 나가는 경우 월 이자율은 0.1/12, 즉 0.0083입니다.</param>
        <param name="Pmt">필수 요소. 기간당 지불액입니다. 지불액에는 일반적으로 연금을 받는 기간 동안 변경되지 않는 원금과 이자가 포함됩니다.</param>
        <param name="PV">필수 요소. 현재 값, 금일 값, 일련의 미래 지불액 또는 수령액입니다. 예를 들어, 자동차를 사기 위해 돈을 빌릴 경우 총 차입 금액은 매월 자동차 대금을 지불할 사람에게 갚아야 할 현재의 금액입니다.</param>
        <param name="FV">선택 사항입니다. 최종 지불 후 앞으로 지불할 미래 값 또는 현금 잔액입니다. 예를 들어, 최종 지불 후의 대출 값은 $0이므로 대출의 미래 값은 $0입니다. 그러나 자녀의 교육을 위해 18년간 $50,000를 저축하려고 할 경우 $50,000가 미래 값이 됩니다. 생략된 경우 0이라고 가정합니다.</param>
        <param name="Due">선택 사항입니다. <see cref="T:Microsoft.VisualBasic.DueDate" /> 형식의 개체는 지불 기한을 지정합니다. 이 인수는 납입 기한 말에 납입이 되어야 하면 <c>DueDate.EndOfPeriod</c>이고, 납입 기한 초에 납입이 되어야 하면 <c>DueDate.BegOfPeriod</c>입니다. 생략하면 <c>DueDate.EndOfPeriod</c>인 것으로 간주됩니다.</param>
        <summary>일정 기간의 고정 지불액과 고정 이자율을 기준으로 연금의 기간 수를 지정하는 값을 반환합니다.</summary>
        <returns>일정 기간의 고정 지불액과 고정 이자율을 기준으로 연금의 기간 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 연금은 일련의 시간 동안 정기적으로 고정된 금액을 지불 합니다. 연금 (예: 홈 담보 대출) 대출 또는 투자 (예: 월간 절감 계획) 수 있습니다.  
  
 모든 인수에 대 한 현금 지급 (예: 절약 예치금)은 표현 음수; (예: 피제수 검사) 받은 양수도 표시 됩니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 `NPer` 기간 동안 납부 해야 할 대출 값인 갚을 수를 반환 하는 함수에 포함 된 `PVal`합니다. 기간당 이자율은 제공 (`APR / 12`), 결제 (`Payment`), 대출의 미래 값 (`FVal`), 및 결제 시작 또는 끝 지불 기간 때문 인지 여부를 나타내는 숫자 (`PayType`).  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Rate" />와 <paramref name="Pmt" />가 모두 0입니다.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">회계 요약</related>
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberSignature Language="F#" Value="static member NPV : double *  -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPV (Rate, ValueArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">필수 요소. 전 기간에 걸친 할인율이며 10진수로 표시합니다.</param>
        <param name="ValueArray">필수 요소. 현금 흐름 값을 지정하는 <see langword="Double" /> 형식의 배열입니다. 배열에는 하나 이상의 음수 값(지불)과 하나 이상의 양수 값(확인)이 포함되어야 합니다.</param>
        <summary>일정 기간 현금 흐름(지불액과 수령액)과 할인율을 기준으로 현재의 순 투자 가치를 지정하는 값을 반환합니다.</summary>
        <returns>일정 기간 현금 흐름(지불액과 수령액)과 할인율을 기준으로 현재의 순 투자 가치입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 자금의 순 현재 가치는 향후 일련 지급액 및 수령액의 현재 값이입니다.  
  
 `NPV` 함수는 배열에 있는 값의 순서를 사용 하 여 지급액 및 수령액의 순서를 해석 합니다. 올바른 순서로 결제 및 수신 값을 입력 해야 합니다.  
  
 `NPV` 투자 한 기간 날짜 전에 첫 번째 현금 흐름 값을 시작 하 고 배열에서 마지막 현금 흐름 값을 사용 하 여 종료 합니다.  
  
 순 현재 가치 계산 이후 현금 흐름을 기반으로 합니다. 첫 번째 현금 흐름의 첫 번째 기간부터 발생 하는 경우 첫 번째 값을 반환 하는 값을 추가 해야 합니다 `NPV` 현금 흐름 값에 포함 되어야 합니다 `ValueArray`합니다.  
  
 `NPV` 함수는 비슷합니다는 `PV` 함수 (현재 값) 한다는 점을 제외 하는 `PV` 함수 현금 흐름 마침표의 시작 이나 끝에 시작할 수 있습니다. 변수는 달리 `NPV` 현금 흐름 값 `PV` 투자 전체 현금 흐름을 수정 해야 합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 `NPV` 일련의 현금 흐름을 배열에 포함 된 순 현재 가치를 반환 하는 함수 `values()`합니다. 반환 값에 저장 된 `FixedRetRate`, 고정 된 내부 수익률을 나타냅니다.  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ValueArray" />는 <see langword="Nothing" />이며, <paramref name="ValueArray" />의 순위는 &lt;&gt; 1 또는 <paramref name="Rate" /> = -1입니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">회계 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member Pmt : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.Pmt (Rate, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">필수 요소. 기간당 이자율입니다. 예를 들어, APR(연간 이자율) 10%로 자동차 대부를 받은 다음 매월 갚아 나가는 경우 월 이자율은 0.1/12, 즉 0.0083입니다.</param>
        <param name="NPer">필수 요소. 연금의 총 지불 기간 수입니다. 예를 들어, 자동차 대부를 받아 4년간 매월 갚아 나가는 경우 상환 기간은 총 4 × 12, 즉 48입니다.</param>
        <param name="PV">필수 요소. 일련의 미래 지불액에 대한 현재 값 또는 총액입니다. 예를 들어, 자동차를 사기 위해 돈을 빌릴 경우 총 차입 금액은 매월 자동차 대금을 지불할 사람에게 갚아야 할 현재의 금액입니다.</param>
        <param name="FV">선택 사항입니다. 최종 지불 후 앞으로 지불할 미래 값 또는 현금 잔액입니다. 예를 들어, 최종 지불 후의 대출 값은 $0이므로 대출의 미래 값은 $0입니다. 그러나 자녀의 교육을 위해 18년간 $50,000를 저축하려고 할 경우 $50,000가 미래 값이 됩니다. 생략된 경우 0이라고 가정합니다.</param>
        <param name="Due">선택 사항입니다. <see cref="T:Microsoft.VisualBasic.DueDate" /> 형식의 개체는 지불 기한을 지정합니다. 이 인수는 납입 기한 말에 납입이 되어야 하면 <c>DueDate.EndOfPeriod</c>이고, 납입 기한 초에 납입이 되어야 하면 <c>DueDate.BegOfPeriod</c>입니다. 생략하면 <c>DueDate.EndOfPeriod</c>인 것으로 간주됩니다.</param>
        <summary>일정 기간의 고정 지불액과 고정 이자율을 기준으로 연금에 대한 지불액을 지정하는 값을 반환합니다.</summary>
        <returns>일정 기간의 고정 지불액과 고정 이자율을 기준으로 연금에 대한 지불액입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 연금은 일련의 기간 동안 정기적으로 고정된 금액을 지불 합니다. 연금 (예: 홈 담보 대출) 대출 또는 투자 (예: 월간 절감 계획) 수 있습니다.  
  
 합니다 `Rate` 및 `NPer` 인수는 같은 단위로 지불 기간을 사용 하 여 계산 해야 합니다. 예를 들어 경우 `Rate` 월을 사용 하 여 계산 됩니다 `NPer` 개월을 사용 하 여 계산할 수도 있어야 합니다.  
  
 모든 인수에 대 한 현금 지급 된 (예: 절약 예치금)은 표현 음수; (예: 피제수 검사) 받은 양수도 표시 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Pmt` 고정된 기간 동안 대출의 월 상환액을 반환 하는 함수입니다. 기간당 이자율은 (`APR / 12`), 총 지불 (`TotPmts`), 현재 가치 또는 대출에 대 한 보안 주체 (`PVal`), 대출의 미래 가치를 (`FVal`), 및를 나타내는 숫자입니다 여부를 결제 기한이 임박 하다 시작과 지불 기간 끝 `(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">회계 요약</related>
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">필수 요소. 기간당 이자율입니다. 예를 들어, APR(연간 이자율) 10%로 자동차 대부를 받은 다음 매월 갚아 나가는 경우 월 이자율은 0.1/12, 즉 0.0083입니다.</param>
        <param name="Per">필수 요소. 1에서 <paramref name="NPer" />에 이르는 지불 기간입니다.</param>
        <param name="NPer">필수 요소. 연금의 총 지불 기간 수입니다. 예를 들어, 자동차 대부를 받아 4년간 매월 갚아 나가는 경우 상환 기간은 총 4 x 12, 즉 48입니다.</param>
        <param name="PV">필수 요소. 일련의 미래 지불액 또는 수령액의 현재 값입니다. 예를 들어, 자동차를 사기 위해 돈을 빌릴 경우 총 차입 금액은 매월 자동차 대금을 지불할 사람에게 갚아야 할 현재의 금액입니다.</param>
        <param name="FV">선택 사항입니다. 최종 지불 후 앞으로 지불할 미래 값 또는 현금 잔액입니다. 예를 들어, 최종 지불 후의 대출 값은 $0이므로 대출의 미래 값은 $0입니다. 그러나 자녀의 교육을 위해 18년간 $50,000를 저축하려고 할 경우 $50,000가 미래 값이 됩니다. 생략된 경우 0이라고 가정합니다.</param>
        <param name="Due">선택 사항입니다. <see cref="T:Microsoft.VisualBasic.DueDate" /> 형식의 개체는 지불 기한을 지정합니다. 이 인수는 납입 기한 말에 납입이 되어야 하면 <c>DueDate.EndOfPeriod</c>이고, 납입 기한 초에 납입이 되어야 하면 <c>DueDate.BegOfPeriod</c>입니다. 생략하면 <c>DueDate.EndOfPeriod</c>인 것으로 간주됩니다.</param>
        <summary>일정 기간의 고정 지불액과 고정 이자율을 기준으로 일정 기간의 연금에 대한 원금 지불액을 지정하는 값을 반환합니다.</summary>
        <returns>일정 기간의 고정 지불액과 고정 이자율을 기준으로 일정 기간의 연금에 대한 원금 지불액입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 연금은 일련의 시간 동안 정기적으로 고정된 금액을 지불 합니다. 연금 (예: 홈 담보 대출) 대출 또는 투자 (예: 월간 절감 계획) 수 있습니다.  
  
 합니다 `Rate` 및 `NPer` 인수는 같은 단위로 지불 기간을 사용 하 여 계산 해야 합니다. 예를 들어 경우 `Rate` 월을 사용 하 여 계산 됩니다 `NPer` 개월을 사용 하 여 계산할 수도 있어야 합니다.  
  
 모든 인수에 대 한 현금 지급 된 (예: 절약 예치금)은 표현 음수; (예: 피제수 검사) 받은 양수도 표시 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `PPmt` 특정 기간 동안 지불 양을 주 서버인 모든 지불은 같은 값의 경우 계산 하는 함수입니다. 기간당 이자율은 (`APR / 12`), 주 부분을 필요한는 지불 기간 (`Period`), 총 지불 (`TotPmts`)에 있는 값 또는 대출에 대 한 보안 주체 (`PVal`), 대출의 미래 값 (`FVal`), 및 결제 시작 또는 끝 지불 기간 때문 인지 여부를 나타내는 숫자 (`PayType`).  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;=0 또는 <paramref name="Per" /> &gt; <paramref name="NPer" />입니다.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">회계 요약</related>
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PV (Rate, NPer, Pmt, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">필수 요소. 기간당 이자율입니다. 예를 들어, APR(연간 이자율) 10%로 자동차 대부를 받은 다음 매월 갚아 나가는 경우 월 이자율은 0.1/12, 즉 0.0083입니다.</param>
        <param name="NPer">필수 요소. 연금의 총 지불 기간 수입니다. 예를 들어, 자동차 대부를 받아 4년간 매월 갚아 나가는 경우 상환 기간은 총 4 x 12, 즉 48입니다.</param>
        <param name="Pmt">필수 요소. 기간당 지불액입니다. 지불액에는 일반적으로 연금을 받는 기간 동안 변경되지 않는 원금과 이자가 포함됩니다.</param>
        <param name="FV">선택 사항입니다. 최종 지불 후 앞으로 지불할 미래 값 또는 현금 잔액입니다. 예를 들어, 최종 지불 후의 대출 값은 $0이므로 대출의 미래 값은 $0입니다. 그러나 자녀의 교육을 위해 18년간 $50,000를 저축하려고 할 경우 $50,000가 미래 값이 됩니다. 생략된 경우 0이라고 가정합니다.</param>
        <param name="Due">선택 사항입니다. <see cref="T:Microsoft.VisualBasic.DueDate" /> 형식의 개체는 지불 기한을 지정합니다. 이 인수는 납입 기한 말에 납입이 되어야 하면 <c>DueDate.EndOfPeriod</c>이고, 납입 기한 초에 납입이 되어야 하면 <c>DueDate.BegOfPeriod</c>입니다. 생략하면 <c>DueDate.EndOfPeriod</c>인 것으로 간주됩니다.</param>
        <summary>미래에 지불할 일정 기간의 고정 지불액과 고정 이자율을 기준으로 연금의 현재 가치를 지정하는 값을 반환합니다.</summary>
        <returns>미래에 지불할 일정 기간의 고정 지불액과 고정 이자율을 기준으로 연금의 현재 가치입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 연금은 일련의 시간 동안 정기적으로 고정된 금액을 지불 합니다. 연금 (예: 홈 담보 대출) 대출 또는 투자 (예: 월간 절감 계획) 수 있습니다.  
  
 합니다 `Rate` 및 `NPer` 인수는 같은 단위로 지불 기간을 사용 하 여 계산 해야 합니다. 예를 들어 경우 `Rate` 월을 사용 하 여 계산 됩니다 `NPer` 개월을 사용 하 여 계산할 수도 있어야 합니다.  
  
 모든 인수에 대 한 현금 지급 (예: 절약 예치금)은 표현 음수; (예: 피제수 검사) 받은 양수도 표시 됩니다.  
  
   
  
## Examples  
 이 예제는 `PV` 함수 다음 20 년 동안 매년 50,000 달러를 제공 하는 1,000,000 달러를 초과 연금의 현재 가치를 반환 합니다. 되는 예상된 연이율 (`APR`), 총 지불 (`TotPmts`), 각 지불 금액 (`YrIncome`), 투자의 총 미래 값 (`FVal`), 및를 나타내는 숫자 여부를 각 시작 또는 끝 지불 기간 결제 (`PayType`). `YrIncome` 음수 이므로 현금 지급 연금에서 각 연도 나타냅니다.  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">회계 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member Rate : double * double * double * double * Microsoft.VisualBasic.DueDate * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.Rate (NPer, Pmt, PV, FV, Due, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">필수 요소. 연금의 총 지불 기간 수입니다. 예를 들어, 자동차 대부를 받아 4년간 매월 갚아 나가는 경우 상환 기간은 총 4 * 12(즉 48)입니다.</param>
        <param name="Pmt">필수 요소. 기간당 지불액입니다. 지불액에는 일반적으로 연금을 받는 기간 동안 변경되지 않는 원금과 이자가 포함됩니다.</param>
        <param name="PV">필수 요소. 현재 값, 금일 값, 일련의 미래 지불액 또는 수령액입니다. 예를 들어, 자동차를 사기 위해 돈을 빌릴 경우 총 차입 금액은 매월 자동차 대금을 지불할 사람에게 갚아야 할 현재의 금액입니다.</param>
        <param name="FV">선택 사항입니다. 최종 지불 후 앞으로 지불할 미래 값 또는 현금 잔액입니다. 예를 들어, 최종 지불 후의 대출 값은 $0이므로 대출의 미래 값은 $0입니다. 그러나 자녀의 교육을 위해 18년간 $50,000를 저축하려고 할 경우 $50,000가 미래 값이 됩니다. 생략된 경우 0이라고 가정합니다.</param>
        <param name="Due">선택 사항입니다. <see cref="T:Microsoft.VisualBasic.DueDate" /> 형식의 개체는 지불 기한을 지정합니다. 이 인수는 납입 기한 말에 납입이 되어야 하면 <c>DueDate.EndOfPeriod</c>이고, 납입 기한 초에 납입이 되어야 하면 <c>DueDate.BegOfPeriod</c>입니다. 생략하면 <c>DueDate.EndOfPeriod</c>인 것으로 간주됩니다.</param>
        <param name="Guess">선택 사항입니다. <see langword="Rate" />가 반환하는 추정 값입니다. 생략할 경우 <paramref name="Guess" />는 0.1(10%)이 됩니다.</param>
        <summary>연금에 대한 일정 기간당 이자율을 지정하는 값을 반환합니다.</summary>
        <returns>연금에 대한 일정 기간당 이자율입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 연금은 일련의 시간 동안 정기적으로 고정된 금액을 지불 합니다. 연금 (예: 홈 담보 대출) 대출 또는 투자 (예: 월간 절감 계획) 수 있습니다.  
  
 모든 인수에 대 한 현금 지급 (예: 절약 예치금)은 표현 음수; (예: 피제수 검사) 받은 양수도 표시 됩니다.  
  
 `Rate` 반복적으로 계산 됩니다. 값을 사용 하 여 시작 `Guess`, `Rate` 계산 결과 0.00001%까지 순환 합니다. 경우 `Rate` 20 후 결과 가져오려고 시도, 실패를 찾을 수 없습니다. 추정이 10%와 `Rate` 실패에 대 한 다른 값을 사용해 보십시오 `Guess`합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 `Rate` 지불의 총 수를 지정 된 대출 금리를 계산 하는 함수 (`TotPmts`), 대출 상환금 양을 (`Payment`), 현재 가치 또는 대출에 대 한 보안 주체 (`PVal`), 미래 대출 값 (`FVal`)를 시작 또는 끝 지불 기간 결제 기한이 여부를 나타내는 숫자입니다 (`PayType`), 및 예상된 이자율 근사값 (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> &lt;= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">회계 요약</related>
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberSignature Language="F#" Value="static member SLN : double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SLN (Cost, Salvage, Life)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">필수 요소. 초기 자산 비용입니다.</param>
        <param name="Salvage">필수 요소. 내용 연수 종료 시점의 자산 값입니다.</param>
        <param name="Life">필수 요소. 자산의 내용 연수 길이입니다.</param>
        <summary>단일 기간의 자산에 대한 정액법을 지정하는 값을 반환합니다.</summary>
        <returns>단일 기간의 자산에 대한 정액법입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 감가상각 기간으로 같은 단위로 표현 해야 합니다는 `Life` 인수입니다. 모든 인수는 양수 여야 합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 `SLN` 자산의 초기 비용을 지정 된 기간 동안 자산 정액법을 반환 하는 함수 (`InitCost`), 자산의 수명 끝에 회수 되는 값 (`SalvageVal`), 및 총 기간 연 단위 (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">회계 요약</related>
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="F#" Value="static member SYD : double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SYD (Cost, Salvage, Life, Period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">필수 요소. 초기 자산 비용입니다.</param>
        <param name="Salvage">필수 요소. 내용 연수 종료 시점의 자산 값입니다.</param>
        <param name="Life">필수 요소. 자산의 내용 연수 길이입니다.</param>
        <param name="Period">필수 요소. 자산 감가상각이 계산되는 기간입니다.</param>
        <summary>지정한 기간 동안 자산의 연수 합계 감가상각을 지정하는 값을 반환합니다.</summary>
        <returns>지정한 기간 동안 자산의 연수 합계 감가상각입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `Life` 고 `Period` 인수는 같은 단위로 표현 해야 합니다. 예를 들어 경우 `Life` 월에 `Period` 개월 내에도 지정 되어야 합니다. 모든 인수는 양수 여야 합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 `SYD` 자산의 초기 비용을 지정 하는 지정 된 기간 동안 자산의 감가상각을 반환 하는 함수 (`InitCost`), 잔존 가치 자산의 연수 끝 (`SalvageVal`), 및 총 기간 자산 연도 (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &gt; <paramref name="Life" /> 또는 <paramref name="Period" /> &lt;=0입니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">회계 요약</related>
      </Docs>
    </Member>
  </Members>
</Type>