<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <Metadata><Meta Name="ms.openlocfilehash" Value="96ecba38ed21212b1bd42da6d2ce2ef30e61426e" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57913256" /></Metadata><TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <TypeSignature Language="VB.NET" Value="Public Module Information" />
  <TypeSignature Language="C++ CLI" Value="public ref class Information sealed" />
  <TypeSignature Language="F#" Value="type Information = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Information" /> 모듈에는 정보를 반환하고, 테스트하고, 확인하는 프로시저가 포함되어 있습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 모듈에는 Visual Basic 언어 키워드 및 오류 정보를 제공, 데이터 유효성을 검사 하 고, 배열 범위를 확인 하 고 데이터 형식 및 색 정보를 검색 하는 런타임 라이브러리 멤버를 지원 합니다.  
  
   
  
## Examples  
 다음 예제에서는 `VbTypeName` 함수를 여러 변수에 대 한 데이터 형식 이름을 반환 합니다.  
  
```vb  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/information-and-interaction-summary.md">정보 및 상호 작용 요약</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/data-types-summary.md">Data Types Summary</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/declarations-and-constants-summary.md">선언 및 상수 요약</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">키워드(Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic 런타임 라이브러리 멤버</related>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberSignature Language="VB.NET" Value="Public Function Erl () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Erl();" />
      <MemberSignature Language="F#" Value="static member Erl : unit -&gt; int" Usage="Microsoft.VisualBasic.Information.Erl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>마지막으로 실행된 문의 줄 번호를 나타내는 정수를 반환합니다. 읽기 전용입니다.</summary>
        <returns>마지막으로 실행된 문의 줄 번호를 나타내는 정수를 반환합니다. 읽기 전용입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic에서 줄 번호 없음를 발견 하는 경우 0을 반환 합니다.  
  
   
  
## Examples  
 이 예제에서는 `Erl` 줄 번호를 표시 하는 속성입니다.  
  
 [!code-vb[VbVbalrErrorHandling#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberSignature Language="VB.NET" Value="Public Function Err () As ErrObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::ErrObject ^ Err();" />
      <MemberSignature Language="F#" Value="static member Err : unit -&gt; Microsoft.VisualBasic.ErrObject" Usage="Microsoft.VisualBasic.Information.Err " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>런타임 오류에 대한 정보를 포함합니다.</summary>
        <returns>런타임 오류에 대한 정보를 포함합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 속성을 `Err` 개체가 오류-Visual Basic, 개체 또는 프로그래머의 생성자에 의해 설정 됩니다.  
  
 때 런타임 오류가 발생 하는 속성을 `Err` 오류를 고유 하 게 식별 하는 정보로 채워지는 개체 및 오류 처리에 사용할 수 있습니다. 코드에서 런타임 오류를 생성 하려면 사용 된 `Raise` 메서드.  
  
 합니다 `Err` 없거나 길이가 0 인 문자열 개체의 속성 다시 설정 됩니다 ("") 후를 `Exit Sub`, `Exit Function`, `Exit Property`, 또는 `Resume Next` 는 오류 처리 루틴 내의 문에 합니다. 모든 형태를 사용 하는 `Resume` 는 오류 처리 루틴 외부로 다시 설정 되지 것입니다는 `Err` 개체의 속성입니다. 사용할 수는 `Clear` 메서드를 명시적으로 다시 설정할 `Err`합니다.  
  
 사용 합니다 `Raise` 메서드 대신 `Error` 문을 시스템 오류에 대 한 런타임 오류를 생성 하 고 모듈 클래스입니다. 사용할지 여부를 결정 합니다 `Raise` 다른 코드에서 메서드를 반환 하려는 정보의 양에 따라 다릅니다.  
  
 `Err` 개체는 전역 범위를 사용 하 여 내장 개체입니다. 따라서 코드에 해당 인스턴스를 만들 필요가 없습니다.  
  
   
  
## Examples  
 속성을 사용 하 여이 예제는 `Err` 개체 오류 메시지 대화 상자를 생성 합니다. 사용 하는 경우 다음에 유의 합니다 `Clear` 메서드 첫 번째를 사용 하 여 Visual Basic 오류를 생성 하는 경우는 `Raise` 메서드, Visual Basic의 기본 값 수의 속성은 `Err` 개체입니다.  
  
 [!code-vb[VbVbalrErrorHandling#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/error-statement.md">Error 문</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/on-error-statement.md">On Error 문(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/exit-statement.md">Exit 문(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/resume-statement.md">Resume 문</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/error-messages/index.md">오류 메시지(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md">Try...Catch...Finally 문(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsArray (VarName As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsArray(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member IsArray : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsArray VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">필수 요소. <see langword="Object" /> 변수입니다.</param>
        <summary>변수가 배열을 가리키고 있는지 여부를 나타내는 <see langword="Boolean" /> 값을 반환합니다.</summary>
        <returns>변수가 배열을 가리키고 있는지 여부를 나타내는 <see langword="Boolean" /> 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsArray` 반환 `True` 변수의 배열을;를 가리키는 경우 그렇지 `False`합니다. `IsArray` 배열에 포함 될 수 있는 개체를 사용 하 여 특히 유용 합니다.  
  
   
  
## Examples  
 이 예제에서는 `IsArray` 여러 변수 배열을 참조 하는 경우를 확인 하는 함수입니다.  
  
 [!code-vb[VbVbalrFunctions#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/arrays/index.md">Visual Basic의 배열</related>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDate (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDate(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDate : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDate Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">필수 요소. <see langword="Object" /> 식입니다.</param>
        <summary>식이 올바른 <see langword="Boolean" /> 값을 나타내는지 여부를 알리는 <see langword="Date" /> 값을 반환합니다.</summary>
        <returns>식이 올바른 <see langword="Boolean" /> 값을 나타내는지 여부를 알리는 <see langword="Date" /> 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDate` 반환 `True` 경우 `Expression` 입니다는 <xref:System.DateTime> 데이터 형식 이거나 변환 하 고, 그렇지 않으면 반환 `False`합니다.  
  
 <xref:System.DateTime> 데이터 형식은 날짜 값과 시간 값을 갖습니다. `IsDate` 반환 `True` 경우 `Expression` 유효한 날짜, 유효한 시간 또는 유효한 날짜 및 시간을 나타냅니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 `IsDate` 함수를 여러 변수를 나타내는 올바른 경우 확인 <xref:System.DateTime> 값입니다.  
  
 [!code-vb[VbVbalrFunctions#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 위의 예에서 `IsDate` 반환 `True` 처음 네 개의 호출에 대 한 및 `False` 마지막 호출에 대 한 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDBNull (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsDBNull Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">필수 요소. <see langword="Object" /> 식입니다.</param>
        <summary>식이 <see cref="T:System.DBNull" /> 클래스로 계산되는지 여부를 나타내는 <see langword="Boolean" /> 값을 반환합니다.</summary>
        <returns>식이 <see cref="T:System.DBNull" /> 클래스로 계산되는지 여부를 나타내는 <see langword="Boolean" /> 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsDBNull` 반환 `True` 의 데이터 형식이 `Expression` 로 계산 되는 <xref:System.DBNull> 형식이 고, 그렇지 `IsDBNull` 반환 `False`합니다.  
  
 합니다 <xref:System.DBNull?displayProperty=nameWithType> 나타내는 값을 `Object` 없거나 존재 하지 않는 데이터를 나타냅니다. `DBNull` 동일 아닙니다 `Nothing`을 나타내는 변수 아직 초기화 되지 않았습니다. `DBNull` 또한 같지 않습니다 길이가 0 인 문자열로 (`""`), null 문자열로 참조 되는 경우에 따라 있는 합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 `IsDBNull` 변수를 평가 하는 경우를 결정 하는 함수 `DBNull`합니다.  
  
 [!code-vb[VbVbalrFunctions#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsError(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsError : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsError Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">필수 요소. <see langword="Object" /> 식입니다.</param>
        <summary>식이 예외 형식인지 여부를 나타내는 <see langword="Boolean" /> 값을 반환합니다.</summary>
        <returns>식이 예외 형식인지 여부를 나타내는 <see langword="Boolean" /> 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsError` 반환 `True` 식이 나타내는 경우는 `Object` 에서 파생 되는 변수를 <xref:System.Exception> 클래스는 <xref:System> 네임 스페이스입니다.  
  
 파생 되는 예외가 <xref:System.Exception?displayProperty=nameWithType> 사용 하 여 낼 수 있습니다는 `Try...Catch...Finally` 문입니다.  
  
   
  
## Examples  
 다음 예제에서는 `IsError` 식을 시스템 예외를 나타내는 경우를 확인 하는 함수입니다.  
  
 [!code-vb[VbVbalrFunctions#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNothing (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNothing(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNothing : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNothing Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">필수 요소. <see langword="Object" /> 식입니다.</param>
        <summary>식에 할당된 개체가 있는지 여부를 나타내는 <see langword="Boolean" /> 값을 반환합니다.</summary>
        <returns>식에 할당된 개체가 있는지 여부를 나타내는 <see langword="Boolean" /> 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNothing` 반환 `True` 반환 하는 경우 식이 현재 아니요가 고 그렇지 않으면 해당에 할당 된 개체를 있는 개체 변수를 나타내는, `False`합니다.  
  
 `IsNothing` 참조 형식에서 작동 됩니다. 값 형식 값을 포함할 수 없습니다 및 할당 하는 경우 기본값으로 되돌아갑니다 `Nothing` 되도록 합니다. 에 값 형식을 제공 하는 경우 `Expression`하십시오 `IsNothing` 항상 반환 `False`합니다.  
  
   
  
## Examples  
 다음 예제에서는 `IsNothing` 함수를 개체 변수에 개체 인스턴스와 연결 되어 있는지 확인 합니다.  
  
 [!code-vb[VbVbalrFunctions#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md">Value Types and Reference Types</related>
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumeric (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumeric(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsNumeric : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsNumeric Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">필수 요소. <see langword="Object" /> 식입니다.</param>
        <summary>식이 숫자로 계산될 수 있는지 여부를 나타내는 <see langword="Boolean" /> 값을 반환합니다.</summary>
        <returns>식이 숫자로 계산될 수 있는지 여부를 나타내는 <see langword="Boolean" /> 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsNumeric` 반환 `True` 의 데이터 형식이 `Expression` 됩니다 `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, 또는 `UShort`합니다. 반환 한다는 `True` 경우 `Expression` 는 `Char`, `String`, 또는 `Object` 숫자로 성공적으로 변환할 수 있는 합니다. `Expression` 숫자가 아닌 문자를 포함할 수 있습니다. `IsNumeric` 반환 `True` 경우 `Expression` 는 유효한 16 진수 또는 8 진수 숫자를 포함 하는 문자열입니다. `IsNumeric` 반환 `True` 경우 `Expression` 로 시작 하는 유효한 숫자 식에 포함을 +,-문자 또는 쉼표를 포함 합니다.  
  
 `IsNumeric` 반환 `False` 하는 경우 `Expression` 데이터 형식의 `Date`합니다. 반환 `False` 경우 `Expression` 되는 `Char`, `String`, 또는 `Object` 숫자로 성공적으로 변환할 수 없습니다는.  
  
   
  
## Examples  
 다음 예제에서는 `IsNumeric` 변수의 내용을 숫자로 계산 될 수 하는 경우를 결정 하는 함수입니다.  
  
 [!code-vb[VbVbalrFunctions#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReference (Expression As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsReference(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member IsReference : obj -&gt; bool" Usage="Microsoft.VisualBasic.Information.IsReference Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">필수 요소. <see langword="Object" /> 식입니다.</param>
        <summary>식이 참조 형식으로 계산될 수 있는지 여부를 나타내는 <see langword="Boolean" /> 값을 반환합니다.</summary>
        <returns>식이 참조 형식으로 계산될 수 있는지 여부를 나타내는 <see langword="Boolean" /> 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsReference` 반환 `True` 경우 `Expression` 클래스 인스턴스를 같은 참조 형식을 나타냅니다는 `String` 형식 또는 모든 형식의 배열을 그렇지 `False`합니다.  
  
 참조 형식이 다른 곳에서 메모리에 저장 된 데이터에 대 한 포인터를 포함 합니다. 값 형식 자체 데이터를 포함합니다.  
  
   
  
## Examples  
 이 예제에서는 `IsReference` 함수를 여러 변수에 참조 형식을 참조 하는지 확인 합니다.  
  
 [!code-vb[VbVbalrFunctions#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 앞의 예제에서 처음 3 개를 호출 `IsReference` 반환 `True`합니다. 마지막 호출이 반환 `False`이므로 `Integer` 가 참조 형식이 아닌 값 형식입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md">Value Types and Reference Types</related>
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member LBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.LBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">필수 요소. 데이터 형식의 배열로, 차원의 가능한 최저 첨자를 찾을 배열입니다.</param>
        <param name="Rank">선택 사항입니다. <see langword="Integer" />. 가능한 최저 첨자가 반환될 차원입니다. 첫 번째 차원에는 1, 두 번째 차원에는 2를 사용하는 방식으로 사용됩니다. <paramref name="Rank" />가 생략되면 1이 사용됩니다.</param>
        <summary>배열의 표시된 차원에 사용할 수 있는 최저 첨자를 반환합니다.</summary>
        <returns><see langword="Integer" />. 지정한 차원의 첨자에 포함될 수 있는 가장 낮은 값입니다. <see langword="LBound" />는 <paramref name="Array" />가 초기화된 경우 길이가 0인 문자열과 같이 요소가 없어도 항상 0을 반환합니다. <paramref name="Array" />가 <see langword="Nothing" />이면 <see langword="LBound" />는 <see cref="T:System.ArgumentNullException" />을 throw합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 배열 첨자가 0에서 시작하므로 모든 차원에 대해 사용할 수 있는 최저 첨자는 항상 0입니다.  
  
 다음 크기를 사용 하 여 배열에 대해 `LBound` 다음 표에서 값을 반환 합니다.  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|LBound 호출|반환 값|  
|--------------------|------------------|  
|`LBound(a, 1)`|0|  
|`LBound(a, 2)`|0|  
|`LBound(a, 3)`|0|  
  
   
  
## Examples  
 다음 예제에서는 `LBound` 표시 된 차원 배열에 사용할 수 있는 최저 첨자를 결정 하는 함수입니다.  
  
 [!code-vb[VbVbalrFunctions#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Array" />가 <see langword="Nothing" />입니다.</exception>
        <exception cref="T:System.RankException"><paramref name="Rank" />가 1보다 작거나 <paramref name="Rank" />가 <paramref name="Array" />의 차수보다 큽니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim 문(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md">ReDim 문(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function QBColor (Color As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int QBColor(int Color);" />
      <MemberSignature Language="F#" Value="static member QBColor : int -&gt; int" Usage="Microsoft.VisualBasic.Information.QBColor Color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">필수 요소. 0~15 사이의 정수입니다.</param>
        <summary>지정한 색 번호에 해당되는 RGB 색 코드를 나타내는 <see langword="Integer" /> 값을 반환합니다.</summary>
        <returns>지정한 색 번호에 해당되는 RGB 색 코드를 나타내는 <see langword="Integer" /> 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환된 된 값 가장 덜 중요 한 바이트부터 Visual Basic 언어를 사용한 RGB 시스템에서 적절 한 색을 설정 하는 데 빨강, 녹색 및 파랑 값을 지정 합니다.  
  
 `Color` 인수에 이러한 설정이 있습니다.  
  
|수|색|수|색|  
|------------|-----------|------------|-----------|  
|0|검정|8|회색|  
|1|파랑|9|연한 파랑|  
|2|녹색|10|연한 녹색|  
|3|녹청|11|연한 녹청|  
|4|빨강|12|연한 빨간색|  
|5|자홍|13|밝은 자홍|  
|6|노랑|14|밝은 노랑|  
|7|하얀|15|밝은 백서|  
  
   
  
## Examples  
 이 예제에서는 합니다 `QBColor` 색으로 변경 하는 함수에 나타난 `colorInteger`합니다. `QBColor` 0에서 15 사이의 정수 값을 허용합니다.  
  
 [!code-vb[VbVbalrCatRef#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Color" />가 0부터 15까지의 범위를 벗어났습니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RGB (Red As Integer, Green As Integer, Blue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int RGB(int Red, int Green, int Blue);" />
      <MemberSignature Language="F#" Value="static member RGB : int * int * int -&gt; int" Usage="Microsoft.VisualBasic.Information.RGB (Red, Green, Blue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">필수 요소. 0~255(포함) 사이의 <see langword="Integer" /> 형식으로, 빨간색의 농도를 나타냅니다.</param>
        <param name="Green">필수 요소. 0~255(포함) 사이의 <see langword="Integer" /> 형식으로, 녹색의 농도를 나타냅니다.</param>
        <param name="Blue">필수 요소. 0~255(포함) 사이의 <see langword="Integer" /> 형식으로, 파란색의 농도를 나타냅니다.</param>
        <summary>빨강, 녹색 및 파랑 색 구성 요소 집합에서 RGB 색상 값을 나타내는 <see langword="Integer" /> 값을 반환합니다.</summary>
        <returns>빨강, 녹색 및 파랑 색 구성 요소 집합에서 RGB 색상 값을 나타내는 <see langword="Integer" /> 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 색 사양을 허용 하는 응용 프로그램 메서드 및 속성 사양이 RGB를 나타내는 숫자 색 값을 예상 합니다. RGB 색상 값을 빨간색, 녹색 및 파란색 표시할 특정 색의 상대 강도 지정 합니다.  
  
 경우에 대 한 인수 값 `RGB` 255 보다 크면 255가 사용 됩니다.  
  
 다음 표에서 일부 표준 색과 포함 된 빨간색, 녹색 및 파랑 값을 나열 합니다.  
  
|색|빨강 값|녹색 값|파란색 값|  
|-----------|---------------|-----------------|----------------|  
|검정|0|0|0|  
|파랑|0|0|255|  
|녹색|0|255|0|  
|녹청|0|255|255|  
|빨강|255|0|0|  
|자홍|255|0|255|  
|노랑|255|255|0|  
|하얀|255|255|255|  
  
   
  
## Examples  
 이 예제에서는 하는 방법을 `RGB` 함수를 사용 하 여 나타내는 정수를 반환 하는 `RGB` 색 값입니다.  
  
 [!code-vb[VbVbalrCatRef#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Green" />, <paramref name="Blue" /> 또는 <paramref name="Red" />가 0부터 255까지의 범위를 벗어났습니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SystemTypeName (VbName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ SystemTypeName(System::String ^ VbName);" />
      <MemberSignature Language="F#" Value="static member SystemTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.SystemTypeName VbName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">필수 요소. Visual Basic 형식 이름을 포함하는 <see langword="String" /> 변수입니다.</param>
        <summary>변수의 시스템 데이터 형식 이름을 포함하는 <see langword="String" /> 값을 반환합니다.</summary>
        <returns>변수의 시스템 데이터 형식 이름을 포함하는 <see langword="String" /> 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SystemTypeName` 정규화 된 공용 언어 런타임 (CLR) 형식 이름에 해당 하는 Visual Basic 형식 이름을 반환 합니다. 예를 들어 있으면 `VbName` "날짜"를 포함 `SystemTypeName` "System.DateTime"를 반환 합니다. 하는 경우 `SystemTypeName` 의 값을 인식 하지 못합니다 `VbName`를 반환 합니다 `Nothing` (문자열이 아닌 아무것도).  
  
   
  
## Examples  
 다음 예제에서는 `SystemTypeName` 함수를 여러 변수에 대 한 데이터 형식 이름을 반환 합니다.  
  
 [!code-vb[VbVbalrFunctions#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TypeName (VarName As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ TypeName(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member TypeName : obj -&gt; string" Usage="Microsoft.VisualBasic.Information.TypeName VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="VarName">필수 요소. <see langword="Object" /> 변수입니다. <see langword="Option Strict" />가 <see langword="Off" />이면 구조체를 제외한 모든 데이터 형식의 변수를 전달할 수 있습니다.</param>
        <summary>변수에 대한 데이터 형식 정보를 포함하는 <see langword="String" /> 값을 반환합니다.</summary>
        <returns>변수에 대한 데이터 형식 정보를 포함하는 <see langword="String" /> 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표는 `String` 에서 반환 된 값 `TypeName` 의 다른 내용에 대 한 `VarName`합니다.  
  
|`VarName` 콘텐츠|반환 문자열|  
|------------------------|---------------------|  
|16 비트 `True` 또는 `False` 값 형식|"부울"|  
|8 비트 이진 값 형식|"Byte"|  
|16 비트 문자 값 형식|"Char"|  
|64 비트 날짜 및 시간 값 형식|"Date"|  
|누락 되었거나 존재 하지 않는 데이터를 나타내는 참조 형식|"DBNull"|  
|128 비트 고정 소수점 숫자 값 형식|"Decimal"|  
|64 비트 부동 소수점 숫자 값 형식|"Double"|  
|32 비트 정수 값 형식|"Integer"|  
|지정 되지 않은 개체를 가리키는 참조 형식|"Object"|  
|클래스에서 지정 된 개체를 가리키는 참조 형식 *objectclass*|"*objectclass*"|  
|64 비트 정수 값 형식|"Long"|  
|현재 할당 된 개체가 없는 참조 형식|아무것도|  
|8 비트 부호 있는 정수 값 형식|"SByte"|  
|16 비트 정수 값 형식|"Short"|  
|32 비트 부동 소수점 숫자 값 형식|"단일"|  
|16 비트 문자의 문자열을 가리키는 참조 형식|"String"|  
|32 비트 부호 없는 정수 값 형식|"UInteger"|  
|64 비트 부호 없는 정수 값 형식|"ULong"|  
|16 비트 부호 없는 정수 값 형식|"UShort"|  
  
 경우 `VarName` 가 배열에 반환된 된 문자열에 추가 하는 빈 괄호를 사용 하 여 앞의 표에 있는 문자열 중 하나일 수 있습니다. 예를 들어 있으면 `VarName` 정수의 배열을 가리킵니다 `TypeName` "필수적 요소"를 반환 합니다.  
  
 때 `TypeName` 참조 형식의 이름을 반환 합니다만 이름 자체를 정규화 된 이름이 아니라 같은 클래스를 반환 합니다. 예를 들어 경우 `VarName` 클래스의 개체를 가리키는 <xref:System.Drawing.Printing.PaperSource?displayProperty=nameWithType>, `TypeName` "PaperSource"를 반환 합니다. 변수의 특정 클래스 형식으로 선언 되었지만 개체에 할당 되지 않은 경우 `TypeName` 아무것도 반환 합니다.  
  
   
  
## Examples  
 다음 예제에서는 `TypeName` 여러 변수에 대 한 데이터 형식 정보를 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrFunctions#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberSignature Language="F#" Value="static member UBound : Array * int -&gt; int" Usage="Microsoft.VisualBasic.Information.UBound (Array, Rank)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">필수 요소. 데이터 형식의 배열로, 차원의 가능한 최고 첨자를 찾을 배열입니다.</param>
        <param name="Rank">선택 사항입니다. <see langword="Integer" />. 가능한 최고 첨자가 반환될 차원입니다. 첫 번째 차원에는 1, 두 번째 차원에는 2를 사용하는 방식으로 사용됩니다. <paramref name="Rank" />가 생략되면 1이 사용됩니다.</param>
        <summary>배열의 표시된 차원에 사용할 수 있는 최고 첨자를 반환합니다.</summary>
        <returns><see langword="Integer" />. 지정한 차원의 첨자에 포함될 수 있는 가장 높은 값입니다. <paramref name="Array" />에 요소가 하나만 있으면 <see langword="UBound" />에서 0을 반환합니다. 길이가 0인 문자열과 같이 <paramref name="Array" />에 요소가 없으면 <see langword="UBound" />에서 -1을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 배열 첨자가 0에서 시작, 차원의 길이 해당 차원에 대 한 사용 가능한 최고 첨자 보다 1 큽니다.  
  
 다음 크기를 사용 하 여 배열에 대해 `UBound` 다음 표에서 값을 반환 합니다.  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|UBound 호출|반환 값|  
|--------------------|------------------|  
|`UBound(a, 1)`|100|  
|`UBound(a, 2)`|5|  
|`UBound(a, 3)`|4|  
  
 사용할 수 있습니다 `UBound` 합계를 결정할 수 있지만 배열에 있는 요소의 수 첨자가 0에서 시작 하는 팩트에 대 한 계정에 반환 하는 값 조정 해야 합니다. 다음 예제에서는 배열의 전체 크기를 계산 `a` 앞의 예제에서:  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 값에 대 한 계산 `total` 는 3030 101 * 6 * 5.  
  
   
  
## Examples  
 다음 예제에서는 `UBound` 배열의 표시 된 차원에 대 한 사용 가능한 최고 첨자를 결정 하는 함수입니다.  
  
 [!code-vb[VbVbalrFunctions#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="Array" />가 <see langword="Nothing" />입니다.</exception>
        <exception cref="T:System.RankException"><paramref name="Rank" />가 1보다 작거나 <paramref name="Rank" />가 <paramref name="Array" />의 차수보다 큽니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/dim-statement.md">Dim 문(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/redim-statement.md">ReDim 문(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarType (VarName As Object) As VariantType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::VariantType VarType(System::Object ^ VarName);" />
      <MemberSignature Language="F#" Value="static member VarType : obj -&gt; Microsoft.VisualBasic.VariantType" Usage="Microsoft.VisualBasic.Information.VarType VarName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">필수 요소. <see langword="Object" /> 변수입니다. <see langword="Option Strict" />가 <see langword="Off" />이면 구조체를 제외한 모든 데이터 형식의 변수를 전달할 수 있습니다.</param>
        <summary>변수의 데이터 형식 분류를 포함하는 <see langword="Integer" /> 값을 반환합니다.</summary>
        <returns>변수의 데이터 형식 분류를 포함하는 <see langword="Integer" /> 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 된 정수 값 `VarType` 멤버인는 <xref:Microsoft.VisualBasic.VariantType>합니다.  
  
 다음 표에서 반환 하는 값을 보여 줍니다 `VarType` 의 특수 한 경우 `VarName`합니다.  
  
|데이터 형식으로 표시 `VarName`|반환 된 값 `VarType`|  
|----------------------------------------|---------------------------------|  
|[Nothing](~/docs/visual-basic/language-reference/nothing.md)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|열거형|기본 데이터 형식 (`SByte`, `Byte`, `Short`, `UShort`를 `Integer`를 `UInteger`를 `Long`, 또는 `ULong`)|  
|배열|배열 요소 형식의 비트 OR 및 `VariantType.Array`|  
|배열의 배열|비트 OR `VariantType.Object` 및 `VariantType.Array`|  
|구조 (<xref:System.ValueType?displayProperty=nameWithType>)|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|알 수 없음|`VariantType.Object`|  
  
   
  
## Examples  
 다음 예제에서는 `VarType` 여러 변수에 대 한 데이터 형식을 분류 정보를 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrFunctions#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function VbTypeName (UrtName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VbTypeName(System::String ^ UrtName);" />
      <MemberSignature Language="F#" Value="static member VbTypeName : string -&gt; string" Usage="Microsoft.VisualBasic.Information.VbTypeName UrtName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">필수 요소. 공용 언어 런타임에서 사용되는 형식 이름을 포함하는 <see langword="String" /> 변수입니다.</param>
        <summary>변수의 Visual Basic 데이터 형식 이름을 포함하는 <see langword="String" /> 값을 반환합니다.</summary>
        <returns>변수의 Visual Basic 데이터 형식 이름을 포함하는 <see langword="String" /> 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `VbTypeName` 공용 언어 런타임 형식 이름에 해당 하는 Visual Basic 형식 이름을 반환 합니다. 예를 들어 있으면 `UrtName` "Int32" 또는 "System.Int32" 포함 `VbTypeName` "Integer"를 반환 합니다. 하는 경우 `VbTypeName` 의 값을 인식 하지 못합니다 `UrtName`를 반환 합니다 `Nothing` (문자열이 아닌 아무것도).  
  
 에 형식 이름을 `UrtName` 에서 가져올 수 있습니다 다양 한 원본의 예를 들어 합니다 <xref:System.Reflection.MemberInfo.Name%2A> 속성에는 <xref:System.Reflection.MemberInfo> 배열을 <xref:System.Type> 클래스.  
  
   
  
## Examples  
 다음 예제에서는 `VbTypeName` 함수를 여러 변수에 대 한 데이터 형식 이름을 반환 합니다.  
  
 [!code-vb[VbVbalrFunctions#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>