<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="55b8e873a26c9d2e0bbbdfd649eab50236389e84" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65156338" /></Metadata><TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <TypeSignature Language="F#" Value="type Strings = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
    <AssemblyVersion>10.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see langword="Strings" /> 모듈 문자열 작업을 수행 하는 데 사용 되는 프로시저가 포함 되어 있습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 모듈에는 Visual Basic 언어 키워드 및 문자열을 조작 하는 런타임 라이브러리 멤버를 지원 합니다.  
  
   
  
## Examples  
 다음 예제에서는 해당 공백이 있는 문자열을 분할 하는 방법에 설명 합니다.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">키워드(Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Visual Basic 런타임 라이브러리 멤버</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>문자에 해당하는 문자 코드를 나타내는 정수 값을 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberSignature Language="F#" Value="static member Asc : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="String">필수 요소. 유효한 <see langword="Char" /> 또는 <see langword="String" /> 식입니다. 하는 경우 <paramref name="String" /> 되는 <see langword="String" /> 식 문자열의 첫 문자만 입력에 사용 됩니다. 하는 경우 <paramref name="String" /> 됩니다 <see langword="Nothing" /> 문자가 없는 또는 <see cref="T:System.ArgumentException" /> 오류가 발생 합니다.</param>
        <summary>문자에 해당하는 문자 코드를 나타내는 정수 값을 반환합니다.</summary>
        <returns>문자에 해당하는 문자 코드입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 반환 된 *코드 포인트*, 또는 문자 코드를 입력된 문자에 대 한 합니다. 0에서 255까지 싱글바이트 문자 집합 (SBCS) 값에는-32768에서 32767 더블 바이트 문자 집합 (DBCS) 값에 대 한 수 있습니다.  
  
 `AscW` 입력된 문자에 대 한 유니코드 코드 포인트를 반환합니다. 0에서 65535 까지의 수 있습니다. 반환된 값은 현재 스레드 문화권 및 코드 페이지 설정을 무관 합니다.  
  
> [!NOTE]
>  `AscB` 이전 버전의 Visual Basic의 기능을 문자가 아닌 바이트, 코드를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 모든 Visual Basic 2005 문자열은 유니코드, 및 `AscB` 는 지원 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 `Asc` 반환할 함수 `Integer` 각 문자열의 첫 번째 문자에 해당 하는 코드를 문자입니다.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">함수(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member Asc : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Asc String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="String">필수. 유효한 <see langword="Char" /> 또는 <see langword="String" /> 식입니다. 하는 경우 <paramref name="String" /> 되는 <see langword="String" /> 식 문자열의 첫 문자만 입력에 사용 됩니다. 하는 경우 <paramref name="String" /> 됩니다 <see langword="Nothing" /> 문자가 없는 또는 <see cref="T:System.ArgumentException" /> 오류가 발생 합니다.</param>
        <summary>문자에 해당하는 문자 코드를 나타내는 정수 값을 반환합니다.</summary>
        <returns>문자에 해당하는 문자 코드입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 반환 된 *코드 포인트*, 또는 문자 코드를 입력된 문자에 대 한 합니다. 0에서 255까지 싱글바이트 문자 집합 (SBCS) 값에는-32768에서 32767 더블 바이트 문자 집합 (DBCS) 값에 대 한 수 있습니다.  
  
 `AscW` 입력된 문자에 대 한 유니코드 코드 포인트를 반환합니다. 0에서 65535 까지의 수 있습니다. 반환된 값은 현재 스레드 문화권 및 코드 페이지 설정을 무관 합니다.  
  
> [!NOTE]
>  `AscB` 이전 버전의 Visual Basic의 기능을 문자가 아닌 바이트, 코드를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 모든 Visual Basic 2005 문자열은 유니코드, 및 `AscB` 는 지원 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 `Asc` 반환할 함수 `Integer` 각 문자열의 첫 번째 문자에 해당 하는 코드를 문자입니다.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">함수(Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>문자에 해당하는 문자 코드를 나타내는 정수 값을 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberSignature Language="F#" Value="static member AscW : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">필수 요소. 유효한 <see langword="Char" /> 또는 <see langword="String" /> 식입니다. 하는 경우 <paramref name="String" /> 되는 <see langword="String" /> 식 문자열의 첫 문자만 입력에 사용 됩니다. 하는 경우 <paramref name="String" /> 됩니다 <see langword="Nothing" /> 문자가 없는 또는 <see cref="T:System.ArgumentException" /> 오류가 발생 합니다.</param>
        <summary>문자에 해당하는 문자 코드를 나타내는 정수 값을 반환합니다.</summary>
        <returns>문자에 해당하는 문자 코드입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 반환 된 *코드 포인트*, 또는 문자 코드를 입력된 문자에 대 한 합니다. 0에서 255까지 싱글바이트 문자 집합 (SBCS) 값에는-32768에서 32767 더블 바이트 문자 집합 (DBCS) 값에 대 한 수 있습니다.  
  
 `AscW` 입력된 문자에 대 한 유니코드 코드 포인트를 반환합니다. 0에서 65535 까지의 수 있습니다. 반환된 값은 현재 스레드 문화권 및 코드 페이지 설정을 무관 합니다.  
  
> [!NOTE]
>  `AscB` 이전 버전의 Visual Basic의 기능을 문자가 아닌 바이트, 코드를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 모든 Visual Basic 2005 문자열은 유니코드, 및 `AscB` 는 지원 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 `Asc` 반환할 함수 `Integer` 각 문자열의 첫 번째 문자에 해당 하는 코드를 문자입니다.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">함수(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberSignature Language="F#" Value="static member AscW : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.AscW String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">필수. 유효한 <see langword="Char" /> 또는 <see langword="String" /> 식입니다. 하는 경우 <paramref name="String" /> 되는 <see langword="String" /> 식 문자열의 첫 문자만 입력에 사용 됩니다. 하는 경우 <paramref name="String" /> 됩니다 <see langword="Nothing" /> 문자가 없는 또는 <see cref="T:System.ArgumentException" /> 오류가 발생 합니다.</param>
        <summary>문자에 해당하는 문자 코드를 나타내는 정수 값을 반환합니다.</summary>
        <returns>문자에 해당하는 문자 코드입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` 반환 된 *코드 포인트*, 또는 문자 코드를 입력된 문자에 대 한 합니다. 0에서 255까지 싱글바이트 문자 집합 (SBCS) 값에는-32768에서 32767 더블 바이트 문자 집합 (DBCS) 값에 대 한 수 있습니다.  
  
 `AscW` 입력된 문자에 대 한 유니코드 코드 포인트를 반환합니다. 0에서 65535 까지의 수 있습니다. 반환된 값은 현재 스레드 문화권 및 코드 페이지 설정을 무관 합니다.  
  
> [!NOTE]
>  `AscB` 이전 버전의 Visual Basic의 기능을 문자가 아닌 바이트, 코드를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 모든 Visual Basic 2005 문자열은 유니코드, 및 `AscB` 는 지원 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 `Asc` 반환할 함수 `Integer` 각 문자열의 첫 번째 문자에 해당 하는 코드를 문자입니다.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/index.md">함수(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberSignature Language="F#" Value="static member Chr : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.Chr CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="CharCode">필수. 문자에 대한 <c>코드 포인트</c> 또는 문자 코드를 나타내는 <see langword="Integer" /> 식입니다.</param>
        <summary>지정 된 문자 코드와 연관 된 문자를 반환 합니다.</summary>
        <returns>지정한 문자 코드와 연관된 문자입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CharCode`에 대해 허용되는 비대칭 범위는 `Short` 및 `Integer` 사이의 스토리지 차이를 보완합니다. 예를 들어-29183은는 `Short` 36353 이지만 `Integer`합니다. 이 Visual Basic 6.0과 호환성을 편리 하 게 합니다.  
  
 `Chr` 사용 하는 <xref:System.Text.Encoding> 클래스는 <xref:System.Text?displayProperty=nameWithType> 싱글바이트 문자 집합 (SBCS) 나 더블 바이트 문자를 현재 스레드에서 사용 하는지 확인 하려면 네임 스페이스 설정 (DBCS). 그런 다음 `CharCode` 를 코드로 적절 한 집합을 지정 합니다. 범위는 0에서 255까지 SBCS 문자의-32768 ~ 65535 DBCS 문자를 수 있습니다.  
  
 반환된 된 값에 포함 된 현재 스레드에 대 한 코드 페이지에 따라 달라 집니다를 <xref:System.Globalization.TextInfo.ANSICodePage%2A> 의 속성을 <xref:System.Globalization.TextInfo> 클래스는 <xref:System.Globalization> 네임 스페이스. 가져올 수 있습니다 <xref:System.Globalization.TextInfo.ANSICodePage%2A> 를 지정 하 여 `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`입니다.  
  
 `ChrW` `CharCode` 유니코드 코드 포인트입니다. 범위는 현재 스레드 문화권 및 코드 페이지 설정을 무관 합니다. 값-1은-32768에서 32768 +65535 값과 동일 하 게 처리 합니다.  
  
 0에서 31 까지의 숫자 인쇄할 수 없는 표준 ASCII 코드와 동일합니다. 예를 들어 `Chr(10)` 줄 바꿈 문자를 반환 합니다.  
  
> [!NOTE]
>  `ChrB` 이전 버전의 Visual Basic 함수는 단일 바이트를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. Visual Basic 및.NET Framework에서 모든 문자열은 유니코드, 및 `ChrB` 는 지원 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 `Chr` 함수는 지정 된 문자 코드와 연관 된 문자를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="Chr" />에 대해 <paramref name="CharCode" /> &lt; 0 또는 &gt; 255입니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberSignature Language="F#" Value="static member ChrW : int -&gt; char" Usage="Microsoft.VisualBasic.Strings.ChrW CharCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">필수. 문자에 대한 <c>코드 포인트</c> 또는 문자 코드를 나타내는 <see langword="Integer" /> 식입니다.</param>
        <summary>지정 된 문자 코드와 연관 된 문자를 반환 합니다.</summary>
        <returns>지정한 문자 코드와 연관된 문자입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `CharCode`에 대해 허용되는 비대칭 범위는 `Short` 및 `Integer` 사이의 스토리지 차이를 보완합니다. 예를 들어-29183은는 `Short` 36353 이지만 `Integer`합니다. 이 Visual Basic 6.0과 호환성을 편리 하 게 합니다.  
  
 `Chr` 사용 하는 <xref:System.Text.Encoding> 클래스는 <xref:System.Text?displayProperty=nameWithType> 싱글바이트 문자 집합 (SBCS) 나 더블 바이트 문자를 현재 스레드에서 사용 하는지 확인 하려면 네임 스페이스 설정 (DBCS). 그런 다음 `CharCode` 를 코드로 적절 한 집합을 지정 합니다. 범위는 0에서 255까지 SBCS 문자의-32768 ~ 65535 DBCS 문자를 수 있습니다.  
  
 반환된 된 값에 포함 된 현재 스레드에 대 한 코드 페이지에 따라 달라 집니다를 <xref:System.Globalization.TextInfo.ANSICodePage%2A> 의 속성을 <xref:System.Globalization.TextInfo> 클래스는 <xref:System.Globalization> 네임 스페이스. 가져올 수 있습니다 <xref:System.Globalization.TextInfo.ANSICodePage%2A> 를 지정 하 여 `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`입니다.  
  
 `ChrW` `CharCode` 유니코드 코드 포인트입니다. 범위는 현재 스레드 문화권 및 코드 페이지 설정을 무관 합니다. 값-1은-32768에서 32768 +65535 값과 동일 하 게 처리 합니다.  
  
 0에서 31 까지의 숫자 인쇄할 수 없는 표준 ASCII 코드와 동일합니다. 예를 들어 `Chr(10)` 줄 바꿈 문자를 반환 합니다.  
  
> [!NOTE]
>  `ChrB` 이전 버전의 Visual Basic 함수는 단일 바이트를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. Visual Basic 및.NET Framework에서 모든 문자열은 유니코드, 및 `ChrB` 는 지원 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 `Chr` 함수는 지정 된 문자 코드와 연관 된 문자를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="ChrW" />에 대해 <paramref name="CharCode" /> &lt; -32768 또는 &gt; 65535입니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>하위 집합을 포함 하는 0부터 시작 배열을 반환을 <see langword="String" /> 배열의 지정 된 필터 조건에 따라 합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : obj[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">필수. 검색할 문자열의 1 차원 배열입니다.</param>
        <param name="Match">필수. 검색할 문자열입니다.</param>
        <param name="Include">선택 사항입니다. <see langword="Boolean" /> 포함 하거나 제외 하는 부분 문자열을 반환할지 여부를 나타내는 값 <paramref name="Match" />합니다. 하는 경우 <paramref name="Include" /> 됩니다 <see langword="True" />의 <see langword="Filter" /> 함수를 포함 하는 배열의 하위 집합을 반환 <paramref name="Match" /> 는 부분 문자열로 합니다. 경우 <paramref name="Include" /> 됩니다 <see langword="False" />의 <see langword="Filter" /> 포함 하지 않는 배열의 하위 집합을 반환 하는 함수 <paramref name="Match" /> 는 부분 문자열로 합니다.</param>
        <param name="Compare">선택 사항입니다. 사용할 문자열 비교의 종류를 나타내는 숫자 값입니다. 값에 대해서는 "설정"을 참조하세요.</param>
        <summary>하위 집합을 포함 하는 0부터 시작 배열을 반환을 <see langword="String" /> 배열의 지정 된 필터 조건에 따라 합니다.</summary>
        <returns>지정된 필터링 기준에 따라 <see langword="String" /> 배열의 하위 집합을 포함하는 0부터 시작하는 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일치 `Match` 내의 `Source`는 `Filter` 함수는 빈 배열을 반환 합니다. 오류가 발생 하는 경우 `Source` 로 설정 된 `Nothing` 또는 1 차원 배열이 아닙니다.  
  
 반환한 배열이 `Filter` 함수는 일치 항목의 수를 포함 하는 데 충분 한 요소에만 포함 되어 있습니다.  
  
 `Compare` 인수는 다음 값을 가질 수 있습니다.  
  
|상수|설명|  
|-|-|  
|상수|설명|  
|`CompareMethod.Binary`|이진 비교를 수행합니다.|  
|`CompareMethod.Text`|텍스트 비교를 수행합니다.|  
  
   
  
## Examples  
 이 예제에서는 사용 된 `Filter` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> <see langword="Nothing" /> 또는 1 차원 배열이 아닙니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Filter : string[] * string * bool * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Filter (Source, Match, Include, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Match" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Include" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">필수. 검색할 문자열의 1 차원 배열입니다.</param>
        <param name="Match">필수. 검색할 문자열입니다.</param>
        <param name="Include">선택 사항입니다. <see langword="Boolean" /> 포함 하거나 제외 하는 부분 문자열을 반환할지 여부를 나타내는 값 <paramref name="Match" />합니다. 하는 경우 <paramref name="Include" /> 됩니다 <see langword="True" />의 <see langword="Filter" /> 함수를 포함 하는 배열의 하위 집합을 반환 <paramref name="Match" /> 는 부분 문자열로 합니다. 경우 <paramref name="Include" /> 됩니다 <see langword="False" />의 <see langword="Filter" /> 포함 하지 않는 배열의 하위 집합을 반환 하는 함수 <paramref name="Match" /> 는 부분 문자열로 합니다.</param>
        <param name="Compare">선택 사항입니다. 사용할 문자열 비교의 종류를 나타내는 숫자 값입니다. 값에 대해서는 "설정"을 참조하세요.</param>
        <summary>하위 집합을 포함 하는 0부터 시작 배열을 반환을 <see langword="String" /> 배열의 지정 된 필터 조건에 따라 합니다.</summary>
        <returns>지정된 필터링 기준에 따라 <see langword="String" /> 배열의 하위 집합을 포함하는 0부터 시작하는 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일치 `Match` 내의 `Source`는 `Filter` 함수는 빈 배열을 반환 합니다. 오류가 발생 하는 경우 `Source` 로 설정 된 `Nothing` 또는 1 차원 배열이 아닙니다.  
  
 반환한 배열이 `Filter` 함수는 일치 항목의 수를 포함 하는 데 충분 한 요소에만 포함 되어 있습니다.  
  
 `Compare` 인수는 다음 값을 가질 수 있습니다.  
  
|상수|설명|  
|-|-|  
|`CompareMethod.Binary`|이진 비교를 수행합니다.|  
|`CompareMethod.Text`|텍스트 비교를 수행합니다.|  
  
   
  
## Examples  
 이 예제에서는 사용 된 `Filter` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Source" /> <see langword="Nothing" /> 또는 1 차원 배열이 아닙니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberSignature Language="F#" Value="static member Format : obj * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Format (Expression, Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Style" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">필수. 모든 유효한 식입니다.</param>
        <param name="Style">선택 사항입니다. 유효한 명명 된 또는 사용자 정의 형식의 <see langword="String" /> 식입니다.</param>
        <summary>반환 형식에 포함 된 지침에 따라 서식이 지정 문자열로 <see langword="String" /> 식입니다.</summary>
        <returns>형식 <see langword="String" /> 식에 포함된 명령에 따라 서식이 지정된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.String.Format%2A?displayProperty=nameWithType> 메서드 유사한 기능을 제공 합니다.  
  
 지역화 되지 않은 숫자 문자열 서식을 지정 하는 경우 원하는 것을 보장 하는 사용자 정의 숫자 형식의 사용 해야 합니다.  
  
 지정 하지 않고 숫자의 형식을 지정 하려고 하면 `Style`, `Format` 비슷한 기능을 제공 하는 함수는 `Str` 국제적으로 인식 되 긴 하지만 작동 합니다. 하지만 사용 하 여 문자열로 서식이 지정 양수를 `Format` 함수는 값의 부호에 대 한 예약된 선행 공백을 포함 하지 않으면 사용 하 여 변환 된는 `Str` 함수는 선행 공백을 유지 합니다.  
  
## <a name="different-formats-for-different-numeric-values"></a>다른 숫자 값에 대 한 다양 한 형식  
 숫자에 대 한 사용자 정의 형식 식에서 세미콜론으로 구분 된 세 개의 절을 한 개 있을 수 있습니다. 경우는 `Style` 의 인수는 `Format` 함수를 포함 하는 미리 정의 된 숫자 형식 중 하나로, 하나의 절만 허용 됩니다.  
  
|사용 하는 경우|다음은 결과|  
|-|-|  
|한 개의 절만|형식 지정 식이 모든 값에 적용 됩니다.|  
|두 섹션|첫 번째 절은 양수 값 및 0; 두 번째는 음수 값에 적용 됩니다.|  
|세 섹션|첫 번째 절은 양수, 음수 값에 적용 되는 두 번째 및 세 번째 0에 적용 됩니다.|  
  
 다음 예제에서는 두 개의 섹션이 있습니다: 첫 번째 양수 값 및 0;에 대 한 형식 정의 두 번째 섹션에는 음수 값의 형식을 정의합니다. 하므로 합니다 `Style` 의 인수는 `Format` 함수는 문자열을 따옴표로 묶어야 합니다.  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 서로 아무 것도 없으면 세미콜론을 포함 하는 경우 양수 값 형식을 사용 하 여 누락 된 섹션이 인쇄 됩니다. 예를 들어, 다음 형식으로 표시 양수 및 음수 값 형식을 사용 하 여 첫 번째 섹션에서 표시 `Zero` 값이 0입니다.  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>미리 정의 된 숫자 형식  
 다음 표에서 미리 정의 된 숫자 형식 이름을 식별합니다. 이 이름을 사용할 수 있습니다 합니다 `Style` 에 대 한 인수는 `Format` 함수:  
  
|형식 이름|설명|  
|-|-|  
|`General Number`, `G`또는 `g`|없는 천 구분 기호를 사용 하 여 수를 표시합니다.<br /><br /> 예를 들어 `Format(&H3FA, "g")` 반환 `1018`합니다.|  
|`Currency`, `C`또는 `c`|적절 한; 경우 천 구분 기호를 사용 하 여 개수를 표시 소수 구분 기호 오른쪽으로 두 자릿수를 표시합니다. 출력은 시스템 로캘 설정을 기반으로 합니다.<br /><br /> 예를 들어 `Format(1234567, "c")` 반환 `$1,234,567.00`합니다.|  
|`Fixed`, `F`또는 `f`|왼쪽으로 최소 한 자릿수 및 두 자리 소수 구분 기호 오른쪽에 표시 됩니다.<br /><br /> 예를 들어 `Format(1234567, "f")` 반환 `1234567.00`합니다.|  
|`Standard`, `N`또는 `n`|소수 구분 기호 오른쪽을 천 구분 기호 왼쪽으로 최소 한 자릿수, 두 자리 수를 표시합니다.<br /><br /> 예를 들어 `Format(1234567, "n")` 반환 `1,234,567.00`합니다.|  
|`Percent`|오른쪽에 즉시 추가 하는 백분율 기호 (%)를 사용 하 여 100으로 곱한 숫자를 표시 합니다. 항상 소수 구분 기호 오른쪽으로 두 자릿수를 표시 합니다.<br /><br /> 예를 들어 `Format(0.4744, "Percent")` 반환 `47.44%`합니다.|  
|`P`또는 `p`|단일 공백으로 오른쪽에 추가 하는 백분율 기호 (%)를 사용 하 여 100을 곱하고 1000 단위 구분 기호와 함께 숫자를 표시, 항상 소수 구분 기호 오른쪽으로 두 자릿수를 표시 합니다.<br /><br /> 예를 들어 `Format(0.80345, "p")` 반환 `80.35 %`합니다.|  
|`Scientific`|두 자릿수를 제공 하는 표준 과학적 표기법을 사용 합니다.<br /><br /> 예를 들어 `Format(1234567, "Scientific")` 반환 `1.23E+06`합니다.|  
|`E`또는 `e`|유효 자릿수 6 개를 제공 하는 표준 과학적 표기법을 사용 합니다.<br /><br /> 예를 들어 `Format(1234567, "e")` 반환 `1.234567e+006`합니다.|  
|`D`또는 `d`|10 진수 (밑수 10) 형식으로 된 숫자의 값을 포함 하는 문자열로 서 수를 표시 합니다. 이 옵션은 정수 계열 형식에 대 한 지원 (`Byte`, `Short`를 `Integer`, `Long`)만 합니다.<br /><br /> 예를 들어 `Format(&H7F, "d")` 반환 `127`합니다.|  
|`X`또는 `x`|16 진수 (기 수 16) 형식의 숫자 값을 포함 하는 문자열로 서 수를 표시 합니다. 이 옵션은 정수 계열 형식에 대 한 지원 (`Byte`, `Short`를 `Integer`, `Long`)만 합니다.<br /><br /> 예를 들어 `Format(127, "x")` 반환 `7f`합니다.|  
|`Yes/No`|표시 `No` 번호가 고 그렇지 않으면 0 이면 표시 `Yes`합니다.<br /><br /> 예를 들어 `Format(0, "Yes/No")` 반환 `No`합니다.|  
|`True/False`|표시 `False` 번호가 고 그렇지 않으면 0 이면 표시 `True`합니다.<br /><br /> 예를 들어 `Format(1, "True/False")` 반환 `True`합니다.|  
|`On/Off`|표시 `Off` 번호가 고 그렇지 않으면 0 이면 표시 `On`합니다.<br /><br /> 예를 들어 `Format(1, "On/Off")` 반환 `On`합니다.|  
  
### <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Yes/No`, `True/False`, 및 `On/Off` 형식은 지원 되지 않습니다.  
  
## <a name="user-defined-numeric-formats"></a>사용자 정의 숫자 형식  
 다음 표에서 사용자 정의 숫자 형식을 만들 때 사용할 수 있는 문자를 식별 합니다. 만드는 데 사용할 수 있습니다 이러한 합니다 `Style` 에 대 한 인수는 `Format` 함수:  
  
|문자|Description|  
|-|-|  
|없음|서식 없는 번호를 표시합니다.|  
|(`0`)|숫자 자리 표시자입니다. 숫자 또는 0을 표시 합니다. 식의 형식 문자열에서 0이 나타나는 위치에 숫자가 있으면 그대로 표시 합니다. 그렇지 않으면 해당 위치에 0이 표시 됩니다.<br /><br /> 수 있으면 보다 적은 자릿수가 형식 식에 선행 또는 후행 0으로 표시에서 있는 0 (소수점 양쪽)에서. 숫자 보다 소수 구분 기호 오른쪽 자릿수가 형식 식의 소수 구분 기호 오른쪽 0 만큼 숫자가 소수 자릿수 0으로 반올림 있습니다. 있으면 보다 소수 구분 기호 왼쪽 자릿수가 형식 식의 소수 구분 기호 왼쪽 0 수정 없이 추가 자릿수가 표시 있습니다.|  
|(`#`)|숫자 자리 표시자입니다. 숫자 또는 아무 것도 표시합니다. 식 위치에 숫자가 있으면 여기서는 `#` 표시; 그렇지 않으면 해당 위치에 아무것도 표시 형식 문자열에서 문자 표시 됩니다.<br /><br /> 이 기호 비슷합니다는 `0` 경우 보다 더 적은 자릿수가 표시 되지 않습니다 선행 및 후행 0을 제외 하 고 자리 표시자 `#` 형식 식의 소수 구분 기호 양쪽 문자입니다.|  
|(`.`)|10 진수 자리 표시자입니다. 소수점 자리 표시자는 소수 구분 기호 오른쪽 및 왼쪽에 표시 되는 자릿수를 결정 합니다. 형식 지정 식이 포함 되 면 `#` 이 기호의 왼쪽에 문자; 1 소수 구분 기호로 시작 하는 보다 작은 숫자입니다. 소수 자릿수 숫자 앞에 0을 표시 하려면 소수 구분 기호 왼쪽에 첫 번째 숫자 자리 표시자로 0을 사용 합니다. 일부 로캘에서 소수 구분 기호로 쉼표를 사용 합니다. 형식이 지정 된 출력에서 소수점 자리 표시자로 사용 되는 실제 문자는 컴퓨터 시스템이 인식 하는 숫자 형식에 따라 달라 집니다. 따라서 해야 기간을 사용 하는 10 진수 자리 표시자로 형식에서 쉼표를 소수점 자리 표시자로 사용 하는 로캘에서 경우에 합니다. 서식이 지정 된 문자열은 로캘에 적합 한 형식으로 표시 됩니다.|  
|(`%`)|백분율 자리 표시자입니다. 식에 100을 곱합니다. 백분율 문자 (`%`) 형식 문자열에 표시 되는 위치에 삽입 됩니다.|  
|(`,`)|천 구분 기호입니다. 천 구분 기호는 소수 구분 기호 왼쪽 자릿수가 4 개 이상의 숫자에서 천 자리를 구분 합니다. 천 구분 기호의 표준 사용이 지정은 포함 되는 경우 숫자 자리 표시자로 둘러싸인는 천 구분 기호 (`0` 또는 `#`).<br /><br /> 바로 왼쪽 (소수 지정 여부) 소수 구분 기호 또는 가장 오른쪽에 천 구분 문자는 문자열에 "수 1,000으로 나누어 필요에 따라 반올림 합니다." 숫자 1, 000 보다 작은 있지만 크거나 500으로 표시 됩니다 `1`, 및 500으로 표시 됩니다 보다 작은 숫자 `0`합니다. 두 인접 한 천 단위 구분 기호가이 위치에 1 백만 비율과 각 추가 구분 기호에 대해 1,000 단위로 요소를 추가 합니다.<br /><br /> 소수 구분 기호 왼쪽에 즉시 이외의 위치 또는 문자열의 오른쪽에 있는 위치에서 여러 구분 기호는 천 구분 기호의 사용을 지정한 같이 간단 하 게 처리 됩니다. 일부 로캘에서 마침표는 천 구분 기호로 사용 됩니다. 형식이 지정 된 출력에서 천 구분 기호로 사용 되는 실제 문자는 컴퓨터 시스템이 인식 하는 숫자 형식에 따라 달라 집니다. 따라서 사용할지 쉼표 천 구분 기호로 사용자 정의 형식에서 로캘에서 천 구분 기호로 마침표를 사용 하는 경우에 합니다. 서식이 지정 된 문자열은 로캘에 적합 한 형식으로 표시 됩니다.<br /><br /> 예를 들어, 다음 세 가지 형식 문자열을 고려 합니다.<br /><br /> -   `"#,0."`에 사용 하 여 1000 단위 구분 기호 형식 문자열 "100000000"으로 100 백만 수를 지정 하려면.<br />-   `"#0,."`을를 사용 하 여 한 천 비율로 크기 조정 수 100 백만 문자열 "100000"으로 서식을 지정 합니다.<br />-   `"#,0,."`에 사용 하 여 1000 단위 구분 기호 및 한 천 형식을 문자열 "100000"으로 100 백만 수를 지정 하 여 크기 조정 합니다.|  
|(`:`)|시간 구분 기호입니다. 일부 로캘에서 시간 구분 기호로 다른 문자를 사용 될 수 있습니다. 시간, 분 및 초 시간 값에 형식을 지정할 때 시간 구분 기호입니다. 서식이 지정 된 출력에는 시간 구분 기호로 사용 되는 실제 문자는 시스템 설정에 따라 결정 됩니다.|  
|(`/`)|날짜 구분 기호입니다. 일부 로캘에서 날짜 구분 기호로 다른 문자를 사용 될 수 있습니다. 날짜 값에 형식을 지정할 경우 일, 월 및 연도 날짜 구분 기호를 구분 합니다. 형식이 지정 된 출력에서 날짜 구분 기호로 사용 되는 실제 문자는 시스템 설정에 따라 결정 됩니다.|  
|(`E-``E+``e-``e+`)|공학용 형식입니다. 형식 식에서 하나 이상의 숫자 자리 표시자를 포함 하는 경우 (`0` 또는 `#`)의 왼쪽 `E-`를 `E+`를 `e-`, 또는 `e+`, 수 공학용 형식으로 표시 됩니다 및 `E` 또는 `e` 수와 지 수 사이 삽입 됩니다. 왼쪽에 숫자 자리 표시자는 지 수의 자릿수를 결정합니다. 사용 하 여 `E-` 또는 `e-` 음의 지 수에 빼기 기호를 배치 합니다. 사용 하 여 `E+` 또는 `e+` 음의 지 수에 빼기 기호를 하 고 양수 지 수 옆에 있는 더하기 기호를 배치 합니다. 또한 올바른 형식을 지정 하려면이 기호의 오른쪽에 숫자 자리 표시자를 포함 해야 합니다.|  
|`-` `+` `$` ( )|리터럴 문자입니다. 이러한 문자는 서식 문자열에 입력 한 대로 정확 하 게 표시 됩니다. 외의 나열 된 다른 문자를 표시 하려면 앞에 백슬래시 (`\`) 또는 이중 따옴표로 묶습니다 ("").|  
|(`\`)|형식 문자열에서 다음 문자를 표시합니다. 리터럴 문자와 같이 특별 한 의미가 있는 문자를 표시 하려면 앞에 백슬래시 (`\`). 백슬래시 자체는 표시 되지 않습니다. 백슬래시를 사용 하 여 다음 문자를 큰따옴표로 묶는 것과 같습니다. 백슬래시를 표시 하려면 두 개의 백슬래시를 사용 하 여 (`\\`).<br /><br /> 리터럴 문자는 날짜 서식 지정 및 시간 서식 문자에는 표시할 수 없는 문자의 예 (`a`, `c`를 `d`, `h`를 `m`를 `n`, `p`를 `q`, `s`, `t`, `w`, `y`를 `/`, 및 `:`), 숫자 형식 지정 문자 (`#`를 `0`, `%`를 `E`, `e`, 쉼표 및 기간), 문자열 형식 지정 문자 (`@`를 `&`, `<`, `>`, 및 `!`).|  
|(`"``ABC``"`)|이중 따옴표 안의 문자열을 표시 합니다 (""). 코드 내에서 스타일 인수에 문자열을 포함 하려면 사용 해야 합니다 `Chr(34)` 에 텍스트를 묶으십시오 (`34` 은 따옴표 (")에 대 한 문자 코드).|  
  
### <a name="legacy-code-example"></a>레거시 코드 예제  
 다음 표에서 숫자 일부 샘플 형식 식이 포함 됩니다. (이 예제에서는 모두 시스템 로캘 설정이 영어 (미국) 임을 가정) 첫 번째 열에 대 한 형식 문자열을 포함 합니다 `Style` 의 인수는 `Format` 함수, 서식이 지정 된 데이터에 열 머리글에 지정 된 값이 있는 경우 결과 출력을 포함 하는 다른 열입니다.  
  
|형식 (`Style`)|"5" 일 경우|"-5" 형식으로 지정|"0.5" 일 경우|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>미리 정의 된 날짜/시간 형식  
 다음 표에서 미리 정의 된 날짜 및 시간 형식 이름입니다. 이 스타일 인수에 대 한 이름으로 사용할 수 있습니다는 `Format` 함수:  
  
|형식 이름|설명|  
|-|-|  
|`General Date`또는 `G`|날짜 및/또는 시간을 표시합니다. 예를 들어, `3/12/2008 11:07:31 AM`을 입력합니다. 날짜 표시는 애플리케이션의 현재 문화권 값에 따라 결정 됩니다.|  
|`Long Date`, `Medium Date`또는 `D`|현재 문화권의 긴 날짜 형식에 따라 날짜를 표시 합니다. 예를 들어, `Wednesday, March 12, 2008`을 입력합니다.|  
|`Short Date`또는 `d`|현재 문화권의 간단한 날짜 형식을 사용 하 여 날짜를 표시 합니다. 예를 들어, `3/12/2008`을 입력합니다.<br /><br /> `d` 문자 사용자 정의 날짜 형식으로 날짜를 표시 합니다.|  
|`Long Time`, `Medium Time`또는 `T`|현재 문화권의 긴 시간 형식으로 사용 하 여 시간을 표시 일반적으로 시간, 분 및 초가 포함 됩니다. 예를 들어, `11:07:31 AM`을 입력합니다.|  
|`Short Time` 또는 `t`|현재 문화권의 짧은 시간 형식을 사용 하 여 시간을 표시 합니다. 예를 들어, `11:07 AM`을 입력합니다.<br /><br /> 합니다 `t` 표시 문자 `AM` 또는 `PM` 사용자 정의 된 형식으로 12 시간제를 사용 하는 값입니다.|  
|`f`|자세한 날짜와 현재 문화권의 형식에 따라 짧은 시간을 표시합니다. 예를 들어, `Wednesday, March 12, 2008 11:07 AM`을 입력합니다.|  
|`F`|긴 날짜와 현재 문화권의 형식에 따라 긴 시간을 표시합니다. 예를 들어, `Wednesday, March 12, 2008 11:07:31 AM`을 입력합니다.|  
|`g`|간단한 날짜와 현재 문화권의 형식에 따라 짧은 시간을 표시합니다. 예를 들어, `3/12/2008 11:07 AM`을 입력합니다.|  
|`M`, `m`|월 및 날짜의 일을 표시합니다. 예를 들어, `March 12`을 입력합니다.<br /><br /> `M` 문자는 사용자 정의 날짜 형식을 월 표시입니다. `m` 문자 시간 사용자 정의 형식에서 분을 표시 합니다.|  
|`R`, `r`|에 따라 날짜를 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> 속성입니다. 예를 들어, `Wed, 12 Mar 2008 11:07:31 GMT`을 입력합니다. 형식이 지정 된 날짜의 날짜 및 시간 값을 조정 하지 않습니다. 호출 하기 전에 gmt 날짜/시간 값을 조정 해야 합니다 `Format` 함수입니다.|  
|`s`|날짜 및 시간에 정렬 가능한 인덱스 형식을 지정합니다. 예를 들어, `2008-03-12T11:07:31`을 입력합니다.<br /><br /> `s` 문자 시간 사용자 정의 형식에서 초를 표시 합니다.|  
|`u`|날짜 및 시간에 GMT 정렬 가능한 인덱스 형식을 지정합니다. 예를 들어, `2008-03-12 11:07:31Z`을 입력합니다.|  
|`U`|날짜 및 긴 날짜를 사용 하 여 시간 및 GMT 긴 시간 형식을 지정합니다. 예를 들어, `Wednesday, March 12, 2008 6:07:31 PM`을 입력합니다.|  
|`Y`, `y`|연도 및 월의 날짜 형식을 지정합니다. 예를 들어, `March, 2008`을 입력합니다.<br /><br /> 합니다 `Y` 및 `y` 문자 연도 사용자 정의 날짜 형식으로 표시 합니다.|  
  
 애플리케이션의 현재 문화권 정보에 대 한 자세한 내용은 참조 하세요. [어떻게 문화권에 영향을 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.  
  
## <a name="user-defined-datetime-formats"></a>사용자 정의 날짜/시간 형식  
 다음 표에서 사용자 정의 날짜/시간 형식을 만드는 데 사용할 수 있습니다 문자를 보여 줍니다. 이전 버전의 Visual Basic에서와 달리 이러한 형식 문자는 대/소문자 구분 합니다.  
  
|문자|설명|  
|-|-|  
|(`:`)|시간 구분 기호입니다. 일부 로캘에서 시간 구분 기호로 다른 문자를 사용 될 수 있습니다. 시간, 분 및 초 시간 값에 형식을 지정할 때 시간 구분 기호입니다. 서식이 지정 된 출력에는 시간 구분 기호로 사용 되는 실제 문자는 애플리케이션의 현재 문화권 값에 따라 결정 됩니다.|  
|(`/`)|날짜 구분 기호입니다. 일부 로캘에서 날짜 구분 기호로 다른 문자를 사용 될 수 있습니다. 날짜 값에 형식을 지정할 경우 일, 월 및 연도 날짜 구분 기호를 구분 합니다. 형식이 지정 된 출력에서 날짜 구분 기호로 사용 되는 실제 문자는 애플리케이션의 현재 문화권에 따라 결정 됩니다.|  
|(`%`)|다음 문자를 뒤에 관계 없이 단일 문자 형식으로 읽어야 나타내는 데 사용 합니다. 또한 단일 문자 형식을 사용자 정의 형식으로 읽기를 나타내는 데 합니다. 자세한 내용은 다음을 참조 하십시오.|  
|`d`|요일을 앞에 오는 0 없이 숫자로 표시 합니다 (예를 들어 `1`). 사용 하 여 `%d` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`dd`|요일을 앞에 오는 0과 함께 숫자로 표시 합니다 (예를 들어 `01`).|  
|`ddd`|요일을 약어로 표시 합니다 (예를 들어 `Sun`).|  
|`dddd`|요일을 정식 이름으로 표시 합니다 (예를 들어 `Sunday`).|  
|`M`|월을 앞에 오는 0 없이 숫자로 표시 합니다 (1 월으로 표시 되는 예를 들어 `1`). 사용 하 여 `%M` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`MM`|월을 앞에 오는 0과 함께 숫자로 표시 됩니다 (예를 들어 `01/12/01`).|  
|`MMM`|약어로 월을 표시 합니다 (예를 들어 `Jan`).|  
|`MMMM`|월을 정식 이름으로 표시 합니다 (예를 들어 `January`).|  
|`gg`|시대/연대 문자열을 표시 합니다 (예를 들어 `A.D.`).|  
|`h`|앞에 12 시간제를 사용 하 여 0 없이 숫자로 시간을 표시 합니다 (예를 들어 `1:15:15 PM`). 사용 하 여 `%h` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`hh`|앞에 오는 0 12 시간제 시계를 사용 하는 숫자로 시간을 표시 합니다 (예를 들어 `01:15:15 PM`).|  
|`H`|앞에 24 시간제를 사용 하 여 0 없이 숫자로 시간을 표시 합니다 (예를 들어 `1:15:15`). 사용 하 여 `%H` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`HH`|앞에 오는 0은 24 시간제를 사용 하 여 숫자로 시간을 표시 합니다 (예를 들어 `01:15:15`).|  
|`m`|분을 앞에 오는 0 없이 숫자로 표시 (예를 들어 `12:1:15`). 사용 하 여 `%m` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`mm`|분을 앞에 오는 0과 함께 숫자로 표시 합니다 (예를 들어 `12:01:15`).|  
|`s`|앞에 오는 0 없이 숫자로 초를 표시 합니다 (예를 들어 `12:15:5`). 사용 하 여 `%s` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`ss`|앞에 오는 0과 함께 숫자로 초를 표시 합니다 (예를 들어 `12:15:05`).|  
|`f`|소수 단위 초를 표시합니다. 예를 들어 `ff` 초의 1/100 표시 `ffff` 10000 시간 (초)를 표시 합니다. 최대 7 개를 사용할 수 있습니다 `f` 사용자 정의 형식에 대 한 기호입니다. 사용 하 여 `%f` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`t`|12 시간제 시계를 사용 하 고 대문자 표시 `A` 정오 이전의 모든 시간에 대문자 표시 `P` 하 고 정오부터 오후 11:59 까지의 모든 시간에 대 한 사용 하 여 `%t` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`tt`|12 시간제를 사용 하는 로캘에서 표시 대문자 `AM` 정오 이전의 모든 시간을 사용 하 여 대문자 표시 `PM` 하 고 정오부터 오후 11:59 까지의 모든 시간을 사용 하 여<br /><br /> 24 시간제를 사용 하는 로캘의 경우 아무 것도 표시 합니다.|  
|`y`|연도 숫자 (0-9) 앞에 오는 0 없이 표시 됩니다. 사용 하 여 `%y` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`yy`|해당 하는 경우 앞에 0 사용 하 여 숫자 형식으로 두 자리 연도 표시 합니다.|  
|`yyy`|4 자리 숫자 형식에는 연도 표시합니다.|  
|`yyyy`|4 자리 숫자 형식에는 연도 표시합니다.|  
|`z`|표준 시간대 오프셋 앞에 오는 0 없이 표시 됩니다 (예를 들어 `-8`). 사용 하 여 `%z` 사용자 정의 숫자 형식의 유일한 문자인 경우.|  
|`zz`|앞에 오는 0 사용 하 여 표준 시간대 오프셋을 표시 합니다 (예를 들어 `-08`)|  
|`zzz`|전체 표준 시간대 오프셋을 표시 합니다 (예를 들어 `-08:00`)|  
  
### <a name="legacy-code-example"></a>레거시 코드 예제  
 다음은 사용자 정의 된 날짜 및 시간 형식에 대 한 예가 `December 7, 1958, 8:50 PM, 35 seconds`:  
  
|형식|표시|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 디바이스에 대 한 최소 시간 확인 디바이스의 제조업체에서 결정 됩니다. 디바이스에 대 한 시간 해상도 충분히 정교 하지 않은 경우는 `f` 형식 문자는 디바이스에서 실행 하는 경우 0을 반환 합니다.  
  
   
  
## Examples  
 다양 한 용도 보여 주는이 예제는 `Format` 둘 다를 사용 하 여 값 형식 함수 `String` 형식 및 사용자 정의 형식입니다. 날짜 구분 기호 (`/`)을 시간 구분 기호 (`:`), 및 AM/PM 표시기 (`t` 및 `tt`), 체제에 의해 표시 된 실제 형식이 지정 된 출력 코드를 사용 하 여 로캘 설정에 따라 달라 집니다. 경우 시간 및 개발 환경에서 표시 되는 날짜, 간단한 시간 형식 및 코드 로캘의 간단한 날짜 서식을 사용 됩니다.  
  
> [!NOTE]
>  24 시간 시계를 AM/PM 표시기를 사용 하는 로캘의 (`t` 고 `tt`) 아무 것도 표시 합니다.  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatCurrency : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatCurrency (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">필수. 서식이 지정될 식입니다.</param>
        <param name="NumDigitsAfterDecimal">선택 사항입니다. 자릿수는 소수점 오른쪽에 표시 되는지 나타내는 숫자 값입니다. 기본값은 -1로, 시스템의 국가별 설정 값이 사용됨을 나타냅니다.</param>
        <param name="IncludeLeadingDigit">선택 사항입니다. <see cref="T:Microsoft.VisualBasic.TriState" /> 소수 자릿수 값에 대 한 앞에 0이 표시 되는지 여부를 나타내는 열거형입니다. 값에 대 한 "주의"를 참조 하세요.</param>
        <param name="UseParensForNegativeNumbers">선택 사항입니다. <see cref="T:Microsoft.VisualBasic.TriState" /> 음수 값 괄호로 묶을지 여부를 나타내는 열거형입니다. 값에 대 한 "주의"를 참조 하세요.</param>
        <param name="GroupDigits">선택 사항입니다. <see cref="T:Microsoft.VisualBasic.TriState" /> 컴퓨터의 국가별 설정에 지정 된 그룹 구분 기호를 사용 하 여 숫자를 그룹화할지 여부를 나타내는 열거형입니다. 값에 대 한 "주의"를 참조 하세요.</param>
        <summary>시스템 제어판에 정의 된 통화 기호를 사용 하 여 통화 값으로 형식이 지정 된 식을 반환 합니다.</summary>
        <returns>시스템 제어판에 정의된 통화 기호를 사용하여 통화 값으로 서식이 지정된 식입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하나 이상의 선택적 인수를 생략 하면 컴퓨터의 일치 하는 국가별 설정 값이 대신 사용 됩니다.  
  
 통화 값을 기준으로 통화 기호의 위치는 시스템의 국가별 설정에 따라 결정 됩니다.  
  
> [!NOTE]
>  모든 설정 정보에서 애플리케이션의 로캘을 가져옵니다. 기본적으로 제어판에 설정 된 로캘을 사용 됩니다. 그러나 변경할 수 있습니다 프로그래밍 방식으로.NET Framework에서 제공 되는 앞에 오는 0 제외 하 고 사용 하 여는 `Number` 탭 합니다.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, 및 `GroupDigits` 인수 다음 인수 열거형 값을 사용 합니다.  
  
|값|설명|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|컴퓨터의 국가별 설정|  
  
   
  
## Examples  
 다음 예제에서는 `FormatCurrency` 함수를 사용하는 방법을 보여 줍니다.  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">소수점 뒤의 자릿수로 99 보다 큽니다.</exception>
        <exception cref="T:System.InvalidCastException">형식이 숫자가 아닌 경우</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작</related>
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberSignature Language="F#" Value="static member FormatDateTime : DateTime * Microsoft.VisualBasic.DateFormat -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatDateTime (Expression, NamedFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">필수. <see langword="Date" /> 서식이 지정 될 식입니다.</param>
        <param name="NamedFormat">선택 사항입니다. 날짜/시간 형식을 나타내는 숫자 값을 사용 합니다. 생략 하면 <see langword="DateFormat.GeneralDate" /> 사용 됩니다.</param>
        <summary>날짜/시간 값을 나타내는 문자열 식을 반환 합니다.</summary>
        <returns>날짜/시간 값을 나타내는 문자열 식입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date` 기원후 날짜와 시간 정보를 항상 포함 합니다. 유형 변환 목적으로, Visual Basic은 간주 1 년 1 월 1 (1 년 1 월 1 일)에 대 한 중립 값으로 날짜 및 00시: 00 (자정)에 대 한 중립 값 이어야 합니다. 포맷 하는 경우는 `Date` 값을 날짜/시간 문자열로 `FormatDateTime` 기본값이 결과 문자열에 포함 되지 않습니다. 예를 들어 #1/1/0001 변환 하는 경우 9시 30분: 00 결과 문자열에 #은 "9시 30분: 00 AM"; 날짜 정보가 표시 되지 않습니다. 그러나 날짜 정보는 여전히 원래 `Date` 값과 같은 함수를 사용 하 여 복구할 수 있습니다 `DatePart`합니다.  
  
> [!NOTE]
>  전달 하는 경우는 `Expression` 인수를 `String` 리터럴 `FormatDateTime` 에 따라 해석는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 애플리케이션의 설정 합니다. 그러나로 전달 하는 경우는 `Date` 리터럴 형식 #mm/dd를 사용 하 여/yyyy # 때문 `FormatDateTime` 항상 해석를 `Date` 영어 (미국) 문화권에 따라 리터럴. 되기 때문에, 애플리케이션을 개발 및 사용 하 여 코딩 하는 경우 `Date` 하나에서 리터럴 문화권 되지만 다른 문화권을 포함 하는 플랫폼에서 실행할를 `Date` 리터럴 수 올바로 구문 분석 되지 않습니다.  
  
 `NamedFormat` 인수에는 다음 설정이 있습니다.  
  
|상수|설명|  
|-|-|  
|`DateFormat.GeneralDate`|날짜 및/또는 시간을 표시 합니다. 날짜 부분을 간단한 날짜로 표시 합니다. 시간 부분이 없는 경우 자세한 시간 형식으로 표시 합니다. 있는 경우 둘 다 표시 합니다.|  
|`DateFormat.LongDate`|컴퓨터의 국가별 설정에 지정 된 자세한 날짜 형식을 사용 하 여 날짜를 표시 합니다.|  
|`DateFormat.ShortDate`|컴퓨터의 국가별 설정에 지정 된 간단한 날짜 형식을 사용 하 여 날짜를 표시 합니다.|  
|`DateFormat.LongTime`|컴퓨터의 국가별 설정에 지정 된 시간 형식을 사용 하 여 시간을 표시 합니다.|  
|`DateFormat.ShortTime`|24 시간 형식 (hh: mm)를 사용 하는 시간을 표시 합니다.|  
  
   
  
## Examples  
 이 예제에서는 사용 된 `FormatDateTime` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NamedFormat" /> 설정이 잘못 되었습니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatNumber : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatNumber (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">필수. 서식이 지정될 식입니다.</param>
        <param name="NumDigitsAfterDecimal">선택 사항입니다. 자릿수는 소수점 오른쪽에 표시 되는지 나타내는 숫자 값입니다. 기본값은 -1로, 시스템의 국가별 설정 값이 사용됨을 나타냅니다.</param>
        <param name="IncludeLeadingDigit">선택 사항입니다. <see cref="T:Microsoft.VisualBasic.TriState" /> 선행 0은 소수 자릿수 값에 대 한 표시 여부를 나타내는 상수입니다. 값에 대해서는 "설정"을 참조하세요.</param>
        <param name="UseParensForNegativeNumbers">선택 사항입니다. <see cref="T:Microsoft.VisualBasic.TriState" /> 음수 값 괄호로 묶을지 여부를 나타내는 상수입니다. 값에 대해서는 "설정"을 참조하세요.</param>
        <param name="GroupDigits">선택 사항입니다. 로캘 설정에 지정된 그룹 구분 기호를 사용하여 숫자를 그룹화할지 여부를 나타내는 <see cref="T:Microsoft.VisualBasic.TriState" /> 상수입니다. 값에 대해서는 "설정"을 참조하세요.</param>
        <summary>숫자로 서식이 지정 된 식을 반환 합니다.</summary>
        <returns>숫자로 서식이 지정된 식입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하나 이상의 선택적 인수가 생략 되 면 생략 된 인수에 대 한 값을 로캘 설정에 따라 제공 됩니다.  
  
> [!NOTE]
>  모든 설정 정보에서 애플리케이션의 로캘을 가져옵니다. 기본적으로 제어판에 설정 된 로캘을 사용 됩니다. 그러나 이렇게 할 경우.NET Framework를 사용 하 여 프로그래밍 방식으로 변경할 수 있습니다 것.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, 및 `GroupDigits` 인수에는 다음 설정이 있습니다.  
  
|상수|설명|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|컴퓨터의 국가별 설정|  
  
   
  
## Examples  
 이 예제에서는 `FormatNumber` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">형식이 숫자가 아닌 경우</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberSignature Language="F#" Value="static member FormatPercent : obj * int * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState * Microsoft.VisualBasic.TriState -&gt; string" Usage="Microsoft.VisualBasic.Strings.FormatPercent (Expression, NumDigitsAfterDecimal, IncludeLeadingDigit, UseParensForNegativeNumbers, GroupDigits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">필수. 서식이 지정될 식입니다.</param>
        <param name="NumDigitsAfterDecimal">선택 사항입니다. 소숫점 오른쪽에 표시할 자릿수를 나타내는 숫자 값입니다. 기본값은 -1로, 로캘 설정이 사용됨을 나타냅니다.</param>
        <param name="IncludeLeadingDigit">선택 사항입니다. 소숫점 이하 값에 대해 선행 0을 표시할지 여부를 나타내는 <see cref="T:Microsoft.VisualBasic.TriState" /> 상수입니다. 값에 대해서는 "설정"을 참조하세요.</param>
        <param name="UseParensForNegativeNumbers">선택 사항입니다. 음수 값을 괄호로 묶을지 여부를 나타내는 <see cref="T:Microsoft.VisualBasic.TriState" /> 상수입니다. 값에 대해서는 "설정"을 참조하세요.</param>
        <param name="GroupDigits">선택 사항입니다. 로캘 설정에 지정된 그룹 구분 기호를 사용하여 숫자를 그룹화할지 여부를 나타내는 <see cref="T:Microsoft.VisualBasic.TriState" /> 상수입니다. 값에 대해서는 "설정"을 참조하세요.</param>
        <summary>백분율로 서식이 지정된 식(100을 곱함)을 % 문자를 붙여 반환합니다.</summary>
        <returns>% 문자를 붙여 백분율로 서식이 지정된 식(100을 곱함)입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하나 이상의 선택적 인수를 생략 하면 값 생략 된 인수에 대 한 로캘 설정에 따라 제공 됩니다.  
  
> [!NOTE]
>  모든 설정 정보에서 애플리케이션의 로캘을 가져옵니다. 기본적으로 제어판에 설정 된 로캘을 사용 됩니다. 그러나 이렇게 할 경우.NET Framework를 사용 하 여 프로그래밍 방식으로 변경할 수 있습니다 것.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, 및 `GroupDigits` 인수에는 다음 설정이 있습니다.  
  
|상수|설명|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|컴퓨터의 국가별 설정|  
  
   
  
## Examples  
 이 예제에서는 사용 된 `FormatPercent` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">형식이 숫자가 아닌 경우</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberSignature Language="F#" Value="static member GetChar : string * int -&gt; char" Usage="Microsoft.VisualBasic.Strings.GetChar (str, Index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Index" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">필수. 모든 유효한 <see langword="String" /> 식입니다.</param>
        <param name="Index">필수. <see langword="Integer" /> 식입니다. 문자의 인덱스 (1부터 시작) <paramref name="str" /> 반환할 합니다.</param>
        <summary>반환 된 <see langword="Char" /> 제공된 된 문자열의 지정된 된 인덱스에서 문자를 나타내는 값입니다.</summary>
        <returns><see langword="Char" /> 제공된 된 문자열의 지정된 된 인덱스에서 해당 문자를 나타내는 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하는 경우 `Index` 가 1 보다 작거나 마지막 문자의 인덱스 보다 큰 `str`, `ArgumentException` throw 됩니다.  
  
   
  
## Examples  
 사용 하는 방법을 보여 주는이 예제는 `GetChar` 함수에서 지정된 된 인덱스에서 문자를 반환 하는 `String`합니다.  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="str" />은 <see langword="Nothing" />, <paramref name="Index" /> &lt; 1이거나 <paramref name="Index" />는 <paramref name="str" />의 마지막 문자의 인덱스보다 큽니다.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>한 문자열 안에 다른 문자열이 처음 나타나는 시작 위치를 지정 하는 정수를 반환 합니다.  정수는 일치 하는 경우 1부터 시작 인덱스입니다.  일치 하는 항목이 있으면 함수는 0을 반환 합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStr : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">필수. <see langword="String" /> 검색 중인 식입니다.</param>
        <param name="String2">필수. <see langword="String" /> 검색 식입니다.</param>
        <param name="Compare">선택 사항입니다. 문자열 비교의 형식을 지정합니다. 하는 경우 <paramref name="Compare" /> 를 생략 하면는 <see langword="Option Compare" /> 설정은 비교의 형식을 결정 합니다.</param>
        <summary>한 문자열 안에 다른 문자열이 처음 나타나는 시작 위치를 지정 하는 정수를 반환 합니다.</summary>
        <returns><list type="table">
            <item>
              <term> 조건 
 </term>
              <description> Instr 함수의 반환 값 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> 길이가 0 또는 <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> 길이가 0 또는 <see langword="Nothing" /></term>
              <description> 첫 번째 문자 위치를 기본값으로 사용 하는 검색의 시작 위치입니다.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> 찾을 수 없습니다. 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> 에 있습니다 <paramref name="String1" /></term>
              <description> 일치 시작 되는 위치 
 </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 `InStr` 함수 문자열 구문 분석 하는 경우 사용 됩니다.  
  
> [!NOTE]
>  `InStrB` 이전 버전의 Visual Basic 함수는 문자 위치가 아닌 바이트의 숫자를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 모든 Visual Basic 2005 문자열은 유니코드, 및 `InStrB` 는 지원 되지 않습니다.  
  
 `Compare` 인수 설정은 다음과 같습니다.  
  
|상수|값|설명|  
|-|-|-|  
|`Binary`|0|이진 비교를 수행합니다.|  
|`Text`|1|텍스트 비교를 수행합니다.|  
  
   
  
## Examples  
 이 예제에서는 `InStr` 함수 내에서 다른 어떤 문자열의 첫 번째 발생 위치를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic의 문자열</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic의 문자열 소개</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Option Compare 문</related>
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member InStr : int * string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStr (Start, String1, String2, Compare)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public static int InStr (int StartPos, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 InStr(int32 StartPos, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" FrameworkAlternate="netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (StartPos As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" FrameworkAlternate="netcore-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="StartPos" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="String1" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="String2" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">선택 사항입니다. 각 검색의 시작 위치를 설정 하는 숫자 식입니다. 생략 하면 첫 번째 문자 위치에서 검색이 시작 됩니다. 시작 인덱스는 1부터 시작 합니다.</param>
        <param name="StartPos">To be added.</param>
        <param name="String1">필수. <see langword="String" /> 검색 중인 식입니다.</param>
        <param name="String2">필수. <see langword="String" /> 검색 식입니다.</param>
        <param name="Compare">선택 사항입니다. 문자열 비교의 형식을 지정합니다. 하는 경우 <paramref name="Compare" /> 를 생략 하면는 <see langword="Option Compare" /> 설정은 비교의 형식을 결정 합니다.</param>
        <summary>한 문자열 안에 다른 문자열이 처음 나타나는 시작 위치를 지정 하는 정수를 반환 합니다.</summary>
        <returns><list type="table">
            <item>
              <term> 조건 
 </term>
              <description> Instr 함수의 반환 값 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" /> 길이가 0 또는 <see langword="Nothing" /></term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> 길이가 0 또는 <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> 찾을 수 없습니다. 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> 에 있습니다 <paramref name="String1" /></term>
              <description> 일치 시작 되는 위치 
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> &gt;<paramref name="String1" />의 길이</term>
              <description> 0 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 `InStr` 함수 문자열 구문 분석 하는 경우 사용 됩니다.  
  
> [!NOTE]
>  `InStrB` 이전 버전의 Visual Basic 함수는 문자 위치가 아닌 바이트의 숫자를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 모든 Visual Basic 2005 문자열은 유니코드, 및 `InStrB` 는 지원 되지 않습니다.  
  
 `Compare` 인수 설정은 다음과 같습니다.  
  
|상수|값|설명|  
|-|-|-|  
|`Binary`|0|이진 비교를 수행합니다.|  
|`Text`|1|텍스트 비교를 수행합니다.|  
  
   
  
## Examples  
 이 예제에서는 `InStr` 함수 내에서 다른 어떤 문자열의 첫 번째 발생 위치를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic의 문자열</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic의 문자열 소개</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/option-compare-statement.md">Option Compare 문</related>
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member InStrRev : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.InStrRev (StringCheck, StringMatch, Start, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="StringMatch" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">필수. 검색 중인 문자열 식입니다.</param>
        <param name="StringMatch">필수. 검색 중인 문자열 식입니다.</param>
        <param name="Start">선택 사항입니다. 문자열의 왼쪽에서 시작 하 여 각 검색에 대 한 1부터 시작 위치를 설정 하는 숫자 식입니다. <paramref name="Start" />가 생략되면 -1이 사용됩니다. 이것은 마지막 문자에서 검색이 시작됨을 의미합니다. 오른쪽에서 왼쪽으로 검색이 계속 됩니다.</param>
        <param name="Compare">선택 사항입니다. 부분 문자열을 평가할 때 사용할 비교의 종류를 나타내는 숫자 값입니다. 생략 하면 이진 비교가 수행 됩니다. 값 설정을 참조 하십시오.</param>
        <summary>다른 문자열의 오른쪽에서 시작에서 한 문자열의 첫 번째 발생 위치를 반환 합니다.</summary>
        <returns><list type="table">
            <item>
              <term> 조건 
 </term>
              <description> 반환 값 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" /> 길이가 0 인 경우 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> 길이가 0 인 경우 
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> 찾을 수 없습니다. 
 </term>
              <description> 0 
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> 에 있습니다 <paramref name="StringCheck" /></term>
              <description> 첫 번째 일치 항목이 문자열의 오른쪽에 있는 시작 위치입니다.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> 길이 보다 크면 <paramref name="StringMatch" /></term>
              <description> 0 
 </description>
            </item>
          </list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 구문에 대 한 합니다 `InStrRev` 함수에 대 한 구문과 동일 하지는 `InStr` 함수입니다.  
  
 `Compare` 인수는 다음 값을 가질 수 있습니다.  
  
|상수|설명|  
|-|-|  
|`Binary`|이진 비교를 수행합니다.|  
|`Text`|텍스트 비교를 수행합니다.|  
  
   
  
## Examples  
 이 예제에서는 사용 된 `InStrRev` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> = 0 또는 <paramref name="Start" /> &lt; -1.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic의 문자열</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic의 문자열 소개</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>여러 배열에 포함 된 문자열을 조인 하 여 만든 문자열을 반환 합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : obj[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="SourceArray">필수. 조인할 부분 문자열이 포함 된 1 차원 배열입니다.</param>
        <param name="Delimiter">선택 사항입니다. 반환된 된 문자열의 부분 문자열을 구분 하는 데 문자열입니다. 생략 하면 공백 문자 ("")는 데 사용 됩니다. 하는 경우 <paramref name="Delimiter" /> 길이가 0 인 문자열 ("") 또는 <see langword="Nothing" />, 목록의 모든 항목이 구분 기호 없이 연결 됩니다.</param>
        <summary>여러 배열에 포함 된 문자열을 조인 하 여 만든 문자열을 반환 합니다.</summary>
        <returns>배열에 포함된 여러 부분 문자열을 조인하여 작성되는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사이 패리티가 합니다 `Join` 및 `Split` 함수입니다. `Join` 함수 문자열 배열을 사용 하 고 조인 구분 기호 문자열을 사용 하 여 단일 문자열로 반환 합니다. `Split` 함수는 문자열을 구분 기호로 구분 하는 문자열의 배열을 반환 합니다. 그러나 주요 차이점은는 `Join` 모든 구분 기호 문자열을 사용 하 여 문자열을 연결할 수 `Split` 만 단일 문자 구분 기호를 사용 하 여 문자열을 구분할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법에 설명 합니다 `Join` 함수를 여러 문자열에서 목록을 만듭니다.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> 가 1 차원이 아닙니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberSignature Language="F#" Value="static member Join : string[] * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Join (SourceArray, Delimiter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="SourceArray">필수. 조인할 부분 문자열이 포함 된 1 차원 배열입니다.</param>
        <param name="Delimiter">선택 사항입니다. 반환된 된 문자열의 부분 문자열을 구분 하는 데 문자열입니다. 생략 하면 공백 문자 ("")는 데 사용 됩니다. 하는 경우 <paramref name="Delimiter" /> 길이가 0 인 문자열 ("") 또는 <see langword="Nothing" />, 목록의 모든 항목이 구분 기호 없이 연결 됩니다.</param>
        <summary>여러 배열에 포함 된 문자열을 조인 하 여 만든 문자열을 반환 합니다.</summary>
        <returns>배열에 포함된 여러 부분 문자열을 조인하여 작성되는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사이 패리티가 합니다 `Join` 및 `Split` 함수입니다. `Join` 함수 문자열 배열을 사용 하 고 조인 구분 기호 문자열을 사용 하 여 단일 문자열로 반환 합니다. `Split` 함수는 문자열을 구분 기호로 구분 하는 문자열의 배열을 반환 합니다. 그러나 주요 차이점은는 `Join` 모든 구분 기호 문자열을 사용 하 여 문자열을 연결할 수 `Split` 만 단일 문자 구분 기호를 사용 하 여 문자열을 구분할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법에 설명 합니다 `Join` 함수를 여러 문자열에서 목록을 만듭니다.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="SourceArray" /> 가 1 차원이 아닙니다.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>소문자로 변환 된 문자열 또는 문자를 반환 합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberSignature Language="F#" Value="static member LCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Value">필수. 유효한 <see langword="String" /> 또는 <see langword="Char" /> 식입니다.</param>
        <summary>소문자로 변환 된 문자열 또는 문자를 반환 합니다.</summary>
        <returns>소문자로 변환된 문자열 또는 문자입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대 문자만 변환할지를 소문자로 모든 소문자 및 글자가 아닌 문자는 변경 되지 않습니다.  
  
 이 함수는 대/소문자 변경은 애플리케이션은 사용 되는 로캘에 대 한 적절 한 문자열을 조작 하는 경우 애플리케이션의 culture 정보를 사용 합니다.  
  
> [!IMPORTANT]
>  애플리케이션에서 비교 또는 대/소문자 변경 작업의 결과에 따라 보안 결정 다음 작업을 사용 해야 합니다 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드를 통과 <xref:System.StringComparison.Ordinal> 또는 <xref:System.StringComparison.OrdinalIgnoreCase> 에 대 한는 `comparisonType` 인수입니다. 자세한 내용은 [어떻게 문화권에 영향을 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.  
  
   
  
## Examples  
 이 예제에서는 `LCase` 문자열의 소문자 버전을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic의 문자열</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic의 문자열 소개</related>
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member LCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Value">필수. 유효한 <see langword="String" /> 또는 <see langword="Char" /> 식입니다.</param>
        <summary>소문자로 변환 된 문자열 또는 문자를 반환 합니다.</summary>
        <returns>소문자로 변환된 문자열 또는 문자입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대 문자만 변환할지를 소문자로 모든 소문자 및 글자가 아닌 문자는 변경 되지 않습니다.  
  
 이 함수는 대/소문자 변경은 애플리케이션은 사용 되는 로캘에 대 한 적절 한 문자열을 조작 하는 경우 애플리케이션의 culture 정보를 사용 합니다.  
  
> [!IMPORTANT]
>  애플리케이션에서 비교 또는 대/소문자 변경 작업의 결과에 따라 보안 결정 다음 작업을 사용 해야 합니다 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드를 통과 <xref:System.StringComparison.Ordinal> 또는 <xref:System.StringComparison.OrdinalIgnoreCase> 에 대 한는 `comparisonType` 인수입니다. 자세한 내용은 [어떻게 문화권에 영향을 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.  
  
   
  
## Examples  
 이 예제에서는 `LCase` 문자열의 소문자 버전을 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic의 문자열</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic의 문자열 소개</related>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Left : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Left (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">필수. <see langword="String" /> 가장 왼쪽 문자를 반환 되는 식입니다.</param>
        <param name="Length">필수. <see langword="Integer" /> 식입니다. 반환할 문자의 수를 나타내는 숫자 식입니다. 0 이면 길이가 0 인 문자열 ("")이 반환 됩니다. 문자 수가 크거나 <paramref name="str" />, 전체 문자열이 반환 됩니다.</param>
        <summary>지정 된 개수의 문자열의 왼쪽에서 문자를 포함 하는 문자열을 반환 합니다.</summary>
        <returns>문자열의 왼쪽에서 지정한 수의 문자를 포함하는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 있는 문자의 수를 확인 하려면 `str`를 사용 하 여는 `Len` 함수입니다. 에 있는 다른 클래스 또는 Windows Forms 애플리케이션을 사용 하는 경우는 `Left` 속성을 정규화 해야 사용 하 여 함수 `Microsoft.VisualBasic.Left`합니다.  
  
> [!NOTE]
>  `LeftB` 이전 버전의 Visual Basic 함수 문자가 아닌 바이트 문자열을 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LeftB` 는 지원 되지 않습니다.  
  
   
  
## Examples  
 이 예제에서는 사용 합니다 `Left` 의 부분 문자열을 반환 하는 함수를 지정 `String`. 가 있는 클래스에서를 `Left` 속성인 해야 정규화는 `Left` 함수.  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberSignature Language="F#" Value="static member Len : bool -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">유효한 <see langword="String" /> 식 또는 변수 이름입니다. 경우 <paramref name="Expression" /> 형식입니다 <see langword="Object" />, <see langword="Len" /> 함수에서 파일에 기록 될 크기를 반환 합니다 <see langword="FilePut" /> 함수.</param>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
        <returns>문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다. 경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다. 합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다. 경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`. 매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : byte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">유효한 <see langword="String" /> 식 또는 변수 이름입니다. 경우 <paramref name="Expression" /> 형식입니다 <see langword="Object" />, <see langword="Len" /> 함수에서 파일에 기록 될 크기를 반환 합니다 <see langword="FilePut" /> 함수.</param>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
        <returns>문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다. 경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다. 합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다. 경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`. 매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberSignature Language="F#" Value="static member Len : char -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">유효한 <see langword="String" /> 식 또는 변수 이름입니다. 경우 <paramref name="Expression" /> 형식입니다 <see langword="Object" />, <see langword="Len" /> 함수에서 파일에 기록 될 크기를 반환 합니다 <see langword="FilePut" /> 함수.</param>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
        <returns>문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다. 경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다. 합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다. 경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`. 매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberSignature Language="F#" Value="static member Len : DateTime -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">유효한 <see langword="String" /> 식 또는 변수 이름입니다. 경우 <paramref name="Expression" /> 형식입니다 <see langword="Object" />, <see langword="Len" /> 함수에서 파일에 기록 될 크기를 반환 합니다 <see langword="FilePut" /> 함수.</param>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
        <returns>문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다. 경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다. 합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다. 경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`. 매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberSignature Language="F#" Value="static member Len : decimal -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">유효한 <see langword="String" /> 식 또는 변수 이름입니다. 경우 <paramref name="Expression" /> 형식입니다 <see langword="Object" />, <see langword="Len" /> 함수에서 파일에 기록 될 크기를 반환 합니다 <see langword="FilePut" /> 함수.</param>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
        <returns>문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다. 경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다. 합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다. 경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`. 매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberSignature Language="F#" Value="static member Len : double -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">유효한 <see langword="String" /> 식 또는 변수 이름입니다. 경우 <paramref name="Expression" /> 형식입니다 <see langword="Object" />, <see langword="Len" /> 함수에서 파일에 기록 될 크기를 반환 합니다 <see langword="FilePut" /> 함수.</param>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
        <returns>문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다. 경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다. 합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다. 경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`. 매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">유효한 <see langword="String" /> 식 또는 변수 이름입니다. 경우 <paramref name="Expression" /> 형식입니다 <see langword="Object" />, <see langword="Len" /> 함수에서 파일에 기록 될 크기를 반환 합니다 <see langword="FilePut" /> 함수.</param>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
        <returns>문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다. 경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다. 합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다. 경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`. 매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">유효한 <see langword="String" /> 식 또는 변수 이름입니다. 경우 <paramref name="Expression" /> 형식입니다 <see langword="Object" />, <see langword="Len" /> 함수에서 파일에 기록 될 크기를 반환 합니다 <see langword="FilePut" /> 함수.</param>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
        <returns>문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다. 경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다. 합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다. 경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`. 매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberSignature Language="F#" Value="static member Len : int64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">유효한 <see langword="String" /> 식 또는 변수 이름입니다. 경우 <paramref name="Expression" /> 형식입니다 <see langword="Object" />, <see langword="Len" /> 함수에서 파일에 기록 될 크기를 반환 합니다 <see langword="FilePut" /> 함수.</param>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
        <returns>문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다. 경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다. 합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다. 경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`. 매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : obj -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">유효한 <see langword="String" /> 식 또는 변수 이름입니다. 경우 <paramref name="Expression" /> 형식입니다 <see langword="Object" />, <see langword="Len" /> 함수에서 파일에 기록 될 크기를 반환 합니다 <see langword="FilePut" /> 함수.</param>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
        <returns>문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다. 경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다. 합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다. 경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`. 매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberSignature Language="F#" Value="static member Len : sbyte -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">유효한 <see langword="String" /> 식 또는 변수 이름입니다. 경우 <paramref name="Expression" /> 형식입니다 <see langword="Object" />, <see langword="Len" /> 함수에서 파일에 기록 될 크기를 반환 합니다 <see langword="FilePut" /> 함수.</param>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
        <returns>문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다. 경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다. 합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다. 경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`. 매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberSignature Language="F#" Value="static member Len : single -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">유효한 <see langword="String" /> 식 또는 변수 이름입니다. 경우 <paramref name="Expression" /> 형식입니다 <see langword="Object" />, <see langword="Len" /> 함수에서 파일에 기록 될 크기를 반환 합니다 <see langword="FilePut" /> 함수.</param>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
        <returns>문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다. 경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다. 합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다. 경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`. 매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Len : string -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">유효한 <see langword="String" /> 식 또는 변수 이름입니다. 경우 <paramref name="Expression" /> 형식입니다 <see langword="Object" />, <see langword="Len" /> 함수에서 파일에 기록 될 크기를 반환 합니다 <see langword="FilePut" /> 함수.</param>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
        <returns>문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다. 경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다. 합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다. 경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`. 매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint16 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">유효한 <see langword="String" /> 식 또는 변수 이름입니다. 경우 <paramref name="Expression" /> 형식입니다 <see langword="Object" />, <see langword="Len" /> 함수에서 파일에 기록 될 크기를 반환 합니다 <see langword="FilePut" /> 함수.</param>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
        <returns>문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다. 경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다. 합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다. 경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`. 매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint32 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">유효한 <see langword="String" /> 식 또는 변수 이름입니다. 경우 <paramref name="Expression" /> 형식입니다 <see langword="Object" />, <see langword="Len" /> 함수에서 파일에 기록 될 크기를 반환 합니다 <see langword="FilePut" /> 함수.</param>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
        <returns>문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다. 경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다. 합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다. 경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`. 매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberSignature Language="F#" Value="static member Len : uint64 -&gt; int" Usage="Microsoft.VisualBasic.Strings.Len Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Expression">유효한 <see langword="String" /> 식 또는 변수 이름입니다. 경우 <paramref name="Expression" /> 형식입니다 <see langword="Object" />, <see langword="Len" /> 함수에서 파일에 기록 될 크기를 반환 합니다 <see langword="FilePut" /> 함수.</param>
        <summary>문자열의 문자 수 또는 변수를 저장 하는 데 필요한 바이트 수를 포함 하는 정수를 반환 합니다.</summary>
        <returns>문자열에 있는 문자 수나 변수를 저장하는 데 필요한 바이트 수를 포함하는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 정의 형식 및 `Object` 변수를 `Len` 함수에서 파일에 기록 될 크기를 반환 합니다는 `FilePut` 함수입니다. 경우는 `Object` 포함을 `String`, 문자열의 길이 반환 합니다. 경우는 `Object` 다른 형식으로 포함 하 여 파일에 기록 될 개체의 크기를 반환 합니다는 `FilePut` 함수입니다.  
  
 `VBFixedString` 특성을 쓸 때 바이트 문자열의 크기를 나타내는 개체의 문자열 필드에 적용할 수 디스크에 있습니다. 합니다 `Len` 함수는 합니다 `VBFixedString` 특성을 사용 가능한 경우 크기를 확인 하는 경우 `Object` 변수입니다.  
  
> [!NOTE]
>  `Len` 함수는 사용자 정의 데이터 형식에서 가변 길이 문자열과 함께 사용될 때 필요한 실제 스토리지(바이트)의 수를 확인하지 못할 수 있습니다.  
  
> [!NOTE]
>  `LenB` 이전 버전의 Visual Basic 함수 문자가 아니라 문자열의 바이트 수를 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `LenB` 는 지원 되지 않습니다.  
  
## <a name="smart-device-developer-notes"></a>스마트 디바이스 개발자 노트  
 합니다 `Len` 함수 에서만 허용 `String` 및 `Object` 변수를 매개 변수로 합니다. 경우는 `Object` 포함를 `String`의 길이 반환 하는 `String`. 매개 변수가 NULL 인 경우 `Object` 참조, 함수가 0을 반환 합니다. 경우는 `Object` 다른 형식으로 포함 예외가 throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 `Len` 를 문자열의 문자 수를 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member LSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.LSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Source">필수. <see langword="String" /> 식입니다. 문자열 변수의 이름입니다.</param>
        <param name="Length">필수. <see langword="Integer" /> 식입니다. 반환 된 문자열의 길이입니다.</param>
        <summary>지정 된 길이에 맞게 조정 하는 지정된 된 문자열을 포함 하는 왼쪽 맞춤 문자열을 반환 합니다.</summary>
        <returns>지정된 문자열을 지정한 길이에 맞게 조정하고 왼쪽에 맞춘 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정 된 문자열이 지정된 된 길이 보다 긴 경우 반환된 된 문자열은 지정 된 길이 단축 됩니다. 지정 된 문자열이 지정된 된 길이 보다 짧은 경우 해당 길이 생성 하기 위해 반환된 된 문자열의 오른쪽 끝에 공백이 추가 됩니다.  
  
   
  
## Examples  
 이 예제에서는 사용 된 `LSet` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">데이터 형식의 효율적 사용</related>
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member LTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.LTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">필수. 모든 유효한 <see langword="String" /> 식입니다.</param>
        <summary>선행 공백 없이 지정된 된 문자열의 복사본을 포함 하는 문자열을 반환 합니다 (<see langword="LTrim" />), 후행 공백 (<see langword="RTrim" />), 선행 또는 후행 공백 (<see langword="Trim" />).</summary>
        <returns>선행 공백(<see langword="LTrim" />), 후행 공백(<see langword="RTrim" />), 선행 또는 후행 공백(<see langword="Trim" />)이 없는 지정된 문자열의 복사본이 포함된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `LTrim`, `RTrim`, 및 `Trim` 함수는 문자열의 끝에서 공백을 제거 합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 `LTrim` 선행 공백을 제거 하는 함수 및 `RTrim` 문자열 변수에서 함수를 후행 공백입니다. 사용 된 `Trim` 후행 공백 모두 제거 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 된 문자열에서 문자를 포함 하는 문자열을 반환 합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">필수. <see langword="String" /> 반환 되는 문자 식입니다.</param>
        <param name="Start">필수. <see langword="Integer" /> 식입니다. 반환할 문자의 시작 위치입니다. 하는 경우 <paramref name="Start" /> 의 문자 수보다 크면 <paramref name="str" />는 <see langword="Mid" /> 함수는 길이가 0 인 문자열을 반환 합니다 (""). <paramref name="Start" /> 1부터 시작 합니다.</param>
        <summary>문자열에서 지정된 된 위치에서 시작 하는 모든 문자를 포함 하는 문자열을 반환 합니다.</summary>
        <returns>문자열에 지정된 된 위치에서 시작 하 여 모든 문자로 구성 된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 있는 문자의 수를 확인 하려면 `str`를 사용 하 여는 `Len` 함수입니다.  
  
 Visual Basic에는 `Mid` 함수 및 `Mid` 문입니다. 이러한 요소는 모두 문자열에서 문자의 지정된 된 수에 작동 하지만 `Mid` 해당 문자를 반환 하는 함수는 `Mid` 문은 문자를 대체 합니다. 자세한 내용은 [Mid 문](~/docs/visual-basic/language-reference/statements/mid-statement.md)합니다.  
  
> [!NOTE]
>  `MidB` 이전 버전의 Visual Basic 함수 문자가 아닌 바이트 문자열을 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 모든 Visual Basic 문자열은 유니코드, 및 `MidB` 는 지원 되지 않습니다.  
  
   
  
## Examples  
 이 예제의 마지막 줄이 오버이 로드를 사용 하는 `Mid` 문자열에서 다섯 번째 및 이후의 문자를 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 또는 <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic의 문자열</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic의 문자열 소개</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Mid 문</related>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberSignature Language="F#" Value="static member Mid : string * int * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Mid (str, Start, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">필수. <see langword="String" /> 반환 되는 문자 식입니다.</param>
        <param name="Start">필수. <see langword="Integer" /> 식입니다. 반환할 문자의 시작 위치입니다. 하는 경우 <paramref name="Start" /> 의 문자 수보다 크면 <paramref name="str" />는 <see langword="Mid" /> 함수는 길이가 0 인 문자열을 반환 합니다 (""). <paramref name="Start" /> 1부터 시작 합니다.</param>
        <param name="Length">선택 사항입니다. <see langword="Integer" /> 식입니다. 반환할 문자의 수입니다. 생략 하거나 개 보다 적으면 <paramref name="Length" /> 텍스트의 문자 (위치의 문자를 포함 하 여 <paramref name="Start" />), 문자열의 끝에 시작 위치에서 모든 문자가 반환 됩니다.</param>
        <summary>문자열에서 지정된 된 위치에서 시작 문자의 지정한 수를 포함 하는 문자열을 반환 합니다.</summary>
        <returns>지정 된 문자열에 지정된 된 위치에서 시작 하는 문자 수가 구성 된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 있는 문자의 수를 확인 하려면 `str`를 사용 하 여는 `Len` 함수입니다.  
  
 Visual Basic에는 `Mid` 함수 및 `Mid` 문입니다. 이러한 요소는 모두 문자열에서 문자의 지정된 된 수에 작동 하지만 `Mid` 해당 문자를 반환 하는 함수는 `Mid` 문은 문자를 대체 합니다. 자세한 내용은 [Mid 문](~/docs/visual-basic/language-reference/statements/mid-statement.md)합니다.  
  
> [!NOTE]
>  `MidB` 이전 버전의 Visual Basic 함수 문자가 아닌 바이트 문자열을 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 모든 Visual Basic 문자열은 유니코드, 및 `MidB` 는 지원 되지 않습니다.  
  
   
  
## Examples  
 처음 두 `Mid` 이 예제의 함수에서 지정 된 위치에서 시작 하는 문자열에 지정 된 개수의 문자를 반환 합니다. (마지막 함수를 보여 줍니다는 <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> 오버 로드 하 고 문자열 추출에 대 한 시작 지점을 지정 합니다.)  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Start" /> &lt;= 0 또는 <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic의 문자열</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic의 문자열 소개</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/mid-statement.md">Mid 문</related>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberSignature Language="F#" Value="static member Replace : string * string * string * int * int * Microsoft.VisualBasic.CompareMethod -&gt; string" Usage="Microsoft.VisualBasic.Strings.Replace (Expression, Find, Replacement, Start, Count, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Find" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Replacement" Type="System.String" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Start" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Count" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">필수. 대체할 부분 문자열을 포함 하는 식을 문자열입니다.</param>
        <param name="Find">필수. 검색할 부분 문자열입니다.</param>
        <param name="Replacement">필수. 대체 부분 문자열입니다.</param>
        <param name="Start">선택 사항입니다. 내 위치 <paramref name="Expression" /> 대체에 사용 되는 부분 문자열을 시작 하는 합니다. 반환 값 <see langword="Replace" /> 은 시작 하는 문자열 <paramref name="Start" />, 적절 한 대체 합니다. 생략 하면 1이 사용 됩니다.</param>
        <param name="Count">선택 사항입니다. 수행할 부분 문자열 대체 횟수입니다. 이 인수를 생략하면 기본값으로 -1이 사용됩니다. 이것은 "가능한 모든 항목이 대체됨"을 의미합니다.</param>
        <param name="Compare">선택 사항입니다. 부분 문자열을 평가할 때 사용할 비교의 종류를 나타내는 숫자 값입니다. 값 설정을 참조 하십시오.</param>
        <summary>문자열의 지정된 된 부분 문자열에 바뀌는 다른 반환 된 지정 된 횟수 만큼 부분 문자열입니다.</summary>
        <returns><see langword="Replace" /> 다음 값을 반환합니다.  
  
 <list type="table"><item><term> 조건 
 </term><description> 반환 값 
 </description></item><item><term><paramref name="Find" /> 길이가 0 인 경우 또는 <see langword="Nothing" /></term><description> 복사본 <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> 길이가 0 인 경우 
 </term><description> 복사본 <paramref name="Expression" /> 포함 되지 않는 <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> 길이가 0 인 경우 또는 <see langword="Nothing" />, 또는 <paramref name="Start" /> 의 길이 보다 크면 <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> 가 0 
 </term><description> 복사본 <paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 값을 `Replace` 함수는 지정 된 위치에서 시작 하는 문자열 `Start` 끝의 마지막를 `Expression` 대체가 수행 된 문자열에 지정 된 대로 `Find` 및 `Replace` 값입니다.  
  
 `Compare` 인수는 다음 값을 가질 수 있습니다.  
  
|상수|설명|  
|-|-|  
|`Binary`|이진 비교를 수행합니다.|  
|`Text`|텍스트 비교를 수행합니다.|  
  
   
  
## Examples  
 이 예제에서는 `Replace` 함수입니다.  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Count" /> &lt; -1 또는 <paramref name="Start" /> &lt;= 0.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberSignature Language="F#" Value="static member Right : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Right (str, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">필수. <see langword="String" /> 가장 오른쪽의 문자가 반환 되는 식입니다.</param>
        <param name="Length">필수. <see langword="Integer" />. 반환할 문자의 수를 나타내는 숫자 식입니다. 0 이면 길이가 0 인 문자열 ("")이 반환 됩니다. 문자 수가 크거나 <paramref name="str" />, 전체 문자열이 반환 됩니다.</param>
        <summary>지정 된 문자열의 오른쪽에 있는 문자 수를 포함 하는 문자열을 반환 합니다.</summary>
        <returns>문자열의 오른쪽에서 지정한 개수의 문자를 포함하는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 있는 문자의 수를 확인 하려면 `str`를 사용 하 여는 `Len` 함수입니다. Windows 폼 또는 있는 다른 클래스에 사용 되는 경우는 `Right` 속성을 정규화 해야 사용 하 여 함수 `Microsoft.VisualBasic.Strings.Right`합니다.  
  
> [!NOTE]
>  `RightB` 이전 버전의 Visual Basic 함수 문자가 아닌 바이트 문자열을 반환 합니다. 더블 바이트 문자 집합 (DBCS) 애플리케이션의 문자열을 변환에 주로 사용 됩니다. 유니코드는 현재 Visual Basic의 모든 문자열 및 `RightB` 는 지원 되지 않습니다.  
  
   
  
## Examples  
 이 예제에서는 사용 합니다 `Right` 의 부분 문자열을 반환 하는 함수를 지정 `String`. 가 있는 클래스에서를 `Right` 속성인 해야 정규화는 `Right` 함수.  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberSignature Language="F#" Value="static member RSet : string * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.RSet (Source, Length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Length" Type="System.Int32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Source">필수. <see langword="String" /> 식입니다. 문자열 변수의 이름입니다.</param>
        <param name="Length">필수. <see langword="Integer" /> 식입니다. 반환 된 문자열의 길이입니다.</param>
        <summary>지정 된 길이에 맞게 조정 하는 지정된 된 문자열을 포함 하는 오른쪽 맞춤 문자열을 반환 합니다.</summary>
        <returns>지정된 길이에 맞게 조정된 특정 문자열이 포함된 문자열(오른쪽에 맞춰진 문자열)입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하는 경우 `Source` 보다 길면 `Length`, `RSet` 의 길이 까지만 왼쪽 문자를 배치 `Source`, 반환된 된 문자열에서. 지정 된 문자열이 지정된 된 길이 보다 짧은 경우 해당 길이 생성 하는 문자열의 왼쪽된 끝에 공백이 추가 됩니다. 지정 된 문자열이 지정된 된 길이 보다 긴 경우에 지정 된 길이 단축 됩니다.  
  
   
  
## Examples  
 이 예제에서는 사용 된 `RSet` 함수입니다.  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">데이터 형식 요약(Visual Basic)</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md">데이터 형식의 효율적 사용</related>
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member RTrim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.RTrim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">필수. 모든 유효한 <see langword="String" /> 식입니다.</param>
        <summary>선행 공백 없이 지정된 된 문자열의 복사본을 포함 하는 문자열을 반환 합니다 (<see langword="LTrim" />), 후행 공백 (<see langword="RTrim" />), 선행 또는 후행 공백 (<see langword="Trim" />).</summary>
        <returns>선행 공백(<see langword="LTrim" />), 후행 공백(<see langword="RTrim" />), 선행 또는 후행 공백(<see langword="Trim" />)이 없는 지정된 문자열의 복사본이 포함된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `LTrim`, `RTrim`, 및 `Trim` 함수는 문자열의 끝에서 공백을 제거 합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 `LTrim` 선행 공백을 제거 하는 함수 및 `RTrim` 문자열 변수에서 함수를 후행 공백입니다. 사용 된 `Trim` 후행 공백 모두 제거 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberSignature Language="F#" Value="static member Space : int -&gt; string" Usage="Microsoft.VisualBasic.Strings.Space Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">필수. <see langword="Integer" /> 식입니다. 문자열에 넣을 공백의 수입니다.</param>
        <summary>지정 된 수 만큼의 공백으로 구성 된 문자열을 반환 합니다.</summary>
        <returns>지정한 수 만큼의 공백으로 구성되는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Space` 함수는 출력 서식 지정 및 고정 길이 문자열에서 데이터를 지울 때 유용 합니다.  
  
   
  
## Examples  
 이 예제에서는 `Space` 함수는 지정 된 수 만큼의 공백으로 구성 된 문자열을 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberSignature Language="F#" Value="static member Split : string * string * int * Microsoft.VisualBasic.CompareMethod -&gt; string[]" Usage="Microsoft.VisualBasic.Strings.Split (Expression, Delimiter, Limit, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Delimiter" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Limit" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">필수. <see langword="String" /> 부분 문자열과 구분 기호를 포함 하는 식입니다.</param>
        <param name="Delimiter">선택 사항입니다. 단일 부분 문자열의 한계를 식별 하는 데 사용 되는 문자입니다. 경우 <paramref name="Delimiter" /> 를 생략 하면 공백 문자 ("")로 구분 기호로 간주 됩니다.</param>
        <param name="Limit">선택 사항입니다. 입력된 문자열을 분할 해야 하는 부분 문자열의 최대 수입니다. 기본값 -1은 <paramref name="Delimiter" /> 문자열이 발생할 때마다 입력 문자열을 분할해야 함을 나타냅니다.</param>
        <param name="Compare">선택 사항입니다. 부분 문자열을 평가할 때 사용할 비교를 나타내는 숫자 값입니다. 값에 대해서는 "설정"을 참조하세요.</param>
        <summary>부분 문자열의 지정된 된 수를 포함 하는 0부터 시작 하는 1 차원 배열을 반환 합니다.</summary>
        <returns><see langword="String" /> 배열입니다. 하는 경우 <paramref name="Expression" /> 길이가 0 인 문자열 (""), <see langword="Split" /> 길이가 0 인 문자열을 포함 하는 단일 요소 배열을 반환 합니다. 하는 경우 <paramref name="Delimiter" /> 길이가 0 인 문자열인에서 아무 곳 이나 표시 되지 않는 경우 또는 <paramref name="Expression" />, <see langword="Split" /> 전체를 포함 하는 단일 요소 배열을 반환 <paramref name="Expression" /> 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 때나 `Limit` 가-1 이면는 `Split` 함수는 구분 기호 문자열의 모든 위치에서 입력된 문자열을 분할 하 고 배열에서 부분 문자열을 반환 합니다. 경우는 `Limit` 매개 변수가 0 보다 크면를 `Split` 함수는 첫 번째에서 문자열을 분할 `Limit`구분 기호를-1 개 결과 부분 문자열을 사용 하 여 배열을 반환 합니다. 예를 들어 `Split("a:b:c", ":")` 배열을 반환 `{"a", "b", "c"}`, 하는 동안 `Split("a:b:c", ":", 2)` 배열을 반환 `{"a", "b:c"}`합니다.  
  
 경우는 `Split` 함수 행에 두 구분 기호 또는 시작 이나 문자열의 끝 구분 기호를 발견 하면, 둘러싸는 것 해석 하는 빈 문자열 (""). 예를 들어 `Split("xx", "x")` 세 개의 빈 문자열을 포함 하는 배열을 반환 합니다: 사이 있는 문자열을 "x", "x" 문자열을 두 개의 첫 번째 및 마지막 "x"와 문자열의 끝 사이입니다.  
  
 이 테이블을 보여 줍니다. 어떻게 선택적 `Delimiter`, `Limit`, 및 `Compare` 매개 변수의 동작을 변경할 수는 `Split` 함수입니다.  
  
|분할 호출|반환 값|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Alice와 bob은"}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice", "Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"someone", "example.com"}|  
  
 `Compare` 인수는 다음 값을 가질 수 있습니다.  
  
|상수|설명|값|  
|-|-|-|  
|`CompareMethod.Binary`|이진 비교를 수행합니다.|0|  
|`CompareMethod.Text`|텍스트 비교를 수행합니다.|1|  
  
   
  
## Examples  
 다음 예제에서는 해당 공백이 있는 문자열을 분할 하는 방법에 설명 합니다.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 다음 예에서는 행에 여러 개의 구분 기호를 사용 하 여 문자열을 분할 하 고 빈 문자열은 필터링 하는 방법을 보여 줍니다.  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberSignature Language="F#" Value="static member StrComp : string * string * Microsoft.VisualBasic.CompareMethod -&gt; int" Usage="Microsoft.VisualBasic.Strings.StrComp (String1, String2, Compare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="String2" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">필수. 모든 유효한 <see langword="String" /> 식입니다.</param>
        <param name="String2">필수. 모든 유효한 <see langword="String" /> 식입니다.</param>
        <param name="Compare">선택 사항입니다. 문자열 비교의 형식을 지정합니다. 하는 경우 <paramref name="Compare" /> 를 생략 하면는 <see langword="Option Compare" /> 설정은 비교의 형식을 결정 합니다.</param>
        <summary>-1, 0 또는 1, 문자열 비교의 결과 기반으로 반환 합니다.</summary>
        <returns><see langword="StrComp" /> 함수에는 다음 반환 값입니다.  
  
 <list type="table"><item><term> 조건 
 </term><description> StrComp 함수의 반환 값 
 </description></item><item><term><paramref name="String1" /> 앞에 정렬 <paramref name="String2" /></term><description> -1 
 </description></item><item><term><paramref name="String1" /> 값과 같음 <paramref name="String2" /></term><description> 0 
 </description></item><item><term><paramref name="String1" /> 뒤에 정렬 <paramref name="String2" /></term><description> 1 
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 문자열은 첫 번째 문자로 시작 하는 영숫자 정렬 값으로 비교 됩니다. 이진 비교, 텍스트 비교 및 정렬 순서에 대 한 자세한 내용은 참조 하세요 [Option Compare 문](~/docs/visual-basic/language-reference/statements/option-compare-statement.md)합니다.  
  
 `Compare` 인수 설정은 다음과 같습니다.  
  
|상수|설명|  
|-|-|  
|`Binary`|문자의 내부 이진 표현에서 파생 된 정렬 순서에 따라 이진 비교를 수행 합니다.|  
|`Text`|시스템의 지정 된 대/소문자 구분 텍스트 정렬 순서에 따라 텍스트 비교를 수행 `LocaleID` 값입니다.|  
  
   
  
## Examples  
 이 예제에서는 `StrComp` 문자열 비교의 결과 반환 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Compare" /> 값이 잘못된 경우</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic의 문자열</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic의 문자열 소개</related>
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberSignature Language="F#" Value="static member StrConv : string * Microsoft.VisualBasic.VbStrConv * int -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrConv (str, Conversion, LocaleID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="LocaleID" Type="System.Int32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">필수. <see langword="String" /> 변환할 식입니다.</param>
        <param name="Conversion">필수. <see cref="T:Microsoft.VisualBasic.VbStrConv" /> 멤버입니다. 수행할 변환 형식을 지정 하는 열거형 값입니다.</param>
        <param name="LocaleID">선택 사항입니다. 합니다 <see langword="LocaleID" /> 값을 시스템에서와 다른 경우 <see langword="LocaleID" /> 값입니다. (시스템 <see langword="LocaleID" /> 기본값은입니다.)</param>
        <summary>지정 된 대로 변환 된 문자열을 반환 합니다.</summary>
        <returns>지정된 대로 변환된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 상수 `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`합니다 `VbStrConv.Katakana`, 및 `VbStrConv.Hiragana` 는 적용 되지 않으므로, 로캘에서 사용 하는 경우 런타임 오류가 발생할 수 있습니다 항상 그렇지는 않지만: 상수 `VbStrConv.Katakana` 및 `VbStrConv.Hiragana`일본어 언어 팩이 설치 된 일본어가 아닌 시스템에서 사용할 수 있습니다. 또한 사용 하 여 상수 `VbStrConv.Wide` 및 `VbStrConv.Narrow` 설치는 동아시아 언어를 사용 하 여 모든 시스템에서 지원 됩니다.  
  
 이 함수는 대/소문자 변경은 애플리케이션은 사용 되는 로캘에 대 한 적절 한 문자열을 조작 하는 경우 애플리케이션의 culture 정보를 사용 합니다.  
  
> [!IMPORTANT]
>  애플리케이션에서 비교 또는 대/소문자 변경 작업의 결과에 따라 보안 결정 다음 작업을 사용 해야 합니다 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드를 통과 <xref:System.StringComparison.Ordinal> 또는 <xref:System.StringComparison.OrdinalIgnoreCase> 에 대 한는 `comparisonType` 인수입니다. 자세한 내용은 [어떻게 문화권에 영향을 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.  
  
 `Conversion` 인수 설정은 다음과 같습니다.  
  
|열거형 멤버|설명|  
|-|-|  
|`VbStrConv.None`|변환 하지 않음|  
|`VbStrConv.LinguisticCasing`|파일 시스템 (기본값) 보다는 대/소문자를 실행 하는 것에 대 한 언어 규칙을 사용 합니다. 유효 `VbStrConv.UpperCase` 고 `VbStrConv.LowerCase` 만 합니다.|  
|`VbStrConv.UpperCase`|지정된 문자열을 대문자로 변환합니다.|  
|`VbStrConv.LowerCase`|문자열을 소문자로 변환합니다.|  
|`VbStrConv.ProperCase`|문자열을 대문자로에서 모든 단어의 첫 번째 문자를 변환 합니다.|  
|`VbStrConv.Wide` <sup>*</sup>|(반자) 문자 (반자) 와이드 문자 문자열의 좁은 변환 합니다. [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|좁은 문자 (반자) 문자열의 와이드 (반자) 문자로 변환 합니다.|  
|`VbStrConv.Katakana` <sup>**</sup>|문자열의 히라가나 문자를 가타카나 문자로 변환합니다.|  
|`VbStrConv.Hiragana` <sup>**</sup>|문자열의 가타카나 문자를 히라가나 문자로 변환합니다.|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|중국어 간체를 중국어 번체 문자를 변환합니다.|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|중국어 (번체) 중국어 간체 문자로 변환합니다.|  
  
 <sup>*</sup> 아시아어 로캘에 적용 됩니다.  
  
 <sup>**</sup> 일본에만 적용 됩니다.  
  
> [!NOTE]
>  이러한 상수는.NET Framework 공용 언어 런타임에서 지정 됩니다. 결과적으로 사용할 수 있습니다 어디서 나 코드에서 실제 값 대신. 대부분을 결합할 수 있습니다 (예를 들어 `UpperCase + Wide`)를 제외 하 고 함께 있을 때 (예를 들어 `VbStrConv.Wide + VbStrConv.Narrow`).  
  
 다음은 적절 한 대/소문자 구분에 대 한 올바른 단어 구분 기호입니다. Null (`Chr$(0)`), 가로 탭 (`Chr$(9)`), 줄 바꿈 (`Chr$(10)`), 세로 탭 (`Chr$(11)`), 폼 피드 (`Chr$(12)`), 캐리지 리턴 (`Chr$(13)`), 공간 (싱글바이트 문자 집합) (`Chr$(32)`). 동아시아 언어 문화권에 대 한 국가/지역별 전체 또는 너비의 절반 수, 공백, 실제 값은 달라 집니다.  
  
   
  
## Examples  
 이 예제는 텍스트를 모두 소문자로 변환합니다.  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">지원되지 않는 <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 또는 &gt; 2048 또는 지정된 로캘에 대해 지원되지 않는 변환.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">CString</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>문자열 또는 지정된 된 문자도 이루어진 개체를 반복 횟수가 지정 된 횟수를 반환 합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * char -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Character" Type="System.Char" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">필수. <see langword="Integer" /> 식입니다. 반환할 문자열 길이입니다.</param>
        <param name="Character">필수. 유효한 <see langword="Char" />하십시오 <see langword="String" />, 또는 <see langword="Object" /> 식입니다. 식의 첫 번째 문자만 사용 됩니다. Character가 <see langword="Object" /> 형식이면 <see langword="Char" /> 또는 <see langword="String" />값을 포함해야 합니다.</param>
        <summary>문자열 또는 지정된 된 문자도 이루어진 개체를 반복 횟수가 지정 된 횟수를 반환 합니다.</summary>
        <returns>지정된 횟수만큼 반복되는 특정 문자로 구성된 문자열 또는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 함수는 반환을 `String` 반복 되는 문자로 이루어져 있습니다. 문자열을 구성 하는 문자는 첫 번째 문자에는 `Character` 인수에 중복 되 `Number` 횟수입니다.  
  
   
  
## Examples  
 이 예제에서는 `StrDup` 문자를 중복 함수는 문자열을 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 가 0 미만 또는 <paramref name="Character" /> 형식이 잘못 되었습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" />가 <see langword="Nothing" />인 경우</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * obj -&gt; obj" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Character" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">필수. <see langword="Integer" /> 식입니다. 반환할 문자열 길이입니다.</param>
        <param name="Character">필수. 유효한 <see langword="Char" />하십시오 <see langword="String" />, 또는 <see langword="Object" /> 식입니다. 식의 첫 번째 문자만 사용 됩니다. Character가 <see langword="Object" /> 형식이면 <see langword="Char" /> 또는 <see langword="String" />값을 포함해야 합니다.</param>
        <summary>문자열 또는 지정된 된 문자도 이루어진 개체를 반복 횟수가 지정 된 횟수를 반환 합니다.</summary>
        <returns>지정된 횟수만큼 반복되는 특정 문자로 구성된 문자열 또는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 함수는 반환을 `String` 반복 되는 문자로 이루어져 있습니다. 문자열을 구성 하는 문자는 첫 번째 문자에는 `Character` 인수에 중복 되 `Number` 횟수입니다.  
  
   
  
## Examples  
 이 예제에서는 `StrDup` 문자를 중복 함수는 문자열을 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 가 0 미만 또는 <paramref name="Character" /> 형식이 잘못 되었습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" />가 <see langword="Nothing" />인 경우</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberSignature Language="F#" Value="static member StrDup : int * string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrDup (Number, Character)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Character" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Number">필수. <see langword="Integer" /> 식입니다. 반환할 문자열 길이입니다.</param>
        <param name="Character">필수. 유효한 <see langword="Char" />하십시오 <see langword="String" />, 또는 <see langword="Object" /> 식입니다. 식의 첫 번째 문자만 사용 됩니다. Character가 <see langword="Object" /> 형식이면 <see langword="Char" /> 또는 <see langword="String" />값을 포함해야 합니다.</param>
        <summary>문자열 또는 지정된 된 문자도 이루어진 개체를 반복 횟수가 지정 된 횟수를 반환 합니다.</summary>
        <returns>지정된 횟수만큼 반복되는 특정 문자로 구성된 문자열 또는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 함수는 반환을 `String` 반복 되는 문자로 이루어져 있습니다. 문자열을 구성 하는 문자는 첫 번째 문자에는 `Character` 인수에 중복 되 `Number` 횟수입니다.  
  
   
  
## Examples  
 이 예제에서는 `StrDup` 문자를 중복 함수는 문자열을 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Number" /> 가 0 미만 또는 <paramref name="Character" /> 형식이 잘못 되었습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="Character" />가 <see langword="Nothing" />인 경우</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberSignature Language="F#" Value="static member StrReverse : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.StrReverse Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="Expression">필수. 해당 문자 순서가 거꾸로 바뀌는 문자열 식입니다. 경우 <paramref name="Expression" /> 길이가 0 인 문자열 (""), 길이가 0 인 문자열이 반환 됩니다.</param>
        <summary>지정된 된 문자열의 문자 순서를 역순 문자열을 반환 합니다.</summary>
        <returns>지정된 문자열의 문자 순서를 역순으로 한 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `StrReverse` 와 동일한 문자를 포함 하는 문자열을 반환 하는 함수 `Expression`, 있지만 반대 순서로 합니다.  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Trim : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.Trim str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
        <AssemblyVersion>10.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="str">필수. 모든 유효한 <see langword="String" /> 식입니다.</param>
        <summary>선행 공백 없이 지정된 된 문자열의 복사본을 포함 하는 문자열을 반환 합니다 (<see langword="LTrim" />), 후행 공백 (<see langword="RTrim" />), 선행 또는 후행 공백 (<see langword="Trim" />).</summary>
        <returns>선행 공백(<see langword="LTrim" />), 후행 공백(<see langword="RTrim" />), 선행 또는 후행 공백(<see langword="Trim" />)이 없는 지정된 문자열의 복사본이 포함된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `LTrim`, `RTrim`, 및 `Trim` 함수는 문자열의 끝에서 공백을 제거 합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 `LTrim` 선행 공백을 제거 하는 함수 및 `RTrim` 문자열 변수에서 함수를 후행 공백입니다. 사용 된 `Trim` 후행 공백 모두 제거 하는 함수입니다.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>문자열 또는 문자를 대문자로 변환 된 지정 된 문자열을 반환 합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberSignature Language="F#" Value="static member UCase : char -&gt; char" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Value">필수. 유효한 <see langword="String" /> 또는 <see langword="Char" /> 식입니다.</param>
        <summary>문자열 또는 문자를 대문자로 변환 된 지정 된 문자열을 반환 합니다.</summary>
        <returns>대문자로 변환된 특정 문자열이 있는 문자열 또는 문자입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 소문자만 변환할지를 대문자로; 모든 대문자 및 글자가 아닌 문자는 변경 되지 않습니다.  
  
 이 함수는 대/소문자 변경은 애플리케이션은 사용 되는 로캘에 대 한 적절 한 문자열을 조작 하는 경우 애플리케이션의 culture 정보를 사용 합니다.  
  
> [!IMPORTANT]
>  애플리케이션에서 비교 또는 대/소문자 변경 작업의 결과에 따라 보안 결정 다음 작업을 사용 해야 합니다 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드를 통과 <xref:System.StringComparison.Ordinal> 또는 <xref:System.StringComparison.OrdinalIgnoreCase> 에 대 한는 `comparisonType` 인수입니다. 자세한 내용은 [어떻게 문화권에 영향을 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.  
  
   
  
## Examples  
 이 예제에서는 `UCase` 함수는 문자열의 대문자 버전을 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic의 문자열</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic의 문자열 소개</related>
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberSignature Language="F#" Value="static member UCase : string -&gt; string" Usage="Microsoft.VisualBasic.Strings.UCase Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="Value">필수. 유효한 <see langword="String" /> 또는 <see langword="Char" /> 식입니다.</param>
        <summary>문자열 또는 문자를 대문자로 변환 된 지정 된 문자열을 반환 합니다.</summary>
        <returns>대문자로 변환된 특정 문자열이 있는 문자열 또는 문자입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 소문자만 변환할지를 대문자로; 모든 대문자 및 글자가 아닌 문자는 변경 되지 않습니다.  
  
 이 함수는 대/소문자 변경은 애플리케이션은 사용 되는 로캘에 대 한 적절 한 문자열을 조작 하는 경우 애플리케이션의 culture 정보를 사용 합니다.  
  
> [!IMPORTANT]
>  애플리케이션에서 비교 또는 대/소문자 변경 작업의 결과에 따라 보안 결정 다음 작업을 사용 해야 합니다 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드를 통과 <xref:System.StringComparison.Ordinal> 또는 <xref:System.StringComparison.OrdinalIgnoreCase> 에 대 한는 `comparisonType` 인수입니다. 자세한 내용은 [어떻게 문화권에 영향을 Visual Basic의 문자열](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md)합니다.  
  
   
  
## Examples  
 이 예제에서는 `UCase` 함수는 문자열의 대문자 버전을 반환 합니다.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/string-manipulation-summary.md">문자열 조작 요약</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/index.md">Visual Basic의 문자열</related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/introduction-to-strings.md">Visual Basic의 문자열 소개</related>
      </Docs>
    </Member>
  </Members>
</Type>