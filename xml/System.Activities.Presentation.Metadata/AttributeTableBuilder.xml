<Type Name="AttributeTableBuilder" FullName="System.Activities.Presentation.Metadata.AttributeTableBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2e40950b081c8e6ad86ecad5761b8dacdd34565c" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57957443" /></Metadata><TypeSignature Language="C#" Value="public class AttributeTableBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AttributeTableBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.Metadata.AttributeTableBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class AttributeTableBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class AttributeTableBuilder" />
  <TypeSignature Language="F#" Value="type AttributeTableBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Activities.Presentation.Metadata.AttributeTable" />가 특성 조회 및 등록을 제공하는 데 사용하는 <see cref="T:System.Activities.Presentation.Metadata.MetadataStore" />을 만들고 채웁니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>, <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> 및 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable%2A>을 사용하여 작성기를 채운 다음 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A>을 호출하여 원하는 특성 컬렉션이 포함된 <xref:System.Activities.Presentation.Metadata.AttributeTable>을 가져옵니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AttributeTableBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AttributeTableBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Activities.Presentation.Metadata.AttributeTableBuilder" /> 클래스의 새 인스턴스를 만듭니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCallback">
      <MemberSignature Language="C#" Value="public void AddCallback (Type type, System.Activities.Presentation.Metadata.AttributeCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCallback(class System.Type type, class System.Activities.Presentation.Metadata.AttributeCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback(System.Type,System.Activities.Presentation.Metadata.AttributeCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCallback(Type ^ type, System::Activities::Presentation::Metadata::AttributeCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.AddCallback : Type * System.Activities.Presentation.Metadata.AttributeCallback -&gt; unit" Usage="attributeTableBuilder.AddCallback (type, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.Metadata.AttributeCallback" />
      </Parameters>
      <Docs>
        <param name="type">콜백이 메타데이터를 제공할 형식입니다.</param>
        <param name="callback">콜백 메서드입니다.</param>
        <summary>지정된 형식의 메타데이터가 필요할 때 호출될 콜백을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.Metadata.AttributeTable>에서 반환한 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A>이 `type`에 대한 특성으로 처음 쿼리될 때 메타데이터 정보를 제공하기 위해 `callback`이 호출됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>제공된 특성의 내용을 이 작성기에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특성이 작성기에 이미 포함된 다른 특성과 충돌하는 경우 마지막에 추가한 특성이 이전 특성을 대체합니다.  
  
 큰 특성 테이블을 만들 때는 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>을 사용하여 필요할 때까지 특성을 만드는 작업을 지연합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddCustomAttributes">
      <MemberSignature Language="C#" Value="public void AddCustomAttributes (Type type, params Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCustomAttributes(class System.Type type, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Attribute[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCustomAttributes(Type ^ type, ... cli::array &lt;Attribute ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="member this.AddCustomAttributes : Type * Attribute[] -&gt; unit" Usage="attributeTableBuilder.AddCustomAttributes (type, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="attributes" Type="System.Attribute[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-4.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">클래스 수준 특성을 추가할 형식입니다.</param>
        <param name="attributes">작성기에 추가되는 특성입니다.</param>
        <summary>제공된 특성의 내용을 이 작성기에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특성이 작성기에 이미 포함된 다른 특성과 충돌하는 경우 마지막에 추가한 특성이 이전 특성을 대체합니다.  
  
 큰 특성 테이블을 만들 때는 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>을 사용하여 필요할 때까지 특성을 만드는 작업을 지연합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> 또는 <paramref name="attributes" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCustomAttributes">
      <MemberSignature Language="C#" Value="public void AddCustomAttributes (Type ownerType, System.ComponentModel.MemberDescriptor descriptor, params Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCustomAttributes(class System.Type ownerType, class System.ComponentModel.MemberDescriptor descriptor, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.ComponentModel.MemberDescriptor,System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCustomAttributes (ownerType As Type, descriptor As MemberDescriptor, ParamArray attributes As Attribute())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCustomAttributes(Type ^ ownerType, System::ComponentModel::MemberDescriptor ^ descriptor, ... cli::array &lt;Attribute ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="member this.AddCustomAttributes : Type * System.ComponentModel.MemberDescriptor * Attribute[] -&gt; unit" Usage="attributeTableBuilder.AddCustomAttributes (ownerType, descriptor, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="descriptor" Type="System.ComponentModel.MemberDescriptor" />
        <Parameter Name="attributes" Type="System.Attribute[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-4.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ownerType"><paramref name="descriptor" />로 식별되는 멤버를 포함하는 형식입니다.</param>
        <param name="descriptor">특성이 추가되는 이벤트 또는 속성 정보입니다.</param>
        <param name="attributes">작성기에 추가되는 특성입니다.</param>
        <summary>제공된 특성의 내용을 이 작성기에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특성이 작성기에 이미 포함된 다른 특성과 충돌하는 경우 마지막에 추가한 특성이 이전 특성을 대체합니다.  
  
 큰 특성 테이블을 만들 때는 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>을 사용하여 필요할 때까지 특성을 만드는 작업을 지연합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ownerType" />, <paramref name="descriptor" /> 또는 <paramref name="attributes" />이 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCustomAttributes">
      <MemberSignature Language="C#" Value="public void AddCustomAttributes (Type ownerType, System.Reflection.MemberInfo member, params Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCustomAttributes(class System.Type ownerType, class System.Reflection.MemberInfo member, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Reflection.MemberInfo,System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCustomAttributes (ownerType As Type, member As MemberInfo, ParamArray attributes As Attribute())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCustomAttributes(Type ^ ownerType, System::Reflection::MemberInfo ^ member, ... cli::array &lt;Attribute ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="member this.AddCustomAttributes : Type * System.Reflection.MemberInfo * Attribute[] -&gt; unit" Usage="attributeTableBuilder.AddCustomAttributes (ownerType, member, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="attributes" Type="System.Attribute[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-4.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ownerType"><paramref name="member" />로 식별되는 멤버를 포함하는 형식입니다.</param>
        <param name="member">특성이 추가되는 이벤트 또는 속성 정보입니다.</param>
        <param name="attributes">작성기에 추가되는 특성입니다.</param>
        <summary>제공된 특성의 내용을 이 작성기에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특성이 작성기에 이미 포함된 다른 특성과 충돌하는 경우 마지막에 추가한 특성이 이전 특성을 대체합니다.  
  
 큰 특성 테이블을 만들 때는 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>을 사용하여 필요할 때까지 특성을 만드는 작업을 지연합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ownerType" />, <paramref name="member" /> 또는 <paramref name="attributes" />이 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCustomAttributes">
      <MemberSignature Language="C#" Value="public void AddCustomAttributes (Type ownerType, string memberName, params Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCustomAttributes(class System.Type ownerType, string memberName, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.String,System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCustomAttributes (ownerType As Type, memberName As String, ParamArray attributes As Attribute())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCustomAttributes(Type ^ ownerType, System::String ^ memberName, ... cli::array &lt;Attribute ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="member this.AddCustomAttributes : Type * string * Attribute[] -&gt; unit" Usage="attributeTableBuilder.AddCustomAttributes (ownerType, memberName, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="memberName" Type="System.String" />
        <Parameter Name="attributes" Type="System.Attribute[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-4.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ownerType"><paramref name="memberName" />로 식별되는 멤버를 포함하는 형식입니다.</param>
        <param name="memberName">특성이 추가되는 속성 정보 또는 이벤트의 이름입니다.</param>
        <param name="attributes">작성기에 추가되는 특성입니다.</param>
        <summary>제공된 특성의 내용을 이 작성기에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특성이 작성기에 이미 포함된 다른 특성과 충돌하는 경우 마지막에 추가한 특성이 이전 특성을 대체합니다.  
  
 큰 특성 테이블을 만들 때는 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>을 사용하여 필요할 때까지 특성을 만드는 작업을 지연합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ownerType" />, <paramref name="memberName" /> 또는 <paramref name="attributes" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCustomAttributes">
      <MemberSignature Language="C#" Value="public void AddCustomAttributes (Type ownerType, System.Windows.DependencyProperty dp, params Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCustomAttributes(class System.Type ownerType, class System.Windows.DependencyProperty dp, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Windows.DependencyProperty,System.Attribute[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCustomAttributes (ownerType As Type, dp As DependencyProperty, ParamArray attributes As Attribute())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCustomAttributes(Type ^ ownerType, System::Windows::DependencyProperty ^ dp, ... cli::array &lt;Attribute ^&gt; ^ attributes);" />
      <MemberSignature Language="F#" Value="member this.AddCustomAttributes : Type * System.Windows.DependencyProperty * Attribute[] -&gt; unit" Usage="attributeTableBuilder.AddCustomAttributes (ownerType, dp, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="attributes" Type="System.Attribute[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-4.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ownerType"><paramref name="dp" />로 식별되는 종속성을 포함하는 형식입니다.</param>
        <param name="dp">특성을 추가할 종속성 속성입니다.</param>
        <param name="attributes">작성기에 추가되는 특성입니다.</param>
        <summary>제공된 특성의 내용을 이 작성기에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특성이 작성기에 이미 포함된 다른 특성과 충돌하는 경우 마지막에 추가한 특성이 이전 특성을 대체합니다.  
  
 큰 특성 테이블을 만들 때는 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCallback%2A>을 사용하여 필요할 때까지 특성을 만드는 작업을 지연합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ownerType" />, <paramref name="dp" /> 또는 <paramref name="attributes" />이 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTable">
      <MemberSignature Language="C#" Value="public void AddTable (System.Activities.Presentation.Metadata.AttributeTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddTable(class System.Activities.Presentation.Metadata.AttributeTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddTable(System.Activities.Presentation.Metadata.AttributeTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddTable (table As AttributeTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddTable(System::Activities::Presentation::Metadata::AttributeTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.AddTable : System.Activities.Presentation.Metadata.AttributeTable -&gt; unit" Usage="attributeTableBuilder.AddTable table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Activities.Presentation.Metadata.AttributeTable" />
      </Parameters>
      <Docs>
        <param name="table">원본 특성 테이블입니다.</param>
        <summary>제공된 특성 테이블의 내용을 이 작성기에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특성이 작성기에 이미 포함된 다른 특성과 충돌하는 경우 마지막에 추가한 특성이 이전 특성을 대체합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="table" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTable">
      <MemberSignature Language="C#" Value="public System.Activities.Presentation.Metadata.AttributeTable CreateTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Activities.Presentation.Metadata.AttributeTable CreateTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTable () As AttributeTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Activities::Presentation::Metadata::AttributeTable ^ CreateTable();" />
      <MemberSignature Language="F#" Value="member this.CreateTable : unit -&gt; System.Activities.Presentation.Metadata.AttributeTable" Usage="attributeTableBuilder.CreateTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Presentation.Metadata.AttributeTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes(System.Type,System.Attribute[])" /> 호출을 통해 제공된 모든 특성 정의가 포함된 특성 테이블을 만듭니다.</summary>
        <returns>메타데이터 저장소에 전달할 수 있는 <see cref="T:System.Activities.Presentation.Metadata.AttributeTable" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 테이블은 특성 작성기의 현재 상태 스냅숏이며, 이후 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> 호출로 추가되는 특성은 테이블에 포함되지 않습니다.  
  
 특성을 선언하는 데 콜백 메서드가 사용되는 경우 이러한 메서드는 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.CreateTable%2A> 중에 확인되지 않습니다. 대신 테이블이 이러한 콜백을 포함하고 필요에 따라 확인합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateTable">
      <MemberSignature Language="C#" Value="public void ValidateTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateTable ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateTable();" />
      <MemberSignature Language="F#" Value="member this.ValidateTable : unit -&gt; unit" Usage="attributeTableBuilder.ValidateTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>작성되는 특성 테이블에 유효한 특성 정보가 포함되는지 확인합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 재정의 중 일부 <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A> 매개 변수에 전달 되는 값 클래스의 유효한 멤버를 나타내는 검사할 수 없습니다. <xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.ValidateTable%2A>은 모든 사용자 지정 특성 정보가 실제 멤버에 해당하는지 확인합니다. 이 메서드는 완료되는 데 많은 시간이 소요되므로 유효성 검사가 명시적으로 필요한 경우에만 사용하는 것이 좋습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Activities.Presentation.Metadata.AttributeTableValidationException">테이블의 상태가 잘못된 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>