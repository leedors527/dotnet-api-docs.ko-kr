<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="73cad7482ec89c2404cb253c90cebeaaff316196" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52590233" /></Metadata><TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>워크플로를 메서드 호출인 것처럼 호출할 수 있는 방법을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker>는 워크플로를 동기적으로 호출하는 데 필요한 인스턴스 및 정적 메서드와 워크플로를 비동기적으로 호출하는 데 필요한 인스턴스 메서드를 모두 포함합니다.  
  
 <xref:System.Activities.WorkflowInvoker>에서는 책갈피 지속, 언로드 또는 다시 시작과 같은 인스턴스 제어를 허용하지 않습니다. 인스턴스 제어를 원하는 경우에는 대신 <xref:System.Activities.WorkflowApplication>을 사용합니다.  
  
 인스턴스 제어를 사용하지 않고 워크플로를 동기적으로 실행하려면 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 메서드를 호출합니다. 인스턴스 제어를 사용하지 않고 워크플로를 비동기적으로 실행하려면 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> 메서드와 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 메서드의 쌍 또는 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 메서드를 사용합니다.  
  
   
  
## Examples  
 다음 예제에서는 단일 <xref:System.Activities.Statements.WriteLine> 활동으로 구성된 워크플로를 <xref:System.Activities.WorkflowInvoker>를 사용하여 동기적으로 호출합니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">이 <see cref="T:System.Activities.WorkflowInvoker" /> 클래스의 인스턴스에 의해 호출될 워크플로의 워크플로 정의입니다.</param>
        <summary><see cref="T:System.Activities.WorkflowInvoker" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker>는 워크플로를 동기적으로 호출하는 데 필요한 인스턴스 및 정적 메서드와 워크플로를 비동기적으로 호출하는 데 필요한 인스턴스 메서드를 모두 포함합니다.  
  
   
  
## Examples  
 다음 예제에서는 단일 <xref:System.Activities.Statements.WriteLine> 활동으로 구성된 워크플로를 호출합니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.IAsyncResult" /> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 자세한 내용은 [비동기 프로그래밍 개요](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">워크플로가 완료될 때 호출될 메서드입니다.</param>
        <param name="state">비동기 작업에 대한 정보를 포함하는 애플리케이션별 선택적 개체입니다.</param>
        <summary>지정한 <see cref="T:System.AsyncCallback" /> 및 사용자가 제공한 상태를 사용하여 워크플로를 비동기적으로 호출합니다.</summary>
        <returns>비동기 호출 작업에 대한 참조입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로가 완료될 때 알림을 받고 워크플로의 출력 매개 변수를 검색하려면 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 메서드에서 `callback`를 호출합니다. 워크플로가 완료되기 전에 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하면 워크플로가 완료될 때까지 차단됩니다. 워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.  
  
 이 메서드는 <xref:System.IAsyncResult> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다. 자세한 내용은 [비동기 프로그래밍 개요](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다. `LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. 이러한 인수는 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하여 검색됩니다. <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</param>
        <param name="callback">워크플로가 완료될 때 호출될 메서드입니다.</param>
        <param name="state">비동기 작업에 대한 정보를 포함하는 애플리케이션별 선택적 개체입니다.</param>
        <summary>입력 매개 변수의 지정한 <see cref="T:System.Collections.Generic.IDictionary`2" />, <see cref="T:System.AsyncCallback" /> 및 사용자가 제공한 상태를 사용하여 워크플로를 비동기적으로 호출합니다.</summary>
        <returns>비동기 호출 작업에 대한 참조입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로가 완료될 때 알림을 받고 워크플로의 출력 매개 변수를 검색하려면 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 메서드에서 `callback`를 호출합니다. 워크플로가 완료되기 전에 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하면 워크플로가 완료될 때까지 차단됩니다.  워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.  
  
 이 메서드는 <xref:System.IAsyncResult> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다. 자세한 내용은 [비동기 프로그래밍 개요](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다. `LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. 이러한 인수는 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하여 검색됩니다. <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</param>
        <param name="callback">워크플로가 완료될 때 호출될 메서드입니다.</param>
        <param name="state">비동기 작업에 대한 정보를 포함하는 애플리케이션별 선택적 개체입니다.</param>
        <summary>지정한 시간 제한 간격, <see cref="T:System.AsyncCallback" /> 및 사용자가 제공한 상태를 사용하여 워크플로를 비동기적으로 호출합니다.</summary>
        <returns>비동기 호출 작업에 대한 참조입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로가 완료될 때 알림을 받고 워크플로의 출력 매개 변수를 검색하려면 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 메서드에서 `callback`를 호출합니다. 워크플로가 완료되기 전에 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하면 워크플로가 완료될 때까지 차단됩니다. 워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 <xref:System.TimeoutException> 메서드 호출 시 워크플로가 중단되고 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>이 throw됩니다.  
  
> [!NOTE]
>  <xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다. 완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.  
  
 이 메서드는 <xref:System.IAsyncResult> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다. 자세한 내용은 [비동기 프로그래밍 개요](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다. `LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. 이러한 인수는 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하여 검색됩니다. <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</param>
        <param name="timeout">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</param>
        <param name="callback">워크플로가 완료될 때 호출될 메서드입니다.</param>
        <param name="state">비동기 작업에 대한 정보를 포함하는 애플리케이션별 선택적 개체입니다.</param>
        <summary>입력 매개 변수의 지정한 <see cref="T:System.Collections.Generic.IDictionary`2" />, 시간 제한 간격, <see cref="T:System.AsyncCallback" /> 및 사용자가 제공한 상태를 사용하여 워크플로를 비동기적으로 호출합니다.</summary>
        <returns>비동기 호출 작업에 대한 참조입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로가 완료될 때 알림을 받고 워크플로의 출력 매개 변수를 검색하려면 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 메서드에서 `callback`를 호출합니다. 워크플로가 완료되기 전에 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하면 워크플로가 완료될 때까지 차단됩니다. 워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 <xref:System.TimeoutException> 호출 시 워크플로가 중단되고 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>이 throw됩니다.  
  
> [!NOTE]
>  <xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다. 완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.  
  
 이 메서드는 <xref:System.IAsyncResult> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다. 자세한 내용은 [비동기 프로그래밍 개요](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다. `LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. 이러한 인수는 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하여 검색됩니다. <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">취소할 워크플로의 토큰입니다.</param>
        <summary>지정한 <paramref name="userState" />를 사용하여 호출된 워크플로를 취소하려고 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 매개 변수를 사용하는 `userState` 오버로드 중 하나에 의해 호출되는 워크플로만 취소할 수 있습니다.  
  
 취소에 성공 하면를 <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> 의 속성을 <xref:System.Activities.InvokeCompletedEventArgs> 전달할를 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기로 설정 되어 `true`고, 그렇지 않으면로 설정 됩니다 `false`.  
  
   
  
## Examples  
 다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다. `LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. 워크플로가 호출되면 호스트가 워크플로를 취소하려고 합니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">워크플로를 시작한 <see cref="T:System.IAsyncResult" /> 작업을 참조하는 <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />입니다.</param>
        <summary><see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> 오버로드 중 하나를 사용하여 호출한 워크플로의 결과를 반환합니다.</summary>
        <returns>워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로가 완료될 때 알림을 받고 워크플로의 출력 매개 변수를 검색하려면 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>에 의해 지정된 `callback` 메서드에서 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>를 호출합니다. 워크플로가 완료되기 전에 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하면 워크플로가 완료될 때까지 차단됩니다.  
  
 이 메서드는 <xref:System.IAsyncResult> 비동기 디자인 패턴을 사용하여 비동기적으로 호출된 워크플로의 결과를 반환합니다. 자세한 내용은 [비동기 프로그래밍 개요](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다. `LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. 이러한 인수는 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하여 검색됩니다. <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.ObjectModel.Collection`1" /> 인스턴스에 의해 호출되는 워크플로에서 사용할 수 있는 확장의 <see cref="T:System.Activities.WorkflowInvoker" />을 가져옵니다.</summary>
        <value><see cref="T:System.Collections.ObjectModel.Collection`1" /> 인스턴스에 의해 호출되는 워크플로에서 사용할 수 있는 확장의 <see cref="T:System.Activities.WorkflowInvoker" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 워크플로 호스트 작성자가 <xref:System.Activities.WorkflowInvoker> 인스턴스에 확장을 추가하여 이 인스턴스에 의해 호출되는 워크플로에서 확장을 사용할 수 있도록 하는 데 사용됩니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Activities.Tracking.TrackingParticipant> 인스턴스의 <xref:System.Activities.WorkflowInvoker.Extensions%2A> 컬렉션을 사용하여 사용자 지정 <xref:System.Activities.WorkflowInvoker>를 등록합니다. 일부인이 코드 예제는 [사용자 지정 추적](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) 샘플입니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>워크플로를 동기적으로 호출하고, 워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전을 반환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다. 모든 워크플로 실행은 호출 스레드에서 실행됩니다. 워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.Invoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 생성자로 전달된 워크플로 정의를 사용하여 워크플로를 동기적으로 호출합니다.</summary>
        <returns>워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다. 모든 워크플로 실행은 호출 스레드에서 실행됩니다. 워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.Invoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.  
  
   
  
## Examples  
 다음 예제에서는 단일 `DiceRoll` 활동으로 구성된 워크플로를 호출합니다. `DiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. `Invoke`에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다. 워크플로 호출을 두 번에 전달 된 워크플로 정의 사용 하 여 `WorkflowInvoker` 생성자입니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 워크플로의 루트 활동에 출력 인수가 없거나 호스트에 해당 활동이 필요하지 않은 경우 루트 활동을 무시할 수 있습니다. 다음 예제에서는 출력 인수를 포함하지 않는 단일 <xref:System.Activities.Statements.WriteLine> 활동으로 구성된 워크플로를 호출합니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">호출할 워크플로의 워크플로 정의입니다.</param>
        <summary>지정한 워크플로 정의를 사용하여 워크플로를 동기적으로 호출합니다.</summary>
        <returns>워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다. 모든 워크플로 실행은 호출 스레드에서 실행됩니다. 워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.Invoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.  
  
   
  
## Examples  
 다음 예제에서는 단일 `DiceRoll` 활동으로 구성된 워크플로를 호출합니다. `DiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. `Invoke`에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 워크플로의 루트 활동에 출력 인수가 없거나 호스트에 해당 활동이 필요하지 않은 경우 루트 활동을 무시할 수 있습니다. 다음 예제에서는 출력 인수를 포함하지 않는 단일 <xref:System.Activities.Statements.WriteLine> 활동으로 구성된 워크플로를 호출합니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</param>
        <summary>입력 매개 변수의 지정한 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />를 사용하여 <see cref="T:System.Collections.Generic.IDictionary`2" /> 생성자로 전달된 활동을 동기적으로 호출합니다.</summary>
        <returns>워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다. 모든 워크플로 실행은 호출 스레드에서 실행됩니다. 워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.Invoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.  
  
   
  
## Examples  
 다음 예제에서는 두 개의 입력 인수와 두 개의 출력 인수를 포함하는 단일 `Divide` 활동으로 구성된 워크플로를 호출합니다. 워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 `arguments` 사전이 전달됩니다. `Invoke`에 대한 호출이 반환되면 각 출력 인수가 `outputs` 사전에 반환됩니다. 이렇게 반환되는 인수에는 인수 이름이 키로 지정됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 워크플로에서 파생 되는 경우 <xref:System.Activities.ActivityWithResult>와 같은 `CodeActivity<TResult>` 또는 `Activity<TResult>`, 및 잘 정의 된 것 외에도 출력 인수가 <xref:System.Activities.Activity%601.Result%2A> 출력 인수의 비 제네릭 오버 로드를 `Invoke`,이 예에 사용 해야 추가 인수를 검색 하는 순서입니다. 이렇게 하려면에 전달 된 워크플로 정의 `WorkflowInvoker` 생성자 형식 이어야 합니다 <xref:System.Activities.Activity>합니다. 이 예제는 `Divide` 에서 파생 되는 활동 `CodeActivity<int>`로 선언 됩니다 <xref:System.Activities.Activity> 이 오버 로드 되도록 `Invoke`는 단일 반환 값 대신 인수 사전을 반환 하는 합니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</param>
        <summary>지정한 시간 제한 간격을 사용하여 워크플로를 동기적으로 호출합니다.</summary>
        <returns>워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다. 모든 워크플로 실행은 호출 스레드에서 실행됩니다. 워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.  
  
> [!NOTE]
>  <xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다. 완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.  
  
   
  
## Examples  
 다음 예제에서는 두 개의 <xref:System.Activities.Statements.WriteLine> 활동과 <xref:System.Activities.Statements.Delay>이 1분으로 구성된 하나의 <xref:System.Activities.Statements.Delay.Duration%2A> 활동을 포함하는 워크플로를 호출합니다. 이 워크플로는 두 번 호출됩니다. 즉, 처음에는 시간 제한 간격이 2분으로 호출되고, 두 번째에는 시간 제한 간격이 30초로 호출됩니다. 첫 번째 워크플로는 완료되지만 두 번째 워크플로는 그렇지 않으며 <xref:System.TimeoutException>이 throw되고 다음 메시지가 표시됩니다.  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 사용 하는 예제에 대 한 `Invoke` 출력 인수를 사용 하 여 오버 로드를 참조 하세요. <xref:System.Activities.WorkflowInvoker.Invoke%2A> 시간 제한 간격 없이이 오버 로드와 동일한 매개 변수를 사용 하 여 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">호출할 워크플로의 워크플로 정의입니다.</param>
        <param name="inputs">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</param>
        <summary>지정한 워크플로 정의 및 입력 매개 변수의 <see cref="T:System.Collections.Generic.IDictionary`2" />를 사용하여 워크플로를 동기적으로 호출합니다.</summary>
        <returns>워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다. 모든 워크플로 실행은 호출 스레드에서 실행됩니다. 워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.Invoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.  
  
   
  
## Examples  
 다음 예제에서는 두 개의 입력 인수와 두 개의 출력 인수를 포함하는 단일 `Divide` 활동으로 구성된 워크플로를 호출합니다. 워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 `arguments` 사전이 전달됩니다. `Invoke`에 대한 호출이 반환되면 각 출력 인수가 `outputs` 사전에 반환됩니다. 이렇게 반환되는 인수에는 인수 이름이 키로 지정됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 워크플로에서 파생 되는 경우 <xref:System.Activities.ActivityWithResult>와 같은 `CodeActivity<TResult>` 또는 `Activity<TResult>`, 및 잘 정의 된 것 외에도 출력 인수가 <xref:System.Activities.Activity%601.Result%2A> 출력 인수의 비 제네릭 오버 로드를 `Invoke`,이 예에 사용 해야 추가 인수를 검색 하는 순서입니다. 이렇게 하려면 `Invoke`로 전달된 워크플로 정의가 <xref:System.Activities.Activity> 형식이어야 합니다. 이 예제는 `Divide` 에서 파생 되는 활동 `CodeActivity<int>`로 선언 됩니다 <xref:System.Activities.Activity> 이 오버 로드 되도록 `Invoke`는 단일 반환 값 대신 인수 사전을 반환 하는 합니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">호출할 워크플로의 워크플로 정의입니다.</param>
        <param name="timeout">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</param>
        <summary>지정한 워크플로 정의 및 시간 제한 간격을 사용하여 워크플로를 동기적으로 호출합니다.</summary>
        <returns>워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다. 모든 워크플로 실행은 호출 스레드에서 실행됩니다. 워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.  
  
> [!NOTE]
>  <xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다. 완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.  
  
   
  
## Examples  
 다음 예제에서는 두 개의 <xref:System.Activities.Statements.WriteLine> 활동과 <xref:System.Activities.Statements.Delay>이 1분으로 구성된 하나의 <xref:System.Activities.Statements.Delay.Duration%2A> 활동을 포함하는 워크플로를 호출합니다. 이 워크플로는 두 번 호출됩니다. 즉, 처음에는 시간 제한 간격이 2분으로 호출되고, 두 번째에는 시간 제한 간격이 30초로 호출됩니다. 첫 번째 워크플로는 완료되지만 두 번째 워크플로는 그렇지 않으며 <xref:System.TimeoutException>이 throw됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 사용 하는 예제에 대 한 `Invoke` 출력 인수를 사용 하 여 오버 로드를 참조 하세요. <xref:System.Activities.WorkflowInvoker.Invoke%2A> 시간 제한 간격 없이이 오버 로드와 동일한 매개 변수를 사용 하 여 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</param>
        <param name="timeout">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</param>
        <summary>입력 매개 변수의 지정한 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 및 지정한 시간 제한 간격을 사용하여 <see cref="T:System.Collections.Generic.IDictionary`2" /> 생성자로 전달된 활동을 동기적으로 호출합니다.</summary>
        <returns>워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다. 모든 워크플로 실행은 호출 스레드에서 실행됩니다. 워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.  
  
> [!NOTE]
>  <xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다. 완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.  
  
   
  
## Examples  
 다음 예제에서는 두 개의 <xref:System.Activities.Statements.WriteLine> 활동과 <xref:System.Activities.Statements.Delay>이 1분으로 구성된 하나의 <xref:System.Activities.Statements.Delay.Duration%2A> 활동을 포함하는 워크플로를 호출합니다. 이 워크플로는 두 번 호출됩니다. 즉, 처음에는 시간 제한 간격이 2분으로 호출되고, 두 번째에는 시간 제한 간격이 30초로 호출됩니다. 첫 번째 워크플로는 완료되지만 두 번째 워크플로는 그렇지 않으며 <xref:System.TimeoutException>이 throw되고 다음 메시지가 표시됩니다.  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 사용 하는 예제에 대 한 `Invoke` 입력 및 출력 인수를 사용 하 여 오버 로드를 참조 하세요. <xref:System.Activities.WorkflowInvoker.Invoke%2A> 시간 제한 간격 없이이 오버 로드와 동일한 매개 변수를 사용 하 여 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">호출할 워크플로의 워크플로 정의입니다.</param>
        <param name="inputs">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</param>
        <param name="timeout">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</param>
        <summary>지정한 워크플로 정의, 입력 매개 변수의 <see cref="T:System.Collections.Generic.IDictionary`2" /> 및 시간 제한 간격을 사용하여 워크플로를 동기적으로 호출합니다.</summary>
        <returns>워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다. 모든 워크플로 실행은 호출 스레드에서 실행됩니다. 워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.  
  
> [!NOTE]
>  <xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다. 완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.  
  
   
  
## Examples  
 다음 예제에서는 두 개의 <xref:System.Activities.Statements.WriteLine> 활동과 <xref:System.Activities.Statements.Delay>이 1분으로 구성된 하나의 <xref:System.Activities.Statements.Delay.Duration%2A> 활동을 포함하는 워크플로를 호출합니다. 이 워크플로는 두 번 호출됩니다. 즉, 처음에는 시간 제한 간격이 2분으로 호출되고, 두 번째에는 시간 제한 간격이 30초로 호출됩니다. 첫 번째 워크플로는 완료되지만 두 번째 워크플로는 그렇지 않으며 <xref:System.TimeoutException>이 throw됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 사용 하는 예제에 대 한 `Invoke` 입력 및 출력 인수를 사용 하 여 오버 로드를 참조 하세요. <xref:System.Activities.WorkflowInvoker.Invoke%2A> 시간 제한 간격 없이이 오버 로드와 동일한 매개 변수를 사용 하 여 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">워크플로 형식입니다.</typeparam>
        <param name="workflow">호출할 워크플로의 워크플로 정의입니다. 워크플로 정의는 <see cref="T:System.Activities.ActivityWithResult" />에서 파생해야 합니다.</param>
        <summary><see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 생성자로 전달된 워크플로 정의를 사용하여 워크플로를 동기적으로 호출합니다.</summary>
        <returns>작업 실행 결과를 포함하는 TResult 형식의 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다. 모든 워크플로 실행은 호출 스레드에서 실행됩니다. 워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.Invoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.  
  
   
  
## Examples  
 단일 구성 된 워크플로 호출 하는 다음 예제에서는 `Add` 두 개의 입력된 인수가 포함 된 활동에서 파생 되므로 및 `CodeActivity<int>` 잘 정의 된 있는 <xref:System.Activities.Activity%601.Result%2A> 출력 인수입니다. 워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 `arguments` 사전이 전달됩니다. 경우에 대 한 호출 `Invoke` 의 값을 반환 합니다 <xref:System.Activities.Activity%601.Result%2A> 출력 인수가 반환 됩니다. 이 코드 예제는 기반을 둔 합니다 [WorkflowInvoker 클래스를 사용 하 여](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) 샘플입니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">워크플로 형식입니다.</typeparam>
        <param name="workflow">호출할 워크플로의 워크플로 정의입니다.</param>
        <param name="inputs">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</param>
        <summary>지정한 워크플로 정의 및 입력 매개 변수의 <see cref="T:System.Collections.Generic.IDictionary`2" />를 사용하여 워크플로를 동기적으로 호출합니다.</summary>
        <returns>작업 실행 결과를 포함하는 TResult 형식의 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다. 모든 워크플로 실행은 호출 스레드에서 실행됩니다. 워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.Invoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.  
  
> [!NOTE]
>  <xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다. 완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.  
  
   
  
## Examples  
 단일 구성 된 워크플로 호출 하는 다음 예제에서는 `Add` 두 개의 입력된 인수가 포함 된 활동에서 파생 되므로 및 `CodeActivity<int>` 잘 정의 된 있는 <xref:System.Activities.Activity%601.Result%2A> 출력 인수입니다. 워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 `arguments` 사전이 전달됩니다. 경우에 대 한 호출 `Invoke` 의 값을 반환 합니다 <xref:System.Activities.Activity%601.Result%2A> 출력 인수가 반환 됩니다. 이 코드 예제는 기반을 둔 합니다 [WorkflowInvoker 클래스를 사용 하 여](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) 샘플입니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">워크플로 형식입니다.</typeparam>
        <param name="workflow">호출할 워크플로의 워크플로 정의입니다.</param>
        <param name="inputs">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</param>
        <param name="timeout">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</param>
        <summary>지정한 워크플로 정의, 입력 매개 변수의 <see cref="T:System.Collections.Generic.IDictionary`2" /> 및 시간 제한 간격을 사용하여 워크플로를 동기적으로 호출합니다.</summary>
        <returns>작업 실행 결과를 포함하는 TResult 형식의 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다. 모든 워크플로 실행은 호출 스레드에서 실행됩니다. 워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.  
  
> [!NOTE]
>  <xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다. 완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.  
  
   
  
## Examples  
 단일 구성 된 워크플로 호출 하는 다음 예제에서는 `Add` 두 개의 입력된 인수가 포함 된 활동에서 파생 되므로 및 `CodeActivity<int>` 잘 정의 된 있는 <xref:System.Activities.Activity%601.Result%2A> 출력 인수입니다. 워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 `arguments` 사전이 전달됩니다. 경우에 대 한 호출 `Invoke` 의 값을 반환 합니다 <xref:System.Activities.Activity%601.Result%2A> 출력 인수가 반환 됩니다. 이 코드 예제는 기반을 둔 합니다 [WorkflowInvoker 클래스를 사용 하 여](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) 샘플입니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; *  * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">워크플로 형식입니다.</typeparam>
        <param name="workflow">호출할 워크플로의 워크플로 정의입니다.</param>
        <param name="inputs">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</param>
        <param name="additionalOutputs">인수 이름으로 키가 지정된 워크플로에 대한 추가 출력 매개 변수의 사전입니다.</param>
        <param name="timeout">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</param>
        <summary>지정한 워크플로 정의, 입력 매개 변수의 <see cref="T:System.Collections.Generic.IDictionary`2" />, 추가 출력 매개 변수의 <see cref="T:System.Collections.Generic.IDictionary`2" /> 및 시간 제한 간격을 사용하여 워크플로를 동기적으로 호출합니다.</summary>
        <returns>작업 실행 결과를 포함하는 TResult 형식의 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다. 모든 워크플로 실행은 호출 스레드에서 실행됩니다. 워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.  
  
> [!NOTE]
>  <xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다. 완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.  
  
   
  
## Examples  
 단일 구성 된 워크플로 호출 하는 다음 예제에서는 `Add` 두 개의 입력된 인수가 포함 된 활동에서 파생 되므로 및 `CodeActivity<int>` 잘 정의 된 있는 <xref:System.Activities.Activity%601.Result%2A> 출력 인수입니다. 워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 `arguments` 사전이 전달됩니다. 경우에 대 한 호출 `Invoke` 의 값을 반환 합니다 <xref:System.Activities.Activity%601.Result%2A> 출력 인수가 반환 됩니다. 이 코드 예제는 기반을 둔 합니다 [WorkflowInvoker 클래스를 사용 하 여](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) 샘플입니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다. 워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.  
  
 이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다. 자세한 내용은 [이벤트 기반 비동기 패턴 개요](https://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>워크플로를 비동기적으로 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다. 워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.  
  
 이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다. 자세한 내용은 [이벤트 기반 비동기 패턴 개요](https://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다. `LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. 워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</param>
        <summary>입력 매개 변수의 지정한 <see cref="T:System.Collections.Generic.IDictionary`2" />를 사용하여 워크플로를 비동기적으로 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다. 워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.  
  
 이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다. 자세한 내용은 [이벤트 기반 비동기 패턴 개요](https://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다. `LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. 워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">이 특정 비동기 호출 작업을 다른 현재 비동기 호출 작업과 구별하는 데 사용되는 사용자 제공 개체입니다.</param>
        <summary>지정한 고유 식별자를 사용하여 워크플로를 비동기적으로 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `userState` 매개 변수는 현재 작업에 대해 현재 실행 중인 모든 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 작업에서 고유해야 합니다. `userState` 매개 변수가 고유하지 않으면 <xref:System.ArgumentException>이 throw됩니다. `userState`를 사용하여 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>에서 워크플로를 식별하고 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>를 통해 워크플로를 취소할 수 있습니다.  
  
 워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다. 워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.  
  
 이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다. 자세한 내용은 [이벤트 기반 비동기 패턴 개요](https://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다. `LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. 워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</param>
        <summary>지정한 시간 제한 간격을 사용하여 워크플로를 비동기적으로 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다. 워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.  
  
> [!NOTE]
>  <xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다. 완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.  
  
 이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다. 자세한 내용은 [이벤트 기반 비동기 패턴 개요](https://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다. `LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. 워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</param>
        <param name="userState">이 특정 비동기 호출 작업을 다른 현재 비동기 호출 작업과 구별하는 데 사용되는 사용자 제공 개체입니다.</param>
        <summary>입력 매개 변수의 지정한 <see cref="T:System.Collections.Generic.IDictionary`2" /> 및 고유 식별자를 사용하여 워크플로를 비동기적으로 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `userState` 매개 변수는 현재 작업에 대해 현재 실행 중인 모든 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 작업에서 고유해야 합니다. `userState`가 고유하지 않으면 <xref:System.ArgumentException>이 throw됩니다. `userState`를 사용하여 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>에서 워크플로를 식별하고 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>를 통해 워크플로를 취소할 수 있습니다.  
  
 워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다. 워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.  
  
 이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다. 자세한 내용은 [이벤트 기반 비동기 패턴 개요](https://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다. `LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. 워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</param>
        <param name="timeout">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</param>
        <summary>입력 매개 변수의 지정한 <see cref="T:System.Collections.Generic.IDictionary`2" /> 및 지정한 시간 제한 간격을 사용하여 워크플로를 비동기적으로 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다. 워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.  
  
> [!NOTE]
>  <xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다. 완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.  
  
 이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다. 자세한 내용은 [이벤트 기반 비동기 패턴 개요](https://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다. `LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. 워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</param>
        <param name="userState">이 특정 비동기 호출 작업을 다른 현재 비동기 호출 작업과 구별하는 데 사용되는 사용자 제공 개체입니다.</param>
        <summary>지정한 시간 제한 간격 및 고유 식별자를 사용하여 워크플로를 비동기적으로 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `userState` 매개 변수는 현재 작업에 대해 현재 실행 중인 모든 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 작업에서 고유해야 합니다. `userState`가 고유하지 않으면 <xref:System.ArgumentException>이 throw됩니다. `userState`를 사용하여 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>에서 워크플로를 식별하고 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>를 통해 워크플로를 취소할 수 있습니다.  
  
 워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다. 워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.  
  
> [!NOTE]
>  <xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다. 완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.  
  
 이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다. 자세한 내용은 [이벤트 기반 비동기 패턴 개요](https://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다. `LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. 워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</param>
        <param name="timeout">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</param>
        <param name="userState">이 특정 비동기 호출 작업을 다른 현재 비동기 호출 작업과 구별하는 데 사용되는 사용자 제공 개체입니다.</param>
        <summary>입력 매개 변수의 지정한 <see cref="T:System.Collections.Generic.IDictionary`2" />, 지정한 시간 제한 간격 및 고유 식별자를 사용하여 워크플로를 비동기적으로 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `userState` 매개 변수는 현재 작업에 대해 현재 실행 중인 모든 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 작업에서 고유해야 합니다. `userState`가 고유하지 않으면 <xref:System.ArgumentException>이 throw됩니다. `userState`를 사용하여 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>에서 워크플로를 식별하고 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>를 통해 워크플로를 취소할 수 있습니다.  
  
 워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다. 워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.  
  
> [!NOTE]
>  <xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다. 완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.  
  
 이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다. 자세한 내용은 [이벤트 기반 비동기 패턴 개요](https://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다. `LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. 워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> 오버로드 중 하나에 의해 호출된 워크플로가 완료되거나 취소될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이를 처리하면 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 오버로드 중 하나를 사용하여 호출된 워크플로가 완료되었는지 확인하고 완료된 워크플로의 출력 인수를 검색할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다. `LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다. 워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>