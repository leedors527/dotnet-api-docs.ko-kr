<Type Name="MemoryManager&lt;T&gt;" FullName="System.Buffers.MemoryManager&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d0cd24dac64b5875058a1e88ea635532a8910af8" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58700701" /></Metadata><TypeSignature Language="C#" Value="public abstract class MemoryManager&lt;T&gt; : System.Buffers.IMemoryOwner&lt;T&gt;, System.Buffers.IPinnable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MemoryManager`1&lt;T&gt; extends System.Object implements class System.Buffers.IMemoryOwner`1&lt;!T&gt;, class System.Buffers.IPinnable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.MemoryManager`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MemoryManager(Of T)&#xA;Implements IMemoryOwner(Of T), IPinnable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class MemoryManager abstract : System::Buffers::IMemoryOwner&lt;T&gt;, System::Buffers::IPinnable" />
  <TypeSignature Language="F#" Value="type MemoryManager&lt;'T&gt; = class&#xA;    interface IMemoryOwner&lt;'T&gt;&#xA;    interface IDisposable&#xA;    interface IPinnable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Buffers.IMemoryOwner&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Buffers.IPinnable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">이 메모리 관리자에 의해 관리 되는 메모리 버퍼에 있는 항목의 형식입니다.</typeparam>
    <summary><see cref="T:System.Memory`1" />의 구현을 바꾸는데 사용되는 추상 기본 클래스입니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

`MemoryManager<T>` 클래스는 데 사용 되는 형식에 대 한 지식을 확장 <xref:System.Memory%601> 표현할 수 있습니다. 예를 들어에서 파생할 수 있습니다 `MemoryManager<T>` 수 있도록 <xref:System.Memory%601> 에서 지원 되는 <xref:System.Runtime.InteropServices.SafeHandle>합니다.

> [!NOTE]
> `MemoryManager<T>` 클래스는 고급 시나리오를 위한 것입니다. 대부분의 개발자는 사용할 필요가 없습니다.

       ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MemoryManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MemoryManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Buffers.MemoryManager`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMemory">
      <MemberSignature Language="C#" Value="protected Memory&lt;T&gt; CreateMemory (int length);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Memory`1&lt;!T&gt; CreateMemory(int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.CreateMemory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function CreateMemory (length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Memory&lt;T&gt; CreateMemory(int length);" />
      <MemberSignature Language="F#" Value="member this.CreateMemory : int -&gt; Memory&lt;'T&gt;" Usage="memoryManager.CreateMemory length" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="length">오프셋 0에서 시작하는 메모리 버퍼의 요소 수입니다.</param>
        <summary>현재 메모리 관리자가 관리하는 메모리에서 지정된 수의 요소로 구성된 메모리 버퍼를 반환합니다.</summary>
        <returns>메모리 버퍼입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMemory">
      <MemberSignature Language="C#" Value="protected Memory&lt;T&gt; CreateMemory (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Memory`1&lt;!T&gt; CreateMemory(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.CreateMemory(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function CreateMemory (start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Memory&lt;T&gt; CreateMemory(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.CreateMemory : int * int -&gt; Memory&lt;'T&gt;" Usage="memoryManager.CreateMemory (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">반환된 메모리 버퍼가 시작되는 요소의 오프셋입니다.</param>
        <param name="length">반환된 메모리 버퍼에 포함할 요소 수입니다.</param>
        <summary>현재 메모리 관리자가 관리하는 메모리에서 지정된 오프셋에서 시작하는 지정된 수의 요소로 구성된 메모리 버퍼를 반환합니다.</summary>
        <returns>오프셋 <paramref name="start" />에서 시작하는 <paramref name="length" /> 요소로 구성된 메모리 버퍼입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit" Usage="memoryManager.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
        <summary>현재 메모리 관리자가 사용하는 모든 리소스를 해제합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpan">
      <MemberSignature Language="C#" Value="public abstract Span&lt;T&gt; GetSpan ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Span`1&lt;!T&gt; GetSpan() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.GetSpan" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetSpan () As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Span&lt;T&gt; GetSpan();" />
      <MemberSignature Language="F#" Value="abstract member GetSpan : unit -&gt; Span&lt;'T&gt;" Usage="memoryManager.GetSpan " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>기본 메모리 버퍼를 래핑하는 메모리 범위를 반환합니다.</summary>
        <returns>기본 메모리 버퍼를 래핑하는 메모리 범위입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Memory">
      <MemberSignature Language="C#" Value="public virtual Memory&lt;T&gt; Memory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Memory`1&lt;!T&gt; Memory" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.MemoryManager`1.Memory" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Memory As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Memory&lt;T&gt; Memory { Memory&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Memory : Memory&lt;'T&gt;" Usage="System.Buffers.MemoryManager&lt;'T&gt;.Memory" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Buffers.IMemoryOwner`1.Memory</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Buffers.MemoryManager`1" />이 처리한 메모리 블록을 가져옵니다.</summary>
        <value>이 메모리 블록 처리 <see cref="T:System.Buffers.MemoryManager`1" />합니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pin">
      <MemberSignature Language="C#" Value="public abstract System.Buffers.MemoryHandle Pin (int elementIndex = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Buffers.MemoryHandle Pin(int32 elementIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.Pin(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Pin (Optional elementIndex As Integer = 0) As MemoryHandle" />
      <MemberSignature Language="F#" Value="abstract member Pin : int -&gt; System.Buffers.MemoryHandle" Usage="memoryManager.Pin elementIndex" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Buffers.IPinnable.Pin(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.MemoryHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="elementIndex">반환된 <see cref="T:System.Buffers.MemoryHandle" /> 지점에 메모리 버퍼 내의 요소에 대한 오프셋입니다.</param>
        <summary>고정된 메모리 및 메모리 주소를 가져올 수 있는 핸들을 반환합니다.</summary>
        <returns>고정된 메모리에 대한 핸들입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>메모리 관리자가 사용하는 모든 리소스를 해제합니다.</summary>
        <remarks>이 메서드는 메모리 관리자의 제공 <see cref="M:System.IDisposable.Dispose" /> 구현 합니다.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetArray">
      <MemberSignature Language="C#" Value="protected internal virtual bool TryGetArray (out ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool TryGetArray([out] valuetype System.ArraySegment`1&lt;!T&gt;&amp; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.TryGetArray(System.ArraySegment{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function TryGetArray (ByRef segment As ArraySegment(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool TryGetArray([Runtime::InteropServices::Out] ArraySegment&lt;T&gt; % segment);" />
      <MemberSignature Language="F#" Value="abstract member TryGetArray :  -&gt; bool&#xA;override this.TryGetArray :  -&gt; bool" Usage="memoryManager.TryGetArray segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="segment">기록할 배열 세그먼트입니다.</param>
        <summary>배열 세그먼트를 반환합니다.</summary>
        <returns>메서드가 배열 세그먼트 검색을 성공하면<see langword="true" /> 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>이 메서드가 재정의 되지 않은 경우 기본 배열 세그먼트를 반환 합니다.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unpin">
      <MemberSignature Language="C#" Value="public abstract void Unpin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unpin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.MemoryManager`1.Unpin" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Unpin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Unpin();" />
      <MemberSignature Language="F#" Value="abstract member Unpin : unit -&gt; unit" Usage="memoryManager.Unpin " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Buffers.IPinnable.Unpin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>가비지 수집기를 자유롭게 이동할 수 있도록 고정된 메모리를 고정 해제합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>