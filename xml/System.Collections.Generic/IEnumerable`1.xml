<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="67d8bd93d39deef2a4d4ae6f1198768fda753482" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58745689" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerable(Of Out T)&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerable : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type seq&lt;'T&gt; = interface&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">열거할 개체의 형식입니다.</typeparam>
    <summary>지정된 형식의 컬렉션을 단순하게 반복할 수 있도록 지원하는 열거자를 노출합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerable%601> 컬렉션에 대 한 기본 인터페이스는 <xref:System.Collections.Generic> 와 같은 네임 스페이스 <xref:System.Collections.Generic.List%601>, <xref:System.Collections.Generic.Dictionary%602>, 및 <xref:System.Collections.Generic.Stack%601> 및 다른 일반 컬렉션과 같은 <xref:System.Collections.ObjectModel.ObservableCollection%601> 및 <xref:System.Collections.Concurrent.ConcurrentStack%601>합니다. 구현 하는 컬렉션 <xref:System.Collections.Generic.IEnumerable%601> 를 사용 하 여 열거할 수는 `foreach` 문입니다.  
  
 이 인터페이스는 제네릭이 아닌 버전을 참조 하세요. <xref:System.Collections.IEnumerable?displayProperty=nameWithType>합니다.  
  
 <xref:System.Collections.Generic.IEnumerable%601> 이 인터페이스를 구현 하는 경우 구현 해야 하는 단일 메서드를 포함 합니다. <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>를 반환 하는 <xref:System.Collections.Generic.IEnumerator%601> 개체입니다. 반환 된 <xref:System.Collections.Generic.IEnumerator%601> 노출 하 여 컬렉션을 반복 하는 기능을 제공 된 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 구현 하는 방법에 설명 합니다 <xref:System.Collections.Generic.IEnumerable%601> 인터페이스 및 해당 구현을 사용 하 여 LINQ 쿼리를 만드는 방법. 구현 하는 경우 <xref:System.Collections.Generic.IEnumerable%601>를 구현 해야 <xref:System.Collections.Generic.IEnumerator%601> 또는 C#에 해당, 사용할 수 있습니다 합니다 [생성](~/docs/csharp/language-reference/keywords/yield.md) 키워드입니다. 구현 <xref:System.Collections.Generic.IEnumerator%601> 도 필요 <xref:System.IDisposable> 구현 하려면이 예제에 표시 됩니다.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 다른 C# 예제를 구현 하는 방법에 설명 합니다 <xref:System.Collections.Generic.IEnumerable%601> 인터페이스를 참조 하십시오는 [제네릭 샘플](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)합니다. 이 샘플에서는 합니다 `yield` 키워드를 구현 하는 대신 <xref:System.Collections.Generic.IEnumerator%601>합니다.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 제네릭이 아닌 컬렉션을 사용 하 여 패리티에 포함 된 구현 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 예상 하는 메서드에 전달할 제네릭 컬렉션을 허용을 <see cref="T:System.Collections.IEnumerable" /> 개체입니다.</para></block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
    <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">연습: Visual Basic에서 IEnumerable(Of T) 구현</related>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">반복기(C# 및 Visual Basic)</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593">제네릭 샘플</related>
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Out T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="seq.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
        <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 된 <xref:System.Collections.Generic.IEnumerator%601> 노출 하 여 컬렉션을 반복 하는 기능을 제공 된 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 속성입니다. 열거자를 사용 하 여 컬렉션에서 데이터를 읽을 수 있지만 컬렉션을 수정할 수는 없습니다.  
  
 처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다. 이 위치에서 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>는 정의되지 않습니다. 따라서 호출 해야 합니다 <xref:System.Collections.IEnumerator.MoveNext%2A> 해당 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소를 이동 하는 방법 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>합니다.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 될 때까지 동일한 개체를 반환 <xref:System.Collections.IEnumerator.MoveNext%2A> 라고 다시 <xref:System.Collections.IEnumerator.MoveNext%2A> 설정 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 다음 요소에 있습니다.  
  
 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다. 열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다. 마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 정의 되지 않습니다. <xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 컬렉션의 첫 번째 요소로 다시 설정할 수 없으므로 대신 새 열거자 인스턴스를 만들어야 합니다.  

 요소를 추가, 수정 또는 삭제 하는 등 컬렉션에 변경 내용이 열거자의 동작은 정의 되지 않습니다.  
  
 열거자는 없으므로 컬렉션에 대 한 단독 액세스 열거자의 컬렉션은 변경으로 들이 유효한 상태로 유지 합니다. 컬렉션 변경 되 면 열거자가 무효화 등 추가, 수정 또는 요소를 삭제 하 고 예기치 않은 결과가 발생할 수 있습니다. 또한 컬렉션 열거는 스레드로부터 안전한 프로시저가 아닙니다. 스레드로부터의 안전성을 보장 하기 위해 열거자 동안 컬렉션을 잠글 하거나 컬렉션에 대해 동기화를 구현 해야 합니다.  
  
 컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 네임 스페이스 동기화 되지 않았습니다.  
  
   
  
## Examples  
 다음 예제에서는 구현 하는 방법에 설명 합니다 <xref:System.Collections.Generic.IEnumerable%601> 인터페이스를 사용 하 여 구현에는 LINQ 쿼리를 만듭니다. 구현 하는 경우 <xref:System.Collections.Generic.IEnumerable%601>를 구현 해야 <xref:System.Collections.Generic.IEnumerator%601> 또는 C#에 해당, 사용할 수 있습니다 합니다 [생성](~/docs/csharp/language-reference/keywords/yield.md) 키워드입니다. 구현 <xref:System.Collections.Generic.IEnumerator%601> 도 필요 <xref:System.IDisposable> 구현 하려면이 예제에 표시 됩니다.  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 다른 C# 예제를 구현 하는 방법에 설명 합니다 <xref:System.Collections.Generic.IEnumerable%601> 인터페이스를 참조 하십시오는 [제네릭 샘플](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593)합니다. 이 샘플 사용 합니다 `yield` 키워드를 구현 하는 대신 <xref:System.Collections.Generic.IEnumerator%601>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
        <related type="Article" href="https://msdn.microsoft.com/library/c60d7589-51f2-4463-a2d5-22506bbc1554">연습: Visual Basic에서 IEnumerable(Of T) 구현</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">반복기(C# 및 Visual Basic)</related>
      </Docs>
    </Member>
  </Members>
</Type>