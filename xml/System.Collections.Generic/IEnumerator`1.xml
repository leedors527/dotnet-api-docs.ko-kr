<Type Name="IEnumerator&lt;T&gt;" FullName="System.Collections.Generic.IEnumerator&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ee84b88599b532484e038d634a585401c9d8131b" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58682968" /></Metadata><TypeSignature Language="C#" Value="public interface IEnumerator&lt;out T&gt; : IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerator`1&lt;+ T&gt; implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerator`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumerator(Of Out T)&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumerator : IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type IEnumerator&lt;'T&gt; = interface&#xA;    interface IDisposable&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">열거할 개체의 형식입니다.</typeparam>
    <summary>제네릭 컬렉션을 단순하게 반복할 수 있도록 지원합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerator%601> 모든 제네릭 열거자에 대 한 기본 인터페이스가입니다.  
  
 합니다 `foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual Basic에서) 열거자의 복잡성을 숨깁니다.  그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.  
  
 열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.  
  
 처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다. 이 위치에서 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>는 정의되지 않습니다. 따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>는 <xref:System.Collections.IEnumerator.MoveNext%2A>가 호출될 때까지 동일한 개체를 반환합니다. <xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 다음 요소로 설정합니다.  
  
 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다. 열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다. 마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 정의 되지 않습니다. <xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 컬렉션의 첫 번째 요소로 다시 설정할 수 없으므로 대신 새 열거자 인스턴스를 만들어야 합니다.  
  
 <xref:System.Collections.IEnumerator.Reset%2A> 메서드는 COM 상호 운용성을 위해 제공 됩니다. 이 반드시 않아도 구현할 수 있습니다. 대신, 구현자 throw 하기만 하면를 <xref:System.NotSupportedException>입니다. 그러나이 작업을 수행 하려는 경우 해야 호출자에 의존 합니다 <xref:System.Collections.IEnumerator.Reset%2A> 기능입니다.  
  
 요소를 추가, 수정 또는 삭제 하는 등 컬렉션에 변경 내용이 열거자의 동작은 정의 되지 않습니다.  
  
 열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다. 여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.  
  
 <xref:System.Collections.Generic?displayProperty=nameWithType> 네임스페이스에서 컬렉션의 기본 구현은 동기화되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 구현을 보여 줍니다는 <xref:System.Collections.Generic.IEnumerator%601> 사용자 지정 개체의 컬렉션 클래스에 대 한 인터페이스입니다. 사용자 지정 개체 유형의 인스턴스인 `Box`, 컬렉션 클래스 이며 `BoxCollection`합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Collections.Generic.ICollection%601> 인터페이스입니다.  
  
 [!code-csharp[System.Collections.Generic.BoxExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxexamples/cs/program.cs#3)]
 [!code-vb[System.Collections.Generic.BoxExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxexamples/vb/program.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>제네릭이 아닌을 구현 해야이 인터페이스를 구현 <see cref="T:System.Collections.IEnumerator" /> 인터페이스입니다. 합니다 <see cref="M:System.Collections.IEnumerator.MoveNext" /> 및 <see cref="M:System.Collections.IEnumerator.Reset" /> 메서드 종속 되지 않는 <typeparamref name="T" />, 제네릭이 아닌 인터페이스에만 나타납니다. <see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> 속성 두 인터페이스 모두에 표시 되 고 반환 형식이 다릅니다. 제네릭이 아닌 <see cref="P:System.Collections.IEnumerator.Current" /> 명시적 인터페이스 구현으로 속성입니다. 따라서 제네릭 인터페이스를 사용 하는 제네릭이 아닌 인터페이스의 소비자입니다.  
  
또한 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 구현 <see cref="T:System.IDisposable" />를 구현 해야 합니다 <see cref="M:System.IDisposable.Dispose" /> 메서드. 이 통해 데이터베이스 연결을 닫거나 다른 리소스를 사용 하는 경우 파일 핸들 또는 이와 유사한 작업을 해제할 수 있습니다. 삭제 하기 위해 추가 리소스가 없는 경우 빈 제공 <see cref="M:System.IDisposable.Dispose" /> 구현 합니다.</para></block>
    <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
    <altmember cref="T:System.Collections.Generic.ICollection`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.IEnumerator`1.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="F#" Value="member this.Current : 'T" Usage="System.Collections.Generic.IEnumerator&lt;'T&gt;.Current" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Current { T get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컬렉션에서 열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
        <value>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 다음 조건 중 하나라도 아래 정의 되어 있지 않습니다.  
  
-   열거자가 만들어진 후에 즉시 열거자는 컬렉션의 첫 번째 요소 앞 배치 됩니다.   <xref:System.Collections.IEnumerator.MoveNext%2A> 호출 하 여 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소를 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>입니다.  
  
-   마지막으로 호출한 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, 컬렉션의 끝을 나타내는입니다.  
  
-   요소의 추가, 수정 또는 삭제 하는 등 컬렉션에서 변경 되어 열거자가 무효화 됩니다.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>는 <xref:System.Collections.IEnumerator.MoveNext%2A>가 호출될 때까지 동일한 개체를 반환합니다. <xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 다음 요소로 설정합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>제네릭이 아닌을 구현 해야이 인터페이스를 구현 <see cref="T:System.Collections.IEnumerator" /> 인터페이스입니다. <see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> 속성 두 인터페이스 모두에 표시 되 고 반환 형식이 다릅니다. 제네릭이 아닌 <see cref="P:System.Collections.IEnumerator.Current" /> 명시적 인터페이스 구현으로 속성입니다. 따라서 제네릭 인터페이스를 사용 하는 제네릭이 아닌 인터페이스의 소비자입니다.</para></block>
        <altmember cref="P:System.Collections.IEnumerator.Current" />
        <altmember cref="M:System.Collections.IEnumerator.MoveNext" />
      </Docs>
    </Member>
  </Members>
</Type>