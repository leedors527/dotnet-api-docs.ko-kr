<Type Name="Stack&lt;T&gt;" FullName="System.Collections.Generic.Stack&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f828fbb4019ba1166d7066ea1d80a31b43d533ab" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57948223" /></Metadata><TypeSignature Language="C#" Value="public class Stack&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Stack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Stack`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Stack(Of T)&#xA;Implements ICollection, IEnumerable(Of T), IReadOnlyCollection(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Stack : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type Stack&lt;'T&gt; = class&#xA;    interface seq&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_StackDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">스택에 있는 요소의 형식을 지정합니다.</typeparam>
    <summary>지정한 동일 형식의 인스턴스로 이루어진 가변 크기 LIFO(후입선출) 방식의 컬렉션을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601> 배열으로 구현 됩니다.  
  
 스택 및 큐는 정보를 임시로 저장해야 하는 경우에 유용합니다. 즉, 값을 검색한 후 요소를 삭제할 수 있습니다. 사용 하 여 <xref:System.Collections.Generic.Queue%601> 순서 컬렉션에 저장 된 정보에 액세스 해야 합니다. 사용 하 여 <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> 반대 순서로 정보에 액세스 해야 할 경우.  
  
 사용 된 <xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType> 및 <xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType> 동시에 여러 스레드에서 컬렉션에 액세스 해야 할 때 형식입니다.  
  
 일반적인 용도 <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> 다른 프로시저를 호출 하는 동안 변수 상태를 유지 하는 것입니다.  
  
 세 가지 주요 작업을 수행할 수 있습니다는 <xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType> 및 해당 요소:  
  
-   <xref:System.Collections.Generic.Stack%601.Push%2A> 맨 위에 있는 요소를 삽입 합니다 <xref:System.Collections.Stack>합니다.  
  
-   <xref:System.Collections.Generic.Stack%601.Pop%2A> 맨 위에서 요소를 제거 합니다 <xref:System.Collections.Generic.Stack%601>합니다.  
  
-   <xref:System.Collections.Generic.Stack%601.Peek%2A> 위쪽에 있는 요소를 반환 합니다 <xref:System.Collections.Generic.Stack%601> 에서 제거 하지 않습니다는 <xref:System.Collections.Generic.Stack%601>합니다.  
  
 용량을 <xref:System.Collections.Generic.Stack%601> 요소입니다는 <xref:System.Collections.Generic.Stack%601> 보유할 수 있습니다. 요소에 추가 되는 <xref:System.Collections.Generic.Stack%601>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다. 호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>합니다.  
  
 하는 경우 <xref:System.Collections.Generic.Stack%601.Count%2A> 스택의 용량 보다 작습니다 <xref:System.Collections.Generic.Stack%601.Push%2A> O(1) 작업입니다. 용량을 늘려야 하 여 새 요소를 해야 하는 경우 <xref:System.Collections.Generic.Stack%601.Push%2A> 는 o (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다. <xref:System.Collections.Generic.Stack%601.Pop%2A> o (1) 작업이입니다.  
  
 <xref:System.Collections.Generic.Stack%601> 허용 `null` 참조에 대 한 유효한 값 형식 및 중복 요소를 허용 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 몇 가지 방법을 보여 줍니다는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스입니다. 코드 예제에서는 기본 용량을 사용 하 여 문자열의 스택을 만들고 사용 하 여는 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 스택에 문자열 5 개 푸시를 합니다. 스택의 요소 스택의 상태 변경 하지 않는 열거 됩니다. <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드는 스택에서 첫 번째 문자열 표시를 사용 합니다. <xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택의 다음 항목을 살펴보고 데 차례로 <xref:System.Collections.Generic.Stack%601.Pop%2A> 팝 메서드를 사용 합니다.  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 되돌릴 요소의 순서를 사용 하 여 스택의 복사본 만들기. 복사본의 요소가 표시 됩니다.  
  
 스택 크기를 두 번 배열이 만들어집니다 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드를 사용 하는 배열의 중간에서 시작 배열 요소를 복사 합니다. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 세 개의 null 요소는 끝에 따라서; 생성자를 반대로 하는 요소의 순서를 사용 하 여 스택의 복사본을 만들려면 다시 사용 합니다.  
  
 합니다 <xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본에 있는 "4" 해당 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>공용 정적 (<see langword="Shared" /> Visual Basic의)이 형식의 멤버는 스레드로부터 안전 합니다. 인터페이스 멤버는 스레드로부터 안전하지 않습니다.  
  
<see cref="T:System.Collections.Generic.Stack`1" /> 지원할 수 있습니다 여러 판독기 동시에 따라 컬렉션을 수정 되지 않습니다.  이 경우에 컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.  열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.  여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7">반복기(C# 및 Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>비어 있는 상태에서 기본 초기 용량을 가지는 <see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 용량을 <xref:System.Collections.Generic.Stack%601> 요소입니다는 <xref:System.Collections.Generic.Stack%601> 보유할 수 있습니다. 요소에 추가 되는 <xref:System.Collections.Generic.Stack%601>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.  
  
 컬렉션의 크기를 예상할 수 있는 경우에 여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 합니다 <xref:System.Collections.Generic.Stack%601>합니다.  
  
 호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>합니다.  
  
 이 생성자는 o (1) 작업입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 생성자 및 여러 가지 방법을 보여 줍니다.는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스입니다.  
  
 코드 예제에서는 기본 용량을 사용 하 여 문자열의 스택을 만들고 사용 하 여는 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 스택에 문자열 5 개 푸시를 합니다. 스택의 요소 스택의 상태 변경 하지 않는 열거 됩니다. <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드는 스택에서 첫 번째 문자열 표시를 사용 합니다. <xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택의 다음 항목을 살펴보고 데 차례로 <xref:System.Collections.Generic.Stack%601.Pop%2A> 팝 메서드를 사용 합니다.  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 되돌릴 요소의 순서를 사용 하 여 스택의 복사본 만들기. 복사본의 요소가 표시 됩니다.  
  
 스택 크기를 두 번 배열이 만들어집니다 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드를 사용 하는 배열의 중간에서 시작 배열 요소를 복사 합니다. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 세 개의 null 요소는 끝에 따라서; 생성자를 반대로 하는 요소의 순서를 사용 하 여 스택의 복사본을 만들려면 다시 사용 합니다.  
  
 합니다 <xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본에 있는 "4" 해당 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">요소를 복사할 원본 컬렉션입니다.</param>
        <summary>지정된 컬렉션에서 복사한 요소를 포함하고 복사한 요소를 모두 수용할 수 있을 정도의 용량을 가진 <see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 용량을 <xref:System.Collections.Generic.Stack%601> 요소입니다는 <xref:System.Collections.Generic.Stack%601> 보유할 수 있습니다. 요소에 추가 되는 <xref:System.Collections.Generic.Stack%601>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.  
  
 컬렉션의 크기를 예상할 수 있는 경우에 여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 합니다 <xref:System.Collections.Generic.Stack%601>합니다.  
  
 호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>합니다.  
  
 요소에 복사 됩니다는 <xref:System.Collections.Generic.Stack%601> 가 읽는 순서를 <xref:System.Collections.Generic.IEnumerator%601> 컬렉션의 합니다.  
  
 이 생성자는 (`n`) 작업, 여기서 `n` 에 있는 요소의 수는 `collection`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 생성자 및 여러 가지 방법을 보여 줍니다.는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스입니다.  
  
 코드 예제에서는 기본 용량을 사용 하 여 문자열의 스택을 만들고 사용 하 여는 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 스택에 문자열 5 개 푸시를 합니다. 스택의 요소 스택의 상태 변경 하지 않는 열거 됩니다. <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드는 스택에서 첫 번째 문자열 표시를 사용 합니다. <xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택의 다음 항목을 살펴보고 데 차례로 <xref:System.Collections.Generic.Stack%601.Pop%2A> 팝 메서드를 사용 합니다.  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 되돌릴 요소의 순서를 사용 하 여 스택의 복사본 만들기. 복사본의 요소가 표시 됩니다.  
  
 스택 크기를 두 번 배열이 만들어집니다 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드를 사용 하는 배열의 중간에서 시작 배열 요소를 복사 합니다. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 세 개의 null 요소는 끝에 따라서; 생성자를 반대로 하는 요소의 순서를 사용 하 여 스택의 복사본을 만들려면 다시 사용 합니다.  
  
 합니다 <xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본에 있는 "4" 해당 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="collection" />가 <see langword="null" />입니다.</exception>
        <altmember cref="T:System.Collections.Generic.ICollection`1" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stack (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stack(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.Stack&lt;'T&gt; : int -&gt; System.Collections.Generic.Stack&lt;'T&gt;" Usage="new System.Collections.Generic.Stack&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><see cref="T:System.Collections.Generic.Stack`1" />에 포함될 수 있는 초기 요소 수입니다.</param>
        <summary>비어 있는 상태이고 지정한 초기 용량과 기본 초기 용량 중에서 더 큰 용량을 가지는 <see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 용량을 <xref:System.Collections.Generic.Stack%601> 요소입니다는 <xref:System.Collections.Generic.Stack%601> 보유할 수 있습니다. 요소에 추가 되는 <xref:System.Collections.Generic.Stack%601>, 용량을 증가 시켜 자동으로 내부 배열을 다시 할당 하 여 필요에 따라 합니다.  
  
 컬렉션의 크기를 예상할 수 있는 경우에 여러 요소를 추가 하는 동안 크기 조정 작업을 수행할 필요가 없습니다 초기 용량을 지정 합니다 <xref:System.Collections.Generic.Stack%601>합니다.  
  
 호출 하 여 용량을 줄일 수 있습니다 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>합니다.  
  
 이 생성자는 O (`n`) 작업, 여기서 `n` 는 `capacity`합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" />가 0보다 작은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="stack.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" />에서 개체를 모두 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601.Count%2A> 가 0으로 설정 하 고 컬렉션의 요소에서 다른 개체에 대 한 참조도 해제 됩니다.  
  
 용량 변경 되지 않습니다. 용량을 다시 설정 하는 <xref:System.Collections.Generic.Stack%601>, 호출 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A>합니다. 빈 트리밍 <xref:System.Collections.Generic.Stack%601> 의 용량을 설정 합니다 <xref:System.Collections.Generic.Stack%601> 기본 용량입니다.  
  
 이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 몇 가지 방법을 보여 줍니다.는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스를 포함 하 여는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드.  
  
 코드 예제에서는 기본 용량을 사용 하 여 문자열의 스택을 만들고 사용 하 여는 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 스택에 문자열 5 개 푸시를 합니다. 스택의 요소 스택의 상태 변경 하지 않는 열거 됩니다. <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드는 스택에서 첫 번째 문자열 표시를 사용 합니다. <xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택의 다음 항목을 살펴보고 데 차례로 <xref:System.Collections.Generic.Stack%601.Pop%2A> 팝 메서드를 사용 합니다.  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 되돌릴 요소의 순서를 사용 하 여 스택의 복사본 만들기. 복사본의 요소가 표시 됩니다.  
  
 스택 크기를 두 번 배열이 만들어집니다 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드를 사용 하는 배열의 중간에서 시작 배열 요소를 복사 합니다. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 세 개의 null 요소는 끝에 따라서; 생성자를 반대로 하는 요소의 순서를 사용 하 여 스택의 복사본을 만들려면 다시 사용 합니다.  
  
 합니다 <xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본에 있는 "4" 해당 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T item);" />
      <MemberSignature Language="F#" Value="member this.Contains : 'T -&gt; bool" Usage="stack.Contains item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><see cref="T:System.Collections.Generic.Stack`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
        <summary><see cref="T:System.Collections.Generic.Stack`1" />에 요소가 있는지 여부를 확인합니다.</summary>
        <returns><see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.Stack`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 같음 비교자를 사용 하 여 같은지 여부를 확인 하는이 메서드가 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 에 대 한 `T`, 목록에서 값의 형식입니다.  
  
 이 메서드는; 선형 검색을 수행합니다. 따라서이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 몇 가지 방법을 보여 줍니다.는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스를 포함 하 여는 <xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드.  
  
 코드 예제에서는 기본 용량을 사용 하 여 문자열의 스택을 만들고 사용 하 여는 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 스택에 문자열 5 개 푸시를 합니다. 스택의 요소 스택의 상태 변경 하지 않는 열거 됩니다. <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드는 스택에서 첫 번째 문자열 표시를 사용 합니다. <xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택의 다음 항목을 살펴보고 데 차례로 <xref:System.Collections.Generic.Stack%601.Pop%2A> 팝 메서드를 사용 합니다.  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 되돌릴 요소의 순서를 사용 하 여 스택의 복사본 만들기. 복사본의 요소가 표시 됩니다.  
  
 스택 크기를 두 번 배열이 만들어집니다 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드를 사용 하는 배열의 중간에서 시작 배열 요소를 복사 합니다. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 세 개의 null 요소는 끝에 따라서; 생성자를 반대로 하는 요소의 순서를 사용 하 여 스택의 복사본을 만들려면 다시 사용 합니다.  
  
 합니다 <xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본에 있는 "4" 해당 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</related>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] * int -&gt; unit" Usage="stack.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.Stack`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
        <param name="arrayIndex"><paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
        <summary><see cref="T:System.Collections.Generic.Stack`1" />을 지정한 배열 인덱스에서 시작하여 기존의 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요소에 대 한 호출의 연속 하 여 반환 하는 요소의 순서와 비슷한 마지막의 선입 선출 (후입선출) 순서로 배열에 복사 됩니다 <xref:System.Collections.Generic.Stack%601.Pop%2A>합니다.  
  
 이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 몇 가지 방법을 보여 줍니다.는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스를 포함 하 여는 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드.  
  
 코드 예제에서는 기본 용량을 사용 하 여 문자열의 스택을 만들고 사용 하 여는 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 스택에 문자열 5 개 푸시를 합니다. 스택의 요소 스택의 상태 변경 하지 않는 열거 됩니다. <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드는 스택에서 첫 번째 문자열 표시를 사용 합니다. <xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택의 다음 항목을 살펴보고 데 차례로 <xref:System.Collections.Generic.Stack%601.Pop%2A> 팝 메서드를 사용 합니다.  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 되돌릴 요소의 순서를 사용 하 여 스택의 복사본 만들기. 복사본의 요소가 표시 됩니다.  
  
 스택 크기를 두 번 배열이 만들어집니다 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드를 사용 하는 배열의 중간에서 시작 배열 요소를 복사 합니다. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 세 개의 null 요소는 끝에 따라서; 생성자를 반대로 하는 요소의 순서를 사용 하 여 스택의 복사본을 만들려면 다시 사용 합니다.  
  
 합니다 <xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본에 있는 "4" 해당 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" />가 0보다 작은 경우</exception>
        <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.Stack`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.ToArray" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.Stack&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" />에 포함된 요소 수를 가져옵니다.</summary>
        <value><see cref="T:System.Collections.Generic.Stack`1" />에 포함된 요소의 수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 용량을 <xref:System.Collections.Generic.Stack%601> 요소입니다는 <xref:System.Collections.Generic.Stack%601> 저장할 수 있습니다. <xref:System.Collections.Generic.Stack%601.Count%2A> 에 실제로 있는 요소의 수는 <xref:System.Collections.Generic.Stack%601>합니다.  
  
 항상이 용량은 보다 크거나 같은 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다. 경우 <xref:System.Collections.Generic.Stack%601.Count%2A> 요소를 추가 하는 동안 용량을 초과, 자동으로 이전 요소를 복사 하 고 새 요소를 추가 하기 전에 내부 배열을 재할당 하 여 용량이 증가 합니다.  
  
 이 속성 값을 검색하는 것은 O(1) 연산입니다.  
  
   
  
## Examples  
 다음 코드 예제는 여러 속성과 메서드를 보여 줍니다.는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스를 포함 하 여는 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성입니다.  
  
 코드 예제에서는 기본 용량을 사용 하 여 문자열의 스택을 만들고 사용 하 여는 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 스택에 문자열 5 개 푸시를 합니다. 스택의 요소 스택의 상태 변경 하지 않는 열거 됩니다. <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드는 스택에서 첫 번째 문자열 표시를 사용 합니다. <xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택의 다음 항목을 살펴보고 데 차례로 <xref:System.Collections.Generic.Stack%601.Pop%2A> 팝 메서드를 사용 합니다.  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 되돌릴 요소의 순서를 사용 하 여 스택의 복사본 만들기. 복사본의 요소가 표시 됩니다.  
  
 스택 크기를 두 번 배열이 만들어집니다 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드를 사용 하는 배열의 중간에서 시작 배열 요소를 복사 합니다. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 세 개의 null 요소는 끝에 따라서; 생성자를 반대로 하는 요소의 순서를 사용 하 여 스택의 복사본을 만들려면 다시 사용 합니다.  
  
 합니다 <xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본에 있는 "4" 해당 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Stack&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Stack`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Stack(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::Stack&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.Stack&lt;'T&gt;.Enumerator" Usage="stack.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Stack&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" />에 대한 열거자를 반환합니다.</summary>
        <returns><see cref="T:System.Collections.Generic.Stack`1.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.Stack`1" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual Basic에서) 열거자의 복잡성을 숨깁니다. 그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.  
  
 열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.  
  
 처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다. 이 위치에서 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>는 정의되지 않습니다. 따라서 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.  
  
 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>는 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>가 호출될 때까지 동일한 개체를 반환합니다. <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A>는 <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>를 다음 요소로 설정합니다.  
  
 경우 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 반환 `false`합니다. 열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 반환할 수도 `false`합니다. 마지막으로 호출 하는 경우 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A> 정의 되지 않습니다. <xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A>를 컬렉션의 첫 번째 요소로 다시 설정할 수 없으므로 대신 새 열거자 인스턴스를 만들어야 합니다.  
  
 열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다. 변경에 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제, 열거자가 복구할 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A> 또는 <xref:System.Collections.Generic.Stack%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.  
  
 열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.  여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.  
  
 컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.  
  
 이 방법은 O(1) 작업에 설명 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스는 열거 가능 합니다. 합니다 `foreach` 문 (`For Each` Visual Basic에서는 `for each` c + +에서) 큐를 열거 하는 데 사용 됩니다.  
  
 코드 예제에서는 기본 용량을 사용 하 여 문자열의 스택을 만들고 사용 하 여는 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 스택에 문자열 5 개 푸시를 합니다. 스택의 요소 스택의 상태 변경 하지 않는 열거 됩니다. <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드는 스택에서 첫 번째 문자열 표시를 사용 합니다. <xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택의 다음 항목을 살펴보고 데 차례로 <xref:System.Collections.Generic.Stack%601.Pop%2A> 팝 메서드를 사용 합니다.  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 되돌릴 요소의 순서를 사용 하 여 스택의 복사본 만들기. 복사본의 요소가 표시 됩니다.  
  
 스택 크기를 두 번 배열이 만들어집니다 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드를 사용 하는 배열의 중간에서 시작 배열 요소를 복사 합니다. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 세 개의 null 요소는 끝에 따라서; 생성자를 반대로 하는 요소의 순서를 사용 하 여 스택의 복사본을 만들려면 다시 사용 합니다.  
  
 합니다 <xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본에 있는 "4" 해당 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.Stack`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Peek();" />
      <MemberSignature Language="F#" Value="member this.Peek : unit -&gt; 'T" Usage="stack.Peek " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에서 개체를 제거하지 않고 반환합니다.</summary>
        <returns><see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에 있는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드와 유사하지만 <xref:System.Collections.Generic.Stack%601.Peek%2A>는 <xref:System.Collections.Generic.Stack%601>를 수정하지 않습니다.  
  
 경우 형식 `T` 참조 형식인 `null` 스택에 푸시할 수는 <xref:System.Collections.Generic.Stack%601> 필요한 경우 자리 표시자로 합니다.  
  
 이 방법은 O(1) 작업에 설명 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 몇 가지 방법을 보여 줍니다.는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스를 포함 하 여는 <xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드.  
  
 코드 예제에서는 기본 용량을 사용 하 여 문자열의 스택을 만들고 사용 하 여는 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 스택에 문자열 5 개 푸시를 합니다. 스택의 요소 스택의 상태 변경 하지 않는 열거 됩니다. <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드는 스택에서 첫 번째 문자열 표시를 사용 합니다. <xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택의 다음 항목을 살펴보고 데 차례로 <xref:System.Collections.Generic.Stack%601.Pop%2A> 팝 메서드를 사용 합니다.  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 되돌릴 요소의 순서를 사용 하 여 스택의 복사본 만들기. 복사본의 요소가 표시 됩니다.  
  
 스택 크기를 두 번 배열이 만들어집니다 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드를 사용 하는 배열의 중간에서 시작 배열 요소를 복사 합니다. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 세 개의 null 요소는 끝에 따라서; 생성자를 반대로 하는 요소의 순서를 사용 하 여 스택의 복사본을 만들려면 다시 사용 합니다.  
  
 합니다 <xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본에 있는 "4" 해당 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Collections.Generic.Stack`1" />가 비어 있는 경우</exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public T Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Function Pop () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Pop();" />
      <MemberSignature Language="F#" Value="member this.Pop : unit -&gt; 'T" Usage="stack.Pop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에서 개체를 제거하고 반환합니다.</summary>
        <returns><see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에서 제거되는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 <xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드와 유사하지만 <xref:System.Collections.Generic.Stack%601.Peek%2A>는 <xref:System.Collections.Generic.Stack%601>를 수정하지 않습니다.  
  
 경우 형식 `T` 참조 형식인 `null` 스택에 푸시할 수는 <xref:System.Collections.Generic.Stack%601> 필요한 경우 자리 표시자로 합니다.  
  
 <xref:System.Collections.Generic.Stack%601> 배열으로 구현 됩니다. 이 방법은 O(1) 작업에 설명 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 몇 가지 방법을 보여 줍니다.는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스를 포함 하 여는 <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드.  
  
 코드 예제에서는 기본 용량을 사용 하 여 문자열의 스택을 만들고 사용 하 여는 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 스택에 문자열 5 개 푸시를 합니다. 스택의 요소 스택의 상태 변경 하지 않는 열거 됩니다. <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드는 스택에서 첫 번째 문자열 표시를 사용 합니다. <xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택의 다음 항목을 살펴보고 데 차례로 <xref:System.Collections.Generic.Stack%601.Pop%2A> 팝 메서드를 사용 합니다.  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 되돌릴 요소의 순서를 사용 하 여 스택의 복사본 만들기. 복사본의 요소가 표시 됩니다.  
  
 스택 크기를 두 번 배열이 만들어집니다 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드를 사용 하는 배열의 중간에서 시작 배열 요소를 복사 합니다. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 세 개의 null 요소는 끝에 따라서; 생성자를 반대로 하는 요소의 순서를 사용 하 여 스택의 복사본을 만들려면 다시 사용 합니다.  
  
 합니다 <xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본에 있는 "4" 해당 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Collections.Generic.Stack`1" />가 비어 있는 경우</exception>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Push(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.Push(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push(T item);" />
      <MemberSignature Language="F#" Value="member this.Push : 'T -&gt; unit" Usage="stack.Push item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item"><see cref="T:System.Collections.Generic.Stack`1" />에 적용할 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
        <summary>개체를 <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에 삽입합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Stack%601> 배열으로 구현 됩니다.  
  
 하는 경우 <xref:System.Collections.Generic.Stack%601.Count%2A> 이미 용량과 용량의 <xref:System.Collections.Generic.Stack%601> 자동으로 내부 배열을 다시 할당 하 여 증가 하는 새 요소가 추가 되기 전에 기존 요소를 새 배열에 복사 됩니다.  
  
 경우 형식 `T` 참조 형식인 `null` 스택에 푸시할 수는 <xref:System.Collections.Generic.Stack%601> 필요한 경우 자리 표시자로 합니다. 스택에 있는 슬롯을 차지 하 고 모든 개체 처럼 처리 됩니다.  
  
 하는 경우 <xref:System.Collections.Generic.Stack%601.Count%2A> 스택의 용량 보다 작습니다 <xref:System.Collections.Generic.Stack%601.Push%2A> O(1) 작업입니다. 용량을 늘려야 하 여 새 요소를 해야 하는 경우 <xref:System.Collections.Generic.Stack%601.Push%2A> 는 o (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 몇 가지 방법을 보여 줍니다.는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스를 포함 하 여는 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드.  
  
 코드 예제에서는 기본 용량을 사용 하 여 문자열의 스택을 만들고 사용 하 여는 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 스택에 문자열 5 개 푸시를 합니다. 스택의 요소 스택의 상태 변경 하지 않는 열거 됩니다. <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드는 스택에서 첫 번째 문자열 표시를 사용 합니다. <xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택의 다음 항목을 살펴보고 데 차례로 <xref:System.Collections.Generic.Stack%601.Pop%2A> 팝 메서드를 사용 합니다.  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 되돌릴 요소의 순서를 사용 하 여 스택의 복사본 만들기. 복사본의 요소가 표시 됩니다.  
  
 스택 크기를 두 번 배열이 만들어집니다 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드를 사용 하는 배열의 중간에서 시작 배열 요소를 복사 합니다. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 세 개의 null 요소는 끝에 따라서; 생성자를 반대로 하는 요소의 순서를 사용 하 여 스택의 복사본을 만들려면 다시 사용 합니다.  
  
 합니다 <xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본에 있는 "4" 해당 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Peek" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
        <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual Basic에서) 열거자의 복잡성을 숨깁니다. 그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.  
  
 열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.  
  
 처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다. 이 위치에서 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>는 정의되지 않습니다. 따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>는 <xref:System.Collections.IEnumerator.MoveNext%2A>가 호출될 때까지 동일한 개체를 반환합니다. <xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 다음 요소로 설정합니다.  
  
 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다. 열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다. 마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 정의 되지 않습니다. <xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 컬렉션의 첫 번째 요소로 다시 설정할 수 없으므로 대신 새 열거자 인스턴스를 만들어야 합니다.  
  
 열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다. 변경에 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제, 열거자가 복구할 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.  
  
 열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다. 열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.  여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.  
  
 컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.  
  
 이 방법은 O(1) 작업에 설명 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
        <param name="arrayIndex"><paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
        <summary>특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  경우는 원본의 유형을 <xref:System.Collections.ICollection> 대상의 형식으로 자동 캐스팅할 수 없는 `array`, 제네릭이 아닌 구현은 <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>제네릭 구현은 throw 하는 반면, <xref:System.ArgumentException>합니다.  
  
 이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" />가 0보다 작습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="array" />가 다차원 배열인 경우  
  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
        <value><see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Stack`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.  
  
 컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.  열거형 쓰기 많이 고민해 드문 경우에서 전체 열거 동안 컬렉션을 잠가야 합니다.  여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.  
  
 <xref:System.Collections.ICollection.SyncRoot%2A> 에 대 한 액세스를 동기화 할 수 있는 개체를 반환 합니다 <xref:System.Collections.ICollection>합니다. 동기화는 모든 스레드에서 컬렉션에 액세스 하기 전에이 개체를 잠그는 경우에 유효 합니다.  
  
 이 속성 값을 검색하는 것은 O(1) 연산입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
        <value><see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.Stack`1" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.  
  
 컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.  열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.  여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.  
  
 <xref:System.Collections.ICollection.SyncRoot%2A> 에 대 한 액세스를 동기화 할 수 있는 개체를 반환 합니다 <xref:System.Collections.ICollection>합니다. 동기화는 모든 스레드에서 컬렉션에 액세스 하기 전에이 개체를 잠그는 경우에 유효 합니다. 다음 코드의 사용을 보여 줍니다.는 <xref:System.Collections.ICollection.SyncRoot%2A> C#, c + + 및 Visual Basic에 대 한 속성입니다.  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 이 속성 값을 검색하는 것은 O(1) 연산입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
        <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual Basic에서) 열거자의 복잡성을 숨깁니다. 그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.  
  
 열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.  
  
 처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다. <xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.  이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>는 정의되지 않습니다. 따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.  
  
 <xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다. <xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.  
  
 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다. 열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다. 마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다. <xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.  
  
 열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다. 변경에 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제, 열거자가 복구할 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.  
  
 열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.  열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.  여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.  
  
 컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.  
  
 이 방법은 O(1) 작업에 설명 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.GetEnumerator" />
        <altmember cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="stack.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" />을 새 배열에 복사합니다.</summary>
        <returns><see cref="T:System.Collections.Generic.Stack`1" />의 요소 복사본을 포함하는 새 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요소에 대 한 호출의 연속 하 여 반환 하는 요소의 순서와 비슷한 마지막의 선입 선출 (후입선출) 순서로 배열에 복사 됩니다 <xref:System.Collections.Generic.Stack%601.Pop%2A>합니다.  
  
 이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 몇 가지 방법을 보여 줍니다.는 <xref:System.Collections.Generic.Stack%601> 제네릭 클래스를 포함 하 여는 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드.  
  
 코드 예제에서는 기본 용량을 사용 하 여 문자열의 스택을 만들고 사용 하 여는 <xref:System.Collections.Generic.Stack%601.Push%2A> 메서드 스택에 문자열 5 개 푸시를 합니다. 스택의 요소 스택의 상태 변경 하지 않는 열거 됩니다. <xref:System.Collections.Generic.Stack%601.Pop%2A> 메서드는 스택에서 첫 번째 문자열 표시를 사용 합니다. <xref:System.Collections.Generic.Stack%601.Peek%2A> 메서드는 스택의 다음 항목을 살펴보고 데 차례로 <xref:System.Collections.Generic.Stack%601.Pop%2A> 팝 메서드를 사용 합니다.  
  
 <xref:System.Collections.Generic.Stack%601.ToArray%2A> 메서드 배열을 만들고 스택 요소를 복사 하는 다음 배열에 전달 되는 <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 사용 하는 생성자 <xref:System.Collections.Generic.IEnumerable%601>, 되돌릴 요소의 순서를 사용 하 여 스택의 복사본 만들기. 복사본의 요소가 표시 됩니다.  
  
 스택 크기를 두 번 배열이 만들어집니다 및 <xref:System.Collections.Generic.Stack%601.CopyTo%2A> 메서드를 사용 하는 배열의 중간에서 시작 배열 요소를 복사 합니다. <xref:System.Collections.Generic.Stack%601.%23ctor%2A> 세 개의 null 요소는 끝에 따라서; 생성자를 반대로 하는 요소의 순서를 사용 하 여 스택의 복사본을 만들려면 다시 사용 합니다.  
  
 합니다 <xref:System.Collections.Generic.Stack%601.Contains%2A> 메서드는 스택의 첫 번째 복사본에 있는 "4" 해당 문자열은 표시를 사용 하는 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드는 복사본을 지우고 및 <xref:System.Collections.Generic.Stack%601.Count%2A> 속성 스택이 비어 있는지를 보여 줍니다.  
  
 [!code-csharp[Generic.Stack#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.Stack/cs/source.cs#1)]
 [!code-vb[Generic.Stack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.Stack/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)" />
        <altmember cref="M:System.Collections.Generic.Stack`1.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="stack.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.Generic.Stack`1" />의 실제 요소 수가 현재 용량의 90% 미만인 경우 용량을 이 값으로 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 새 요소가 컬렉션에 추가 될 경우 컬렉션의 메모리 오버 헤드를 최소화할 데 사용할 수 있습니다. 그러나 재할당 하 고 큰 복사의 비용 <xref:System.Collections.Generic.Stack%601> 상당히 커질 수 있으므로 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> 메서드는 아무 효과도 없습니다 목록의 용량의 90%를 초과 하는 합니다. 이 비교적 작은 이익을 얻기에 대 한 큰 재할당 비용을 방지 합니다.  
  
 이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Generic.Stack%601.Count%2A>합니다.  
  
 다시 설정 하는 <xref:System.Collections.Generic.Stack%601> 초기 상태로 호출 합니다 <xref:System.Collections.Generic.Stack%601.Clear%2A> 메서드를 호출 하기 전에 <xref:System.Collections.Generic.Stack%601.TrimExcess%2A> 메서드. 빈 트리밍 <xref:System.Collections.Generic.Stack%601> 의 용량을 설정 합니다 <xref:System.Collections.Generic.Stack%601> 기본 용량입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.Stack`1.Clear" />
        <altmember cref="P:System.Collections.Generic.Stack`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryPeek">
      <MemberSignature Language="C#" Value="public bool TryPeek (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPeek([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPeek(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPeek (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPeek([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPeek :  -&gt; bool" Usage="stack.TryPeek result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop">
      <MemberSignature Language="C#" Value="public bool TryPop (out T result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryPop([out] !T&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Stack`1.TryPop(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryPop (ByRef result As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryPop([Runtime::InteropServices::Out] T % result);" />
      <MemberSignature Language="F#" Value="member this.TryPop :  -&gt; bool" Usage="stack.TryPop result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="T" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>