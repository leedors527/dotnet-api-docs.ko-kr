<Type Name="KeyedCollection&lt;TKey,TItem&gt;" FullName="System.Collections.ObjectModel.KeyedCollection&lt;TKey,TItem&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f674f9e621e530f6ee1b3c61278c7bc6009ee991" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58694344" /></Metadata><TypeSignature Language="C#" Value="public abstract class KeyedCollection&lt;TKey,TItem&gt; : System.Collections.ObjectModel.Collection&lt;TItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit KeyedCollection`2&lt;TKey, TItem&gt; extends System.Collections.ObjectModel.Collection`1&lt;!TItem&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.ObjectModel.KeyedCollection`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class KeyedCollection(Of TKey, TItem)&#xA;Inherits Collection(Of TItem)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TItem&gt;&#xA;public ref class KeyedCollection abstract : System::Collections::ObjectModel::Collection&lt;TItem&gt;" />
  <TypeSignature Language="F#" Value="type KeyedCollection&lt;'Key, 'Item&gt; = class&#xA;    inherit Collection&lt;'Item&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TItem" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.ObjectModel.Collection&lt;TItem&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">TItem</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_KeyedCollectionDebugView`2))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">컬렉션에 있는 키의 형식입니다.</typeparam>
    <typeparam name="TItem">컬렉션에 있는 항목의 형식입니다.</typeparam>
    <summary>키가 값에 포함되어 있는 컬렉션에 대한 추상 기본 클래스를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.ObjectModel.KeyedCollection%602> 클래스는 모두 O(1) 인덱싱된 검색 및 o (1) 하는 검색 키로 사용 합니다. 추상 형식 인지 추상 기본 클래스는 생성 된 제네릭 형식의 각 않기 때문에 무한 추상 형식 설정 보다 정확 하 게 합니다. 사용할 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 컬렉션 형식에 적절 한 생성 된 형식에서 파생 됩니다.  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602> 클래스에 기반한 컬렉션 간의 하이브리드 형식입니다 합니다 <xref:System.Collections.Generic.IList%601> 제네릭 인터페이스 및 컬렉션을 기반으로 <xref:System.Collections.Generic.IDictionary%602> 제네릭 인터페이스입니다. 기반으로 하는 컬렉션 처럼 합니다 <xref:System.Collections.Generic.IList%601> 제네릭 인터페이스를 <xref:System.Collections.ObjectModel.KeyedCollection%602> 은 인덱싱된 목록 항목입니다. 기반으로 하는 컬렉션 처럼 합니다 <xref:System.Collections.Generic.IDictionary%602> 제네릭 인터페이스를 <xref:System.Collections.ObjectModel.KeyedCollection%602> 각 요소와 연결 된 키가 있습니다.  
  
 요소의 사전 달리 <xref:System.Collections.ObjectModel.KeyedCollection%602> 키/값 쌍을 아닙니다; 대신 전체 요소는 값 및 키 값 내에 포함 되어 있습니다.  컬렉션의 요소에서 파생 하는 예를 들어 `KeyedCollection\<String,String>` (`KeyedCollection(Of String, String)` Visual Basic에서) "John Doe Jr." 될 수 있습니다 값은 "John Doe Jr." 키가 "Doe"; 정수 키를 포함 하는 직원 레코드의 컬렉션에서 파생 될 수 또는 `KeyedCollection\<int,Employee>`합니다. 추상 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 메서드 요소에서 키를 추출 합니다.  
  
 기본적으로 <xref:System.Collections.ObjectModel.KeyedCollection%602> 조회 사전을 사용 하 여 얻을 수 있는 포함 된 <xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A> 속성입니다.  항목에 추가 될 때를 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 항목의 키가 한 번만 추출 하 고 빠른 검색에 대 한 조회 사전을 저장 합니다. 만들 때 사전 작성 임계값을 지정 하 여이 동작을 재정의 합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602>합니다. 조회 사전은 해당 임계값을 초과 하는 요소 수가 처음으로 생성 됩니다.  임계값으로-1을 지정 하는 경우의 조회 사전이 만들어지지 않습니다.  
  
> [!NOTE]
>  응용 프로그램이 사용 되는 내부 조회 사전을 경우 포함 되는 컬렉션의 모든 항목에 대 한 참조가 `TItem` 참조 형식인 경우 컬렉션에 있는 모든 항목의 복사 또는 `TItem` 값 형식인 합니다. 따라서 조회 사전을 사용 하 여 적합 하지 않을 경우 `TItem` 값 형식입니다.  
  
 사용 하 여 인덱스 또는 키의 항목을 액세스할 수는 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> 속성입니다. 키가 없으면 항목을 추가할 수 있지만 이러한 항목 이후에 인덱스로 액세스할 수 있습니다.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 예제에서 파생 하는 데 필요한 최소 코드를 보여 줍니다. <xref:System.Collections.ObjectModel.KeyedCollection%602>, 대부분의 상속 된 메서드를 보여 줍니다. 두 번째 예의 보호 된 메서드를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602> 사용자 지정 동작을 제공 합니다.  
  
 **예제 1**  
  
 이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소 코드를 보여줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602>: 재정의 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 기본 클래스 생성자에 위임 하는 메서드 및 공용 생성자를 제공 합니다. 상속 된 메서드 및 코드 방법도 보여 속성 중 상당수 <xref:System.Collections.ObjectModel.KeyedCollection%602> 고 <xref:System.Collections.ObjectModel.Collection%601> 클래스입니다.  
  
 합니다 `SimpleOrder` 클래스는 포함 하는 매우 간단한 청구 목록을 `OrderItem` 각각 순서 대로 줄 항목을 나타내는 개체입니다. 키 `OrderItem` 변경할 수 없는에서 파생 된 클래스에 대 한 중요 고려 사항 <xref:System.Collections.ObjectModel.KeyedCollection%602>합니다. 변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 **예제 2**  
  
 다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 메서드를 사용자 지정 동작을 제공 하는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 기본 설정 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서). 이 예제에 제공 된 사용자 지정 동작은 라는 알림 이벤트 `Changed`, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.  
  
 코드 예제는 `SimpleOrder` 클래스에서 파생 되는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 간단한 주문 양식을 나타냅니다. 주문 양식 포함 `OrderItem` 정렬 항목을 나타내는 개체입니다. 코드 예제에서는 `SimpleOrderChangedEventArgs` 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.  
  
 코드 예제에서 속성 및 파생된 클래스의 메서드를 호출 하 여 사용자 지정 동작을 보여 줍니다.는 `Main` 메서드는 `Demo` 클래스입니다.  
  
 이 코드 예제에서는 변경할 수 없는 키를 사용 하 여 개체를 사용 합니다. 변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Specialized.StringDictionary" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>기본 같음 비교자를 사용하는 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Collections.ObjectModel.KeyedCollection%602> 이 사용 하 여 만든 생성자에서 얻은 키의 형식에 대 한 기본 제네릭 같음 비교자를 사용 하 여 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>입니다. 다른 제네릭 같음 비교자를 지정 하려면 사용 합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> 생성자 또는 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 생성자입니다.  
  
 기본적으로 <xref:System.Collections.ObjectModel.KeyedCollection%602> 첫 번째 항목이 추가 될 때 생성 되는 조회 사전이 포함 되어 있습니다. 항목에 추가 될 때를 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 항목의 키가 한 번만 추출 하 고 빠른 검색에 대 한 조회 사전을 저장 합니다. 사용 하 여이 동작을 재정의할 수는 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 생성자 및 사전 작성 임계값을 지정 합니다.  
  
> [!NOTE]
>  때문에 <xref:System.Collections.ObjectModel.KeyedCollection%602> 클래스는 추상 클래스 (`MustInherit` Visual Basic에서)를 사용 하기 위해 여기에서 파생 되어야 합니다. 파생된 유형에 대 한 생성자에서 적절 한 호출 <xref:System.Collections.ObjectModel.KeyedCollection%602> 생성자입니다. 같음 비교자를 또는 생성자에서 사전 작성 임계값과 같은 기능을 노출 하는 데 필요한 것입니다.  
  
 이 생성자는 o (1) 작업입니다.  
  
   
  
## Examples  
 이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소 코드를 보여줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602>: 재정의 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 기본 클래스 생성자에 위임 하는 메서드 및 공용 생성자를 제공 합니다. 상속 된 메서드 및 코드 방법도 보여 속성 중 상당수 <xref:System.Collections.ObjectModel.KeyedCollection%602> 고 <xref:System.Collections.ObjectModel.Collection%601> 클래스입니다.  
  
 합니다 `SimpleOrder` 클래스는 포함 하는 매우 간단한 청구 목록을 `OrderItem` 각각 순서 대로 줄 항목을 나타내는 개체입니다. 키 `OrderItem` 변경할 수 없는에서 파생 된 클래스에 대 한 중요 고려 사항 <xref:System.Collections.ObjectModel.KeyedCollection%602>합니다. 변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">키를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 제네릭 인터페이스의 구현이거나, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />에서 얻은 키의 형식에 대한 기본 같음 비교자를 사용하려면 <see langword="null" />입니다.</param>
        <summary>지정된 같음 비교자를 사용하는 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 <xref:System.Collections.ObjectModel.KeyedCollection%602> 첫 번째 항목이 추가 될 때 생성 되는 조회 사전이 포함 되어 있습니다. 항목에 추가 될 때를 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 항목의 키가 한 번만 추출 하 고 빠른 검색에 대 한 조회 사전을 저장 합니다. 사용 하 여이 동작을 재정의할 수는 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 생성자 및 사전 작성 임계값을 지정 합니다.  
  
> [!NOTE]
>  때문에 <xref:System.Collections.ObjectModel.KeyedCollection%602> 클래스는 추상 클래스 (`MustInherit` Visual Basic에서)를 사용 하기 위해 여기에서 파생 되어야 합니다. 파생된 유형에 대 한 생성자에서 적절 한 호출 <xref:System.Collections.ObjectModel.KeyedCollection%602> 생성자입니다. 같음 비교자를 또는 생성자에서 사전 작성 임계값과 같은 기능을 노출 하는 데 필요한 것입니다.  
  
 이 생성자는 o (1) 작업입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer, int32 dictionaryCreationThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey), dictionaryCreationThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * int -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; (comparer, dictionaryCreationThreshold)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="dictionaryCreationThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer">키를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 제네릭 인터페이스의 구현이거나, <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />에서 얻은 키의 형식에 대한 기본 같음 비교자를 사용하려면 <see langword="null" />입니다.</param>
        <param name="dictionaryCreationThreshold">컬렉션에서 조회 사전을 만들지 않고 저장할 수 있는 요소의 수입니다. 0을 지정하면 첫 번째 항목을 추가할 때 조회 사전이 만들어지고, -1을 지정하면 조회 사전이 만들어지지 않습니다.</param>
        <summary>지정된 같음 비교자를 사용하고 지정된 임계값이 초과되면 조회 사전을 만드는 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 <xref:System.Collections.ObjectModel.KeyedCollection%602> 첫 번째 항목이 추가 될 때 생성 되는 조회 사전이 포함 되어 있습니다. 항목에 추가 될 때를 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 항목의 키가 한 번만 추출 하 고 빠른 검색에 대 한 조회 사전을 저장 합니다. 이 생성자를 사용 하면 해당 동작을 재정의할 수 있습니다. 첫 번째 요소를 추가할 때 사전 만들려면 0, 두 번째 요소에 추가 되 면 사전 만들려면 1 및 등을 지정 합니다. 임계값으로-1을 지정 하는 경우의 조회 사전이 만들어지지 않습니다.  
  
 매우 작은 컬렉션에 대 한 조회 사전을 제공 하는 검색 속도가 향상 사전에 필요한 추가 메모리를 가치가 되지 않을 수 있습니다. 임계값을 설정 하 게 조정할 시기를 결정할 수 있습니다.  
  
> [!NOTE]
>  때문에 <xref:System.Collections.ObjectModel.KeyedCollection%602> 클래스는 추상 클래스 (`MustInherit` Visual Basic에서)를 사용 하기 위해 여기에서 파생 되어야 합니다. 파생된 유형에 대 한 생성자에서 적절 한 호출 <xref:System.Collections.ObjectModel.KeyedCollection%602> 생성자입니다. 같음 비교자를 또는 생성자에서 사전 작성 임계값과 같은 기능을 노출 하는 데 필요한 것입니다.  
  
 이 생성자는 o (1) 작업입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 메서드를 사용자 지정 동작을 제공 하는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 기본 설정 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서). 이 예제에 제공 된 사용자 지정 동작은 라는 알림 이벤트 `Changed`, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.  
  
 코드 예제에서는 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 임계값이 0 사용 하 여 생성자 내부 사전에 개체를 처음으로 만들어질 수 있도록가 컬렉션에 추가 합니다.  
  
 코드 예제는 `SimpleOrder` 클래스에서 파생 되는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 간단한 주문 양식을 나타냅니다. 주문 양식 포함 `OrderItem` 정렬 항목을 나타내는 개체입니다. 코드 예제에서는 `SimpleOrderChangedEventArgs` 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.  
  
 코드 예제에서 속성 및 파생된 클래스의 메서드를 호출 하 여 사용자 지정 동작을 보여 줍니다.는 `Main` 메서드는 `Demo` 클래스입니다.  
  
 이 코드 예제에서는 변경할 수 없는 키를 사용 하 여 개체를 사용 합니다. 변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dictionaryCreationThreshold" />이 -1보다 작습니다.</exception>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName="ChangeItemKey">
      <MemberSignature Language="C#" Value="protected void ChangeItemKey (TItem item, TKey newKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ChangeItemKey(!TItem item, !TKey newKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ChangeItemKey (item As TItem, newKey As TKey)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ChangeItemKey(TItem item, TKey newKey);" />
      <MemberSignature Language="F#" Value="member this.ChangeItemKey : 'Item * 'Key -&gt; unit" Usage="keyedCollection.ChangeItemKey (item, newKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
        <Parameter Name="newKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="item">키를 변경할 요소입니다.</param>
        <param name="newKey"><paramref name="item" />의 새 키입니다.</param>
        <summary>조회 사전의 지정된 요소와 연결된 키를 변경합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는에 포함 된 키를 수정 하지 않습니다 `item`; 단순히 조회 사전을 저장 하는 키를 대체 합니다.  따라서 경우 `newKey` 에 포함 된 키와에서 다릅니다 `item`에 액세스할 수 없습니다 `item` 가 반환한 키를 사용 하 여 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>입니다.  
  
 이 메서드는 아무 작업도 수행 하지 하는 경우는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 조회 사전이 없습니다.  
  
 모든 키를 <xref:System.Collections.ObjectModel.KeyedCollection%602> 고유 해야 합니다. 키 일 수 없습니다 `null`합니다.  
  
 이 방법은 O(1) 작업에 설명 합니다.  
  
## <a name="notes-for-implementers"></a>구현자 참고 사항  
 항목에 포함 된 키를 수정 하려면 먼저 조회 사전의 키를 업데이트 하려면이 메서드를 호출 해야 합니다. 사전 작성 임계값-1 이면이 메서드를 호출할 필요가 없습니다.  
  
 노출 하지 마십시오는 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 파생된 클래스의 공용 메서드로 메서드. 이 메서드를 잘못 사용 하면 조회 사전이 동기화 항목 키입니다. 예를 들어 키 설정을 `null` 다른 값으로 설정한 항목에 대 한 여러 키 조회 사전을 추가 합니다. 내부적으로 변경할 수 있는 항목 키를 허용 하려면이 메서드를 노출 합니다. 항목에 대 한 키가 변경 하는 경우이 메서드는 조회 사전의 키를 변경 하려면 사용 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 변경할 수 있는 키 및 보호를 재정의 하는 방법을 지원 하기 위해 메서드 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 키의 무결성을 유지 하는 방법 및 컬렉션입니다.  
  
 코드 예제는 `MutableKeys` 에서 파생 되는 컬렉션 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 및 `MutableKey` 클래스입니다. 합니다 `MutableKey` 클래스에는 설정 가능한 `Key` 속성입니다. 속성 setter를 호출 하는 새 키 속성에 할당할 때 합니다 `internal` (`Friend` Visual Basic에서) `ChangeKey` 기존 키를 사용 하 여 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드. 그렇다면 예외가 throw 되 고 속성 값을 변경 되지 않습니다.  
  
 간의 연결을 유지 하기 위해를 `MutableKey` 개체 및 `MutableKeys` 컬렉션 및 두 개의 컬렉션에 삽입 되는 개체 방지 합니다 `MutableKey` 클래스에는 `internal` (`Friend` Visual Basic에서) `Collection`필드입니다. 이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 메서드. 필드에는 항목을 컬렉션에 추가 하 고 항목이 제거 되 면 지울 때 설정 됩니다.  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="item" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="key" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="item" />가 없는 경우  
  
또는 
 <paramref name="key" />가 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />에 이미 있는 경우</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ClearItems">
      <MemberSignature Language="C#" Value="protected override void ClearItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ClearItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ClearItems();" />
      <MemberSignature Language="F#" Value="override this.ClearItems : unit -&gt; unit" Usage="keyedCollection.ClearItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />에서 요소를 모두 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 조회 사전이 있으면이 메서드는 지우지만 삭제 되지 않습니다.  
  
 요소 수가 사전 생성 임계값을 초과 하는 경우 및 <xref:System.Collections.ObjectModel.KeyedCollection%602> 은 요소 수가 임계값 보다 작습니다. 다시도 조회 사전을 사용 하려면 계속 조회 사전을 사용 합니다.  
  
 이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.  
  
## <a name="notes-for-implementers"></a>구현자 참고 사항  
 동작을 사용자 지정 하려면이 메서드를 재정의 합니다 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 에서 상속 된 메서드는 <xref:System.Collections.ObjectModel.Collection%601> 제네릭 클래스입니다.  
  
 기본 컬렉션의 선택을 취소 하는 데 조회 사전을 지울이 메서드의 기본 클래스 구현을 호출 합니다.  
  
   
  
## Examples  
 이 섹션에서는 재정의 보여 주는 두 가지 코드 예제는 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A> 컬렉션에서 모든 개체를 지우기 위한 사용자 지정 동작을 제공 하는 방법입니다. 첫 번째 예제 사용자 지정 알림 이벤트를 추가 하 고 두 번째 변경할 수 있는 키를 사용 하 여 개체의 컬렉션에 대 한 지원을 제공 합니다.  
  
 예제 1  
  
 다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 메서드를 사용자 지정 동작을 제공 하는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 기본 설정 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서). 이 예제에 제공 된 사용자 지정 동작은 라는 알림 이벤트 `Changed`, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.  
  
 코드 예제는 `SimpleOrder` 클래스에서 파생 되는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 간단한 주문 양식을 나타냅니다. 주문 양식 포함 `OrderItem` 정렬 항목을 나타내는 개체입니다. 코드 예제에서는 `SimpleOrderChangedEventArgs` 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.  
  
 코드 예제에서 속성 및 파생된 클래스의 메서드를 호출 하 여 사용자 지정 동작을 보여 줍니다.는 `Main` 메서드는 `Demo` 클래스입니다.  
  
 이 코드 예제에서는 변경할 수 없는 키를 사용 하 여 개체를 사용 합니다. 변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 예제 2  
  
 다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 변경할 수 있는 키 및 보호를 재정의 하는 방법을 지원 하기 위해 메서드 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 키의 무결성을 유지 하는 방법 및 컬렉션입니다.  
  
 코드 예제는 `MutableKeys` 에서 파생 되는 컬렉션 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 및 `MutableKey` 클래스입니다. 합니다 `MutableKey` 클래스에는 설정 가능한 `Key` 속성입니다. 속성 setter를 호출 하는 새 키 속성에 할당할 때 합니다 `internal` (`Friend` Visual Basic에서) `ChangeKey` 기존 키를 사용 하 여 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드. 그렇다면 예외가 throw 되 고 속성 값을 변경 되지 않습니다.  
  
 간의 연결을 유지 하기 위해를 `MutableKey` 개체 및 `MutableKeys` 컬렉션 및 두 개의 컬렉션에 삽입 되는 개체 방지 합니다 `MutableKey` 클래스에는 `internal` (`Friend` Visual Basic에서) `Collection`필드입니다. 이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 메서드. 필드에는 항목을 컬렉션에 추가 하 고 항목이 제거 되 면 지울 때 설정 됩니다.  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Comparer : System.Collections.Generic.IEqualityComparer&lt;'Key&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컬렉션에 있는 키의 같음 여부를 확인하는 데 사용되는 제네릭 같음 비교자를 가져옵니다.</summary>
        <value>컬렉션에 있는 키의 같음 여부를 확인하는 데 사용되는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 제네릭 인터페이스의 구현입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성 값을 검색하는 것은 O(1) 연산입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Contains : 'Key -&gt; bool" Usage="keyedCollection.Contains key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />에서 찾을 수 있는 키입니다.</param>
        <summary>컬렉션에 지정된 키를 가진 요소가 포함된지를 확인합니다.</summary>
        <returns><see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 조회 사전이 `key` 사전을 검색 하는 데 사용 됩니다. 각 요소의 키를 사용 하 여 추출 조회 사전이 없는 경우는 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 메서드 및 지정된 된 키와 비교 합니다.  
  
 경우이 메서드는 o (1) 작업을 <xref:System.Collections.ObjectModel.KeyedCollection%602> 조회 사전이; O는 것이 고, 그렇지 (`n`) 작업을 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.  
  
   
  
## Examples  
 이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소 코드를 보여줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602>: 재정의 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 기본 클래스 생성자에 위임 하는 메서드 및 공용 생성자를 제공 합니다. 상속 된 메서드 및 코드 방법도 보여 속성 중 상당수 <xref:System.Collections.ObjectModel.KeyedCollection%602> 고 <xref:System.Collections.ObjectModel.Collection%601> 클래스입니다.  
  
 합니다 `SimpleOrder` 클래스는 포함 하는 매우 간단한 청구 목록을 `OrderItem` 각각 순서 대로 줄 항목을 나타내는 개체입니다. 키 `OrderItem` 변경할 수 없는에서 파생 된 클래스에 대 한 중요 고려 사항 <xref:System.Collections.ObjectModel.KeyedCollection%602>합니다. 변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IDictionary&lt;TKey,TItem&gt; Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;!TKey, !TItem&gt; Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Dictionary As IDictionary(Of TKey, TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ Dictionary { System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dictionary : System.Collections.Generic.IDictionary&lt;'Key, 'Item&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Dictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;TKey,TItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />의 조회 사전을 가져옵니다.</summary>
        <value><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />의 조회 사전이 있으면 해당 조회 사전이고, 그렇지 않으면 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 <xref:System.Collections.ObjectModel.KeyedCollection%602> 첫 번째 항목이 추가 될 때 생성 되는 조회 사전이 포함 되어 있습니다. 항목에 추가 될 때를 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 항목의 키가 한 번만 추출 하 고 빠른 검색에 대 한 조회 사전을 저장 합니다. 사용 하 여이 동작을 재정의할 수는 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 생성자 및 사전 작성 임계값을 지정 합니다.  
  
 이 속성 값을 검색하는 것은 O(1) 연산입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 변경할 수 있는 키 및 보호를 재정의 하는 방법을 지원 하기 위해 메서드 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 키의 무결성을 유지 하는 방법 및 컬렉션입니다.  
  
 코드 예제는 `MutableKeys` 에서 파생 되는 컬렉션 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 및 `MutableKey` 클래스입니다. 합니다 `MutableKey` 클래스에는 설정 가능한 `Key` 속성입니다. 속성 setter를 호출 하는 새 키 속성에 할당할 때 합니다 `internal` (`Friend` Visual Basic에서) `ChangeKey` 기존 키를 사용 하 여 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드. 그렇다면 예외가 throw 되 고 속성 값을 변경 되지 않습니다.  
  
 간의 연결을 유지 하기 위해를 `MutableKey` 개체 및 `MutableKeys` 컬렉션 및 두 개의 컬렉션에 삽입 되는 개체 방지 합니다 `MutableKey` 클래스에는 `internal` (`Friend` Visual Basic에서) `Collection`필드입니다. 이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 메서드. 필드에는 항목을 컬렉션에 추가 하 고 항목이 제거 되 면 지울 때 설정 됩니다.  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="GetKeyForItem">
      <MemberSignature Language="C#" Value="protected abstract TKey GetKeyForItem (TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TKey GetKeyForItem(!TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetKeyForItem (item As TItem) As TKey" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TKey GetKeyForItem(TItem item);" />
      <MemberSignature Language="F#" Value="abstract member GetKeyForItem : 'Item -&gt; 'Key" Usage="keyedCollection.GetKeyForItem item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="item">키를 추출할 요소입니다.</param>
        <summary>파생 클래스에서 구현되면 지정된 요소에서 키를 추출합니다.</summary>
        <returns>지정된 요소의 키입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 조회 사전의 키에 포함 된 키와 다른 경우 `item`에 액세스할 수 없습니다 `item` 에서 반환 하는 키를 사용 하 여 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>입니다.  
  
 반환 하려면이 메서드를 구현할 수 있습니다 `null` 키가 없는 항목을 포함 하는 컬렉션에 대 한 경우에 항목에 액세스할 수 해당 인덱스로 합니다. 이 방법은 O(1) 작업에 설명 합니다.  
  
## <a name="notes-for-implementers"></a>구현자 참고 사항  
 사전에 사전의 항목에서 키를 추출 하는 방법을 제공 하려면이 메서드를 재정의 해야 합니다.  
  
 이 메서드는 내부적으로 호출 됩니다. Public 이어야 하는 데 필요한 것입니다.  
  
   
  
## Examples  
 이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소 코드를 보여줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602>: 재정의 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 기본 클래스 생성자에 위임 하는 메서드 및 공용 생성자를 제공 합니다. 상속 된 메서드 및 코드 방법도 보여 속성 중 상당수 <xref:System.Collections.ObjectModel.KeyedCollection%602> 고 <xref:System.Collections.ObjectModel.Collection%601> 클래스입니다.  
  
 합니다 `SimpleOrder` 클래스는 포함 하는 매우 간단한 청구 목록을 `OrderItem` 각각 순서 대로 줄 항목을 나타내는 개체입니다. 키 `OrderItem` 변경할 수 없는에서 파생 된 클래스에 대 한 중요 고려 사항 <xref:System.Collections.ObjectModel.KeyedCollection%602>합니다. 변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="protected override void InsertItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InsertItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InsertItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InsertItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.InsertItem : int * 'Item -&gt; unit" Usage="keyedCollection.InsertItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index"><paramref name="item" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
        <param name="item">삽입할 개체입니다.</param>
        <summary><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />의 지정된 인덱스에 요소를 삽입합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `index` 값과 같음 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, `item` 끝에 추가 되는 <xref:System.Collections.ObjectModel.KeyedCollection%602>합니다.  
  
 이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 호출한 합니다 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> 고 <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> 메서드.  
  
## <a name="notes-for-implementers"></a>구현자 참고 사항  
 동작을 사용자 지정 하려면이 메서드를 재정의 합니다 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> 하 고 <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> 에서 상속 된 메서드를 <xref:System.Collections.ObjectModel.Collection%601> 제네릭 클래스입니다.  
  
 기본 컬렉션에 항목을 삽입 하 고 조회 사전을 업데이트할이 메서드의 기본 클래스 구현을 호출 합니다.  
  
   
  
## Examples  
 이 섹션에는 재정의 보여 주는 두 코드 예제가 포함 되어 있습니다.는 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 메서드를 추가 하거나 컬렉션에 개체를 삽입 하기 위한 사용자 지정 동작을 제공 합니다. 첫 번째 예제 사용자 지정 알림 이벤트를 추가 하 고 두 번째 변경할 수 있는 키를 사용 하 여 개체의 컬렉션에 대 한 지원을 제공 합니다.  
  
 예제 1  
  
 다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 메서드를 사용자 지정 동작을 제공 하는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 기본 설정 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서). 이 예제에 제공 된 사용자 지정 동작은 라는 알림 이벤트 `Changed`, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.  
  
 코드 예제는 `SimpleOrder` 클래스에서 파생 되는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 간단한 주문 양식을 나타냅니다. 주문 양식 포함 `OrderItem` 정렬 항목을 나타내는 개체입니다. 코드 예제에서는 `SimpleOrderChangedEventArgs` 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.  
  
 코드 예제에서 속성 및 파생된 클래스의 메서드를 호출 하 여 사용자 지정 동작을 보여 줍니다.는 `Main` 메서드는 `Demo` 클래스입니다.  
  
 이 코드 예제에서는 변경할 수 없는 키를 사용 하 여 개체를 사용 합니다. 변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 예제 2  
  
 다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 변경할 수 있는 키 및 보호를 재정의 하는 방법을 지원 하기 위해 메서드 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 키의 무결성을 유지 하는 방법 및 컬렉션입니다.  
  
 코드 예제는 `MutableKeys` 에서 파생 되는 컬렉션 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 및 `MutableKey` 클래스입니다. 합니다 `MutableKey` 클래스에는 설정 가능한 `Key` 속성입니다. 속성 setter를 호출 하는 새 키 속성에 할당할 때 합니다 `internal` (`Friend` Visual Basic에서) `ChangeKey` 기존 키를 사용 하 여 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드. 그렇다면 예외가 throw 되 고 속성 값을 변경 되지 않습니다.  
  
 간의 연결을 유지 하기 위해를 `MutableKey` 개체 및 `MutableKeys` 컬렉션 및 두 개의 컬렉션에 삽입 되는 개체 방지 합니다 `MutableKey` 클래스에는 `internal` (`Friend` Visual Basic에서) `Collection`필드입니다. 이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 메서드. 필드에는 항목을 컬렉션에 추가 하 고 항목이 제거 되 면 지울 때 설정 됩니다.  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />가 0보다 작은 경우  
  
또는 
 <paramref name="index" />가 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />보다 큰 경우</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TItem this[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TItem Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As TKey) As TItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TItem default[TKey] { TItem get(TKey key); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Item" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">가져올 요소의 키입니다.</param>
        <summary>지정된 키를 가진 요소를 가져옵니다.</summary>
        <value>지정한 키가 있는 요소입니다. 지정된 키를 가진 요소가 없으면 예외가 throw됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 다음 구문을 사용 하 여 컬렉션의 특정 요소에 액세스 하는 기능을 제공 합니다. `myCollection[key]` (`myCollection(key)` Visual Basic에서).  
  
> [!NOTE]
>  이 속성은 상속 된 구별 <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> 속성을 숫자 인덱스 별로 요소를 가져오거나 설정 합니다. 그러나 경우 `TKey` 형식의 <xref:System.Int32>,이 속성을 상속 된 속성과 마스크 합니다. 이 경우 캐스팅 하 여 상속 된 속성에 액세스할 수 있습니다는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 해당 기본 형식에 있습니다. 예를 들어 `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)` Visual Basic에서는 `KeyedCollection<int, MyType^>` c + +에서)로 캐스팅할 수 있습니다 `Collection<MyType>` (`Collection(Of MyType)` Visual Basic에서는 `Collection<MyType^>` c + +에서).  
  
 경우는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 조회 사전이 `key` 사전에서 요소를 검색 하는 데 사용 됩니다.  각 요소의 키를 사용 하 여 추출 조회 사전이 없는 경우는 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 메서드 및 지정된 된 키와 비교 합니다.  
  
 C# 언어 키워드를 사용 하 여 구현 하는 대신 인덱서를 정의 하는 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> 속성입니다. Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>을 기본 속성으로 구현합니다.  
  
 경우이 속성의 값을 검색 하는 o (1) 작업을 <xref:System.Collections.ObjectModel.KeyedCollection%602> 조회 사전이; O는 것이 고, 그렇지 (`n`) 작업을 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.  
  
   
  
## Examples  
 이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소 코드를 보여줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602>: 재정의 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 기본 클래스 생성자에 위임 하는 메서드 및 공용 생성자를 제공 합니다. 상속 된 메서드 및 코드 방법도 보여 속성 중 상당수 <xref:System.Collections.ObjectModel.KeyedCollection%602> 고 <xref:System.Collections.ObjectModel.Collection%601> 클래스입니다.  
  
 코드 예제에서는 둘 다를 호출 합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> 속성은 읽기 전용 키로 검색 하 고 및 <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> 인덱스로 검색 하는 설정 가능한 속성. 파생된 컬렉션의 개체에는 정수 키를 인덱스로 검색에 사용 되는 정수 구별할 때 두 번째 속성을 액세스 하는 방법을 보여 줍니다.  
  
 합니다 `SimpleOrder` 클래스는 포함 하는 매우 간단한 청구 목록을 `OrderItem` 각각 순서 대로 줄 항목을 나타내는 개체입니다. 키 `OrderItem` 변경할 수 없는에서 파생 된 클래스에 대 한 중요 고려 사항 <xref:System.Collections.ObjectModel.KeyedCollection%602>합니다. 변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">지정된 키를 가진 요소가 컬렉션에 없는 경우</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Remove : 'Key -&gt; bool" Usage="keyedCollection.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">제거할 요소의 키입니다.</param>
        <summary><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />에서 지정한 키를 가지는 요소를 제거합니다.</summary>
        <returns>요소가 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 메서드는 <see langword="false" />가 <paramref name="key" />에 없는 경우에도 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요소의 키 조회 사전에서 제거 됩니다.  
  
 요소 수가 사전 생성 임계값을 초과 하는 경우 및 <xref:System.Collections.ObjectModel.KeyedCollection%602> 은 요소 수가 임계값 보다 작습니다. 다시도 조회 사전을 사용 하려면 계속 조회 사전을 사용 합니다.  
  
> [!NOTE]
>  이 메서드의 동작을 사용자 지정 하려면 재정의 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> 메서드.  
  
 이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.  
  
   
  
## Examples  
 이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소 코드를 보여줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602>: 재정의 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 기본 클래스 생성자에 위임 하는 메서드 및 공용 생성자를 제공 합니다. 상속 된 메서드 및 코드 방법도 보여 속성 중 상당수 <xref:System.Collections.ObjectModel.KeyedCollection%602> 고 <xref:System.Collections.ObjectModel.Collection%601> 클래스입니다.  
  
 예제에 나오는 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A> 에서 상속 된 메서드 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 지정된 된 키를 사용 하 여 항목을 제거 하는 및를 <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> 및 <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> 에서 상속 된 메서드 <xref:System.Collections.ObjectModel.Collection%601>는 제거 개체와 인덱스로 각각.  
  
 합니다 `SimpleOrder` 클래스는 포함 하는 매우 간단한 청구 목록을 `OrderItem` 각각 순서 대로 줄 항목을 나타내는 개체입니다. 키 `OrderItem` 변경할 수 없는에서 파생 된 클래스에 대 한 중요 고려 사항 <xref:System.Collections.ObjectModel.KeyedCollection%602>합니다. 변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected override void RemoveItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RemoveItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RemoveItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RemoveItem(int index);" />
      <MemberSignature Language="F#" Value="override this.RemoveItem : int -&gt; unit" Usage="keyedCollection.RemoveItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">제거할 요소의 인덱스입니다.</param>
        <summary><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />의 지정된 인덱스에 있는 요소를 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요소의 키 조회 사전에서 제거 됩니다.  
  
 요소 수가 사전 생성 임계값을 초과 하는 경우 및 <xref:System.Collections.ObjectModel.KeyedCollection%602> 은 요소 수가 임계값 보다 작습니다. 다시도 조회 사전을 사용 하려면 계속 조회 사전을 사용 합니다.  
  
 이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.  
  
## <a name="notes-for-implementers"></a>구현자 참고 사항  
 동작을 사용자 지정 하려면이 메서드를 재정의 합니다 <xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29> 하 고 <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29> 에서 상속 된 메서드는 <xref:System.Collections.ObjectModel.Collection%601> 제네릭 클래스 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29> 메서드.  
  
 기본 컬렉션에서 항목을 제거 하 고 조회 사전을 업데이트할이 메서드의 기본 클래스 구현을 호출 합니다.  
  
   
  
## Examples  
 이 섹션에서는 재정의 보여 주는 두 가지 코드 예제는 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> 컬렉션에서 개체 제거에 대 한 사용자 지정 동작을 제공 하는 방법입니다. 첫 번째 예제 사용자 지정 알림 이벤트를 추가 하 고 두 번째 변경할 수 있는 키를 사용 하 여 개체의 컬렉션에 대 한 지원을 제공 합니다.  
  
 예제 1  
  
 다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 메서드를 사용자 지정 동작을 제공 하는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 기본 설정 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서). 이 예제에 제공 된 사용자 지정 동작은 라는 알림 이벤트 `Changed`, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.  
  
 코드 예제는 `SimpleOrder` 클래스에서 파생 되는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 간단한 주문 양식을 나타냅니다. 주문 양식 포함 `OrderItem` 정렬 항목을 나타내는 개체입니다. 코드 예제에서는 `SimpleOrderChangedEventArgs` 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.  
  
 코드 예제에서 속성 및 파생된 클래스의 메서드를 호출 하 여 사용자 지정 동작을 보여 줍니다.는 `Main` 메서드는 `Demo` 클래스입니다.  
  
 이 코드 예제에서는 변경할 수 없는 키를 사용 하 여 개체를 사용 합니다. 변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 예제 2  
  
 다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 변경할 수 있는 키 및 보호를 재정의 하는 방법을 지원 하기 위해 메서드 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 키의 무결성을 유지 하는 방법 및 컬렉션입니다.  
  
 코드 예제는 `MutableKeys` 에서 파생 되는 컬렉션 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 및 `MutableKey` 클래스입니다. 합니다 `MutableKey` 클래스에는 설정 가능한 `Key` 속성입니다. 속성 setter를 호출 하는 새 키 속성에 할당할 때 합니다 `internal` (`Friend` Visual Basic에서) `ChangeKey` 기존 키를 사용 하 여 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드. 그렇다면 예외가 throw 되 고 속성 값을 변경 되지 않습니다.  
  
 간의 연결을 유지 하기 위해를 `MutableKey` 개체 및 `MutableKeys` 컬렉션 및 두 개의 컬렉션에 삽입 되는 개체 방지 합니다 `MutableKey` 클래스에는 `internal` (`Friend` Visual Basic에서) `Collection`필드입니다. 이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 메서드. 필드에는 항목을 컬렉션에 추가 하 고 항목이 제거 되 면 지울 때 설정 됩니다.  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="protected override void SetItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.SetItem : int * 'Item -&gt; unit" Usage="keyedCollection.SetItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">바꿀 항목의 인덱스(0부터 시작)입니다.</param>
        <param name="item">새 항목입니다.</param>
        <summary>지정된 인덱스에 있는 항목을 지정된 항목으로 바꿉니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 조회 사전은 적절히 업데이트 됩니다. 즉, 대체 되는 항목의 키 조회 사전에서 제거 되 고 새 항목의 키 추가 됩니다.  
  
 이 방법은 O(1) 작업에 설명 합니다.  
  
## <a name="notes-for-implementers"></a>구현자 참고 사항  
 설정에 대 한 사용자 지정된 동작을 제공 하려면이 메서드를 재정의 합니다 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성에서 상속을 <xref:System.Collections.ObjectModel.Collection%601> 제네릭 클래스입니다.  
  
> [!NOTE]
>  이 메서드는 동작의 영향을 주지 않습니다는 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> 속성은 읽기 전용입니다.  
  
 내부 컬렉션에서 항목을 설정 하 고 조회 사전을 업데이트할이 메서드의 기본 클래스 구현을 호출 합니다.  
  
   
  
## Examples  
 이 섹션에는 재정의 보여 주는 두 코드 예제가 포함 되어 있습니다.는 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 설정에 대 한 사용자 지정 동작을 제공 하는 방법의 <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> 속성입니다. 첫 번째 예제 사용자 지정 알림 이벤트를 추가 하 고 두 번째 변경할 수 있는 키를 사용 하 여 개체의 컬렉션에 대 한 지원을 제공 합니다.  
  
 예제 1  
  
 다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 메서드를 사용자 지정 동작을 제공 하는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 기본 설정 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서). 이 예제에 제공 된 사용자 지정 동작은 라는 알림 이벤트 `Changed`, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.  
  
 코드 예제는 `SimpleOrder` 클래스에서 파생 되는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 간단한 주문 양식을 나타냅니다. 주문 양식 포함 `OrderItem` 정렬 항목을 나타내는 개체입니다. 코드 예제에서는 `SimpleOrderChangedEventArgs` 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.  
  
 코드 예제에서 속성 및 파생된 클래스의 메서드를 호출 하 여 사용자 지정 동작을 보여 줍니다.는 `Main` 메서드는 `Demo` 클래스입니다.  
  
 이 코드 예제에서는 변경할 수 없는 키를 사용 하 여 개체를 사용 합니다. 변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 예제 2  
  
 다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 변경할 수 있는 키 및 보호를 재정의 하는 방법을 지원 하기 위해 메서드 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 키의 무결성을 유지 하는 방법 및 컬렉션입니다.  
  
 코드 예제는 `MutableKeys` 에서 파생 되는 컬렉션 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 및 `MutableKey` 클래스입니다. 합니다 `MutableKey` 클래스에는 설정 가능한 `Key` 속성입니다. 속성 setter를 호출 하는 새 키 속성에 할당할 때 합니다 `internal` (`Friend` Visual Basic에서) `ChangeKey` 기존 키를 사용 하 여 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드. 그렇다면 예외가 throw 되 고 속성 값을 변경 되지 않습니다.  
  
 간의 연결을 유지 하기 위해를 `MutableKey` 개체 및 `MutableKeys` 컬렉션 및 두 개의 컬렉션에 삽입 되는 개체 방지 합니다 `MutableKey` 클래스에는 `internal` (`Friend` Visual Basic에서) `Collection`필드입니다. 이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 메서드. 필드에는 항목을 컬렉션에 추가 하 고 항목이 제거 되 면 지울 때 설정 됩니다.  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TItem&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef item As TItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TItem % item);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : 'Key *  -&gt; bool" Usage="keyedCollection.TryGetValue (key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="item" Type="TItem" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>