<Type Name="CaseInsensitiveComparer" FullName="System.Collections.CaseInsensitiveComparer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d3eb17adb1447cb6b220210e43c3237d55a9c1d1" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58715522" /></Metadata><TypeSignature Language="C#" Value="public class CaseInsensitiveComparer : System.Collections.IComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CaseInsensitiveComparer extends System.Object implements class System.Collections.IComparer" />
  <TypeSignature Language="DocId" Value="T:System.Collections.CaseInsensitiveComparer" />
  <TypeSignature Language="VB.NET" Value="Public Class CaseInsensitiveComparer&#xA;Implements IComparer" />
  <TypeSignature Language="C++ CLI" Value="public ref class CaseInsensitiveComparer : System::Collections::IComparer" />
  <TypeSignature Language="F#" Value="type CaseInsensitiveComparer = class&#xA;    interface IComparer" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>문자열의 대/소문자를 무시하고 두 개체를 비교합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

<xref:System.Collections.CaseInsensitiveComparer> 구현 된 <xref:System.Collections.IComparer> 처럼 문자열 대/소문자 구분 비교를 지 원하는 인터페이스 <xref:System.Collections.CaseInsensitiveHashCodeProvider> 구현를 <xref:System.Collections.IHashCodeProvider> 문자열에 대/소문자 구분 비교를 지 원하는 인터페이스.  

> [!IMPORTANT]
>  사용 하는 권장 하지 않습니다는 `CaseInsensitiveComparer` 새로운 개발에 대 한 클래스입니다. 사용 하는 권장 대신 합니다 <xref:System.StringComparer?displayProperty=nameWithType> 에서 반환 된 개체를 <xref:System.StringComparer.CurrentCultureIgnoreCase?displayProperty=nameWithType>, <xref:System.StringComparer.InvariantCultureIgnoreCase?displayProperty=nameWithType>, 또는 <xref:System.StringComparer.OrdinalIgnoreCase?displayProperty=nameWithType> 속성입니다.

합니다 <xref:System.Collections.Comparer> 클래스의 기본 구현은 <xref:System.Collections.IComparer> 인터페이스 및 대/소문자 구분 문자열 비교를 수행 합니다.  
  
 키로 사용 하는 개체를 <xref:System.Collections.Hashtable> 재정의 하는 데 필요한 합니다 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 메서드 (또는 <xref:System.Collections.IHashCodeProvider> 인터페이스) 및 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 메서드 (또는 <xref:System.Collections.IComparer> 인터페이스). 메서드나 인터페이스 구현의 대/소문자 구분; 동일한 방식으로 처리 해야 합니다. 그렇지 않은 경우는 <xref:System.Collections.Hashtable> 올바르게 작동할 수 있습니다. 예를 들어, 만들 때를 <xref:System.Collections.Hashtable>를 사용 하 여이 클래스를 사용 해야 합니다 <xref:System.Collections.CaseInsensitiveHashCodeProvider> 클래스 또는 대/소문자 <xref:System.Collections.IHashCodeProvider> 구현.  
  
 문자열 비교는 문화권에 따라 다른 결과가 있을 수 있습니다. 문화권별 비교에 대 한 자세한 내용은 참조는 <xref:System.Globalization> 네임 스페이스 및 [전역화 및 지역화](~/docs/standard/globalization-localization/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 대/소문자 구분 해시 테이블 및 대/소문자 해시 테이블을 만들고 모두 동일한 요소를 포함 하는 경우에 해당 동작의 차이점을 설명 합니다.  
  
 [!code-cpp[System.Collections.CaseInsensitive#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CPP/caseinsensitive.cpp#1)]
 [!code-csharp[System.Collections.CaseInsensitive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CS/caseinsensitive.cs#1)]
 [!code-vb[System.Collections.CaseInsensitive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/VB/caseinsensitive.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.IComparer" />
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.Comparer" />
    <altmember cref="T:System.Globalization.CompareInfo" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
    <altmember cref="T:System.Globalization.CultureInfo" />
    <altmember cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />
    <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Collections.CaseInsensitiveComparer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CaseInsensitiveComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CaseInsensitiveComparer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CaseInsensitiveComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>현재 스레드의 <see cref="T:System.Collections.CaseInsensitiveComparer" />를 사용하여 <see cref="P:System.Threading.Thread.CurrentCulture" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Collections.CaseInsensitiveComparer> 인스턴스를이 생성자를 사용 하 여 만들어집니다는 <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> 현재 스레드의 저장 됩니다. 정렬 및 대/소문자 규칙을 확인 하려면 저장 된 문화권을 사용 하는 비교 프로시저 따라서 문자열 비교는 문화권에 따라 다른 결과가 있을 수 있습니다. 문화권별 비교에 대 한 자세한 내용은 참조는 <xref:System.Globalization> 네임 스페이스 및 [전역화 및 지역화](~/docs/standard/globalization-localization/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 대/소문자 구분 해시 테이블 및 대/소문자 해시 테이블을 만들고 모두 동일한 요소를 포함 하는 경우에 해당 동작의 차이점을 설명 합니다.  
  
 [!code-cpp[System.Collections.CaseInsensitive#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CPP/caseinsensitive.cpp#1)]
 [!code-csharp[System.Collections.CaseInsensitive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CS/caseinsensitive.cs#1)]
 [!code-vb[System.Collections.CaseInsensitive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/VB/caseinsensitive.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.CompareInfo" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CaseInsensitiveComparer (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CaseInsensitiveComparer.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CaseInsensitiveComparer(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="new System.Collections.CaseInsensitiveComparer : System.Globalization.CultureInfo -&gt; System.Collections.CaseInsensitiveComparer" Usage="new System.Collections.CaseInsensitiveComparer culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">새 <see cref="T:System.Globalization.CultureInfo" />에 사용할 <see cref="T:System.Collections.CaseInsensitiveComparer" />입니다.</param>
        <summary>지정된 <see cref="T:System.Collections.CaseInsensitiveComparer" />를 사용하여 <see cref="T:System.Globalization.CultureInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비교 절차를 사용 하 여 지정 된 <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> 를 정렬 및 대/소문자 규칙을 결정 합니다. 문자열 비교는 문화권에 따라 다른 결과가 있을 수 있습니다. 문화권별 비교에 대 한 자세한 내용은 참조는 <xref:System.Globalization> 네임 스페이스 및 [전역화 및 지역화](~/docs/standard/globalization-localization/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 대/소문자 구분 해시 테이블 및 대/소문자 해시 테이블을 만들고 모두 동일한 요소를 포함 하는 경우에 해당 동작의 차이점을 설명 합니다.  
  
 [!code-cpp[System.Collections.CaseInsensitive#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CPP/caseinsensitive.cpp#1)]
 [!code-csharp[System.Collections.CaseInsensitive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CS/caseinsensitive.cs#1)]
 [!code-vb[System.Collections.CaseInsensitive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/VB/caseinsensitive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="culture" />가 <see langword="null" />입니다.</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.CompareInfo" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</related>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (object a, object b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(object a, object b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.CaseInsensitiveComparer.Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (a As Object, b As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::Object ^ a, System::Object ^ b);" />
      <MemberSignature Language="F#" Value="abstract member Compare : obj * obj -&gt; int&#xA;override this.Compare : obj * obj -&gt; int" Usage="caseInsensitiveComparer.Compare (a, b)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Object" />
        <Parameter Name="b" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="a">비교할 첫 번째 개체입니다.</param>
        <param name="b">비교할 두 번째 개체입니다.</param>
        <summary>대/소문자를 구분하지 않고 같은 형식의 두 개체를 비교한 다음 한 개체가 다른 개체보다 작은지, 큰지 또는 두 개체가 같은지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>다음 표와 같이 <paramref name="a" /> 및 <paramref name="b" />의 상대 값을 나타내는 부호 있는 정수입니다.  
  
 <list type="table"><listheader><term> 값 
 </term><description> 의미 
 </description></listheader><item><term> 0보다 작음 
 </term><description><paramref name="a" />는 대/소문자를 구분하지 않은 상태에서 <paramref name="b" />보다 작습니다.  
  
 </description></item><item><term> 0 
 </term><description><paramref name="a" />는 대/소문자를 구분하지 않은 상태에서 <paramref name="b" />와 같습니다.  
  
 </description></item><item><term> 0보다 큼 
 </term><description><paramref name="a" />는 대/소문자를 구분하지 않은 상태에서 <paramref name="b" />보다 큽니다.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하는 경우 `a` 및 `b` 사용 하 여 두 문자열의 경우이 메서드는 <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> 대/소문자를 사용 하 여 문자열을 비교할 무시 됩니다. 사용 하 여이 고, 그렇지 않으면를 <xref:System.IComparable> 개체의 구현입니다. 즉, 하는 경우 `a` 구현 <xref:System.IComparable>,이 메서드가 결과 반환 합니다. 그런 다음 `a`합니다. `CompareTo` (`b`)이 고, 그렇지 않으면 경우 `b` 구현 <xref:System.IComparable>, 부정된 결과를 반환 하는 다음 `b`합니다. `CompareTo` (`a`).  
  
 비교 `null` 형식을 사용 하 여 허용 되 고 사용 하는 경우 예외를 생성 하지 않습니다 <xref:System.IComparable>합니다. 정렬할 때 `null` 다른 개체 보다 작은 것으로 간주 됩니다.  
  
 문자열 비교는 문화권에 따라 다른 결과가 있을 수 있습니다. 문화권별 비교에 대 한 자세한 내용은 참조는 <xref:System.Globalization> 네임 스페이스 및 [전역화 및 지역화](~/docs/standard/globalization-localization/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="a" /> 또는 <paramref name="b" /> 모두 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우  
  
또는 
 <paramref name="a" />와 <paramref name="b" />가 형식이 다른 경우</exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.Globalization.CompareInfo" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</related>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Collections.CaseInsensitiveComparer Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.CaseInsensitiveComparer Default" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CaseInsensitiveComparer.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As CaseInsensitiveComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::CaseInsensitiveComparer ^ Default { System::Collections::CaseInsensitiveComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Collections.CaseInsensitiveComparer" Usage="System.Collections.CaseInsensitiveComparer.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.CaseInsensitiveComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 스레드의 <see cref="T:System.Collections.CaseInsensitiveComparer" />와 관련되어 있고 항상 사용 가능한 <see cref="P:System.Threading.Thread.CurrentCulture" />의 인스턴스를 가져옵니다.</summary>
        <value>현재 스레드의 <see cref="T:System.Collections.CaseInsensitiveComparer" />와 관련된 <see cref="P:System.Threading.Thread.CurrentCulture" />의 인스턴스입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Collections.CaseInsensitiveComparer> 매개 변수가 없는 생성자를 사용 하 여 인스턴스가 생성 되는 <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> 현재 스레드의 저장 됩니다. 정렬 및 대/소문자 규칙을 확인 하려면 저장 된 문화권을 사용 하는 비교 프로시저 따라서 문자열 비교는 문화권에 따라 다른 결과가 있을 수 있습니다. 문화권별 비교에 대 한 자세한 내용은 참조는 <xref:System.Globalization> 네임 스페이스 및 [전역화 및 지역화](~/docs/standard/globalization-localization/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CompareInfo" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultInvariant">
      <MemberSignature Language="C#" Value="public static System.Collections.CaseInsensitiveComparer DefaultInvariant { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.CaseInsensitiveComparer DefaultInvariant" />
      <MemberSignature Language="DocId" Value="P:System.Collections.CaseInsensitiveComparer.DefaultInvariant" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultInvariant As CaseInsensitiveComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::CaseInsensitiveComparer ^ DefaultInvariant { System::Collections::CaseInsensitiveComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultInvariant : System.Collections.CaseInsensitiveComparer" Usage="System.Collections.CaseInsensitiveComparer.DefaultInvariant" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.CaseInsensitiveComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.CaseInsensitiveComparer" />와 관련되어 있고 항상 사용 가능한 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />의 인스턴스를 가져옵니다.</summary>
        <value><see cref="T:System.Collections.CaseInsensitiveComparer" />와 관련된 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />의 인스턴스입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비교 절차를 사용 합니다 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 정렬 및 대/소문자 규칙을 확인 하려면. 문자열 비교는 문화권에 따라 다른 결과가 있을 수 있습니다. 문화권별 비교에 대 한 자세한 내용은 참조는 <xref:System.Globalization> 네임 스페이스 및 [전역화 및 지역화](~/docs/standard/globalization-localization/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 대/소문자 구분 해시 테이블 및 대/소문자 해시 테이블을 만들고 모두 동일한 요소를 포함 하는 경우에 해당 동작의 차이점을 설명 합니다.  
  
 [!code-cpp[System.Collections.CaseInsensitive#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CPP/caseinsensitive.cpp#1)]
 [!code-csharp[System.Collections.CaseInsensitive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/CS/caseinsensitive.cs#1)]
 [!code-vb[System.Collections.CaseInsensitive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.CaseInsensitive/VB/caseinsensitive.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="T:System.Globalization.CompareInfo" />
        <related type="Article" href="~/docs/standard/globalization-localization/performing-culture-insensitive-string-operations-in-collections.md">컬렉션에서 Culture를 구분하지 않는 문자열 작업 수행</related>
      </Docs>
    </Member>
  </Members>
</Type>