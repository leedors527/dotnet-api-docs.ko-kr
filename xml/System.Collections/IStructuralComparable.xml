<Type Name="IStructuralComparable" FullName="System.Collections.IStructuralComparable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="625ac9d081d1ec3de268eae09f25563fa017a9e7" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58698233" /></Metadata><TypeSignature Language="C#" Value="public interface IStructuralComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStructuralComparable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IStructuralComparable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStructuralComparable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStructuralComparable" />
  <TypeSignature Language="F#" Value="type IStructuralComparable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>컬렉션 개체의 구조 비교를 지원합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.IStructuralComparable> 인터페이스를 사용 하면 컬렉션 멤버에 대 한 사용자 지정 된 비교를 구현할 수 있습니다. 즉, 정확 하 게 말해 앞, 뒤 또는 두 번째 컬렉션 개체와 정렬 순서에서 같은 위치에서 발생 한 컬렉션 개체에 대 한을 정의할 수 있습니다. 이 정의 허용 하는 컬렉션 형식을 사용할 수 지정할 수 있습니다는 <xref:System.Collections.IStructuralComparable> 인터페이스입니다.  
  
 인터페이스에는 단일 멤버인 <xref:System.Collections.IStructuralComparable.CompareTo%2A>를 현재 컬렉션 개체 보다 작은지, 같은지 또는 정렬 순서에서 두 번째 개체 보다 큰지 인지를 결정 합니다. 멤버의 두 번째 개체를 사용 하 여 현재 인스턴스에 있는 요소의 실제 비교를 수행 하 여는 <xref:System.Collections.IComparer> 사용자 지정 비교의 정의 포함 하는 인터페이스 구현.  
  
> [!NOTE]
>  <xref:System.Collections.IStructuralComparable> 인터페이스 정렬 또는 순서에 대 한 구조적 비교만 지원 합니다. <xref:System.Collections.IStructuralEquatable> 인터페이스 구조적 같음에 대 한 사용자 지정 비교를 지원 합니다.  
  
 .NET Framework는 두 명의 기본 비교자를 제공합니다. 하나에서 반환 되는 <xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=nameWithType> 속성에서 반환 하는 다른는 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 속성입니다.  
  
 제네릭 tuple 클래스 (<xref:System.Tuple%601>, <xref:System.Tuple%602>를 <xref:System.Tuple%603>등) 및 <xref:System.Array> 클래스의 명시적 구현을 제공 합니다 <xref:System.Collections.IStructuralComparable> 인터페이스입니다. 캐스팅 (C#) 또는 변환 (Visual Basic)의 배열 또는 튜플의 현재 인스턴스에 의해는 <xref:System.Collections.IStructuralComparable> 인터페이스 값 제공 하 고 프로그램 <xref:System.Collections.IComparer> 구현에 대 한 인수로 <xref:System.Collections.IStructuralComparable.CompareTo%2A> 메서드를 사용자 지정 정렬 순서를 정의할 수 있습니다를 배열 또는 컬렉션입니다. 그러나 호출 하지는 <xref:System.Collections.IStructuralComparable.CompareTo%2A> 대부분의 경우에서 직접 메서드. 대신 합니다 <xref:System.Collections.IStructuralComparable.CompareTo%2A> 메서드는 메서드를 같은 정렬 <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>합니다. 정의 하는 예제의 경우에 <xref:System.Collections.IComparer> 구현 된 정렬 메서드 또는 컬렉션 개체의 클래스 생성자에 인수로 전달 합니다. <xref:System.Collections.IStructuralComparable.CompareTo%2A> 메서드에 사용자 지정 비교자를 사용 하 여 컬렉션 정렬 될 때마다 자동으로 호출 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 배열을 <xref:System.Tuple%606> 1960 년부터 2000 세 미국 도시 인구 데이터를 포함 하는 개체입니다. 6 중의 첫 번째 구성 요소에는 도시 이름입니다. 나머지 5 개의 구성 요소를 2000 1960 년부터 10 년 간격 인구를 나타냅니다.  
  
 합니다 `PopulationComparer` 클래스를 제공는 <xref:System.Collections.IComparer> 배열을 로스엔젤레스와 6 중 하나라도 해당 구성 요소를 정렬할 수 있도록 구현 합니다. 두 값에 제공 되는 `PopulationComparer` 해당 생성자에 클래스: 정렬 순서를 정의 하는 구성 요소 및 튜플 개체를 오름차순 또는 내림차순으로 정렬할지 여부를 나타내는 부울 값의 위치입니다.  
  
 예제에서는 다음 정렬 되지 않은 순서로 배열에 요소를 표시, 세 번째 구성 요소 (1970에서 채우기)을 기준으로 정렬 및 표시 하 다음 여섯 번째 구성 요소 (2000에서 채우기)을 기준으로 정렬 및 표시 합니다. 이 예제에서는 직접 호출 하지 않는 참고를 <xref:System.Collections.IStructuralComparable.CompareTo%2A> 메서드. 메서드를 암시적으로 호출 된 <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> 각 튜플 개체 배열에 대 한 메서드.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.IStructuralEquatable" />
    <altmember cref="P:System.Collections.StructuralComparisons.StructuralComparer" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As Object, comparer As IComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj * System.Collections.IComparer -&gt; int" Usage="iStructuralComparable.CompareTo (other, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">현재 인스턴스와 비교할 개체입니다.</param>
        <param name="comparer">현재 컬렉션 개체의 멤버를 <paramref name="other" />의 해당하는 멤버와 비교하는 개체입니다.</param>
        <summary>정렬 순서에서 현재 컬렉션 개체의 위치가 다른 개체보다 앞인지, 뒤인지 또는 동일한지를 확인합니다.</summary>
        <returns>다음과 같이 정렬 순서에서 현재 컬렉션 개체와 <paramref name="other" />의 관계를 나타내는 부호 있는 정수입니다.<br /> - 0보다 작으면 현재 인스턴스가 <paramref name="other" /> 앞에 옵니다.<br /> - 0인 경우 현재 인스턴스와 <paramref name="other" />가 같습니다.<br /> - 0보다 큰 경우 현재 인스턴스가 <paramref name="other" /> 뒤에 옵니다.  
  
 <list type="table"><listheader><term> 반환 값 
 </term><description> 설명 
 </description></listheader><item><term> -1 
 </term><description> 현재 인스턴스가 <paramref name="other" /> 앞에 옵니다.  
  
 </description></item><item><term> 0 
 </term><description> 현재 인스턴스와 <paramref name="other" />가 같습니다.  
  
 </description></item><item><term> 1 
 </term><description> 현재 인스턴스가 <paramref name="other" /> 뒤에 옵니다.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.IStructuralComparable.CompareTo%2A> 메서드는 사용자 지정 구조적 비교 및 배열과 튜플 개체의 정렬 지원 합니다. 합니다 <xref:System.Collections.IStructuralComparable.CompareTo%2A> 메서드 호출을 `comparer` 개체의 <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> 개별 배열 요소 또는 구성 요소를 첫 번째 요소부터 튜플 구성 요소를 비교 하는 방법입니다. 개별 호출 <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> 끝 및 <xref:System.Collections.IStructuralComparable.CompareTo%2A> 메서드는 다음 조건 중 하나 면 값을 반환 합니다.  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> 메서드는-1을 반환 합니다.  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> 메서드 1을 반환 합니다.  
  
-   <xref:System.Collections.IComparer.Compare%2A?displayProperty=nameWithType> 마지막 요소 또는 구성 요소 컬렉션 개체에 대해 메서드가 호출 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 배열을 <xref:System.Tuple%606> 1960 년부터 2000 세 미국 도시 인구 데이터를 포함 하는 개체입니다. 6 중의 첫 번째 구성 요소에는 도시 이름입니다. 나머지 5 개의 구성 요소를 2000 1960 년부터 10 년 간격 인구를 나타냅니다.  
  
 합니다 `PopulationComparer` 클래스를 제공는 <xref:System.Collections.IComparer> 배열을 로스엔젤레스와 6 중 하나라도 해당 구성 요소를 정렬할 수 있도록 구현 합니다. 두 값에 제공 되는 `PopulationComparer` 클래스의 생성자에: 정렬 순서를 정의 하는 구성 요소의 위치 및 <xref:System.Boolean> 튜플 개체를 오름차순 또는 내림차순으로 정렬할지 여부를 나타내는 값입니다.  
  
 예제에서는 다음 정렬 되지 않은 순서로 배열에 요소를 표시, 세 번째 구성 요소 (1970에서 채우기)을 기준으로 정렬 및 표시 하 다음 여섯 번째 구성 요소 (2000에서 채우기)을 기준으로 정렬 및 표시 합니다. 이 예제에서는 직접 호출 하지 않는 참고는 <xref:System.Collections.IStructuralComparable.CompareTo%2A?displayProperty=nameWithType> 구현 합니다. 메서드를 암시적으로 호출 된 <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> 각 튜플 개체 배열에 대 한 메서드.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">이 인스턴스와 <paramref name="other" />가 동일한 형식이 아닌 경우</exception>
        <altmember cref="T:System.Collections.IComparer" />
      </Docs>
    </Member>
  </Members>
</Type>