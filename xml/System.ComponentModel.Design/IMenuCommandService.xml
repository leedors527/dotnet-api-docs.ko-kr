<Type Name="IMenuCommandService" FullName="System.ComponentModel.Design.IMenuCommandService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d73892d14df1e5f7c75dc17365973724e89fdc4a" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58719094" /></Metadata><TypeSignature Language="C#" Value="public interface IMenuCommandService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMenuCommandService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.IMenuCommandService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMenuCommandService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMenuCommandService" />
  <TypeSignature Language="F#" Value="type IMenuCommandService = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>디자인 모드에서 사용 가능한 메뉴 명령과 전역 디자이너 동사를 관리하고 바로 가기 메뉴의 일부 형식을 보여 주는 메서드를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 인터페이스는 메서드를를 제공합니다.  
  
-   찾기, 호출, 추가 및 전역 디자이너 동사 명령을 제거 합니다.  
  
-   찾기, 호출, 추가 및 표준 메뉴 명령을 제거 합니다.  
  
-   표준 메뉴 명령과 사용 하 여 연결 된 이벤트 처리기를 변경 합니다.  
  
-   메뉴와 연결 된 표준 명령의 바로 가기 메뉴를 표시할 <xref:System.ComponentModel.Design.CommandID>합니다.  
  
 디자이너 동사 디자인 모드에서 바로 가기 메뉴에 나열 된 사용자 정의 명령을 나타냅니다. 디자이너 동사의 지정 된 텍스트 레이블을 제공할 수 있습니다. 각 디자이너 동사는 자동으로 고유한 할당 <xref:System.ComponentModel.Design.CommandID>합니다. 디자이너를 통해 디자이너 동사를 제공할 수는 <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> 속성이 아니라이 때만 사용할 디자이너의 구성 요소가 현재 선택 합니다. 전역 디자이너 동사는 선택한 구성 요소에 관계 없이 디자인 모드 바로 가기 메뉴에서 액세스할 수 있는 디자이너 동사 명령입니다. 이 인터페이스를 사용 하면 디자인 모드에서 사용할 수 있는 전역 디자이너 동사 집합을 관리할 수 있습니다.  
  
 사용 하 여 전역 디자이너 동사를 추가할 수 있습니다 합니다 <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> 메서드를 사용 하 여 전역 디자이너 동사를 제거할 수는 <xref:System.ComponentModel.Design.IMenuCommandService.RemoveVerb%2A> 메서드. 디자이너 동사를 통해 호출할 수 있습니다 합니다 <xref:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke%2A> 알고 있는 경우 메서드는 <xref:System.ComponentModel.Design.CommandID> 동사입니다. <xref:System.ComponentModel.Design.IMenuCommandService.Verbs%2A> 이 인터페이스의 속성 바로 가기 메뉴에 표시할 디자이너 동사 명령 현재 집합을 포함 합니다. 이 디자이너 동사 명령이 집합을 모든 전역 디자이너 동사 및 현재 선택 된 구성 요소 디자이너에서 제공 하는 모든 디자이너 동사 구성 됩니다. 이 동사 집합 디자이너 동사 명령을 제공 하는 디자이너를 사용 하 여 구성 요소가 선택 되거나 선택이 취소 될 때마다 업데이트 됩니다.  
  
 메뉴 명령을 미리 정의 된 표준 명령 집합으로 제한 됩니다. 에 정의 된 대부분의 미리 정의 된 표준 명령 합니다 <xref:System.ComponentModel.Design.StandardCommands> 및 <xref:System.Windows.Forms.Design.MenuCommands> 열거형입니다. 있습니다 수 추가, 제거 및 메뉴 명령을 호출 및이 인터페이스의 메서드를 사용 하 여 메뉴에 추가 된 메뉴 명령에 대 한 검색 합니다.  
  
 사용 하 여 표준 메뉴 명령을 추가할 수 있습니다 합니다 <xref:System.ComponentModel.Design.IMenuCommandService.AddCommand%2A> 메서드를 사용 하 여 표준 메뉴 명령을 제거 합니다 <xref:System.ComponentModel.Design.IMenuCommandService.RemoveCommand%2A> 메서드. 설명서에서 설명 하는 절차를 수행 하 여 미리 정의 된 표준 메뉴 명령에 이벤트 처리기를 연결할 수는 <xref:System.ComponentModel.Design.IMenuCommandService.AddCommand%2A> 메서드. 메뉴 명령으로 검색할 수 있습니다 <xref:System.ComponentModel.Design.CommandID> 사용 하 여 메뉴에 추가 된 경우는 <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> 메서드. 메뉴 명령이 나 여 디자이너 동사 명령을 호출할 수 있습니다 <xref:System.ComponentModel.Design.CommandID> 를 사용 하 여 <xref:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke%2A> 메서드.  
  
> [!NOTE]
>  이미 기존 메뉴 명령을 추가 하려고 <xref:System.ComponentModel.Design.CommandID> 시킵니다는 <xref:System.InvalidOperationException>합니다. 메뉴 명령에 추가할 때 반드시 확인 있지 않은지 이미 사용 하 여 메뉴를 <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> 메서드 또는 사용 하 여 예외를 현명 하 게 처리 합니다.  
  
> [!NOTE]
>  메뉴 명령을 메뉴에 추가할 수 있고 해당 <xref:System.ComponentModel.Design.MenuCommand.Visible%2A> 나 <xref:System.ComponentModel.Design.MenuCommand.Enabled%2A> 속성으로 설정 `false`합니다. 메뉴 명령을 메뉴에 추가 된를 시각적으로 찾을 수 없는 경우 이러한 속성 중 하나가 될 수 있습니다 설정한 `false`입니다.  
  
 메뉴 명령을 사용 하 여 지정 된 위치에 포함 된 특정 표준 바로 가기 메뉴를 표시할 수 있습니다는 <xref:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu%2A> 메서드. 이 메서드에 대 한 설명서는 유효한 메뉴 표시를 지정 하는 명령 Id를 나열 하는 테이블을 포함 합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 <xref:System.ComponentModel.Design.IMenuCommandService> 추가할를 <xref:System.ComponentModel.Design.MenuCommand>입니다.  
  
 [!code-cpp[MenuCommand Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuCommand Example/CPP/component1.cpp#1)]
 [!code-csharp[MenuCommand Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuCommand Example/CS/component1.cs#1)]
 [!code-vb[MenuCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuCommand Example/VB/component1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
    <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
    <altmember cref="T:System.ComponentModel.Design.CommandID" />
    <altmember cref="T:System.Windows.Forms.Design.MenuCommands" />
    <altmember cref="T:System.ComponentModel.Design.StandardCommands" />
  </Docs>
  <Members>
    <Member MemberName="AddCommand">
      <MemberSignature Language="C#" Value="public void AddCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="iMenuCommandService.AddCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command">추가할 <see cref="T:System.ComponentModel.Design.MenuCommand" />입니다.</param>
        <summary>지정된 표준 메뉴 명령을 메뉴에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Windows.Forms.Design.MenuCommands> 하 고 <xref:System.ComponentModel.Design.StandardCommands> 열거형에 포함 <xref:System.ComponentModel.Design.CommandID> 특정 메뉴의 위치를 사용 하 여 관련 표준 명령 및 메뉴 명령을 이미 있는 미리 정의 된에 대 한 식별자입니다.  
  
> [!NOTE]
>  이미 기존 메뉴 명령을 추가 하려고 <xref:System.ComponentModel.Design.CommandID> 시킵니다는 <xref:System.InvalidOperationException>합니다. 메뉴 명령에 추가할 때 반드시 확인 있지 않은지 이미 사용 하 여 메뉴를 <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> 메서드 또는 사용 하 여 예외를 현명 하 게 처리 합니다.  
  
 다음 절차를 사용 하 여 미리 정의 된 메뉴 명령에 이벤트 처리기를 연결할 수 있습니다.  
  
1.  이벤트 처리기를 사용 하 여 링크 메뉴 명령을 메뉴에 추가 된 없거나 있는 경우는 <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> 메서드를이 메뉴 명령은 나중에 복원 하려는 인지 여부와 새 이벤트 처리기에서 현재 이벤트 처리기를 호출 하는 것이 좋습니다. 코드 메뉴 명령 또는 이벤트 처리기 호출 체인에 복원할 수 있습니다, 경우에 메뉴 명령에 대 한 참조를 저장 해야 합니다.  
  
2.  과 동일한 모든 기존 메뉴 명령을 했는지 <xref:System.ComponentModel.Design.CommandID> 사용 하 여 메뉴에서 제거 되었습니다는 <xref:System.ComponentModel.Design.IMenuCommandService.RemoveCommand%2A> 메서드.  
  
3.  새 <xref:System.ComponentModel.Design.MenuCommand> 와 함께 생성자에서 이벤트 처리기를 지정 하 고는 <xref:System.ComponentModel.Design.CommandID> 추가 하는 명령을 나타내는입니다. 각 표준 메뉴 명령에 추가 되는 미리 정의 된 메뉴 위치와 연결 됩니다. 에 정의 된 지원 되는 명령 Id를 <xref:System.ComponentModel.Design.StandardCommands> 고 <xref:System.Windows.Forms.Design.MenuCommands> 열거형입니다.  
  
4.  메뉴 명령에 대 한 모든 기존 이벤트 처리기를 호출 하려는 경우 호출 된 <xref:System.ComponentModel.Design.MenuCommand.Invoke%2A> 메뉴의 명령 메뉴에서 메뉴 명령의 호출 이벤트를 처리 하는 이벤트 처리기에서를 바꾼 메서드.  
  
5.  기존 메뉴 명령에 이벤트 처리기를 복원 하려는 경우 저장 된 추가 대체 메뉴 명령을 제거한 후 메뉴 명령을 기존 만들어집니다. 이 동작을 추가할 수는 `Dispose` 유형에 대 한 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">지정된 <see cref="T:System.ComponentModel.Design.CommandID" />의 <see cref="T:System.ComponentModel.Design.MenuCommand" />가 이미 메뉴에 있습니다.</exception>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="AddVerb">
      <MemberSignature Language="C#" Value="public void AddVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member AddVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="iMenuCommandService.AddVerb verb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb">추가할 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
        <summary>지정된 디자이너 동사를 전역 디자이너 동사 집합에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 디자이너 동사를 제공 하는 구성 요소 디자이너를 사용할지를 <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> 이 메서드를 호출 하지 않고 디자이너의 속성입니다. 이 메서드는 현재 선택한 구성 요소에 관계 없이 디자인 모드에서 마우스 오른쪽 단추 클릭 바로 가기 메뉴에서 액세스할 수 있는 전역 디자이너 동사를 추가 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="FindCommand">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.MenuCommand FindCommand (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.Design.MenuCommand FindCommand(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::Design::MenuCommand ^ FindCommand(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member FindCommand : System.ComponentModel.Design.CommandID -&gt; System.ComponentModel.Design.MenuCommand" Usage="iMenuCommandService.FindCommand commandID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.MenuCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID">검색할 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</param>
        <summary>지정된 명령 ID를 검색하고 그와 관련된 메뉴 명령을 반환합니다.</summary>
        <returns>명령 ID와 관련된 <see cref="T:System.ComponentModel.Design.MenuCommand" />이거나 명령을 찾을 수 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="GlobalInvoke">
      <MemberSignature Language="C#" Value="public bool GlobalInvoke (System.ComponentModel.Design.CommandID commandID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GlobalInvoke(class System.ComponentModel.Design.CommandID commandID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GlobalInvoke(System::ComponentModel::Design::CommandID ^ commandID);" />
      <MemberSignature Language="F#" Value="abstract member GlobalInvoke : System.ComponentModel.Design.CommandID -&gt; bool" Usage="iMenuCommandService.GlobalInvoke commandID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandID" Type="System.ComponentModel.Design.CommandID" />
      </Parameters>
      <Docs>
        <param name="commandID">검색하고 실행할 명령의 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</param>
        <summary>지정된 명령 ID와 일치하는 메뉴나 디자이너 동사 명령을 호출합니다.</summary>
        <returns>명령을 찾아 성공적으로 실행한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드 검색 메뉴 명령 또는 사용 하 여 디자이너 동사를 <xref:System.ComponentModel.Design.CommandID> 일치 하는 지정 된 <xref:System.ComponentModel.Design.CommandID>합니다. 이 메서드는 먼저 전역 환경 명령 서비스를 통해 필요한 경우 검색을 계속 하기 전에 전역 및 활성 디자이너가 제공 동사 중 구성 된 디자이너 동사 컬렉션 내에서 검색 합니다. 일치 하는 메뉴 명령 또는 디자이너 동사를 찾게 되 면 명령 호출 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCommand">
      <MemberSignature Language="C#" Value="public void RemoveCommand (System.ComponentModel.Design.MenuCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCommand(class System.ComponentModel.Design.MenuCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveCommand (command As MenuCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveCommand(System::ComponentModel::Design::MenuCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member RemoveCommand : System.ComponentModel.Design.MenuCommand -&gt; unit" Usage="iMenuCommandService.RemoveCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.ComponentModel.Design.MenuCommand" />
      </Parameters>
      <Docs>
        <param name="command">제거할 <see cref="T:System.ComponentModel.Design.MenuCommand" />입니다.</param>
        <summary>지정된 표준 메뉴 명령을 메뉴에서 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 제거 <xref:System.ComponentModel.Design.MenuCommand> 있으면 됩니다. 이 메서드가 예외를 발생 시키는 하지 않거나 값을 반환 하는 경우 지정 된 <xref:System.ComponentModel.Design.MenuCommand> 찾을 수 없습니다. 사용 합니다 <xref:System.ComponentModel.Design.IMenuCommandService.FindCommand%2A> 결정 하는 방법 여부를 <xref:System.ComponentModel.Design.MenuCommand> 일치 하는 지정 된 <xref:System.ComponentModel.Design.CommandID> 메뉴에 있는 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.MenuCommand" />
      </Docs>
    </Member>
    <Member MemberName="RemoveVerb">
      <MemberSignature Language="C#" Value="public void RemoveVerb (System.ComponentModel.Design.DesignerVerb verb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveVerb(class System.ComponentModel.Design.DesignerVerb verb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveVerb (verb As DesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveVerb(System::ComponentModel::Design::DesignerVerb ^ verb);" />
      <MemberSignature Language="F#" Value="abstract member RemoveVerb : System.ComponentModel.Design.DesignerVerb -&gt; unit" Usage="iMenuCommandService.RemoveVerb verb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verb" Type="System.ComponentModel.Design.DesignerVerb" />
      </Parameters>
      <Docs>
        <param name="verb">제거할 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
        <summary>지정된 디자이너 동사를 전역 디자이너 동사 컬렉션에서 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 전역 디자이너 동사 컬렉션 내에 있는 경우 지정된 된 전역 디자이너 동사를 제거 합니다. 추가할 수 있는 디자이너 동사를 사용 하 여 전역 디자이너 동사 컬렉션을 <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerb" />
      </Docs>
    </Member>
    <Member MemberName="ShowContextMenu">
      <MemberSignature Language="C#" Value="public void ShowContextMenu (System.ComponentModel.Design.CommandID menuID, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowContextMenu(class System.ComponentModel.Design.CommandID menuID, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowContextMenu (menuID As CommandID, x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowContextMenu(System::ComponentModel::Design::CommandID ^ menuID, int x, int y);" />
      <MemberSignature Language="F#" Value="abstract member ShowContextMenu : System.ComponentModel.Design.CommandID * int * int -&gt; unit" Usage="iMenuCommandService.ShowContextMenu (menuID, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuID" Type="System.ComponentModel.Design.CommandID" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="menuID">표시할 바로 가기 메뉴에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</param>
        <param name="x">화면 좌표에서 메뉴를 표시할 x 좌표입니다.</param>
        <param name="y">화면 좌표에서 메뉴를 표시할 y 좌표입니다.</param>
        <summary>지정된 위치에서 지정된 바로 가기 메뉴를 보여 줍니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu%2A> 메서드에 지정된 된 지점에 메뉴 명령이 포함 된 다음 Visual Studio 바로 가기 메뉴를 표시할 수 있습니다.  
  
|메뉴|CommandID|  
|----------|---------------|  
|컨테이너에 대해 표시 되는 바로 가기 메뉴|<xref:System.Windows.Forms.Design.MenuCommands.ContainerMenu>|  
|구성 요소 트레이가 표시 되는 바로 가기 메뉴|<xref:System.Windows.Forms.Design.MenuCommands.ComponentTrayMenu>|  
|선택 영역에 대 한 표시 되는 바로 가기 메뉴|<xref:System.Windows.Forms.Design.MenuCommands.SelectionMenu>|  
|트레이 선택에 대 한 표시 되는 바로 가기 메뉴|<xref:System.Windows.Forms.Design.MenuCommands.TraySelectionMenu>|  
  
 이 메서드는 다른 등록 된 바로 가기 메뉴를 표시할 수도 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.CommandID" />
      </Docs>
    </Member>
    <Member MemberName="Verbs">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Design.DesignerVerbCollection Verbs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.DesignerVerbCollection Verbs" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.IMenuCommandService.Verbs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Verbs As DesignerVerbCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::Design::DesignerVerbCollection ^ Verbs { System::ComponentModel::Design::DesignerVerbCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Verbs : System.ComponentModel.Design.DesignerVerbCollection" Usage="System.ComponentModel.Design.IMenuCommandService.Verbs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerVerbCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 사용할 수 있는 디자이너 동사의 컬렉션을 가져옵니다.</summary>
        <value>현재 사용할 수 있는 디자이너 동사를 포함하는 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 전역 디자이너 동사에 의해 추가 된 현재 사용 가능한 디자이너 동사 집합으로 구성 됩니다 합니다 <xref:System.ComponentModel.Design.IMenuCommandService.AddVerb%2A> 이 인터페이스를 제공 하는 개별 디자이너 동사 메서드는 <xref:System.ComponentModel.Design.IDesigner.Verbs%2A> 개별 디자이너의 속성입니다. 디자이너 동사 이름의 전역 동사의 이름 충돌, 디자이너에서 제공 된 디자이너 동사 우선적으로 적용 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.DesignerVerbCollection" />
        <altmember cref="P:System.ComponentModel.Design.IDesigner.Verbs" />
      </Docs>
    </Member>
  </Members>
</Type>