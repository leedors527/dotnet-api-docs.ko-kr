<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5de7d29b4f5fa27299fc7f0b6d5a3a21b581d735" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58733443" /></Metadata><TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>비동기 작업의 수명을 추적합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 따라 클래스를 구현 하는 경우는 [이벤트 기반 비동기 패턴 개요](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), 클래스의 인스턴스에서 호출 된 각 비동기 작업의 수명을 추적 해야 할 수 있습니다. <xref:System.ComponentModel.AsyncOperation> 클래스를 추적 하 고 비동기 작업의 진행률을 보고 하는 방법을 제공 합니다.  
  
 다음 목록에서는 사용 하는 방법을 식별을 <xref:System.ComponentModel.AsyncOperation> 개체:  
  
-   호출 클라이언트에 진행률 및 중간 결과 보고, <xref:System.ComponentModel.AsyncOperation.Post%2A> 비동기 작업자 코드에서.  
  
-   비동기 작업 완료 되었음을 나타냅니다 또는 보류 중인 비동기 작업을 취소 하려면 호출 <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>합니다.  
  
 클래스를 가져와야는 <xref:System.ComponentModel.AsyncOperation> 를 호출 하 여 각 비동기 작업에 대 한 개체 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> 각 태스크를 시작할 때입니다. 클라이언트가 별도 비동기 작업을 구별할 수 있도록 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> 는 고유 클라이언트 제공 토큰에 대 한 되는 매개 변수는 <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> 속성입니다. 그런 다음 사용할 수 클라이언트 코드에서 진행률 또는 완료 이벤트를 발생 시킨 특정 비동기 작업을 식별 하 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.ComponentModel.AsyncOperation> 비동기 작업의 수명을 추적 하는 개체입니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> 클래스입니다.  
  
 전체 코드 목록을 참조 하세요. [방법: 이벤트 기반 비동기 패턴을 지 원하는 구성 요소 구현](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)을 참조하세요. 클라이언트의 전체 코드 목록은 참조 하세요. [방법: 이벤트 기반 비동기 패턴의 클라이언트 구현](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)을 참조하세요.  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>구현 자가 있어야 합니다 <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 및 <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 호출이 비동기가 특정 응용 프로그램에 비동기 동작 가정 하는 경우 잠재적인 스택 오버플로 클래스 라이브러리 공급자를 사용 하 여 고려할 필요가 없습니다 동기로 발생 하는 모델입니다.  
  
비동기 클래스를 구현 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 기반 비동기 패턴 구현](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)합니다.</para></block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">관리되는 스레딩을 구현하는 최선의 방법</related>
    <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">방법: 이벤트 기반 비동기 패턴을 지 원하는 구성 요소 구현</related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>비동기 작업을 완료합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>비동기 작업의 수명을 끝냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 된 <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> 메서드를 비동기 작업의 수명을 종료 합니다. 이 메서드는 특정 작업에 대해 호출 된 후 해당 호출 <xref:System.ComponentModel.AsyncOperation> 예외가 발생 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" />가 이 작업에 대해 이미 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">작업이 끝날 때 호출될 대리자를 래핑하는 <see cref="T:System.Threading.SendOrPostCallback" /> 개체입니다.</param>
        <param name="arg"><paramref name="d" /> 매개 변수에 포함된 대리자에 대한 인수입니다.</param>
        <summary>응용 프로그램 모델에 적절한 스레드나 컨텍스트에서 대리자를 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.ComponentModel.AsyncOperation.Post%2A> 메서드 호출 하 여 지정 된 대리자는 `arg` 비동기 작업의 수명의 끝내 지 않고 매개 변수입니다.  
  
 호출할 수 있습니다 합니다 <xref:System.ComponentModel.AsyncOperation.Post%2A> 메서드를 호출 하 여 비동기 작업의 수명을 종료 되지 않은 동안 원하는 만큼 자주 <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>합니다. 클라이언트에 진행률 또는 중간 결과 다시 보고 하는 메서드를 사용할 수 있습니다.  
  
 `d` 매개 변수는 호출된 될 대리자는 비동기 작업의 상태에 대 한 업데이트를 게시 하려는 경우를 래핑합니다. <xref:System.ComponentModel.AsyncOperation> 개체는 스레드 또는 컨텍스트에서 응용 프로그램 모델에 대 한 적절 한 대리자가 호출 됨을 확인 합니다. 메서드는 클라이언트 상태 변경, 진행 상황 업데이트 또는 새로 사용 가능한 증분 결과 알리는 이벤트를 발생 필요에 따라 수 있습니다.  
  
 합니다 `arg` 상태에서 래핑하는 대리자에 전달할 매개 변수를 사용 해야는 `d` 매개 변수입니다. 에 대 한 참조는 것을 <xref:System.ComponentModel.AsyncOperation>를 포함할 수도 있습니다는 <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> 개체입니다. 고유한 클래스를 파생 하는 것이 바람직 것 <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> 추가 상태 저장소를 제공 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.ComponentModel.AsyncOperation.Post%2A> 진행률 및 비동기 작업의 증분 결과 보고 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> 클래스입니다.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 메서드가 이 작업에 대해 이미 호출된 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="d" />가 <see langword="null" />입니다.</exception>
        <block subset="none" type="overrides"><para>상속자는 <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 클래스 라이브러리 공급자 잠재적인 스택과 기울이지 않아도 되도록 비동기 호출 오버플로 비동기 가정 했지만 특정 응용 프로그램 모델을 동기로 발생 합니다.  
  
 <block subset="none" type="note"><para>  
 콘솔 애플리케이션은 <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 호출 실행을 동기화하지 않습니다. 이로 인해 <see langword="ProgressChanged" /> 이벤트가 잘못 발생할 수 있습니다. <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 호출이 serialize되어 실행되도록 하려면 <see cref="T:System.Threading.SynchronizationContext" /> 클래스를 구현하여 설치합니다.  
  
</para></block>  
  
 비동기 클래스를 구현 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 기반 비동기 패턴 구현](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)합니다.</para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">관리되는 스레딩을 구현하는 최선의 방법</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">방법: 이벤트 기반 비동기 패턴을 지 원하는 구성 요소 구현</related>
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">작업이 끝날 때 호출될 대리자를 래핑하는 <see cref="T:System.Threading.SendOrPostCallback" /> 개체입니다.</param>
        <param name="arg"><paramref name="d" /> 매개 변수에 포함된 대리자에 대한 인수입니다.</param>
        <summary>비동기 작업의 수명을 끝냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 된 <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> 메서드를 비동기 작업의 수명을 종료 합니다. 이 메서드는 특정 작업에 대해 호출 된 후 해당 호출 <xref:System.ComponentModel.AsyncOperation> 개체는 예외가 발생 합니다.  
  
 `d` 매개 변수 클래스에서 완료, 취소 또는 작업의 오류로 인해 작업의 수명이 종료 될 때 호출할 대리자를 래핑합니다. <xref:System.ComponentModel.AsyncOperation> 개체는 스레드 또는 컨텍스트에서 응용 프로그램 모델에 대 한 적절 한 대리자가 호출 됨을 확인 합니다. 대리자 수 필요에 따라 이벤트를 발생 시킬 비동기 작업의 수명이 종료 된 클라이언트에 알립니다.  
  
 합니다 `arg` 상태 정보 완료 대리자에 전달할 매개 변수는 `d`합니다. 사용할 수는 <xref:System.ComponentModel.AsyncOperation> 개체 또는 <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> 매개 변수 값으로는 개체입니다. 또는 추가 상태 저장소를 제공 하려는 경우 사용할 수에서 파생 된 클래스의 인스턴스는 <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> 메서드를 비동기 작업의 수명을 종료 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> 클래스입니다.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" />가 이 작업에 대해 이미 호출된 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="d" />가 <see langword="null" />입니다.</exception>
        <block subset="none" type="overrides"><para>상속자는 <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 클래스 라이브러리 공급자 잠재적인 스택과 기울이지 않아도 되도록 비동기 호출 오버플로 비동기 가정 했지만 특정 응용 프로그램 모델을 동기로 발생 합니다. 메서드 구현을 응용 프로그램 모델에 대 한 적절 한 작업을 수행 해야 합니다. 즉, "수명 종료" 호출으로 해석 됩니다. 예를 들어 ASP.NET 대기 중인 비동기 작업의 수가 감소 됩니다. 이 또한 상태로 작업을는 이제 완료 된 후 모든 후속 호출에 실패 합니다.  
  
비동기 클래스를 구현 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 기반 비동기 패턴 구현](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)합니다.</para></block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">관리되는 스레딩을 구현하는 최선의 방법</related>
        <related type="Article" href="https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">방법: 이벤트 기반 비동기 패턴을 지 원하는 구성 요소 구현</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>생성자에 전달된 <see cref="T:System.Threading.SynchronizationContext" /> 개체를 가져옵니다.</summary>
        <value>생성자에 전달된 <see cref="T:System.Threading.SynchronizationContext" /> 개체입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>비동기 작업을 고유하게 식별하는 데 사용되는 개체를 가져오거나 설정합니다.</summary>
        <value>비동기 메서드 호출에 전달된 상태 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클래스에서 여러 비동기 메서드 또는 단일 비동기 메서드의 여러 호출을 지 원하는 경우 이벤트를 발생 시키는 비동기 작업을 결정 하는 방법을 클라이언트에 있어야 합니다. 프로그램 `MethodNameAsync` 메서드 형식의 매개 변수를 취해야 <xref:System.Object> 태스크 id입니다. 역할을 할 문의할 때이 작업 ID를 사용 합니다 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, 메서드 및이 특정 호출 비동기 작업을 사용 하 여 클라이언트의 작업 ID를 연결 합니다. 이 작업 ID를 통해 구현에 사용할 수는 <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> 속성입니다.  
  
> [!CAUTION]
>  클라이언트 코드에 대 한 고유한 값을 제공 하도록 주의 해야 합니다.는 <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> 속성입니다. 고유 하지 않은 작업 Id는 진행률 및 기타 이벤트를 올바르게 보고 구현을 발생할 수 있습니다. 코드에서 고유 하지 않은 작업 ID를 확인 하 고 발생 해야는 <xref:System.ArgumentException> 감지 된 경우.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> 를 비동기 작업의 수명을 추적 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> 클래스입니다.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">관리되는 스레딩을 구현하는 최선의 방법</related>
        <related type="Article" href="https://msdn.microsoft.com/library/792aa8da-918b-458e-b154-9836b97735f3">이벤트 기반 비동기 패턴 개요</related>
      </Docs>
    </Member>
  </Members>
</Type>