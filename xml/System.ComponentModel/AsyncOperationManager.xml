<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c0758038abe314d7edf4ae6dd21fb9aae6a993bd" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58733455" /></Metadata><TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>비동기 메서드 호출을 지원하는 클래스에 대한 동시성 관리 기능을 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클래스에 따라 비동기 동작을 제공 해야 하는지 여부를 [이벤트 기반 비동기 패턴 개요](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), 동시성 관리 문제가 많이 발생 합니다. 이 중 한 스레드나 응용 프로그램 모델에 대 한 적절 한 상황에 맞는 이벤트 처리기가 호출 되도록 하는 요구 사항이 됩니다 (예를 들어, Windows Forms 응용 프로그램 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 응용 프로그램, 콘솔 응용 프로그램 및 등). 합니다 <xref:System.ComponentModel.AsyncOperationManager> 에서 지 원하는 모든 응용 프로그램 모델에서 제대로 실행 되는 클래스를 만드는 편리한 방법을 제공 합니다 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]합니다.  
  
 합니다 <xref:System.ComponentModel.AsyncOperationManager> 클래스에 메서드 하나가 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>를 반환 하는 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 특정 비동기 작업의 기간을 추적에 사용할 수 있는 합니다. <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 태스크는 작업이 완료 되 면 경고 클라이언트로 사용할 수 있습니다. 작업을 종료 하지 않고 진행률 업데이트 및 증분 결과 게시할 데도 수 있습니다.  
  
 비동기 클래스를 구현 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 기반 비동기 패턴 구현](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.ComponentModel.AsyncOperationManager> 모든 응용 프로그램 모델에 대 한 비동기 작업을 지 원하는 클래스를 만드는 클래스입니다. 테스트 숫자가 소수 인지 여부를 결정할 수 있는 클래스를 구현 하는 방법을 보여 줍니다. 이 계산 시간이 오래 걸릴 수 있으므로 별도 스레드에서 수행 됩니다. 진행률 보고서, 증분 결과 및 완료 알림을에서 처리 되는 <xref:System.ComponentModel.AsyncOperation> 클래스는 적절 한 스레드 또는 컨텍스트에서 클라이언트의 이벤트 처리기가 호출 되도록 합니다.  
  
 전체 코드 목록을 참조 하세요. [방법: 이벤트 기반 비동기 패턴을 지 원하는 구성 요소 구현](https://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)을 참조하세요. 클라이언트의 전체 코드 목록은 참조 하세요. [방법: 이벤트 기반 비동기 패턴의 클라이언트 구현](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)을 참조하세요.  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">이벤트 기반 비동기 패턴 구현</related>
    <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">관리되는 스레딩을 구현하는 최선의 방법</related>
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">작업 ID와 같은 클라이언트 상태 정보와 특정 비동기 작업을 연결하는 데 사용되는 개체입니다.</param>
        <summary>특정 비동기 작업의 기간을 추적하기 위한 <see cref="T:System.ComponentModel.AsyncOperation" />을 반환합니다.</summary>
        <returns>비동기 메서드 호출의 기간을 추적하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.AsyncOperation" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 메서드가 반환 되는 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 특정 비동기 작업의 기간을 추적 하 고 응용 프로그램 모델은 작업이 완료 될 때 경고를 사용할 수 있는 합니다. 작업을 종료 하지 않고 진행률 업데이트 및 증분 결과 게시 하려면 사용할 수 있습니다. <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 이러한 호출을 적절 한 스레드 또는 응용 프로그램 모델에 대 한 상황에 맞는 올바르게 마샬링해야 합니다.  
  
 이벤트 기반 비동기 패턴을 지 원하는 클래스를 구현 하는 경우 클래스를 호출 해야 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 때마다 하 *MethodName* `Async` 메서드가 호출 됩니다. 메서드를 호출 하는 클라이언트 응용 프로그램에서 사용할 수는 `userSuppliedState` 매개 변수를 각 호출을 비동기 작업을 실행 하는 동안 발생 하는 이벤트를 구분할를 고유 하 게 식별 합니다.  
  
> [!CAUTION]
>  클라이언트 코드에 대 한 고유한 값을 제공 해야 합니다는 `userSuppliedState` 매개 변수입니다. 고유 하지 않은 작업 Id는 진행률 및 기타 이벤트를 올바르게 보고 구현을 발생할 수 있습니다. 코드는 고유 하지 않은 작업 ID를 확인 하 고 throw는 <xref:System.ArgumentException?displayProperty=nameWithType> 감지 된 경우.  
  
 코드를 추적 해야 모든 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 반환한 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 해당 기본 비동기 작업에서 개체를 사용 하 여 업데이트를 게시 하 고 작업을 종료 합니다. 이 추적 전달 처럼 간단할 수는 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 대리자 간에 매개 변수로 합니다. 보다 정교한 디자인의 경우 클래스의 컬렉션을 유지할 수 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 개체, 작업은 시작 하는 경우 개체를 추가 하 고 작업을 완료 하거나 취소 하는 경우 제거 합니다. 이 접근 방식을 사용 하면 확인 하려면 고유한 `userSuppliedState` 매개 변수 값 이며 여러 동시 호출을 지 원하는 클래스를 사용 하 여 작업할 때 사용 해야 하는 방법입니다.  
  
 비동기 클래스를 구현 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 기반 비동기 패턴 구현](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 메서드를는 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> 비동기 작업의 기간을 추적 하는 것에 대 한 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.ComponentModel.AsyncOperationManager> 클래스입니다.  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="https://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">이벤트 기반 비동기 패턴 구현</related>
        <related type="Article" href="https://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">관리되는 스레딩을 구현하는 최선의 방법</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>비동기 작업의 동기화 컨텍스트를 가져오거나 설정합니다.</summary>
        <value>비동기 작업의 동기화 컨텍스트입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 구현은 자유 스레드된 구현 합니다.  
  
 스레드 설정 해야 합니다 <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> 속성을 `null` 해당 팩터리를 삭제 하지 것입니다. 그렇지 않으면 완료 되 면 자유 스레드된 팩터리를 해제 합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet">동기화 컨텍스트를 설정 합니다. 요청 값: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 상태:</permission>
      </Docs>
    </Member>
  </Members>
</Type>