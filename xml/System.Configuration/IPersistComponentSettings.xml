<Type Name="IPersistComponentSettings" FullName="System.Configuration.IPersistComponentSettings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9127b6636e86acc136c4dfc774ac26d983a775c8" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56767398" /></Metadata><TypeSignature Language="C#" Value="public interface IPersistComponentSettings" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPersistComponentSettings" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.IPersistComponentSettings" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPersistComponentSettings" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPersistComponentSettings" />
  <TypeSignature Language="F#" Value="type IPersistComponentSettings = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>응용 프로그램 설정을 저장하고 검색하는 컨트롤이나 라이브러리의 표준 기능을 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생 되는 설정 래퍼 클래스를 만들어 애플리케이션에 애플리케이션 설정을 지원을 추가할 수는 일반적으로 <xref:System.Configuration.ApplicationSettingsBase>,이 클래스에 특수 속성을 추가 합니다. 그러나이 접근 방식을 캡슐화 하지 않는 충분히 컨트롤에 대 한 애플리케이션 설정 세부 정보에서 해당 컨테이너는 보호 되도록 합니다. <xref:System.Configuration.IPersistComponentSettings> 인터페이스 컨트롤, 구성 요소 또는 라이브러리 모듈에 애플리케이션 설정 상태 변경 요청을 통신 하기 위한 표준 인터페이스를 사용 하 여 애플리케이션을 제공 합니다. 디자인 타임 도구는 또한 컨트롤 및 구성 요소를 제대로 관리 하려면이 인터페이스에 따라 달라 집니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.ApplicationSettingsBase" />
    <related type="Article" href="https://msdn.microsoft.com/library/f44afb74-76cc-44f2-890a-44b7cdc211a1">사용자 지정 컨트롤에 대한 애플리케이션 설정</related>
  </Docs>
  <Members>
    <Member MemberName="LoadComponentSettings">
      <MemberSignature Language="C#" Value="public void LoadComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member LoadComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.LoadComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>컨트롤의 응용 프로그램 설정을 해당 속성으로 읽어 들이고 컨트롤의 상태를 업데이트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> 메서드는 두 가지 필수 작업을 수행 합니다.  
  
-   호출 하 여 해당 애플리케이션 설정 속성의 값을 일반적으로 새로 고치려면 컨트롤에 포함 된 각 애플리케이션 설정 인스턴스 하면 해당 <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> 메서드.  
  
-   필요에 따라 속성의 이러한 다시 로드 설정에 따라 달라 집니다는 해당 일반 속성을 업데이트 합니다. 예를 들어 설정 클래스를 포함 하는 경우는 `location` 설정 속성 <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> 해야 하는 컨트롤의 <xref:System.Windows.Forms.Control.Location%2A> 속성이이 다시 로드 설정을 반영 하도록 업데이트 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
      </Docs>
    </Member>
    <Member MemberName="ResetComponentSettings">
      <MemberSignature Language="C#" Value="public void ResetComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member ResetComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.ResetComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>컨트롤의 응용 프로그램 설정 속성을 기본값으로 다시 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 구현의 합니다 <xref:System.Configuration.IPersistComponentSettings.ResetComponentSettings%2A> 일반적으로 메서드를 호출는 <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> 포함 된 애플리케이션 설정 클래스의 각 인스턴스에 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
      </Docs>
    </Member>
    <Member MemberName="SaveComponentSettings">
      <MemberSignature Language="C#" Value="public void SaveComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SaveComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member SaveComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.SaveComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>컨트롤의 응용 프로그램 설정 속성을 유지합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> 메서드는 연결 된 데이터 저장소에 컨트롤의 애플리케이션 설정 속성의 값을 씁니다. 메서드를 사용 하 여 데이터 저장소 및 serialization 기술을 통해 각 설정 클래스와 연결 된 설정 공급자가 결정 됩니다는 <xref:System.Configuration.SettingsProviderAttribute>합니다. 다양 한 설정 공급자를 사용 하 여 재정의할 수 있습니다는 <xref:System.Configuration.ISettingsProviderService> 인터페이스입니다.  
  
> [!NOTE]
>  경우는 <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> 속성은 `true`, 컨트롤 호출 해야 <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> 자체에 <xref:System.Windows.Forms.Control.Dispose%2A> 메서드 컨트롤의 구성 데이터는 애플리케이션 종료 되기 전에 자동으로 저장 되도록 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.IPersistComponentSettings.SaveSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
        <altmember cref="T:System.Configuration.SettingsProvider" />
        <altmember cref="T:System.Configuration.LocalFileSettingsProvider" />
        <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
        <altmember cref="T:System.Configuration.ISettingsProviderService" />
      </Docs>
    </Member>
    <Member MemberName="SaveSettings">
      <MemberSignature Language="C#" Value="public bool SaveSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveSettings" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.IPersistComponentSettings.SaveSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveSettings As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SaveSettings { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SaveSettings : bool with get, set" Usage="System.Configuration.IPersistComponentSettings.SaveSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤이 응용 프로그램 설정 속성을 자동으로 유지할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>컨트롤이 상태를 자동으로 유지하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 컨트롤에 구성 데이터가 있는 경우 일반적으로 계속 유지 되며이 데이터에 대 한 명시적 호출에 대 한 응답에는 <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> 메서드 또는 경우에 따라 암시적으로 때 컨트롤의 <xref:System.Windows.Forms.Control.Dispose%2A> 메서드가 실행 됩니다. <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> 속성 컨트롤을 삭제 하면 자동으로 구성 데이터를 유지 하는지 여부를 결정 합니다.  
  
 기본값은 <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> 컨트롤의 구현에 따라 달라 집니다. 컨트롤에 대 한 설명서는 애플리케이션 설정을 사용 하는지 여부, 데이터 유지 되 고 어떤의 기본 값을 나타내야 합니다.는 <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> 속성이 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 값을 확인 하는 컨트롤에 대 한 적절 한 방법을 보여 줍니다는 <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> 자동으로 구성 데이터를 유지 하려고 시도 하기 전에 속성입니다.  
  
 `protected override void Dispose( bool disposing ) {`  
  
 `if(disposing) {`  
  
 `try {`  
  
 `if (SaveSettings) {`  
  
 `SaveComponentSettings();`  
  
 `}`  
  
 `}`  
  
 `finally {`  
  
 `//...`  
  
 `}`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="M:System.Configuration.SettingsBase.Save" />
      </Docs>
    </Member>
    <Member MemberName="SettingsKey">
      <MemberSignature Language="C#" Value="public string SettingsKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SettingsKey" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.IPersistComponentSettings.SettingsKey" />
      <MemberSignature Language="VB.NET" Value="Public Property SettingsKey As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SettingsKey { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SettingsKey : string with get, set" Usage="System.Configuration.IPersistComponentSettings.SettingsKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤의 현재 인스턴스에 대한 응용 프로그램 설정 키의 값을 가져오거나 설정합니다.</summary>
        <value>컨트롤의 현재 인스턴스에 대한 설정 키를 포함하는 <see cref="T:System.String" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> 동일한 래퍼 클래스의 인스턴스가 여러 개 있는 경우 애플리케이션 설정 속성 그룹을 구분 하는 속성입니다. 예를 들어, 일반적으로 동일한 애플리케이션에서 동일한 컨트롤의 여러 인스턴스를 배치 하는 다음 컨트롤을 연결 된 래퍼 클래스를 포함 하는 경우 래퍼 클래스의 인스턴스가 여러 개에서 발생 합니다. 설정 키가 인스턴스 단위로;에서 구성 데이터를 다른 경우에 필요 예를 들어 동적으로 배치 된 컨트롤의 위치입니다.  
  
 사용 하는 다음과 같은 일반 규칙이 적용 됩니다. <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A>:  
  
-   모든 클래스와 마찬가지로 컨트롤 0 개 이상의 애플리케이션 설정 클래스를 포함할 수 있습니다에서 파생 된 <xref:System.Configuration.ApplicationSettingsBase>합니다. 각 설정을 클래스 마다 고유의 <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> 속성을 통해 해당 클래스의 여러 인스턴스를 구분 합니다.  
  
-   컨트롤을 다른 설정 클래스에 해당 인스턴스별 데이터 및 공유 데이터를 분리 해야 합니다.  
  
-   인스턴스별 구성 데이터를 컨트롤에 대 한 합니다 `get` 의 접근자는 <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> 속성의 기본값은 <xref:System.Windows.Forms.Control.Name%2A> 컨트롤의 합니다. 대부분의 경우 컨트롤의 이름을 애플리케이션 내에서 고유 됩니다. 구성 데이터를 공유 컨트롤에 있으면 `get` 의 기본값은 `null`합니다.  
  
-   `set` 인스턴스별 및 공유 구성 데이터를 포함 하는 설정 클래스를 구분 하기 위해이 속성에 대 한 접근자를 구현 해야 합니다. 인스턴스별 데이터가 포함 된 각 설정 클래스에 대 한 `set` 에 통과 해야 합니다 <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> 설정 클래스의 속성입니다. 공유 데이터를 포함 하는 설정 클래스에 대 한 `set` 설정 클래스에 대 한 작업을 수행 해야 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.SettingsKey" />
        <related type="Article" href="https://msdn.microsoft.com/library/f44afb74-76cc-44f2-890a-44b7cdc211a1">사용자 지정 컨트롤에 대한 애플리케이션 설정</related>
      </Docs>
    </Member>
  </Members>
</Type>