<Type Name="DbBinaryExpression" FullName="System.Data.Common.CommandTrees.DbBinaryExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="33f47b0b20f46e7e10796b0f8364c057846f589c" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39843517" /></Metadata><TypeSignature Language="C#" Value="public abstract class DbBinaryExpression : System.Data.Common.CommandTrees.DbExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbBinaryExpression extends System.Data.Common.CommandTrees.DbExpression" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.CommandTrees.DbBinaryExpression" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbBinaryExpression&#xA;Inherits DbExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbBinaryExpression abstract : System::Data::Common::CommandTrees::DbExpression" />
  <TypeSignature Language="F#" Value="type DbBinaryExpression = class&#xA;    inherit DbExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.CommandTrees.DbExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>두 식 피연산자를 사용하는 식에 필요한 기본 기능을 구현합니다.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public System.Data.Common.CommandTrees.DbExpression Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.CommandTrees.DbExpression Left" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.CommandTrees.DbBinaryExpression.Left" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Left As DbExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::CommandTrees::DbExpression ^ Left { System::Data::Common::CommandTrees::DbExpression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Left : System.Data.Common.CommandTrees.DbExpression" Usage="System.Data.Common.CommandTrees.DbBinaryExpression.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>왼쪽 인수를 정의하는 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />을 가져오거나 설정합니다.</summary>
        <value>왼쪽 인수를 정의하는 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.CommandTrees.DbBinaryExpression.Left%2A> 속성이 설정되어 있으면 파생된 식 형식에서 더욱 엄격하게 형식을 확인할 수 있습니다. 예를 들어 <xref:System.Data.Common.CommandTrees.DbUnionAllExpression>의 왼쪽 식에 대한 결과 형식은 컬렉션이어야 하고 <xref:System.Data.Common.CommandTrees.DbAndExpression>의 결과 형식은 Boolean이어야 합니다. 일반적으로 파생된 식 형식에서는 <xref:System.Data.Common.CommandTrees.DbBinaryExpression.Left%2A>를 결과 형식이 현재 값의 결과 형식과 다르거나 해당 형식으로 승격될 수 없는 식으로 설정할 수 없습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">식은 <see langword="null" />이며,</exception>
        <exception cref="T:System.ArgumentException">식이 <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" />의 명령 트리에 연결되어 있지 않은 경우 
또는 결과 형식이 왼쪽 인수에 필요한 형식이 아니거나 해당 형식으로 승격될 수 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public System.Data.Common.CommandTrees.DbExpression Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.CommandTrees.DbExpression Right" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.CommandTrees.DbBinaryExpression.Right" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Right As DbExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::CommandTrees::DbExpression ^ Right { System::Data::Common::CommandTrees::DbExpression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Right : System.Data.Common.CommandTrees.DbExpression" Usage="System.Data.Common.CommandTrees.DbBinaryExpression.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>오른쪽 인수를 정의하는 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />을 가져오거나 설정합니다.</summary>
        <value>오른쪽 인수를 정의하는 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.CommandTrees.DbBinaryExpression.Right%2A> 속성이 설정되어 있으면 파생된 식 형식에서 더욱 엄격하게 형식을 확인할 수 있습니다. 예를 들어 <xref:System.Data.Common.CommandTrees.DbUnionAllExpression>의 오른쪽 식에 대한 결과 형식은 컬렉션이어야 하고 <xref:System.Data.Common.CommandTrees.DbAndExpression>의 결과 형식은 Boolean이어야 합니다. 일반적으로 파생된 식 형식에서는 <xref:System.Data.Common.CommandTrees.DbBinaryExpression.Right%2A>를 결과 형식이 현재 값의 결과 형식과 다르거나 해당 형식으로 승격될 수 없는 식으로 설정할 수 없습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">식은 <see langword="null" />이며,</exception>
        <exception cref="T:System.ArgumentException">식이 <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" />의 명령 트리에 연결되어 있지 않은 경우 
또는 결과 형식이 오른쪽 인수에 필요한 형식이 아니거나 해당 형식으로 승격될 수 없는 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>