<Type Name="DbDataAdapter" FullName="System.Data.Common.DbDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3db191c839c8f56032f735e1fccf95a42edd36ef" /><Meta Name="ms.sourcegitcommit" Value="0609891c89ddaa91e4c02970acb00072fcc29baf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/13/2019" /><Meta Name="ms.locfileid" Value="65558329" /></Metadata><TypeSignature Language="C#" Value="public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbDataAdapter extends System.Data.Common.DataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbDataAdapter&#xA;Inherits DataAdapter&#xA;Implements ICloneable, IDbDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbDataAdapter abstract : System::Data::Common::DataAdapter, ICloneable, System::Data::IDbDataAdapter" />
  <TypeSignature Language="F#" Value="type DbDataAdapter = class&#xA;    inherit DataAdapter&#xA;    interface IDbDataAdapter&#xA;    interface ICloneable&#xA;    interface IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.IDbDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><see cref="T:System.Data.IDbDataAdapter" /> 인터페이스의 구현을 지원합니다. <see cref="T:System.Data.Common.DbDataAdapter" />의 상속자는 강력한 형식을 제공하기 위한 함수 집합을 구현하지만 **DataAdapter**를 완전히 구현하는 데 필요한 대부분의 기능을 상속합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter> 클래스에서 상속 합니다 <xref:System.Data.Common.DataAdapter> 클래스를 구현 합니다 <xref:System.Data.IDbDataAdapter> 인터페이스. 클래스를 구현 하는 데 도움이 된 **DataAdapter** 관계형 데이터베이스를 사용 하 여 사용 하도록 설계 되었습니다.  
  
 애플리케이션의 인스턴스를 만들지 않습니다는 <xref:System.Data.Common.DbDataAdapter> 클래스를 직접 하지만에서 상속 된 클래스의 인스턴스를 만듭니다.  
  
 상속 된 클래스 <xref:System.Data.Common.DbDataAdapter> 상속 된 멤버를 구현 해야 하며 일반적으로 공급자 특정 기능을 추가 하기 위한 추가 멤버를 정의 합니다. 예를 들어,를 <xref:System.Data.Common.DbDataAdapter> 클래스를 정의 합니다 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 속성 및 <xref:System.Data.Common.DbDataAdapter> 의 8 개 오버 로드를 정의 하는 클래스를 <xref:System.Data.IDataAdapter.Fill%2A> 메서드. 차례로 <xref:System.Data.OleDb.OleDbDataAdapter> 클래스를 상속 합니다 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드를도 추가 두 오버 로드를 정의 하 고 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 매개 변수로 ADO 레코드 집합 개체를 사용 하는.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>상속 하는 경우는 <see cref="T:System.Data.Common.DbDataAdapter" /> 클래스인 것이 좋습니다 다음 생성자를 구현 하는: 
 <list type="table"><listheader><term> 항목 
 </term><description> 설명 
 </description></listheader><item><term> *Prv*DataAdapter() 
 </term><description> 새 인스턴스를 초기화 합니다 *Prv*DataAdapter 클래스입니다.  
  
 </description></item><item><term> *Prv*DataAdapter (*Prv*명령 *selectCommand*) 
 </term><description> 새 인스턴스를 초기화 합니다 *Prv*지정 된 SQL SELECT 문 사용 하 여 DataAdapter 클래스입니다.  
  
 </description></item><item><term> *Prv*DataAdapter (문자열 *selectCommandText*, 문자열 *selectConnectionString*) 
 </term><description> 새 인스턴스를 초기화 합니다 *Prv*SQL SELECT 문 및 연결 문자열을 사용 하 여 DataAdapter 클래스입니다.  
  
 </description></item><item><term> *Prv*DataAdapter (문자열 *selectCommandText*하십시오 *Prv*연결 *selectConnection*) 
 </term><description> 새 인스턴스를 초기화 합니다 *Prv*SQL SELECT 문 사용 하 여 DataAdapter 클래스와 *Prv*연결 개체입니다.  
  
 </description></item></list>  

 .NET Framework 데이터 공급자의 일관성 수준을 올릴 폼에서 상속 하는 클래스 이름을 지정 해야 *Prv*DataAdapter, 여기서 *Prv* 는 특정.NET의 모든 클래스에 지정 된 일관 된 접두사 Framework 데이터 공급자 네임 스페이스입니다. 예를 들어, "Sql"은의 접두사는 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 클래스를 **System.Data.SqlClient** 네임 스페이스입니다.</para></block>
    <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see langword="DataAdapter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>**DataAdapter** 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인스턴스를 만들면 <xref:System.Data.Common.DbDataAdapter>, 다음 읽기/쓰기 속성은 다음 초기 값으로 설정 됩니다.  
  
|속성|초기 값|  
|----------------|-------------------|  
|<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|새 <xref:System.Data.IDbCommand>입니다.|  
|<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|새 <xref:System.Data.IDbCommand>입니다.|  
|<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|새 <xref:System.Data.IDbCommand>입니다.|  
|<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|새 <xref:System.Data.IDbCommand>입니다.|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 속성에 별도 호출을 통해 이러한 속성의 값을 변경할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="new System.Data.Common.DbDataAdapter : System.Data.Common.DbDataAdapter -&gt; System.Data.Common.DbDataAdapter" Usage="new System.Data.Common.DbDataAdapter adapter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">A <see langword="DataAdapter" /> 개체를 새로 만드는 데 <see langword="DataAdapter" />합니다.</param>
        <summary>새 인스턴스를 초기화 한 <see langword="DataAdapter" /> 같은 형식의 기존 개체에서 클래스입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 오버 로드는 <xref:System.Data.Common.DbDataAdapter> 생성자 사용 하도록 설계 된.NET Framework 데이터 공급자가 복제 구현에서 사용 하 여 비슷한 생성자를 구현 하는 경우.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="AddToBatch">
      <MemberSignature Language="C#" Value="protected virtual int AddToBatch (System.Data.IDbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 AddToBatch(class System.Data.IDbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AddToBatch (command As IDbCommand) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int AddToBatch(System::Data::IDbCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddToBatch : System.Data.IDbCommand -&gt; int&#xA;override this.AddToBatch : System.Data.IDbCommand -&gt; int" Usage="dbDataAdapter.AddToBatch command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.IDbCommand" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="command"><see cref="T:System.Data.IDbCommand" /> 일괄 처리에 추가 합니다.</param>
        <summary>추가 된 <see cref="T:System.Data.IDbCommand" /> 현재 일괄 처리에 있습니다.</summary>
        <returns>추가 하기 전에 일괄 처리에서 명령의 수를 <see cref="T:System.Data.IDbCommand" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter>,이 메서드는 throw <xref:System.NotSupportedException>합니다. 상속한 클래스 <xref:System.Data.Common.DbDataAdapter> 일괄 처리에 대 한 지원을 제공 하려면이 메서드를 재정의 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">어댑터는 일괄 처리를 지원 하지 않습니다.</exception>
        <block subset="none" type="overrides"><para>이 메서드는 보호 되 고.NET Framework 데이터 공급자가 사용 하도록 설계 되었습니다.  
  
클래스에서 상속 되는 경우 <see cref="T:System.Data.Common.DbDataAdapter" /> 클래스 명령 일괄 처리에 추가할 수 있도록 하려면이 메서드를 재정의 하는 일괄 처리를 지원 합니다.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="ClearBatch">
      <MemberSignature Language="C#" Value="protected virtual void ClearBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ClearBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ClearBatch ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ClearBatch();" />
      <MemberSignature Language="F#" Value="abstract member ClearBatch : unit -&gt; unit&#xA;override this.ClearBatch : unit -&gt; unit" Usage="dbDataAdapter.ClearBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>모두 제거 <see cref="T:System.Data.IDbCommand" /> 일괄 처리에서는 개체입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter>,이 메서드는 throw <xref:System.NotSupportedException>합니다. 상속한 클래스 <xref:System.Data.Common.DbDataAdapter> 일괄 처리에 대 한 지원을 제공 하려면이 메서드를 재정의 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">어댑터는 일괄 처리를 지원 하지 않습니다.</exception>
        <block subset="none" type="overrides"><para>이 메서드는 보호 되 고.NET Framework 데이터 공급자가 사용 하도록 설계 되었습니다.  
  
클래스에서 상속 되는 경우 <see cref="T:System.Data.Common.DbDataAdapter" /> 클래스 일괄 처리에서 모든 명령을 제거 하는 사용자를 허용 하려면이 메서드를 재정의 하는 일괄 처리를 지원 합니다.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs&#xA;override this.CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs" Usage="dbDataAdapter.CreateRowUpdatedEvent (dataRow, command, statementType, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow"><see cref="T:System.Data.DataRow" /> 데이터 소스를 업데이트 하는 데 사용 합니다.</param>
        <param name="command"><see cref="T:System.Data.IDbCommand" /> 중에 실행 된 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />합니다.</param>
        <param name="statementType">명령은 업데이트 인지 삽입, 삭제 또는 SELECT 문입니다.</param>
        <param name="tableMapping"><see cref="T:System.Data.Common.DataTableMapping" /> 개체입니다.</param>
        <summary><see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <returns><see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 클래스의 새 인스턴스입니다.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>재정의 하는 경우 <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> 메서드.</para></block>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs&#xA;override this.CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs" Usage="dbDataAdapter.CreateRowUpdatingEvent (dataRow, command, statementType, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow"><see cref="T:System.Data.DataRow" /> 데이터 소스를 업데이트 하는 합니다.</param>
        <param name="command"><see cref="T:System.Data.IDbCommand" /> 동안 실행 하는 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />합니다.</param>
        <param name="statementType">명령은 업데이트 인지 삽입, 삭제 또는 SELECT 문입니다.</param>
        <param name="tableMapping"><see cref="T:System.Data.Common.DataTableMapping" /> 개체입니다.</param>
        <summary><see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <returns><see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 클래스의 새 인스턴스입니다.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>재정의 하는 경우 <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> 메서드.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultSourceTableName">
      <MemberSignature Language="C#" Value="public const string DefaultSourceTableName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultSourceTableName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultSourceTableName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultSourceTableName;" />
      <MemberSignature Language="F#" Value="val mutable DefaultSourceTableName : string" Usage="System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용 된 기본 이름을 <see cref="T:System.Data.Common.DataAdapter" /> 테이블 매핑에 대 한 개체입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "Table"가 사용 된 기본 이름을 <xref:System.Data.Common.DataAdapter> 테이블 매핑에 대 한 개체입니다.  
  
 <xref:System.Data.Common.DbDataAdapter.DefaultSourceTableName> 애플리케이션에 사용할 테이블 매핑을 추가 하는 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A>, 하지만 지정 하지 않습니다는 <xref:System.Data.DataTable> 이름입니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ DeleteCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 집합에서 레코드를 삭제 하기 위한 명령을 가져오거나 설정 합니다.</summary>
        <value><see cref="T:System.Data.IDbCommand" /> 중에 사용 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 데이터 집합의 삭제 된 행에 대 한 데이터 원본에서 레코드를 삭제 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하는 동안 <xref:System.Data.Common.DbDataAdapter.Update%2A>이면이 속성은 설정 되지 않으며 기본 키 정보에 있으면 합니다 <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> 자동으로 생성 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 파생된 클래스 <xref:System.Data.OleDb.OleDbDataAdapter> 속성 중 일부를 설정 합니다.  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">데이터 조작(ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="dbDataAdapter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
        <summary><see cref="T:System.Data.Common.DbDataAdapter" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteBatch">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ExecuteBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteBatch () As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteBatch();" />
      <MemberSignature Language="F#" Value="abstract member ExecuteBatch : unit -&gt; int&#xA;override this.ExecuteBatch : unit -&gt; int" Usage="dbDataAdapter.ExecuteBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 일괄 처리를 실행합니다.</summary>
        <returns>일괄 처리의 마지막 명령에서 반환 하는 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter>,이 메서드는 throw <xref:System.NotSupportedException>합니다. 상속한 클래스 <xref:System.Data.Common.DbDataAdapter> 일괄 처리에 대 한 지원을 제공 하려면이 메서드를 재정의 합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>이 메서드는 보호 되 고.NET Framework 데이터 공급자가 사용 하도록 설계 되었습니다.  
  
클래스에서 상속 되는 경우 <see cref="T:System.Data.Common.DbDataAdapter" /> 클래스 사용자가 일괄 처리를 실행 하도록 허용 하려면이 메서드를 재정의 하는 일괄 처리를 지원 합니다. 이 메서드의 구현을 일괄 처리를 어댑터에 명령을 결합 되어 일괄 처리를 실행 하 고 일괄 처리의 반환 값을 반환 합니다.</para></block>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">데이터 조작(ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>채웁니다를 <see cref="T:System.Data.DataSet" /> 또는 <see cref="T:System.Data.DataTable" />합니다.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public override int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Fill(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see cref="T:System.Data.DataSet" /> 레코드를 사용 하 여 입력 하 고 필요한 경우 스키마입니다.</param>
        <summary>추가 하거나 행을 <see cref="T:System.Data.DataSet" />입니다.</summary>
        <returns>행 수가 성공적으로 추가 되거나 새로 고치는 <see cref="T:System.Data.DataSet" />합니다. 이 행을 반환 하지 않는 문의 영향을 받는 행을 포함 되지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드는 SELECT 문을 사용 하 여 데이터 원본에서 데이터를 검색 합니다. <xref:System.Data.IDbConnection> 선택 명령과 사용 하 여 연결 된 개체는 유효 해야 합니다. 하지만 열려 있이 필요는 없습니다. 경우는 <xref:System.Data.IDbConnection> 닫은 후 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 은 호출,이 열어 데이터를 검색 하 고 닫으면 합니다. 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 는 호출을 열린 상태로 유지 합니다.  
  
 오류 또는 예외가 발생 하는 경우 데이터 테이블을 채우는 동안 오류가 발생 하기 전에 추가 행은 데이터 테이블에 남아 있습니다. 작업의 나머지 부분을 중단 합니다.  
  
 명령에서 모든 행을 반환 하지 않는, 테이블에 추가 됩니다는 <xref:System.Data.DataSet>, 예외가 발생 하지 않습니다.  
  
 경우는 <xref:System.Data.Common.DbDataAdapter> 개체를 채우는 동안 중복 된 열을 발견 한 <xref:System.Data.DataTable>, 패턴을 사용 하 고 후속 열의 이름을 생성 "*columnname*1","*columnname*2" " *columnname*3", 및 등입니다. 놓 이기는 들어오는 데이터에 명명 되지 않은 열을 포함 하는 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다.  
  
 지정 된 쿼리가 여러 결과 반환 하는 경우 결과 집합 쿼리를 반환 하는 각 행에 대해 별도 테이블에 배치 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예: "Table", "Table1", "Table2" 및 등)에 정수 값을 추가 하 여 이름이 지정 됩니다. 만들어지므로 테이블 행을 반환 하지 않는 쿼리에 대 한 select 쿼리 뒤에 삽입 쿼리를 처리 하는 경우, select 쿼리에 대해 생성 된 테이블 생성 되는 첫 번째 테이블 이기 때문에 "Table" 이라는 됩니다. 열 및 테이블 이름을 사용 하 여 애플리케이션은 이러한 명명 패턴을 사용 하 여 충돌 하지 않도록 확인 해야 합니다.  
  
 채우는 SELECT 문을 사용 하는 경우는 <xref:System.Data.DataSet> 여러 결과가 반환 일괄 처리 SQL 문과 같은 결과 중 하나에 오류가 포함 되어 있는 경우 모든 후속 결과 건너뛰고에 추가 되지 않습니다는 <xref:System.Data.DataSet>합니다.  
  
 후속을 사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 내용 새로 고침에 대 한 호출을 <xref:System.Data.DataSet>, 두 조건이 충족 되어야 합니다.  
  
1.  SQL 문을 처음 채우는 데 사용 되는 일치 해야 합니다 <xref:System.Data.DataSet>합니다.  
  
2.  합니다 **키** 열 정보 표시 되어야 합니다.  
  
 기본 키 정보가 있는 경우 중복 행 조정 되며 한 번만 표시에 <xref:System.Data.DataTable> 에 해당 하는 <xref:System.Data.DataSet>합니다. 통해 기본 키 정보를 설정할 수 있습니다 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, 지정 하 여는 <xref:System.Data.DataTable.PrimaryKey%2A> 의 속성을 <xref:System.Data.DataTable>, 하거나 설정 하 여를 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> 속성을 `AddWithKey`.  
  
 `SelectCommand` 가 OUTER JOIN의 결과를 반환하면 `DataAdapter` 는 결과 <xref:System.Data.DataTable.PrimaryKey%2A> 에 대해 <xref:System.Data.DataTable>값을 설정하지 않습니다. 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 [기본 키 정의](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)합니다.  
  
> [!NOTE]
>  구현의 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한 합니다. 사용 하 여 여러 결과 대 한 스키마 정보를 검색할 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 사용 하 여는 <xref:System.Data.MissingSchemaAction> 로 `AddWithKey`합니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Fill dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">이름을 합니다 <see cref="T:System.Data.DataTable" /> 테이블 매핑에 사용 하도록 합니다.</param>
        <summary>추가 하거나 지정된 된 범위에서의 행을 새로 고칩니다 합니다 <see cref="T:System.Data.DataSet" /> 사용 하 여 데이터 원본에 맞게는 <see cref="T:System.Data.DataTable" /> 이름입니다.</summary>
        <returns>행 수가 성공적으로 추가 되거나 새로 고치는 <see cref="T:System.Data.DataSet" />합니다. 이 행을 반환 하지 않는 문의 영향을 받는 행을 포함 되지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 연결 된 지정 된 SELECT 문을 사용 하 여 데이터 원본에서 행을 검색 하는 메서드 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 속성입니다. SELECT 문과 사용 하 여 연결 된 연결 개체는 유효 해야 합니다. 하지만 열려 있이 필요가 없습니다. 전에 연결이 닫히면 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 는 데이터를 검색 하려면을 열고 다음 닫는 하는를 호출 합니다. 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 는 호출을 열린 상태로 유지 합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 작업이 대상에 행 추가 <xref:System.Data.DataTable> 개체를 <xref:System.Data.DataSet>만들기는 <xref:System.Data.DataTable> 경우 이미 없는 개체입니다. 만들면 <xref:System.Data.DataTable> 개체는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 작업은 일반적으로 열 이름 메타 데이터만 만듭니다. 그러나 경우 합니다 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> 속성이 `AddWithKey`, 적절 한 기본 키와 제약 조건도 만들어집니다.  
  
 경우는 <xref:System.Data.Common.DbDataAdapter> 에서 중복 열을 채우는 동안는 <xref:System.Data.DataTable>, 패턴을 사용 하 여 후속 열에 대 한 이름을 생성 "*columnname*1", "*columnname*2", "*columnname*3", 및 등입니다. 놓 이기는 들어오는 데이터에 명명 되지 않은 열을 포함 하는 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다. 여러 결과 집합에 추가 될 때를 <xref:System.Data.DataSet> 각 결과 집합을 별도 테이블에 배치 됩니다.  
  
 오버 로드 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 를 사용 하는 `DataTable` 대로 매개 변수 에서만 첫 번째 결과 가져옵니다. 오버 로드를 사용 하 여 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 를 사용 하는 `DataSet` 여러 결과를 얻으려면 매개 변수로 합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드 시나리오를 지원 합니다. 여기서는 <xref:System.Data.DataSet> 여러 개 포함 된 <xref:System.Data.DataTable> 개체 이름이 대/소문자만 다른 합니다. 이러한 상황에서는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 해당 테이블을 찾을 대/소문자 구분 비교를 수행 하 고 정확히 일치 하는 경우 새 테이블을 만듭니다. 다음 C# 코드는이 동작을 보여 줍니다.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
 dataset.Tables.Add("AAA");  
 adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
    adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 라고 하며 <xref:System.Data.DataSet> 하나만 포함 되어 <xref:System.Data.DataTable> 이름이 다른 경우에 의해서만 <xref:System.Data.DataTable> 업데이트 됩니다. 이 시나리오에서는 비교는 대/소문자 구분. 다음 C# 코드는이 동작을 보여 줍니다.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 사용할 수는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드를 여러 번에 동일한 <xref:System.Data.DataTable>입니다. 기본 키가 있는 경우 들어오는 행이 이미 존재 하는 일치 하는 행과 병합 됩니다. 들어오는 행에 추가 된 기본 키가 없으면는 <xref:System.Data.DataTable>합니다.  
  
 `SelectCommand` 가 OUTER JOIN의 결과를 반환하면 `DataAdapter` 는 결과 <xref:System.Data.DataTable.PrimaryKey%2A> 에 대해 <xref:System.Data.DataTable>값을 설정하지 않습니다. 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 [기본 키 정의](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)합니다.  
  
> [!NOTE]
>  구현의 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 고 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> .NET Framework 데이터 공급자는 결과 대해서만 첫 번째 스키마 정보를 검색 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">원본 테이블에 올바르지 않습니다.</exception>
        <block subset="none" type="overrides"><para>이 오버 로드는 <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> 메서드는 보호 되므로.NET Framework 데이터 공급자가 사용 하도록 설계 되었습니다.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see cref="T:System.Data.DataSet" /> 레코드를 사용 하 여 입력 하 고 필요한 경우 스키마입니다.</param>
        <param name="srcTable">테이블 매핑에 사용할 원본 테이블의 이름입니다.</param>
        <summary>추가 하거나 행을 새로 고칩니다 합니다 <see cref="T:System.Data.DataSet" /> 사용 하 여 데이터 원본에 맞게 합니다 <see cref="T:System.Data.DataSet" /> 및 <see cref="T:System.Data.DataTable" /> 이름입니다.</summary>
        <returns>행 수가 성공적으로 추가 되거나 새로 고치는 <see cref="T:System.Data.DataSet" />합니다. 이 행을 반환 하지 않는 문의 영향을 받는 행을 포함 되지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드는 SELECT 문을 사용 하 여 데이터 원본에서 데이터를 검색 합니다. <xref:System.Data.IDbConnection> 선택 명령과 사용 하 여 연결 된 개체는 유효 해야 합니다. 하지만 열려 있이 필요는 없습니다. 경우는 <xref:System.Data.IDbConnection> 닫은 후 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 는 데이터를 검색 하려면을 열고 다음 닫는 하는를 호출 합니다. 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 는 호출을 열린 상태로 유지 합니다.  
  
 명령에서 모든 행을 반환 하지 않는, 테이블에 추가 됩니다는 <xref:System.Data.DataSet>, 예외가 발생 하지 않습니다.  
  
 경우는 <xref:System.Data.Common.DbDataAdapter> 개체를 채우는 동안 중복 된 열을 발견을 <xref:System.Data.DataTable>, 패턴 "columnname1", "columnname2", "columnname3", 및 등을 사용 하 여 후속 열에 대 한 이름을 생성 합니다. 놓 이기는 들어오는 데이터에 명명 되지 않은 열을 포함 하는 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다.  
  
 지정 된 쿼리가 여러 결과 반환 하는 경우 각 결과 집합을 별도 테이블에 배치 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예: "Table", "Table1", "Table2" 및 등)에 정수 값을 추가 하 여 이름이 지정 됩니다. 테이블이 만들어지면 행을 반환 하지 않는 쿼리에 대 한 select 쿼리 뒤에 삽입 쿼리를 처리 하는 경우 이후 select 쿼리에 대해 생성 된 테이블은 수 "Table" 이라는, 생성 된 첫 번째 테이블 이기 때문에. 열 및 테이블 이름을 사용 하 여 애플리케이션은 이러한 명명 패턴을 사용 하 여 충돌 하지 않도록 확인 해야 합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드 시나리오를 지원 합니다. 여기서는 <xref:System.Data.DataSet> 여러 개 포함 된 <xref:System.Data.DataTable> 개체 이름이 대/소문자만 다른 합니다. 이러한 상황에서는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 해당 테이블을 찾을 대/소문자 구분 비교를 수행 하 고 정확히 일치 하는 경우 새 테이블을 만듭니다. 다음 C# 코드는이 동작을 보여 줍니다.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 라고 하며 <xref:System.Data.DataSet> 하나만 포함 되어 <xref:System.Data.DataTable> 이름이 다른 경우에 의해서만 <xref:System.Data.DataTable> 업데이트 됩니다. 이 시나리오에서는 비교는 대/소문자 구분. 다음 C# 코드는이 동작을 보여 줍니다.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 오류 또는 예외가 발생 하는 경우 데이터 테이블을 채우는 동안 오류가 발생 하기 전에 추가 행은 데이터 테이블에 남아 있습니다. 작업의 나머지 부분을 중단 합니다.  
  
 채우는 SELECT 문을 사용 하는 경우는 <xref:System.Data.DataSet> 일괄 처리 SQL 문 다음에 유의 같은 여러 결과 반환 합니다.  
  
-   모든 후속 결과 생략 되 고 추가할 없습니다 오류가 있으면 결과 중 하나는 <xref:System.Data.DataSet>합니다.  
  
 후속을 사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 내용 새로 고침에 대 한 호출을 <xref:System.Data.DataSet>, 두 조건이 충족 되어야 합니다.  
  
1.  SQL 문을 처음 채우는 데 사용 되는 일치 해야 합니다 <xref:System.Data.DataSet>합니다.  
  
2.  합니다 **키** 열 정보 표시 되어야 합니다. 기본 키 정보가 있는 경우 중복 행 조정 되며 한 번만 표시에 <xref:System.Data.DataTable> 에 해당 하는 <xref:System.Data.DataSet>합니다. 통해 기본 키 정보를 설정할 수 있습니다 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, 지정 하 여는 <xref:System.Data.DataTable.PrimaryKey%2A> 의 속성을 <xref:System.Data.DataTable>, 하거나 설정 하 여를 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> 속성을 `AddWithKey`.  
  
 `SelectCommand` 가 OUTER JOIN의 결과를 반환하면 `DataAdapter` 는 결과 <xref:System.Data.DataTable.PrimaryKey%2A> 에 대해 <xref:System.Data.DataTable>값을 설정하지 않습니다. 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 [기본 키 정의](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)합니다.  
  
> [!NOTE]
>  구현의 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한 합니다. 사용 하 여 여러 결과 대 한 스키마 정보를 검색할 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 사용 하 여는 <xref:System.Data.MissingSchemaAction> 로 `AddWithKey`합니다.  
  
   
  
## Examples  
 다음 예제에서는 파생된 클래스 <xref:System.Data.OleDb.OleDbDataAdapter>를 입력 하는 <xref:System.Data.DataSet> categories 테이블에서 행을 사용 하 여 합니다. 이 예에서는 만들었다고 가정를 <xref:System.Data.OleDb.OleDbDataAdapter> 및 <xref:System.Data.DataSet>합니다.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">원본 테이블에 올바르지 않습니다.</exception>
        <block subset="none" type="overrides"><para>재정의 하는 경우 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 메서드.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDataReader ^ dataReader);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDataReader -&gt; int" Usage="dbDataAdapter.Fill (dataTable, dataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="dataTable"><see cref="T:System.Data.DataTable" /> 레코드를 사용 하 여 입력 하 고 필요한 경우 스키마입니다.</param>
        <param name="dataReader"><see cref="T:System.Data.IDataReader" />의 이름입니다.</param>
        <summary>추가 하거나 행을 <see cref="T:System.Data.DataTable" /> 지정 된 데이터 소스에 맞게 <see cref="T:System.Data.DataTable" /> 및 <see cref="T:System.Data.IDataReader" /> 이름.</summary>
        <returns>행 수가 성공적으로 추가 되거나 새로 고치는 <see cref="T:System.Data.DataTable" />합니다. 이 행을 반환 하지 않는 문의 영향을 받는 행을 포함 되지 않습니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable"><see cref="T:System.Data.DataTable" /> 레코드를 사용 하 여 입력 하 고 필요한 경우 스키마입니다.</param>
        <param name="command">데이터 원본에서 행을 검색 하는 데 SQL SELECT 문입니다.</param>
        <param name="behavior"><see cref="T:System.Data.CommandBehavior" /> 값 중 하나입니다.</param>
        <summary>추가 하거나 행을 <see cref="T:System.Data.DataTable" /> 지정 된 데이터 소스에 맞게 <see cref="T:System.Data.DataTable" />, <see cref="T:System.Data.IDbCommand" /> 및 <see cref="T:System.Data.CommandBehavior" />합니다.</summary>
        <returns>행 수가 성공적으로 추가 되거나 새로 고치는 <see cref="T:System.Data.DataTable" />합니다. 이 행을 반환 하지 않는 문의 영향을 받는 행을 포함 되지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 연결 된 지정 된 SELECT 문을 사용 하 여 데이터 원본에서 행을 검색 하는 메서드 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 속성입니다. SELECT 문과 사용 하 여 연결 된 연결 개체는 유효 해야 합니다. 하지만 열려 있이 필요가 없습니다. 연결 하기 전에 닫히면 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 는 호출 하기를 열어 데이터를 검색 하 고 닫으면 합니다. 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 는 호출을 열린 상태로 유지 합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 지정된 된 대상에 행을 추가 하는 작업이 <xref:System.Data.DataTable> 개체를 <xref:System.Data.DataSet>만들기는 <xref:System.Data.DataTable> 경우 이미 없는 개체입니다. 만들 때를 <xref:System.Data.DataTable> 개체는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 작업은 일반적으로 열 이름 메타 데이터만 만듭니다. 그러나 경우 합니다 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> 속성이 `AddWithKey`, 적절 한 기본 키와 제약 조건도 만들어집니다.  
  
 경우는 <xref:System.Data.Common.DbDataAdapter> 개체를 채우는 동안 중복 된 열을 발생을 <xref:System.Data.DataTable>, 패턴을 사용 하 여 후속 열에 대 한 이름을 생성 "*columnname*1", "*columnname*2 ","*columnname*3 "등입니다. 놓 이기는 들어오는 데이터에 명명 되지 않은 열을 포함 하는 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다.  
  
 오버 로드 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 를 사용 하는 `DataTable` 대로 매개 변수 에서만 첫 번째 결과 가져옵니다. 오버 로드를 사용 하 여 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 를 사용 하는 `DataSet` 여러 결과를 얻으려면 매개 변수로 합니다.  
  
 사용할 수는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드를 여러 번에 동일한 <xref:System.Data.DataTable>입니다. 기본 키가 있는 경우 들어오는 행이 이미 존재 하는 일치 하는 행과 병합 됩니다. 들어오는 행에 추가 된 기본 키가 없으면는 <xref:System.Data.DataTable>합니다.  
  
 `SelectCommand` 가 OUTER JOIN의 결과를 반환하면 `DataAdapter` 는 결과 <xref:System.Data.DataTable.PrimaryKey%2A> 에 대해 <xref:System.Data.DataTable>값을 설정하지 않습니다. 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 [기본 키 정의](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)합니다.  
  
> [!NOTE]
>  구현의 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한 합니다. 사용 하 여 여러 결과 대 한 스키마 정보를 검색할 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 사용 하 여는 <xref:System.Data.MissingSchemaAction> 로 `AddWithKey`합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>이 오버 로드는 <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> 메서드는 보호 되므로.NET Framework 데이터 공급자가 사용 하도록 설계 되었습니다.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (int startRecord, int maxRecords, params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(int32 startRecord, int32 maxRecords, class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (startRecord As Integer, maxRecords As Integer, ParamArray dataTables As DataTable()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(int startRecord, int maxRecords, ... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="override this.Fill : int * int * System.Data.DataTable[] -&gt; int" Usage="dbDataAdapter.Fill (startRecord, maxRecords, dataTables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startRecord" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-2.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startRecord">시작 하려면 0부터 시작 레코드 번호입니다.</param>
        <param name="maxRecords">검색할 레코드의 최대 수입니다.</param>
        <param name="dataTables"><see cref="T:System.Data.DataTable" /> 데이터 소스에서 채울 개체입니다.</param>
        <summary>추가 하거나 행을 새로 고칩니다는 <see cref="T:System.Data.DataTable" /> 데이터 소스의 지정된 된 레코드에서 시작 하 고 지정 된 최대 레코드 수가 최대 검색 일치 하도록 합니다.</summary>
        <returns>행 수가 성공적으로 추가 되거나 새로 고치는 <see cref="T:System.Data.DataTable" />합니다. 이 값에서 행을 반환 하지 않는 문의 영향을 받는 행을 포함 되지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Data.Common.DataAdapter.Fill%2A> 연결 된 지정 된 SELECT 문을 사용 하 여 데이터 원본에서 행을 검색 하는 메서드 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 속성입니다. SELECT 문과 사용 하 여 연결 된 연결 개체는 유효 해야 합니다. 하지만 열려 있이 필요가 없습니다. 연결 하기 전에 닫히면 <xref:System.Data.Common.DataAdapter.Fill%2A> 는 데이터를 검색 하는 것이 열려 있고 닫혀 다음 호출 합니다. 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DataAdapter.Fill%2A> 는 호출을 열린 상태로 유지 합니다.  
  
 <xref:System.Data.Common.DataAdapter.Fill%2A> 작업이 대상에 행 추가 <xref:System.Data.DataTable> 개체를 <xref:System.Data.DataSet>만들기는 <xref:System.Data.DataTable> 경우 이미 없는 개체입니다. 만들면 <xref:System.Data.DataTable> 개체는 <xref:System.Data.Common.DataAdapter.Fill%2A> 작업은 일반적으로 열 이름 메타 데이터만 만듭니다. 그러나 경우 합니다 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> 속성이 `AddWithKey`, 적절 한 기본 키와 제약 조건도 만들어집니다.  
  
 `SelectCommand` 가 OUTER JOIN의 결과를 반환하면 `DataAdapter` 는 결과 <xref:System.Data.DataTable.PrimaryKey%2A> 에 대해 <xref:System.Data.DataTable>값을 설정하지 않습니다. 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 [기본 키 정의](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)합니다.  
  
 데이터 어댑터를 채우는 동안 중복 된 열을 발견 하는 경우는 <xref:System.Data.DataTable>, 패턴 "columnname1", "columnname2", "columnname3", 및 등을 사용 하 여 후속 열에 대 한 이름을 생성 합니다. 놓 이기는 들어오는 데이터에 명명 되지 않은 열을 포함 하는 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다. 여러 결과 집합에 추가 될 때를 <xref:System.Data.DataSet>, 각 결과 집합을 별도 테이블에 배치 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예: "Table", "Table1", "Table2" 및 등)에 정수 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하 여 애플리케이션은 이러한 명명 패턴을 사용 하 여 충돌 하지 않도록 확인 해야 합니다.  
  
 채우는 SELECT 문을 사용 하는 경우는 <xref:System.Data.DataSet> 여러 결과 반환을 일괄 처리 SQL 문과 같은 결과 중 하나에 오류가 포함 되어 있는 경우 모든 후속 결과 생략 되 고에 추가 되지 않습니다는 <xref:System.Data.DataSet>합니다.  
  
 사용할 수는 <xref:System.Data.Common.DataAdapter.Fill%2A> 메서드를 여러 번에 동일한 <xref:System.Data.DataTable>입니다. 기본 키가 있는 경우 들어오는 행이 이미 존재 하는 일치 하는 행과 병합 됩니다. 들어오는 행에 추가 된 기본 키가 없으면는 <xref:System.Data.DataTable>합니다.  
  
> [!NOTE]
>  구현의 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한 합니다. 사용 하 여 여러 결과 대 한 스키마 정보를 검색할 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 사용 하 여는 <xref:System.Data.MissingSchemaAction> 로 `AddWithKey`합니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see cref="T:System.Data.DataSet" /> 레코드를 사용 하 여 입력 하 고 필요한 경우 스키마입니다.</param>
        <param name="startRecord">시작 하려면 0부터 시작 레코드 번호입니다.</param>
        <param name="maxRecords">검색할 레코드의 최대 수입니다.</param>
        <param name="srcTable">테이블 매핑에 사용할 원본 테이블의 이름입니다.</param>
        <summary>추가 하거나 지정된 된 범위에서의 행을 새로 고칩니다 합니다 <see cref="T:System.Data.DataSet" /> 사용 하 여 데이터 원본에 맞게 합니다 <see cref="T:System.Data.DataSet" /> 및 <see cref="T:System.Data.DataTable" /> 이름입니다.</summary>
        <returns>행 수가 성공적으로 추가 되거나 새로 고치는 <see cref="T:System.Data.DataSet" />합니다. 이 행을 반환 하지 않는 문의 영향을 받는 행을 포함 되지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `maxRecords` 값이 0 시작 레코드 뒤에서 발견 되는 모든 레코드를 가져옵니다. 경우 `maxRecords` 보다 크면 나머지 행 수가 나머지 행이 반환 하 고 오류가 발생 합니다.  
  
 해당 select 명령이 여러 결과 반환 하는 문의 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 에 적용 됩니다 `maxRecords` 첫 번째 결과입니다.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드는 SELECT 문을 사용 하 여 데이터 원본에서 데이터를 검색 합니다. <xref:System.Data.IDbConnection> SELECT 문과 사용 하 여 연결 된 개체는 유효 해야 합니다. 하지만 열려 있이 필요는 없습니다. 경우는 <xref:System.Data.IDbConnection> 닫은 후 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 은 호출,이 열어 데이터를 검색 하 고 닫으면 합니다. 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 는 호출을 열린 상태로 유지 합니다.  
  
 명령에서 모든 행을 반환 하지 않는, 테이블에 추가 됩니다는 <xref:System.Data.DataSet>, 예외가 발생 합니다.  
  
 경우는 <xref:System.Data.Common.DbDataAdapter> 개체를 채우는 동안 중복 된 열을 발생을 <xref:System.Data.DataTable>, 패턴을 사용 하 여 후속 열에 대 한 이름을 생성 "*columnname*1", "*columnname*2 ","*columnname*3 "등입니다. 놓 이기는 들어오는 데이터에 명명 되지 않은 열을 포함 하는 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다.  
  
 지정 된 쿼리가 여러 결과 반환 하는 경우 각 결과 집합을 별도 테이블에 배치 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예: "Table", "Table1", "Table2" 및 등)에 정수 값을 추가 하 여 이름이 지정 됩니다. 만들어지므로 테이블 행을 반환 하지 않는 쿼리에 대 한 select 쿼리 뒤에 삽입 쿼리를 처리 하는 경우, 생성 된 첫 번째 테이블 이기 때문에 선택 쿼리에 대해 생성 된 테이블이 "Table"을 이라고 합니다. 열 및 테이블 이름을 사용 하 여 애플리케이션은 이러한 명명 패턴을 사용 하 여 충돌 하지 않도록 확인 해야 합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드 시나리오를 지원 합니다. 여기서는 <xref:System.Data.DataSet> 여러 개 포함 된 <xref:System.Data.DataTable> 개체 이름이 대/소문자만 다른 합니다. 이러한 상황에서는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 해당 테이블을 찾을 대/소문자 구분 비교를 수행 하 고 정확히 일치 하는 경우 새 테이블을 만듭니다. 다음 C# 코드는이 동작을 보여 줍니다.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 라고 하며 <xref:System.Data.DataSet> 하나만 포함 되어 <xref:System.Data.DataTable> 이름이 다른 경우에 의해서만 <xref:System.Data.DataTable> 업데이트 됩니다. 이 시나리오에서는 비교는 대/소문자 구분. 다음 C# 코드는이 동작을 보여 줍니다.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 오류 또는 예외가 발생 하는 경우 데이터 테이블을 채우는 동안 오류가 발생 하기 전에 추가 행은 데이터 테이블에 남아 있습니다. 작업의 나머지 부분을 중단 합니다.  
  
 채우는 SELECT 문을 사용 하는 경우는 <xref:System.Data.DataSet> 일괄 처리 SQL 문과 같은 여러 결과 반환 합니다. 다음에 유의 합니다.  
  
-   SQL 문 일괄 처리에서 여러 결과 처리할 때 `maxRecords` 첫 번째 결과에 적용 됩니다. 장으로 구성 된 결과 (.NET Framework Data Provider for OLE DB만)이 포함 된 행에도 마찬가지입니다. 최상위 결과 따라 제한 됩니다 `maxRecords`, 하지만 모든 자식 행이 추가 됩니다.  
  
-   모든 후속 결과 생략 되 고 추가할 없습니다 오류가 있으면 결과 중 하나는 <xref:System.Data.DataSet>합니다.  
  
 후속을 사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 내용 새로 고침에 대 한 호출을 <xref:System.Data.DataSet>, 두 조건이 충족 되어야 합니다.  
  
1.  SQL 문을 처음 채우는 데 사용 되는 일치 해야 합니다 <xref:System.Data.DataSet>합니다.  
  
2.  합니다 **키** 열 정보 표시 되어야 합니다.  
  
 기본 키 정보가 있는 경우 중복 행 조정 되며 한 번만 표시에 <xref:System.Data.DataTable> 에 해당 하는 <xref:System.Data.DataSet>합니다. 통해 기본 키 정보를 설정할 수 있습니다 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, 지정 하 여는 <xref:System.Data.DataTable.PrimaryKey%2A> 의 속성을 <xref:System.Data.DataTable>, 하거나 설정 하 여를 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> 속성을 `AddWithKey`.  
  
 `SelectCommand` 가 OUTER JOIN의 결과를 반환하면 `DataAdapter` 는 결과 <xref:System.Data.DataTable.PrimaryKey%2A> 에 대해 <xref:System.Data.DataTable>값을 설정하지 않습니다. 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 [기본 키 정의](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)합니다.  
  
> [!NOTE]
>  구현의 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한 합니다. 사용 하 여 여러 결과 대 한 스키마 정보를 검색할 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 사용 하 여는 <xref:System.Data.MissingSchemaAction> 로 `AddWithKey`합니다.  
  
> [!NOTE]
>  합니다 `DataSet` 나타난 레코드 개수 보다 많은 포함 되지 것입니다 `maxRecords`합니다. 하지만, 쿼리에서 생성 한 전체 결과 집합은 여전히 서버에서 반환 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 파생된 클래스 <xref:System.Data.OleDb.OleDbDataAdapter>를 입력 하는 <xref:System.Data.DataSet> 에서 행을 10부터 15 개의 행을 사용 하 여는 **범주** 테이블입니다. 이 예에서는 만들었다고 가정를 <xref:System.Data.OleDb.OleDbDataAdapter> 및 <xref:System.Data.DataSet>합니다.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" />가 잘못되었습니다.</exception>
        <exception cref="T:System.InvalidOperationException">원본 테이블에 올바르지 않습니다.  
  
또는 
연결이 잘못 되었습니다.</exception>
        <exception cref="T:System.InvalidCastException">연결을 찾을 수 없습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="startRecord" /> 매개 변수가 0 보다 작습니다.  
  
또는 
<paramref name="maxRecords" /> 매개 변수가 0 보다 작습니다.</exception>
        <block subset="none" type="overrides"><para>재정의 하는 경우 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 메서드.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, string srcTable, System.Data.IDataReader dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, string srcTable, class System.Data.IDataReader dataReader, int32 startRecord, int32 maxRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable, System::Data::IDataReader ^ dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string * System.Data.IDataReader * int * int -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable, dataReader, startRecord, maxRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="srcTable" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" Index="2" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="startRecord" Type="System.Int32" Index="3" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="4" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see cref="T:System.Data.DataSet" /> 레코드를 사용 하 여 입력 하 고 필요한 경우 스키마입니다.</param>
        <param name="srcTable">이름을 합니다 <see cref="T:System.Data.DataTable" /> 테이블 매핑에 사용 하도록 합니다.</param>
        <param name="dataReader"><see cref="T:System.Data.IDataReader" />의 이름입니다.</param>
        <param name="startRecord">시작 하려면 0부터 시작 레코드 번호입니다.</param>
        <param name="maxRecords">검색할 레코드의 최대 수입니다.</param>
        <summary>추가 하거나 지정된 된 범위에서의 행을 새로 고칩니다 합니다 <see cref="T:System.Data.DataSet" /> 사용 하 여 데이터 원본에 맞게 합니다 <see cref="T:System.Data.DataSet" />, <see cref="T:System.Data.DataTable" />, 및 <see cref="T:System.Data.IDataReader" /> 이름.</summary>
        <returns>행 수가 성공적으로 추가 되거나 새로 고치는 <see cref="T:System.Data.DataSet" />합니다. 이 행을 반환 하지 않는 문의 영향을 받는 행을 포함 되지 않습니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable[] dataTables, int32 startRecord, int32 maxRecords, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTables As DataTable(), startRecord As Integer, maxRecords As Integer, command As IDbCommand, behavior As CommandBehavior) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables, int startRecord, int maxRecords, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable[] * int * int * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTables, startRecord, maxRecords, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startRecord" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maxRecords" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="command" Type="System.Data.IDbCommand" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dataTables"><see cref="T:System.Data.DataTable" /> 데이터 소스에서 채울 개체입니다.</param>
        <param name="startRecord">시작 하려면 0부터 시작 레코드 번호입니다.</param>
        <param name="maxRecords">검색할 레코드의 최대 수입니다.</param>
        <param name="command">합니다 <see cref="T:System.Data.IDbCommand" /> 채우기 위해 실행 되는 <see cref="T:System.Data.DataTable" /> 개체입니다.</param>
        <param name="behavior"><see cref="T:System.Data.CommandBehavior" /> 값 중 하나입니다.</param>
        <summary>추가 하거나 지정된 된 범위에서의 행을 새로 고칩니다 합니다 <see cref="T:System.Data.DataSet" /> 사용 하 여 데이터 원본에 맞게 합니다 <see cref="T:System.Data.DataSet" /> 및 <see cref="T:System.Data.DataTable" /> 이름입니다.</summary>
        <returns>행의 수에 추가 하거나 데이터 테이블에서 새로 고쳐집니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `maxRecords` 값이 0 시작 레코드 뒤에서 발견 되는 모든 레코드를 가져옵니다. 경우 `maxRecords` 보다 크면 나머지 행 수가 없으면 오류가 발생 하 고 나머지 행이 반환 됩니다.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드는 SELECT 문을 사용 하 여 데이터 원본에서 데이터를 검색 합니다. <xref:System.Data.IDbConnection> SELECT 문과 사용 하 여 연결 된 개체는 유효 해야 합니다. 하지만 열려 있이 필요는 없습니다. 경우는 <xref:System.Data.IDbConnection> 닫은 후 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 는 데이터를 검색 하려면을 열고 다음 닫는 하는를 호출 합니다. 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 는 호출을 열린 상태로 유지 합니다.  
  
 명령에서 모든 행을 반환 하지 않는, 테이블에 추가 됩니다는 <xref:System.Data.DataSet>, 예외가 발생 합니다.  
  
 경우는 <xref:System.Data.Common.DbDataAdapter> 개체를 채우는 동안 중복 된 열을 발생을 <xref:System.Data.DataTable>, 패턴을 사용 하 여 후속 열에 대 한 이름을 생성 "*columnname*1", "*columnname*2 ","*columnname*3 "등입니다. 놓 이기는 들어오는 데이터에 명명 되지 않은 열을 포함 하는 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다.  
  
 지정 된 쿼리가 여러 결과 반환 하는 경우 각 결과 집합을 별도 테이블에 배치 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예: "Table", "Table1", "Table2" 및 등)에 정수 값을 추가 하 여 이름이 지정 됩니다. 테이블이 만들어지면 행을 반환 하지 않는 쿼리에 대 한 select 쿼리 뒤에 삽입 쿼리를 처리 하는 경우 이후 select 쿼리에 대해 생성 된 테이블은 수 "Table" 이라는, 생성 된 첫 번째 테이블 이기 때문에. 열 및 테이블 이름을 사용 하 여 애플리케이션은 이러한 명명 패턴을 사용 하 여 충돌 하지 않도록 확인 해야 합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드 시나리오를 지원 합니다. 여기서는 <xref:System.Data.DataSet> 여러 개 포함 된 <xref:System.Data.DataTable> 개체 이름이 대/소문자만 다른 합니다. 이러한 상황에서는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 해당 테이블을 찾을 대/소문자 구분 비교를 수행 하 고 정확히 일치 하는 경우 새 테이블을 만듭니다. 다음 C# 코드는이 동작을 보여 줍니다.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 라고 하며 <xref:System.Data.DataSet> 하나만 포함 되어 <xref:System.Data.DataTable> 이름이 다른 경우에 의해서만 <xref:System.Data.DataTable> 업데이트 됩니다. 이 시나리오에서는 비교는 대/소문자 구분. 다음 C# 코드는이 동작을 보여 줍니다.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 오류 또는 예외가 발생 하는 경우 데이터 테이블을 채우는 동안 오류가 발생 하기 전에 추가 행은 데이터 테이블에 남아 있습니다. 작업의 나머지 부분을 중단 합니다.  
  
 채우는 SELECT 문을 사용 하는 경우는 <xref:System.Data.DataTable> 개체 일괄 처리 SQL 문 다음에 유의 같은 여러 결과 반환 합니다.  
  
-   SQL 문 일괄 처리에서 여러 결과 처리할 때 `maxRecords` 첫 번째 결과에 적용 됩니다. 장으로 구성 된 결과 (.NET Framework Data Provider for OLE DB만)이 포함 된 행에도 마찬가지입니다. 최상위 결과 따라 제한 됩니다 `maxRecords`, 하지만 모든 자식 행이 추가 됩니다.  
  
-   결과 중 하나에 오류가 포함 되어, 모든 후속 결과 건너뜁니다.  
  
> [!NOTE]
>  합니다 `DataSet` 나타난 레코드 개수 보다 많은 포함 되지 것입니다 `maxRecords`합니다. 그러나 쿼리에 의해 생성 된 전체 결과 집합은 여전히 서버에서 반환 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException"><see cref="T:System.Data.DataSet" />가 잘못되었습니다.</exception>
        <exception cref="T:System.InvalidOperationException">원본 테이블에 올바르지 않습니다.  
  
또는 
연결이 잘못 되었습니다.</exception>
        <exception cref="T:System.InvalidCastException">연결을 찾을 수 없습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="startRecord" /> 매개 변수가 0 보다 작습니다.  
  
또는 
<paramref name="maxRecords" /> 매개 변수가 0 보다 작습니다.</exception>
        <block subset="none" type="overrides"><para>재정의 하는 경우 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> 메서드.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see cref="T:System.Data.DataSet" /> 레코드를 사용 하 여 입력 하 고 필요한 경우 스키마입니다.</param>
        <param name="startRecord">시작 하려면 0부터 시작 레코드 번호입니다.</param>
        <param name="maxRecords">검색할 레코드의 최대 수입니다.</param>
        <param name="srcTable">테이블 매핑에 사용할 원본 테이블의 이름입니다.</param>
        <param name="command">데이터 원본에서 행을 검색 하는 데 SQL SELECT 문입니다.</param>
        <param name="behavior"><see cref="T:System.Data.CommandBehavior" /> 값 중 하나입니다.</param>
        <summary>추가 하거나 지정된 된 범위에서의 행을 새로 고칩니다 합니다 <see cref="T:System.Data.DataSet" /> 사용 하 여 데이터 원본에 맞게는 <see cref="T:System.Data.DataSet" /> 및 원본 테이블 이름, 명령 문자열과 명령 동작 합니다.</summary>
        <returns>행 수가 성공적으로 추가 되거나 새로 고치는 <see cref="T:System.Data.DataSet" />합니다. 이 행을 반환 하지 않는 문의 영향을 받는 행을 포함 되지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 연결 된 지정 된 SELECT 문을 사용 하 여 데이터 원본에서 행을 검색 하는 메서드 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 속성입니다. SELECT 문과 사용 하 여 연결 된 연결 개체는 유효 해야 합니다. 하지만 열려 있이 필요가 없습니다. 전에 연결이 닫히면 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 는 데이터를 검색 하려면을 열고 다음 닫는 하는를 호출 합니다. 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 는 호출을 열린 상태로 유지 합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 작업이 대상에 행 추가 <xref:System.Data.DataTable> 개체를 <xref:System.Data.DataSet>만들기는 <xref:System.Data.DataTable> 경우 이미 없는 개체입니다. 만들면 <xref:System.Data.DataTable> 개체는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 작업은 일반적으로 열 이름 메타 데이터만 만듭니다. 그러나 경우 합니다 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> 속성이 `AddWithKey`, 적절 한 기본 키와 제약 조건도 만들어집니다.  
  
 경우는 <xref:System.Data.Common.DbDataAdapter> 에서 중복 열을 채우는 동안는 <xref:System.Data.DataTable>, 패턴을 사용 하 여 후속 열에 대 한 이름을 생성 "*columnname*1", "*columnname*2", "*columnname*3", 및 등입니다. 놓 이기는 들어오는 데이터에 명명 되지 않은 열을 포함 하는 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다. 여러 결과 집합에 추가 될 때를 <xref:System.Data.DataSet> 각 결과 집합을 별도 테이블에 배치 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예: "Table", "Table1", "Table2" 및 등)에 정수 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하 여 애플리케이션은 이러한 명명 패턴을 사용 하 여 충돌 하지 않도록 확인 해야 합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드 시나리오를 지원 합니다. 여기서는 <xref:System.Data.DataSet> 여러 개 포함 된 <xref:System.Data.DataTable> 개체 이름이 대/소문자만 다른 합니다. 이러한 상황에서는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 해당 테이블을 찾을 대/소문자 구분 비교를 수행 하 고 정확히 일치 하는 경우 새 테이블을 만듭니다. 다음 C# 코드는이 동작을 보여 줍니다.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 라고 하며 <xref:System.Data.DataSet> 하나만 포함 되어 <xref:System.Data.DataTable> 이름이 다른 경우에 의해서만 <xref:System.Data.DataTable> 업데이트 됩니다. 이 시나리오에서는 비교는 대/소문자 구분. 다음 C# 코드는이 동작을 보여 줍니다.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 사용할 수는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드를 여러 번에 동일한 <xref:System.Data.DataTable>입니다. 기본 키가 있는 경우 들어오는 행이 이미 존재 하는 일치 하는 행과 병합 됩니다. 들어오는 행에 추가 된 기본 키가 없으면는 <xref:System.Data.DataTable>합니다.  
  
 `SelectCommand` 가 OUTER JOIN의 결과를 반환하면 `DataAdapter` 는 결과 <xref:System.Data.DataTable.PrimaryKey%2A> 에 대해 <xref:System.Data.DataTable>값을 설정하지 않습니다. 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 [기본 키 정의](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)합니다.  
  
> [!NOTE]
>  구현의 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 고 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> .NET Framework 데이터 공급자는 결과 대해서만 첫 번째 스키마 정보를 검색 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">원본 테이블에 올바르지 않습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="startRecord" /> 매개 변수가 0 보다 작습니다.  
  
또는 
<paramref name="maxRecords" /> 매개 변수가 0 보다 작습니다.</exception>
        <block subset="none" type="overrides"><para>이 오버 로드는 <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> 메서드는 보호 되므로.NET Framework 데이터 공급자가 사용 하도록 설계 되었습니다.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="FillCommandBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Data.CommandBehavior FillCommandBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandBehavior FillCommandBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property FillCommandBehavior As CommandBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Data::CommandBehavior FillCommandBehavior { System::Data::CommandBehavior get(); void set(System::Data::CommandBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.FillCommandBehavior : System.Data.CommandBehavior with get, set" Usage="System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.CommandBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 어댑터를 채우는 데 사용 되는 명령의 동작을 가져오거나 설정 합니다.</summary>
        <value><see cref="T:System.Data.CommandBehavior" /> 데이터 어댑터를 채우는 데 명령입니다.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="FillError">
      <MemberSignature Language="C#" Value="public event System.Data.FillErrorEventHandler FillError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.FillErrorEventHandler FillError" />
      <MemberSignature Language="DocId" Value="E:System.Data.Common.DbDataAdapter.FillError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FillError As FillErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::FillErrorEventHandler ^ FillError;" />
      <MemberSignature Language="F#" Value="member this.FillError : System.Data.FillErrorEventHandler " Usage="member this.FillError : System.Data.FillErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DbDataAdapter_FillError")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.FillErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>채우기 작업 도중 오류가 발생 하는 경우 반환 됩니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>추가 <see cref="T:System.Data.DataTable" /> 에 <see cref="T:System.Data.DataSet" /> 데이터 소스의 일치 하도록 스키마를 구성 합니다.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">스키마를 삽입할 <see cref="T:System.Data.DataSet" />입니다.</param>
        <param name="schemaType">스키마를 삽입할 방법을 지정하는 <see cref="T:System.Data.SchemaType" /> 값 중 하나입니다.</param>
        <summary>지정된 <see cref="T:System.Data.DataSet" />에 "Table"이라는 <see cref="T:System.Data.DataTable" />을 추가하고 지정된 <see cref="T:System.Data.SchemaType" />에 따라 데이터 원본의 스키마와 일치하도록 스키마를 구성합니다.</summary>
        <returns><see cref="T:System.Data.DataSet" />에 추가된 <see cref="T:System.Data.DataTable" /> 개체의 컬렉션에 대한 참조입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 데이터 원본에서 스키마 정보를 검색 하는이 메서드는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>합니다.  
  
 A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 작업 추가 <xref:System.Data.DataTable> 대상 <xref:System.Data.DataSet>합니다. 그런 다음 열을 추가 합니다 <xref:System.Data.DataColumnCollection> 의 합니다 <xref:System.Data.DataTable>, 하 고 다음 구성 <xref:System.Data.DataColumn> 데이터 원본에 존재 하는 경우 속성:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. 설정 해야 합니다 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 고 <xref:System.Data.DataColumn.AutoIncrementSeed%2A> 개별적으로 합니다.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 또한 구성 합니다 <xref:System.Data.DataTable.PrimaryKey%2A> 고 <xref:System.Data.DataTable.Constraints%2A> 다음 규칙에 따라 속성:  
  
-   하나 이상의 기본 키 열에서 반환 되는 경우는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>에 대 한 기본 키 열으로 사용할는 <xref:System.Data.DataTable>합니다.  
  
-   기본 키 열이 없으면 반환 됩니다. 고유한 열은 하지만 모든 고유한 열이 null이 아닌 경우에 고유 열 기본 키로 사용 됩니다. 열이 null을 허용 하는 경우는 <xref:System.Data.UniqueConstraint> 에 추가 됩니다는 <xref:System.Data.ConstraintCollection>, 하지만 <xref:System.Data.DataTable.PrimaryKey%2A> 속성이 설정 되지 않은 합니다.  
  
-   기본 키 열에 대 한 기본 키 열으로 사용 된 기본 키 열 및 고유 열을 모두 반환 되는 경우는 <xref:System.Data.DataTable>합니다.  
  
 기본 키 및 unique 제약 조건에 추가 됩니다는 <xref:System.Data.ConstraintCollection> 선행 규칙에 있지만 다른 제약 조건에 따라 유형이 추가 되지 않습니다.  
  
 고유한 클러스터형 SQL Server 테이블에서 열 또는 열에 인덱스가 정의 되 고 클러스터형된 인덱스의 열 이름을 반환 됩니다 primary key 제약 별도 열 집합에 정의 됩니다. 기본 키 열의 이름을 반환할 기본 키 인덱스의 이름을 지정 하는 SELECT 문을 사용 하 여 쿼리 힌트를 사용 합니다. 쿼리 힌트를 지정 하는 방법에 대 한 자세한 내용은 참조 하십시오 [쿼리 힌트 (Transact SQL)](https://msdn.microsoft.com/library/ms181714.aspx)합니다.  
  
 중 기본 키 정보는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 를 찾고 키 열과 일치 하는 모든 행을 대체 합니다. 원하는 동작이 없는 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 스키마 정보를 요청 하지 않고 있습니다.  
  
 경우는 <xref:System.Data.IDataAdapter> 에서 중복 열을 채우는 동안는 <xref:System.Data.DataTable>, 패턴을 사용 하 여 후속 열에 대 한 이름을 생성 "*columnname*1", "*columnname*2", "*columnname*3", 및 등입니다. 놓 이기는 들어오는 데이터에 명명 되지 않은 열을 포함 하는 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다. 여러 결과 집합에 추가 될 때를 <xref:System.Data.DataSet> 각 결과 집합을 별도 테이블에 배치 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예를 들어, "Table", "Table1", "Table2", 및 등입니다.)를 정수 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하 여 애플리케이션은 이러한 명명 패턴을 사용 하 여 충돌 하지 않도록 확인 해야 합니다.  
  
 <xref:System.Data.IDbConnection> 선택 명령과 사용 하 여 연결 된 개체는 유효 해야 합니다. 하지만 열 필요는 없습니다. 경우는 <xref:System.Data.IDbConnection> 닫은 후 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 는 데이터를 검색 하려면을 열고 다음 닫는 하는를 호출 합니다. 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 은 호출 하는 열려 있습니다.  
  
> [!NOTE]
>  구현의 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한 합니다. 사용 하 여 여러 결과 대 한 스키마 정보를 검색할 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 사용 하 여는 <xref:System.Data.MissingSchemaAction> 로 `AddWithKey`합니다.  
  
 사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>,.NET Framework Data Provider for SQL Server를 실행 중인 문에 FOR BROWSE 절을 추가 합니다. 사용자는 SET FMTONLY ON 문 사용 하의 잠재적인 부작용을 알고 있어야 합니다. 자세한 내용은 [SET FMTONLY(Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)를 참조하세요.
  
   
  
## Examples  
 다음 예제에서는 파생된 클래스 <xref:System.Data.SqlClient.SqlDataAdapter>를 입력 하는 <xref:System.Data.DataSet> 반환 고 스키마를 사용 하 여를 <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataTable">데이터 원본의 스키마로 채울 <see cref="T:System.Data.DataTable" />입니다.</param>
        <param name="schemaType"><see cref="T:System.Data.SchemaType" /> 값 중 하나입니다.</param>
        <summary>지정된 <see cref="T:System.Data.SchemaType" />을 기반으로 하여 지정된 <see cref="T:System.Data.DataTable" />의 스키마를 구성합니다.</summary>
        <returns>데이터 원본에서 반환된 스키마 정보를 포함하는 <see cref="T:System.Data.DataTable" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 사용 하 여 데이터 원본에서 스키마를 검색 하는 메서드는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>합니다. 와 연결 된 연결 개체는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 유효 해야 하지만 열려 있이 필요는 없습니다. 전에 연결이 닫히면 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 는 데이터를 검색 하려면을 열고 다음 닫는 하는를 호출 합니다. 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 는 호출을 열린 상태로 유지 합니다.  
  
 A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 작업이 반환 된 <xref:System.Data.DataTable>합니다. 그런 다음 열을 추가 합니다 <xref:System.Data.DataColumnCollection> 의 합니다 <xref:System.Data.DataTable>, 하 고 다음 구성 <xref:System.Data.DataColumn> 데이터 원본에 존재 하는 경우 속성:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. 설정 해야 합니다 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 고 <xref:System.Data.DataColumn.AutoIncrementSeed%2A> 개별적으로 합니다.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 또한 구성 합니다 <xref:System.Data.DataTable.PrimaryKey%2A> 고 <xref:System.Data.DataTable.Constraints%2A> 다음 규칙에 따라 속성:  
  
-   경우는 <xref:System.Data.DataTable.PrimaryKey%2A> 에 대해 이미 정의 `DataTable`, 또는 `DataTable` 데이터를 포함 합니다 `PrimaryKey` 속성이 설정 되지 것입니다.  
  
-   하나 이상의 기본 키 열에서 반환 되는 경우는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>에 대 한 기본 키 열으로 사용할는 `DataTable`합니다.  
  
-   기본 키 열이 없으면 반환 됩니다. 고유한 열은 하지만 모든 고유한 열이 null이 아닌 경우에 고유 열 기본 키로 사용 됩니다. 열이 null을 허용 하는 경우는 <xref:System.Data.UniqueConstraint> 에 추가 됩니다는 <xref:System.Data.ConstraintCollection>, 하지만 `PrimaryKey` 속성이 설정 되지 않은 합니다.  
  
-   기본 키 열에 대 한 기본 키 열으로 사용 된 기본 키 열 및 고유 열을 모두 반환 되는 경우는 `DataTable`합니다.  
  
 기본 키 및 unique 제약 조건에 추가 됩니다는 <xref:System.Data.ConstraintCollection> 선행 규칙에 있지만 다른 제약 조건에 따라 유형이 추가 되지 않습니다. 이 프로세스 서버에 여러 번 왕복 해야 할 수 있습니다.  
  
 고유한 클러스터형 SQL Server 테이블에서 열 또는 열에 인덱스가 정의 되 고 클러스터형된 인덱스의 열 이름을 반환 됩니다 primary key 제약 별도 열 집합에 정의 됩니다. 기본 키 열의 이름을 반환할 기본 키 인덱스의 이름을 지정 하는 SELECT 문을 사용 하 여 쿼리 힌트를 사용 합니다. 쿼리 힌트를 지정 하는 방법에 대 한 자세한 내용은 참조 하십시오 [쿼리 힌트 (Transact SQL)](https://msdn.microsoft.com/library/ms181714.aspx)합니다.  
  
 경우는 <xref:System.Data.Common.DbDataAdapter> 에서 중복 열을 채우는 동안는 <xref:System.Data.DataTable>, 패턴을 사용 하 여 후속 열에 대 한 이름을 생성 "*columnname*1", "*columnname*2", "*columnname*3", 및 등입니다. 놓 이기는 들어오는 데이터에 명명 되지 않은 열을 포함 하는 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다. 여러 결과 집합에 추가 될 때를 <xref:System.Data.DataSet> 각 결과 집합을 별도 테이블에 배치 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예를 들어, "Table", "Table1", "Table2", 및 등입니다.)를 정수 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하 여 애플리케이션은 이러한 명명 패턴을 사용 하 여 충돌 하지 않도록 확인 해야 합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 모든 행을 반환 하지 않습니다. 사용 된 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 에 행을 추가 하는 방법을 <xref:System.Data.DataTable>입니다.  
  
> [!NOTE]
>  구현의 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한 합니다. 사용 하 여 여러 결과 대 한 스키마 정보를 검색할 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 사용 하 여는 <xref:System.Data.MissingSchemaAction> 로 `AddWithKey`합니다.  
  
 사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>,.NET Framework Data Provider for SQL Server를 실행 중인 문에 FOR BROWSE 절을 추가 합니다. 사용자는 SET FMTONLY ON 문 사용 하의 잠재적인 부작용을 알고 있어야 합니다. 자세한 내용은 [SET FMTONLY(Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)를 참조하세요.
  
   
  
## Examples  
 다음 예제에서는 파생된 클래스 <xref:System.Data.SqlClient.SqlDataAdapter>를 입력 하는 <xref:System.Data.DataSet> 반환 고 스키마를 사용 하 여를 <xref:System.Data.DataTable>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * string -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">스키마를 삽입할 <see cref="T:System.Data.DataSet" />입니다.</param>
        <param name="schemaType">스키마를 삽입할 방법을 지정하는 <see cref="T:System.Data.SchemaType" /> 값 중 하나입니다.</param>
        <param name="srcTable">테이블 매핑에 사용할 원본 테이블의 이름입니다.</param>
        <summary>지정된 <see cref="T:System.Data.DataSet" />에 <see cref="T:System.Data.DataTable" />을 추가하고 지정된 <see cref="T:System.Data.SchemaType" /> 및 <see cref="T:System.Data.DataTable" />에 따라 데이터 원본의 스키마와 일치하도록 스키마를 구성합니다.</summary>
        <returns><see cref="T:System.Data.DataSet" />에 추가된 <see cref="T:System.Data.DataTable" /> 개체의 컬렉션에 대한 참조입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 데이터 원본에서 스키마 정보를 검색 하는이 메서드는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>합니다.  
  
 A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 작업 추가 <xref:System.Data.DataTable> 대상 <xref:System.Data.DataSet>합니다. 그런 다음 열을 추가 합니다 <xref:System.Data.DataColumnCollection> 의 합니다 <xref:System.Data.DataTable>, 하 고 다음 구성 <xref:System.Data.DataColumn> 데이터 원본에 존재 하는 경우 속성:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. 설정 해야 합니다 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 고 <xref:System.Data.DataColumn.AutoIncrementSeed%2A> 개별적으로 합니다.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 또한 구성 합니다 <xref:System.Data.DataTable.PrimaryKey%2A> 고 <xref:System.Data.DataTable.Constraints%2A> 다음 규칙에 따라 속성:  
  
-   하나 이상의 기본 키 열에서 반환 되는 경우는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>에 대 한 기본 키 열으로 사용할는 <xref:System.Data.DataTable>합니다.  
  
-   기본 키 열이 없으면 반환 됩니다. 고유한 열은 하지만 모든 고유한 열이 null이 아닌 경우에 고유 열 기본 키로 사용 됩니다. 열이 null을 허용 하는 경우는 <xref:System.Data.UniqueConstraint> 에 추가 됩니다는 <xref:System.Data.ConstraintCollection>, 하지만 <xref:System.Data.DataTable.PrimaryKey%2A> 속성이 설정 되지 않은 합니다.  
  
-   기본 키 열에 대 한 기본 키 열으로 사용 된 기본 키 열 및 고유 열을 모두 반환 되는 경우는 <xref:System.Data.DataTable>합니다.  
  
 기본 키 및 unique 제약 조건에 추가 됩니다는 <xref:System.Data.ConstraintCollection> 선행 규칙에 있지만 다른 제약 조건에 따라 유형이 추가 되지 않습니다.  
  
 고유한 클러스터형 SQL Server 테이블에서 열 또는 열에 인덱스가 정의 되 고 클러스터형된 인덱스의 열 이름을 반환 됩니다 primary key 제약 별도 열 집합에 정의 됩니다. 기본 키 열의 이름을 반환할 기본 키 인덱스의 이름을 지정 하는 SELECT 문을 사용 하 여 쿼리 힌트를 사용 합니다. 쿼리 힌트를 지정 하는 방법에 대 한 자세한 내용은 참조 하십시오 [쿼리 힌트 (Transact SQL)](https://msdn.microsoft.com/library/ms181714.aspx)합니다.  
  
 중 기본 키 정보는 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 를 찾고 키 열과 일치 하는 모든 행을 대체 합니다. 원하는 동작이 없는 경우 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 스키마 정보를 요청 하지 않고 있습니다.  
  
 경우는 <xref:System.Data.Common.DbDataAdapter> 에서 중복 열을 채우는 동안는 <xref:System.Data.DataTable>, 패턴을 사용 하 여 후속 열에 대 한 이름을 생성 "*columnname*1", "*columnname*2", "*columnname*3", 및 등입니다. 놓 이기는 들어오는 데이터에 명명 되지 않은 열을 포함 하는 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다. 여러 결과 집합에 추가 될 때를 <xref:System.Data.DataSet> 각 결과 집합을 별도 테이블에 배치 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예를 들어, "Table", "Table1", "Table2", 및 등입니다.)를 정수 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하 여 애플리케이션은 이러한 명명 패턴을 사용 하 여 충돌 하지 않도록 확인 해야 합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 메서드 시나리오를 지원 합니다. 여기서는 <xref:System.Data.DataSet> 여러 개 포함 된 <xref:System.Data.DataTable> 개체 이름이 대/소문자만 다른 합니다. 이러한 상황에서는 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 해당 테이블을 찾을 대/소문자 구분 비교를 수행 하 고 정확히 일치 하는 경우 새 테이블을 만듭니다. 다음 C# 코드는이 동작을 보여 줍니다.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 경우 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 라고 하며 <xref:System.Data.DataSet> 하나만 포함 되어 <xref:System.Data.DataTable> 이름이 다른 경우에 의해서만 <xref:System.Data.DataTable> 업데이트 됩니다. 이 시나리오에서는 비교는 대/소문자 구분. 다음 C# 코드는이 동작을 보여 줍니다.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.IDbConnection> 선택 명령과 사용 하 여 연결 된 개체는 유효 해야 합니다. 하지만 열 필요는 없습니다. 경우는 <xref:System.Data.IDbConnection> 닫은 후 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 는 데이터를 검색 하려면을 열고 다음 닫는 하는를 호출 합니다. 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 은 호출 하는 열려 있습니다.  
  
> [!NOTE]
>  구현의 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한 합니다. 사용 하 여 여러 결과 대 한 스키마 정보를 검색할 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 사용 하 여는 <xref:System.Data.MissingSchemaAction> 로 `AddWithKey`합니다.  
  
 사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>,.NET Framework Data Provider for SQL Server를 실행 중인 문에 FOR BROWSE 절을 추가 합니다. 사용자는 SET FMTONLY ON 문 사용 하의 잠재적인 부작용을 알고 있어야 합니다. 자세한 내용은 [SET FMTONLY(Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)를 참조하세요.
  
   
  
## Examples  
 다음 예제에서는 파생된 클래스 <xref:System.Data.SqlClient.SqlDataAdapter>를 입력 하는 <xref:System.Data.DataSet> 반환 고 스키마를 사용 하 여를 <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">스키마를 가져올 원본 테이블이 없는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">데이터 원본의 스키마로 채울 <see cref="T:System.Data.DataTable" />입니다.</param>
        <param name="schemaType"><see cref="T:System.Data.SchemaType" /> 값 중 하나입니다.</param>
        <param name="command">데이터 원본에서 행을 검색 하는 데 SQL SELECT 문입니다.</param>
        <param name="behavior"><see cref="T:System.Data.CommandBehavior" /> 값 중 하나입니다.</param>
        <summary>지정 된 스키마를 구성 <see cref="T:System.Data.DataTable" /> 지정한 <see cref="T:System.Data.SchemaType" />, 명령 문자열 및 <see cref="T:System.Data.CommandBehavior" /> 값입니다.</summary>
        <returns><see cref="T:System.Data.DataTable" /> 데이터 원본에서 스키마 정보를 포함 하는 개체를 반환 합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 사용 하 여 데이터 원본에서 스키마를 검색 하는 메서드는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>합니다. 와 연결 된 연결 개체는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 유효 해야 하지만 열려 있이 필요는 없습니다. 전에 연결이 닫히면 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 는 데이터를 검색 하려면을 열고 다음 닫는 하는를 호출 합니다. 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 는 호출을 열린 상태로 유지 합니다.  
  
 A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 작업 추가 <xref:System.Data.DataTable> 대상 <xref:System.Data.DataSet>합니다. 그런 다음 열을 추가 합니다 <xref:System.Data.DataColumnCollection> 의 합니다 <xref:System.Data.DataTable>, 하 고 다음 구성 <xref:System.Data.DataColumn> 데이터 원본에 존재 하는 경우 속성:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. 설정 해야 합니다 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 고 <xref:System.Data.DataColumn.AutoIncrementSeed%2A> 개별적으로 합니다.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 또한 구성 합니다 <xref:System.Data.DataTable.PrimaryKey%2A> 고 <xref:System.Data.DataTable.Constraints%2A> 다음 규칙에 따라 속성:  
  
-   하나 이상의 기본 키 열에서 반환 되는 경우는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>에 대 한 기본 키 열으로 사용할는 <xref:System.Data.DataTable>합니다.  
  
-   기본 키 열이 없으면 반환 됩니다. 고유한 열은 하지만 모든 고유한 열이 null이 아닌 경우에 고유 열 기본 키로 사용 됩니다. 열이 null을 허용 하는 경우는 <xref:System.Data.UniqueConstraint> 에 추가 됩니다는 <xref:System.Data.ConstraintCollection>, 하지만 <xref:System.Data.DataTable.PrimaryKey%2A> 속성이 설정 되지 않은 합니다.  
  
-   기본 키 열에 대 한 기본 키 열으로 사용 된 기본 키 열 및 고유 열을 모두 반환 되는 경우는 <xref:System.Data.DataTable>합니다.  
  
 기본 키 및 unique 제약 조건에 추가 됩니다는 <xref:System.Data.ConstraintCollection> 선행 규칙에 있지만 다른 제약 조건에 따라 유형이 추가 되지 않습니다.  
  
 고유한 클러스터형 SQL Server 테이블에서 열 또는 열에 인덱스가 정의 되 고 클러스터형된 인덱스의 열 이름을 반환 됩니다 primary key 제약 별도 열 집합에 정의 됩니다. 기본 키 열의 이름을 반환할 기본 키 인덱스의 이름을 지정 하는 SELECT 문을 사용 하 여 쿼리 힌트를 사용 합니다. 쿼리 힌트를 지정 하는 방법에 대 한 자세한 내용은 참조 하십시오 [쿼리 힌트 (Transact SQL)](https://msdn.microsoft.com/library/ms181714.aspx)합니다.  
  
 경우는 <xref:System.Data.IDataAdapter> 에서 중복 열을 채우는 동안는 <xref:System.Data.DataTable>, 패턴을 사용 하 여 후속 열에 대 한 이름을 생성 "*columnname*1", "*columnname*2", "*columnname*3", 및 등입니다. 놓 이기는 들어오는 데이터에 명명 되지 않은 열을 포함 하는 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다. 여러 결과 집합에 추가 될 때를 <xref:System.Data.DataSet> 각 결과 집합을 별도 테이블에 배치 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예를 들어, "Table", "Table1", "Table2", 및 등입니다.)를 정수 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하 여 애플리케이션은 이러한 명명 패턴을 사용 하 여 충돌 하지 않도록 확인 해야 합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 모든 행을 반환 하지 않습니다. 사용 된 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 에 행을 추가 하는 방법을 <xref:System.Data.DataTable>입니다.  
  
> [!NOTE]
>  구현의 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한 합니다. 사용 하 여 여러 결과 대 한 스키마 정보를 검색할 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 사용 하 여는 <xref:System.Data.MissingSchemaAction> 로 `AddWithKey`합니다.  
  
 사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>,.NET Framework Data Provider for SQL Server를 실행 중인 문에 FOR BROWSE 절을 추가 합니다. 사용자는 SET FMTONLY ON 문 사용 하의 잠재적인 부작용을 알고 있어야 합니다. 자세한 내용은 [SET FMTONLY(Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)를 참조하세요.
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>이 구현 된 <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> 메서드는 보호 되므로.NET Framework 데이터 공급자가 사용 하도록 설계 되었습니다.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, string srcTable, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::String ^ srcTable, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * System.Data.IDbCommand * string * System.Data.CommandBehavior -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, command, srcTable, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">데이터 원본의 스키마로 채울 <see cref="T:System.Data.DataSet" />입니다.</param>
        <param name="schemaType"><see cref="T:System.Data.SchemaType" /> 값 중 하나입니다.</param>
        <param name="command">데이터 원본에서 행을 검색 하는 데 SQL SELECT 문입니다.</param>
        <param name="srcTable">테이블 매핑에 사용할 원본 테이블의 이름입니다.</param>
        <param name="behavior"><see cref="T:System.Data.CommandBehavior" /> 값 중 하나입니다.</param>
        <summary>추가 된 <see cref="T:System.Data.DataTable" /> 지정 된 <see cref="T:System.Data.DataSet" /> 데이터 원본의 기반으로 지정 하는 일치 하도록 스키마를 구성 하 고 <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>배열을 <see cref="T:System.Data.DataTable" /> 데이터 원본에서 스키마 정보를 포함 하는 개체를 반환 합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 사용 하 여 데이터 원본에서 스키마를 검색 하는 메서드는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>합니다. 와 연결 된 연결 개체는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 유효 해야 하지만 열려 있이 필요는 없습니다. 전에 연결이 닫히면 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 는 데이터를 검색 하려면을 열고 다음 닫는 하는를 호출 합니다. 연결 하기 전에 열려 있으면 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 는 호출을 열린 상태로 유지 합니다.  
  
 A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 작업 추가 <xref:System.Data.DataTable> 대상 <xref:System.Data.DataSet>합니다. 그런 다음 열을 추가 합니다 <xref:System.Data.DataColumnCollection> 의 합니다 <xref:System.Data.DataTable>, 하 고 다음 구성 <xref:System.Data.DataColumn> 데이터 원본에 존재 하는 경우 속성:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. 설정 해야 합니다 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 고 <xref:System.Data.DataColumn.AutoIncrementSeed%2A> 개별적으로 합니다.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 또한 구성 합니다 <xref:System.Data.DataTable.PrimaryKey%2A> 고 <xref:System.Data.DataTable.Constraints%2A> 다음 규칙에 따라 속성:  
  
-   하나 이상의 기본 키 열에서 반환 되는 경우는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>에 대 한 기본 키 열으로 사용할는 <xref:System.Data.DataTable>합니다.  
  
-   기본 키 열이 없으면 반환 됩니다. 고유한 열은 하지만 모든 고유한 열이 null이 아닌 경우에 고유 열 기본 키로 사용 됩니다. 열이 null을 허용 하는 경우는 <xref:System.Data.UniqueConstraint> 에 추가 됩니다는 <xref:System.Data.ConstraintCollection>, 하지만 <xref:System.Data.DataTable.PrimaryKey%2A> 속성이 설정 되지 않은 합니다.  
  
-   기본 키 열에 대 한 기본 키 열으로 사용 된 기본 키 열 및 고유 열을 모두 반환 되는 경우는 <xref:System.Data.DataTable>합니다.  
  
 기본 키 및 unique 제약 조건에 추가 됩니다는 <xref:System.Data.ConstraintCollection> 선행 규칙에 있지만 다른 제약 조건에 따라 유형이 추가 되지 않습니다.  
  
 고유한 클러스터형 SQL Server 테이블에서 열 또는 열에 인덱스가 정의 되 고 클러스터형된 인덱스의 열 이름을 반환 됩니다 primary key 제약 별도 열 집합에 정의 됩니다. 기본 키 열의 이름을 반환할 기본 키 인덱스의 이름을 지정 하는 SELECT 문을 사용 하 여 쿼리 힌트를 사용 합니다. 쿼리 힌트를 지정 하는 방법에 대 한 자세한 내용은 참조 하십시오 [쿼리 힌트 (Transact SQL)](https://msdn.microsoft.com/library/ms181714.aspx)합니다.  
  
 경우는 <xref:System.Data.IDataAdapter> 에서 중복 열을 채우는 동안는 <xref:System.Data.DataTable>, 패턴을 사용 하 여 후속 열에 대 한 이름을 생성 "*columnname*1", "*columnname*2", "*columnname*3", 및 등입니다. 놓 이기는 들어오는 데이터에 명명 되지 않은 열을 포함 하는 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다. 여러 결과 집합에 추가 될 때를 <xref:System.Data.DataSet> 각 결과 집합을 별도 테이블에 배치 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예를 들어, "Table", "Table1", "Table2", 및 등입니다.)를 정수 값을 추가 하 여 이름이 지정 됩니다. 열 및 테이블 이름을 사용 하 여 애플리케이션은 이러한 명명 패턴을 사용 하 여 충돌 하지 않도록 확인 해야 합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 메서드 시나리오를 지원 합니다. 여기서는 <xref:System.Data.DataSet> 여러 개 포함 된 <xref:System.Data.DataTable> 개체 이름이 대/소문자만 다른 합니다. 이러한 상황에서는 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 해당 테이블을 찾을 대/소문자 구분 비교를 수행 하 고 정확히 일치 하는 경우 새 테이블을 만듭니다. 다음 C# 코드는이 동작을 보여 줍니다.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 경우 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 라고 하며 <xref:System.Data.DataSet> 하나만 포함 되어 <xref:System.Data.DataTable> 이름이 다른 경우에 의해서만 <xref:System.Data.DataTable> 업데이트 됩니다. 이 시나리오에서는 비교는 대/소문자 구분. 다음 C# 코드는이 동작을 보여 줍니다.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 모든 행을 반환 하지 않습니다. 사용 된 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 에 행을 추가 하는 방법을 <xref:System.Data.DataTable>입니다.  
  
> [!NOTE]
>  구현의 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> 첫 번째 결과 대 한 스키마 정보를 검색 하는.NET Framework Data Provider for OLE DB에 대 한 합니다. 사용 하 여 여러 결과 대 한 스키마 정보를 검색할 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 사용 하 여는 <xref:System.Data.MissingSchemaAction> 로 `AddWithKey`합니다.  
  
 사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>,.NET Framework Data Provider for SQL Server를 실행 중인 문에 FOR BROWSE 절을 추가 합니다. 사용자는 SET FMTONLY ON 문 사용 하의 잠재적인 부작용을 알고 있어야 합니다. 자세한 내용은 [SET FMTONLY(Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql)를 참조하세요.
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>이 구현 된 <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> 메서드는 보호 되므로.NET Framework 데이터 공급자가 사용 하도록 설계 되었습니다.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedParameter">
      <MemberSignature Language="C#" Value="protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.IDataParameter GetBatchedParameter(int32 commandIdentifier, int32 parameterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedParameter (commandIdentifier As Integer, parameterIndex As Integer) As IDataParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::IDataParameter ^ GetBatchedParameter(int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedParameter : int * int -&gt; System.Data.IDataParameter&#xA;override this.GetBatchedParameter : int * int -&gt; System.Data.IDataParameter" Usage="dbDataAdapter.GetBatchedParameter (commandIdentifier, parameterIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameterIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">매개 변수에서 검색할 명령의 인덱스입니다.</param>
        <param name="parameterIndex">명령에 매개 변수의 인덱스입니다.</param>
        <summary>반환 된 <see cref="T:System.Data.IDataParameter" /> 에서 현재 일괄 처리에서 명령 중 하나입니다.</summary>
        <returns><see cref="T:System.Data.IDataParameter" /> 지정 합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter>,이 메서드는 throw <xref:System.NotSupportedException>합니다. 상속한 클래스 <xref:System.Data.Common.DbDataAdapter> 일괄 처리에 대 한 지원을 제공 하려면이 메서드를 재정의 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">어댑터는 일괄 처리를 지원 하지 않습니다.</exception>
        <block subset="none" type="overrides"><para>이 메서드는 보호 되 고.NET Framework 데이터 공급자가 사용 하도록 설계 되었습니다.  
  
클래스에서 상속 되는 경우 <see cref="T:System.Data.Common.DbDataAdapter" /> 클래스 사용자가 일괄 처리를 실행 하도록 허용 하려면이 메서드를 재정의 하는 일괄 처리를 지원 합니다. 구현을 사용 하는 <paramref name="commandIdentifier" /> 요청된 된 명령을 찾습니다 제공을 사용 하 여는 <paramref name="parameterIndex" /> 요청 된 매개 변수를 찾으려는 제공 합니다. 예를 들어, 한 <paramref name="commandIdentifier" /> 0 및 <paramref name="parameterIndex" /> 0에서 일괄 처리의 첫 번째 명령은 첫 번째 매개 변수를 반환 합니다.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedRecordsAffected">
      <MemberSignature Language="C#" Value="protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetBatchedRecordsAffected(int32 commandIdentifier, [out] int32&amp; recordsAffected, [out] class System.Exception&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedRecordsAffected (commandIdentifier As Integer, ByRef recordsAffected As Integer, ByRef error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GetBatchedRecordsAffected(int commandIdentifier, [Runtime::InteropServices::Out] int % recordsAffected, [Runtime::InteropServices::Out] Exception ^ % error);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedRecordsAffected : int *  *  -&gt; bool&#xA;override this.GetBatchedRecordsAffected : int *  *  -&gt; bool" Usage="dbDataAdapter.GetBatchedRecordsAffected (commandIdentifier, recordsAffected, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="recordsAffected" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="error" Type="System.Exception" RefType="out" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">일괄 처리 내의 개별 명령의 0부터 시작 하는 열 서 수입니다.</param>
        <param name="recordsAffected">지정된 된 명령 일괄 처리 내 데이터 저장소에 영향을 받는 행의 수입니다.</param>
        <param name="error"><see cref="T:System.Exception" /> 지정 된 명령 실행 하는 동안 발생 합니다. 반환 <see langword="null" /> (<see langword="Nothing" /> Visual basic에서) 예외가 throw 됩니다.</param>
        <summary>더 큰 일괄 처리 업데이트 내에서 개별 업데이트 시도 대 한 정보를 반환합니다.</summary>
        <returns>더 큰 일괄 처리 업데이트 내에서 개별 업데이트 시도 대 한 정보를 제공 합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일괄 처리 업데이트 논리를 지 원하는 데이터 공급자에는 일련의 가상 메서드를 재정의 해야 합니다는 <xref:System.Data.Common.DbDataAdapter> 클래스입니다. `GetBatchedRecordsAffected` 이러한 가상 메서드 중 하나를 나타냅니다. 합니다 `DbDataAdapter` 클래스가 의존 `GetBatchedRecordsAffected` 해당 표시 일괄 처리 내의 개별 업데이트 시도의 성공 여부를 확인 하려면 <xref:System.Data.DataRow> 적절 하 게 합니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public override System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="override this.GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="dbDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.GetFillParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>SQL SELECT 문을 실행할 때 사용자가 설정한 매개 변수를 가져옵니다.</summary>
        <returns>배열을 <see cref="T:System.Data.IDataParameter" /> 사용자가 설정한 매개 변수를 포함 하는 개체입니다.</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeBatching">
      <MemberSignature Language="C#" Value="protected virtual void InitializeBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.InitializeBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeBatching();" />
      <MemberSignature Language="F#" Value="abstract member InitializeBatching : unit -&gt; unit&#xA;override this.InitializeBatching : unit -&gt; unit" Usage="dbDataAdapter.InitializeBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>일괄 처리를 초기화 합니다 <see cref="T:System.Data.Common.DbDataAdapter" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter>,이 메서드는 throw <xref:System.NotSupportedException>합니다. 상속한 클래스 <xref:System.Data.Common.DbDataAdapter> 일괄 처리에 대 한 지원을 제공 하려면이 메서드를 재정의 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">어댑터는 일괄 처리를 지원 하지 않습니다.</exception>
        <block subset="none" type="overrides"><para>이 메서드는 보호 되 고.NET Framework 데이터 공급자가 사용 하도록 설계 되었습니다.  
  
클래스에서 상속 되는 경우 <see cref="T:System.Data.Common.DbDataAdapter" /> 클래스를이 메서드를 재정의 하는 일괄 처리를 지원 합니다. 이 메서드는 일괄 처리를 지 원하는 데 필요한 모든 리소스를 초기화할 수 있도록 클래스를 제공 합니다. 예를 들어, 클래스는 명령 집합을 일괄 처리에서 보유 하는 데이터 구조를 할당할 수 있습니다.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ InsertCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 원본에 새 레코드를 삽입 하는 데 사용 하는 명령을 가져오거나 설정 합니다.</summary>
        <value>A <see cref="T:System.Data.IDbCommand" /> 하는 동안 사용 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 데이터 집합에 새 행에 대 한 데이터 원본에서 레코드를 삽입 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하는 동안 <xref:System.Data.Common.DbDataAdapter.Update%2A>이면이 속성은 설정 되지 않으며 기본 키 정보에 있으면 합니다 <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.InsertCommand%2A> 자동으로 생성 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 파생된 클래스 <xref:System.Data.OleDb.OleDbDataAdapter> 속성 중 일부를 설정 합니다.  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">데이터 조작(ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="OnFillError">
      <MemberSignature Language="C#" Value="protected virtual void OnFillError (System.Data.FillErrorEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFillError(class System.Data.FillErrorEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnFillError(System.Data.FillErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFillError (value As FillErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFillError(System::Data::FillErrorEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnFillError : System.Data.FillErrorEventArgs -&gt; unit&#xA;override this.OnFillError : System.Data.FillErrorEventArgs -&gt; unit" Usage="dbDataAdapter.OnFillError value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.FillErrorEventArgs" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="value">이벤트 데이터입니다.</param>
        <summary><see cref="E:System.Data.Common.DataAdapter.FillError" /> 이벤트를 발생시킵니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdated (value As RowUpdatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit&#xA;override this.OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdated value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">이벤트 데이터를 포함하는 <see cref="T:System.Data.Common.RowUpdatedEventArgs" />입니다.</param>
        <summary>발생 된 <see langword="RowUpdated" /> .NET Framework 데이터 공급자의 이벤트입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 개요를 보려면 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>재정의 하는 경우 <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> 메서드.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdating (value As RowUpdatingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit&#xA;override this.OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdating value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">이벤트 데이터를 포함하는 <see cref="T:System.Data.Common.RowUpdatingEventArgs" />입니다.</param>
        <summary>발생 된 <see langword="RowUpdating" /> .NET Framework 데이터 공급자의 이벤트입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 개요를 보려면 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>재정의 하는 경우 <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> 메서드.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ SelectCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 원본에서 레코드를 선택 하는 데 사용 하는 명령을 가져오거나 설정 합니다.</summary>
        <value>A <see cref="T:System.Data.IDbCommand" /> 하는 동안 사용 되는 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 데이터 집합에 배치 하기 위해 데이터 원본에서 레코드를 선택 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 파생된 클래스 <xref:System.Data.OleDb.OleDbDataAdapter> 속성 중 일부를 설정 합니다.  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">데이터 조작(ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberSignature Language="VB.NET" Value=" Property DeleteCommand As IDbCommand Implements IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.DeleteCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 집합에서 레코드를 삭제 하는 것에 대 한 SQL 문을 가져오거나 설정 합니다.</summary>
        <value><see cref="T:System.Data.IDbCommand" /> 중에 사용 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 데이터 집합의 삭제 된 행에 대 한 데이터 원본에서 레코드를 삭제 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Data.Common.DbDataAdapter> 인스턴스가 <xref:System.Data.IDbDataAdapter> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 자세한 내용은 <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>을 참조하세요.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberSignature Language="VB.NET" Value=" Property InsertCommand As IDbCommand Implements IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.InsertCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 원본에 새 레코드를 삽입 하는 데 사용 되는 SQL 문을 가져오거나 설정 합니다.</summary>
        <value><see cref="T:System.Data.IDbCommand" /> 하는 동안 사용 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 데이터 집합에 새 행에 대 한 데이터 원본에서 레코드를 삽입 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Data.Common.DbDataAdapter> 인스턴스가 <xref:System.Data.IDbDataAdapter> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 자세한 내용은 <xref:System.Data.IDbDataAdapter.InsertCommand%2A>을 참조하세요.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberSignature Language="VB.NET" Value=" Property SelectCommand As IDbCommand Implements IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.SelectCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 원본에서 레코드를 선택 하는 데 사용 하는 SQL 문을 가져오거나 설정 합니다.</summary>
        <value><see cref="T:System.Data.IDbCommand" /> 하는 동안 사용 되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 데이터 집합에 배치 하기 위해 데이터 원본에서 레코드를 선택 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Data.Common.DbDataAdapter> 인스턴스가 <xref:System.Data.IDbDataAdapter> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 자세한 내용은 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>을 참조하세요.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberSignature Language="VB.NET" Value=" Property UpdateCommand As IDbCommand Implements IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.UpdateCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 원본에서 레코드를 업데이트 하는 데 사용 하는 SQL 문을 가져오거나 설정 합니다.</summary>
        <value><see cref="T:System.Data.IDbCommand" /> 하는 동안 사용 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 데이터 집합의 수정 된 행에 대 한 데이터 원본에서 레코드를 업데이트 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Data.Common.DbDataAdapter> 인스턴스가 <xref:System.Data.IDbDataAdapter> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 자세한 내용은 <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>을 참조하세요.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("use 'protected DbDataAdapter(DbDataAdapter)' ctor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 인스턴스의 복사본인 새 개체를 만듭니다.</summary>
        <returns>이 인스턴스의 복사본인 새 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Data.Common.DbDataAdapter> 인스턴스가 <xref:System.ICloneable> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 자세한 내용은 <xref:System.ICloneable.Clone%2A?displayProperty=nameWithType>을 참조하세요.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="TerminateBatching">
      <MemberSignature Language="C#" Value="protected virtual void TerminateBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TerminateBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.TerminateBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TerminateBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TerminateBatching();" />
      <MemberSignature Language="F#" Value="abstract member TerminateBatching : unit -&gt; unit&#xA;override this.TerminateBatching : unit -&gt; unit" Usage="dbDataAdapter.TerminateBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>일괄 처리를 종료 합니다 <see cref="T:System.Data.Common.DbDataAdapter" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Common.DbDataAdapter>,이 메서드는 throw <xref:System.NotSupportedException>합니다. 상속한 클래스 <xref:System.Data.Common.DbDataAdapter> 일괄 처리에 대 한 지원을 제공 하려면이 메서드를 재정의 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">어댑터는 일괄 처리를 지원 하지 않습니다.</exception>
        <block subset="none" type="overrides"><para>이 메서드는 보호 되 고.NET Framework 데이터 공급자가 사용 하도록 설계 되었습니다.  
  
클래스에서 상속 되는 경우 <see cref="T:System.Data.Common.DbDataAdapter" /> 클래스를이 메서드를 재정의 하는 일괄 처리를 지원 합니다. 이 메서드를 통해 클래스의 일괄 처리를 지원 하기 위해 할당 된 모든 리소스를 삭제할 수 있습니다. 예를 들어, 클래스 명령 일괄 처리에서 보유 하는 데이터 구조 할당을 취소 될 수 있습니다.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Update">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>삽입, 업데이트 또는 삭제에 대 한 행 각각에 대 한 INSERT, UPDATE 또는 DELETE 문을 각각 실행 하 여 데이터베이스의 값을 업데이트 합니다 <see cref="T:System.Data.DataSet" />합니다.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataRow[] dataRows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataRow[] dataRows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataRows As DataRow()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] -&gt; int" Usage="dbDataAdapter.Update dataRows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="dataRows">배열을 <see cref="T:System.Data.DataRow" /> 개체 데이터 소스를 업데이트 하는 데 사용 합니다.</param>
        <summary>삽입, 업데이트 또는 삭제할 행에서 지정 된 배열의 각에 대 한 INSERT, UPDATE 또는 DELETE 문을 각각 실행 하 여 데이터베이스의 값을 업데이트 합니다 <see cref="T:System.Data.DataSet" />합니다.</summary>
        <returns>성공적으로 업데이트 된 행의 수는 <see cref="T:System.Data.DataSet" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 애플리케이션 호출 하는 경우는 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드를 <xref:System.Data.Common.DbDataAdapter> 검사를 <xref:System.Data.DataRow.RowState%2A> 속성 합니다 에서구성된인덱스순서에따라각행에대해반복적으로필요한INSERT,UPDATE또는DELETE문을실행하고<xref:System.Data.DataSet>. 예를 들어 <xref:System.Data.Common.DbDataAdapter.Update%2A> 뒤에 INSERT 문과 DELETE 문의 다른 인해의 행 순서는 DELETE 문을 실행할 수 있습니다는 <xref:System.Data.DataTable>합니다.  
  
 유의 해야 이러한 문은 일괄 처리 프로세스로 수행 되지 않습니다. 각 행은 개별적으로 업데이트 됩니다. 애플리케이션에서 호출할 수는 <xref:System.Data.DataSet.GetChanges%2A> 문 형식 (예: 업데이트 하기 전에 삽입)의 시퀀스를 제어 해야 할 경우에 합니다. 자세한 내용은 [Dataadapter 사용 하 여 데이터 원본 업데이트](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)합니다.  
  
 하는 경우 INSERT, UPDATE 또는 DELETE 문이 지정 되지 않았습니다는 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드 예외를 생성 합니다. 만들 수 있습니다는 <xref:System.Data.SqlClient.SqlCommandBuilder> 또는 <xref:System.Data.OleDb.OleDbCommandBuilder> 설정 하는 경우 단일 테이블 업데이트에 대 한 SQL 문을 자동으로 생성 하는 개체는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다. 설정 하지 않으면 추가적인 모든 SQL 문을에서 생성 된 후에 **CommandBuilder**합니다. 이 세대 논리에 키 열 정보가 필요 합니다 <xref:System.Data.DataSet>합니다. 자세한 내용은 참조 [commandbuilder를 사용 하를 사용 하 여 명령 생성](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드 업데이트를 수행 하기 전에 첫 번째 매핑의에 나열 된 테이블에서 행을 검색 합니다. 합니다 <xref:System.Data.Common.DbDataAdapter.Update%2A> 다음의 값을 사용 하 여 행을 새로 고치는 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> 속성입니다. 반환 되는 모든 추가 행은 무시 됩니다.  
  
 모든 데이터에 다시 로드 된 후는 <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 이벤트가 발생 하는 조정 된 검사할 수 있도록 <xref:System.Data.DataSet> 행 및 모든 출력 매개 변수는 명령으로 반환 합니다. 행을 성공적으로 업데이트 한 후 해당 행 변경 내용이 허용 됩니다.  
  
 사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Update%2A>, 실행 순서는 다음과 같습니다.  
  
1.  값을 <xref:System.Data.DataRow> 매개 변수 값으로 이동 됩니다.  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 이벤트가 발생합니다.  
  
3.  명령을 실행합니다.  
  
4.  명령으로 설정 되어 있으면 `FirstReturnedRecord`, 첫 번째 반환 결과에 위치한는 <xref:System.Data.DataRow>합니다.  
  
5.  에 배치 됩니다 출력 매개 변수가 있는 경우는 <xref:System.Data.DataRow>합니다.  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 이벤트가 발생합니다.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A>가 호출된 경우  
  
 와 연결 된 각 명령을 <xref:System.Data.Common.DbDataAdapter> 일반적으로 연결 된 매개 변수 컬렉션을 포함 합니다. 매개 변수를 통해 현재 행에 매핑되는 `SourceColumn` 및 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스입니다. `SourceColumn` 참조를 <xref:System.Data.DataTable> 열은는 <xref:System.Data.Common.DbDataAdapter> 현재 행에 대 한 매개 변수 값을 가져오기에 대 한 참조입니다.  
  
 `SourceColumn` 테이블 매핑을 적용 하려면 먼저 매핑되지 않은 열 이름으로 참조 합니다. 하는 경우 `SourceColumn` 참조를 존재 하지 않는 열에 수행 되는 동작에 따라 달라 집니다 다음 중 하나 <xref:System.Data.MissingMappingAction> 값입니다.  
  
|열거형 값|수행한 작업|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|원본 열 이름 및 테이블 이름을 사용 하 여는 <xref:System.Data.DataSet> 매핑이 있는 경우.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> 생성 됩니다. 매핑을 명시적으로 설정 하는 경우 입력된 매개 변수의 매핑이 없을 일반적으로 오류의 결과입니다.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> 생성 됩니다.|  
  
 합니다 `SourceColumn` 속성은 또한 출력에 대 한 값을 매핑할 사용 또는 입/출력 매개 변수를는 `DataSet`합니다. 존재 하지 않는 열을 참조 하는 경우 예외가 생성 됩니다.  
  
 합니다 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스 열 값의 원본, 현재 또는 제안 버전 사용 여부를 결정 합니다. 이 기능은 낙관적 동시성 위반을 검사 하는 UPDATE 문의 WHERE 절에 원래 값을 포함 하도록 자주 사용 됩니다.  
  
> [!NOTE]
>  행을 업데이트 하는 동안 오류가 발생 하는 경우 예외가 throw 되 고 업데이트의 실행이 중단 되었습니다. 오류가 발생 하는 경우 예외를 생성 하지 않고 업데이트 작업을 계속 하려면 설정 합니다 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 속성을 `true` 호출 하기 전에 <xref:System.Data.Common.DbDataAdapter.Update%2A>입니다. 내에서 행당 별로 오류에 응답할 수도 있습니다는 `RowUpdated` DataAdapter의 이벤트입니다. 내에서 예외를 생성 하지 않고 업데이트 작업을 계속 하려면를 `RowUpdated` 이벤트를 설정 합니다 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 의 속성을 <xref:System.Data.Common.RowUpdatedEventArgs> 를 <xref:System.Data.UpdateStatus.Continue>입니다.  
  
   
  
## Examples  
 다음 예제에서는 파생된 클래스 <xref:System.Data.OleDb.OleDbDataAdapter>데이터 소스를 업데이트 합니다.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" />가 잘못되었습니다.</exception>
        <exception cref="T:System.InvalidOperationException">원본 테이블에 올바르지 않습니다.</exception>
        <exception cref="T:System.SystemException">이상 <see cref="T:System.Data.DataRow" /> 업데이트 하기 위해 존재 합니다.  
  
또는 
이상 <see cref="T:System.Data.DataTable" /> 업데이트 하기 위해 존재 합니다.  
  
또는 
이상 <see cref="T:System.Data.DataSet" /> 원본으로 사용 하기 위해 존재 합니다.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">영향을 받는 0 개 레코드에서 INSERT, UPDATE 또는 DELETE 문을 실행 하려고가 했습니다.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">데이터 조작(ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Update(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see cref="T:System.Data.DataSet" /> 데이터 소스를 업데이트 하는 데 사용 합니다.</param>
        <summary>삽입, 업데이트 또는 지정 된 행을 삭제 각각에 대 한 INSERT, UPDATE 또는 DELETE 문을 각각 실행 하 여 데이터베이스의 값을 업데이트 <see cref="T:System.Data.DataSet" />합니다.</summary>
        <returns>성공적으로 업데이트 된 행의 수는 <see cref="T:System.Data.DataSet" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 애플리케이션 호출 하는 경우는 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드를 <xref:System.Data.Common.DbDataAdapter> 검사를 <xref:System.Data.DataRow.RowState%2A> 속성 합니다 에서구성된인덱스순서에따라각행에대해반복적으로필요한INSERT,UPDATE또는DELETE문을실행하고<xref:System.Data.DataSet>. 예를 들어 <xref:System.Data.Common.DbDataAdapter.Update%2A> 뒤에 INSERT 문과 DELETE 문의 다른 인해의 행 순서는 DELETE 문을 실행할 수 있습니다는 <xref:System.Data.DataTable>합니다.  
  
 유의 해야 이러한 문은 일괄 처리 프로세스로 수행 되지 않습니다. 각 행은 개별적으로 업데이트 됩니다. 애플리케이션에서 호출할 수는 <xref:System.Data.DataSet.GetChanges%2A> 문 형식 (예: 업데이트 하기 전에 삽입)의 시퀀스를 제어 해야 할 경우에 합니다. 자세한 내용은 [Dataadapter 사용 하 여 데이터 원본 업데이트](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)합니다.  
  
 하는 경우 INSERT, UPDATE 또는 DELETE 문이 지정 되지 않았습니다는 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드 예외를 생성 합니다. 만들 수 있습니다는 <xref:System.Data.SqlClient.SqlCommandBuilder> 또는 <xref:System.Data.OleDb.OleDbCommandBuilder> 설정 하는 경우 단일 테이블 업데이트에 대 한 SQL 문을 자동으로 생성 하는 개체는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다. 설정 하지 않으면 추가적인 모든 SQL 문을에서 생성 된 후에 **CommandBuilder**합니다. 이 세대 논리에 키 열 정보가 필요 합니다 <xref:System.Data.DataSet>합니다. 자세한 내용은 참조 [commandbuilder를 사용 하를 사용 하 여 명령 생성](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드 업데이트를 수행 하기 전에 첫 번째 매핑의에 나열 된 테이블에서 행을 검색 합니다. 합니다 <xref:System.Data.Common.DbDataAdapter.Update%2A> 다음의 값을 사용 하 여 행을 새로 고치는 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> 속성입니다. 반환 되는 모든 추가 행은 무시 됩니다.  
  
 모든 데이터에 다시 로드 된 후는 <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 이벤트가 발생 하는 조정 된 검사할 수 있도록 <xref:System.Data.DataSet> 행 및 모든 출력 매개 변수는 명령으로 반환 합니다. 행을 성공적으로 업데이트 한 후 해당 행 변경 내용이 허용 됩니다.  
  
 사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Update%2A>, 실행 순서는 다음과 같습니다.  
  
1.  값을 <xref:System.Data.DataRow> 매개 변수 값으로 이동 됩니다.  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 이벤트가 발생합니다.  
  
3.  명령을 실행합니다.  
  
4.  명령으로 설정 되어 있으면 `FirstReturnedRecord`, 첫 번째 반환 결과에 위치한는 <xref:System.Data.DataRow>합니다.  
  
5.  에 배치 됩니다 출력 매개 변수가 있는 경우는 <xref:System.Data.DataRow>합니다.  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 이벤트가 발생합니다.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A>가 호출된 경우  
  
 와 연결 된 각 명령을 <xref:System.Data.Common.DbDataAdapter> 일반적으로 연결 된 매개 변수 컬렉션을 포함 합니다. 매개 변수를 통해 현재 행에 매핑되는 `SourceColumn` 및 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스입니다. `SourceColumn` 참조를 <xref:System.Data.DataTable> 열은는 <xref:System.Data.Common.DbDataAdapter> 현재 행에 대 한 매개 변수 값을 가져오기에 대 한 참조입니다.  
  
 `SourceColumn` 테이블 매핑을 적용 하려면 먼저 매핑되지 않은 열 이름으로 참조 합니다. 하는 경우 `SourceColumn` 참조를 존재 하지 않는 열에 수행 되는 동작에 따라 달라 집니다 다음 중 하나 <xref:System.Data.MissingMappingAction> 값입니다.  
  
|열거형 값|수행한 작업|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|원본 열 이름 및 테이블 이름을 사용 하 여는 <xref:System.Data.DataSet> 매핑이 있는 경우.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> 생성 됩니다. 매핑을 명시적으로 설정 하는 경우 입력된 매개 변수의 매핑이 없을 일반적으로 오류의 결과입니다.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> 생성 됩니다.|  
  
 합니다 `SourceColumn` 속성은 또한 출력에 대 한 값을 매핑할 사용 또는 입/출력 매개 변수를는 `DataSet`합니다. 존재 하지 않는 열을 참조 하는 경우 예외가 생성 됩니다.  
  
 합니다 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스 열 값의 원본, 현재 또는 제안 버전 사용 여부를 결정 합니다. 이 기능은 낙관적 동시성 위반을 검사 하는 UPDATE 문의 WHERE 절에 원래 값을 포함 하도록 자주 사용 됩니다.  
  
> [!NOTE]
>  행을 업데이트 하는 동안 오류가 발생 하는 경우 예외가 throw 되 고 업데이트의 실행이 중단 되었습니다. 오류가 발생 하는 경우 예외를 생성 하지 않고 업데이트 작업을 계속 하려면 설정 합니다 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 속성을 `true` 호출 하기 전에 <xref:System.Data.Common.DbDataAdapter.Update%2A>입니다. 내에서 행당 별로 오류에 응답할 수도 있습니다는 `RowUpdated` DataAdapter의 이벤트입니다. 내에서 예외를 생성 하지 않고 업데이트 작업을 계속 하려면를 `RowUpdated` 이벤트를 설정 합니다 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 의 속성을 <xref:System.Data.Common.RowUpdatedEventArgs> 를 <xref:System.Data.UpdateStatus.Continue>입니다.  
  
   
  
## Examples  
 다음 예제에서는 파생된 클래스 <xref:System.Data.OleDb.OleDbDataAdapter>데이터 소스를 업데이트 합니다.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">원본 테이블에 올바르지 않습니다.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">영향을 받는 0 개 레코드에서 INSERT, UPDATE 또는 DELETE 문을 실행 하려고가 했습니다.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">데이터 조작(ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Update dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable"><see cref="T:System.Data.DataTable" /> 데이터 소스를 업데이트 하는 데 사용 합니다.</param>
        <summary>삽입, 업데이트 또는 지정 된 행을 삭제 각각에 대 한 INSERT, UPDATE 또는 DELETE 문을 각각 실행 하 여 데이터베이스의 값을 업데이트 <see cref="T:System.Data.DataTable" />합니다.</summary>
        <returns>성공적으로 업데이트 된 행의 수는 <see cref="T:System.Data.DataTable" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 애플리케이션 호출 하는 경우는 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드를 <xref:System.Data.Common.DbDataAdapter> 검사를 <xref:System.Data.DataRow.RowState%2A> 속성 합니다 에서구성된인덱스순서에따라각행에대해반복적으로필요한INSERT,UPDATE또는DELETE문을실행하고<xref:System.Data.DataSet>. 예를 들어 <xref:System.Data.Common.DbDataAdapter.Update%2A> 뒤에 INSERT 문과 DELETE 문의 다른 인해의 행 순서는 DELETE 문을 실행할 수 있습니다는 <xref:System.Data.DataTable>합니다.  
  
 유의 해야 이러한 문은 일괄 처리 프로세스로 수행 되지 않습니다. 각 행은 개별적으로 업데이트 됩니다. 애플리케이션에서 호출할 수는 <xref:System.Data.DataSet.GetChanges%2A> 문 형식 (예: 업데이트 하기 전에 삽입)의 시퀀스를 제어 해야 할 경우에 합니다. 자세한 내용은 [Dataadapter 사용 하 여 데이터 원본 업데이트](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)합니다.  
  
 하는 경우 INSERT, UPDATE 또는 DELETE 문이 지정 되지 않았습니다는 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드 예외를 생성 합니다. 만들 수 있습니다는 <xref:System.Data.SqlClient.SqlCommandBuilder> 또는 <xref:System.Data.OleDb.OleDbCommandBuilder> 설정 하는 경우 단일 테이블 업데이트에 대 한 SQL 문을 자동으로 생성 하는 개체는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다. 설정 하지 않으면 추가적인 모든 SQL 문을에서 생성 된 후에 **CommandBuilder**합니다. 이 세대 논리에 키 열 정보가 필요 합니다 <xref:System.Data.DataSet>합니다. 자세한 내용은 참조 [commandbuilder를 사용 하를 사용 하 여 명령 생성](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드 업데이트를 수행 하기 전에 첫 번째 매핑의에 나열 된 테이블에서 행을 검색 합니다. 합니다 <xref:System.Data.Common.DbDataAdapter.Update%2A> 다음의 값을 사용 하 여 행을 새로 고치는 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> 속성입니다. 반환 되는 모든 추가 행은 무시 됩니다.  
  
 모든 데이터에 다시 로드 된 후는 <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 이벤트가 발생 하는 조정 된 검사할 수 있도록 <xref:System.Data.DataSet> 행 및 모든 출력 매개 변수는 명령으로 반환 합니다. 행을 성공적으로 업데이트 한 후 해당 행 변경 내용이 허용 됩니다.  
  
 사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Update%2A>, 실행 순서는 다음과 같습니다.  
  
1.  값을 <xref:System.Data.DataRow> 매개 변수 값으로 이동 됩니다.  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 이벤트가 발생합니다.  
  
3.  명령을 실행합니다.  
  
4.  명령으로 설정 되어 있으면 `FirstReturnedRecord`, 첫 번째 반환 결과에 위치한는 <xref:System.Data.DataRow>합니다.  
  
5.  에 배치 됩니다 출력 매개 변수가 있는 경우는 <xref:System.Data.DataRow>합니다.  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 이벤트가 발생합니다.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A>가 호출된 경우  
  
 와 연결 된 각 명령을 <xref:System.Data.Common.DbDataAdapter> 일반적으로 연결 된 매개 변수 컬렉션을 포함 합니다. 매개 변수를 통해 현재 행에 매핑되는 `SourceColumn` 및 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스입니다. `SourceColumn` 참조를 <xref:System.Data.DataTable> 열은는 <xref:System.Data.Common.DbDataAdapter> 현재 행에 대 한 매개 변수 값을 가져오기에 대 한 참조입니다.  
  
 `SourceColumn` 테이블 매핑을 적용 하려면 먼저 매핑되지 않은 열 이름으로 참조 합니다. 하는 경우 `SourceColumn` 참조를 존재 하지 않는 열에 수행 되는 동작에 따라 달라 집니다 다음 중 하나 <xref:System.Data.MissingMappingAction> 값입니다.  
  
|열거형 값|수행한 작업|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|원본 열 이름 및 테이블 이름을 사용 하 여는 <xref:System.Data.DataSet> 매핑이 있는 경우.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> 생성 됩니다. 매핑을 명시적으로 설정 하는 경우 입력된 매개 변수의 매핑이 없을 일반적으로 오류의 결과입니다.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> 생성 됩니다.|  
  
 합니다 `SourceColumn` 속성은 또한 출력에 대 한 값을 매핑할 사용 또는 입/출력 매개 변수를는 `DataSet`합니다. 존재 하지 않는 열을 참조 하는 경우 예외가 생성 됩니다.  
  
 합니다 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스 열 값의 원본, 현재 또는 제안 버전 사용 여부를 결정 합니다. 이 기능은 낙관적 동시성 위반을 검사 하는 UPDATE 문의 WHERE 절에 원래 값을 포함 하도록 자주 사용 됩니다.  
  
> [!NOTE]
>  행을 업데이트 하는 동안 오류가 발생 하는 경우 예외가 throw 되 고 업데이트의 실행이 중단 되었습니다. 오류가 발생 하는 경우 예외를 생성 하지 않고 업데이트 작업을 계속 하려면 설정 합니다 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 속성을 `true` 호출 하기 전에 <xref:System.Data.Common.DbDataAdapter.Update%2A>입니다. 내에서 행당 별로 오류에 응답할 수도 있습니다는 `RowUpdated` DataAdapter의 이벤트입니다. 내에서 예외를 생성 하지 않고 업데이트 작업을 계속 하려면를 `RowUpdated` 이벤트를 설정 합니다 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 의 속성을 <xref:System.Data.Common.RowUpdatedEventArgs> 를 <xref:System.Data.UpdateStatus.Continue>입니다.  
  
   
  
## Examples  
 다음 예제에서는 파생된 클래스 <xref:System.Data.OleDb.OleDbDataAdapter>데이터 소스를 업데이트 합니다.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" />가 잘못되었습니다.</exception>
        <exception cref="T:System.InvalidOperationException">원본 테이블에 올바르지 않습니다.</exception>
        <exception cref="T:System.SystemException">이상 <see cref="T:System.Data.DataRow" /> 업데이트 하기 위해 존재 합니다.  
  
또는 
이상 <see cref="T:System.Data.DataTable" /> 업데이트 하기 위해 존재 합니다.  
  
또는 
이상 <see cref="T:System.Data.DataSet" /> 원본으로 사용 하기 위해 존재 합니다.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">영향을 받는 0 개 레코드에서 INSERT, UPDATE 또는 DELETE 문을 실행 하려고가 했습니다.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">데이터 조작(ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Update(class System.Data.DataRow[] dataRows, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Update (dataRows As DataRow(), tableMapping As DataTableMapping) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] * System.Data.Common.DataTableMapping -&gt; int" Usage="dbDataAdapter.Update (dataRows, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRows">배열을 <see cref="T:System.Data.DataRow" /> 개체 데이터 소스를 업데이트 하는 데 사용 합니다.</param>
        <param name="tableMapping"><see cref="P:System.Data.IDataAdapter.TableMappings" /> 사용할 컬렉션입니다.</param>
        <summary>삽입, 업데이트 또는 삭제할 행의 지정 된 배열의 각에 대 한 INSERT, UPDATE 또는 DELETE 문을 각각 실행 하 여 데이터베이스의 값을 업데이트 <see cref="T:System.Data.DataSet" /> 개체입니다.</summary>
        <returns>성공적으로 업데이트 된 행의 수는 <see cref="T:System.Data.DataSet" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 애플리케이션 호출 하는 경우는 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드를 <xref:System.Data.Common.DbDataAdapter> 검사를 <xref:System.Data.DataRow.RowState%2A> 속성 합니다 에서구성된인덱스순서에따라각행에대해반복적으로필요한INSERT,UPDATE또는DELETE문을실행하고<xref:System.Data.DataSet>. 예를 들어 <xref:System.Data.Common.DbDataAdapter.Update%2A> 뒤에 INSERT 문과 DELETE 문의 다른 인해의 행 순서는 DELETE 문을 실행할 수 있습니다는 <xref:System.Data.DataTable>합니다.  
  
 유의 해야 이러한 문은 일괄 처리 프로세스로 수행 되지 않습니다. 각 행은 개별적으로 업데이트 됩니다. 애플리케이션에서 호출할 수는 <xref:System.Data.DataSet.GetChanges%2A> 문 형식 (예: 업데이트 하기 전에 삽입)의 시퀀스를 제어 해야 할 경우에 합니다. 자세한 내용은 [Dataadapter 사용 하 여 데이터 원본 업데이트](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)합니다.  
  
 하는 경우 INSERT, UPDATE 또는 DELETE 문이 지정 되지 않았습니다는 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드 예외를 생성 합니다. 만들 수 있습니다는 <xref:System.Data.SqlClient.SqlCommandBuilder> 또는 <xref:System.Data.OleDb.OleDbCommandBuilder> 설정 하는 경우 단일 테이블 업데이트에 대 한 SQL 문을 자동으로 생성 하는 개체는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다. 설정 하지 않으면 추가적인 모든 SQL 문을에서 생성 된 후에 **CommandBuilder**합니다. 이 세대 논리에 키 열 정보가 필요 합니다 <xref:System.Data.DataSet>합니다. 자세한 내용은 참조 [commandbuilder를 사용 하를 사용 하 여 명령 생성](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드 업데이트를 수행 하기 전에 첫 번째 매핑의에 나열 된 테이블에서 행을 검색 합니다. 합니다 <xref:System.Data.Common.DbDataAdapter.Update%2A> 다음의 값을 사용 하 여 행을 새로 고치는 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> 속성입니다. 반환 되는 모든 추가 행은 무시 됩니다.  
  
 모든 데이터에 다시 로드 된 후는 <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 이벤트가 발생 하는 조정 된 검사할 수 있도록 <xref:System.Data.DataSet> 행 및 모든 출력 매개 변수는 명령으로 반환 합니다. 행을 성공적으로 업데이트 한 후 해당 행 변경 내용이 허용 됩니다.  
  
 사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Update%2A>, 실행 순서는 다음과 같습니다.  
  
1.  값을 <xref:System.Data.DataRow> 매개 변수 값으로 이동 됩니다.  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 이벤트가 발생합니다.  
  
3.  명령을 실행합니다.  
  
4.  명령으로 설정 되어 있으면 `FirstReturnedRecord`, 첫 번째 반환 결과에 위치한는 <xref:System.Data.DataRow>합니다.  
  
5.  에 배치 됩니다 출력 매개 변수가 있는 경우는 <xref:System.Data.DataRow>합니다.  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 이벤트가 발생합니다.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A>가 호출된 경우  
  
 와 연결 된 각 명령을 <xref:System.Data.Common.DbDataAdapter> 일반적으로 연결 된 매개 변수 컬렉션을 포함 합니다. 매개 변수를 통해 현재 행에 매핑되는 `SourceColumn` 및 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스입니다. `SourceColumn` 참조를 <xref:System.Data.DataTable> 열은는 <xref:System.Data.Common.DbDataAdapter> 현재 행에 대 한 매개 변수 값을 가져오기에 대 한 참조입니다.  
  
 `SourceColumn` 테이블 매핑을 적용 하려면 먼저 매핑되지 않은 열 이름으로 참조 합니다. 하는 경우 `SourceColumn` 참조를 존재 하지 않는 열에 수행 되는 동작에 따라 달라 집니다 다음 중 하나 <xref:System.Data.MissingMappingAction> 값입니다.  
  
|열거형 값|수행한 작업|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|원본 열 이름 및 테이블 이름을 사용 하 여는 <xref:System.Data.DataSet> 매핑이 있는 경우.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> 생성 됩니다. 매핑을 명시적으로 설정 하는 경우 입력된 매개 변수의 매핑이 없을 일반적으로 오류의 결과입니다.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> 생성 됩니다.|  
  
 합니다 `SourceColumn` 속성은 또한 출력에 대 한 값을 매핑할 사용 또는 입/출력 매개 변수를는 `DataSet`합니다. 존재 하지 않는 열을 참조 하는 경우 예외가 생성 됩니다.  
  
 합니다 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스 열 값의 원본, 현재 또는 제안 버전 사용 여부를 결정 합니다. 이 기능은 낙관적 동시성 위반을 검사 하는 UPDATE 문의 WHERE 절에 원래 값을 포함 하도록 자주 사용 됩니다.  
  
> [!NOTE]
>  행을 업데이트 하는 동안 오류가 발생 하는 경우 예외가 throw 되 고 업데이트의 실행이 중단 되었습니다. 오류가 발생 하는 경우 예외를 생성 하지 않고 업데이트 작업을 계속 하려면 설정 합니다 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 속성을 `true` 호출 하기 전에 <xref:System.Data.Common.DbDataAdapter.Update%2A>입니다. 내에서 행당 별로 오류에 응답할 수도 있습니다는 `RowUpdated` DataAdapter의 이벤트입니다. 내에서 예외를 생성 하지 않고 업데이트 작업을 계속 하려면를 `RowUpdated` 이벤트를 설정 합니다 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 의 속성을 <xref:System.Data.Common.RowUpdatedEventArgs> 를 <xref:System.Data.UpdateStatus.Continue>입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" />가 잘못되었습니다.</exception>
        <exception cref="T:System.InvalidOperationException">원본 테이블에 올바르지 않습니다.</exception>
        <exception cref="T:System.SystemException">이상 <see cref="T:System.Data.DataRow" /> 업데이트 하기 위해 존재 합니다.  
  
또는 
이상 <see cref="T:System.Data.DataTable" /> 업데이트 하기 위해 존재 합니다.  
  
또는 
이상 <see cref="T:System.Data.DataSet" /> 원본으로 사용 하기 위해 존재 합니다.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">영향을 받는 0 개 레코드에서 INSERT, UPDATE 또는 DELETE 문을 실행 하려고가 했습니다.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">데이터 조작(ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Update (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet"><see cref="T:System.Data.DataSet" /> 데이터 소스를 업데이트 하는 데 있습니다.</param>
        <param name="srcTable">테이블 매핑에 사용할 원본 테이블의 이름입니다.</param>
        <summary><see cref="T:System.Data.DataTable" /> 이름이 지정된 <see cref="T:System.Data.DataSet" />에서 삽입, 업데이트 또는 삭제된 각 행마다 INSERT, UPDATE 또는 DELETE 문을 각각 실행하여 데이터베이스에 있는 값을 업데이트합니다.</summary>
        <returns>성공적으로 업데이트 된 행의 수는 <see cref="T:System.Data.DataSet" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 애플리케이션 호출 하는 경우는 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드를 <xref:System.Data.Common.DbDataAdapter> 검사를 <xref:System.Data.DataRow.RowState%2A> 속성 합니다 에서구성된인덱스순서에따라각행에대해반복적으로필요한INSERT,UPDATE또는DELETE문을실행하고<xref:System.Data.DataSet>. 예를 들어 <xref:System.Data.Common.DbDataAdapter.Update%2A> 뒤에 INSERT 문과 DELETE 문의 다른 인해의 행 순서는 DELETE 문을 실행할 수 있습니다는 <xref:System.Data.DataTable>합니다.  
  
 유의 해야 이러한 문은 일괄 처리 프로세스로 수행 되지 않습니다. 각 행은 개별적으로 업데이트 됩니다. 애플리케이션에서 호출할 수는 <xref:System.Data.DataSet.GetChanges%2A> 명령문의 시퀀스를 제어 해야 하는 경우에 메서드 (예를 들어 업데이트 하기 전에 삽입). 자세한 내용은 [Dataadapter 사용 하 여 데이터 원본 업데이트](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)합니다.  
  
 하는 경우 INSERT, UPDATE 또는 DELETE 문이 지정 되지 않았습니다는 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드 예외를 생성 합니다. 만들 수 있습니다는 <xref:System.Data.SqlClient.SqlCommandBuilder> 또는 <xref:System.Data.OleDb.OleDbCommandBuilder> 설정 하는 경우 단일 테이블 업데이트에 대 한 SQL 문을 자동으로 생성 하는 개체는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다. 설정 하지 않으면 추가적인 모든 SQL 문을에서 생성 된 후에 **CommandBuilder**합니다. 이 세대 논리에 키 열 정보가 필요 합니다 <xref:System.Data.DataSet>합니다. 자세한 내용은 참조 [commandbuilder를 사용 하를 사용 하 여 명령 생성](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)합니다.  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드 시나리오를 지원 합니다. 여기서는 <xref:System.Data.DataSet> 여러 개 포함 된 <xref:System.Data.DataTable> 개체 이름이 대/소문자만 다른 합니다. 이름이 같지만 서로 다른 경우를 사용 하 여 여러 테이블에 존재 하는 경우는 `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A> 해당 테이블을 찾을 대/소문자 구분 비교를 수행 하 고 정확히 일치 하는 경우 예외를 생성 합니다. 다음 C# 코드는이 동작을 보여 줍니다.  
  
```  
DataSet ds = new DataSet();  
 ds.Tables.Add("aaa");  
 ds.Tables.Add("AAA");  
 adapter.Update(ds, "aaa"); // Updates "aaa", which already exists in the DataSet.  
 adapter.Update(ds, "AAA"); // Updates "AAA", which already exists in the DataSet.  
    adapter.Update(ds, "Aaa"); // Results in an exception.  
```  
  
 경우 <xref:System.Data.Common.DbDataAdapter.Update%2A> 라고 하며 <xref:System.Data.DataSet> 하나만 포함 되어 <xref:System.Data.DataTable> 이름이 다른 경우에 의해서만 <xref:System.Data.DataTable> 업데이트 됩니다. 이 시나리오에서는 비교는 대/소문자 구분. 다음 C# 코드는이 동작을 보여 줍니다.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Update(dataset, "AAA"); // Updates table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.Update%2A> 메서드 업데이트를 수행 하기 전에 첫 번째 매핑의에 나열 된 테이블에서 행을 검색 합니다. 합니다 <xref:System.Data.Common.DbDataAdapter.Update%2A> 다음의 값을 사용 하 여 행을 새로 고치는 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> 속성입니다. 반환 되는 모든 추가 행은 무시 됩니다.  
  
 모든 데이터에 다시 로드 된 후는 <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 이벤트가 발생 하는 조정 된 검사할 수 있도록 <xref:System.Data.DataSet> 행 및 모든 출력 매개 변수는 명령으로 반환 합니다. 행을 성공적으로 업데이트 한 후 해당 행 변경 내용이 허용 됩니다.  
  
 사용 하는 경우 <xref:System.Data.Common.DbDataAdapter.Update%2A>, 실행 순서는 다음과 같습니다.  
  
1.  값을 <xref:System.Data.DataRow> 매개 변수 값으로 이동 됩니다.  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 이벤트가 발생합니다.  
  
3.  명령을 실행합니다.  
  
4.  명령으로 설정 되어 있으면 `FirstReturnedRecord`, 첫 번째 반환 결과에 위치한는 <xref:System.Data.DataRow>합니다.  
  
5.  에 배치 됩니다 출력 매개 변수가 있는 경우는 <xref:System.Data.DataRow>합니다.  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 이벤트가 발생합니다.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A>가 호출된 경우  
  
 와 연결 된 각 명령을 <xref:System.Data.Common.DbDataAdapter> 일반적으로 연결 된 매개 변수 컬렉션을 포함 합니다. 매개 변수를 통해 현재 행에 매핑되는 `SourceColumn` 및 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스입니다. `SourceColumn` 참조를 <xref:System.Data.DataTable> 열은는 <xref:System.Data.Common.DbDataAdapter> 현재 행에 대 한 매개 변수 값을 가져오기에 대 한 참조입니다.  
  
 `SourceColumn` 테이블 매핑을 적용 하려면 먼저 매핑되지 않은 열 이름으로 참조 합니다. 하는 경우 `SourceColumn` 참조를 존재 하지 않는 열에 수행 되는 동작에 따라 달라 집니다 다음 중 하나 <xref:System.Data.MissingMappingAction> 값입니다.  
  
|열거형 값|수행한 작업|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|원본 열 이름 및 테이블 이름을 사용 하 여는 <xref:System.Data.DataSet> 매핑이 있는 경우.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> 생성 됩니다. 매핑을 명시적으로 설정 하는 경우 입력된 매개 변수의 매핑이 없을 일반적으로 오류의 결과입니다.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> 생성 됩니다.|  
  
 합니다 `SourceColumn` 속성은 또한 출력에 대 한 값을 매핑할 사용 또는 입/출력 매개 변수를는 `DataSet`합니다. 존재 하지 않는 열을 참조 하는 경우 예외가 생성 됩니다.  
  
 합니다 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스 열 값의 원본, 현재 또는 제안 버전 사용 여부를 결정 합니다. 이 기능은 낙관적 동시성 위반을 검사 하는 UPDATE 문의 WHERE 절에 원래 값을 포함 하도록 자주 사용 됩니다.  
  
> [!NOTE]
>  행을 업데이트 하는 동안 오류가 발생 하는 경우 예외가 throw 되 고 업데이트의 실행이 중단 되었습니다. 오류가 발생 하는 경우 예외를 생성 하지 않고 업데이트 작업을 계속 하려면 설정 합니다 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 속성을 `true` 호출 하기 전에 <xref:System.Data.Common.DbDataAdapter.Update%2A>입니다. 내에서 행당 별로 오류에 응답할 수도 있습니다는 `RowUpdated` DataAdapter의 이벤트입니다. 내에서 예외를 생성 하지 않고 업데이트 작업을 계속 하려면를 `RowUpdated` 이벤트를 설정 합니다 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 의 속성을 <xref:System.Data.Common.RowUpdatedEventArgs> 를 <xref:System.Data.UpdateStatus.Continue>입니다.  
  
   
  
## Examples  
 다음 예제에서는 파생된 클래스 <xref:System.Data.OleDb.OleDbDataAdapter>데이터 소스를 업데이트 합니다.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Data.DataSet" />가 잘못되었습니다.</exception>
        <exception cref="T:System.InvalidOperationException">원본 테이블에 올바르지 않습니다.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">영향을 받는 0 개 레코드에서 INSERT, UPDATE 또는 DELETE 문을 실행 하려고가 했습니다.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">데이터 조작(ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateBatchSize">
      <MemberSignature Language="C#" Value="public virtual int UpdateBatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UpdateBatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UpdateBatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UpdateBatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateBatchSize : int with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>가져옵니다 또는 일괄 처리 지원을 사용 하지 않도록 설정 하거나 값을 설정 하 고 일괄 처리에서 실행 될 수 있는 명령 수를 지정 합니다.</summary>
        <value>일괄 작업당 처리할 행 수입니다.  
  
 <list type="table"><listheader><term> 값은 
 </term><description> 효과 
 </description></listheader><item><term> 0 
 </term><description> 일괄 작업 크기에는 제한이 없습니다.  
  
 </description></item><item><term> 1 
 </term><description> 일괄 처리 업데이트는 사용 하지 않도록 설정 합니다.  
  
 </description></item><item><term> &gt; 1 
 </term><description> 변경 내용이 일괄 처리를 사용 하 여 전송 됩니다 <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> 번 작업 합니다.  
  
 </description></item></list>  

 이 1이 아닌 값으로 설정 하는 경우 모든 명령이 연결 된 합니다 <see cref="T:System.Data.Common.DbDataAdapter" /> 있어야 해당 <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> 속성이로 설정 **None** 또는 **OutputParameters**합니다. 그렇지 않으면 예외가 throw 됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 합니다 <xref:System.Data.Common.DbDataAdapter.UpdateBatchSize%2A> 속성에서 변경 된 데이터 소스를 업데이트 하는 <xref:System.Data.DataSet>합니다. 데이터 공급자가 일괄 처리를 지 원하는 경우 서버에 왕복 횟수를 줄여 애플리케이션 성능을 향상 시킬 수이 있습니다. ADO.NET 2.0에서는이 속성은 SQL Server (SqlClient) 및 Oracle (OracleClient) 용.NET 데이터 공급자에 대 한 지원.  
  
 너무 큰 배치를 실행하면 성능이 저하될 수 있습니다. 따라서 애플리케이션을 구현하기 전에 최적의 배치 크기 설정을 테스트해야 합니다.  
  
 <xref:System.ArgumentOutOfRangeException> 0 보다 작은 값을 숫자로 설정 된 경우 throw 됩니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">데이터 조작(ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ UpdateCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 원본에서 레코드를 업데이트 하는 데 사용 하는 명령을 가져오거나 설정 합니다.</summary>
        <value>A <see cref="T:System.Data.IDbCommand" /> 하는 동안 사용 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 데이터 집합의 수정 된 행에 대 한 데이터 원본에서 레코드를 업데이트 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하는 동안 <xref:System.Data.Common.DbDataAdapter.Update%2A>이면이 속성은 설정 되지 않으며 기본 키 정보에 있으면 합니다 <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> 자동으로 생성 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 파생된 클래스 <xref:System.Data.OleDb.OleDbDataAdapter> 속성 중 일부를 설정 합니다.  
  
 [!code-csharp[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">데이터 조작(ADO.NET)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">DbProviderFactory(ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
  </Members>
</Type>