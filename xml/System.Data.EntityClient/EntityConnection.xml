<Type Name="EntityConnection" FullName="System.Data.EntityClient.EntityConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9a33f2cd7ecb7a36b829c9430323ef109258faa0" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52594068" /></Metadata><TypeSignature Language="C#" Value="public sealed class EntityConnection : System.Data.Common.DbConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EntityConnection extends System.Data.Common.DbConnection" />
  <TypeSignature Language="DocId" Value="T:System.Data.EntityClient.EntityConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EntityConnection&#xA;Inherits DbConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class EntityConnection sealed : System::Data::Common::DbConnection" />
  <TypeSignature Language="F#" Value="type EntityConnection = class&#xA;    inherit DbConnection" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbConnection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>개념적 모델 및 데이터 소스 연결에 대한 참조를 포함합니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 실수로 <xref:System.Data.Common.CommandTrees> 및 <xref:System.Data.Objects.ObjectContext> 같은 개체가 해당 메타데이터와 비동기화되지 않도록 방지하려면 <xref:System.Data.EntityClient.EntityConnection>에서 메타데이터를 잠가야 합니다. 메타데이터가 잠긴 후에는 연결 문자열을 변경할 수 없습니다. 메타데이터가 잠기는 두 가지 시나리오는 다음과 같습니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 인스턴스가 기본 생성자를 통해 생성되거나 연결 문자열을 허용하는 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 생성자를 통해 생성됩니다. 어느 경우든 연결이 열리기 이전에 연결 문자열이 여러 번 변경될 수 있습니다. <xref:System.Data.EntityClient.EntityConnection.Open%2A> 또는 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>를 호출하면 메타데이터가 잠깁니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 인스턴스가 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 및 <xref:System.Data.Metadata.Edm.MetadataWorkspace>을 허용하는 <xref:System.Data.Common.DbConnection> 생성자를 통해 생성됩니다. 이 경우 메타데이터는 생성 시에 잠기므로 연결 문자열을 절대 변경할 수 없습니다.  
  
 메타데이터가 로드되면 <xref:System.Data.EntityClient.EntityConnection>은 개념적 모델, 스토리지 모델 및 매핑 파일이 모두 있는지 확인합니다.  
  
 코드 예제를 보려면 [EntityClient 작업](https://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)합니다.  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/8c5db787-78e6-4a34-8dc1-188bca0aca5e">Entity Framework 용 EntityClient 공급자</related>
    <related type="Article" href="https://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5">EntityClient 작업</related>
    <related type="Article" href="https://msdn.microsoft.com/library/78d516bc-c99f-4865-8ff1-d856bc1a01c0">연결 문자열</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Data.EntityClient.EntityConnection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 실수로 <xref:System.Data.Common.CommandTrees> 및 <xref:System.Data.Objects.ObjectContext> 같은 개체가 해당 메타데이터와 비동기화되지 않도록 방지하려면 <xref:System.Data.EntityClient.EntityConnection>에서 메타데이터를 잠가야 합니다. 메타데이터가 잠긴 후에는 연결 문자열을 변경할 수 없습니다. 메타데이터가 잠기는 두 가지 시나리오는 다음과 같습니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 인스턴스가 기본 생성자를 통해 생성되거나 연결 문자열을 허용하는 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 생성자를 통해 생성됩니다. 어느 경우든 연결이 열리기 이전에 연결 문자열이 여러 번 변경될 수 있습니다. <xref:System.Data.EntityClient.EntityConnection.Open%2A> 또는 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>를 호출하면 메타데이터가 잠깁니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 인스턴스가 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 및 <xref:System.Data.Metadata.Edm.MetadataWorkspace>을 허용하는 <xref:System.Data.Common.DbConnection> 생성자를 통해 생성됩니다. 이 경우 메타데이터는 생성 시에 잠기므로 연결 문자열을 절대 변경할 수 없습니다.  
  
 메타데이터가 로드되면 <xref:System.Data.EntityClient.EntityConnection>은 개념적 모델, 스토리지 모델 및 매핑 파일이 모두 있는지 확인합니다.  
  
 코드 예제를 보려면 [EntityClient 작업](https://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.EntityClient.EntityConnection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 실수로 <xref:System.Data.Common.CommandTrees> 및 <xref:System.Data.Objects.ObjectContext> 같은 개체가 해당 메타데이터와 비동기화되지 않도록 방지하려면 <xref:System.Data.EntityClient.EntityConnection>에서 메타데이터를 잠가야 합니다. 메타데이터가 잠긴 후에는 연결 문자열을 변경할 수 없습니다. 메타데이터가 잠기는 두 가지 시나리오는 다음과 같습니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 인스턴스가 기본 생성자를 통해 생성되거나 연결 문자열을 허용하는 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 생성자를 통해 생성됩니다. 어느 경우든 연결이 열리기 이전에 연결 문자열이 여러 번 변경될 수 있습니다. <xref:System.Data.EntityClient.EntityConnection.Open%2A> 또는 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>를 호출하면 메타데이터가 잠깁니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 인스턴스가 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 및 <xref:System.Data.Metadata.Edm.MetadataWorkspace>을 허용하는 <xref:System.Data.Common.DbConnection> 생성자를 통해 생성됩니다. 이 경우 메타데이터는 생성 시에 잠기므로 연결 문자열을 절대 변경할 수 없습니다.  
  
 메타데이터가 로드되면 <xref:System.Data.EntityClient.EntityConnection>은 개념적 모델, 스토리지 모델 및 매핑 파일이 모두 있는지 확인합니다.  
  
 코드 예제를 보려면 [EntityClient 작업](https://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.EntityClient.EntityConnection : string -&gt; System.Data.EntityClient.EntityConnection" Usage="new System.Data.EntityClient.EntityConnection connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">공급자별 연결 문자열입니다.</param>
        <summary>연결 문자열을 기반으로 <see cref="T:System.Data.EntityClient.EntityConnection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 애플리케이션의 구성 파일에 저장 되어 있는 명명 된 연결 문자열을 생성 합니다. 대신이 명명 된 연결 문자열을 제공할 수 있습니다 합니다 `connectionString` 인스턴스화할 때 매개 변수는 <xref:System.Data.EntityClient.EntityConnection> 클래스입니다.  
  
 실수로 <xref:System.Data.Common.CommandTrees> 및 <xref:System.Data.Objects.ObjectContext> 같은 개체가 해당 메타데이터와 비동기화되지 않도록 방지하려면 <xref:System.Data.EntityClient.EntityConnection>에서 메타데이터를 잠가야 합니다. 메타데이터가 잠긴 후에는 연결 문자열을 변경할 수 없습니다. 메타데이터가 잠기는 두 가지 시나리오는 다음과 같습니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 인스턴스가 기본 생성자를 통해 생성되거나 연결 문자열을 허용하는 이 생성자(<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>)를 통해 생성됩니다. 어느 경우든 연결이 열리기 이전에 연결 문자열이 여러 번 변경될 수 있습니다. <xref:System.Data.EntityClient.EntityConnection.Open%2A> 또는 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>를 호출하면 메타데이터가 잠깁니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 인스턴스가 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 및 <xref:System.Data.Metadata.Edm.MetadataWorkspace>을 허용하는 <xref:System.Data.Common.DbConnection> 생성자를 통해 생성됩니다. 이 경우 메타데이터는 생성 시에 잠기므로 연결 문자열을 절대 변경할 수 없습니다.  
  
 메타데이터가 로드되면 <xref:System.Data.EntityClient.EntityConnection>은 개념적 모델, 스토리지 모델 및 매핑 파일이 모두 있는지 확인합니다.  
  
 코드 예제를 보려면 [EntityClient 작업](https://msdn.microsoft.com/library/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">잘못된 연결 문자열 키워드를 제공했거나 필요한 연결 문자열 키워드를 제공하지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection (System.Data.Metadata.Edm.MetadataWorkspace workspace, System.Data.Common.DbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.Metadata.Edm.MetadataWorkspace workspace, class System.Data.Common.DbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workspace As MetadataWorkspace, connection As DbConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EntityConnection(System::Data::Metadata::Edm::MetadataWorkspace ^ workspace, System::Data::Common::DbConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.EntityClient.EntityConnection : System.Data.Metadata.Edm.MetadataWorkspace * System.Data.Common.DbConnection -&gt; System.Data.EntityClient.EntityConnection" Usage="new System.Data.EntityClient.EntityConnection (workspace, connection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workspace" Type="System.Data.Metadata.Edm.MetadataWorkspace" />
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="workspace">이 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />과 연결할 <see cref="T:System.Data.EntityClient.EntityConnection" />입니다.</param>
        <param name="connection">이 <see cref="T:System.Data.EntityClient.EntityConnection" /> 개체에 대한 기본 데이터 원본 연결입니다.</param>
        <summary>지정된 <see cref="T:System.Data.EntityClient.EntityConnection" /> 및 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />을 사용하여 <see cref="T:System.Data.Common.DbConnection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자를 사용하면 디스크에 저장된 파일 또는 어셈블리의 포함 리소스가 아닌 다른 메타데이터에서 <xref:System.Data.EntityClient.EntityConnection>을 만들 수 있습니다.  
  
 실수로 <xref:System.Data.Common.CommandTrees> 및 <xref:System.Data.Objects.ObjectContext> 같은 개체가 해당 메타데이터와 비동기화되지 않도록 방지하려면 <xref:System.Data.EntityClient.EntityConnection>에서 메타데이터를 잠가야 합니다. 메타데이터가 잠긴 후에는 연결 문자열을 변경할 수 없습니다. 메타데이터가 잠기는 두 가지 시나리오는 다음과 같습니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 인스턴스가 기본 생성자를 통해 생성되거나 연결 문자열을 허용하는 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 생성자를 통해 생성됩니다. 어느 경우든 연결이 열리기 이전에 연결 문자열이 여러 번 변경될 수 있습니다. <xref:System.Data.EntityClient.EntityConnection.Open%2A> 또는 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>를 호출하면 메타데이터가 잠깁니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 인스턴스가 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 및 <xref:System.Data.Metadata.Edm.MetadataWorkspace>을 허용하는 이 생성자(<xref:System.Data.Common.DbConnection>)를 통해 생성됩니다. 이 경우 메타데이터는 생성 시에 잠기므로 연결 문자열을 절대 변경할 수 없습니다.  
  
 메타데이터가 로드되면 <xref:System.Data.EntityClient.EntityConnection>은 개념적 모델, 스토리지 모델 및 매핑 파일이 모두 있는지 확인합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="workspace" /> 또는 <paramref name="connection" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">workspace                   
  
또는 
workspace                  
  
또는 
스토리지 모델이 작업 영역에서 누락되었습니다.  
  
또는 
<paramref name="connection" />은 닫힌 상태에 있지 않습니다.</exception>
        <exception cref="T:System.Data.ProviderIncompatibleException"><paramref name="connection" />을 ADO.NET Entity Framework 호환 공급자가 제공하지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginDbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbTransaction BeginDbTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbTransaction ^ BeginDbTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberSignature Language="F#" Value="override this.BeginDbTransaction : System.Data.IsolationLevel -&gt; System.Data.Common.DbTransaction" Usage="entityConnection.BeginDbTransaction isolationLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>데이터베이스 트랜잭션을 시작합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityTransaction BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityTransaction BeginTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction () As EntityTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityTransaction ^ BeginTransaction();" />
      <MemberSignature Language="F#" Value="override this.BeginTransaction : unit -&gt; System.Data.EntityClient.EntityTransaction" Usage="entityConnection.BeginTransaction " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>기본 공급자를 사용하여 트랜잭션을 시작합니다.</summary>
        <returns>새 <see cref="T:System.Data.EntityClient.EntityTransaction" />입니다. 반환된 <see cref="T:System.Data.EntityClient.EntityTransaction" /> 인스턴스는 나중에 <see cref="T:System.Data.EntityClient.EntityCommand" />와 연결되어 해당 트랜잭션에서 명령을 실행할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> 메서드는 <xref:System.Data.IsolationLevel.Unspecified> 트랜잭션 격리 수준을 사용합니다. 다른 격리 수준을 지정하려면 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>을 호출하십시오. 이 값은 기본 공급자에 따라 다르게 해석될 수 있습니다. 사용 중인 애플리케이션이 여러 공급자들 간에 이동 가능하도록 하려는 경우 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>을 호출하여 트랜잭션 격리 수준을 명시적으로 지정해야 합니다.  
  
 특정 순간에 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>을 통해 만들어진 활성 트랜잭션이 한 개뿐일 수 있습니다. <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>을 호출하면 현재 트랜잭션이 이미 있는 <xref:System.Data.EntityClient.EntityConnection>이 오버로드되고 <xref:System.InvalidOperationException>이 발생합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">기본 공급자를 알 수 없는 경우  
  
또는 
현재 트랜잭션이 이미 있는 <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" />에 대해 <see cref="T:System.Data.EntityClient.EntityConnection" />을 호출한 경우  
  
또는 
<see cref="T:System.Data.EntityClient.EntityConnection" />의 상태가 <see cref="F:System.Data.ConnectionState.Open" />이 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityTransaction BeginTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityTransaction ^ BeginTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberSignature Language="F#" Value="override this.BeginTransaction : System.Data.IsolationLevel -&gt; System.Data.EntityClient.EntityTransaction" Usage="entityConnection.BeginTransaction isolationLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">트랜잭션의 격리 수준입니다.</param>
        <summary>기본 공급자를 사용하여 지정된 격리 수준의 트랜잭션을 시작합니다.</summary>
        <returns>새 <see cref="T:System.Data.EntityClient.EntityTransaction" />입니다. 반환된 <see cref="T:System.Data.EntityClient.EntityTransaction" /> 인스턴스는 나중에 <see cref="T:System.Data.EntityClient.EntityCommand" />와 연결되어 해당 트랜잭션에서 명령을 실행할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특정 순간에 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>을 통해 만들어진 활성 트랜잭션이 한 개뿐일 수 있습니다. <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>을 호출하면 현재 트랜잭션이 이미 있는 <xref:System.Data.EntityClient.EntityConnection>이 오버로드되고 <xref:System.InvalidOperationException>이 발생합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">기본 공급자를 알 수 없는 경우  
  
또는 
현재 트랜잭션이 이미 있는 <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" />에 대해 <see cref="T:System.Data.EntityClient.EntityConnection" />을 호출한 경우  
  
또는 
<see cref="T:System.Data.EntityClient.EntityConnection" />의 상태가 <see cref="F:System.Data.ConnectionState.Open" />이 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeDatabase">
      <MemberSignature Language="C#" Value="public override void ChangeDatabase (string databaseName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ChangeDatabase(string databaseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ChangeDatabase (databaseName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ChangeDatabase(System::String ^ databaseName);" />
      <MemberSignature Language="F#" Value="override this.ChangeDatabase : string -&gt; unit" Usage="entityConnection.ChangeDatabase databaseName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="databaseName">지원되지 않습니다.</param>
        <summary>지원되지 않습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Data.EntityClient.EntityConnection.ChangeDatabase%2A> 에서 파생 하는 경우 메서드는 필요 <xref:System.Data.Common.DbConnection>합니다. 이 메서드는 지원 되지 않으며 발생을 <xref:System.NotSupportedException>입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">이 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="entityConnection.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>데이터베이스에 대한 연결을 닫습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 데이터 공급자를 알 수 없는 경우 <xref:System.Data.EntityClient.EntityConnection.Close%2A>를 호출해도 아무 동작도 수행되지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">연결을 닫을 때 오류가 발생한 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public override string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionString : string with get, set" Usage="System.Data.EntityClient.EntityConnection.ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.EntityClient.EntityConnection" /> 연결 문자열을 가져오거나 설정합니다.</summary>
        <value>데이터 원본에 대한 초기 연결을 설정하는 데 필요한 연결 문자열입니다. 기본값은 빈 문자열입니다. 연결이 닫힌 경우에는 현재 설정된 값이 반환되고, 값을 지정하지 않은 경우에는 빈 문자열이 반환됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `EntityClient` 문자열 세미콜론으로 구분 된 키워드/값 매개 변수 쌍의 시퀀스를 구성 합니다. 각 키워드와 해당 값은 등호(=)로 연결됩니다. 다음 표에는 <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A>에 포함되는 키워드 값의 올바른 이름이 정리되어 있습니다.  
  
|키워드|설명|  
|-------------|-----------------|  
|`Provider`|`Name` 키워드를 지정하지 않은 경우에 필요합니다. 기본 공급자의 <xref:System.Data.Common.DbProviderFactory> 개체를 검색하는 데 사용되는 공급자 이름입니다. 이 값은 상수입니다.<br /><br /> 경우는 `Name` 키워드는 비어 있지 않은 값에 대 한 연결 문자열에 포함 되지 않습니다는 `Provider` 키워드를 사용 합니다. 이 키워드는 `Name` 키워드와 함께 사용할 수 없습니다.|  
|`Provider Connection String`|선택 사항입니다. 기본 데이터 소스에 전달되는 공급자별 연결 문자열을 지정합니다. 이 연결 문자열은 데이터 공급자의 유효한 키워드/값 쌍을 사용하여 표현됩니다. `Provider Connection String`이 올바르지 않으면 데이터 소스에서 해당 문자열을 평가할 때 런타임 오류가 발생합니다.<br /><br /> 이 키워드는 `Name` 키워드와 함께 사용할 수 없습니다.<br /><br /> `Provider Connection String`의 값은 따옴표로 묶어야 합니다. 예를 들면 다음과 같습니다.<br /><br /> `Provider Connection String ="Server=serverName; User ID = userID";`<br /><br /> 다음은 잘못된 예입니다.<br /><br /> `Provider Connection String =Server=serverName; User ID = userID`|  
|`Metadata`|`Name` 키워드를 지정하지 않은 경우에 필요합니다. 디렉터리, 파일 및 리소스 위치를 모델 및 매핑 정보를 검색할에 파이프로 구분 된 목록입니다. 예를 들면 다음과 같습니다.<br /><br /> `Metadata=`<br /><br /> `c:\model &#124; c:\model\sql\mapping.msl;`<br /><br /> 파이프 구분 기호 양쪽의 공백은 무시됩니다.<br /><br /> 이 키워드는 `Name` 키워드와 함께 사용할 수 없습니다.|  
|`Name`|애플리케이션에서는 필수 키워드/값 연결 문자열 값을 제공하는 애플리케이션 구성 파일에 연결 이름을 선택적으로 지정할 수 있습니다. 이 경우에는 연결 문자열에 이름을 직접 지정할 수 없습니다. `Name` 키워드는 구성 파일에 사용할 수 없습니다.<br /><br /> `Name` 키워드가 엔터티 연결 문자열에 포함되어 있지 않은 경우 Provider 키워드에 대해 비어 있지 않은 값이 필요합니다.<br /><br /> 이 키워드는 다른 모든 연결 문자열 키워드와 함께 사용할 수 없습니다.|  
  
 애플리케이션에 키워드/값에 직접 제공할 수는 <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> 속성 또는에 대 한 값을 지정할 수는 `Name` 키워드입니다. 경우는 `Name` 키워드를 지정한 경우 연결 문자열 키워드/값은 다음과 같이 애플리케이션 구성 파일에서 검색 됩니다.  
  
 `Name=AdventureWorksEntities;`  
  
 경우는 `Name` 키워드가 사용 되는 <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> 속성을 다른 키워드 허용 되지 않습니다. `Name` 키워드를 명명된 된 연결 문자열에 저장 된 참조는 `connectionStrings` 다음 예와에서 같이 응용 프로그램 구성 파일 섹션. 합니다 `Provider`, `Metadata`, 및 `Provider Connection String` 값은 런타임에 구성 파일에서 검색 됩니다.  
  
  
  
 다음 예제와 같이 키워드/값 쌍을 <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> 속성에 직접 지정할 수도 있습니다. 이 경우에 `Name` 키워드가 사용 되지 않습니다.  
  
```  
"Provider=System.Data.SqlClient;  
Metadata=c:\metadata|c:\Metadata\Sql;  
Provider Connection String= 'Data Source=localhost;  
    Initial Catalog=AdventureWorks;Integrated Security=True;Connection Timeout=60' "  
```  
  
 실수로 <xref:System.Data.Common.CommandTrees> 및 <xref:System.Data.Objects.ObjectContext> 같은 개체가 해당 메타데이터와 비동기화되지 않도록 방지하려면 <xref:System.Data.EntityClient.EntityConnection>에서 메타데이터를 잠가야 합니다. 메타데이터가 잠긴 후에는 연결 문자열을 변경할 수 없습니다. 메타데이터가 잠기는 두 가지 시나리오는 다음과 같습니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 인스턴스가 기본 생성자를 통해 생성되거나 연결 문자열을 허용하는 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 생성자를 통해 생성됩니다. 어느 경우든 연결이 열리기 이전에 연결 문자열이 여러 번 변경될 수 있습니다. <xref:System.Data.EntityClient.EntityConnection.Open%2A> 또는 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>를 호출하면 메타데이터가 잠깁니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 인스턴스가 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 및 <xref:System.Data.Metadata.Edm.MetadataWorkspace>을 허용하는 <xref:System.Data.Common.DbConnection> 생성자를 통해 생성됩니다. 이 경우 메타데이터는 생성 시에 잠기므로 연결 문자열을 절대 변경할 수 없습니다.  
  
 메타데이터가 로드되면 <xref:System.Data.EntityClient.EntityConnection>은 개념적 모델, 스토리지 모델 및 매핑 파일이 모두 있는지 확인합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Data.EntityClient.EntityConnectionStringBuilder>와 <xref:System.Data.SqlClient.SqlConnectionStringBuilder>를 함께 사용하는 방법을 보여 줍니다. 속성을 설정 하는 코드를 `SqlConnectionStringBuilder` 만들려면는 <xref:System.Data.SqlClient.SqlConnection> 기본 공급자 연결 문자열의 일부를 제공 하는 문자열입니다. 합니다 `Provider` 이름을 사용 하 여 설정할 수 없습니다 합니다 `SqlConnectionStringBuilder`잘못 사용 되지 않으므로, `SqlConnection` 구문입니다. 코드는 만듭니다는 <xref:System.Data.EntityClient.EntityConnection> 문자열을 설정 하 여 `EntityConnectionStringBuilder` 속성입니다.  
  
 [!code-csharp[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/samples/snippets/csharp/VS_Snippets_Data/eSQLBasicExamples/CS/Program.cs#buildingconnectionstringwithentitycommand)]
 [!code-vb[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/samples/snippets/visualbasic/VS_Snippets_Data/eSQLBasicExamples/VB/Program.vb#buildingconnectionstringwithentitycommand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.EntityClient.EntityConnection" />의 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />가 초기화된 후 <see cref="P:System.Data.EntityClient.EntityConnection.ConnectionString" /> 속성을 설정하려고 한 경우. <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />는 <see cref="T:System.Data.EntityClient.EntityConnection" /> 인스턴스가 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />를 매개 변수로 사용하는 오버로드를 통해 생성되거나 <see cref="T:System.Data.EntityClient.EntityConnection" /> 인스턴스가 열렸을 때 초기화됩니다.</exception>
        <exception cref="T:System.ArgumentException">잘못된 연결 문자열 키워드를 제공했거나 필요한 연결 문자열 키워드를 제공하지 않은 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/745c5f95-2f02-4674-b378-6d51a7ec2490">연결 문자열</related>
        <related type="Article" href="https://msdn.microsoft.com/library/78d516bc-c99f-4865-8ff1-d856bc1a01c0">연결 문자열(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeout">
      <MemberSignature Language="C#" Value="public override int ConnectionTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ConnectionTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ConnectionTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ConnectionTimeout { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionTimeout : int" Usage="System.Data.EntityClient.EntityConnection.ConnectionTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>연결을 설정할 때 연결 시도를 끝내고 오류를 생성하기 전까지 대기할 시간(초)을 가져옵니다.</summary>
        <value>연결이 열리기 전까지 대기할 시간(초)입니다. 기본값은 기본 데이터 공급자의 기본 제한 시간입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 데이터 공급자를 알 수 없으면 0이 반환됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">설정한 값이 0보다 작은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityCommand CreateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityCommand CreateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.CreateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCommand () As EntityCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityClient::EntityCommand ^ CreateCommand();" />
      <MemberSignature Language="F#" Value="override this.CreateCommand : unit -&gt; System.Data.EntityClient.EntityCommand" Usage="entityConnection.CreateCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.EntityClient.EntityCommand" />의 새 인스턴스를 만들고 <see cref="P:System.Data.EntityClient.EntityCommand.Connection" />을 이 <see cref="T:System.Data.EntityClient.EntityConnection" />으로 설정합니다.</summary>
        <returns><see cref="T:System.Data.EntityClient.EntityCommand" /> 개체입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">기본 데이터 공급자의 이름을 알 수 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand CreateDbCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.CreateDbCommand" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbCommand () As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbCommand ^ CreateDbCommand();" />
      <MemberSignature Language="F#" Value="override this.CreateDbCommand : unit -&gt; System.Data.Common.DbCommand" Usage="entityConnection.CreateDbCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public override string Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Database" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.Database" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Database As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Database { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Database : string" Usage="System.Data.EntityClient.EntityConnection.Database" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 데이터베이스의 이름 또는 연결이 열린 후에 사용될 데이터베이스의 이름을 가져옵니다.</summary>
        <value>내부 데이터 공급자의 <see langword="Database" /> 속성 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특정 키워드 값에 대 한와 같은 `Database`에 매핑되는 <xref:System.Data.EntityClient.EntityConnection.Database%2A> 속성을 기본 데이터 공급자에 대 한 설명서를 참조 하세요. SQL Server는 동급 키워드에 대 한 설명서를 참조 하십시오.는 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A?displayProperty=nameWithType> 속성입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">기본 데이터 공급자를 알 수 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public override string DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DataSource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataSource { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSource : string" Usage="System.Data.EntityClient.EntityConnection.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>연결할 데이터 소스의 이름이나 네트워크 주소를 가져옵니다.</summary>
        <value>데이터 원본의 이름입니다. 기본값은 빈 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특정 키워드 값에 대 한와 같은 `DataSource`에 매핑되는 <xref:System.Data.EntityClient.EntityConnection.DataSource%2A> 속성을 기본 데이터 공급자에 대 한 설명서를 참조 하세요. SQL Server는 동급 키워드에 대 한 설명서를 참조 하십시오.는 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A?displayProperty=nameWithType> 속성입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">기본 데이터 공급자를 알 수 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="DbProviderFactory">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbProviderFactory DbProviderFactory" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.DbProviderFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbProviderFactory As DbProviderFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbProviderFactory ^ DbProviderFactory { System::Data::Common::DbProviderFactory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DbProviderFactory : System.Data.Common.DbProviderFactory" Usage="System.Data.EntityClient.EntityConnection.DbProviderFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="entityConnection.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistTransaction">
      <MemberSignature Language="C#" Value="public override void EnlistTransaction (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnlistTransaction(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EnlistTransaction(System::Transactions::Transaction ^ transaction);" />
      <MemberSignature Language="F#" Value="override this.EnlistTransaction : System.Transactions.Transaction -&gt; unit" Usage="entityConnection.EnlistTransaction transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">연결을 인리스트먼트할 트랜잭션 개체입니다.</param>
        <summary>지정된 트랜잭션에 이 <see cref="T:System.Data.EntityClient.EntityConnection" />을 인리스트먼트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 데이터 원본 연결에 대한 호출을 전달하여 전달된 <xref:System.Transactions.Transaction>에 명시적으로 인리스트먼트합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Data.EntityClient.EntityConnection" />의 상태가 <see cref="F:System.Data.ConnectionState.Open" />이 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataWorkspace">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadataWorkspace () As MetadataWorkspace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Metadata::Edm::MetadataWorkspace ^ GetMetadataWorkspace();" />
      <MemberSignature Language="F#" Value="member this.GetMetadataWorkspace : unit -&gt; System.Data.Metadata.Edm.MetadataWorkspace" Usage="entityConnection.GetMetadataWorkspace " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.MetadataWorkspace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />과 연결된 <see cref="T:System.Data.EntityClient.EntityConnection" />를 반환합니다.</summary>
        <returns>이 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />와 연결된 <see cref="T:System.Data.EntityClient.EntityConnection" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 클래스가 생성되면 <xref:System.Data.EntityClient.EntityConnection>가 자동으로 만들어집니다. 만드는 도중에 메타데이터 관련 예외가 발생할 수 있습니다. 메타데이터는 메모리에 로드되며 EDM(엔터티 데이터 모델) 애플리케이션에서는 해당 메타데이터를 사용하여 기본 데이터 원본에 대한 정보에 액세스합니다. 자세한 내용은 [ADO.NET 메타 데이터](https://msdn.microsoft.com/library/196097a5-a791-4ac4-9e6a-805685d481d5)입니다.  
  
 실수로 <xref:System.Data.Common.CommandTrees> 및 <xref:System.Data.Objects.ObjectContext> 같은 개체가 해당 메타데이터와 비동기화되지 않도록 방지하려면 <xref:System.Data.EntityClient.EntityConnection>에서 메타데이터를 잠가야 합니다. 메타데이터가 잠긴 후에는 연결 문자열을 변경할 수 없습니다. 메타데이터가 잠기는 두 가지 시나리오는 다음과 같습니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 인스턴스가 기본 생성자를 통해 생성되거나 연결 문자열을 허용하는 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 생성자를 통해 생성됩니다. 든 연결이 열리기 전에 연결 문자열을 여러 번 변경할 수 있습니다. <xref:System.Data.EntityClient.EntityConnection.Open%2A> 또는 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> 메타 데이터를 잠급니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 인스턴스가 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 및 <xref:System.Data.Metadata.Edm.MetadataWorkspace>을 허용하는 <xref:System.Data.Common.DbConnection> 생성자를 통해 생성됩니다. 이 경우 메타데이터는 생성 시에 잠기므로 연결 문자열을 절대 변경할 수 없습니다.  
  
 메타데이터가 로드되면 <xref:System.Data.EntityClient.EntityConnection>은 개념적 모델, 스토리지 모델 및 매핑 파일이 모두 있는지 확인합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.MetadataException">인라인 연결 문자열에 잘못된 <see langword="Metadata" /> 키워드 값이 포함된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public override void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Open" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Open();" />
      <MemberSignature Language="F#" Value="override this.Open : unit -&gt; unit" Usage="entityConnection.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>기본 데이터 공급자의 <see langword="Open" /> 메서드를 호출하여 데이터 원본에 대한 연결을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 실수로 <xref:System.Data.Common.CommandTrees> 및 <xref:System.Data.Objects.ObjectContext> 같은 개체가 해당 메타데이터와 비동기화되지 않도록 방지하려면 <xref:System.Data.EntityClient.EntityConnection>에서 메타데이터를 잠가야 합니다. 메타데이터가 잠긴 후에는 연결 문자열을 변경할 수 없습니다. 메타데이터가 잠기는 두 가지 시나리오는 다음과 같습니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 인스턴스가 기본 생성자를 통해 생성되거나 연결 문자열을 허용하는 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> 생성자를 통해 생성됩니다. 어느 경우든 연결이 열리기 이전에 연결 문자열이 여러 번 변경될 수 있습니다. <xref:System.Data.EntityClient.EntityConnection.Open%2A> 또는 <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>를 호출하면 메타데이터가 잠깁니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 인스턴스가 <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> 및 <xref:System.Data.Metadata.Edm.MetadataWorkspace>을 허용하는 <xref:System.Data.Common.DbConnection> 생성자를 통해 생성됩니다. 이 경우 메타데이터는 생성 시에 잠기므로 연결 문자열을 절대 변경할 수 없습니다.  
  
 메타데이터가 로드되면 <xref:System.Data.EntityClient.EntityConnection>은 개념적 모델, 스토리지 모델 및 매핑 파일이 모두 있는지 확인합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">연결을 열 때 오류가 발생하거나 기본 데이터 공급자의 이름을 알 수 없는 경우</exception>
        <exception cref="T:System.Data.MetadataException">인라인 연결 문자열에 잘못된 <see langword="Metadata" /> 키워드 값이 포함된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ServerVersion">
      <MemberSignature Language="C#" Value="public override string ServerVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ServerVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ServerVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ServerVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServerVersion : string" Usage="System.Data.EntityClient.EntityConnection.ServerVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>클라이언트가 연결된 데이터 원본의 버전이 포함된 문자열을 가져옵니다.</summary>
        <value>공급자 연결 문자열에 포함된 데이터 원본의 버전입니다.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">연결이 닫힌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Data.ConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ConnectionState State" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.State" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property State As ConnectionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::ConnectionState State { System::Data::ConnectionState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Data.ConnectionState" Usage="System.Data.EntityClient.EntityConnection.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.ConnectionState" />이 열려 있으면 기본 공급자의 <see cref="T:System.Data.EntityClient.EntityConnection" /> 속성을 가져오고, 그렇지 않으면 <see cref="F:System.Data.ConnectionState.Closed" />를 반환합니다.</summary>
        <value><see cref="F:System.Data.ConnectionState.Open" />두 경우에 합니다 <see cref="T:System.Data.EntityClient.EntityConnection" />의 내부 상태와 기본 공급자의 <see cref="T:System.Data.ConnectionState" /> 열려 있습니다. 경우는 <see cref="T:System.Data.EntityClient.EntityConnection" />의 상태는 open 이지만 공급자의 <see cref="T:System.Data.ConnectionState" /> 닫혀이 속성은 반환 <see cref="F:System.Data.ConnectionState.Broken" />합니다. 그 외의 경우 <see cref="F:System.Data.ConnectionState.Closed" />를 반환합니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreConnection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection StoreConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection StoreConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.StoreConnection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StoreConnection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbConnection ^ StoreConnection { System::Data::Common::DbConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StoreConnection : System.Data.Common.DbConnection" Usage="System.Data.EntityClient.EntityConnection.StoreConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.EntityClient.EntityConnection" />개체에서 사용하는 기본 데이터 원본 연결에 액세스할 수 있도록 합니다.</summary>
        <value>데이터 원본 연결의 경우 <see cref="T:System.Data.Common.DbConnection" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.EntityClient.EntityConnection>개체가 닫혔으면 반환된 데이터 원본 연결이 닫히고, 열려 있으면 열린 데이터 원본 연결이 반환됩니다. 데이터 원본 정보가 설정된 경우 항상 null이 아닌 값이 반환됩니다. 데이터 원본 연결 정보가 없는 경우(예: 기본 생성자가 사용되었으며 이후에 연결 문자열이 설정되지 않은 경우) null 참조가 반환됩니다.  
  
 Entity Framework에서 사용 하는 동일한 데이터 원본 연결 애플리케이션의 다른 부분과 공유할 수 있습니다. 데이터 원본 연결은 <xref:System.Data.Common.DbConnection>의 <xref:System.Data.Objects.ObjectContext.Connection%2A> 속성에서 또는 <xref:System.Data.Objects.ObjectContext>의 <xref:System.Data.EntityClient.EntityConnection.StoreConnection%2A> 속성에서 <xref:System.Data.EntityClient.EntityConnection> 개체로 반환됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>