<Type Name="ColumnAttribute" FullName="System.Data.Linq.Mapping.ColumnAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aabe85ca9ef51b7f832028f27091a155a1e47763" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55337128" /></Metadata><TypeSignature Language="C#" Value="public sealed class ColumnAttribute : System.Data.Linq.Mapping.DataAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ColumnAttribute extends System.Data.Linq.Mapping.DataAttribute" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Mapping.ColumnAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ColumnAttribute&#xA;Inherits DataAttribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ColumnAttribute sealed : System::Data::Linq::Mapping::DataAttribute" />
  <TypeSignature Language="F#" Value="type ColumnAttribute = class&#xA;    inherit DataAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Linq.Mapping.DataAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field, AllowMultiple=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>클래스를 데이터베이스 테이블의 열과 연결합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 엔터티 클래스의 멤버가 데이터베이스 테이블의 열을 나타내도록 지정하려면 이 특성을 사용합니다. 모든 필드 또는 속성에이 특성을 적용할 수 있습니다 `public`, `private`, 또는 `internal`합니다.  
  
 열이 지속형 열은으로 식별 되는 해당 엔터티 클래스 멤버만 때 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 데이터베이스에 변경 내용을 저장 합니다.  
  
 특성의 여러 속성을 구분 하려면 쉼표를 사용 합니다.  
  
   
  
## Examples  
  
```vb  
<Table(Name:="Employees")>  _  
Public Class Employees  
    Private _LastName As String  
    ' …  
    <Column(Storage:="_LastName", DbType:="NVarChar(20) NOT NULL", _  
        CanBeNull:=false)> _  
    Public Property LastName() As String  
        Get  
            Return Me._LastName  
        End Get  
        Set  
            If ((Me._LastName = value) _  
                = false) Then  
                Me.OnPropertyChanging("LastName")  
                Me._LastName = value  
                Me.OnPropertyChanged("LastName")  
            End If  
        End Set  
    End Property  
End Class  
```  
  
```csharp  
[Table(Name="Employees")]  
public class Employees  
{  
    private string _LastName;      
    // …  
    [Column(Storage="_LastName", DbType="NVarChar(20) NOT NULL",   
        CanBeNull=false)]  
    public string LastName  
    {  
        get  
        {  
            return this._LastName;  
        }  
        set  
        {  
            if ((this._LastName != value))  
            {  
                this.OnPropertyChanging("LastName");  
                this._LastName = value;  
                this.OnPropertyChanged("LastName");  
            }  
        }  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ColumnAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Mapping.ColumnAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ColumnAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.Linq.Mapping.ColumnAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSync">
      <MemberSignature Language="C#" Value="public System.Data.Linq.Mapping.AutoSync AutoSync { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.Linq.Mapping.AutoSync AutoSync" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.AutoSync" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSync As AutoSync" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::Mapping::AutoSync AutoSync { System::Data::Linq::Mapping::AutoSync get(); void set(System::Data::Linq::Mapping::AutoSync value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSync : System.Data.Linq.Mapping.AutoSync with get, set" Usage="System.Data.Linq.Mapping.ColumnAttribute.AutoSync" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.Mapping.AutoSync</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.Linq.Mapping.AutoSync" /> 열거형을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Data.Linq.Mapping.AutoSync" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#1)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBeNull">
      <MemberSignature Language="C#" Value="public bool CanBeNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanBeNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.CanBeNull" />
      <MemberSignature Language="VB.NET" Value="Public Property CanBeNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanBeNull { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanBeNull : bool with get, set" Usage="System.Data.Linq.Mapping.ColumnAttribute.CanBeNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>열이 null 값을 포함할 수 있는지 여부를 가져오거나 설정합니다.</summary>
        <value>기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 값을 설정 하는 경우 `false`, 해당 열의 데이터는 null이 아닌 것으로 간주 됩니다.  
  
> [!NOTE]
>  이 속성에서 중복 되는 <xref:System.Data.Linq.Mapping.ColumnAttribute.DbType%2A> 편의 위해 속성입니다. <xref:System.Data.Linq.DataContext.CreateDatabase%2A> 메서드 사용은 <xref:System.Data.Linq.Mapping.ColumnAttribute.DbType%2A> 속성입니다. 열에 null 값을 포함할 수 있는지 여부를 지정 해야 이러한 이유로 <xref:System.Data.Linq.Mapping.ColumnAttribute.DbType%2A> 속성도 합니다.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#2)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbType">
      <MemberSignature Language="C#" Value="public string DbType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DbType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.DbType" />
      <MemberSignature Language="VB.NET" Value="Public Property DbType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DbType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DbType : string with get, set" Usage="System.Data.Linq.Mapping.ColumnAttribute.DbType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터베이스 열의 형식을 가져오거나 설정합니다.</summary>
        <value>TRANSACT-SQL 테이블 선언에는 열을 정의 하는 정확한 텍스트를 지정 하는 문자열 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 사용 하 여 Transact SQL 테이블 선언에는 열을 정의 하는 정확한 텍스트를 지정 합니다. 지정 합니다 <xref:System.Data.Linq.Mapping.ColumnAttribute.DbType%2A> 속성을 사용 하려는 경우에 <xref:System.Data.Linq.DataContext.CreateDatabase%2A> 데이터베이스의 인스턴스를 만들려고 합니다.  
  
 기본값은 <xref:System.Data.Linq.Mapping.ColumnAttribute.DbType%2A> 멤버 형식에서 유추 됩니다. 자세한 내용은 [SQL-CLR 형식 매핑](~/docs/framework/data/adonet/sql/linq/sql-clr-type-mapping.md)합니다.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#4)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public string Expression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.Expression" />
      <MemberSignature Language="VB.NET" Value="Public Property Expression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Expression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Expression : string with get, set" Usage="System.Data.Linq.Mapping.ColumnAttribute.Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>열이 데이터베이스에서 계산된 열인지 여부를 가져오거나 설정합니다.</summary>
        <value>기본값은 비어 있습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하는 경우이 속성을 사용 하 여 <xref:System.Data.Linq.DataContext.CreateDatabase%2A> 으로 계산 된 값이 포함 된 열을 정의 하 합니다.  
  
 예를 들어도 SQL에 정의 된 열을 만들려는 `InventoryVal AS UnitPrice * UnitsInStock`, 다음 사용 하 여 *식을* 문자열: `"UnitPrice * UnitsInStock"`합니다.  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]에서는 기본 키로 계산된 열을 지원하지 않습니다.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#5)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDbGenerated">
      <MemberSignature Language="C#" Value="public bool IsDbGenerated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDbGenerated" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated" />
      <MemberSignature Language="VB.NET" Value="Public Property IsDbGenerated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDbGenerated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsDbGenerated : bool with get, set" Usage="System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>열에 데이터베이스가 자동으로 생성하는 값이 포함되는지 여부를 가져오거나 설정합니다.</summary>
        <value>기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated%2A> 데이터의 행을 삽입 하 고 팀 원들은 후 사용 가능한 멤버 즉시 동기화 됩니다 <xref:System.Data.Linq.DataContext.SubmitChanges%2A> 완료 됩니다.  
  
> [!NOTE]
>  열의 기본 키 값을 보유 하 고 지정 하는 경우 <xref:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated%2A> 으로 `true`도 추가 해야 합니다 <xref:System.Data.Linq.Mapping.ColumnAttribute.DbType%2A> 를 사용 하 여 속성을 `IDENTITY` 한정자.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#6)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDiscriminator">
      <MemberSignature Language="C#" Value="public bool IsDiscriminator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDiscriminator" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.IsDiscriminator" />
      <MemberSignature Language="VB.NET" Value="Public Property IsDiscriminator As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDiscriminator { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsDiscriminator : bool with get, set" Usage="System.Data.Linq.Mapping.ColumnAttribute.IsDiscriminator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>열에 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 상속 계층 구조에 대한 판별자 값이 포함되는지 여부를 가져오거나 설정합니다.</summary>
        <value>기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때 `true`,이 속성은 상속 계층 구조에 대 한 판별자 값을 보유 하는 클래스 멤버를 식별 합니다.  
  
 이 속성을 설정할 수 `true` 없는 최상위에 속해야 하는 둘 이상의 멤버를 클래스 계층 구조에 매핑됩니다.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#7)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimaryKey">
      <MemberSignature Language="C#" Value="public bool IsPrimaryKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimaryKey" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.IsPrimaryKey" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPrimaryKey As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimaryKey { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPrimaryKey : bool with get, set" Usage="System.Data.Linq.Mapping.ColumnAttribute.IsPrimaryKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 클래스 멤버가 테이블의 기본 키 중 일부 또는 전부인 열을 나타내는지 여부를 가져오거나 설정합니다.</summary>
        <value>기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 엔터티 클래스를 가정 하 고이 특성을 사용 하 여 하나 이상의 멤버를 제공 해야 및 기본 키 또는 고유 키에 해당 테이블 또는 뷰에 매핑해야 합니다. 이 프롬프트를 이렇게 하지 않으면 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 데이터베이스 변경 내용을 전송 하는 것에 대 한 읽기 전용으로 클래스의 인스턴스를 고려해 야 합니다.  
  
 이 속성을 사용 하 여 클래스의 둘 이상의 멤버를 지정 하는 경우 연결된 된 열의 복합 키 이라고 합니다.  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]에서는 기본 키로 계산된 열을 지원하지 않습니다.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#8)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVersion">
      <MemberSignature Language="C#" Value="public bool IsVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property IsVersion As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVersion { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsVersion : bool with get, set" Usage="System.Data.Linq.Mapping.ColumnAttribute.IsVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>멤버의 열 형식이 데이터베이스 타임스탬프 또는 버전 번호인지 여부를 가져오거나 설정합니다.</summary>
        <value>기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 버전 번호가 증가 하 고 타임 스탬프 열에는 연결 된 행이 업데이트 될 때마다 업데이트 됩니다. (이 속성은 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 는 새 버전에는 표시할 열을 업데이트할지; 업데이트를 변경한 사용자와 같은 정보를 기록 하려고 하지 않습니다.)  
  
 다음을 유의 하십시오 때 `IsVersion` 그렇습니다.  
  
-   사용 하 여 <xref:System.Data.Linq.Mapping.ColumnAttribute.DbType%2A> 버전 번호 또는 타임 스탬프 열을 지정 하려면 올바른 한정자를 지정 합니다. 지정 하지 않는 경우 <xref:System.Data.Linq.Mapping.ColumnAttribute.DbType%2A>, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 올바른 한정자를 유추 합니다.  
  
 버전 번호가 증가 하 고 타임 스탬프 열에는 연결 된 행이 업데이트 될 때마다 업데이트 됩니다. 사용 하 여 멤버 `IsVersion=true` 데이터 행이 업데이트 후에 즉시 동기화 됩니다. 새 값이 표시 됩니다 <xref:System.Data.Linq.DataContext.SubmitChanges%2A> 완료 합니다.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#9)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCheck">
      <MemberSignature Language="C#" Value="public System.Data.Linq.Mapping.UpdateCheck UpdateCheck { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.Linq.Mapping.UpdateCheck UpdateCheck" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCheck As UpdateCheck" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::Mapping::UpdateCheck UpdateCheck { System::Data::Linq::Mapping::UpdateCheck get(); void set(System::Data::Linq::Mapping::UpdateCheck value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCheck : System.Data.Linq.Mapping.UpdateCheck with get, set" Usage="System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.Mapping.UpdateCheck</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]에서 낙관적 동시성 충돌 감지에 접근하는 방법을 가져오거나 설정합니다.</summary>
        <value>멤버에 대해 <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Always" />이 <see langword="true" />가 아니면 기본값은 <see cref="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion" />입니다.  
  
다른 값은 <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Never" /> 및 <see cref="F:System.Data.Linq.Mapping.UpdateCheck.WhenChanged" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 세 가지 열거형 중 하나를 사용 하 여 사용 하는 경우를 결정 하는 방법을 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] 동시성 충돌을 감지 합니다.  
  
 멤버가 없는으로 설계 된 경우 `IsVersion=true`, 원래 멤버 값이 현재 데이터베이스 상태와 비교 됩니다.  
  
 다음 열거형은 사용할 수 있습니다.  
  
-   `Always` 충돌 검색에 항상이 열을 사용 합니다.  
  
-   `Never` 충돌 검색에 대 한이 열을 사용 하지 않습니다.  
  
-   `WhenChanged` 멤버가 애플리케이션에서 변경 된 경우에이 열을 사용 합니다.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Mapping.ColumnAttribute#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/cs/northwind.cs#10)]
 [!code-vb[System.Data.Linq.Mapping.ColumnAttribute#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.ColumnAttribute/vb/northwind.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>