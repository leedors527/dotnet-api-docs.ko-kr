<Type Name="DataLoadOptions" FullName="System.Data.Linq.DataLoadOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c519a3ffc7eb35a524e3ede6d2440a5fed491e6f" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57919366" /></Metadata><TypeSignature Language="C#" Value="public sealed class DataLoadOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataLoadOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.DataLoadOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataLoadOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataLoadOptions sealed" />
  <TypeSignature Language="F#" Value="type DataLoadOptions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>관련 데이터의 즉시 로드 및 필터링 기능을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="general"></a>일반  
 개체를 쿼리하는 경우 실제로는 요청한 개체만 검색합니다. 합니다 *관련* 개체는 동시에 자동으로 페치 되지 않습니다. (자세한 내용은 [관계 간 쿼리](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md).)  
  
 <xref:System.Data.Linq.DataLoadOptions> 클래스 지정된 관련된 데이터의 즉시 로드를 위해 두 개의 메서드를 제공 합니다. <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> 메서드를 사용 하면 주 대상과 관련 된 데이터의 즉시 로드 합니다. <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> 메서드 관련된 개체를 필터링 할 수 있습니다.  
  
## <a name="rules"></a>규칙  
 다음 규칙을 참고 하십시오와 관련 하 여 <xref:System.Data.Linq.DataLoadOptions> 사용:  
  
-   할당을 <xref:System.Data.Linq.DataLoadOptions> 에 <xref:System.Data.Linq.DataContext> 첫 번째 쿼리를 실행 한 후 예외를 생성 합니다.  
  
-   수정 된 <xref:System.Data.Linq.DataLoadOptions> 에 할당 된 후을 <xref:System.Data.Linq.DataContext> 예외를 생성  
  
## <a name="cycle-handling"></a>처리 주기  
 <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> 및 <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> 지시문 순환 되지 않아야 합니다. 다음 예제를에서는 이러한 그래프를 나타냅니다.  
  
-   예제 1: 재귀적  
  
    -   `dlo.LoadWith<Employee>(e => e.Reports);`  
  
-   예제 2: 백 포인터  
  
    -   `dlo.LoadWith <Customer>(c => C.Orders);`  
  
    -   `dlo.LoadWith <Order>(o => o.Customer);`  
  
-   예제 3: 긴 주기  
  
     이 올바른 정규화 된 모델에서 발생 하지는 않지만 가능성이 있습니다.  
  
    -   `dlo.LoadWith <A>(a => a.Bs);`  
  
    -   `dlo.LoadWith <B>(b => b.Cs);`  
  
    -   `dlo.LoadWith <C>(c => c.As);`  
  
-   예제 4: 재귀적 하위 쿼리  
  
    -   `dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));`  
  
-   예제 5: 긴 재귀 하위 쿼리  
  
    -   `dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`  
  
    -   `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));`  
  
 다음은 도움이 되는 몇 가지 일반적인 규칙이 이러한 시나리오에서 발생 하는 상황을 이해 합니다.  
  
 **LoadWith** 를 호출할 때마다 <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> 주기 그래프에 도입 된 여부를 확인 합니다. 있으면 예 1과 같이 2 및 3, 예외가 throw 됩니다.  
  
 **AssociateWith** 엔진 실행된 시간으로 기존 하위 절 식 내에서 관계에 적용 되지 않습니다.  
  
-   예제 4에는 `Where` 절이 모두에 대해 실행 됩니다 `A`, 뿐 아니라에서 하위 필터링 하위 쿼리 식 자체 (재귀 것)  
  
-   예제 5에서 첫 번째 `Where` 절은 모두에 적용 된 `B`에 하위 쿼리는 있지만 `B`합니다. 두 번째 `Where` 절은 모두에 적용 된 `A`있지만 s에 하위 쿼리 `A`합니다.  
  
   
  
## Examples  
 검색 하는 경우 `Customers` Northwind 샘플 데이터베이스에서 사용할 수 있습니다 <xref:System.Data.Linq.DataLoadOptions> 되도록 지정 하려면 `Orders` 검색할 이기도 합니다. 하위 집합을 지정할 수도 있습니다 `Orders` 검색할 합니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLoadOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataLoadOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.Linq.DataLoadOptions" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith">
      <MemberSignature Language="C#" Value="public void AssociateWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssociateWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberSignature Language="F#" Value="member this.AssociateWith : System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="dataLoadOptions.AssociateWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression">특정 일대다 필드 또는 속성에 사용할 쿼리를 식별합니다. 다음 사항에 유의하십시오. 
식이 일대다 관계를 나타내는 필드 또는 속성으로 시작되지 않으면 예외가 throw됩니다.  
  
유효한 연산자가 아닌 연산자가 식에 나타나면 예외가 throw됩니다. 유효한 연산자는 다음과 같습니다. 
Where 
OrderBy 
ThenBy 
OrderByDescending 
ThenByDescending 
Take</param>
        <summary>특정 관계에 대해 검색한 개체를 필터링합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 예제에서는 내부 루프는 반복만 해당 `Orders` 오늘 선적 되지 않은입니다.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AssociateWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void AssociateWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="member this.AssociateWith : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; unit" Usage="dataLoadOptions.AssociateWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">쿼리 대상 형식입니다.  
  
형식이 매핑되지 않은 경우 예외가 throw됩니다.</typeparam>
        <param name="expression">특정 일대다 필드 또는 속성에 사용할 쿼리를 식별합니다. 다음 사항에 유의하십시오. 
식이 일대다 관계를 나타내는 필드 또는 속성으로 시작되지 않으면 예외가 throw됩니다.  
  
유효한 연산자가 아닌 연산자가 식에 나타나면 예외가 throw됩니다. 유효한 연산자는 다음과 같습니다. 
Where 
OrderBy 
ThenBy 
OrderByDescending 
ThenByDescending 
Take</param>
        <summary>특정 관계에 대해 검색한 개체를 필터링합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 주기를 방지 하는 방법에 대 한 정보를 참조 하세요. <xref:System.Data.Linq.DataLoadOptions>합니다.  
  
   
  
## Examples  
 다음 예제에서는 내부 루프는 반복만 해당 `Orders` 오늘 선적 되지 않은입니다.  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssociationCriteria">
      <MemberSignature Language="C#" Value="public bool GetAssociationCriteria (System.Reflection.MemberInfo memberInfo, out System.Linq.Expressions.LambdaExpression associationCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetAssociationCriteria(class System.Reflection.MemberInfo memberInfo, [out] class System.Linq.Expressions.LambdaExpression&amp; associationCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.GetAssociationCriteria(System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetAssociationCriteria(System::Reflection::MemberInfo ^ memberInfo, [Runtime::InteropServices::Out] System::Linq::Expressions::LambdaExpression ^ % associationCriteria);" />
      <MemberSignature Language="F#" Value="member this.GetAssociationCriteria : System.Reflection.MemberInfo *  -&gt; bool" Usage="dataLoadOptions.GetAssociationCriteria (memberInfo, associationCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="associationCriteria" Type="System.Linq.Expressions.LambdaExpression" RefType="out" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="associationCriteria">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImmediate">
      <MemberSignature Language="C#" Value="public bool IsImmediate (System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsImmediate(class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.IsImmediate(System.Reflection.MemberInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsImmediate(System::Reflection::MemberInfo ^ memberInfo);" />
      <MemberSignature Language="F#" Value="member this.IsImmediate : System.Reflection.MemberInfo -&gt; bool" Usage="dataLoadOptions.IsImmediate memberInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith">
      <MemberSignature Language="C#" Value="public void LoadWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberSignature Language="F#" Value="member this.LoadWith : System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="dataLoadOptions.LoadWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression">관련 자료를 식별하는 람다 식입니다.</param>
        <summary>람다 식을 사용하여 주 대상에 관련된 지정된 데이터를 검색합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 예제에서 쿼리를 실행하면 런던에 살고 있는 모든 `Orders`에 대한 모든 `Customers`가 검색됩니다. 따라서 이후에 `Orders` 개체의 `Customer` 속성에 액세스해도 새 데이터베이스 쿼리가 트리거되지 않습니다.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void LoadWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void LoadWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="member this.LoadWith : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; unit" Usage="dataLoadOptions.LoadWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">쿼리 대상 형식입니다.  
  
이 형식이 매핑되지 않은 경우 예외가 throw됩니다.</typeparam>
        <param name="expression">검색할 필드 또는 속성을 식별합니다.  
  
식이 일대일 또는 일대다 관계를 나타내는 필드 또는 속성을 식별하지 않으면 예외가 throw됩니다.</param>
        <summary>T 형식의 개체에 대한 쿼리가 전송될 때 검색되는 하위 개체를 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 가지 수준의 관계의 로드를 지정할 수 없습니다 (예를 들어 `Orders.OrderDetails`). 이러한 시나리오에서는 두 개의 별도 지정 해야 <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> 메서드.  
  
 순환 사용 하지 않으려면 주의 참조 하세요. 섹션 <xref:System.Data.Linq.DataLoadOptions>합니다.  
  
   
  
## Examples  
 다음 예제에서 쿼리를 실행하면 런던에 살고 있는 모든 `Orders`에 대한 모든 `Customers`가 검색됩니다. 따라서 이후에 `Orders` 개체의 `Customer` 속성에 액세스해도 새 데이터베이스 쿼리가 트리거되지 않습니다.  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>