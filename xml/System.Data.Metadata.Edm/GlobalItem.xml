<Type Name="GlobalItem" FullName="System.Data.Metadata.Edm.GlobalItem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c815ba7502ec40ac2e86c423592b96c805f6c146" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51865765" /></Metadata><TypeSignature Language="C#" Value="public abstract class GlobalItem : System.Data.Metadata.Edm.MetadataItem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit GlobalItem extends System.Data.Metadata.Edm.MetadataItem" />
  <TypeSignature Language="DocId" Value="T:System.Data.Metadata.Edm.GlobalItem" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class GlobalItem&#xA;Inherits MetadataItem" />
  <TypeSignature Language="C++ CLI" Value="public ref class GlobalItem abstract : System::Data::Metadata::Edm::MetadataItem" />
  <TypeSignature Language="F#" Value="type GlobalItem = class&#xA;    inherit MetadataItem" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Metadata.Edm.MetadataItem</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>모든 개념적 모델 형식과 엔터티 컨테이너의 기본 항목 클래스를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 자세한 내용은 [메타 데이터 형식 계층 구조 개요](https://msdn.microsoft.com/library/d2b18fe0-60a5-4a5c-940d-21d07e5165d4)합니다.  
  
   
  
## Examples  
 다음 코드 샘플에서는 연결에서 메타데이터 작업 영역을 가져온 다음 이 메타데이터 작업 영역을 사용하여 메타데이터 형식 계층 구조를 탐색하는 방법을 보여 줍니다. 메타데이터 작업 영역은 메타데이터 검색을 지원하는 런타임 서비스 구성 요소입니다.  
  
 코드 샘플에서는 <xref:System.Data.Metadata.Edm.DataSpace.CSpace>를 사용하여 모델을 지정합니다. <xref:System.Data.Metadata.Edm.DataSpace.CSpace>는 개념적 모델의 기본 이름을 나타냅니다. 코드 샘플에서는 애플리케이션 구성 파일에서 제공되는 연결 문자열을 사용합니다. 애플리케이션 구성 파일의 예제를 보려면 [애플리케이션 (EDM)에서 Adventure Works 개체 모델](https://msdn.microsoft.com/library/84c01270-90ba-467b-ad24-df10c1ca8f45)합니다.  
  
```csharp  
using System;  
using System.Data;  
using System.Data.EntityClient;  
using System.Data.Metadata.Edm;  
using System.Collections.ObjectModel;  
  
class BrowseTypes  
{  
  static void Main()  
  {  
    try  
    {  
      // Establish a connection to the underlying data provider by  
      // using the connection string specified in the config file.  
      using (EntityConnection connection =  
             new EntityConnection("Name=AdventureworksContext"))  
      {  
         // Access the metadata workspace.  
         MetadataWorkspace workspace =   
              connection.GetMetadataWorkspace();  
         // Browse the metadata type hierarchy.  
         BrowseTypesExample(workspace);  
      }  
    }  
    catch (MetadataException exceptionMetadata)  
    {  
       Console.WriteLine("MetadataException: {0}",  
                         exceptionMetadata.Message);  
     }  
     catch (System.Data.MappingException exceptionMapping)  
     {  
        Console.WriteLine("MappingException: {0}",  
                          exceptionMapping.Message);  
     }  
  }  
  
  private static void BrowseTypesExample(MetadataWorkspace workspace)  
  {  
    // Get a collection of the GlobalItems.   
    // An GlobalItem class is the base class for   
    // the conceptual model types and entity containers.  
    ReadOnlyCollection<GlobalItem> items =   
         workspace.GetItems<GlobalItem>(DataSpace.CSpace);  
  
    // Iterate through the collection to get each item.  
    foreach (GlobalItem item in items)  
    {  
       Console.WriteLine(  
           "Item BuiltInTypeKind: {0}, Type: {1} ",   
           item.BuiltInTypeKind, item.GetType().FullName);  
  
       EntityContainer entityContainer = item as EntityContainer;  
       if (entityContainer != null)  
       {  
          Console.WriteLine(  
               "EntityContainer Name: {0}",  
               entityContainer.Name);  
          continue;  
       }  
  
       EntityType entityType = item as EntityType;  
       if (entityType != null)  
       {  
         Console.WriteLine(  
             "EntityType Name: {0}, Namespace: {1}",  
             entityType.Name, entityType.NamespaceName);  
        continue;  
       }  
  
       AssociationType associationType = item as AssociationType;  
       if (associationType != null)  
       {  
          Console.WriteLine(  
             "AssociationType Name: {0}, Namespace: {1}",  
             associationType.Name, associationType.NamespaceName);  
          continue;  
       }  
  
       PrimitiveType primType = item as PrimitiveType;  
       if (primType != null)  
       {  
         Console.WriteLine(  
             "PrimitiveType Name: {0}, Namespace: {1}",   
             primType.Name, primType.NamespaceName);  
         continue;  
       }  
  
       EdmFunction function = item as EdmFunction;  
       if (function != null)  
       {  
         Console.WriteLine(  
           "EdmFunction Name: {0}, Namespace: {1}",  
           function.Name, function.NamespaceName);  
         continue;  
       }  
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>