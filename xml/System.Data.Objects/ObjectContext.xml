<Type Name="ObjectContext" FullName="System.Data.Objects.ObjectContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4aab335cf279a9bb6538db1a28bc13e6e746b92c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58737958" /></Metadata><TypeSignature Language="C#" Value="public class ObjectContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectContext" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectContext : IDisposable" />
  <TypeSignature Language="F#" Value="type ObjectContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>엔터티 데이터를 개체로 쿼리 및 사용할 수 있는 기능을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Data.Objects.ObjectContext> 클래스는 스레드로부터 안전하지 않습니다. 데이터 개체의 무결성을 <xref:System.Data.Objects.ObjectContext> 다중 스레드 시나리오에서 보장할 수 없습니다.  
  
 <xref:System.Data.Objects.ObjectContext> 클래스는 개념적 모델에 정의 된 엔터티 형식의 인스턴스인 개체로 데이터와 상호 작용에 대 한 기본 클래스입니다. <xref:System.Data.Objects.ObjectContext> 클래스의 인스턴스는 다음을 캡슐화합니다.  
  
-   <xref:System.Data.EntityClient.EntityConnection> 개체 형태의 데이터베이스 연결  
  
-   모델을 설명하는 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 개체 형태의 메타데이터  
  
-   캐시에 보관된 개체를 관리하는 <xref:System.Data.Objects.ObjectStateManager> 개체  
  
 개념적 모델을 나타내는 개체 계층이 엔터티 데이터 모델 도구에서 생성 되 면 클래스를 나타내는 합니다 <xref:System.Data.Metadata.Edm.EntityContainer> 모델에서 파생 되는 <xref:System.Data.Objects.ObjectContext>합니다.  
  
   
  
## Examples  
 이 예제는 기준으로 합니다 [AdventureWorks Sales 모델](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)합니다. 예제에서는 <xref:System.Data.Objects.ObjectContext>를 생성하는 방법을 보여 줍니다.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectContext](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectcontext)]
 [!code-vb[DP ObjectServices Concepts#ObjectContext](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectcontext)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">데이터를 개체로 쿼리(Entity Framework)</related>
    <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Data.Objects.ObjectContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectContext (System.Data.EntityClient.EntityConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.EntityClient.EntityConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As EntityConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectContext(System::Data::EntityClient::EntityConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectContext : System.Data.EntityClient.EntityConnection -&gt; System.Data.Objects.ObjectContext" Usage="new System.Data.Objects.ObjectContext connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.EntityClient.EntityConnection" />
      </Parameters>
      <Docs>
        <param name="connection">모델 및 데이터 소스 연결에 대한 참조가 포함된 <see cref="T:System.Data.EntityClient.EntityConnection" />입니다.</param>
        <summary>지정된 연결을 사용하여 <see cref="T:System.Data.Objects.ObjectContext" /> 클래스의 새 인스턴스를 초기화합니다. 생성하는 동안 메타데이터 작업 영역이 <see cref="T:System.Data.EntityClient.EntityConnection" /> 개체에서 추출됩니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="connection" />이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="connection" />가 잘못되었습니다.  
  
또는 
메타데이터 작업 영역이 잘못된 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectContext (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectContext(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectContext : string -&gt; System.Data.Objects.ObjectContext" Usage="new System.Data.Objects.ObjectContext connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">연결 문자열로, 메타데이터 정보에 대한 액세스도 제공합니다.</param>
        <summary>지정된 연결 문자열 및 기본 엔터티 컨테이너 이름을 사용하여 <see cref="T:System.Data.Objects.ObjectContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `connectionString` 는 개념적 모델을 액세스 하 고 데이터 원본에 연결 하는 데 필요한 정보를 포함 하는 문자열입니다. <xref:System.Data.EntityClient.EntityConnectionStringBuilder> 클래스를 사용하여 문자열의 형식을 올바로 지정할 수 있습니다.  
  
 응용 프로그램의 구성 파일에 저장 되어 있는 명명 된 연결 문자열을 생성 합니다. 대신이 명명 된 연결 문자열을 제공할 수 있습니다 합니다 `connectionString` 인스턴스화할 때 매개 변수는 <xref:System.Data.Objects.ObjectContext> 클래스입니다.  
  
   
  
## Examples  
 이 항목의 예제는 기준으로 합니다 [AdventureWorks Sales 모델](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)합니다. 예제에서는 <xref:System.Data.Objects.ObjectContext>를 생성하는 방법을 보여 줍니다.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectContext](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectcontext)]
 [!code-vb[DP ObjectServices Concepts#ObjectContext](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectcontext)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="connectionString" />이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="connectionString" />가 잘못되었습니다.  
  
또는 
메타데이터 작업 영역이 잘못된 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ObjectContext (System.Data.EntityClient.EntityConnection connection, string defaultContainerName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.EntityClient.EntityConnection connection, string defaultContainerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (connection As EntityConnection, defaultContainerName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ObjectContext(System::Data::EntityClient::EntityConnection ^ connection, System::String ^ defaultContainerName);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectContext : System.Data.EntityClient.EntityConnection * string -&gt; System.Data.Objects.ObjectContext" Usage="new System.Data.Objects.ObjectContext (connection, defaultContainerName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.EntityClient.EntityConnection" />
        <Parameter Name="defaultContainerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">모델 및 데이터 소스 연결에 대한 참조가 포함된 <see cref="T:System.Data.EntityClient.EntityConnection" />입니다.</param>
        <param name="defaultContainerName">기본 엔터티 컨테이너의 이름입니다. 이 메서드를 통해 <paramref name="defaultContainerName" />을 설정하면 속성이 읽기 전용이 됩니다.</param>
        <summary>지정된 연결 및 엔터티 컨테이너 이름을 사용하여 <see cref="T:System.Data.Objects.ObjectContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="connection" />이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="connection" />, <paramref name="defaultContainerName" /> 또는 메타데이터 작업 영역이 잘못된 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ObjectContext (string connectionString, string defaultContainerName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string connectionString, string defaultContainerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (connectionString As String, defaultContainerName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ObjectContext(System::String ^ connectionString, System::String ^ defaultContainerName);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectContext : string * string -&gt; System.Data.Objects.ObjectContext" Usage="new System.Data.Objects.ObjectContext (connectionString, defaultContainerName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="defaultContainerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">연결 문자열로, 메타데이터 정보에 대한 액세스도 제공합니다.</param>
        <param name="defaultContainerName">기본 엔터티 컨테이너의 이름입니다. 이 메서드를 통해 <paramref name="defaultContainerName" />을 설정하면 속성이 읽기 전용이 됩니다.</param>
        <summary>지정된 연결 문자열 및 엔터티 컨테이너 이름을 사용하여 <see cref="T:System.Data.Objects.ObjectContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `connectionString` 는 개념적 모델을 액세스 하 고 데이터 원본에 연결 하는 데 필요한 정보를 포함 하는 문자열입니다. <xref:System.Data.EntityClient.EntityConnectionStringBuilder> 클래스를 사용하여 문자열의 형식을 올바로 지정할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="connectionString" />이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="connectionString" />, <paramref name="defaultContainerName" /> 또는 메타데이터 작업 영역이 잘못된 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="AcceptAllChanges">
      <MemberSignature Language="C#" Value="public void AcceptAllChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptAllChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.AcceptAllChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcceptAllChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcceptAllChanges();" />
      <MemberSignature Language="F#" Value="member this.AcceptAllChanges : unit -&gt; unit" Usage="objectContext.AcceptAllChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>개체 컨텍스트에서 개체에 대한 변경 내용을 모두 허용합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectStateManager>의 모든 관련 항목에 대한 변경 내용을 허용하여 결과 상태가 변경되지 않은 상태나 분리된 상태 중 하나가 되도록 합니다.  
  
 이 메서드는 <xref:System.Data.Objects.ObjectStateEntry>에서 Added 또는 Modified인 모든 <xref:System.Data.Objects.ObjectStateManager> 개체를 반복한 다음 항목의 상태를 Unchanged로 설정합니다. Deleted 항목이 분리된 상태가 됩니다.  
  
 경우는 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 메서드를 호출한 하며 <xref:System.Data.Objects.SaveOptions.AcceptAllChangesAfterSave> 을 지정 하지 않았으므로 사용자 호출 해야 합니다는 <xref:System.Data.Objects.ObjectContext.AcceptAllChanges%2A> 메서드. <xref:System.Data.Objects.ObjectContext.AcceptAllChanges%2A> 메서드는 트랜잭션이 실패하여 사용자가 다시 시도하려는 경우에 유용합니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="AddObject">
      <MemberSignature Language="C#" Value="public void AddObject (string entitySetName, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddObject(string entitySetName, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddObject (entitySetName As String, entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddObject(System::String ^ entitySetName, System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.AddObject : string * obj -&gt; unit" Usage="objectContext.AddObject (entitySetName, entity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">엔터티 컨테이너 이름으로 정규화될 수도 있는 엔터티 집합 이름을 나타냅니다.</param>
        <param name="entity">추가할 <see cref="T:System.Object" />입니다.</param>
        <summary>개체를 개체 컨텍스트에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.AddObject%2A>에 대해 <xref:System.Data.Objects.ObjectContext>를 호출하여 개체를 개체 컨텍스트에 추가합니다. 개체가 데이터 원본에 아직 존재하지 않는 새 개체일 경우 이 메서드를 호출하십시오. 자세한 내용은 [연결 및 분리 개체](https://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)합니다.  
  
 <xref:System.Data.Objects.ObjectStateManager>, <xref:System.Data.EntityState.Detached> 또는 <xref:System.Data.EntityState.Deleted> 상태의 개체가 <xref:System.Data.EntityState.Added>에 추가됩니다.  
  
 개체 컨텍스트 내의 다른 개체와 연관된 새 개체를 만들 때는 다음 메서드 중 하나를 사용하여 개체를 추가합니다.  
  
-   <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A>에 대해 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 메서드를 호출하고 관련 개체를 지정합니다. 일대다 또는 다대다 관계의 경우 이 작업을 수행합니다.  
  
-   <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A>의 <xref:System.Data.Objects.DataClasses.EntityReference%601> 속성을 관련 개체에 설정합니다. 일대일 또는 다대일 관계의 경우 이 작업을 수행합니다.  
  
 자세한 내용은 [만들기, 추가, 수정, 및 개체 삭제](https://msdn.microsoft.com/library/f76f1fad-c553-4b59-820b-89b3dec2fad1)합니다.  
  
 개체가 분리 된 상태의 경우 없어야는 <xref:System.Data.EntityKey>합니다.  
  
 에 대 한 규칙을 `entitySetName` 형식으로 다음과 같습니다.  
  
-   경우는 <xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> 속성은 `null`, 해당 `entitySetName` 에서처럼 정규화 해야  *\<엔터티 컨테이너 이름 >*. *\<엔터티 집합 이름 >* 합니다.  
  
-   하는 경우 <xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> 아닙니다 `null`, 해당 `entitySetName` 일 수 있습니다  *\<엔터티 컨테이너 이름 >*. *\<엔터티 집합 이름 >* 하거나  *\<엔터티 집합 이름 >* 합니다.  
  
 경우는 `object` 에 <xref:System.Data.EntityKey> 및 `entitySetName` 에 값이 해당 <xref:System.Data.Metadata.Edm.EntitySet> 엔터티 키와 일치 해야 합니다는 <xref:System.Data.Metadata.Edm.EntitySet> 기준으로 검색 된는 `entitySetName` 및 엔터티 컨테이너 이름.  
  
   
  
## Examples  
 이 예제는 기준으로 합니다 [AdventureWorks Sales 모델](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)합니다. 새 제품을 추가 하 고 데이터베이스에 변경 내용을 저장 하는 예제.  
  
 [!code-csharp[DP ObjectServices Concepts#AddObject](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#addobject)]
 [!code-vb[DP ObjectServices Concepts#AddObject](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#addobject)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entity" /> 매개 변수가 <see langword="null" />인 경우  
  
또는 
<paramref name="entitySetName" />을 정규화할 수 없는 경우</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.AddObject(`0)" />
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="ApplyCurrentValues&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public TEntity ApplyCurrentValues&lt;TEntity&gt; (string entitySetName, TEntity currentEntity) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TEntity ApplyCurrentValues&lt;class TEntity&gt;(string entitySetName, !!TEntity currentEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyCurrentValues(Of TEntity As Class) (entitySetName As String, currentEntity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class TEntity ApplyCurrentValues(System::String ^ entitySetName, TEntity currentEntity);" />
      <MemberSignature Language="F#" Value="member this.ApplyCurrentValues : string * 'Entity -&gt; 'Entity (requires 'Entity : null)" Usage="objectContext.ApplyCurrentValues (entitySetName, currentEntity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="currentEntity" Type="TEntity" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">개체의 엔터티 형식입니다.</typeparam>
        <param name="entitySetName">개체가 속한 엔터티 집합의 이름입니다.</param>
        <param name="currentEntity">원래 개체에 적용할 속성 업데이트가 있는 분리된 개체입니다. <paramref name="currentEntity" />의 엔터티 키는 <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" />에 있는 항목의 <see cref="T:System.Data.Objects.ObjectContext" /> 속성과 일치해야 합니다.</param>
        <summary>제공된 개체의 스칼라 값을 같은 키를 가진 <see cref="T:System.Data.Objects.ObjectContext" />의 개체에 복사합니다.</summary>
        <returns>업데이트된 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 메서드 밖에 있는 개체에 대 한 변경 내용을 적용 하는 <xref:System.Data.Objects.ObjectContext>, 웹 서비스에서 수신 되는 분리 된 개체와 같은 합니다. 메서드를 개체에 제공된 된 개체의 스칼라 값을 복사 합니다 <xref:System.Data.Objects.ObjectContext> 동일한 키를 가진 합니다. 사용할 수는 <xref:System.Data.EntityKey> 데이터 원본에서이 개체의 인스턴스를 검색 하려면 분리 된 개체입니다. 자세한 내용은 [방법: 해당 키를 사용 하 여 특정 개체를 반환할](https://msdn.microsoft.com/library/2e9902af-29b0-4e5d-92db-03dfe6ec49bd)합니다. 개체의 원래 값에서과 다른 모든 값은 수정 된 것으로 표시 됩니다. 참고, 메서드가 현재 값의 관련된 개체에 적용 되지 않습니다 `currentEntity`합니다.  
  
 현재 값을 사용 하 여 그래프를 있고 원래 값을 적용할 경우 호출 <xref:System.Data.Objects.ObjectContext.ApplyOriginalValues%2A> 메서드.  
  
 사용할 수도 있습니다는 <xref:System.Data.Objects.ObjectSet%601.ApplyCurrentValues%2A> 의 합니다 <xref:System.Data.Objects.ObjectSet%601> 또는 <xref:System.Data.Objects.ObjectStateEntry.ApplyCurrentValues%2A> 메서드를 <xref:System.Data.Objects.ObjectStateEntry>합니다. 자세한 내용은 [N 계층 응용 프로그램 빌드](https://msdn.microsoft.com/library/9439d2ba-6b5f-44e8-be65-8a442d922cbb)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entitySetName" /> 또는 <paramref name="current" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="entitySetName" />의 <see cref="T:System.Data.Metadata.Edm.EntitySet" />이 개체 <see cref="T:System.Data.EntityKey" />의 <see cref="T:System.Data.Metadata.Edm.EntitySet" />과 일치하지 않습니다.  
  
또는 
개체가 <see cref="T:System.Data.Objects.ObjectStateManager" /> 상태에 있지 않거나 <see cref="F:System.Data.EntityState.Detached" /> 상태에 있습니다.  
  
또는 
제공된 개체의 엔터티 키가 잘못되었습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="entitySetName" />이 빈 문자열인 경우</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.ApplyCurrentValues(`0)" />
        <altmember cref="M:System.Data.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyOriginalValues&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public TEntity ApplyOriginalValues&lt;TEntity&gt; (string entitySetName, TEntity originalEntity) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TEntity ApplyOriginalValues&lt;class TEntity&gt;(string entitySetName, !!TEntity originalEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyOriginalValues(Of TEntity As Class) (entitySetName As String, originalEntity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class TEntity ApplyOriginalValues(System::String ^ entitySetName, TEntity originalEntity);" />
      <MemberSignature Language="F#" Value="member this.ApplyOriginalValues : string * 'Entity -&gt; 'Entity (requires 'Entity : null)" Usage="objectContext.ApplyOriginalValues (entitySetName, originalEntity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="originalEntity" Type="TEntity" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">엔터티 개체의 형식입니다.</typeparam>
        <param name="entitySetName">개체가 속한 엔터티 집합의 이름입니다.</param>
        <param name="originalEntity">개체에 적용할 원래 값이 있는 분리된 개체입니다. <paramref name="originalEntity" />의 엔터티 키는 <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" />에 있는 항목의 <see cref="T:System.Data.Objects.ObjectContext" /> 속성과 일치해야 합니다.</param>
        <summary>제공된 개체의 스칼라 값을 같은 키를 가진 <see cref="T:System.Data.Objects.ObjectContext" />에 있는 개체의 원래 값 집합에 복사합니다.</summary>
        <returns>업데이트된 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Data.Objects.ObjectContext.ApplyOriginalValues%2A> 메서드 밖에 있는 개체에 대 한 변경 내용을 적용 하는 <xref:System.Data.Objects.ObjectContext>, 웹 서비스에서 수신 되는 분리 된 개체와 같은 합니다. 메서드를 개체에 제공된 된 개체의 스칼라 값을 복사 합니다 <xref:System.Data.Objects.ObjectContext> 동일한 키를 가진 합니다. 사용할 수는 <xref:System.Data.EntityKey> 데이터 원본에서이 개체의 인스턴스를 검색 하려면 분리 된 개체입니다. 자세한 내용은 [방법: 해당 키를 사용 하 여 특정 개체를 반환할](https://msdn.microsoft.com/library/2e9902af-29b0-4e5d-92db-03dfe6ec49bd)합니다. 개체의 현재 값과 다른 모든 값은 수정 된 것으로 표시 됩니다. 참고, 메서드가 현재 값의 관련된 개체에 적용 되지 않습니다 `originalEntity`합니다.  
  
 원래 값을 사용 하 여 그래프를 있고 현재 값을 적용할 경우 호출 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 메서드.  
  
 사용할 수도 있습니다는 <xref:System.Data.Objects.ObjectSet%601.ApplyOriginalValues%2A> 의 합니다 <xref:System.Data.Objects.ObjectSet%601> 또는 <xref:System.Data.Objects.ObjectStateEntry.ApplyOriginalValues%2A> 메서드를 <xref:System.Data.Objects.ObjectStateEntry>합니다. 자세한 내용은 [N 계층 응용 프로그램 빌드](https://msdn.microsoft.com/library/9439d2ba-6b5f-44e8-be65-8a442d922cbb)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entitySetName" /> 또는 <paramref name="original" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="entitySetName" />의 <see cref="T:System.Data.Metadata.Edm.EntitySet" />이 개체 <see cref="T:System.Data.EntityKey" />의 <see cref="T:System.Data.Metadata.Edm.EntitySet" />과 일치하지 않습니다.  
  
또는 
<see cref="T:System.Data.Objects.ObjectStateEntry" /> 개체는 <see cref="T:System.Data.Objects.ObjectStateManager" />에서 찾을 수 없습니다. 또는 
개체가 <see cref="F:System.Data.EntityState.Added" /> 또는 <see cref="F:System.Data.EntityState.Detached" /> 상태에 있습니다.  
  
또는 
제공된 개체의 엔터티 키가 잘못되었거나 속성이 변경되었습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="entitySetName" />이 빈 문자열인 경우</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.ApplyOriginalValues(`0)" />
        <altmember cref="M:System.Data.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyPropertyChanges">
      <MemberSignature Language="C#" Value="public void ApplyPropertyChanges (string entitySetName, object changed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyPropertyChanges(string entitySetName, object changed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyPropertyChanges (entitySetName As String, changed As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyPropertyChanges(System::String ^ entitySetName, System::Object ^ changed);" />
      <MemberSignature Language="F#" Value="member this.ApplyPropertyChanges : string * obj -&gt; unit" Usage="objectContext.ApplyPropertyChanges (entitySetName, changed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Use ApplyCurrentValues instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="changed" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">개체가 속한 엔터티 집합의 이름입니다.</param>
        <param name="changed">원래 개체에 적용할 속성 업데이트가 있는 분리된 개체입니다.</param>
        <summary>분리된 개체의 속성 변경을 개체 컨텍스트에 이미 연결된 개체에 적용합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 메서드는 수정된 분리 버전의 개체에 대한 속성 변경을 <xref:System.Data.Objects.ObjectContext>에 연결된 원래 버전에 적용하는 데 사용됩니다. 이 메서드는 엔터티 개체를 분리하여 속성이 업데이트된 원격 응용 프로그램에 전송하는 웹 서비스 같은 시나리오를 지원합니다. 이 메서드를 사용하면 이러한 변경 내용을 보다 쉽게 원래 개체에 다시 적용할 수 있습니다.  
  
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A>를 실행한 후에는 개체의 상태가 <xref:System.Data.EntityState.Modified>가 됩니다. <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 메서드를 호출하여 데이터 원본을 업데이트해야 합니다.  
  
 원래 개체는 <xref:System.Data.Objects.ObjectStateManager>에 있어야 하고 <xref:System.Data.EntityState.Modified> 또는 <xref:System.Data.EntityState.Unchanged> 상태여야 합니다. 원래 개체는 수정 된 속성의 경우에 수정 됩니다는 `changed` 개체입니다.  
  
 제공된 개체의 <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> 속성은 유효한 <xref:System.Data.EntityKey>로 설정되어야 합니다.  
  
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A>는 탐색 속성 또는 관련 개체에 영향을 주지 않습니다.  
  
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A>는 형식에 대한 엔터티 메타데이터에 있는 속성만 설정합니다. 예를 들어 partial 클래스에 추가된 속성은 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 작업에 포함되지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entitySetName" />이 <see langword="null" />이거나 빈 문자열인 경우  
  
또는 
<paramref name="changed" />가 <see langword="null" />일 경우</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="entitySetName" />의 <see cref="T:System.Data.Metadata.Edm.EntitySet" />가 개체 <see cref="T:System.Data.EntityKey" />의 <see cref="T:System.Data.Metadata.Edm.EntitySet" />과 일치하지 않는 경우  
  
또는 
엔터티의 상태가 <see cref="F:System.Data.EntityState.Modified" /> 또는 <see cref="F:System.Data.EntityState.Unchanged" />가 아닌 경우  
  
또는 
원래 개체가 컨텍스트에 연결되지 않은 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="changed" /> 개체의 형식이 원래 개체의 형식과 다른 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (System.Data.Objects.DataClasses.IEntityWithKey entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(class System.Data.Objects.DataClasses.IEntityWithKey entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Attach(System.Data.Objects.DataClasses.IEntityWithKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As IEntityWithKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Data::Objects::DataClasses::IEntityWithKey ^ entity);" />
      <MemberSignature Language="F#" Value="member this.Attach : System.Data.Objects.DataClasses.IEntityWithKey -&gt; unit" Usage="objectContext.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Data.Objects.DataClasses.IEntityWithKey" />
      </Parameters>
      <Docs>
        <param name="entity">연결할 개체입니다.</param>
        <summary>개체에 엔터티 키가 있으면 개체 또는 개체 그래프를 개체 컨텍스트에 연결합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.Attach%2A>에 대해 <xref:System.Data.Objects.ObjectContext>를 호출하여 개체를 개체 컨텍스트에 연결합니다. 개체가 이미 데이터 원본에 있지만 현재 컨텍스트에 연결되지 않은 경우 이 메서드를 호출하십시오. 자세한 내용은 [사용자 지정 개체](https://msdn.microsoft.com/library/af6f07ce-2261-4c65-87cf-d018ad082921)합니다.  
  
 <xref:System.Data.Objects.ObjectContext.Attach%2A>는 개체 또는 개체 그래프의 최상위 개체를 연결하는 데 사용됩니다.  
  
 연결되고 있는 개체는 <xref:System.Data.Objects.DataClasses.IEntityWithKey>를 구현하여 <xref:System.Data.EntityKey>를 노출해야 합니다. 생성된 엔터티 클래스는 모두 <xref:System.Data.Objects.DataClasses.IEntityWithKey>를 구현해야 합니다.  
  
 관련된 개체를 연결 하는 경우 호출 해야 `Attach` 에 <xref:System.Data.Objects.DataClasses.EntityReference%601> 또는 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 관계를 정의 합니다.  
  
 이 메서드는 <xref:System.Data.Objects.ObjectContext.AttachTo%2A> 메서드를 호출합니다.  
  
 개체를 연결할 때는 다음 사항을 고려해야 합니다.  
  
-   연결되고 있는 개체에 관련 개체가 있으면 이러한 개체도 개체 컨텍스트에 연결됩니다.  
  
-   개체는 변경되지 않은 상태로 개체 컨텍스트에 추가됩니다.  
  
-   <xref:System.Data.Objects.ObjectContext.Attach%2A> 메서드에 전달되는 개체에는 올바른 <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> 값이 있어야 합니다. 개체에 올바른 <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> 값이 없으면 <xref:System.Data.Objects.ObjectContext.AttachTo%2A> 메서드를 사용하여 엔터티 집합의 이름을 지정합니다.  
  
   
  
## Examples  
 이 항목의 예제는 기준으로 합니다 [AdventureWorks Sales 모델](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)합니다. 이 예제에서는 두 개체를 연결한 다음 관계를 정의합니다.  
  
 [!code-csharp[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#attachrelatedobjects)]
 [!code-vb[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#attachrelatedobjects)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entity" />이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException">엔터티 키가 잘못된 경우</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.Attach(`0)" />
      </Docs>
    </Member>
    <Member MemberName="AttachTo">
      <MemberSignature Language="C#" Value="public void AttachTo (string entitySetName, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachTo(string entitySetName, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.AttachTo(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachTo (entitySetName As String, entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachTo(System::String ^ entitySetName, System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.AttachTo : string * obj -&gt; unit" Usage="objectContext.AttachTo (entitySetName, entity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">엔터티 컨테이너 이름으로 정규화될 수도 있는 엔터티 집합 이름을 나타냅니다.</param>
        <param name="entity">연결할 <see cref="T:System.Object" />입니다.</param>
        <summary>특정 엔터티 집합에서 개체 또는 개체 그래프를 개체 컨텍스트에 연결합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 <xref:System.Data.Objects.ObjectContext.AttachTo%2A> 에 <xref:System.Data.Objects.ObjectContext> 개체를 특정 엔터티 집합 개체 컨텍스트에 연결할 아니면 개체에는 `null` (`Nothing` Visual Basic의) <xref:System.Data.EntityKey> 값입니다. 자세한 내용은 [연결 및 분리 개체](https://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)합니다.  
  
 연결되고 있는 개체는 단일 개체 또는 그래프의 일부일 수 있습니다.  
  
 에 대 한 규칙을 `entitySetName` 형식으로 다음과 같습니다.  
  
-   경우는 <xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> 속성은 `null`, 해당 `entitySetName` 에서처럼 정규화 해야  *\<엔터티 컨테이너 이름 >*. *\<엔터티 집합 이름 >* 합니다.  
  
-   경우는 <xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> 아닙니다 `null`, 해당 `entitySetName` 일 수 있습니다  *\<엔터티 컨테이너 이름 >*. *\<엔터티 집합 이름 >* 하거나  *\<엔터티 집합 이름 >* 합니다.  
  
 연결되고 있는 개체에는 관련 <xref:System.Data.EntityKey>가 없어도 됩니다. 개체에 없는 경우 엔터티 키가 다음 `entitySetName` 빈 문자열일 수 없습니다.  
  
 연결 중인 개체가 있으면는 <xref:System.Data.EntityKey> 및 `entitySetName` 에 값이 해당 <xref:System.Data.Metadata.Edm.EntitySet> 엔터티 키와 일치 해야 합니다는 <xref:System.Data.Metadata.Edm.EntitySet> 를 기반으로 찾을 수는 `entitySetName` 및 엔터티 컨테이너 이름입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entity" />이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException">엔터티 집합이 잘못된 경우  
  
또는 
개체에 임시 키가 있는 경우  
  
또는 
개체에 <see cref="T:System.Data.EntityKey" />가 있고 <see cref="T:System.Data.Metadata.Edm.EntitySet" />이 메서드의 인수로 전달된 엔터티 집합과 일치하지 않는 경우  
  
또는 
개체에 <see cref="T:System.Data.EntityKey" />가 없고 엔터티 집합이 제공되지 않은 경우  
  
또는 
개체 그래프의 개체에 임시 <see cref="T:System.Data.EntityKey" />가 있는 경우  
  
또는 
개체 그래프의 개체에 잘못된 <see cref="T:System.Data.EntityKey" />가 있는 경우(예: 키에 있는 값이 개체에 있는 값과 일치하지 않는 경우)  
  
또는 
지정된 <paramref name="entitySetName" /> 이름 및 엔터티 컨테이너 이름에서 엔터티 집합을 찾을 수 없는 경우  
  
또는 
개체 그래프의 개체가 다른 상태 관리자에 이미 있는 경우</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.Attach(`0)" />
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="CommandTimeout">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; CommandTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; CommandTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.CommandTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTimeout As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;int&gt; CommandTimeout { Nullable&lt;int&gt; get(); void set(Nullable&lt;int&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTimeout : Nullable&lt;int&gt; with get, set" Usage="System.Data.Objects.ObjectContext.CommandTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>모든 개체 컨텍스트 작업에 대한 제한 시간(초) 값을 가져오거나 설정합니다. <see langword="null" /> 값을 지정하면 내부 공급자의 기본값이 사용됩니다.</summary>
        <value>제한 시간(초) 값인 <see cref="T:System.Int32" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 개체 쿼리 및 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 작업의 기본 제한 시간은 기본 연결 공급자에 정의됩니다. 그러나 다음 예제에서와 같이 <xref:System.Data.Objects.ObjectContext.CommandTimeout%2A>의 <xref:System.Data.Objects.ObjectContext> 속성을 사용하여 이 기본 제한 시간 값을 재정의할 수 있습니다.  
  
 [!code-csharp[DP ObjectServices Concepts#QueryTimeout](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querytimeout)]
 [!code-vb[DP ObjectServices Concepts#QueryTimeout](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querytimeout)]  
  
 쿼리가 복잡하거나 다른 성능 문제로 인해 쿼리 또는 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 호출의 제한 시간이 자주 초과될 때 사용하십시오.  
  
   
  
## Examples  
 [개체 쿼리](https://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">제한 시간 값이 0보다 작은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbConnection ^ Connection { System::Data::Common::DbConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.Common.DbConnection" Usage="System.Data.Objects.ObjectContext.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>개체 컨텍스트에서 사용하는 연결을 가져옵니다.</summary>
        <value>연결인 <see cref="T:System.Data.Common.DbConnection" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 생성자에 전달되었거나 생성 도중 만들어진 연결 개체를 반환합니다. 연결의 소유권은 사용 되는 생성자에 의해 결정 됩니다.  
  
   
  
## Examples  
 이 예제에서는 장기 실행 <xref:System.Data.EntityClient.EntityConnection>의 생성자에 전달되는 <xref:System.Data.Objects.ObjectContext> 개체를 만듭니다. 이 연결은 수동으로 열립니다. <xref:System.Data.EntityClient.EntityConnection> 개체와 <xref:System.Data.Objects.ObjectContext> 개체는 모두 수동으로 삭제됩니다.  
  
 [!code-csharp[DP ObjectServices Concepts#OpenEntityConnection](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#openentityconnection)]
 [!code-vb[DP ObjectServices Concepts#OpenEntityConnection](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#openentityconnection)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Data.Objects.ObjectContext" /> 인스턴스가 삭제된 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="ContextOptions">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectContextOptions ContextOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Objects.ObjectContextOptions ContextOptions" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.ContextOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContextOptions As ObjectContextOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Objects::ObjectContextOptions ^ ContextOptions { System::Data::Objects::ObjectContextOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContextOptions : System.Data.Objects.ObjectContextOptions" Usage="System.Data.Objects.ObjectContext.ContextOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectContextOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.Objects.ObjectContextOptions" />의 동작에 영향을 미치는 옵션이 포함된 <see cref="T:System.Data.Objects.ObjectContext" /> 인스턴스를 가져옵니다.</summary>
        <value><see cref="T:System.Data.Objects.ObjectContextOptions" />의 동작에 영향을 미치는 옵션이 포함된 <see cref="T:System.Data.Objects.ObjectContext" /> 인스턴스입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabase">
      <MemberSignature Language="C#" Value="public void CreateDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateDatabase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateDatabase" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateDatabase ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateDatabase();" />
      <MemberSignature Language="F#" Value="member this.CreateDatabase : unit -&gt; unit" Usage="objectContext.CreateDatabase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 데이터 소스 연결과 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />에 있는 메타데이터를 사용하여 데이터베이스를 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 <xref:System.Data.Objects.ObjectContext.CreateDatabaseScript%2A> 데이터 정의 언어 (DDL) 스크립트를 볼 수 있습니다. 호출 <xref:System.Data.Objects.ObjectContext.CreateDatabase%2A> 스크립트를 실행 합니다.  
  
 대부분의 작업에 위임 되는 <xref:System.Data.Common.DbProviderServices.CreateDatabase%2A> 메서드.  
  
 자세한 내용은 [데이터 정의 언어로 작업](~/docs/framework/data/adonet/ef/working-with-data-definition-language.md)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabaseScript" />
        <altmember cref="M:System.Data.Objects.ObjectContext.DatabaseExists" />
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseScript">
      <MemberSignature Language="C#" Value="public string CreateDatabaseScript ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string CreateDatabaseScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateDatabaseScript" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDatabaseScript () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ CreateDatabaseScript();" />
      <MemberSignature Language="F#" Value="member this.CreateDatabaseScript : unit -&gt; string" Usage="objectContext.CreateDatabaseScript " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />에 있는 메타데이터에 대한 스키마 개체(테이블, 기본 키, 외래 키)를 만드는 DLL(데이터 정의 언어) 스크립트를 생성합니다. <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />은 SSDL(저장소 스키마 정의 언어) 파일의 메타데이터를 로드합니다.</summary>
        <returns><see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />에 있는 메타데이터에 대한 스키마 개체를 만드는 DLL 스크립트입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 <xref:System.Data.Objects.ObjectContext.CreateDatabaseScript%2A> DDL 스크립트를 볼 수 있습니다. 호출 <xref:System.Data.Objects.ObjectContext.CreateDatabase%2A> 스크립트를 실행 합니다.  
  
 대부분의 작업에 위임 되는 <xref:System.Data.Common.DbProviderServices.CreateDatabase%2A> 메서드.  
  
 자세한 내용은 [데이터 정의 언어로 작업](~/docs/framework/data/adonet/ef/working-with-data-definition-language.md)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabase" />
        <altmember cref="M:System.Data.Objects.ObjectContext.DatabaseExists" />
      </Docs>
    </Member>
    <Member MemberName="CreateEntityKey">
      <MemberSignature Language="C#" Value="public System.Data.EntityKey CreateEntityKey (string entitySetName, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityKey CreateEntityKey(string entitySetName, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateEntityKey (entitySetName As String, entity As Object) As EntityKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityKey ^ CreateEntityKey(System::String ^ entitySetName, System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.CreateEntityKey : string * obj -&gt; System.Data.EntityKey" Usage="objectContext.CreateEntityKey (entitySetName, entity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">엔터티 개체가 속한 엔터티 집합의 정규화된 이름입니다.</param>
        <param name="entity">엔터티 키를 검색 중인 개체입니다.</param>
        <summary>특정 개체에 대한 엔터티 키를 만들거나 엔터티 키가 이미 있는 경우 해당 엔터티 키를 반환합니다.</summary>
        <returns>개체의 <see cref="T:System.Data.EntityKey" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Data.EntityKey> 존재 하지 않는 합니다 `entity`, <xref:System.Data.Objects.ObjectContext.CreateEntityKey%2A> 메서드에 대 한 새 키를 만듭니다.  
  
 이 메서드는 같은 <xref:System.Data.EntityKey>가 있는 개체가 <xref:System.Data.Objects.ObjectContext>에 이미 연결되어 있는지 여부를 확인하는 데 사용됩니다. 같은 <xref:System.Data.EntityKey>가 있는 개체가 이미 연결되어 있으면 예외가 발생합니다. <xref:System.Data.Objects.ObjectContext.CreateEntityKey%2A> 메서드를 호출하기 전에 <xref:System.Data.EntityKey> 메서드를 사용하여 분리된 개체의 <xref:System.Data.Objects.ObjectContext.Attach%2A>를 검색해 보십시오.  
  
   
  
## Examples  
 이 항목의 예제는 기준으로 합니다 [AdventureWorks Sales 모델](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)합니다. 이 예제에서는 <xref:System.Data.Objects.ObjectContext.CreateEntityKey%2A>를 사용하여 기존 개체의 엔터티 키를 검색합니다.  
  
 [!code-csharp[DP ObjectServices Concepts#ApplyItemUpdatesGetObject](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#applyitemupdatesgetobject)]
 [!code-vb[DP ObjectServices Concepts#ApplyItemUpdatesGetObject](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#applyitemupdatesgetobject)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">매개 변수 중 하나가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="entitySetName" />이 비어 있는 경우  
  
또는 
<paramref name="entity" /> 개체의 형식이 엔터티 집합에 없는 경우  
  
또는 
<paramref name="entitySetName" />이 정규화되어 있지 않은 경우</exception>
        <exception cref="T:System.InvalidOperationException">제공된 매개 변수를 기반으로 엔터티 키를 성공적으로 생성할 수 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObject&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T CreateObject&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T CreateObject&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateObject``1" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject(Of T As Class) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class T CreateObject();" />
      <MemberSignature Language="F#" Value="member this.CreateObject : unit -&gt; 'T (requires 'T : null)" Usage="objectContext.CreateObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">반환될 개체의 형식입니다.</typeparam>
        <summary>요청된 형식의 인스턴스를 만들고 반환합니다.</summary>
        <returns>요청된 형식 <paramref name="T" />의 인스턴스이거나, Entity Framework에서 <paramref name="T" />를 사용할 수 있게 만드는 파생 형식의 인스턴스입니다. 반환된 개체는 요청된 형식의 인스턴스이거나, Entity Framework에서 요청된 형식을 사용할 수 있게 만드는 파생 형식의 인스턴스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.CreateObject%2A> Entity Framework에 의해 반환된 된 개체는 올바르게 관리할 수 있습니다 있도록 POCO 사용자 지정 데이터 클래스에 메서드를 사용 합니다. 자세한 내용은 참조 하세요. [POCO 프록시 만들기에 대 한 요구 사항](https://msdn.microsoft.com/library/dcdbf982-9b9d-4582-806a-64de4a1c03c8) 하 고 [POCO 엔터티 작업](https://msdn.microsoft.com/library/5e0fb82a-b6d1-41a1-b37b-c12db61629d3)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObjectSet&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectSet&lt;TEntity&gt; CreateObjectSet&lt;TEntity&gt; () where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectSet`1&lt;!!TEntity&gt; CreateObjectSet&lt;class TEntity&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateObjectSet``1" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObjectSet(Of TEntity As Class) () As ObjectSet(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class System::Data::Objects::ObjectSet&lt;TEntity&gt; ^ CreateObjectSet();" />
      <MemberSignature Language="F#" Value="member this.CreateObjectSet : unit -&gt; System.Data.Objects.ObjectSet&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="objectContext.CreateObjectSet " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectSet&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TEntity">요청된 <see cref="T:System.Data.Objects.ObjectSet`1" />의 엔터티 형식입니다.</typeparam>
        <summary>지정된 엔터티 형식의 개체에 대한 쿼리, 추가, 수정 및 삭제에 사용되는 새 <see cref="T:System.Data.Objects.ObjectSet`1" /> 인스턴스를 만듭니다.</summary>
        <returns>새 <see cref="T:System.Data.Objects.ObjectSet`1" /> 인스턴스입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> 속성이 <see cref="T:System.Data.Objects.ObjectContext" />에 설정되지 않았습니다.  
  
또는 
지정된 형식은 둘 이상의 엔터티 집합에 속합니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObjectSet&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectSet&lt;TEntity&gt; CreateObjectSet&lt;TEntity&gt; (string entitySetName) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectSet`1&lt;!!TEntity&gt; CreateObjectSet&lt;class TEntity&gt;(string entitySetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateObjectSet``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObjectSet(Of TEntity As Class) (entitySetName As String) As ObjectSet(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class System::Data::Objects::ObjectSet&lt;TEntity&gt; ^ CreateObjectSet(System::String ^ entitySetName);" />
      <MemberSignature Language="F#" Value="member this.CreateObjectSet : string -&gt; System.Data.Objects.ObjectSet&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="objectContext.CreateObjectSet entitySetName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectSet&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">요청된 <see cref="T:System.Data.Objects.ObjectSet`1" />의 엔터티 형식입니다.</typeparam>
        <param name="entitySetName">반환된 <see cref="T:System.Data.Objects.ObjectSet`1" />에 대한 엔터티 집합의 이름입니다. <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" />에 <see cref="T:System.Data.Objects.ObjectContext" /> 속성이 설정되어 있지 않은 경우 문자열을 기본 컨테이너 이름으로 정규화해야 합니다.</param>
        <summary>지정된 형식과 지정된 엔터티 집합 이름을 갖는 개체의 쿼리, 추가, 수정 및 삭제에 사용되는 새 <see cref="T:System.Data.Objects.ObjectSet`1" /> 인스턴스를 만듭니다.</summary>
        <returns>새 <see cref="T:System.Data.Objects.ObjectSet`1" /> 인스턴스입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="entitySetName" />의 <see cref="T:System.Data.Metadata.Edm.EntitySet" />이 개체 <see cref="T:System.Data.EntityKey" />의 <see cref="T:System.Data.Metadata.Edm.EntitySet" />과 일치하지 않습니다.  
  
또는 
<see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> 속성이 <see cref="T:System.Data.Objects.ObjectContext" />에 설정되어 있지 않고 이름이 <paramref name="entitySetName" /> 매개 변수의 일부로 정규화되지 않았습니다.  
  
또는 
지정된 형식은 둘 이상의 엔터티 집합에 속합니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateProxyTypes">
      <MemberSignature Language="C#" Value="public void CreateProxyTypes (System.Collections.Generic.IEnumerable&lt;Type&gt; types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateProxyTypes(class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateProxyTypes (types As IEnumerable(Of Type))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateProxyTypes(System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="member this.CreateProxyTypes : seq&lt;Type&gt; -&gt; unit" Usage="objectContext.CreateProxyTypes types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Collections.Generic.IEnumerable&lt;System.Type&gt;" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="types">개념적 모델에 매핑되는 사용자 지정 데이터 클래스를 나타내는 <see cref="T:System.Type" /> 개체의 열거형입니다.</param>
        <summary>제공된 열거형의 각 형식에 대해 Entity Framework에서 사용할 수 있는 동등한 형식을 생성합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 개별 형식에 `types` 개념적 모델의 엔터티 형식에 매핑되지 않는 열거형은 무시 됩니다.  
  
 자세한 내용은 참조 하세요. [POCO 프록시 만들기에 대 한 요구 사항](https://msdn.microsoft.com/library/dcdbf982-9b9d-4582-806a-64de4a1c03c8) 하 고 [POCO 엔터티 작업](https://msdn.microsoft.com/library/5e0fb82a-b6d1-41a1-b37b-c12db61629d3)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; CreateQuery&lt;T&gt; (string queryString, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!T&gt; CreateQuery&lt;T&gt;(string queryString, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateQuery(Of T) (queryString As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ CreateQuery(System::String ^ queryString, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.CreateQuery : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectContext.CreateQuery (queryString, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryString" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">반환된 <see cref="T:System.Data.Objects.ObjectQuery`1" />의 엔터티 형식입니다.</typeparam>
        <param name="queryString">실행할 쿼리 문자열입니다.</param>
        <param name="parameters">쿼리에 전달할 매개 변수입니다.</param>
        <summary>지정된 쿼리 문자열을 사용하여 현재 개체 컨텍스트에서 <see cref="T:System.Data.Objects.ObjectQuery`1" />을 만듭니다.</summary>
        <returns>지정된 형식의 <see cref="T:System.Data.Objects.ObjectQuery`1" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.CreateQuery%2A>를 사용하여 현재 개체 컨텍스트에 속하는 지정된 형식의 <xref:System.Data.Objects.ObjectQuery%601>를 만듭니다.  
  
   
  
## Examples  
 이 예제는 기준으로 합니다 [AdventureWorks Sales 모델](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)합니다.  
  
 예제에서는 간단한 쿼리를 만들어 결과 컬렉션에서 반복합니다.  
  
 [!code-csharp[DP ObjectServices Concepts#CreateQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#createquery)]
 [!code-vb[DP ObjectServices Concepts#CreateQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#createquery)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="queryString" /> 또는 <paramref name="parameters" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">개념적 모델 쿼리</related>
      </Docs>
    </Member>
    <Member MemberName="DatabaseExists">
      <MemberSignature Language="C#" Value="public bool DatabaseExists ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DatabaseExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.DatabaseExists" />
      <MemberSignature Language="VB.NET" Value="Public Function DatabaseExists () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DatabaseExists();" />
      <MemberSignature Language="F#" Value="member this.DatabaseExists : unit -&gt; bool" Usage="objectContext.DatabaseExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 데이터 소스 연결에서 데이터베이스로 지정된 데이터베이스가 데이터 소스에 존재하는지를 확인합니다.</summary>
        <returns>데이터베이스가 있으면 <see langword="true" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 작업에 위임 되는 <xref:System.Data.Common.DbProviderServices.DatabaseExists%2A> 메서드.  
  
 자세한 내용은 [데이터 정의 언어로 작업](~/docs/framework/data/adonet/ef/working-with-data-definition-language.md)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabase" />
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabaseScript" />
      </Docs>
    </Member>
    <Member MemberName="DefaultContainerName">
      <MemberSignature Language="C#" Value="public string DefaultContainerName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultContainerName" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.DefaultContainerName" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultContainerName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultContainerName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultContainerName : string with get, set" Usage="System.Data.Objects.ObjectContext.DefaultContainerName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>기본 컨테이너 이름을 가져오거나 설정합니다.</summary>
        <value>기본 컨테이너 이름인 <see cref="T:System.String" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> 반환 하지 않습니다 `null`; 값 집합 또는 빈 문자열을 반환 합니다. 사용자는이 속성을 설정할 수 `null`에 있지만 내부적으로 이름을 설정 빈 문자열인 경우에 모두 빈 문자열을 확인할 필요가 있으므로 및 `null`합니다.  
  
 기본 컨테이너 이름도 생성자의 일부로 정의됩니다. 기본 컨테이너 이름이 protected 생성자를 통해 설정되는 경우 속성은 읽기 전용이 됩니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabase">
      <MemberSignature Language="C#" Value="public void DeleteDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteDatabase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.DeleteDatabase" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDatabase ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDatabase();" />
      <MemberSignature Language="F#" Value="member this.DeleteDatabase : unit -&gt; unit" Usage="objectContext.DeleteDatabase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 데이터 소스 연결에서 데이터베이스로 지정된 데이터베이스를 삭제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 작업에 위임 되는 <xref:System.Data.Common.DbProviderServices.DeleteDatabase%2A> 메서드.  
  
 자세한 내용은 [데이터 정의 언어로 작업](~/docs/framework/data/adonet/ef/working-with-data-definition-language.md)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabase" />
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabaseScript" />
        <altmember cref="M:System.Data.Objects.ObjectContext.DatabaseExists" />
      </Docs>
    </Member>
    <Member MemberName="DeleteObject">
      <MemberSignature Language="C#" Value="public void DeleteObject (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteObject(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.DeleteObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteObject (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteObject(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.DeleteObject : obj -&gt; unit" Usage="objectContext.DeleteObject entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">삭제할 엔터티를 지정하는 개체입니다. 개체는 <see cref="F:System.Data.EntityState.Detached" />를 제외한 모든 상태일 수 있습니다.</param>
        <summary>개체에 삭제 표시를 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectStateManager>에서 삭제하도록 개체에 표시합니다. <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 메서드가 호출되면 개체가 데이터 원본에서 삭제됩니다.  
  
 부모 개체를 삭제하면 제약 조건 관계의 자식 개체도 모두 삭제됩니다. 이 결과는 해당 관계에 대한 연결에 `CascadeDelete` 속성을 사용하는 것과 동일합니다.  
  
 <xref:System.Data.Objects.ObjectContext.DeleteObject%2A> 는 이미 삭제 된 개체에서 메서드를 호출할 수 있습니다.  
  
   
  
## Examples  
 이러한 예제를 기반으로 합니다 [AdventureWorks Sales 모델](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)합니다.  
  
 이 예에서는 <xref:System.Data.EntityKey> 데이터 원본에서 제품 개체를 검색 하는 특정 제품 Id를 사용 하 여 키를 사용 하 고 제품을 삭제 한 다음 데이터베이스에 변경 내용을 저장 합니다.  
  
 [!code-csharp[DP ObjectServices Concepts#DeleteObject](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#deleteobject)]
 [!code-vb[DP ObjectServices Concepts#DeleteObject](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#deleteobject)]  
  
 이 예제에서는 기존 주문 항목을 삭제, 새 항목을 추가 및 데이터베이스에 변경 내용을 저장 합니다.  
  
 [!code-csharp[DP ObjectServices Concepts#SaveChanges](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#savechanges)]
 [!code-vb[DP ObjectServices Concepts#SaveChanges](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#savechanges)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entity" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="entity" />가 없는 경우</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.DeleteObject(`0)" />
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Detach">
      <MemberSignature Language="C#" Value="public void Detach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Detach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Detach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Detach (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Detach(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.Detach : obj -&gt; unit" Usage="objectContext.Detach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">분리할 개체입니다. <paramref name="entity" />만 제거됩니다. 같은 <see cref="T:System.Data.Objects.ObjectStateManager" />에서 추적하는 관련 개체가 있는 경우 이러한 개체는 자동으로 분리되지 않습니다.</param>
        <summary>개체 컨텍스트에서 개체를 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectStateManager>에서 개체를 제거합니다. 이렇게 하면 해당 개체에 대한 변경 내용 추적 및 ID 확인을 사용할 수 없게 됩니다. 자세한 내용은 [연결 및 분리 개체](https://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)합니다.  
  
 <xref:System.Data.Objects.ObjectContext.Detach%2A> 메서드를 호출한 후에는 시스템에서 이 개체를 가리키는 참조를 더 이상 유지하지 않으므로 가비지 수집기에서 수집할 수 있습니다.  
  
> [!NOTE]
>  가비지 수집은 사용자 코드에 분리된 개체에 대한 참조가 없을 경우에만 발생할 수 있습니다.  
  
 개체를 분리할 때는 다음 사항을 고려해야 합니다.  
  
-   <xref:System.Data.Objects.ObjectContext.Detach%2A>는 메서드에 전달되는 특정 개체에만 영향을 줍니다. 분리할 개체의 관련 개체가 개체 컨텍스트에 있는 경우 해당 개체는 분리되지 않습니다.  
  
-   개체 분리는 데이터 원본의 데이터에 영향을 주지 않습니다.  
  
-   하위 삭제 지시문 및 참조 제약 조건은 분리 작업 동안 적용되지 않습니다.  
  
 자세한 내용은 [연결 및 분리 개체](https://msdn.microsoft.com/library/41d5c1ef-1b78-4502-aa10-7e1438d62d23)합니다.  
  
   
  
## Examples  
 [!code-csharp[DP ObjectServices Concepts#DetachObjects](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#detachobjects)]
 [!code-vb[DP ObjectServices Concepts#DetachObjects](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#detachobjects)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entity" />이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="entity" />가 이 <see cref="T:System.Data.Objects.ObjectContext" />와 연결되어 있지 않은 경우(예: 새로 만들어진 후 컨텍스트에 아직 연결되지 않았거나, 다른 컨텍스트를 통해 가져왔거나, 이미 분리된 경우)</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.Detach(`0)" />
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="DetectChanges">
      <MemberSignature Language="C#" Value="public void DetectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.DetectChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub DetectChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetectChanges();" />
      <MemberSignature Language="F#" Value="member this.DetectChanges : unit -&gt; unit" Usage="objectContext.DetectChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.Objects.ObjectStateEntry" /> 변경 내용이 <see cref="T:System.Data.Objects.ObjectStateManager" />로 추적되는 모든 개체의 변경 내용과 동기화되도록 합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>개체 컨텍스트에서 사용하는 리소스를 해제합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="objectContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>개체 컨텍스트에서 사용하는 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 Entity Framework에서 열려 있는 경우 연결을 닫습니다. 이후 <xref:System.Data.Objects.ObjectContext.Dispose%2A> 호출 되는 쿼리 실행 또는 호출 같은 연결을 열어야 하는 작업을 <xref:System.Data.Objects.ObjectQuery.ToTraceString%2A> 메서드에서 예외가 발생 합니다. 쿼리 작성 또는 개체 연결과 같이 연결을 열 필요가 없는 작업의 경우에는 예외가 발생하지 않습니다. <xref:System.Data.Objects.ObjectContext.Dispose%2A> 메서드는 명시적으로 열린된 모든 연결을 닫지 않습니다.  
  
 범위를 제한는 <xref:System.Data.Objects.ObjectContext> 내에 `using` 블록 (`Using` Visual Basic의) 하면 리소스가 올바로 삭제 됩니다. 자세한 내용은 [트랜잭션과 연결 관리](https://msdn.microsoft.com/library/b6659d2a-9a45-4e98-acaa-d7a8029e5b99)합니다.  
  
 합니다 <xref:System.Data.Objects.ObjectContext.Dispose> 메서드 호출을 `virtual` (`Overridable` Visual Basic에서) <xref:System.Data.Objects.ObjectContext.Dispose%28System.Boolean%29> 메서드.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="objectContext.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
        <summary>개체 컨텍스트에서 사용하는 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 연결을 닫습니다. 이후 <xref:System.Data.Objects.ObjectContext.Dispose%2A> 호출 되는 쿼리 실행 또는 호출 같은 연결을 열어야 하는 작업을 <xref:System.Data.Objects.ObjectQuery.ToTraceString%2A> 메서드에서 예외가 발생 합니다. 쿼리 작성 또는 개체 연결과 같이 연결을 열 필요가 없는 작업의 경우에는 예외가 발생하지 않습니다.  
  
 범위를 제한는 <xref:System.Data.Objects.ObjectContext> 내에서 `using` 블록 (`Using` Visual Basic에서) 하면 리소스가 제대로 삭제 됩니다. 자세한 내용은 [트랜잭션과 연결 관리](https://msdn.microsoft.com/library/b6659d2a-9a45-4e98-acaa-d7a8029e5b99)합니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteFunction">
      <MemberSignature Language="C#" Value="public int ExecuteFunction (string functionName, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteFunction(string functionName, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteFunction (functionName As String, ParamArray parameters As ObjectParameter()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteFunction(System::String ^ functionName, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteFunction : string * System.Data.Objects.ObjectParameter[] -&gt; int" Usage="objectContext.ExecuteFunction (functionName, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="functionName">저장 프로시저나 함수의 이름입니다. 이름에는 <c>&lt;Container Name&gt;.&lt;Function Name&gt;</c>과 같은 컨테이너 이름이 포함될 수 있습니다. 기본 컨테이너 이름이 알려져 있으면 함수 이름만 필요합니다.</param>
        <param name="parameters"><see cref="T:System.Data.Objects.ObjectParameter" /> 개체의 배열입니다.</param>
        <summary>데이터 소스에 정의되어 있으며 개념적 모델로 표현되는 저장 프로시저 또는 함수를 실행합니다. 함수에서 반환되는 결과는 모두 무시되고 실행의 영향을 받는 행 수가 반환됩니다.</summary>
        <returns>영향을 받은 행 수입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="function" />이 null이거나 비어 있는 경우 
또는 
 <paramref name="function" />가 없는 경우</exception>
        <exception cref="T:System.InvalidOperationException">엔터티 판독기에서 이 <paramref name="function" />을 지원하지 않는 경우  
  
또는 
판독기와 <paramref name="function" />에서 형식이 일치하지 않는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteFunction&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; ExecuteFunction&lt;TElement&gt; (string functionName, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; ExecuteFunction&lt;TElement&gt;(string functionName, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteFunction(Of TElement) (functionName As String, ParamArray parameters As ObjectParameter()) As ObjectResult(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Data::Objects::ObjectResult&lt;TElement&gt; ^ ExecuteFunction(System::String ^ functionName, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteFunction : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectResult&lt;'Element&gt;" Usage="objectContext.ExecuteFunction (functionName, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">함수가 데이터 소스에 대해 실행될 때 반환되는 <see cref="T:System.Data.Objects.ObjectResult`1" />의 엔터티 형식입니다. 이 형식은 <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />를 구현해야 합니다.</typeparam>
        <param name="functionName">저장 프로시저나 함수의 이름입니다. 이름에는 <c>&lt;Container Name&gt;.&lt;Function Name&gt;</c>과 같은 컨테이너 이름이 포함될 수 있습니다. 기본 컨테이너 이름이 알려져 있으면 함수 이름만 필요합니다.</param>
        <param name="parameters"><see cref="T:System.Data.Objects.ObjectParameter" /> 개체의 배열입니다.</param>
        <summary>데이터 소스에 정의되어 있으며 개념적 모델에 매핑되는 저장 프로시저 또는 함수를 지정된 매개 변수를 사용하여 실행합니다. 형식화된 <see cref="T:System.Data.Objects.ObjectResult`1" />을 반환합니다.</summary>
        <returns>저장 프로시저에서 반환하는 데이터의 <see cref="T:System.Data.Objects.ObjectResult`1" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ExecuteFunction%2A> 메서드는 데이터 원본에 정의 되어 있고 개념적 모델로 표현 되는 함수나 저장된 프로시저를 실행 하는 데 사용 되는 도우미 메서드입니다. 각 메서드를 생성 하는 엔터티 데이터 모델 도구 [FunctionImport 요소](/ef/ef6/modeling/designer/advanced/edmx/csdl-spec#functionimport-element-csdl) 개념적 모델에서. 이러한 메서드는 강력한 형식의 호출 `ExecuteFunction` 형식화 된 반환할 <xref:System.Data.Objects.ObjectResult%601>합니다. 자세한 내용은 [저장 프로시저 (Entity Framework)를 사용 하 여 응용 프로그램 코드](https://docs.microsoft.com/previous-versions/cc716795(v=vs.90))합니다.  
  
 매개 변수 배열에 필요한 함수에 대 한 모든 매개 변수 및 모든 형식을 가져오기 함수의 경우 함수 자체의 유형을 포함 하 여 메타 데이터에 대해 확인 합니다. `null` CLR 값 형식에 대 한 값이 허용 됩니다. 매개 변수 유효성 검사는 공급자에서 수행됩니다.  
  
 합니다 <xref:System.Data.Objects.ObjectContext.ExecuteFunction%2A> 메서드를 <xref:System.Data.Objects.MergeOption> 의 값 <xref:System.Data.Objects.MergeOption.AppendOnly>합니다. 따라서 개체를 개체 컨텍스트에 이미 있는 경우 데이터 원본에서 로드 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="function" />이 null이거나 비어 있는 경우 
또는 
 <paramref name="function" />가 없는 경우</exception>
        <exception cref="T:System.InvalidOperationException">엔터티 판독기에서 이 <paramref name="function" />을 지원하지 않는 경우  
  
또는 
판독기와 <paramref name="function" />에서 형식이 일치하지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteFunction&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; ExecuteFunction&lt;TElement&gt; (string functionName, System.Data.Objects.MergeOption mergeOption, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; ExecuteFunction&lt;TElement&gt;(string functionName, valuetype System.Data.Objects.MergeOption mergeOption, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.MergeOption,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Data::Objects::ObjectResult&lt;TElement&gt; ^ ExecuteFunction(System::String ^ functionName, System::Data::Objects::MergeOption mergeOption, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteFunction : string * System.Data.Objects.MergeOption * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectResult&lt;'Element&gt;" Usage="objectContext.ExecuteFunction (functionName, mergeOption, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]" Index="2" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">함수가 데이터 소스에 대해 실행될 때 반환되는 <see cref="T:System.Data.Objects.ObjectResult`1" />의 엔터티 형식입니다. 이 형식은 <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />를 구현해야 합니다.</typeparam>
        <param name="functionName">저장 프로시저나 함수의 이름입니다. 이름에는 <c>&lt;Container Name&gt;.&lt;Function Name&gt;</c>과 같은 컨테이너 이름이 포함될 수 있습니다. 기본 컨테이너 이름이 알려져 있으면 함수 이름만 필요합니다.</param>
        <param name="mergeOption">쿼리를 실행할 때 사용할 <see cref="T:System.Data.Objects.MergeOption" />입니다.</param>
        <param name="parameters"><see cref="T:System.Data.Objects.ObjectParameter" /> 개체의 배열입니다.</param>
        <summary>데이터 소스에 정의되어 있으며 개념적 모델로 표현되는 지정된 저장 프로시저 또는 함수를 지정된 매개 변수와 병합 옵션을 사용하여 실행합니다. 형식화된 <see cref="T:System.Data.Objects.ObjectResult`1" />을 반환합니다.</summary>
        <returns>저장 프로시저에서 반환하는 데이터의 <see cref="T:System.Data.Objects.ObjectResult`1" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ExecuteFunction%2A> 메서드는 데이터 원본에 정의 되어 있고 개념적 모델로 표현 되는 함수나 저장된 프로시저를 실행 하는 데 사용 되는 도우미 메서드입니다. 각 메서드를 생성 하는 엔터티 데이터 모델 도구 [FunctionImport 요소](/ef/ef6/modeling/designer/advanced/edmx/csdl-spec#functionimport-element-csdl) 개념적 모델에서. 이러한 메서드는 강력한 형식의 호출 `ExecuteFunction` 형식화 된 반환할 <xref:System.Data.Objects.ObjectResult%601>합니다. 자세한 내용은 [저장 프로시저 (Entity Framework)를 사용 하 여 응용 프로그램 코드](https://docs.microsoft.com/previous-versions/cc716795(v=vs.90))합니다.  
  
 매개 변수 배열에 필요한 함수에 대 한 모든 매개 변수 및 모든 형식을 가져오기 함수의 경우 함수 자체의 유형을 포함 하 여 메타 데이터에 대해 확인 합니다. `null` CLR 값 형식에 대 한 값이 허용 됩니다. 매개 변수 유효성 검사는 공급자에서 수행됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="function" />이 null이거나 비어 있는 경우 
또는 
 <paramref name="function" />가 없는 경우</exception>
        <exception cref="T:System.InvalidOperationException">엔터티 판독기에서 이 <paramref name="function" />을 지원하지 않는 경우  
  
또는 
판독기와 <paramref name="function" />에서 형식이 일치하지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoreCommand">
      <MemberSignature Language="C#" Value="public int ExecuteStoreCommand (string commandText, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteStoreCommand(string commandText, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteStoreCommand (commandText As String, ParamArray parameters As Object()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteStoreCommand(System::String ^ commandText, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteStoreCommand : string * obj[] -&gt; int" Usage="objectContext.ExecuteStoreCommand (commandText, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="parameters" Type="System.Object[]" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="commandText">데이터 소스의 네이티브 언어로 실행할 명령입니다.</param>
        <param name="parameters">명령에 전달할 매개 변수의 배열입니다.</param>
        <summary>기존 연결을 사용하여 데이터 소스에 대해 직접 임의의 명령을 실행합니다.</summary>
        <returns>영향을 받은 행 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 매개 변수화된 명령을 사용하면 공격자가 SQL 문에 명령을 삽입하여 서버의 보안을 손상시키는 SQL 삽입 공격을 막을 수 있습니다. 매개 변수가 있는 명령을 외부 원본에서 받은 SQL 문의 일부가 아닌 값 으로만로 전달 되도록 하 여 SQL 삽입 공격 으로부터 보호 합니다. 결과적으로, 데이터 소스에서 값을 삽입 하는 SQL 명령 실행 되지 않습니다. 매개 변수 값으로만 평가됩니다. 보안상의 장점 외에도 매개 변수가 있는 명령을 SQL 문 또는 저장된 프로시저에 전달 된 값을 구성 하는 편리한 방법을 제공 합니다.  
  
 `parameters` 값은 <xref:System.Data.Common.DbParameter> 개체의 배열이거나 매개 변수 값의 배열일 수 있습니다. 값이 제공 된 경우 배열을 <xref:System.Data.Common.DbParameter> 개체 배열의 값 순서에 따라 생성 됩니다.  
  
 현재 트랜잭션이 존재 하는 경우 저장소 명령은 현재 트랜잭션의 컨텍스트에서 실행 됩니다.  
  
 자세한 내용은 다음을 참조하세요.  
  
 [저장 명령 직접 실행](https://msdn.microsoft.com/library/5708d0a2-3f76-4825-978a-d06ff5c4bb3d) 및  
  
 [방법: 데이터 원본에 대해 명령 직접 실행](https://msdn.microsoft.com/library/def3cc87-cfff-4dee-83cf-1a40c73a2d01)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoreQuery&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; ExecuteStoreQuery&lt;TElement&gt; (string commandText, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; ExecuteStoreQuery&lt;TElement&gt;(string commandText, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteStoreQuery(Of TElement) (commandText As String, ParamArray parameters As Object()) As ObjectResult(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Data::Objects::ObjectResult&lt;TElement&gt; ^ ExecuteStoreQuery(System::String ^ commandText, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteStoreQuery : string * obj[] -&gt; System.Data.Objects.ObjectResult&lt;'Element&gt;" Usage="objectContext.ExecuteStoreQuery (commandText, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="parameters" Type="System.Object[]" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">반환되는 데이터의 형식입니다.</typeparam>
        <param name="commandText">데이터 소스의 네이티브 언어로 실행할 명령입니다.</param>
        <param name="parameters">명령에 전달할 매개 변수의 배열입니다.</param>
        <summary>형식화된 결과의 시퀀스를 반환하는 쿼리를 데이터 소스에 대해 직접 실행합니다.</summary>
        <returns><paramref name="TElement" /> 형식의 개체 열거형입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> 메서드는 데이터 원본에 대해 직접 임의의 명령을 실행 하려면 기존 연결을 사용 합니다. 현재 트랜잭션의 컨텍스트가 있는 경우 저장소 명령은 해당 컨텍스트에서 실행됩니다.  
  
 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> 메서드를 호출하는 것은 <xref:System.Data.Common.DbCommand.ExecuteReader%2A> 클래스의 <xref:System.Data.Common.DbCommand> 메서드를 호출하는 것과 동일합니다. 단, <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A>는 엔터티를 반환하고 <xref:System.Data.Common.DbCommand.ExecuteReader%2A>는 <xref:System.Data.Common.DbDataReader>의 속성 값을 반환합니다.  
  
 호출을 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> 위치 결과를 추적 하려는 경우 지정된 된 엔터티를 사용 하 여 이름을 설정 합니다.  
  
 호출을 <xref:System.Data.Objects.ObjectContext.Translate%2A> 변환 하는 메서드를 <xref:System.Data.Common.DbDataReader> 엔터티 개체는 판독기가 지정된 된 엔터티 형식에 매핑되는 데이터 행을 포함 하는 경우에 합니다.  
  
 매개 변수화된 명령을 사용하면 공격자가 SQL 문에 명령을 삽입하여 서버의 보안을 손상시키는 SQL 삽입 공격을 막을 수 있습니다. 매개 변수가 있는 명령을 외부 원본에서 받은 SQL 문의 일부가 아닌 값 으로만로 전달 되도록 하 여 SQL 삽입 공격 으로부터 보호 합니다. 결과적으로, 데이터 소스에서 값을 삽입 하는 SQL 명령 실행 되지 않습니다. 매개 변수 값으로만 평가됩니다. 보안상의 장점 외에도 매개 변수가 있는 명령을 SQL 문 또는 저장된 프로시저에 전달 된 값을 구성 하는 편리한 방법을 제공 합니다.  
  
 `parameters` 값은 <xref:System.Data.Common.DbParameter> 개체의 배열이거나 매개 변수 값의 배열일 수 있습니다. 값이 제공 된 경우 배열을 <xref:System.Data.Common.DbParameter> 개체 배열의 값 순서에 따라 생성 됩니다.  
  
 자세한 내용은 다음을 참조하세요.  
  
 [저장 명령 직접 실행](https://msdn.microsoft.com/library/5708d0a2-3f76-4825-978a-d06ff5c4bb3d) 및  
  
 [방법: 데이터 원본에 대해 명령 직접 실행](https://msdn.microsoft.com/library/def3cc87-cfff-4dee-83cf-1a40c73a2d01)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoreQuery&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TEntity&gt; ExecuteStoreQuery&lt;TEntity&gt; (string commandText, string entitySetName, System.Data.Objects.MergeOption mergeOption, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TEntity&gt; ExecuteStoreQuery&lt;TEntity&gt;(string commandText, string entitySetName, valuetype System.Data.Objects.MergeOption mergeOption, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Objects.MergeOption,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; System::Data::Objects::ObjectResult&lt;TEntity&gt; ^ ExecuteStoreQuery(System::String ^ commandText, System::String ^ entitySetName, System::Data::Objects::MergeOption mergeOption, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteStoreQuery : string * string * System.Data.Objects.MergeOption * obj[] -&gt; System.Data.Objects.ObjectResult&lt;'Entity&gt;" Usage="objectContext.ExecuteStoreQuery (commandText, entitySetName, mergeOption, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="entitySetName" Type="System.String" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" Index="2" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="parameters" Type="System.Object[]" Index="3" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TEntity">반환되는 데이터의 엔터티 형식입니다.</typeparam>
        <param name="commandText">데이터 소스의 네이티브 언어로 실행할 명령입니다.</param>
        <param name="entitySetName"><typeparamref name="TEntity" /> 형식의 엔터티 집합입니다. 엔터티 집합 이름을 제공하지 않으면 결과가 추적되지 않습니다.</param>
        <param name="mergeOption">쿼리를 실행할 때 사용할 <see cref="T:System.Data.Objects.MergeOption" />입니다. 기본값은 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />입니다.</param>
        <param name="parameters">명령에 전달할 매개 변수의 배열입니다.</param>
        <summary>쿼리를 데이터 소스에 대해 직접 실행하고 형식화된 결과의 시퀀스를 반환합니다. 쿼리 결과를 엔터티로 추적할 수 있도록 엔터티 집합과 병합 옵션을 지정합니다.</summary>
        <returns><paramref name="TResult" /> 형식의 개체 열거형입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> 메서드는 데이터 원본에 대해 직접 임의의 명령을 실행 하려면 기존 연결을 사용 합니다. 현재 트랜잭션의 컨텍스트가 있는 경우 저장소 명령은 해당 컨텍스트에서 실행됩니다.  
  
 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> 메서드를 호출하는 것은 <xref:System.Data.Common.DbCommand.ExecuteReader%2A> 클래스의 <xref:System.Data.Common.DbCommand> 메서드를 호출하는 것과 동일합니다. 단, <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A>는 엔터티를 반환하고 <xref:System.Data.Common.DbCommand.ExecuteReader%2A>는 <xref:System.Data.Common.DbDataReader>의 속성 값을 반환합니다.  
  
 결과 엔터티로 추적할 수 하려는 경우 엔터티 집합 이름을 지정 합니다.  
  
 호출 <xref:System.Data.Objects.ObjectContext.Translate%2A> 변환 메서드는 <xref:System.Data.Common.DbDataReader> 엔터티 개체는 판독기가 지정된 된 엔터티 형식에 매핑되는 데이터 행을 포함 하는 경우에 합니다.  
  
 매개 변수화된 명령을 사용하면 공격자가 SQL 문에 명령을 삽입하여 서버의 보안을 손상시키는 SQL 삽입 공격을 막을 수 있습니다. 매개 변수가 있는 명령을 외부 원본에서 받은 SQL 문의 일부가 아닌 값 으로만로 전달 되도록 하 여 SQL 삽입 공격 으로부터 보호 합니다. 결과적으로, 데이터 소스에서 값을 삽입 하는 SQL 명령 실행 되지 않습니다. 매개 변수 값으로만 평가됩니다. 보안상의 장점 외에도 매개 변수가 있는 명령을 SQL 문 또는 저장된 프로시저에 전달 된 값을 구성 하는 편리한 방법을 제공 합니다.  
  
 `parameters` 값은 <xref:System.Data.Common.DbParameter> 개체의 배열이거나 매개 변수 값의 배열일 수 있습니다. 값이 제공 된 경우 배열을 <xref:System.Data.Common.DbParameter> 개체 배열의 값 순서에 따라 생성 됩니다.  
  
 자세한 내용은 다음을 참조하세요.  
  
 [저장 명령 직접 실행](https://msdn.microsoft.com/library/5708d0a2-3f76-4825-978a-d06ff5c4bb3d) 및  
  
 [방법: 데이터 원본에 대해 명령 직접 실행](https://msdn.microsoft.com/library/def3cc87-cfff-4dee-83cf-1a40c73a2d01)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownProxyTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Type&gt; GetKnownProxyTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; GetKnownProxyTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.GetKnownProxyTypes" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetKnownProxyTypes () As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ GetKnownProxyTypes();" />
      <MemberSignature Language="F#" Value="static member GetKnownProxyTypes : unit -&gt; seq&lt;Type&gt;" Usage="System.Data.Objects.ObjectContext.GetKnownProxyTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>기존 프록시 형식을 모두 반환합니다.</summary>
        <returns>모든 기존 프록시 형식의 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.GetKnownProxyTypes%2A> 메서드는 POCO 엔터티에 대 한 프록시 개체 생성이 사용 하는 경우 사용 합니다. 자세한 내용은 참조 하세요. [POCO 프록시 만들기에 대 한 요구 사항](https://msdn.microsoft.com/library/dcdbf982-9b9d-4582-806a-64de4a1c03c8) 하 고 [POCO 엔터티 작업](https://msdn.microsoft.com/library/5e0fb82a-b6d1-41a1-b37b-c12db61629d3)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectByKey">
      <MemberSignature Language="C#" Value="public object GetObjectByKey (System.Data.EntityKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetObjectByKey(class System.Data.EntityKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.GetObjectByKey(System.Data.EntityKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObjectByKey (key As EntityKey) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetObjectByKey(System::Data::EntityKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.GetObjectByKey : System.Data.EntityKey -&gt; obj" Usage="objectContext.GetObjectByKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.EntityKey" />
      </Parameters>
      <Docs>
        <param name="key">찾을 개체의 키입니다.</param>
        <summary>지정된 엔터티 키가 있는 개체를 반환합니다.</summary>
        <returns>엔터티 형식의 인스턴스인 <see cref="T:System.Object" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A>에서는 지정된 <xref:System.Data.EntityKey>가 있는 개체를 <xref:System.Data.Objects.ObjectStateManager>에서 검색하려고 시도합니다. 개체가 현재 개체 컨텍스트에 로드되어 있지 않으면 쿼리를 실행하여 데이터 원본에서 개체를 반환하려고 시도합니다. 자세한 내용은 [개체 쿼리](https://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276)합니다.  
  
 개체를 찾을 수 없으면 <xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A>에서 <xref:System.Data.ObjectNotFoundException>을 발생시킵니다. 이 예외가 발생하지 않도록 하려면 대신 <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> 메서드를 사용하십시오.  
  
 이 메서드는 <xref:System.Data.EntityState.Deleted> 상태의 개체를 반환합니다.  
  
 임시 키를 사용해서는 데이터 원본의 개체를 반환할 수 없습니다.  
  
   
  
## Examples  
 이 예제는 기준으로 합니다 [AdventureWorks Sales 모델](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)합니다. 예제에서는 지정된 형식의 엔터티에 대한 <xref:System.Data.EntityKey>를 만들고 키로 엔터티를 페치합니다.  
  
 [!code-csharp[DP ObjectServices Concepts#EntityKeyClass_GetObjectByKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#entitykeyclass_getobjectbykey)]
 [!code-vb[DP ObjectServices Concepts#EntityKeyClass_GetObjectByKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#entitykeyclass_getobjectbykey)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Data.ObjectNotFoundException"><see cref="T:System.Data.Objects.ObjectStateManager" /> 또는 데이터 원본에서 개체를 찾을 수 없는 경우</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">데이터를 개체로 쿼리(Entity Framework)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="GetObjectType">
      <MemberSignature Language="C#" Value="public static Type GetObjectType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetObjectType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.GetObjectType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetObjectType(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetObjectType : Type -&gt; Type" Usage="System.Data.Objects.ObjectContext.GetObjectType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="type">프록시 개체의 <see cref="T:System.Type" />입니다.</param>
        <summary>지정된 형식의 프록시 개체와 연결된 POCO 엔터티의 엔터티 형식을 반환합니다.</summary>
        <returns>연결된 POCO 엔터티의 <see cref="T:System.Type" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.GetObjectType%2A> 메서드는 POCO 엔터티에 대 한 프록시 개체 생성이 사용 하는 경우 사용 합니다. 자세한 내용은 참조 하세요. [POCO 프록시 만들기에 대 한 요구 사항](https://msdn.microsoft.com/library/dcdbf982-9b9d-4582-806a-64de4a1c03c8) 하 고 [POCO 엔터티 작업](https://msdn.microsoft.com/library/5e0fb82a-b6d1-41a1-b37b-c12db61629d3)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadProperty">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>POCO 사용자 지정 데이터 클래스를 사용할 때 관련 개체를 명시적으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 POCO 사용자 지정 데이터 클래스를 사용 하면 엔터티 데이터 모델 도구에서 생성 되는 엔터티 형식의 인스턴스에 같은 관련된 개체를 명시적으로 로드할 수 없습니다. 이므로이 반환 하는 탐색 속성을 생성 하는 도구를 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 또는 <xref:System.Data.Objects.DataClasses.EntityReference%601> 관련된 개체의 경우 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 라고 하는 <xref:System.Data.Objects.DataClasses.RelatedEnd>합니다. POCO 엔터티를 설정 하 여 지연 로드를 사용 하 여 로드할 수 있습니다는 <xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A> 속성을 `true` 인스턴스에서 <xref:System.Data.Objects.ObjectContextOptions> 에서 반환 하는 합니다 <xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType> 속성 또는 즉시 로드를 사용 하 여는 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 메서드를 <xref:System.Data.Objects.ObjectQuery%601>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadProperty">
      <MemberSignature Language="C#" Value="public void LoadProperty (object entity, string navigationProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty(object entity, string navigationProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadProperty (entity As Object, navigationProperty As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadProperty(System::Object ^ entity, System::String ^ navigationProperty);" />
      <MemberSignature Language="F#" Value="member this.LoadProperty : obj * string -&gt; unit" Usage="objectContext.LoadProperty (entity, navigationProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="navigationProperty" Type="System.String" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="entity">관련 개체를 로드할 엔터티입니다.</param>
        <param name="navigationProperty">로드할 관련 개체를 반환하는 탐색 속성의 이름입니다.</param>
        <summary>지정된 탐색 속성과 기본 병합 옵션을 사용하여 제공된 개체와 관련된 개체를 명시적으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A> POCO 사용자 지정 데이터 클래스를 사용 하는 경우 명시적으로 로드 하려면 메서드를 호출 해야 합니다.  
  
 호출 후 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A>, 관련된 개체 소스 엔터티의 탐색 속성을 통해 액세스할 수 있습니다.  
  
 POCO 사용자 지정 데이터 클래스를 사용 하면 엔터티 데이터 모델 도구에서 생성 되는 엔터티 형식의 인스턴스에 같은 관련된 개체를 명시적으로 로드할 수 없습니다. 이므로이 반환 하는 탐색 속성을 생성 하는 도구를 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 또는 <xref:System.Data.Objects.DataClasses.EntityReference%601> 관련된 개체의 경우 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 라고 하는 <xref:System.Data.Objects.DataClasses.RelatedEnd>합니다. POCO 엔터티를 설정 하 여 지연 로드를 사용 하 여 로드할 수 있습니다는 <xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A> 속성을 `true` 인스턴스에서 <xref:System.Data.Objects.ObjectContextOptions> 에서 반환 하는 합니다 <xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType> 속성 또는 즉시 로드를 사용 하 여는 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 메서드를 <xref:System.Data.Objects.ObjectQuery%601>.  
  
 경우는 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A> 메서드가 호출 되 면 개체에 로드 되는 <xref:System.Data.Objects.ObjectContext> 기본값을 사용 하 여 <xref:System.Data.Objects.MergeOption> 의 값 <xref:System.Data.Objects.MergeOption.AppendOnly>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="entity" />는 <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added" /> 또는 <see cref="F:System.Data.EntityState.Deleted" /> 상태에 있습니다. 
또는 
<paramref name="entity" />는 <see cref="T:System.Data.Objects.ObjectContext" />의 다른 인스턴스에 연결됩니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadProperty">
      <MemberSignature Language="C#" Value="public void LoadProperty (object entity, string navigationProperty, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty(object entity, string navigationProperty, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadProperty(System::Object ^ entity, System::String ^ navigationProperty, System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="member this.LoadProperty : obj * string * System.Data.Objects.MergeOption -&gt; unit" Usage="objectContext.LoadProperty (entity, navigationProperty, mergeOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="navigationProperty" Type="System.String" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" Index="2" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="entity">관련 개체를 로드할 엔터티입니다.</param>
        <param name="navigationProperty">로드할 관련 개체를 반환하는 탐색 속성의 이름입니다.</param>
        <param name="mergeOption">관련 개체를 로드할 때 사용할 <see cref="T:System.Data.Objects.MergeOption" /> 값입니다.</param>
        <summary>지정된 탐색 속성과 지정된 병합 옵션을 사용하여 제공된 개체와 관련된 개체를 명시적으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A> POCO 사용자 지정 데이터 클래스를 사용 하는 경우 명시적으로 로드 하려면 메서드를 호출 해야 합니다.  
  
 호출 후 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A>, 관련된 개체 소스 엔터티의 탐색 속성을 통해 액세스할 수 있습니다.  
  
 POCO 사용자 지정 데이터 클래스를 사용 하면 엔터티 데이터 모델 도구에서 생성 되는 엔터티 형식의 인스턴스에 같은 관련된 개체를 명시적으로 로드할 수 없습니다. 이므로이 반환 하는 탐색 속성을 생성 하는 도구를 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 또는 <xref:System.Data.Objects.DataClasses.EntityReference%601> 관련된 개체의 경우 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 라고 하는 <xref:System.Data.Objects.DataClasses.RelatedEnd>합니다. POCO 엔터티를 설정 하 여 지연 로드를 사용 하 여 로드할 수 있습니다는 <xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A> 속성을 `true` 인스턴스에서 <xref:System.Data.Objects.ObjectContextOptions> 에서 반환 하는 합니다 <xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType> 속성 또는 즉시 로드를 사용 하 여는 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 메서드를 <xref:System.Data.Objects.ObjectQuery%601>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="entity" />는 <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added" /> 또는 <see cref="F:System.Data.EntityState.Deleted" /> 상태에 있습니다. 
또는 
<paramref name="entity" />는 <see cref="T:System.Data.Objects.ObjectContext" />의 다른 인스턴스에 연결됩니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadProperty&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public void LoadProperty&lt;TEntity&gt; (TEntity entity, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty&lt;TEntity&gt;(!!TEntity entity, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadProperty(Of TEntity) (entity As TEntity, selector As Expression(Of Func(Of TEntity, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; void LoadProperty(TEntity entity, System::Linq::Expressions::Expression&lt;Func&lt;TEntity, System::Object ^&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="member this.LoadProperty : 'Entity * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; -&gt; unit" Usage="objectContext.LoadProperty (entity, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">제공된 개체의 형식입니다.</typeparam>
        <param name="entity">관련 개체를 로드할 소스 개체입니다.</param>
        <param name="selector">로드할 관련 개체를 정의하는 LINQ 식입니다.</param>
        <summary>지정된 LINQ 쿼리와 기본 병합 옵션을 사용하여 제공된 개체와 관련된 개체를 명시적으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A> POCO 사용자 지정 데이터 클래스를 사용 하는 경우 명시적으로 로드 하려면 메서드를 호출 해야 합니다.  
  
 호출 후 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A>, 관련된 개체 소스 엔터티의 탐색 속성을 통해 액세스할 수 있습니다.  
  
 LINQ 식에서 로드할 속성을 지정 `(entity) => entity.PropertyName`, 여기서 *PropertyName* 로드할 관련된 개체를 반환 하는 탐색 속성입니다. 다른 형태의 LINQ 식 사용 하는 경우 예외가 발생 합니다.  
  
 POCO 사용자 지정 데이터 클래스를 사용 하면 엔터티 데이터 모델 도구에서 생성 되는 엔터티 형식의 인스턴스에 같은 관련된 개체를 명시적으로 로드할 수 없습니다. 이므로이 반환 하는 탐색 속성을 생성 하는 도구를 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 또는 <xref:System.Data.Objects.DataClasses.EntityReference%601> 관련된 개체의 경우 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 라고 하는 <xref:System.Data.Objects.DataClasses.RelatedEnd>합니다. POCO 엔터티를 설정 하 여 지연 로드를 사용 하 여 로드할 수 있습니다는 <xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A> 속성을 `true` 인스턴스에서 <xref:System.Data.Objects.ObjectContextOptions> 에서 반환 하는 합니다 <xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType> 속성 또는 즉시 로드를 사용 하 여는 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 메서드를 <xref:System.Data.Objects.ObjectQuery%601>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="selector" />가 유효한 입력 매개 변수를 제공하지 않습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="selector" />가 null입니다.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="entity" />는 <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added" /> 또는 <see cref="F:System.Data.EntityState.Deleted" /> 상태에 있습니다. 
또는 
<paramref name="entity" />는 <see cref="T:System.Data.Objects.ObjectContext" />의 다른 인스턴스에 연결됩니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadProperty&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public void LoadProperty&lt;TEntity&gt; (TEntity entity, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; selector, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty&lt;TEntity&gt;(!!TEntity entity, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; selector, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; void LoadProperty(TEntity entity, System::Linq::Expressions::Expression&lt;Func&lt;TEntity, System::Object ^&gt; ^&gt; ^ selector, System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="member this.LoadProperty : 'Entity * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; * System.Data.Objects.MergeOption -&gt; unit" Usage="objectContext.LoadProperty (entity, selector, mergeOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" Index="2" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">제공된 개체의 형식입니다.</typeparam>
        <param name="entity">관련 개체를 로드할 소스 개체입니다.</param>
        <param name="selector">로드할 관련 개체를 정의하는 LINQ 식입니다.</param>
        <param name="mergeOption">관련 개체를 로드할 때 사용할 <see cref="T:System.Data.Objects.MergeOption" /> 값입니다.</param>
        <summary>지정된 LINQ 쿼리와 지정된 병합 옵션을 사용하여 제공된 개체와 관련된 개체를 명시적으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A> POCO 사용자 지정 데이터 클래스를 사용 하는 경우 명시적으로 로드 하려면 메서드를 호출 해야 합니다.  
  
 호출 후 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A>, 관련된 개체 소스 엔터티의 탐색 속성을 통해 액세스할 수 있습니다.  
  
 LINQ 식에서 로드할 속성 지정 `(entity) => entity.PropertyName` 여기서 *PropertyName* 로드할 관련된 개체를 반환 하는 탐색 속성입니다. 다른 형태의 LINQ 식 사용 하는 경우 예외가 발생 합니다.  
  
 POCO 사용자 지정 데이터 클래스를 사용 하면 엔터티 데이터 모델 도구에서 생성 되는 엔터티 형식의 인스턴스에 같은 관련된 개체를 명시적으로 로드할 수 없습니다. 이므로이 반환 하는 탐색 속성을 생성 하는 도구를 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 또는 <xref:System.Data.Objects.DataClasses.EntityReference%601> 관련된 개체의 경우 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 라고 하는 <xref:System.Data.Objects.DataClasses.RelatedEnd>합니다. POCO 엔터티를 설정 하 여 지연 로드를 사용 하 여 로드할 수 있습니다는 <xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A> 속성을 `true` 인스턴스에서 <xref:System.Data.Objects.ObjectContextOptions> 에서 반환 하는 합니다 <xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType> 속성 또는 즉시 로드를 사용 하 여는 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 메서드를 <xref:System.Data.Objects.ObjectQuery%601>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="selector" />가 유효한 입력 매개 변수를 제공하지 않습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="selector" />가 null입니다.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="entity" />는 <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added" /> 또는 <see cref="F:System.Data.EntityState.Deleted" /> 상태에 있습니다. 
또는 
<paramref name="entity" />는 <see cref="T:System.Data.Objects.ObjectContext" />의 다른 인스턴스에 연결됩니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="MetadataWorkspace">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.MetadataWorkspace MetadataWorkspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Metadata.Edm.MetadataWorkspace MetadataWorkspace" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.MetadataWorkspace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MetadataWorkspace As MetadataWorkspace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Metadata::Edm::MetadataWorkspace ^ MetadataWorkspace { System::Data::Metadata::Edm::MetadataWorkspace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MetadataWorkspace : System.Data.Metadata.Edm.MetadataWorkspace" Usage="System.Data.Objects.ObjectContext.MetadataWorkspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.MetadataWorkspace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>개체 컨텍스트에서 사용하는 메타데이터 작업 영역을 가져옵니다.</summary>
        <value>이 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />와 연결된 <see cref="T:System.Data.Objects.ObjectContext" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 클래스는 응용 프로그램의 컨텍스트에서 EDM(엔터티 데이터 모델) 메타데이터와 상호 작용하는 데 사용할 수 있는 중앙 런타임 API입니다. 자세한 내용은 [메타 데이터 작업 영역](https://msdn.microsoft.com/library/601aee56-3eda-4caa-9082-a01df76c5e84)합니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="ObjectMaterialized">
      <MemberSignature Language="C#" Value="public event System.Data.Objects.ObjectMaterializedEventHandler ObjectMaterialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.Objects.ObjectMaterializedEventHandler ObjectMaterialized" />
      <MemberSignature Language="DocId" Value="E:System.Data.Objects.ObjectContext.ObjectMaterialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectMaterialized As ObjectMaterializedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::Objects::ObjectMaterializedEventHandler ^ ObjectMaterialized;" />
      <MemberSignature Language="F#" Value="member this.ObjectMaterialized : System.Data.Objects.ObjectMaterializedEventHandler " Usage="member this.ObjectMaterialized : System.Data.Objects.ObjectMaterializedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectMaterializedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿼리 작업이나 로드 작업의 일부로 데이터 소스의 데이터에서 새 엔터티 개체가 만들어지는 경우 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 스칼라, 복합 후이 이벤트가 발생 하 고 개체에 있지만 컬렉션이 로드 되기 전에 참조 속성이 설정 되었습니다. 개체 컨텍스트에 동일한 키 값을 가진 개체가 있으면 Entity Framework를 다시 만들지 개체 및이 이벤트를 발생 하지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectStateManager">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectStateManager ObjectStateManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Objects.ObjectStateManager ObjectStateManager" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.ObjectStateManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ObjectStateManager As ObjectStateManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Objects::ObjectStateManager ^ ObjectStateManager { System::Data::Objects::ObjectStateManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ObjectStateManager : System.Data.Objects.ObjectStateManager" Usage="System.Data.Objects.ObjectContext.ObjectStateManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectStateManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>개체 변경 내용을 추적하기 위해 개체 컨텍스트에서 사용하는 개체 상태 관리자를 가져옵니다.</summary>
        <value>이 <see cref="T:System.Data.Objects.ObjectStateManager" />에서 사용하는 <see cref="T:System.Data.Objects.ObjectContext" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 이러한 예제를 기반으로 합니다 [AdventureWorks Sales 모델](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)합니다. 이 예제에서는 <xref:System.Data.Objects.ObjectStateManager>의 <xref:System.Data.Objects.ObjectContext>를 가져오고 상태 관리자를 사용하여 컨텍스트의 개체에 액세스합니다.  
  
 [!code-csharp[DP ObjectServices Concepts#ObjectStateManager](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectstatemanager)]
 [!code-vb[DP ObjectServices Concepts#ObjectStateManager](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectstatemanager)]  
  
 이 예제에서는 반환된 <xref:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry%2A>에 대해 <xref:System.Data.Objects.ObjectStateManager> 메서드를 사용하여 해당 엔터티 키를 기반으로 개체를 가져옵니다.  
  
 [!code-csharp[DP ObjectServices Concepts#ApplyItemUpdates](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#applyitemupdates)]
 [!code-vb[DP ObjectServices Concepts#ApplyItemUpdates](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#applyitemupdates)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="QueryProvider">
      <MemberSignature Language="C#" Value="protected internal System.Linq.IQueryProvider QueryProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider QueryProvider" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.QueryProvider" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property QueryProvider As IQueryProvider" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Linq::IQueryProvider ^ QueryProvider { System::Linq::IQueryProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.QueryProvider : System.Linq.IQueryProvider" Usage="System.Data.Objects.ObjectContext.QueryProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 개체 컨텍스트와 연결된 LINQ 쿼리 공급자를 가져옵니다.</summary>
        <value>이 개체 컨텍스트에서 사용하는 <see cref="T:System.Linq.IQueryProvider" /> 인스턴스입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Refresh">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>개체 컨텍스트의 특정 개체를 데이터 소스의 데이터로 업데이트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 @FSHO2@개체가 새로 고쳐지는 순서는 비결정적입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (System.Data.Objects.RefreshMode refreshMode, System.Collections.IEnumerable collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(valuetype System.Data.Objects.RefreshMode refreshMode, class System.Collections.IEnumerable collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Collections.IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh(System::Data::Objects::RefreshMode refreshMode, System::Collections::IEnumerable ^ collection);" />
      <MemberSignature Language="F#" Value="member this.Refresh : System.Data.Objects.RefreshMode * System.Collections.IEnumerable -&gt; unit" Usage="objectContext.Refresh (refreshMode, collection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refreshMode" Type="System.Data.Objects.RefreshMode" />
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="refreshMode">개체 컨텍스트의 속성 변경 내용을 데이터 소스의 속성 값으로 덮어쓸지 여부를 나타내는 <see cref="T:System.Data.Objects.RefreshMode" /> 값입니다.</param>
        <param name="collection">새로 고칠 개체의 <see cref="T:System.Collections.IEnumerable" /> 컬렉션입니다.</param>
        <summary>개체 컨텍스트의 개체 컬렉션을 데이터 소스의 데이터로 업데이트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 개체 컨텍스트의 개체를 데이터 원본의 데이터로 새로 고치는 데 사용할 수도 있고 충돌을 해결하는 메커니즘으로 사용할 수도 있습니다. 자세한 내용은 [변경 내용 저장 및 동시성 관리](https://msdn.microsoft.com/library/b8378601-4f26-4a05-a24a-f50aeb68610e)합니다.  
  
 @FSHO2@개체가 새로 고쳐지는 순서는 비결정적입니다.  
  
 후 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 호출 되는 개체의 원래 값은 항상 데이터 원본 값으로 업데이트 되지만 현재 값 수 또는 데이터 원본 값으로 업데이트할 수 없습니다. 업데이트되는지 여부는 <xref:System.Data.Objects.RefreshMode> 값에 따라 달라집니다. <xref:System.Data.Objects.RefreshMode.StoreWins> 모드 컬렉션의 개체를 데이터 원본 값과 일치 하도록 업데이트할지 것을 의미 합니다. <xref:System.Data.Objects.RefreshMode.ClientWins> 데이터 원본에 다른 변경 내용이 있는 경우에 개체 컨텍스트의 변경 내용만 유지 됩니다 있는지를 의미 합니다.  
  
 데이터 원본 측 논리에 따라 개체를 업데이트하려면 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 메서드를 호출한 후 <xref:System.Data.Objects.RefreshMode.StoreWins>를 사용하여 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>를 호출할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="collection" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="refreshMode" />가 잘못된 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="collection" />가 비어 있는 경우  
  
또는 
개체가 컨텍스트에 연결되지 않은 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (System.Data.Objects.RefreshMode refreshMode, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(valuetype System.Data.Objects.RefreshMode refreshMode, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh(System::Data::Objects::RefreshMode refreshMode, System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.Refresh : System.Data.Objects.RefreshMode * obj -&gt; unit" Usage="objectContext.Refresh (refreshMode, entity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refreshMode" Type="System.Data.Objects.RefreshMode" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="refreshMode"><see cref="T:System.Data.Objects.RefreshMode" />를 새로 고치는 데 사용할 모드를 지정하는 <see cref="T:System.Data.Objects.ObjectStateManager" /> 값 중 하나입니다.</param>
        <param name="entity">새로 고칠 개체입니다.</param>
        <summary>개체 컨텍스트의 개체를 데이터 소스의 데이터로 업데이트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.Refresh%2A>는 개체를 데이터 원본의 데이터로 새로 고치는 데 사용할 수도 있고 충돌을 해결하는 메커니즘으로 사용할 수도 있습니다. 자세한 내용은 [변경 내용 저장 및 동시성 관리](https://msdn.microsoft.com/library/b8378601-4f26-4a05-a24a-f50aeb68610e)합니다.  
  
 @FSHO2@개체가 새로 고쳐지는 순서는 비결정적입니다.  
  
 이후에 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 메서드는 개체의 원래 값은 항상 데이터 소스 값으로 업데이트 되지만 현재 값 수 또는 데이터 원본 값으로 업데이트할 수 없습니다. 업데이트되는지 여부는 <xref:System.Data.Objects.RefreshMode>에 따라 달라집니다. <xref:System.Data.Objects.RefreshMode.StoreWins> 모드를 사용하면 개체가 데이터 원본 값과 일치하도록 업데이트되고, <xref:System.Data.Objects.RefreshMode.ClientWins> 값을 사용하면 데이터 원본에 다른 변경 내용이 있어도 개체 컨텍스트의 변경 내용만 유지됩니다.  
  
 데이터 원본 측 논리에 따라 개체를 업데이트하려면 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 메서드를 호출한 후 <xref:System.Data.Objects.RefreshMode.StoreWins> 값을 사용하여 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 메서드를 호출할 수 있습니다.  
  
   
  
## Examples  
 이 예제는 기준으로 합니다 [AdventureWorks Sales 모델](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)합니다. 예제에서는 동시성 충돌을 발생할 수 있는 변경 내용을 저장하려고 시도합니다. 그런 다음 변경 내용을 다시 저장하기 전에 개체 컨텍스트를 새로 고쳐 동시성 충돌을 해결하는 방법을 보여 줍니다.  
  
 [!code-csharp[DP ObjectServices Concepts#Concurrency](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#concurrency)]
 [!code-vb[DP ObjectServices Concepts#Concurrency](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#concurrency)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="collection" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="refreshMode" />가 잘못된 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="collection" />가 비어 있는 경우  
  
또는 
개체가 컨텍스트에 연결되지 않은 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SaveChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>데이터 소스에 대한 모든 업데이트를 유지합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public int SaveChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SaveChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.SaveChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function SaveChanges () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SaveChanges();" />
      <MemberSignature Language="F#" Value="member this.SaveChanges : unit -&gt; int" Usage="objectContext.SaveChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>데이터 소스에 대한 모든 업데이트를 유지하고 개체 컨텍스트에서 변경 내용 추적을 다시 설정합니다.</summary>
        <returns><see cref="F:System.Data.EntityState.Added" />가 호출된 경우 <see cref="F:System.Data.EntityState.Modified" />, <see cref="F:System.Data.EntityState.Deleted" /> 또는 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 상태의 개체 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터 원본 측 논리에 따라 클라이언트의 개체를 업데이트하려면 <xref:System.Data.Objects.ObjectContext.Refresh%2A>를 호출한 후 <xref:System.Data.Objects.RefreshMode.StoreWins> 값을 사용하여 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 메서드를 호출할 수 있습니다. 자세한 내용은 [변경 내용 저장 및 동시성 관리](https://msdn.microsoft.com/library/b8378601-4f26-4a05-a24a-f50aeb68610e)합니다.  
  
 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 트랜잭션 내에서 작동합니다. <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 해당 트랜잭션을 롤백하고 예외를 throw 있으면 더티 <xref:System.Data.Objects.ObjectStateEntry> 개체를 유지할 수 없습니다.  
  
 낙관적 동시성 위반이 발생하면 <xref:System.Data.OptimisticConcurrencyException>이 throw됩니다. 낙관적 동시성 위반을 catch하여 해결하려면 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 또는 <xref:System.Data.Objects.RefreshMode.StoreWins> 값을 사용하여 <xref:System.Data.Objects.RefreshMode.ClientWins> 메서드를 호출한 다음 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>를 다시 호출합니다. 자세한 내용은 [방법: 개체 컨텍스트에서 데이터 동시성 관리](https://msdn.microsoft.com/library/25ffe70d-ce97-4f0a-8ae0-22b7c40f748a)합니다.  
  
   
  
## Examples  
 이 예제는 기준으로 합니다 [AdventureWorks Sales 모델](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)합니다. 이 예제에서는 동시성 충돌을 발생할 수 있는 변경 내용을 저장하려고 시도합니다. 그런 다음 변경 내용을 다시 저장하기 전에 개체 컨텍스트를 새로 고쳐 동시성 충돌을 해결하는 방법을 보여 줍니다.  
  
 [!code-csharp[DP ObjectServices Concepts#Concurrency](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#concurrency)]
 [!code-vb[DP ObjectServices Concepts#Concurrency](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#concurrency)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OptimisticConcurrencyException">데이터 원본에서 낙관적 동시성 위반이 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public int SaveChanges (bool acceptChangesDuringSave);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SaveChanges(bool acceptChangesDuringSave) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function SaveChanges (acceptChangesDuringSave As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SaveChanges(bool acceptChangesDuringSave);" />
      <MemberSignature Language="F#" Value="member this.SaveChanges : bool -&gt; int" Usage="objectContext.SaveChanges acceptChangesDuringSave" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Use SaveChanges(SaveOptions options) instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="acceptChangesDuringSave" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="acceptChangesDuringSave">이 매개 변수는 클라이언트 쪽 트랜잭션을 지원하는 데 필요합니다. <see langword="true" />이면 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" />가 완료된 후 모든 개체에 대한 변경 내용 추적이 다시 설정되고, <see langword="false" />이면 <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChanges" />를 호출한 후 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" /> 메서드를 호출해야 합니다.</param>
        <summary>데이터 소스에 대한 모든 업데이트를 유지하고 선택적으로 개체 컨텍스트에서 변경 내용 추적을 다시 설정합니다.</summary>
        <returns><see cref="F:System.Data.EntityState.Added" />가 호출된 경우 <see cref="F:System.Data.EntityState.Modified" />, <see cref="F:System.Data.EntityState.Deleted" /> 또는 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 상태의 개체 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 된 <xref:System.Data.Objects.ObjectContext.SaveChanges%28System.Data.Objects.SaveOptions%29> 메서드 대신 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OptimisticConcurrencyException">낙관적 동시성 위반이 발생한 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public virtual int SaveChanges (System.Data.Objects.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SaveChanges(valuetype System.Data.Objects.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SaveChanges (options As SaveOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int SaveChanges(System::Data::Objects::SaveOptions options);" />
      <MemberSignature Language="F#" Value="abstract member SaveChanges : System.Data.Objects.SaveOptions -&gt; int&#xA;override this.SaveChanges : System.Data.Objects.SaveOptions -&gt; int" Usage="objectContext.SaveChanges options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Data.Objects.SaveOptions" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="options">작업의 동작을 결정하는 <see cref="T:System.Data.Objects.SaveOptions" /> 값입니다.</param>
        <summary>지정된 <see cref="T:System.Data.Objects.SaveOptions" />를 사용하여 데이터 소스에 대한 모든 업데이트를 유지합니다.</summary>
        <returns><see cref="F:System.Data.EntityState.Added" />가 호출된 경우 <see cref="F:System.Data.EntityState.Modified" />, <see cref="F:System.Data.EntityState.Deleted" /> 또는 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 상태의 개체 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 특정 오버 로드를 사용 하 여 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 하거나 있는지 <xref:System.Data.Objects.ObjectContext.DetectChanges%2A> 또는 데이터 원본에 변경 내용을 저장 하기 전에 호출 됩니다 <xref:System.Data.Objects.ObjectContext.AcceptAllChanges%2A> 데이터 원본에 대 한 변경 사항을 저장 하면 호출 됩니다.  
  
 이 열거형에는 <xref:System.FlagsAttribute> 해당 멤버 값의 비트 조합을 허용 하는 합니다.  
  
 클라이언트에서 개체 데이터 원본 측 논리에 의해 업데이트 되었는지 확인을 호출할 수 있습니다 합니다 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 메서드를 <xref:System.Data.Objects.RefreshMode.StoreWins> 호출한 후 값 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>합니다. <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 메서드는 트랜잭션에서 작동 합니다. <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 해당 트랜잭션을 롤백하고 중 하나라도 변경 된 경우 예외를 throw <xref:System.Data.Objects.ObjectStateEntry> 개체를 유지할 수 없습니다.  
  
 낙관적 동시성 위반이 발생하면 <xref:System.Data.OptimisticConcurrencyException>이 throw됩니다. 낙관적 동시성 위반을 catch하여 해결하려면 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 또는 <xref:System.Data.Objects.RefreshMode.StoreWins> 값을 사용하여 <xref:System.Data.Objects.RefreshMode.ClientWins> 메서드를 호출한 다음 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 메서드를 다시 호출합니다. 자세한 내용은 [방법: 개체 컨텍스트에서 데이터 동시성 관리](https://msdn.microsoft.com/library/25ffe70d-ce97-4f0a-8ae0-22b7c40f748a)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OptimisticConcurrencyException">낙관적 동시성 위반이 발생한 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="SavingChanges">
      <MemberSignature Language="C#" Value="public event EventHandler SavingChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SavingChanges" />
      <MemberSignature Language="DocId" Value="E:System.Data.Objects.ObjectContext.SavingChanges" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SavingChanges As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SavingChanges;" />
      <MemberSignature Language="F#" Value="member this.SavingChanges : EventHandler " Usage="member this.SavingChanges : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>변경 내용이 데이터 소스에 저장될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.SavingChanges> 이벤트는 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>에서 <xref:System.Data.Objects.ObjectContext> 작업을 시작할 때 발생합니다. 이 이벤트는 일반적으로 새 값을 데이터베이스에 쓰기 전에 변경된 개체의 유효성을 검사하는 데 사용됩니다.  
  
   
  
## Examples  
 이 예제는 기준으로 합니다 [AdventureWorks Sales 모델](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)합니다. 이 예제에서는 엔터티 상태 유효성 검사를 수행하는 <xref:System.Data.Objects.ObjectContext.SavingChanges> 이벤트에 대한 처리기를 등록합니다.  
  
 [!code-csharp[DP ObjectServices Concepts#SavingChanges](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#savingchanges)]
 [!code-vb[DP ObjectServices Concepts#SavingChanges](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#savingchanges)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Translate&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; Translate&lt;TElement&gt; (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; Translate&lt;TElement&gt;(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Translate(Of TElement) (reader As DbDataReader) As ObjectResult(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Data::Objects::ObjectResult&lt;TElement&gt; ^ Translate(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Translate : System.Data.Common.DbDataReader -&gt; System.Data.Objects.ObjectResult&lt;'Element&gt;" Usage="objectContext.Translate reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TElement"><see cref="T:System.Data.Common.DbDataReader" />에서 데이터의 엔터티 형식입니다.</typeparam>
        <param name="reader">엔터티 개체로 변환할 엔터티 데이터를 포함하는 <see cref="T:System.Data.Common.DbDataReader" />입니다.</param>
        <summary>엔터티 데이터의 행이 포함된 <see cref="T:System.Data.Common.DbDataReader" />를 요청된 엔터티 형식의 개체로 변환합니다.</summary>
        <returns><paramref name="TResult" /> 형식의 개체 열거형입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.Translate%2A> 메서드는 엔터티 데이터를 변환 데는 <xref:System.Data.Common.DbDataReader> 요청 된 형식의 개체로 합니다. 이 프로세스는 자동으로 수행 시기는 <xref:System.Data.Objects.ObjectQuery%601> 엔터티 데이터를 반환 하기 위해 실행 됩니다. <xref:System.Data.Objects.ObjectContext.Translate%2A> 메서드를 사용 하면 데이터 원본에 대 한 표준 ADO.NET 쿼리를 실행 하 고 반환 된 데이터 행을 엔터티 개체로 변환할 수 있습니다.  
  
 제공 된 <xref:System.Data.Common.DbDataReader> 요청 된 엔터티 형식에 매핑되는 데이터를 포함 해야 합니다.  
  
 자세한 내용은 다음을 참조하세요.  
  
 [저장 명령 직접 실행](https://msdn.microsoft.com/library/5708d0a2-3f76-4825-978a-d06ff5c4bb3d) 및  
  
 [방법: 데이터 원본에 대해 명령 직접 실행](https://msdn.microsoft.com/library/def3cc87-cfff-4dee-83cf-1a40c73a2d01)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" />가 <see langword="null" />일 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Translate&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TEntity&gt; Translate&lt;TEntity&gt; (System.Data.Common.DbDataReader reader, string entitySetName, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TEntity&gt; Translate&lt;TEntity&gt;(class System.Data.Common.DbDataReader reader, string entitySetName, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Objects.MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; System::Data::Objects::ObjectResult&lt;TEntity&gt; ^ Translate(System::Data::Common::DbDataReader ^ reader, System::String ^ entitySetName, System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="member this.Translate : System.Data.Common.DbDataReader * string * System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectResult&lt;'Entity&gt;" Usage="objectContext.Translate (reader, entitySetName, mergeOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="entitySetName" Type="System.String" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" Index="2" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"><see cref="T:System.Data.Common.DbDataReader" />에서 데이터의 엔터티 형식입니다.</typeparam>
        <param name="reader">엔터티 개체로 변환할 엔터티 데이터를 포함하는 <see cref="T:System.Data.Common.DbDataReader" />입니다.</param>
        <param name="entitySetName"><typeparamref name="TEntity" /> 형식의 엔터티 집합입니다.</param>
        <param name="mergeOption">변환된 개체를 개체 컨텍스트에 추가할 때 사용하는 <see cref="T:System.Data.Objects.MergeOption" />입니다. 기본값은 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />입니다.</param>
        <summary>엔터티 데이터의 행이 포함된 <see cref="T:System.Data.Common.DbDataReader" />를 특정 엔터티 집합에서 지정된 병합 옵션을 사용하여 요청된 엔터티 형식의 개체로 변환합니다.</summary>
        <returns><paramref name="TResult" /> 형식의 개체 열거형입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.Translate%2A> 메서드는 엔터티 데이터를 변환 데는 <xref:System.Data.Common.DbDataReader> 요청 된 형식의 개체로 합니다. 이 프로세스는 자동으로 수행 시기는 <xref:System.Data.Objects.ObjectQuery%601> 엔터티 데이터를 반환 하기 위해 실행 됩니다. <xref:System.Data.Objects.ObjectContext.Translate%2A> 메서드를 사용 하면 데이터 원본에 대 한 표준 ADO.NET 쿼리를 실행 하 고 반환 된 데이터 행을 엔터티 개체로 변환할 수 있습니다.  
  
 제공 된 <xref:System.Data.Common.DbDataReader> 요청 된 엔터티 형식에 매핑되는 데이터를 포함 해야 합니다.  
  
 자세한 내용은 다음을 참조하세요.  
  
 [저장 명령 직접 실행](https://msdn.microsoft.com/library/5708d0a2-3f76-4825-978a-d06ff5c4bb3d) 및  
  
 [방법: 데이터 원본에 대해 명령 직접 실행](https://msdn.microsoft.com/library/def3cc87-cfff-4dee-83cf-1a40c73a2d01)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" />가 <see langword="null" />일 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">제공된 <paramref name="mergeOption" />이 유효한 <see cref="T:System.Data.Objects.MergeOption" /> 값이 아닌 경우</exception>
        <exception cref="T:System.InvalidOperationException">제공된 <paramref name="entitySetName" />이 <paramref name="TResult" /> 형식에 대해 유효한 엔터티 집합이 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetObjectByKey">
      <MemberSignature Language="C#" Value="public bool TryGetObjectByKey (System.Data.EntityKey key, out object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetObjectByKey(class System.Data.EntityKey key, [out] object&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.TryGetObjectByKey(System.Data.EntityKey,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetObjectByKey (key As EntityKey, ByRef value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetObjectByKey(System::Data::EntityKey ^ key, [Runtime::InteropServices::Out] System::Object ^ % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetObjectByKey : System.Data.EntityKey *  -&gt; bool" Usage="objectContext.TryGetObjectByKey (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.EntityKey" />
        <Parameter Name="value" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">찾을 개체의 키입니다.</param>
        <param name="value">이 메서드의 반환 값에는 개체가 포함됩니다.</param>
        <summary>지정된 엔터티 키가 있는 개체를 반환합니다.</summary>
        <returns>개체가 검색되었으면 <see langword="true" />이고, <paramref name="key" />가 임시 키이거나 연결이 <see langword="false" />이거나 <paramref name="value" />가 <see langword="null" />이면 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A>에서는 지정된 <xref:System.Data.EntityKey>가 있는 개체를 <xref:System.Data.Objects.ObjectStateManager>에서 검색하려고 시도합니다. 개체가 현재 개체 컨텍스트에 로드되어 있지 않으면 쿼리를 실행하여 데이터 원본에서 개체를 반환하려고 시도합니다. 자세한 내용은 [개체 쿼리](https://msdn.microsoft.com/library/0768033c-876f-471d-85d5-264884349276)합니다.  
  
 <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> 메서드를 사용하여 개체를 찾을 수 없을 때 <xref:System.Data.ObjectNotFoundException>에서 <xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A>이 발생하지 않도록 합니다.  
  
 이 메서드는 <xref:System.Data.EntityState.Deleted> 상태의 개체를 반환합니다.  
  
 임시 키를 사용해서는 데이터 원본의 개체를 반환할 수 없습니다.  
  
 <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> 메서드는 표준.NET 적용 됩니다 `TryParse` 패턴에 대 한 합니다 <xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A> 메서드를 반환 `false` 경우는 <xref:System.Data.ObjectNotFoundException> 발견 되 합니다.  
  
   
  
## Examples  
 이 항목의 예제는 기준으로 합니다 [AdventureWorks Sales 모델](https://msdn.microsoft.com/library/f16cd988-673f-4376-b034-129ca93c7832)합니다. 예제에서는 지정된 형식의 엔터티에 대한 <xref:System.Data.EntityKey>를 만들고 키로 엔터티를 검색하려고 시도합니다.  
  
 [!code-csharp[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#entitykeyclass_trygetobjectbykey)]
 [!code-vb[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#entitykeyclass_trygetobjectbykey)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="key" />의 메타데이터가 호환되지 않는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/338d8a55-05cc-46b0-bbb8-1379d77068e9">개체 작업(Entity Framework)</related>
      </Docs>
    </Member>
  </Members>
</Type>