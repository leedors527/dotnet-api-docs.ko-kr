<Type Name="OleDbEnumerator" FullName="System.Data.OleDb.OleDbEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f03f35fb6322f0a6f80f601f34842821ae94e1c5" /><Meta Name="ms.sourcegitcommit" Value="d8bd5d494445ce3fcad1321267cb87548d23a45b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="12/15/2018" /><Meta Name="ms.locfileid" Value="53446683" /></Metadata><TypeSignature Language="C#" Value="public sealed class OleDbEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OleDbEnumerator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.OleDb.OleDbEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OleDbEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class OleDbEnumerator sealed" />
  <TypeSignature Language="F#" Value="type OleDbEnumerator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>로컬 네트워크에 있는 사용 가능한 모든 OLE DB 공급자를 열거하는 메커니즘을 제공합니다.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbEnumerator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OleDbEnumerator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.OleDb.OleDbEnumerator" /> 클래스의 인스턴스를 만듭니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElements">
      <MemberSignature Language="C#" Value="public System.Data.DataTable GetElements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable GetElements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbEnumerator.GetElements" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElements () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ GetElements();" />
      <MemberSignature Language="F#" Value="member this.GetElements : unit -&gt; System.Data.DataTable" Usage="oleDbEnumerator.GetElements " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>표시되는 모든 OLE DB 공급자에 대한 정보를 포함하는 <see cref="T:System.Data.DataTable" />을 검색합니다.</summary>
        <returns>표시되는 OLE DB 공급자에 대한 정보를 포함하는 <see cref="T:System.Data.DataTable" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드에서 반환 되는 테이블에 문자열을 포함 하는 모든 다음 열을 포함 되어 있습니다.  
  
|열 서 수|열|설명|  
|--------------------|------------|-----------------|  
|0|SOURCES_NAME|네이티브 ole DB 데이터 원본을 또는 열거자의 고정 이름입니다.|  
|1|SOURCES_PARSENAME|IParseDisplayName 네이티브 COM 인터페이스를 사용 하 여 모니커를 변환할 수 있는 사용자를 읽을 수 있는 이름입니다. 네이티브 OLE DB 원본의 행 집합을 반환한 SOURCES_PARSENAME 열에 해당 합니다.|  
|2|SOURCES_DESCRIPTION|네이티브 OLE DB 데이터 원본의 설명입니다. 네이티브 OLE DB 원본의 행 집합을 반환한 SOURCES_DESCRIPTION 열에 해당 합니다.|  
|3|SOURCES_TYPE|열거형 멤버 중 하나: 바인더 (0), DataSource_MDP (1), (2) DataSource_TDP 열거자 (3). 네이티브 OLE DB 원본의 행 집합의 SOURCES_TYPE 열에 반환 값에 해당 합니다.|  
|4|SOURCES_ISPARENT|열거자만 적용할 수 있습니다. 경우 `true`GetSourcesRowset 호출한 동일한 열거자를 항목 적용 된다고, 하위 열거형에도 포함 되어 있는지를 의미 합니다. 네이티브 OLE DB 원본의 행 집합의 SOURCES_ISPARENT 열에 해당|  
|5|SOURCES_CLSID|알기 쉬운 이름을, IParseDisplayName 네이티브 COM 인터페이스를 사용 하는 모니커를 변환할 수 있는 합니다. 네이티브 OLE DB 원본의 행 집합을 반환한 SOURCES_CLSID 열에 해당 합니다.|  
  
   
  
## Examples  
 다음 콘솔 애플리케이션 표시 되는 모든 OLE DB 공급자에 대 한 정보를 검색 하 고 콘솔 창에 정보를 표시 합니다.  
  
```vb  
Imports System.Data  
Imports System.Data.OleDb  
  
Module Module1  
  
Sub Main()  
  Dim enumerator As New OleDbEnumerator  
  Dim table As System.Data.DataTable = enumerator.GetElements()  
  
  DisplayData(table)  
  
   Console.WriteLine("Press any key to continue.")  
   Console.ReadKey()  
 End Sub  
  
 Private Sub DisplayData(ByVal table As DataTable)  
   For Each row As DataRow In table.Rows  
     For Each col As DataColumn In table.Columns  
       Console.WriteLine("{0} = {1}", col.ColumnName, row(col))  
     Next  
     Console.WriteLine("==================================")  
   Next  
 End Sub  
End Module  
```  
  
```csharp  
using System;  
using System.Data;  
using System.Data.OleDb;  
  
class Program  
{  
 static void Main()  
 {  
   OleDbEnumerator enumerator = new OleDbEnumerator();  
   DataTable table = enumerator.GetElements();  
  
   DisplayData(table);  
  
   Console.WriteLine("Press any key to continue.");  
   Console.ReadKey();  
 }  
  
 static void DisplayData(DataTable table)  
 {  
   foreach (DataRow row in table.Rows)  
   {  
     foreach (DataColumn col in table.Columns)  
     {  
       Console.WriteLine("{0} = {1}", col.ColumnName, row[col]);  
     }  
     Console.WriteLine("==================================");  
   }  
 }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">공급자가 ISourcesRowset을 지원하지 않는 경우</exception>
        <exception cref="T:System.Data.OleDb.OleDbException">내부 공급자에서 예외가 발생한 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public static System.Data.OleDb.OleDbDataReader GetEnumerator (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OleDb.OleDbDataReader GetEnumerator(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbEnumerator.GetEnumerator(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Data::OleDb::OleDbDataReader ^ GetEnumerator(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetEnumerator : Type -&gt; System.Data.OleDb.OleDbDataReader" Usage="System.Data.OleDb.OleDbEnumerator.GetEnumerator type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.Type" /></param>
        <summary>특정 OLE DB 열거자를 사용하여 <see cref="T:System.Data.OleDb.OleDbDataReader" /> 클래스 인스턴스를 필요로 하지 않고 현재 설치된 OLE DB 공급자에 대한 정보를 포함하는 <see cref="T:System.Data.OleDb.OleDbEnumerator" />를 반환합니다.</summary>
        <returns>지정된 OLE DB 열거자를 사용하여 요청된 OLE DB 공급자에 대한 정보를 포함하는 <see cref="T:System.Data.OleDb.OleDbDataReader" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드에서 반환 되는 판독기는 모두 문자열을 포함, 같은 열이 포함 합니다.  
  
|열 서수|열|설명|  
|--------------------|------------|-----------------|  
|0|SOURCES_NAME|네이티브 OLE DB 데이터 원본 또는 열거자의 고정 이름입니다.|  
|1|SOURCES_PARSENAME|네이티브 COM 인터페이스를 사용 하는 모니커를 변환할 수 있는 알기 쉬운 이름을 **IParseDisplayName**합니다. 네이티브 OLE DB 원본의 행 집합을 반환한 SOURCES_PARSENAME 열에 해당 합니다.|  
|2|SOURCES_DESCRIPTION|네이티브 OLE DB 데이터 원본의 설명입니다. 네이티브 OLE DB 원본의 행 집합을 반환한 SOURCES_DESCRIPTION 열에 해당 합니다.|  
|3|SOURCES_TYPE|열거형 멤버 중 하나: 바인더 (0), DataSource_MDP (1), (2) DataSource_TDP 열거자 (3). 네이티브 OLE DB 원본의 행 집합의 SOURCES_TYPE 열에 반환 값에 해당 합니다.|  
|4|SOURCES_ISPARENT|열거자만 적용할 수 있습니다. 경우 `true`에는 동일한 열거자를 항목 적용 된다고 **GetSourcesRowset** 가 호출 되 면 하위 열거형에도 포함 되어 있는지를 의미 합니다. 네이티브 OLE DB 원본의 행 집합의 SOURCES_ISPARENT 열에 해당|  
  
 OLE DB에서는 MSDAENUM, MSDASQL 열거자, SQLNCLI 열거자, SQLOLEDB 열거자 등, 여러 열거자 구성 요소를 제공 합니다. 열거자 구성 요소 및 사용 하는 방법에 대 한 자세한 내용은 참조는 [OLE DB Programmer's Reference](https://go.microsoft.com/fwlink/?LinkId=45232)합니다.  
  
   
  
## Examples  
 다음 콘솔 애플리케이션에서는 MSDAENUM 구성 요소를 사용 하 여 모든 OLE DB 공급자에 대 한 정보를 검색 하 고 콘솔 창에 정보를 표시 합니다.  
  
```vb  
Imports System.Data  
Imports System.Data.OleDb  
  
Module Module1  
  
  Sub Main()  
    Dim enumerator As New OleDbEnumerator  
    Dim reader As OleDbDataReader = _  
     OleDbEnumerator.GetEnumerator(Type.GetTypeFromProgID("MSDAENUM"))  
  
    DisplayData(reader)  
  
    Console.WriteLine("Press any key to continue.")  
    Console.ReadKey()  
  End Sub  
  
  Private Sub DisplayData(ByVal reader As OleDbDataReader)  
    While reader.Read()  
      For i As Integer = 0 To reader.FieldCount - 1  
        Console.WriteLine("{0} = {1}", _  
         reader.GetName(i), reader.GetValue(i))  
      Next  
      Console.WriteLine("==================================")  
    End While  
  
  End Sub  
End Module  
```  
  
```csharp  
using System;  
using System.Data;  
using System.Data.OleDb;  
  
class Program  
{  
 static void Main()  
 {  
   OleDbDataReader reader =   
     OleDbEnumerator.GetEnumerator(Type.GetTypeFromProgID("MSDAENUM"));  
  
   DisplayData(reader);  
  
   Console.WriteLine("Press any key to continue.");  
   Console.ReadKey();  
 }  
  
 static void DisplayData(OleDbDataReader reader)  
 {  
   while (reader.Read())  
   {  
     for (int i = 0; i < reader.FieldCount; i++)  
     {  
       Console.WriteLine("{0} = {1}",  
        reader.GetName(i), reader.GetValue(i));  
     }  
     Console.WriteLine("==================================");  
   }  
 }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">공급자가 **ISourcesRowset**을 지원하지 않는 경우</exception>
        <exception cref="T:System.Data.OleDb.OleDbException">내부 공급자에서 예외가 발생한 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRootEnumerator">
      <MemberSignature Language="C#" Value="public static System.Data.OleDb.OleDbDataReader GetRootEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OleDb.OleDbDataReader GetRootEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbEnumerator.GetRootEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRootEnumerator () As OleDbDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Data::OleDb::OleDbDataReader ^ GetRootEnumerator();" />
      <MemberSignature Language="F#" Value="static member GetRootEnumerator : unit -&gt; System.Data.OleDb.OleDbDataReader" Usage="System.Data.OleDb.OleDbEnumerator.GetRootEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbDataReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.OleDb.OleDbDataReader" /> 클래스 인스턴스를 필요로 하지 않고 현재 설치된 OLE DB 공급자에 대한 정보를 포함하는 <see cref="T:System.Data.OleDb.OleDbEnumerator" />를 반환합니다.</summary>
        <returns>표시되는 OLE DB 공급자에 대한 정보를 포함하는 <see cref="T:System.Data.OleDb.OleDbDataReader" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드에서 반환 하는 판독기는 문자열을 포함 하는 모든 다음 열을 포함 되어 있습니다.  
  
|열 서 수|열|설명|  
|--------------------|------------|-----------------|  
|0|SOURCES_NAME|네이티브 ole DB 데이터 원본을 또는 열거자의 고정 이름입니다.|  
|1|SOURCES_PARSENAME|IParseDisplayName 네이티브 COM 인터페이스를 사용 하는 모니커를 변환할 수 있는 사용자를 읽을 수 있는 이름입니다. 네이티브 OLE DB 원본의 행 집합을 반환한 SOURCES_PARSENAME 열에 해당 합니다.|  
|2|SOURCES_DESCRIPTION|네이티브 OLE DB 데이터 원본의 설명입니다. 네이티브 OLE DB 원본의 행 집합을 반환한 SOURCES_DESCRIPTION 열에 해당 합니다.|  
|3|SOURCES_TYPE|열거형 멤버 중 하나: 바인더 (0), DataSource_MDP (1), (2) DataSource_TDP 열거자 (3). 네이티브 OLE DB 원본의 행 집합의 SOURCES_TYPE 열에 반환 값에 해당 합니다.|  
|4|SOURCES_ISPARENT|열거자만 적용할 수 있습니다. 경우 `true`GetSourcesRowset 호출한 동일한 열거자를 항목 적용 된다고, 하위 열거형에도 포함 되어 있는지를 의미 합니다. 네이티브 OLE DB 원본의 행 집합의 SOURCES_ISPARENT 열에 해당|  
|5|SOURCES_CLSID|알기 쉬운 이름을, IParseDisplayName 네이티브 COM 인터페이스를 사용 하는 모니커를 변환할 수 있는 합니다. 네이티브 OLE DB 원본의 행 집합을 반환한 SOURCES_CLSID 열에 해당 합니다.|  
  
   
  
## Examples  
 다음 콘솔 애플리케이션 표시 되는 모든 OLE DB 공급자에 대 한 정보를 검색 하 고 콘솔 창에 정보를 표시 합니다.  
  
```vb  
Imports System.Data  
Imports System.Data.OleDb  
  
Module Module1  
  
  Sub Main()  
    Dim enumerator As New OleDbEnumerator  
    Dim reader As OleDbDataReader = OleDbEnumerator.GetRootEnumerator()  
  
    DisplayData(reader)  
  
    Console.WriteLine("Press any key to continue.")  
    Console.ReadKey()  
  End Sub  
  
  Private Sub DisplayData(ByVal reader As OleDbDataReader)  
    While reader.Read()  
      For i As Integer = 0 To reader.FieldCount - 1  
        Console.WriteLine("{0} = {1}", _  
         reader.GetName(i), reader.GetValue(i))  
      Next  
      Console.WriteLine("==================================")  
    End While  
  
  End Sub  
End Module  
```  
  
```csharp  
using System;  
using System.Data;  
using System.Data.OleDb;  
  
class Program  
{  
 static void Main()  
 {  
   OleDbDataReader reader = OleDbEnumerator.GetRootEnumerator();  
  
   DisplayData(reader);  
  
   Console.WriteLine("Press any key to continue.");  
   Console.ReadKey();  
 }  
  
 static void DisplayData(OleDbDataReader reader)  
 {  
   while (reader.Read())  
   {  
     for (int i = 0; i < reader.FieldCount; i++)  
     {  
       Console.WriteLine("{0} = {1}",  
        reader.GetName(i), reader.GetValue(i));  
     }  
     Console.WriteLine("==================================");  
   }  
 }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">공급자가 ISourcesRowset을 지원하지 않는 경우</exception>
        <exception cref="T:System.Data.OleDb.OleDbException">내부 공급자에서 예외가 발생한 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>