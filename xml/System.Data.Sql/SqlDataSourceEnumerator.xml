<Type Name="SqlDataSourceEnumerator" FullName="System.Data.Sql.SqlDataSourceEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="28285789fe3205faffd487aaf559b5ecbfe70ee1" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65006424" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlDataSourceEnumerator : System.Data.Common.DbDataSourceEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlDataSourceEnumerator extends System.Data.Common.DbDataSourceEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Data.Sql.SqlDataSourceEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlDataSourceEnumerator&#xA;Inherits DbDataSourceEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlDataSourceEnumerator sealed : System::Data::Common::DbDataSourceEnumerator" />
  <TypeSignature Language="F#" Value="type SqlDataSourceEnumerator = class&#xA;    inherit DbDataSourceEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbDataSourceEnumerator</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>로컬 네트워크 내에서 SQL Server의 모든 사용 가능한 인스턴스를 열거 하는 메커니즘을 제공 합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SQL Server 응용 프로그램의 현재 네트워크 내에서 해당 인스턴스의 존재 여부를 결정할 수 있습니다. <xref:System.Data.Sql.SqlDataSourceEnumerator> 클래스를 제공 하는 애플리케이션 개발자에 게이 정보를 노출를 <xref:System.Data.DataTable> 사용 가능한 모든 서버에 대 한 정보를 포함 합니다. 이 반환 된 테이블 및 사용자가 새 연결을 만들 하려고 할 때 제공 된 목록과 일치 하는 서버 인스턴스의 목록을 포함 합니다 `Connection Properties` 대화 상자에서 사용 가능한 모든 서버를 포함 하는 드롭다운 목록을 확장 합니다.  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/data/adonet/sql/enumerating-instances-of-sql-server">SQL Server의 인스턴스 열거</related>
  </Docs>
  <Members>
    <Member MemberName="GetDataSources">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetDataSources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetDataSources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Sql.SqlDataSourceEnumerator.GetDataSources" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDataSources () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetDataSources();" />
      <MemberSignature Language="F#" Value="override this.GetDataSources : unit -&gt; System.Data.DataTable" Usage="sqlDataSourceEnumerator.GetDataSources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>표시되는 모든 SQL Server 인스턴스에 대한 정보를 포함하는 <see cref="T:System.Data.DataTable" />을 검색합니다.</summary>
        <returns>표시되는 SQL Server 인스턴스에 대한 정보를 포함하는 <see cref="T:System.Data.DataTable" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드에서 반환 되는 테이블에 문자열을 포함 하는 모든 열  
  
|열|설명|  
|------------|-----------------|  
|**ServerName**|서버의 이름입니다.|  
|**InstanceName**|서버 인스턴스의 이름입니다. 서버가 기본 인스턴스로 실행 중인 경우에는 비어 있습니다.|  
|**IsClustered**|서버가 클러스터의 일부인지 여부를 나타냅니다.|  
|**Version**|서버 버전:<br /><br />10.0.xx for SQL Server 2008<br />10.50.x for SQL Server 2008 R2<br />11.0.xx for SQL Server 2012<br />12.0.xx for SQL Server 2014<br />13.0.xx for SQL Server 2016<br />14.0.xx for SQL Server 2017|  
  
> [!NOTE]
>  사용 하는 메커니즘의 특성으로 인해 <xref:System.Data.Sql.SqlDataSourceEnumerator> 네트워크에서 데이터 소스를 찾으려면 메서드는 항상 반환 하지 목록은 사용 가능한 서버 및 목록 아닐 대 한 모든 호출에서 동일 합니다. 이 함수를 사용 하 여 사용자가 목록에서 서버를 선택할 수 있도록 하려는 경우에 항상 서버 열거는 사용 가능한 모든 서버를 반환 하지 않는 경우 목록에 없는 이름을 입력 하는 옵션이 제공 해야 합니다. 또한이 메서드는 성능이 중요 한 경우 호출 하는 방법에 대 한 주의 실행 하는 시간이 많이 걸릴 수 있습니다.  
  
   
  
## Examples  
 다음 콘솔 애플리케이션 표시 되는 모든 SQL Server 인스턴스에 대 한 정보를 검색 하 고 콘솔 창에 정보를 표시 합니다.  
  
```vb  
Imports System.Data.Sql  
  
Module Module1  
  Sub Main()  
    ' Retrieve the enumerator instance and then the data.  
    Dim instance As SqlDataSourceEnumerator = _  
     SqlDataSourceEnumerator.Instance  
    Dim table As System.Data.DataTable = instance.GetDataSources()  
  
    ' Display the contents of the table.  
    DisplayData(table)  
  
    Console.WriteLine("Press any key to continue.")  
    Console.ReadKey()  
  End Sub  
  
  Private Sub DisplayData(ByVal table As DataTable)  
    For Each row As DataRow In table.Rows  
      For Each col As DataColumn In table.Columns  
        Console.WriteLine("{0} = {1}", col.ColumnName, row(col))  
      Next  
      Console.WriteLine("============================")  
    Next  
  End Sub  
End Module  
```  
  
```csharp  
using System.Data.Sql;  
  
class Program  
{  
  static void Main()  
  {  
    // Retrieve the enumerator instance and then the data.  
    SqlDataSourceEnumerator instance =  
      SqlDataSourceEnumerator.Instance;  
    System.Data.DataTable table = instance.GetDataSources();  
  
    // Display the contents of the table.  
    DisplayData(table);  
  
    Console.WriteLine("Press any key to continue.");  
    Console.ReadKey();  
  }  
  
  private static void DisplayData(System.Data.DataTable table)  
  {  
    foreach (System.Data.DataRow row in table.Rows)  
    {  
      foreach (System.Data.DataColumn col in table.Columns)  
      {  
        Console.WriteLine("{0} = {1}", col.ColumnName, row[col]);  
      }  
      Console.WriteLine("============================");  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/enumerating-instances-of-sql-server">SQL Server의 인스턴스 열거</related>
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="public static System.Data.Sql.SqlDataSourceEnumerator Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Data.Sql.SqlDataSourceEnumerator Instance" />
      <MemberSignature Language="DocId" Value="P:System.Data.Sql.SqlDataSourceEnumerator.Instance" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Instance As SqlDataSourceEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Data::Sql::SqlDataSourceEnumerator ^ Instance { System::Data::Sql::SqlDataSourceEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Instance : System.Data.Sql.SqlDataSourceEnumerator" Usage="System.Data.Sql.SqlDataSourceEnumerator.Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Sql.SqlDataSourceEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인스턴스를 가져옵니다는 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" />는 사용 가능한 SQL Server 인스턴스에 대 한 정보를 검색할 수 있습니다.</summary>
        <value>인스턴스는 <see cref="T:System.Data.Sql.SqlDataSourceEnumerator" /> 사용 가능한 SQL Server 인스턴스에 대 한 정보를 검색 하는 데 사용 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Sql.SqlDataSourceEnumerator> 클래스 생성자를 제공 하지 않습니다. 사용 된 <xref:System.Data.Sql.SqlDataSourceEnumerator.Instance%2A> 대신 클래스의 인스턴스를 검색 하는 속성입니다.  
  
   
  
## Examples  
 다음 콘솔 애플리케이션에는 로컬 네트워크 내에서 사용할 수 있는 모든 SQL Server 2005 인스턴스의 목록을 표시합니다. 이 코드를 사용 합니다 <xref:System.Data.DataTable.Select%2A> 에서 반환 된 테이블에서 행을 필터링 하는 방법의 <xref:System.Data.Sql.SqlDataSourceEnumerator.GetDataSources%2A> 메서드.  
  
```vb  
Imports System.Data.Sql  
  
Module Module1  
  Sub Main()  
    ' Retrieve the enumerator instance, and  
    ' then retrieve the data sources.  
    Dim instance As SqlDataSourceEnumerator = _  
     SqlDataSourceEnumerator.Instance  
    Dim table As System.Data.DataTable = instance.GetDataSources()  
  
    ' Filter the sources to just show SQL Server 2005 instances.  
    Dim rows() As DataRow = table.Select("Version LIKE '9%'")  
    For Each row As DataRow In rows  
      Console.WriteLine(row("ServerName"))  
    Next  
    Console.WriteLine("Press any key to continue.")  
    Console.ReadKey()  
  End Sub  
End Module  
```  
  
```csharp  
using System.Data.Sql;  
  
class Program  
{  
  static void Main()  
  {  
    // Retrieve the enumerator instance, and  
    // then retrieve the data sources.  
    SqlDataSourceEnumerator instance =  
      SqlDataSourceEnumerator.Instance;  
    System.Data.DataTable table = instance.GetDataSources();  
  
    // Filter the sources to just show SQL Server 2005 instances.  
    System.Data.DataRow[] rows = table.Select("Version LIKE '9%'");  
    foreach (System.Data.DataRow row in rows)  
    {  
      Console.WriteLine(row["ServerName"]);  
    }  
    Console.WriteLine("Press any key to continue.");  
    Console.ReadKey();  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/sql/enumerating-instances-of-sql-server">SQL Server의 인스턴스 열거</related>
      </Docs>
    </Member>
  </Members>
</Type>