<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c2245419dca31dcc8fa93f103a021ddcfb28d779" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56791045" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopy&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopy sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SqlBulkCopy = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>데이터가 있는 SQL Server 테이블을 다른 소스에서 대량으로 로드하는 작업을 효율적으로 수행할 수 있습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft SQL Server 명명 된 인기 있는 명령 프롬프트 유틸리티를 포함 **bcp** 서버 간 또는 단일 서버에 있는지 여부를 다른 데이터를에서 이동 합니다. <xref:System.Data.SqlClient.SqlBulkCopy> 클래스를 사용 하면 비슷한 기능을 제공 하는 관리 코드 솔루션을 작성 합니다. 가지 다른 방법 (INSERT 문, 예를 들어), SQL Server 테이블로 데이터를 로드 하지만 <xref:System.Data.SqlClient.SqlBulkCopy> 가져갈 상당한 성능 이점을 제공 합니다.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> 클래스를 사용하면 SQL Server 테이블에만 데이터를 쓸 수 있습니다. 그러나 데이터 원본 SQL server에 제한 되지 않습니다. 데이터를 로드할 수 있다면 모든 데이터 원본을 사용할 수 있습니다는 <xref:System.Data.DataTable> 인스턴스 또는 읽기는 <xref:System.Data.IDataReader> 인스턴스.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> 대량 로드는 <xref:System.Data.DataTable> 형식의 열 <xref:System.Data.SqlTypes.SqlDateTime> SQL server 열 형식의 날짜/시간 형식 중 하나는 SQL Server 2008에 추가 합니다.  
  
   
  
## Examples  
 다음 콘솔 애플리케이션에서는 <xref:System.Data.SqlClient.SqlBulkCopy> 클래스를 사용하여 데이터를 로드하는 방법을 보여 줍니다. 이 예제에서는 <xref:System.Data.SqlClient.SqlDataReader> 에서 데이터를 복사 하는 데 사용 되는 **Production.Product** SQL Server의 테이블 **AdventureWorks** 동일한 데이터베이스의 유사한 테이블에는 데이터베이스입니다.  
  
> [!IMPORTANT]
>  이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다. 이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다. 쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Performing Bulk Copy Operations</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">대량 복사 작업을 수행하는 데 사용할 이미 열려 있는 <see cref="T:System.Data.SqlClient.SqlConnection" /> 인스턴스입니다. 연결 문자열에서 <see langword="Integrated Security = true" />를 사용 중이 아니면 <see cref="T:System.Data.SqlClient.SqlCredential" />을 사용하여 연결 문자열에서 사용자 ID와 암호를 텍스트로 지정할 때보다 사용자 ID와 암호를 보다 안전하게 전달할 수 있습니다.</param>
        <summary>지정된 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />의 열려 있는 인스턴스를 사용하여 <see cref="T:System.Data.SqlClient.SqlConnection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 연결이 이미 열려 있으므로 때 합니다 <xref:System.Data.SqlClient.SqlBulkCopy> 인스턴스가 초기화 되었는지, 연결 후 열린 상태로 유지 됩니다는 <xref:System.Data.SqlClient.SqlBulkCopy> 인스턴스가 닫혀 합니다.  
  
 경우는 `connection` 인수가 null는 <xref:System.ArgumentNullException> throw 됩니다.  
  
   
  
## Examples  
 다음 콘솔 애플리케이션 데이터 대량 로드는 이미 열려 있는 연결을 사용 하는 방법에 설명 합니다. 이 예제에서는 <xref:System.Data.SqlClient.SqlDataReader> 에서 데이터를 복사 하는 데 사용 되는 **Production.Product** SQL Server의 테이블 **AdventureWorks** 동일한 데이터베이스의 유사한 테이블에는 데이터베이스입니다. 이 예제는 데모용으로만 제공됩니다. 사용 하지 않을 `SqlBulkCopy` 프로덕션 애플리케이션에서 동일한 데이터베이스에서 다른 한 테이블에서 데이터를 이동 하 합니다. 원본 데이터를 SQL 서버에 있이 필요가 없습니다 읽을 수 있는 모든 데이터 원본을 사용할 수 있습니다는 <xref:System.Data.IDataReader> 하기 위해 로드 또는 <xref:System.Data.DataTable>합니다.  
  
> [!IMPORTANT]
>  이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다. 이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다. 쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Performing Bulk Copy Operations</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString"><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 인스턴스에서 사용하기 위해 열리는 연결을 정의하는 문자열입니다. 연결 문자열에서 <see langword="Integrated Security = true" />를 사용 중이 아니면 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> 또는 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> 및 <see cref="T:System.Data.SqlClient.SqlCredential" />을 사용하여 연결 문자열에서 사용자 ID와 암호를 텍스트로 지정할 때보다 사용자 ID와 암호를 보다 안전하게 전달할 수 있습니다.</param>
        <summary>제공된 <paramref name="connectionString" />을 기반으로 하는 <see cref="T:System.Data.SqlClient.SqlConnection" />의 새 인스턴스를 초기화하고 엽니다. 이 생성자는 <see cref="T:System.Data.SqlClient.SqlConnection" />을 사용하여 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 연결 끝의 대량 복사 작업을 자동으로 닫혀 있습니다.  
  
 하는 경우 `connectionString` 가 null을 <xref:System.ArgumentNullException> throw 됩니다. 하는 경우 `connectionString` 빈 문자열이 면는 <xref:System.ArgumentException> throw 됩니다.  
  
   
  
## Examples  
 다음 콘솔 애플리케이션에는 문자열로 지정 된 연결을 사용 하 여 데이터 대량 로드 하는 방법을 보여 줍니다. 연결이 자동으로 닫힐 때는 <xref:System.Data.SqlClient.SqlBulkCopy> 인스턴스가 닫혀 있습니다.  
  
 이 예제에서는 원본 데이터를 SQL Server 테이블에서 읽을 먼저를 <xref:System.Data.SqlClient.SqlDataReader> 인스턴스. 원본 데이터를 SQL 서버에 있이 필요가 없습니다. 읽을 수 있는 모든 데이터 원본을 사용할 수 있습니다는 <xref:System.Data.IDataReader> 하기 위해 로드 또는 <xref:System.Data.DataTable>합니다.  
  
> [!IMPORTANT]
>  이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다. 이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다. 쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">SQL Server에서 대량 복사 작업</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, copyOptions As SqlBulkCopyOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString, System::Data::SqlClient::SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string * System.Data.SqlClient.SqlBulkCopyOptions -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connectionString, copyOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString"><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 인스턴스에서 사용하기 위해 열리는 연결을 정의하는 문자열입니다. 연결 문자열에서 <see langword="Integrated Security = true" />를 사용 중이 아니면 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> 또는 <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> 및 <see cref="T:System.Data.SqlClient.SqlCredential" />을 사용하여 연결 문자열에서 사용자 ID와 암호를 텍스트로 지정할 때보다 사용자 ID와 암호를 보다 안전하게 전달할 수 있습니다.</param>
        <param name="copyOptions">대상 테이블에 복사되는 데이터 소스 행을 결정하는 <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 열거형의 값 조합입니다.</param>
        <summary>제공된 <paramref name="connectionString" />을 기반으로 하는 <see cref="T:System.Data.SqlClient.SqlConnection" />의 새 인스턴스를 초기화하고 엽니다. 이 생성자는 <see cref="T:System.Data.SqlClient.SqlConnection" />을 사용하여 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 클래스의 새 인스턴스를 초기화합니다. <see cref="T:System.Data.SqlClient.SqlConnection" /> 인스턴스는 <paramref name="copyOptions" /> 매개 변수에 제공된 옵션에 따라 작동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 대량 복사 옵션에 대 한 자세한 정보를 가져올 수 있습니다는 <xref:System.Data.SqlClient.SqlBulkCopyOptions> 항목입니다.  
  
   
  
## Examples  
 다음 콘솔 애플리케이션에는 문자열로 지정 된 연결을 사용 하 여 대량 로드를 수행 하는 방법을 보여 줍니다. 옵션은 대상 테이블을 로드 하는 경우 원본 테이블의 id 열에 값을 사용 하도록 설정 됩니다. 이 예제에서는 원본 데이터를 SQL Server 테이블에서 읽을 먼저를 <xref:System.Data.SqlClient.SqlDataReader> 인스턴스. 원본 테이블 및 대상 테이블에는 각 Id 열을 포함 합니다. 기본적으로 새 값을 **Identity** 추가 된 각 행에 대 한 대상 테이블의 열이 생성 됩니다. 이 예제에서는 옵션을 사용 하는 대량 로드 프로세스를 강제로 수행 하는 연결이 열릴 때 설정 된 **Identity** 대신 원본 테이블의 값입니다. 옵션에 따라 대량 로드 작업이 작동 하는 방식을 확인 합니다 **dbo입니다. BulkCopyDemoMatchingColumns** 빈 테이블입니다. 모든 행이 소스에서 로드 합니다. 테이블을 지우지 않고 샘플을 다시 실행 합니다. 예외가 발생 하 고 코드는 primary key 제약 조건 위반으로 인해 행이 추가 되지 있는지 여부를 알리는 콘솔에 메시지를 씁니다.  
  
> [!IMPORTANT]
>  이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다. 이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다. 쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Performing Bulk Copy Operations</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlBulkCopyOptions copyOptions, System::Data::SqlClient::SqlTransaction ^ externalTransaction);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection * System.Data.SqlClient.SqlBulkCopyOptions * System.Data.SqlClient.SqlTransaction -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connection, copyOptions, externalTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection">대량 복사 작업을 수행하는 데 사용할 이미 열려 있는 <see cref="T:System.Data.SqlClient.SqlConnection" /> 인스턴스입니다. 연결 문자열에서 <see langword="Integrated Security = true" />를 사용 중이 아니면 <see cref="T:System.Data.SqlClient.SqlCredential" />을 사용하여 연결 문자열에서 사용자 ID와 암호를 텍스트로 지정할 때보다 사용자 ID와 암호를 보다 안전하게 전달할 수 있습니다.</param>
        <param name="copyOptions">대상 테이블에 복사되는 데이터 소스 행을 결정하는 <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 열거형의 값 조합입니다.</param>
        <param name="externalTransaction">대량 복사 작업이 발생할 기존 <see cref="T:System.Data.SqlClient.SqlTransaction" /> 인스턴스입니다.</param>
        <summary>제공된 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />의 이미 열려 있는 인스턴스를 사용하여 <see cref="T:System.Data.SqlClient.SqlConnection" /> 클래스의 새 인스턴스를 초기화합니다. <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 인스턴스는 <paramref name="copyOptions" /> 매개 변수에 제공된 옵션에 따라 작동합니다. 제공된 <see cref="T:System.Data.SqlClient.SqlTransaction" />이 null이 아니면 복사 작업이 해당 트랜잭션 내에서 수행됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 옵션을 포함 하는 경우 `UseInternalTransaction` 하며 `externalTransaction` 인수가 null을 **InvalidArgumentException** throw 됩니다.  
  
 예를 사용 하는 방법을 보여 주는 `SqlBulkCopy` 트랜잭션에서 참조 [트랜잭션 및 대량 복사 작업](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)합니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Performing Bulk Copy Operations</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BatchSize : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>각 일괄 처리의 행 수입니다. 각 일괄 처리의 끝에서 일괄 처리의 행이 서버로 전송됩니다.</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> 속성의 정수 값, 또는 값이 설정되지 않은 경우 0입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일괄 처리는 전체 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 행이 처리 된 없거나 대상 데이터 원본에 보낼 행이 더 이상 없습니다.  
  
 0 (기본값) 각 나타냅니다 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 작업이 단일 일괄 처리 합니다.  
  
 경우는 <xref:System.Data.SqlClient.SqlBulkCopy> 인스턴스 없이 선언 된 합니다 <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> 옵션 행은 서버에 전송할 실제로 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 행 시간만 없는 트랜잭션 관련 작업을 수행 합니다. 경우 <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> 가 적용 된 경우 행의 각 일괄 처리는 별도 트랜잭션으로 삽입 됩니다.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 언제 든 지 속성을 설정할 수 있습니다. 대량 복사 하는 이미 진행 중이면 현재 일괄 처리가 이전 일괄 처리 크기에 따라 크기가 조정 됩니다. 새 크기를 사용 하는 후속 배치 합니다. 경우는 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 은 처음에 0 및 변경 하는 동안는 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 작업이 이미 진행 중에서, 작업을 단일 일괄 처리로 데이터를 로드 합니다. 모든 후속 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 동일한 operations <xref:System.Data.SqlClient.SqlBulkCopy> 인스턴스를 사용 하 여 새 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>합니다.  
  
   
  
## Examples  
 다음 콘솔 애플리케이션에는 대량 50 개 행 일괄 처리로 데이터를 로드 하는 방법을 보여 줍니다. 보여 주는 예제는 어떻게 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 트랜잭션 사용 하 여 참조 [트랜잭션 및 대량 복사 작업](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)합니다.  
  
 이 예제에서는 원본 데이터를 SQL Server 테이블에서 읽을 먼저를 <xref:System.Data.SqlClient.SqlDataReader> 인스턴스. 원본 데이터를 SQL 서버에 있이 필요가 없습니다. 읽을 수 있는 모든 데이터 원본을 사용할 수 있습니다는 <xref:System.Data.IDataReader> 하기 위해 로드 또는 <xref:System.Data.DataTable>합니다.  
  
> [!IMPORTANT]
>  이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다. 이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다. 쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">SQL Server에서 대량 복사 작업</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BulkCopyTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulkCopyTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BulkCopyTimeout : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>제한 시간이 초과되기 전에 작업이 완료되기 위한 시간(초)입니다.</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" /> 속성의 정수 값입니다. 기본값은 30초입니다. 0값은 제한이 없음을 나타냅니다. 대량 복사는 무기한 대기합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 작업 시간이 초과 경우 트랜잭션이 커밋되지 않습니다 및 복사 되는 모든 행이 대상 테이블에서 제거 됩니다.  
  
   
  
## Examples  
 다음 콘솔 애플리케이션에는 60 초 제한 시간을 수정 하는 방법을 보여 줍니다. 대량 데이터를 로드 하는 경우.  
  
 이 예제에서는 원본 데이터를 SQL Server 테이블에서 읽을 먼저를 <xref:System.Data.SqlClient.SqlDataReader> 인스턴스. 원본 데이터를 SQL 서버에 있이 필요가 없습니다. 읽을 수 있는 모든 데이터 원본을 사용할 수 있습니다는 <xref:System.Data.IDataReader> 하기 위해 로드 또는 <xref:System.Data.DataTable>합니다.  
  
> [!IMPORTANT]
>  이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다. 이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다. 쉽고 빠르게 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우는 [!INCLUDE[tsql](~/includes/tsql-md.md)] `INSERT … SELECT` 문은 데이터를 복사 합니다.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Performing Bulk Copy Operations</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="sqlBulkCopy.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 인스턴스를 닫습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출한 후는 <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> 에 <xref:System.Data.SqlClient.SqlBulkCopy> 개체를 다른 작업이 성공 합니다. 에 대 한 호출을 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 메서드는 throw는 <xref:System.InvalidOperationException>합니다.  
  
 호출 합니다 <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> 메서드에서 <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> 이벤트는 <xref:System.InvalidOperationException> throw 됩니다.  
  
 열리는 유의 <xref:System.Data.SqlClient.SqlBulkCopy> 인스턴스는 끝에 암시적으로 닫혀는 `using` 블록입니다.  
  
   
  
## Examples  
 다음 예제에서는 동일한 <xref:System.Data.SqlClient.SqlBulkCopy> 인스턴스를 두 개의 대상 테이블에 판매 주문 및 관련된 세부 정보를 추가 합니다. 때문에 합니다 **AdventureWorks** 판매 주문 테이블은 큰 샘플만 주문서 읽고 특정 계정 번호를 하 고 해당 주문 및 세부 정보 대상 테이블에 대량 복사 합니다. <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> 대량 복사 작업이 모두 완료 된 후에 메서드를 사용 합니다.  
  
> [!IMPORTANT]
>  이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다. 이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다. 쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Performing Bulk Copy Operations</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ ColumnMappings { System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnMappings : System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" Usage="System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />은 항목의 컬렉션을 반환합니다. 열 매핑은 데이터 원본의 열과 대상의 열 간 관계를 정의합니다.</summary>
        <value>열 매핑의 컬렉션입니다. 기본적으로 빈 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터 원본 및 대상 테이블 열에 동일한 수 있고 데이터 원본 내에서 각 원본 열의 서 수 위치에 해당 대상 열의 서 수 위치와 일치 하는 경우는 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 컬렉션이 필요 하지 않습니다. 그러나 열 수가 다를 경우 서 수 위치를 일치 하지 않습니다. 사용 해야 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 올바른 열으로 데이터 복사 되도록 해야 합니다.  
  
 대량 복사 작업을 실행 하는 동안이 컬렉션에 액세스할 수 있지만 변경할 수 없습니다. 변경 하려고 시킵니다는 <xref:System.InvalidOperationException>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Performing Bulk Copy Operations</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationTableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationTableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DestinationTableName : string with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>서버에 있는 대상 테이블의 이름입니다.</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성의 문자열 값이며, 제공된 값이 없으면 null입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하는 경우 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> 설정 되지 않은 경우 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 호출 되는 <xref:System.ArgumentNullException> throw 됩니다.  
  
 하는 경우 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> 수정 되는 동안는 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 작업이 실행 되 고, 변경 작업을 현재 영향을 주지 않습니다. 새 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> 값 다음에 사용 되는 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 메서드가 호출 됩니다.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> 세 부분으로 이루어진 이름입니다 (`<database>.<owningschema>.<name>`). 선택 하면 해당 데이터베이스 및 소유 스키마를 사용 하 여 테이블 이름을 한정할 수 있습니다. 그러나 테이블 이름에 밑줄 ("_") 또는 기타 특수 문자를 사용 하는 경우과 같이 괄호를 사용 하 여 이름을 이스케이프 해야 합니다 (`[<database>.<owningschema>.<name_01>]`). 자세한 내용은 [Database Identifiers](/sql/relational-databases/databases/database-identifiers)을 참조하세요.  
  
 같은 값을 사용 하 여 임시 테이블에 대량 복사 데이터를 수 있습니다 `tempdb..#table` 나 `tempdb.<owner>.#table` 에 대 한는 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> 속성입니다.  
  
   
  
## Examples  
 다음 콘솔 애플리케이션 데이터 대량 로드는 이미 열려 있는 연결을 사용 하는 방법에 설명 합니다. 대상 테이블은 테이블에는 **AdventureWorks** 데이터베이스입니다.  
  
 이 예제에서는 연결을 처음 사용할 SQL Server 테이블에서 데이터를 읽을 수는 <xref:System.Data.SqlClient.SqlDataReader> 인스턴스. 원본 데이터를 SQL 서버에 있이 필요가 없습니다. 읽을 수 있는 모든 데이터 원본을 사용할 수 있습니다는 <xref:System.Data.IDataReader> 하기 위해 로드 또는 <xref:System.Data.DataTable>합니다.  
  
> [!IMPORTANT]
>  이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다. 이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다. 쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Performing Bulk Copy Operations</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableStreaming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableStreaming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableStreaming : bool with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체가 <see cref="T:System.Data.IDataReader" /> 개체에서 데이터를 스트리밍할 수 있도록 설정하거나 스트리밍할 수 없도록 합니다.</summary>
        <value><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체가 <see cref="T:System.Data.IDataReader" /> 개체로부터 데이터를 스트리밍할 수 있으면 <see langword="true" />이고, 그렇지 않으면 false입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때 <xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A> 는 `true`, <xref:System.Data.SqlClient.SqlBulkCopy> 에서 읽습니다는 <xref:System.Data.IDataReader> 개체를 사용 하 여 <xref:System.Data.CommandBehavior.SequentialAccess>를 사용 하 여 메모리 사용량을 최적화는 <xref:System.Data.IDataReader> 스트리밍 기능. False로 설정 된 경우에 <xref:System.Data.SqlClient.SqlBulkCopy> 클래스에서 반환 된 모든 데이터를 로드 합니다 <xref:System.Data.IDataReader> SQL Server 또는 SQL Azure 보내기 전에 메모리에 개체입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyAfter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NotifyAfter { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyAfter : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>알림 이벤트를 생성하기 전에 처리할 행의 수를 정의합니다.</summary>
        <value><see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> 속성의 정수 값이며, 속성을 설정하지 않은 경우 0입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 대량 복사 작업의 진행률을 보여 주는 사용자 인터페이스 구성 요소에 대 한 설계 되었습니다. 알림 이벤트를 생성 하기 전에 처리할 행 수를 나타냅니다. <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 대량 복사 작업을 진행 중인 동안에 언제 든 지 속성을 설정할 수 있습니다. 대량 복사 작업 중에 변경한 다음 알림 후에 적용 합니다. 동일한 인스턴스에 대 한 모든 후속 작업에 새 설정이 적용 됩니다.  
  
 하는 경우 <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 가 0 보다 작은 숫자로 설정, <xref:System.ArgumentOutOfRangeException> throw 됩니다.  
  
   
  
## Examples  
 다음 콘솔 애플리케이션 데이터 대량 로드는 이미 열려 있는 연결을 사용 하는 방법에 설명 합니다. <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 속성이 모든 50 개의 행이 테이블에 복사 된 이벤트 처리기가 호출 되도록 합니다.  
  
 이 예제에서는 연결을 처음 사용할 SQL Server 테이블에서 데이터를 읽을 수는 <xref:System.Data.SqlClient.SqlDataReader> 인스턴스. 그런 다음 대량 데이터를 복사 하려면 두 번째 연결이 열려 있습니다. 원본 데이터를 SQL 서버에 있이 필요가 없습니다 읽을 수 있는 모든 데이터 원본을 사용할 수 있습니다는 <xref:System.Data.IDataReader> 하기 위해 로드 또는 <xref:System.Data.DataTable>합니다.  
  
> [!IMPORTANT]
>  이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다. 이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다. 쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Performing Bulk Copy Operations</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SqlRowsCopied As SqlRowsCopiedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowsCopiedEventHandler ^ SqlRowsCopied;" />
      <MemberSignature Language="F#" Value="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " Usage="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> 속성에 지정된 개수의 행이 처리될 때마다 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정을 <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 고 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 독립적입니다. 확인을 <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> 모든 행을 서버로 전송 되었거나 커밋는 이벤트를 의미 하지 않습니다.  
  
 SqlBulkCopy.Close 호출할 수 없습니다 (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) 또는 SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>)이이 이벤트에서 합니다. 이렇게 하면를 <xref:System.InvalidOperationException> throw 되 고 <xref:System.Data.SqlClient.SqlBulkCopy> 개체 상태 변경 되지 것입니다. 사용자 이벤트의 작업을 취소 하려는 경우는 <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> 의 속성을 <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> 사용할 수 있습니다. (참조 [트랜잭션 및 대량 복사 작업](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md) 사용 하는 예는 <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> 속성입니다.)  
  
 트랜잭션 작업과 같은 조치가 대량 복사 작업을 실행 하는 동안 연결에서 지원 되 고 하는 동안 사용 되는 동일한 연결이 사용 하지 않는 것이 좋습니다는 <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> 이벤트입니다. 그러나 다른 연결을 열 수 있습니다.  
  
   
  
## Examples  
 다음 콘솔 애플리케이션 데이터 대량 로드는 이미 열려 있는 연결을 사용 하는 방법에 설명 합니다. <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 속성이 모든 50 개의 행이 테이블에 복사 된 이벤트 처리기가 호출 되도록 합니다.  
  
 이 예제에서는 연결을 처음 사용할 SQL Server 테이블에서 데이터를 읽을 수는 <xref:System.Data.SqlClient.SqlDataReader> 인스턴스. 원본 데이터를 SQL 서버에 있이 필요가 없습니다 읽을 수 있는 모든 데이터 원본을 사용할 수 있습니다는 <xref:System.Data.IDataReader> 하기 위해 로드 또는 <xref:System.Data.DataTable>합니다.  
  
> [!IMPORTANT]
>  이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다. 이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다. 쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Performing Bulk Copy Operations</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Dispose` 사용을 마치면 <xref:System.Data.SqlClient.SqlBulkCopy>를 호출합니다. `Dispose` 메서드를 사용하면 <xref:System.Data.SqlClient.SqlBulkCopy>를 사용할 수 없게 됩니다. 호출한 후 `Dispose`에 대 한 모든 참조를 해제 해야 합니다 <xref:System.Data.SqlClient.SqlBulkCopy> 가비지 수집기에서 메모리를 회수할 수 있도록 하는 <xref:System.Data.SqlClient.SqlBulkCopy> 차지한 합니다.  
  
 자세한 내용은 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 하 고 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.  
  
> [!NOTE]
>  `Dispose`에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.Data.SqlClient.SqlBulkCopy>를 호출하십시오. 이렇게 하지 않으면 가비지 수집기가 <xref:System.Data.SqlClient.SqlBulkCopy> 개체의 `Finalize` 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>데이터 소스의 모든 행을 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 개체의 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 속성에 지정된 대상 테이블로 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 여러 활성 결과 집합 (MARS) 사용 하지 않으면 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 사용 중인 연결을 만듭니다. MARS를 사용 하는 경우에 대 한 호출을 인터리브할 수 있습니다 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 동일한 연결에서 다른 명령을 사용 하 여 합니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Performing Bulk Copy Operations</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.Common.DbDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">대상 테이블로 복사될 행이 포함된 <see cref="T:System.Data.Common.DbDataReader" />입니다.</param>
        <summary>제공된 <see cref="T:System.Data.Common.DbDataReader" /> 배열의 모든 행을 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 개체의 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 속성에 지정된 대상 테이블로 복사합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataRow[] -&gt; unit" Usage="sqlBulkCopy.WriteToServer rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="rows">대상 테이블에 복사되는 <see cref="T:System.Data.DataRow" /> 개체의 배열입니다.</param>
        <summary>제공된 <see cref="T:System.Data.DataRow" /> 배열의 모든 행을 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 개체의 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 속성에 지정된 대상 테이블로 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대량 복사 작업을 연관 된 대상으로 진행에서 되는 동안 <xref:System.Data.SqlClient.SqlConnection> , 사용 중인 서비스는 및 연결에 없는 다른 작업을 수행할 수 있습니다.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 컬렉션에서 매핑하는 <xref:System.Data.DataRow> 대상 데이터베이스 테이블 열입니다.  
  
   
  
## Examples  
 다음 콘솔 애플리케이션 데이터 대량 로드에서 하는 방법에 설명 된 <xref:System.Data.DataRow> 배열입니다. 대상 테이블은 테이블에는 **AdventureWorks** 데이터베이스입니다.  
  
 이 예제는 <xref:System.Data.DataTable> 런타임 시 만들어집니다. 단일 행을 선택 합니다 <xref:System.Data.DataTable> 대상 테이블로 복사 합니다.  
  
> [!IMPORTANT]
>  이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다. 이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다. 쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Performing Bulk Copy Operations</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable -&gt; unit" Usage="sqlBulkCopy.WriteToServer table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table">대상 테이블로 복사될 행이 포함된 <see cref="T:System.Data.DataTable" />입니다.</param>
        <summary>제공된 <see cref="T:System.Data.DataTable" />의 모든 행을 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 개체의 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 속성에 지정된 대상 테이블로 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 행을 <xref:System.Data.DataTable> 제외 하 고 삭제 된 대상 테이블로 복사 됩니다.  
  
 대량 복사 작업을 연관 된 대상으로 진행에서 되는 동안 <xref:System.Data.SqlClient.SqlConnection> , 사용 중인 서비스는 및 연결에 없는 다른 작업을 수행할 수 있습니다.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 컬렉션에서 매핑하는 <xref:System.Data.DataTable> 대상 데이터베이스 테이블 열입니다.  
  
   
  
## Examples  
 다음 콘솔 애플리케이션 데이터 대량 로드에서 하는 방법에 설명 된 <xref:System.Data.DataTable>합니다. 대상 테이블은 테이블에는 **AdventureWorks** 데이터베이스입니다.  
  
 이 예제는 <xref:System.Data.DataTable> 런타임에 생성 되 고의 원본인는 `SqlBulkCopy` 작업.  
  
> [!IMPORTANT]
>  이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다. 이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다. 쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Performing Bulk Copy Operations</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.IDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">대상 테이블로 복사될 행이 포함된 <see cref="T:System.Data.IDataReader" />입니다.</param>
        <summary>제공된 <see cref="T:System.Data.IDataReader" />의 모든 행을 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 개체의 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 속성에 지정된 대상 테이블로 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 판독기에서 사용 가능한 다음 행에서 복사 작업이 시작 됩니다. 대부분의 경우 판독기가 반환 하 여 <xref:System.Data.IDbCommand.ExecuteReader%2A> 이나 유사한 호출에서 사용 가능한 다음 행은 첫 번째 행. 여러 결과 처리 하려면 호출 <xref:System.Data.IDataReader.NextResult%2A> 호출에 데이터 판독기 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 다시 합니다.  
  
 사용 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 판독기의 상태를 수정 합니다. 메서드를 호출 합니다 <xref:System.Data.IDataReader.Read%2A> false를 반환 하면 작업이 중단 되, 오류가 발생 될 때까지 합니다. 데이터 판독기를 결과 집합의 끝 위치 하 게 다른 상태의 수를 의미이 경우는 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 작업이 완료 되었습니다.  
  
 대량 복사 작업을 연관 된 대상으로 진행에서 되는 동안 <xref:System.Data.SqlClient.SqlConnection> , 사용 중인 서비스는 및 연결에 없는 다른 작업을 수행할 수 있습니다.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 컬렉션 열을 매핑합니다 데이터에서 판독기 대상 데이터베이스 테이블에 있습니다.  
  
   
  
## Examples  
 다음 콘솔 애플리케이션 데이터 대량 로드에서 하는 방법에 설명 된 <xref:System.Data.SqlClient.SqlDataReader>합니다. 대상 테이블은 테이블에는 **AdventureWorks** 데이터베이스입니다.  
  
> [!IMPORTANT]
>  이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다. 이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다. 쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Performing Bulk Copy Operations</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable, rowState As DataRowState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable * System.Data.DataRowState -&gt; unit" Usage="sqlBulkCopy.WriteToServer (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="table">대상 테이블로 복사될 행이 포함된 <see cref="T:System.Data.DataTable" />입니다.</param>
        <param name="rowState"><see cref="T:System.Data.DataRowState" /> 열거형의 값입니다. 행 상태가 일치하는 행만 대상에 복사됩니다.</param>
        <summary>제공된 <see cref="T:System.Data.DataTable" />에서 제공된 행 상태와 일치하는 행만을 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 개체의 <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 속성에 지정된 대상 테이블로 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 행만 합니다 <xref:System.Data.DataTable> 에 지정 된 상태에는 `rowState` 인수 삭제 되지 않은 및 대상 테이블에 복사 됩니다.  
  
> [!NOTE]
>  경우 <xref:System.Data.DataRowState.Deleted> 지정 된 모든 <xref:System.Data.DataRowState.Unchanged>, <xref:System.Data.DataRowState.Added>, 및 <xref:System.Data.DataRowState.Modified> 행은 서버에도 복사 됩니다. 예외가 발생 합니다.  
  
 대량 복사 작업을 연관 된 대상으로 진행에서 되는 동안 <xref:System.Data.SqlClient.SqlConnection> , 사용 중인 서비스는 및 연결에 없는 다른 작업을 수행할 수 있습니다.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> 컬렉션에서 매핑하는 <xref:System.Data.DataTable> 대상 데이터베이스 테이블 열입니다.  
  
   
  
## Examples  
 다음 콘솔 애플리케이션에는 대량으로 하는 방법을 보여 줍니다.의 행만 로드는 <xref:System.Data.DataTable> 와 일치 하는 지정된 된 상태입니다. 이 경우 변경 되지 않은 행만 추가 됩니다. 대상 테이블은 테이블에는 **AdventureWorks** 데이터베이스입니다.  
  
 이 예제에서는 <xref:System.Data.DataTable> 런타임 및 3에서 만들어진 행에 추가 됩니다. 전에 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 메서드 실행, 편집 하는 행 중 하나입니다. 합니다 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 메서드를 호출을 `DataRowState.Unchanged` `rowState` 인수를 변경 되지 않은 두 개의 행만 대상에 대량 복사 됩니다.  
  
> [!IMPORTANT]
>  이 샘플에 설명 된 대로 작업 테이블을 만든 경우가 아니면 실행 되지 것입니다 [대량 복사 예제 설정](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md)합니다. 이 코드는 사용 하는 구문을 보여 주기 위해 제공 됩니다 **SqlBulkCopy** 만 합니다. 쉽고 빠르게 TRANSACT-SQL을 사용 하는 원본 테이블과 대상 테이블에 동일한 SQL Server 인스턴스에 있는 경우 `INSERT … SELECT` 문은 데이터를 복사 합니다.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
        <related type="Article" href="https://msdn.microsoft.com/library/83a7a0d2-8018-4354-97b9-0b1d99f8342b">Performing Bulk Copy Operations</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">ADO.NET 개요</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>데이터 소스의 모든 행을 <see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사하는 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />의 비동기 버전입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 여러 활성 결과 집합 (MARS) 사용 하지 않으면 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 사용 중인 연결을 만듭니다. MARS를 사용 하는 경우에 대 한 호출을 인터리브할 수 있습니다 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 동일한 연결에서 다른 명령을 사용 하 여 합니다.  
  
 롤백되 하나에 오류가 발생 하는 행 수가 몇 가지 작업에 따라 달라 집니다.  
  
-   경우 <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> 지정 됩니다.  
  
-   사용자 고유의 트랜잭션이 있으면 합니다.  
  
-   <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>의 값  
  
 현재 일괄 처리 서버에 데이터를 보내는 동안 오류가 발생 하는 경우 (지정 된 대로 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>) 롤백됩니다. 경우 <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> 지정 하지 않으면 및 고유한 트랜잭션이 전체 트랜잭션이 롤백됩니다 (포함 하는 모든 이전 일괄 처리도).  
  
 사용 하 여 <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> 서버로 복사 된 행의 수를 알아야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">대상 테이블로 복사될 행이 포함된 <see cref="T:System.Data.Common.DbDataReader" />입니다.</param>
        <summary>제공된 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" /> 배열의 모든 행을 <see cref="T:System.Data.Common.DbDataReader" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사하는 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />의 비동기 버전입니다.</summary>
        <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows">대상 테이블에 복사되는 <see cref="T:System.Data.DataRow" /> 개체의 배열입니다.</param>
        <summary>제공된 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> 배열의 모든 행을 <see cref="T:System.Data.DataRow" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사하는 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />의 비동기 버전입니다.</summary>
        <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 프로그래밍에.NET Framework Data Provider for SQL Server에 대 한 자세한 내용은 참조 하세요. [비동기 프로그래밍](~/docs/framework/data/adonet/asynchronous-programming.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">작업이 완료되기 전에 같은 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />를 여러 번 호출합니다.  
  
작업이 완료되기 전에 같은 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 및 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />를 호출합니다.  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 실행 중 연결이 끊기거나 닫힙니다.  
  
작업 개체에서 반환되었으며, <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체는 메서드를 실행하는 동안 닫혔습니다.  
  
작업 개체에서 반환되었으며, 연결 풀 시간 제한이 있습니다.  
  
작업 개체에서 반환되었으며, <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체는 메서드를 실행하기 전에 닫힙니다.  
  
 <see langword="Context Connection=true" />는 연결 문자열에 지정됩니다.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">작업 개체에서 반환됩니다. 연결을 여는 동안 발생한 SQL Server에 의해 오류가 반환되었습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">대상 테이블로 복사될 행이 포함된 <see cref="T:System.Data.DataTable" />입니다.</param>
        <summary>제공된 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />의 모든 행을 <see cref="T:System.Data.DataTable" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사하는 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />의 비동기 버전입니다.</summary>
        <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 프로그래밍에.NET Framework Data Provider for SQL Server에 대 한 자세한 내용은 참조 하세요. [비동기 프로그래밍](~/docs/framework/data/adonet/asynchronous-programming.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">작업이 완료되기 전에 같은 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />를 여러 번 호출합니다.  
  
작업이 완료되기 전에 같은 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 및 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />를 호출합니다.  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 실행 중 연결이 끊기거나 닫힙니다.  
  
작업 개체에서 반환되었으며, <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체는 메서드를 실행하는 동안 닫혔습니다.  
  
작업 개체에서 반환되었으며, 연결 풀 시간 제한이 있습니다.  
  
작업 개체에서 반환되었으며, <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체는 메서드를 실행하기 전에 닫힙니다.  
  
 <see langword="Context Connection=true" />는 연결 문자열에 지정됩니다.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">작업 개체에서 반환됩니다. 연결을 여는 동안 발생한 SQL Server에 의해 오류가 반환되었습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">대상 테이블로 복사될 행이 포함된 <see cref="T:System.Data.IDataReader" />입니다.</param>
        <summary>제공된 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />의 모든 행을 <see cref="T:System.Data.IDataReader" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사하는 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />의 비동기 버전입니다.</summary>
        <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 프로그래밍에.NET Framework Data Provider for SQL Server에 대 한 자세한 내용은 참조 하세요. [비동기 프로그래밍](~/docs/framework/data/adonet/asynchronous-programming.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">작업이 완료되기 전에 같은 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />를 여러 번 호출합니다.  
  
작업이 완료되기 전에 같은 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 및 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />를 호출합니다.  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 실행 중 연결이 끊기거나 닫힙니다.  
  
작업 개체에서 반환되었으며, <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체는 메서드를 실행하는 동안 닫혔습니다.  
  
작업 개체에서 반환되었으며, 연결 풀 시간 제한이 있습니다.  
  
작업 개체에서 반환되었으며, <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체는 메서드를 실행하기 전에 닫힙니다.  
  
완료된 <see cref="T:System.Data.IDataReader" />가 반환되기 전에 <see cref="T:System.Threading.Tasks.Task" />가 닫혔습니다.  
  
완료된 <see cref="T:System.Data.IDataReader" />가 반환되기 전에 <see cref="T:System.Threading.Tasks.Task" />와 연결된 연결이 닫혔습니다.  
  
 <see langword="Context Connection=true" />는 연결 문자열에 지정됩니다.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">작업 개체에서 반환됩니다. 연결을 여는 동안 발생한 SQL Server에 의해 오류가 반환되었습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader">대상 테이블로 복사될 행이 포함된 <see cref="T:System.Data.Common.DbDataReader" />입니다.</param>
        <param name="cancellationToken">취소 명령입니다. 이 매개 변수의 <see cref="P:System.Threading.CancellationToken.None" /> 값은 이 메서드를 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />와 같게 만듭니다.</param>
        <summary>제공된 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" /> 배열의 모든 행을 <see cref="T:System.Data.Common.DbDataReader" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사하는 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />의 비동기 버전입니다.</summary>
        <returns><see cref="T:System.Threading.Tasks.Task" />를 반환합니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (rows, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="rows">대상 테이블에 복사되는 <see cref="T:System.Data.DataRow" /> 개체의 배열입니다.</param>
        <param name="cancellationToken">취소 명령입니다. 이 매개 변수의 <see cref="P:System.Threading.CancellationToken.None" /> 값은 이 메서드를 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />와 같게 만듭니다.</param>
        <summary>제공된 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> 배열의 모든 행을 <see cref="T:System.Data.DataRow" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사하는 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />의 비동기 버전입니다.  
  
취소 토큰은 명령 시간 제한이 경과하기 전에 작업을 취소하는 요청에 사용할 수 있습니다.  예외는 반환된 작업 개체를 통해 보고됩니다.</summary>
        <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 프로그래밍에.NET Framework Data Provider for SQL Server에 대 한 자세한 내용은 참조 하세요. [비동기 프로그래밍](~/docs/framework/data/adonet/asynchronous-programming.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">작업이 완료되기 전에 같은 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />를 여러 번 호출합니다.  
  
작업이 완료되기 전에 같은 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 및 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />를 호출합니다.  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> 실행 중 연결이 끊기거나 닫힙니다.  
  
작업 개체에서 반환되었으며, <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체는 메서드를 실행하는 동안 닫혔습니다.  
  
작업 개체에서 반환되었으며, 연결 풀 시간 제한이 있습니다.  
  
작업 개체에서 반환되었으며, <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체는 메서드를 실행하기 전에 닫힙니다.  
  
 <see langword="Context Connection=true" />는 연결 문자열에 지정됩니다.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">작업 개체에서 반환됩니다. 연결을 여는 동안 발생한 SQL Server에 의해 오류가 반환되었습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">대상 테이블로 복사될 행이 포함된 <see cref="T:System.Data.DataTable" />입니다.</param>
        <param name="rowState"><see cref="T:System.Data.DataRowState" /> 열거형의 값입니다. 행 상태가 일치하는 행만 대상에 복사됩니다.</param>
        <summary>제공된 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />에서 제공된 행 상태와 일치하는 행만을 <see cref="T:System.Data.DataTable" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사하는 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />의 비동기 버전입니다.</summary>
        <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 프로그래밍에.NET Framework Data Provider for SQL Server에 대 한 자세한 내용은 참조 하세요. [비동기 프로그래밍](~/docs/framework/data/adonet/asynchronous-programming.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">작업이 완료되기 전에 같은 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />를 여러 번 호출합니다.  
  
작업이 완료되기 전에 같은 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 및 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />를 호출합니다.  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 실행 중 연결이 끊기거나 닫힙니다.  
  
작업 개체에서 반환되었으며, <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체는 메서드를 실행하는 동안 닫혔습니다.  
  
작업 개체에서 반환되었으며, 연결 풀 시간 제한이 있습니다.  
  
작업 개체에서 반환되었으며, <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체는 메서드를 실행하기 전에 닫힙니다.  
  
 <see langword="Context Connection=true" />는 연결 문자열에 지정됩니다.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">작업 개체에서 반환됩니다. 연결을 여는 동안 발생한 SQL Server에 의해 오류가 반환되었습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">대상 테이블로 복사될 행이 포함된 <see cref="T:System.Data.DataTable" />입니다.</param>
        <param name="cancellationToken">취소 명령입니다. 이 매개 변수의 <see cref="P:System.Threading.CancellationToken.None" /> 값은 이 메서드를 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />와 같게 만듭니다.</param>
        <summary>제공된 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />의 모든 행을 <see cref="T:System.Data.DataTable" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사하는 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />의 비동기 버전입니다.  
  
취소 토큰은 명령 시간 제한이 경과하기 전에 작업을 취소하는 요청에 사용할 수 있습니다.  예외는 반환된 작업 개체를 통해 보고됩니다.</summary>
        <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 프로그래밍에.NET Framework Data Provider for SQL Server에 대 한 자세한 내용은 참조 하세요. [비동기 프로그래밍](~/docs/framework/data/adonet/asynchronous-programming.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">작업이 완료되기 전에 같은 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />를 여러 번 호출합니다.  
  
작업이 완료되기 전에 같은 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 및 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />를 호출합니다.  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> 실행 중 연결이 끊기거나 닫힙니다.  
  
작업 개체에서 반환되었으며, <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체는 메서드를 실행하는 동안 닫혔습니다.  
  
작업 개체에서 반환되었으며, 연결 풀 시간 제한이 있습니다.  
  
작업 개체에서 반환되었으며, <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체는 메서드를 실행하기 전에 닫힙니다.  
  
 <see langword="Context Connection=true" />는 연결 문자열에 지정됩니다.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">작업 개체에서 반환됩니다. 연결을 여는 동안 발생한 SQL Server에 의해 오류가 반환되었습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">대상 테이블로 복사될 행이 포함된 <see cref="T:System.Data.IDataReader" />입니다.</param>
        <param name="cancellationToken">취소 명령입니다. 이 매개 변수의 <see cref="P:System.Threading.CancellationToken.None" /> 값은 이 메서드를 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />와 같게 만듭니다.</param>
        <summary>제공된 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />의 모든 행을 <see cref="T:System.Data.IDataReader" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사하는 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />의 비동기 버전입니다.  
  
취소 토큰은 명령 시간 제한이 경과하기 전에 작업을 취소하는 요청에 사용할 수 있습니다.  예외는 반환된 작업 개체를 통해 보고됩니다.</summary>
        <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 프로그래밍에.NET Framework Data Provider for SQL Server에 대 한 자세한 내용은 참조 하세요. [비동기 프로그래밍](~/docs/framework/data/adonet/asynchronous-programming.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">작업이 완료되기 전에 같은 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />를 여러 번 호출합니다.  
  
작업이 완료되기 전에 같은 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 및 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />를 호출합니다.  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> 실행 중 연결이 끊기거나 닫힙니다.  
  
작업 개체에서 반환되었으며, <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체는 메서드를 실행하는 동안 닫혔습니다.  
  
작업 개체에서 반환되었으며, 연결 풀 시간 제한이 있습니다.  
  
작업 개체에서 반환되었으며, <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체는 메서드를 실행하기 전에 닫힙니다.  
  
완료된 <see cref="T:System.Data.IDataReader" />가 반환되기 전에 <see cref="T:System.Threading.Tasks.Task" />가 닫혔습니다.  
  
완료된 <see cref="T:System.Data.IDataReader" />가 반환되기 전에 <see cref="T:System.Threading.Tasks.Task" />와 연결된 연결이 닫혔습니다.  
  
 <see langword="Context Connection=true" />는 연결 문자열에 지정됩니다.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">작업 개체에서 반환됩니다. 연결을 여는 동안 발생한 SQL Server에 의해 오류가 반환되었습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="table">대상 테이블로 복사될 행이 포함된 <see cref="T:System.Data.DataTable" />입니다.</param>
        <param name="rowState"><see cref="T:System.Data.DataRowState" /> 열거형의 값입니다. 행 상태가 일치하는 행만 대상에 복사됩니다.</param>
        <param name="cancellationToken">취소 명령입니다. 이 매개 변수의 <see cref="P:System.Threading.CancellationToken.None" /> 값은 이 메서드를 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />와 같게 만듭니다.</param>
        <summary>제공된 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />에서 제공된 행 상태와 일치하는 행만을 <see cref="T:System.Data.DataTable" /> 개체의 <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> 속성에 지정된 대상 테이블로 복사하는 <see cref="T:System.Data.SqlClient.SqlBulkCopy" />의 비동기 버전입니다.  
  
취소 토큰은 명령 시간 제한이 경과하기 전에 작업을 취소하는 요청에 사용할 수 있습니다.  예외는 반환된 작업 개체를 통해 보고됩니다.</summary>
        <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 프로그래밍에.NET Framework Data Provider for SQL Server에 대 한 자세한 내용은 참조 하세요. [비동기 프로그래밍](~/docs/framework/data/adonet/asynchronous-programming.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">작업이 완료되기 전에 같은 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />를 여러 번 호출합니다.  
  
작업이 완료되기 전에 같은 인스턴스에 대해 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 및 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />를 호출합니다.  
  
<see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> 실행 중 연결이 끊기거나 닫힙니다.  
  
작업 개체에서 반환되었으며, <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> 개체는 메서드를 실행하는 동안 닫혔습니다.  
  
작업 개체에서 반환되었으며, 연결 풀 시간 제한이 있습니다.  
  
작업 개체에서 반환되었으며, <see cref="T:System.Data.SqlClient.SqlConnection" /> 개체는 메서드를 실행하기 전에 닫힙니다.  
  
 <see langword="Context Connection=true" />는 연결 문자열에 지정됩니다.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">작업 개체에서 반환됩니다. 연결을 여는 동안 발생한 SQL Server에 의해 오류가 반환되었습니다.</exception>
      </Docs>
    </Member>
  </Members>
</Type>