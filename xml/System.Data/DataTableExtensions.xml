<Type Name="DataTableExtensions" FullName="System.Data.DataTableExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="446598705e8ab9ef4cbd69e50be68bc6cd6f4d97" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65006330" /></Metadata><TypeSignature Language="C#" Value="public static class DataTableExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataTableExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataTableExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DataTableExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTableExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type DataTableExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>확장 메서드를 정의 합니다 <see cref="T:System.Data.DataTable" /> 클래스입니다. <see cref="T:System.Data.DataTableExtensions" /> 정적 클래스가입니다.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsDataView">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView (this System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView (table As DataTable) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.DataTable -&gt; System.Data.DataView" Usage="System.Data.DataTableExtensions.AsDataView table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" RefType="this" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <param name="table">소스 <see cref="T:System.Data.DataTable" /> 올 LINQ 지원 <see cref="T:System.Data.DataView" /> 만들어집니다.</param>
        <summary>만들고 LINQ 사용 반환 <see cref="T:System.Data.DataView" /> 개체입니다.</summary>
        <returns>LINQ 사용 <see cref="T:System.Data.DataView" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> 에 대 한 데이터 바인딩 시나리오를 사용 하도록 설정 [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] 에서 만들 수 있습니다 및 형식화 되거나 형식화 되지 않은 <xref:System.Data.DataTable>, 해당 테이블의 기본 보기를 제공 합니다. <xref:System.Data.DataView>에서 만들어진 <xref:System.Data.DataTable>에 필터링 및 정렬을 설정할 수 있습니다. 합니다 <xref:System.Data.DataView> 와 같은 UI 컨트롤에 바인딩된 다음는 <xref:System.Windows.Forms.DataGrid> 또는 <xref:System.Windows.Forms.DataGridView>, 간단한 데이터 바인딩 모델을 제공 합니다.  
  
 자세한 내용 및 예제를 참조 하세요 [DataView 개체 만들기](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Data.DataView> SalesOrderDetail 테이블에서 데이터 원본으로 설정 하는 데는 <xref:System.Windows.Forms.BindingSource> 에 대 한 프록시로 작동 하는 개체를 <xref:System.Windows.Forms.DataGridView> 제어:  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromtable)]
 [!code-vb[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromtable)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsDataView&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView&lt;T&gt; (this System.Data.EnumerableRowCollection&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView&lt;(class System.Data.DataRow) T&gt;(class System.Data.EnumerableRowCollection`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView(Of T As DataRow) (source As EnumerableRowCollection(Of T)) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::EnumerableRowCollection&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.EnumerableRowCollection&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataView (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.AsDataView source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">소스 시퀀스의 개체 형식(일반적으로 <see cref="T:System.Data.DataRow" />)입니다.</typeparam>
        <param name="source">소스 [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] 쿼리에서 LINQ 지원 <see cref="T:System.Data.DataView" /> 만들어집니다.</param>
        <summary>만들고 LINQ 사용 반환 <see cref="T:System.Data.DataView" /> 나타내는 개체를 [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] 쿼리 합니다.</summary>
        <returns>LINQ 사용 <see cref="T:System.Data.DataView" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> 에 대 한 데이터 바인딩 시나리오를 사용 하도록 설정 [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] 에서 만들 수는 [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] 쿼리 합니다. <xref:System.Data.DataView> 쿼리 자체를 나타내며 쿼리에 대 한 뷰가 아닙니다. 새로 만든 <xref:System.Data.DataView> 필터링 및 정렬 정보에서 만든 쿼리를 유추 합니다. 합니다 <xref:System.Data.DataView> 와 같은 UI 컨트롤에 바인딩된 다음는 <xref:System.Windows.Forms.DataGrid> 또는 <xref:System.Windows.Forms.DataGridView>, 단순 데이터 바인딩 모델을 제공 합니다.  
  
 매개 변수 `T` 입력된 매개 변수의 `source` 형식일 수만 있습니다 <xref:System.Data.DataRow> 에서 파생 된 형식 또는 <xref:System.Data.DataRow>합니다.  
  
 다음 쿼리 연산자만 지를 만드는 데 사용 하는 쿼리에서 <xref:System.Data.DataView>:  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Cast%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Select%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Where%2A>  
  
 자세한 내용 및 예제를 참조 하세요 [DataView 개체 만들기](~/docs/framework/data/adonet/creating-a-dataview-object-linq-to-dataset.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Data.DataView> 온라인 주문 합계에 따라 정렬 합니다.  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromquery1)]
 [!code-vb[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromquery1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable">
      <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt; AsEnumerable (this System.Data.DataTable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;class System.Data.DataRow&gt; AsEnumerable(class System.Data.DataTable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable (source As DataTable) As EnumerableRowCollection(Of DataRow)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::EnumerableRowCollection&lt;System::Data::DataRow ^&gt; ^ AsEnumerable(System::Data::DataTable ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : System.Data.DataTable -&gt; System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;" Usage="System.Data.DataTableExtensions.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">원본 <see cref="T:System.Data.DataTable" /> 열거 가능 하도록 합니다.</param>
        <summary>반환을 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체는 제네릭 매개 변수 <paramref name="T" /> 는 <see cref="T:System.Data.DataRow" />합니다. 이 개체는 [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] 식 또는 메서드 쿼리에 사용될 수 있습니다.</summary>
        <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체는 제네릭 매개 변수 <paramref name="T" /> 는 <see cref="T:System.Data.DataRow" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)] 쿼리를 구현 하는 데이터 소스에서 작동 합니다 <xref:System.Collections.Generic.IEnumerable%601> 인터페이스 또는 <xref:System.Linq.IQueryable> 인터페이스입니다.  <xref:System.Data.DataTable> 클래스를 호출 해야 하므로 두 인터페이스 중 하나를 구현 하지 않습니다는 <xref:System.Data.DataTableExtensions.AsEnumerable%2A> 메서드를 사용 하 여는 <xref:System.Data.DataTable> 원본으로는 `From` 절을 [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] 쿼리 합니다. 사용자 지정, 도메인 특정 연산자와 같은 가져올 수도 있습니다 <xref:System.Data.DataTableExtensions.CopyToDataTable%2A>를 반환 하 여는 <xref:System.Collections.Generic.IEnumerable%601> 개체입니다.  
  
 반환 하는 열거 가능한 개체를 <xref:System.Data.DataTableExtensions.AsEnumerable%2A> 메서드를 영구적으로 바인딩된는 <xref:System.Data.DataTable> 결과 생성 하는 합니다. 여러 번 호출 하 여 <xref:System.Data.DataTableExtensions.AsEnumerable%2A> 메서드는 반환 여러 개의 독립적인 쿼리 가능 개체가 모든 소스에 바인딩된 <xref:System.Data.DataTable>합니다.  
  
   
  
## Examples  
 다음 샘플에서는 합니다 `DisplayProducts` 메서드 라는 DataColumn을 포함 하는 DataTable을 수신 `ProductName`, 추출는 `ProductName` 값 하 고 다음 값을 출력 합니다.  
  
 [!code-csharp[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/cs/source.cs#1)]
 [!code-vb[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">소스 <see cref="T:System.Data.DataTable" /> 는 <see langword="null" />합니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToDataTable&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>반환을 <see cref="T:System.Data.DataTable" /> 의 복사본을 포함 하는 <see cref="T:System.Data.DataRow" /> 개체를 지정 된 입력 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataTable CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataTable CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T)) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataTable ^ CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataTable (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">소스 시퀀스의 개체 형식(일반적으로 <see cref="T:System.Data.DataRow" />)입니다.</typeparam>
        <param name="source">원본 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 시퀀스입니다.</param>
        <summary>반환을 <see cref="T:System.Data.DataTable" /> 복사본이 들어 있는 <see cref="T:System.Data.DataRow" /> 개체를 지정 된 입력 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체는 제네릭 매개 변수 <paramref name="T" /> 는 <see cref="T:System.Data.DataRow" />.</summary>
        <returns>A <see cref="T:System.Data.DataTable" /> 형식으로 입력된 시퀀스를 포함 하는 <see cref="T:System.Data.DataRow" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 매개 변수 `T` 입력된 매개 변수의 `source` 형식일 수만 있습니다 <xref:System.Data.DataRow> 에서 파생 된 형식 또는 <xref:System.Data.DataRow>합니다.  
  
 입력된 시퀀스 될 수 있습니다 <xref:System.Collections.Generic.IEnumerable%601> 를 통해 원본, 쿼리 또는 쿼리 뿐 아니라는 <xref:System.Data.DataTable>합니다. 참고는 소스 시퀀스를 쿼리 하는 경우이 연산자를 호출는 즉시 실행을 강제 합니다. 소스 시퀀스를 열거 하는 경우에 예외가 throw 될 수도 있습니다.  
  
 대상 테이블의 스키마는 스키마를 기반으로 첫 번째 <xref:System.Data.DataRow> 소스 시퀀스의 행입니다. 테이블 메타 데이터에서 추출 되는 <xref:System.Data.DataRow> 메타 데이터 및 테이블의 열 값에서 값을 <xref:System.Data.DataRow>입니다. 형식화 된 <xref:System.Data.DataTable>, 형식은 유지 되지 않습니다. 데이터 및 스키마를 전송할지, 되지만 형식화 된 결과 출력 테이블의 행 수 <xref:System.Data.DataRow> 형식입니다. 합니다 <xref:System.Data.DataRow.RowState%2A> 하 고 <xref:System.Data.DataRow.RowError%2A> 속성은 원본에서 복사 하는 동안 유지 되지 않습니다 <xref:System.Data.DataRow> 반환 된 <xref:System.Data.DataTable>합니다.  
  
 경우는 **null** 참조 또는 nullable 형식과 값 **null** 원본의 <xref:System.Data.DataRow>,이 메서드는 대상의 값을 대체 <xref:System.Data.DataTable> 값을 사용 하 여 <xref:System.DBNull.Value>합니다.  
  
 메서드에 의해 반환 되는 생성 된 테이블에 기본 테이블 이름이 있습니다. 이름을 지정 하려는 경우는 <xref:System.Data.DataTable>에 연결을 <xref:System.Data.DataSet>, 다른 수행 또는 <xref:System.Data.DataTable> 특정 작업을 해야 테이블이 만들어지고 반환 되 면 합니다.  
  
 자세한 내용은 [쿼리는에서 DataTable 만들기](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)합니다.  
  
   
  
## Examples  
 다음 예에서는 2001 년 8 월 8 일 이후 주문에 대 한 SalesOrderHeader 테이블을 쿼리하여 사용 하는 <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> 메서드를를 <xref:System.Data.DataTable> 쿼리의 결과 합니다. 그런 다음 <xref:System.Data.DataTable>이 <xref:System.Windows.Forms.BindingSource>의 프록시 역할을 수행하는 <xref:System.Windows.Forms.DataGridView>에 바인딩됩니다.  
  
 [!code-csharp[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/CS/Program.cs#copytodatatable1)]
 [!code-vb[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/VB/Module1.vb#copytodatatable1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">소스 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 순서가 <see langword="null" /> 새 테이블을 만들 수 없습니다.</exception>
        <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Data.DataRow" /> 소스 시퀀스에 상태의 <see cref="F:System.Data.DataRowState.Deleted" />합니다.  
  
소스 시퀀스를 포함 하지 <see cref="T:System.Data.DataRow" /> 개체입니다.  
  
A <see cref="T:System.Data.DataRow" /> 시퀀스는 소스의 <see langword="null" />합니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <typeparam name="T">소스 시퀀스의 개체 형식(일반적으로 <see cref="T:System.Data.DataRow" />)입니다.</typeparam>
        <param name="source">원본 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 시퀀스입니다.</param>
        <param name="table">대상 <see cref="T:System.Data.DataTable" />입니다.</param>
        <param name="options">A <see cref="T:System.Data.LoadOption" /> 지정 하는 열거형을 <see cref="T:System.Data.DataTable" /> 옵션을 로드 합니다.</param>
        <summary>복사본 <see cref="T:System.Data.DataRow" /> 지정 된 개체 <see cref="T:System.Data.DataTable" />, 지정 된 입력 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체는 제네릭 매개 변수 <paramref name="T" /> 는 <see cref="T:System.Data.DataRow" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 매개 변수 `T` 입력된 매개 변수의 `source` 형식일 수만 있습니다 <xref:System.Data.DataRow>에서 파생 된 형식 또는 <xref:System.Data.DataRow>합니다.  
  
 입력된 시퀀스 될 수 있습니다 <xref:System.Collections.Generic.IEnumerable%601> 소스 뿐 아니라 쿼리를 통해를 <xref:System.Data.DataTable>입니다. 참고는 소스 시퀀스를 쿼리 하는 경우이 연산자를 호출는 즉시 실행을 강제 합니다. 소스 시퀀스를 열거 하는 경우에 예외가 throw 될 수도 있습니다.  
  
 대상 테이블의 스키마는 스키마를 기반으로 첫 번째 <xref:System.Data.DataRow> 소스 시퀀스의 행입니다. 테이블 메타 데이터에서 추출 되는 <xref:System.Data.DataRow> 메타 데이터 및 테이블의 열 값에서 값을 <xref:System.Data.DataRow>입니다. 형식화 된 <xref:System.Data.DataTable>, 형식은 유지 되지 않습니다. 데이터 및 스키마를 전송할지, 되지만 형식화 된 결과 출력 테이블의 행 수 <xref:System.Data.DataRow> 형식입니다. 합니다 <xref:System.Data.DataRow.RowState%2A> 하 고 <xref:System.Data.DataRow.RowError%2A> 속성은 원본에서 복사 하는 동안 유지 되지 않습니다 <xref:System.Data.DataRow> 반환 된 <xref:System.Data.DataTable>합니다.  
  
 경우는 **null** 참조 또는 nullable 형식과 값 **null** 원본의 <xref:System.Data.DataRow>,이 메서드는 대상의 값을 대체 <xref:System.Data.DataTable> 값을 사용 하 여 <xref:System.DBNull.Value>합니다.  
  
 메서드에 의해 반환 되는 생성 된 테이블에 기본 테이블 이름이 있습니다. 이름을 지정 하려는 경우는 <xref:System.Data.DataTable>에 연결을 <xref:System.Data.DataSet>, 다른 수행 또는 <xref:System.Data.DataTable> 특정 작업을 해야 테이블이 만들어지고 반환 되 면 합니다.  
  
 자세한 내용은 [쿼리는에서 DataTable 만들기](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">복사한 <see cref="T:System.Data.DataRow" /> 개체의 대상 스키마에 맞지 않는 <see cref="T:System.Data.DataTable" />합니다.</exception>
        <exception cref="T:System.ArgumentNullException">소스 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 순서가 <see langword="null" /> 또는 대상을 <see cref="T:System.Data.DataTable" /> 는 <see langword="null" />합니다.</exception>
        <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Data.DataRow" /> 소스 시퀀스에 상태의 <see cref="F:System.Data.DataRowState.Deleted" />합니다.  
  
소스 시퀀스를 포함 하지 <see cref="T:System.Data.DataRow" /> 개체입니다.  
  
A <see cref="T:System.Data.DataRow" /> 시퀀스는 소스의 <see langword="null" />합니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options, System.Data.FillErrorEventHandler errorHandler) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options, class System.Data.FillErrorEventHandler errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption, errorHandler As FillErrorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options, System::Data::FillErrorEventHandler ^ errorHandler);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption * System.Data.FillErrorEventHandler -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options, errorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
      </Parameters>
      <Docs>
        <typeparam name="T">소스 시퀀스의 개체 형식(일반적으로 <see cref="T:System.Data.DataRow" />)입니다.</typeparam>
        <param name="source">원본 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 시퀀스입니다.</param>
        <param name="table">대상 <see cref="T:System.Data.DataTable" />입니다.</param>
        <param name="options">A <see cref="T:System.Data.LoadOption" /> 지정 하는 열거형을 <see cref="T:System.Data.DataTable" /> 옵션을 로드 합니다.</param>
        <param name="errorHandler"><see cref="T:System.Data.FillErrorEventHandler" /> 처리 오류가 발생 하는 메서드를 나타내는 대리자입니다.</param>
        <summary>복사본 <see cref="T:System.Data.DataRow" /> 지정 된 개체 <see cref="T:System.Data.DataTable" />, 지정 된 입력 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체는 제네릭 매개 변수 <paramref name="T" /> 는 <see cref="T:System.Data.DataRow" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 매개 변수 `T` 입력된 매개 변수의 `source` 형식일 수만 있습니다 <xref:System.Data.DataRow>에서 파생 된 형식 또는 <xref:System.Data.DataRow>합니다.  
  
 입력된 시퀀스 될 수 있습니다 <xref:System.Collections.Generic.IEnumerable%601> 소스 뿐 아니라 쿼리를 통해를 <xref:System.Data.DataTable>입니다. 참고는 소스 시퀀스를 쿼리 하는 경우이 연산자를 호출는 즉시 실행을 강제 합니다. 소스 시퀀스를 열거 하는 경우에 예외가 throw 될 수도 있습니다.  
  
 대상 테이블의 스키마는 스키마를 기반으로 첫 번째 <xref:System.Data.DataRow> 소스 시퀀스의 행입니다. 테이블 메타 데이터에서 추출 되는 <xref:System.Data.DataRow> 메타 데이터 및 테이블의 열 값에서 값을 <xref:System.Data.DataRow>입니다. 형식화 된 <xref:System.Data.DataTable>, 형식은 유지 되지 않습니다. 데이터 및 스키마를 전송할지, 되지만 형식화 된 결과 출력 테이블의 행 수 <xref:System.Data.DataRow> 형식입니다. 합니다 <xref:System.Data.DataRow.RowState%2A> 하 고 <xref:System.Data.DataRow.RowError%2A> 속성은 원본에서 복사 하는 동안 유지 되지 않습니다 <xref:System.Data.DataRow> 반환 된 <xref:System.Data.DataTable>합니다.  
  
 경우는 **null** 참조 또는 nullable 형식과 값 **null** 원본의 <xref:System.Data.DataRow>,이 메서드는 대상의 값을 대체 <xref:System.Data.DataTable> 값을 사용 하 여 <xref:System.DBNull.Value>합니다.  
  
 메서드에 의해 반환 되는 생성 된 테이블에 기본 테이블 이름이 있습니다. 이름을 지정 하려는 경우는 <xref:System.Data.DataTable>에 연결을 <xref:System.Data.DataSet>, 다른 수행 또는 <xref:System.Data.DataTable> 특정 작업을 해야 테이블이 만들어지고 반환 되 면 합니다.  
  
 제약 조건 예외를 같은 대상 테이블에 데이터 행을 복사 하는 동안 예외가 throw 되 면는 `errorHandler` 대리자가 호출 됩니다. A <xref:System.Data.FillErrorEventArgs> 에 전달 되는 `errorHandler` 다음 값을 사용 하 여 대리자:  
  
-   <xref:System.Data.FillErrorEventArgs.Values%2A> 원본 데이터의 복사본을 설정 합니다.  
  
-   합니다 <xref:System.Data.FillErrorEventArgs.DataTable%2A> 대상 속성이 <xref:System.Data.DataTable>합니다.  
  
-   <xref:System.Data.FillErrorEventArgs.Errors%2A> 예외가 속성입니다.  
  
 <xref:System.Data.FillErrorEventArgs.Continue%2A> 대리자 호출이 반환 된 후 속성이 읽기입니다. 경우는 <xref:System.Data.FillErrorEventArgs.Continue%2A> 속성은 `true`를 열거 하 고 데이터 테이블에 로드 하려면 소스 시퀀스를 계속 합니다. 경우는 <xref:System.Data.FillErrorEventArgs.Continue%2A> 속성은 `false`에서 원래 예외가 throw 되는 <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> 메서드.  
  
 자세한 내용은 [쿼리는에서 DataTable 만들기](~/docs/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">복사한 <see cref="T:System.Data.DataRow" /> 개체의 대상 스키마에 맞지 않는 <see cref="T:System.Data.DataTable" />합니다.</exception>
        <exception cref="T:System.ArgumentNullException">소스 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 순서가 <see langword="null" /> 또는 대상을 <see cref="T:System.Data.DataTable" /> 는 <see langword="null" />합니다.</exception>
        <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Data.DataRow" /> 소스 시퀀스에 상태의 <see cref="F:System.Data.DataRowState.Deleted" />합니다.  
  
또는 
소스 시퀀스를 포함 하지 <see cref="T:System.Data.DataRow" /> 개체입니다.  
  
또는 
A <see cref="T:System.Data.DataRow" /> 시퀀스는 소스의 <see langword="null" />합니다.</exception>
      </Docs>
    </Member>
  </Members>
</Type>