<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ccfe5816dad413d7b60fcc102b5215bd09c9535b" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51903166" /></Metadata><TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDataAdapter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>개체가 DataAdapter를 구현하도록 하며, <see cref="T:System.Data.DataSet" />을 채우거나 업데이트하고 데이터 소스를 업데이트하는 데 사용되는 매핑 동작 관련 속성 및 메서드 집합을 나타냅니다.  
  
 <see cref="T:System.Data.IDbDataAdapter" /> 인스턴스는 텍스트 명령(예: Transact-SQL)을 사용하는 관계형 데이터베이스 또는 그와 유사한 데이터 소스용이며, <see cref="T:System.Data.IDataAdapter" /> 인스턴스는 임의 형식의 데이터 소스를 사용할 수 있습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Data.IDataAdapter> 인터페이스를 사용 하면 데이터 원본 간의 브리지를 나타내는 DataAdapter 클래스를 구현 하는 상속 클래스 및 <xref:System.Data.DataSet>합니다. DataAdapter 클래스에 대한 자세한 내용은 [DataAdapter에서 DataSet 채우기](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md)를 참조하세요.  
  
 애플리케이션의 인스턴스를 만들지 않습니다 합니다 <xref:System.Data.IDataAdapter> 인터페이스를 직접 상속 하는 클래스의 인스턴스를 구현 하지만 <xref:System.Data.IDataAdapter>합니다.  
  
 상속 된 클래스 <xref:System.Data.IDataAdapter> 상속된 된 멤버를 구현 하 고 일반적으로 공급자 특정 기능을 추가 하기 위한 추가 멤버를 정의 해야 합니다. 예를 들어 합니다 <xref:System.Data.IDataAdapter> 인터페이스 정의 <xref:System.Data.IDataAdapter.Fill%2A> 메서드를를 <xref:System.Data.DataSet> 매개 변수로 합니다. 차례로 <xref:System.Data.OleDb.OleDbDataAdapter> 클래스는 상속 합니다 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드도 추가 두 오버 로드를 정의 하 고는 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> ADO Recordset 개체를 매개 변수로 사용 하는 메서드.  
  
   
  
## Examples  
 다음 예제에서는 파생된 클래스인 <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, 및 <xref:System.Data.SqlClient.SqlConnection>, 데이터베이스에서 레코드를 선택 합니다. 채워진 <xref:System.Data.DataSet> 반환 됩니다. 이 위해 메서드를 전달 초기화 <xref:System.Data.DataSet>, 연결 문자열 및 쿼리 문자열 TRANSACT-SQL SELECT 문입니다.  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>.NET Framework 데이터 공급자의 일관성 수준을 올릴 폼에서 상속 하는 클래스의 이름을 <paramref name="Prv" /> DataAdapter 여기서 <paramref name="Prv" /> 는 특정.NET Framework 데이터 공급자 네임 스페이스의 모든 클래스에 지정 된 일관 된 접두사입니다. 예를 들어 <paramref name="Sql" /> 접두사입니다 합니다 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 클래스는 <see langword="System.Data.SqlClient" /> 네임 스페이스입니다.  
  
상속 하는 경우는 <see cref="T:System.Data.IDataAdapter" /> 인터페이스 다음 생성자를 구현 해야 합니다. 
 <list type="table"><listheader><term> 항목 
 </term><description> 설명 
 </description></listheader><item><term> PrvDataAdapter() 
 </term><description> PrvDataAdapter 클래스의 새 인스턴스를 초기화합니다.  
  
 </description></item><item><term> PrvDataAdapter (PrvCommand selectCommand) 
 </term><description> 지정 된 SQL SELECT 문을 사용 하 여 PrvDataAdapter 클래스의 새 인스턴스를 초기화 합니다.  
  
 </description></item><item><term> PrvDataAdapter (문자열 selectCommandText, 문자열 selectConnectionString) 
 </term><description> SQL SELECT 문 및 연결 문자열을 사용 하 여 PrvDataAdapter 클래스의 새 인스턴스를 초기화 합니다.  
  
 </description></item><item><term> PrvDataAdapter (문자열 selectCommandText, PrvConnection selectConnection) 
 </term><description> SQL SELECT 문 및 PrvConnection 개체를 사용 하 여 PrvDataAdapter 클래스의 새 인스턴스를 초기화 합니다.  
  
 </description></item></list></para></block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Fill : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 <see cref="T:System.Data.DataSet" />입니다.</param>
        <summary><see cref="T:System.Data.DataSet" /> 이름을 사용하여 데이터 소스의 행과 일치하도록 <see cref="T:System.Data.DataSet" />의 행을 추가하거나 업데이트하고 "Table"이라는 이름의 <see cref="T:System.Data.DataTable" />을 만듭니다.</summary>
        <returns><see cref="T:System.Data.DataSet" />에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.Fill%2A> 연결 된 지정 된 SELECT 문을 사용 하 여 데이터 원본에서 행을 검색 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 속성입니다. SELECT 문과 사용 하 여 연결 된 연결 개체는 유효 해야 합니다. 하지만 열려 있이 필요가 없습니다. 전에 연결이 닫히면 <xref:System.Data.IDataAdapter.Fill%2A> 는 데이터를 검색 하려면을 열고 다음 닫는 하는를 호출 합니다. 연결 하기 전에 열려 있으면 <xref:System.Data.IDataAdapter.Fill%2A> 는 호출을 열린 상태로 유지 합니다.  
  
 <xref:System.Data.IDataAdapter.Fill%2A> 작업이 대상에 행 추가 <xref:System.Data.DataTable> 개체를 <xref:System.Data.DataSet>만들기는 <xref:System.Data.DataTable> 경우 이미 없는 개체입니다. 만들면 <xref:System.Data.DataTable> 개체는 <xref:System.Data.IDataAdapter.Fill%2A> 작업은 일반적으로 열 이름 메타 데이터만 만듭니다. 그러나 경우 합니다 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> 속성이 `AddWithKey`, 적절 한 기본 키와 제약 조건도 만들어집니다.  
  
 `SelectCommand` 가 OUTER JOIN의 결과를 반환하면 `DataAdapter` 는 결과 <xref:System.Data.DataTable.PrimaryKey%2A> 에 대해 <xref:System.Data.DataTable>값을 설정하지 않습니다. 중복 행을 올바르게 확인할 수 있도록 기본 키를 명시적으로 정의 해야 합니다. 자세한 내용은 [기본 키 정의](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)합니다.  
  
 경우는 <xref:System.Data.IDataAdapter> 에서 중복 열을 채우는 동안는 <xref:System.Data.DataTable>, 패턴 "columnname1", "columnname2", "columnname3", 및 등을 사용 하 여 연속 열에 대 한 이름을 생성 합니다. 저장 됩니다는 들어오는 데이터에 명명 되지 않은 열을 포함 하는 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다. 여러 결과 집합에 추가 될 때를 <xref:System.Data.DataSet>, 각 결과 집합을 별도 테이블에 저장 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예: "Table", "Table1", "Table2" 및 등)에 정수 값을 추가 하 여 이름이 지정 됩니다. 애플리케이션은 이러한 명명 패턴을 사용 하 여 충돌 하지 않도록 되도록 열 및 테이블 이름을 사용 하는 경우 주의 해야 합니다.  
  
 때 채우는 데 사용 되는 SELECT 문은 합니다 <xref:System.Data.DataSet> 여러 결과 반환 SQL 문 한 일괄 처리와 같은 결과 중 하나에 오류가 포함 되어 있는 경우 모든 후속 결과 생략 되 고에 추가 되지 않습니다는 <xref:System.Data.DataSet>합니다.  
  
 사용할 수는 <xref:System.Data.IDataAdapter.Fill%2A> 메서드를 여러 번에 동일한 <xref:System.Data.DataTable>입니다. 기본 키가 있는 경우 들어오는 행이 이미 존재 하는 일치 하는 행과 병합 됩니다. 들어오는 행에 추가 된 기본 키가 없으면는 <xref:System.Data.DataTable>합니다.  
  
> [!NOTE]
>  구현의 여러 결과 반환 하는 SQL 문을 일괄 처리할 때 <xref:System.Data.IDataAdapter.Fill%2A> 고 <xref:System.Data.IDataAdapter.FillSchema%2A> .NET Framework 데이터 공급자는 결과 대해서만 첫 번째 스키마 정보를 검색 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="abstract member FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="iDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">데이터 원본의 스키마로 채울 <see cref="T:System.Data.DataSet" />입니다.</param>
        <param name="schemaType"><see cref="T:System.Data.SchemaType" /> 값 중 하나입니다.</param>
        <summary>지정된 <see cref="T:System.Data.DataSet" />에 "Table"이라는 <see cref="T:System.Data.DataTable" />을 추가하고 지정된 <see cref="T:System.Data.SchemaType" />에 따라 데이터 원본의 스키마와 일치하도록 스키마를 구성합니다.</summary>
        <returns>데이터 소스에서 반환된 스키마 정보가 들어 있는 <see cref="T:System.Data.DataTable" /> 개체의 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Data.IDataAdapter.FillSchema%2A> 사용 하 여 데이터 원본에서 스키마를 검색 하는 메서드는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>합니다. 와 연결 된 연결 개체는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 유효 해야 하지만 열려 있이 필요는 없습니다. 전에 연결이 닫히면 <xref:System.Data.IDataAdapter.FillSchema%2A> 는 데이터를 검색 하려면을 열고 다음 닫는 하는를 호출 합니다. 연결 하기 전에 열려 있으면 <xref:System.Data.IDataAdapter.FillSchema%2A> 는 호출을 열린 상태로 유지 합니다.  
  
 A <xref:System.Data.IDataAdapter.FillSchema%2A> 작업 추가 <xref:System.Data.DataTable> 대상 <xref:System.Data.DataSet>합니다. 그런 다음 열을 추가 합니다 <xref:System.Data.DataColumnCollection> 의 합니다 <xref:System.Data.DataTable> 하 고 다음 구성 <xref:System.Data.DataColumn> 데이터 원본에 존재 하는 경우 속성:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. 설정 해야 합니다 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 고 <xref:System.Data.DataColumn.AutoIncrementSeed%2A> 개별적으로 합니다.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> 또한 구성 합니다 <xref:System.Data.DataTable.PrimaryKey%2A> 고 <xref:System.Data.DataTable.Constraints%2A> 다음 규칙에 따라 속성:  
  
-   하나 이상의 기본 키 열에서 반환 되는 경우는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>에 대 한 기본 키 열으로 사용할는 <xref:System.Data.DataTable>합니다.  
  
-   기본 키 열이 없으면 반환 됩니다. 고유한 열은 하지만 모든 고유한 열이 nullable이 아닌 경우 고유한 열 기본 키로 사용 됩니다. 열이 null을 허용 하는 경우는 <xref:System.Data.UniqueConstraint> 에 추가 됩니다는 <xref:System.Data.ConstraintCollection>, 하지만 <xref:System.Data.DataTable.PrimaryKey%2A> 속성이 설정 되지 않은 합니다.  
  
-   기본 키 열에 대 한 기본 키 열으로 사용 된 기본 키 열 및 고유 열을 모두 반환 되는 경우는 <xref:System.Data.DataTable>합니다.  
  
 기본 키 및 unique 제약 조건에 추가 됩니다는 <xref:System.Data.ConstraintCollection> 이전 규칙에 있지만 다른 제약 조건에 따라 유형이 추가 되지 않습니다.  
  
 고유한 클러스터형 SQL Server 테이블에서 열 또는 열에 인덱스가 정의 되 고 클러스터형된 인덱스의 열 이름을 반환 됩니다 primary key 제약 별도 열 집합에 정의 됩니다. 기본 키 열의 이름을 반환할 기본 키 인덱스의 이름을 지정 하는 SELECT 문을 사용 하 여 쿼리 힌트를 사용 합니다. 쿼리 힌트를 지정 하는 방법에 대 한 자세한 내용은 참조 하세요. [쿼리 힌트 (Transact SQL)](https://msdn.microsoft.com/library/ms181714.aspx)합니다.  
  
 경우는 <xref:System.Data.IDataAdapter> 에서 중복 열을 채우는 동안는 <xref:System.Data.DataTable>, 패턴 "columnname1", "columnname2", "columnname3", 및 등을 사용 하 여 연속 열에 대 한 이름을 생성 합니다. 저장 됩니다는 들어오는 데이터에 명명 되지 않은 열을 포함 하는 경우는 <xref:System.Data.DataSet> "column1", "Column2" 등에 따라 합니다. 여러 결과 집합에 추가 될 때를 <xref:System.Data.DataSet>, 각 결과 집합을 별도 테이블에 저장 됩니다. 추가 결과 집합이 지정한 테이블 이름 (예: "Table", "Table1", "Table2" 및 등)에 정수 값을 추가 하 여 이름이 지정 됩니다. 애플리케이션은 이러한 명명 패턴을 사용 하 여 충돌 하지 않도록 되도록 열 및 테이블 이름을 사용 하는 경우 주의 해야 합니다.  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> 행을 반환합니다. 사용 된 <xref:System.Data.IDataAdapter.Fill%2A> 에 행을 추가 하는 방법을 <xref:System.Data.DataTable>입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="iDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>SQL SELECT 문을 실행할 때 사용자가 설정한 매개 변수를 가져옵니다.</summary>
        <returns>사용자가 설정한 매개 변수를 포함하는 <see cref="T:System.Data.IDataParameter" /> 개체의 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
```  
private static void GetParameters(String connectiongString) {  
           using (SqlConnection conn = new SqlConnection(connectiongString)) {  
              String queryString = "Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credit]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingMappingAction : System.Data.MissingMappingAction with get, set" Usage="System.Data.IDataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>매핑되지 않은 소스 테이블과 열 중에서 필터링하거나 오류를 발생시키기 위해 소스 이름과 함께 전달할 항목을 나타내거나 지정합니다.</summary>
        <value><see cref="T:System.Data.MissingMappingAction" /> 값 중 하나입니다. 기본값은 <see langword="Passthrough" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Data.IDataAdapter.TableMappings%2A> 속성은 반환된 된 레코드 사이 마스터 매핑을 제공 하며 <xref:System.Data.DataSet>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">설정된 값이 <see cref="T:System.Data.MissingMappingAction" /> 값 중 하나가 아닌 경우</exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingSchemaAction : System.Data.MissingSchemaAction with get, set" Usage="System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>누락된 소스 테이블, 열 및 그 관계를 데이터 세트 스키마에 추가할지 무시할지 또는 오류를 발생시킬지를 나타내거나 지정합니다.</summary>
        <value><see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나입니다. 기본값은 <see langword="Add" />입니다.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">설정된 값이 <see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나가 아닌 경우</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TableMappings : System.Data.ITableMappingCollection" Usage="System.Data.IDataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>원본 테이블이 데이터 세트 테이블에 매핑되는 방식을 나타냅니다.</summary>
        <value>반환된 레코드와 <see cref="T:System.Data.DataSet" /> 간의 마스터 매핑을 제공하는 컬렉션입니다. 기본값은 빈 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter> "Table" 이라는 원본 테이블에 대 한 매핑을 사용 합니다. 모든 SELECT, 데이터를 반환 하는 INSERT, DELETE 및 UPDATE 문을 수행 해야 합니다 일관 된 열 이름 지정을 사용 합니다. 레코드에서 반환 된 열 이름은 고유 해야, 그렇지 않으면 열 이름이 중복 된 이전 데이터를 덮어쓰게 합니다. <xref:System.Data.IDataAdapter.Update%2A>를 "Table" 이라는 원본 테이블에 매핑되는 테이블에서 변경 내용을 조정 해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">데이터 소스를 업데이트하는 데 사용된 <see cref="T:System.Data.DataSet" />입니다.</param>
        <summary>"Table"이라는 <see cref="T:System.Data.DataSet" />의 지정된 <see cref="T:System.Data.DataTable" />에서 삽입, 업데이트 또는 삭제된 각 행에 대해 각각 INSERT, UPDATE 또는 DELETE 문을 호출합니다.</summary>
        <returns><see cref="T:System.Data.DataSet" />에서 성공적으로 업데이트된 행의 수를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 애플리케이션 호출 하는 경우는 <xref:System.Data.IDataAdapter.Update%2A> 메서드를 <xref:System.Data.IDataAdapter> 검사를 <xref:System.Data.DataRow.RowState%2A> 속성 합니다 에서구성된인덱스순서에따라각행에대해반복적으로필요한INSERT,UPDATE또는DELETE문을실행하고<xref:System.Data.DataSet>. 예를 들어 <xref:System.Data.IDataAdapter.Update%2A> 의 행 순서 때문에 그 다음에 INSERT 문이 DELETE 문의 하 고 다른 DELETE 문이 실행 될 수 있습니다는 <xref:System.Data.DataTable>합니다.  
  
 이러한 문은 일괄 처리 프로세스로 수행 되지 않습니다 주의 각 행은 개별적으로 업데이트 됩니다. 애플리케이션에서 호출할 수는 <xref:System.Data.DataSet.GetChanges%2A> 메서드 (예: 업데이트 하기 전에 삽입) 문 형식의 시퀀스를 제어 해야 하는 경우. 자세한 내용은 [Dataadapter 사용 하 여 데이터 원본 업데이트](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)합니다.  
  
 하는 경우 INSERT, UPDATE 또는 DELETE 문이 지정 되지 않았습니다는 <xref:System.Data.Common.DataAdapter.Update%2A> 메서드 예외를 생성 합니다. 만들 수 있습니다는 <xref:System.Data.SqlClient.SqlCommandBuilder> 또는 <xref:System.Data.OleDb.OleDbCommandBuilder> 설정 하는 경우 단일 테이블 업데이트에 대 한 SQL 문을 자동으로 생성 하는 개체는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다. 그런 다음 설정 하지 않으면 추가적인 모든 SQL 문은 CommandBuilder에서 생성 됩니다. 이 세대 논리에 키 열 정보가 필요 합니다 <xref:System.Data.DataSet>합니다. 자세한 내용은 참조 [commandbuilder를 사용 하를 사용 하 여 명령 생성](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)합니다.  
  
 <xref:System.Data.Common.DataAdapter.Update%2A> 메서드 업데이트를 수행 하기 전에 첫 번째 매핑의에 나열 된 테이블에서 행을 검색 합니다. 합니다 <xref:System.Data.Common.DataAdapter.Update%2A> 의 값을 사용 하 여 행을 업데이트 한 다음는 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> 속성입니다. 반환 되는 모든 추가 행은 무시 됩니다.  
  
 모든 데이터에 다시 로드 된 후는 <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 이벤트가 발생 하는 조정 된 검사할 수 있도록 <xref:System.Data.DataSet> 행 및 모든 출력 매개 변수는 명령으로 반환 합니다. 행을 성공적으로 업데이트 한 후 해당 행 변경 내용이 허용 됩니다.  
  
 사용 하는 경우 <xref:System.Data.IDataAdapter.Update%2A>, 실행 순서는 다음과 같습니다.  
  
1.  값을 <xref:System.Data.DataRow> 매개 변수 값으로 이동 됩니다.  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 이벤트가 발생합니다.  
  
3.  명령을 실행합니다.  
  
4.  명령으로 설정 되어 있으면 `FirstReturnedRecord`, 첫 번째 반환 결과에 배치 되는 <xref:System.Data.DataRow>합니다.  
  
5.  에 배치 됩니다 출력 매개 변수가 있는 경우는 <xref:System.Data.DataRow>합니다.  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 이벤트가 발생합니다.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A>가 호출된 경우  
  
 와 연결 된 각 명령을 <xref:System.Data.IDataAdapter> 일반적으로 연결 된 매개 변수 컬렉션을 포함 합니다. 매개 변수를 통해 현재 행에 매핑되는 `SourceColumn` 및 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스입니다. `SourceColumn` 참조를 <xref:System.Data.DataTable> 열은는 <xref:System.Data.IDataAdapter> 현재 행에 대 한 매개 변수 값을 가져오기에 대 한 참조입니다.  
  
 `SourceColumn` 테이블 매핑을 적용 하려면 먼저 매핑되지 않은 열 이름으로 참조 합니다. 하는 경우 `SourceColumn` 참조를 존재 하지 않는 열에 수행 되는 동작에 따라 달라 집니다 다음 중 하나 <xref:System.Data.MissingMappingAction> 값입니다.  
  
|열거 값|수행한 작업|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|원본 열 이름 및 테이블 이름을 사용 하 여는 <xref:System.Data.DataSet> 매핑이 있는 경우.|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException> 생성 됩니다. 매핑을 명시적으로 설정 하는 경우 오류가 발생 하 여 입력된 매개 변수의 매핑이 없을 일반적 원인입니다.|  
|`MissingMappingAction.Error`|<xref:System.SystemException> 생성 됩니다.|  
  
 합니다 `SourceColumn` 속성은 또한 출력에 대 한 값을 매핑할 사용 또는 입/출력 매개 변수를는 `DataSet`합니다. 존재 하지 않는 열을 참조 하는 경우 예외가 생성 됩니다.  
  
 `SourceVersion` .NET Framework 데이터 공급자의 속성 `Parameter` 클래스를 사용할지 여부를 결정 합니다 `Original`, `Current`, 또는 `Proposed` 열 값의 버전입니다. 이 기능은 낙관적 동시성 위반을 검사 하는 UPDATE 문의 WHERE 절에 원래 값을 포함 하도록 자주 사용 됩니다.  
  
> [!NOTE]
>  행을 업데이트 하는 동안 오류가 발생 하는 경우 예외가 throw 되 고 업데이트의 실행이 중단 되었습니다. 오류가 발생 하는 경우 예외를 생성 하지 않고 업데이트 작업을 계속 하려면 설정 합니다 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 속성을 `true` 호출 하기 전에 <xref:System.Data.Common.DbDataAdapter.Update%2A>입니다. 내에서 행당 별로 오류에 응답할 수도 있습니다는 `RowUpdated` DataAdapter의 이벤트입니다. 내에서 예외를 생성 하지 않고 업데이트 작업을 계속 하려면를 `RowUpdated` 이벤트를 설정 합니다 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 의 속성을 <xref:System.Data.Common.RowUpdatedEventArgs> 를 <xref:System.Data.UpdateStatus.Continue>입니다.  
  
   
  
## Examples  
 다음 예제에서는 파생된 클래스 <xref:System.Data.OleDb.OleDbDataAdapter>를 <xref:System.Data.Common.DataAdapter.Update%2A> 데이터 원본입니다. 이 예에서는 만들었다고 가정를 <xref:System.Data.OleDb.OleDbDataAdapter> 및 <xref:System.Data.DataSet>합니다.  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException">INSERT, UPDATE 또는 DELETE 문을 실행한 결과 영향을 받은 레코드가 없는 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>