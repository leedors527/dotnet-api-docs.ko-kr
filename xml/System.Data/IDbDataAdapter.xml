<Type Name="IDbDataAdapter" FullName="System.Data.IDbDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3666a813daf7888d8a02fcd39d3cabe293427333" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58717934" /></Metadata><TypeSignature Language="C#" Value="public interface IDbDataAdapter : System.Data.IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbDataAdapter implements class System.Data.IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbDataAdapter&#xA;Implements IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDbDataAdapter : System::Data::IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDbDataAdapter = interface&#xA;    interface IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDataAdapter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="91c67-101"><see cref="T:System.Data.DataSet" />을 채우고 데이터 소스를 업데이트하는 데 사용되며 관계 데이터베이스에 액세스하는 .NET Framework 데이터 공급자에 의해 구현되는 명령 관련 속성 집합을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-101">Represents a set of command-related properties that are used to fill the <see cref="T:System.Data.DataSet" /> and update a data source, and is implemented by .NET Framework data providers that access relational databases.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91c67-102">합니다 <xref:System.Data.IDbDataAdapter> 인터페이스에서 상속 된 <xref:System.Data.IDataAdapter> 인터페이스 및 개체가 DataAdapter 관계형 데이터베이스를 사용 하 여 용도로 설계를 만들 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-102">The <xref:System.Data.IDbDataAdapter> interface inherits from the <xref:System.Data.IDataAdapter> interface and allows an object to create a DataAdapter designed for use with a relational database.</span></span> <span data-ttu-id="91c67-103">합니다 <xref:System.Data.IDbDataAdapter> 인터페이스 및 유틸리티 클래스가 필요에 따라 <xref:System.Data.Common.DbDataAdapter>, 데이터 원본 간의 브리지를 나타내는 DataAdapter 클래스를 구현 하는 상속 클래스를 허용 및 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-103">The <xref:System.Data.IDbDataAdapter> interface and, optionally, the utility class, <xref:System.Data.Common.DbDataAdapter>, allow an inheriting class to implement a DataAdapter class, which represents the bridge between a data source and a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="91c67-104">DataAdapter 클래스에 대한 자세한 내용은 [DataAdapter에서 DataSet 채우기](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="91c67-104">For more information about DataAdapter classes, see [Populating a DataSet from a DataAdapter](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md).</span></span> <span data-ttu-id="91c67-105">.NET Framework 데이터 공급자를 구현 하는 방법에 대 한 자세한 내용은 참조 하세요. [.NET Framework 데이터 공급자를 구현](https://docs.microsoft.com/previous-versions/dotnet/netframework-1.1/4ksaf9z5(v=vs.71))합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-105">For more information about implementing .NET Framework data providers, see [Implementing a .NET Framework Data Provider](https://docs.microsoft.com/previous-versions/dotnet/netframework-1.1/4ksaf9z5(v=vs.71)).</span></span>  
  
 <span data-ttu-id="91c67-106">응용 프로그램의 인스턴스를 만들지 않습니다 합니다 <xref:System.Data.IDbDataAdapter> 인터페이스를 직접 하지만 상속 된 클래스의 인스턴스를 만듭니다 <xref:System.Data.IDbDataAdapter> 고 <xref:System.Data.Common.DbDataAdapter>입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-106">An application does not create an instance of the <xref:System.Data.IDbDataAdapter> interface directly, but creates an instance of a class that inherits <xref:System.Data.IDbDataAdapter> and <xref:System.Data.Common.DbDataAdapter>.</span></span>  
  
 <span data-ttu-id="91c67-107">상속 된 클래스 <xref:System.Data.IDbDataAdapter> 상속 된 멤버를 구현 해야 하며 일반적으로 공급자 특정 기능을 추가 하기 위한 추가 멤버를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-107">Classes that inherit <xref:System.Data.IDbDataAdapter> must implement the inherited members, and typically define additional members to add provider-specific functionality.</span></span> <span data-ttu-id="91c67-108">예를 들어,를 <xref:System.Data.IDbDataAdapter> 인터페이스를 정의 합니다 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 속성 및 <xref:System.Data.Common.DbDataAdapter> 인터페이스를 정의 <xref:System.Data.IDataAdapter.Fill%2A> 메서드를를 <xref:System.Data.DataTable> 매개 변수로.</span><span class="sxs-lookup"><span data-stu-id="91c67-108">For example, the <xref:System.Data.IDbDataAdapter> interface defines the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property, and the <xref:System.Data.Common.DbDataAdapter> interface defines a <xref:System.Data.IDataAdapter.Fill%2A> method that takes a <xref:System.Data.DataTable> as a parameter.</span></span> <span data-ttu-id="91c67-109">차례로 <xref:System.Data.OleDb.OleDbDataAdapter> 클래스는 상속 합니다 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 속성 및 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 메서드를도 추가 두 오버 로드를 정의 하 고는 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> ADO Recordset 개체를 매개 변수로 사용 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="91c67-109">In turn, the <xref:System.Data.OleDb.OleDbDataAdapter> class inherits the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property and the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method, and also defines two additional overloads of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> method that take an ADO Recordset object as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91c67-110">다음 예제에서는 파생된 클래스인 <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter> 및 <xref:System.Data.SqlClient.SqlConnection>, 데이터 원본에서 레코드를 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-110">The following example uses the derived classes, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter> and <xref:System.Data.SqlClient.SqlConnection>, to select records from a data source.</span></span> <span data-ttu-id="91c67-111">채워진 <xref:System.Data.DataSet> 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-111">The filled <xref:System.Data.DataSet> is then returned.</span></span> <span data-ttu-id="91c67-112">이를 위해 메서드를 전달 초기화 <xref:System.Data.DataSet>, 연결 문자열 및 쿼리 문자열 TRANSACT-SQL SELECT 문입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-112">To accomplish this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.</span></span>  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="91c67-113">.NET Framework 데이터 공급자의 일관성 수준을 올릴 폼에서 상속 하는 클래스의 이름을 <paramref name="Prv" /> DataAdapter 여기서 <paramref name="Prv" /> 는 특정.NET Framework 데이터 공급자 네임 스페이스의 모든 클래스에 지정 된 일관 된 접두사입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-113">To promote consistency among .NET Framework data providers, name the inheriting class in the form <paramref name="Prv" /> DataAdapter where <paramref name="Prv" /> is the uniform prefix given to all classes in a specific .NET Framework data provider namespace.</span></span> <span data-ttu-id="91c67-114">예를 들어 <paramref name="Sql" /> 접두사입니다 합니다 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 클래스는 <see langword="System.Data.SqlClient" /> 네임 스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-114">For example, <paramref name="Sql" /> is the prefix of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> class in the <see langword="System.Data.SqlClient" /> namespace.</span></span>  
  
<span data-ttu-id="91c67-115">상속 하는 경우는 <see cref="T:System.Data.IDbDataAdapter" /> 인터페이스 다음 생성자를 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-115">When you inherit from the <see cref="T:System.Data.IDbDataAdapter" /> interface, you should implement the following constructors:</span></span> 
 <list type="table"><listheader><term> <span data-ttu-id="91c67-116">항목</span><span class="sxs-lookup"><span data-stu-id="91c67-116">Item</span></span> 
 </term><description> <span data-ttu-id="91c67-117">설명</span><span class="sxs-lookup"><span data-stu-id="91c67-117">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="91c67-118">PrvDataAdapter()</span><span class="sxs-lookup"><span data-stu-id="91c67-118">PrvDataAdapter()</span></span> 
 </term><description> <span data-ttu-id="91c67-119">PrvDataAdapter 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-119">Initializes a new instance of the PrvDataAdapter class.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="91c67-120">PrvDataAdapter (PrvCommand selectCommand)</span><span class="sxs-lookup"><span data-stu-id="91c67-120">PrvDataAdapter(PrvCommand selectCommand)</span></span> 
 </term><description> <span data-ttu-id="91c67-121">지정 된 SQL SELECT 문 사용 하 여 PrvDataAdapter 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-121">Initializes a new instance of the PrvDataAdapter class with the specified SQL SELECT statement.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="91c67-122">PrvDataAdapter (문자열 selectCommandText, 문자열 selectConnectionString)</span><span class="sxs-lookup"><span data-stu-id="91c67-122">PrvDataAdapter(string selectCommandText, string selectConnectionString)</span></span> 
 </term><description> <span data-ttu-id="91c67-123">SQL SELECT 문 및 연결 문자열을 사용 하 여 PrvDataAdapter 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-123">Initializes a new instance of the PrvDataAdapter class with an SQL SELECT statement and a connection string.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="91c67-124">PrvDataAdapter (문자열 selectCommandText, PrvConnection selectConnection)</span><span class="sxs-lookup"><span data-stu-id="91c67-124">PrvDataAdapter(string selectCommandText, PrvConnection selectConnection)</span></span> 
 </term><description> <span data-ttu-id="91c67-125">SQL SELECT 문 및 PrvConnection 개체를 사용 하 여 PrvDataAdapter 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-125">Initializes a new instance of the PrvDataAdapter class with an SQL SELECT statement and a PrvConnection object.</span></span>  
  
 </description></item></list></para></block>
  </Docs>
  <Members>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbCommand ^ DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : System.Data.IDbCommand with get, set" Usage="System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91c67-126">데이터 집합에서 레코드를 삭제하기 위한 SQL 문을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-126">Gets or sets an SQL statement for deleting records from the data set.</span></span></summary>
        <value><span data-ttu-id="91c67-127"><see cref="T:System.Data.IDbCommand" />을 수행하는 동안 데이터 집합의 삭제된 행에 대한 데이터 소스에서 레코드를 삭제하는 데 사용되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-127">An <see cref="T:System.Data.IDbCommand" /> used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> to delete records in the data source for deleted rows in the data set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91c67-128">하는 동안 <xref:System.Data.Common.DbDataAdapter.Update%2A>이면이 속성은 설정 되지 않으며 기본 키 정보에는 <xref:System.Data.DataSet>의 <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> 설정 하는 경우 자동으로 생성할 수 있습니다는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-128">During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> can be generated automatically if you set the `SelectCommand` property of a .NET Framework data provider.</span></span> <span data-ttu-id="91c67-129">그런 다음 CommandBuilder에서 설정 하지 않으면 모든 추가 명령이 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-129">Then, any additional commands that you do not set are generated by the CommandBuilder.</span></span> <span data-ttu-id="91c67-130">이 세대 논리에 키 열 정보가 필요 합니다 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-130">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="91c67-131">자세한 내용은 참조 [commandbuilder를 사용 하를 사용 하 여 명령 생성](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-131">For more information see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 <span data-ttu-id="91c67-132">때 <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> 할당 된 이전에 만든 <xref:System.Data.IDbCommand>는 <xref:System.Data.IDbCommand> 복제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-132">When <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned.</span></span> <span data-ttu-id="91c67-133">합니다 <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> 이전에 만든에 대 한 참조를 유지 관리 <xref:System.Data.IDbCommand> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-133">The <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> maintains a reference to the previously created <xref:System.Data.IDbCommand> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91c67-134">다음 예제에서는 상속 된 인스턴스를 만듭니다 <xref:System.Data.OleDb.OleDbDataAdapter> 집합과 클래스는 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 및 <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-134">The following example creates an instance of the inherited <xref:System.Data.OleDb.OleDbDataAdapter> class, and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> properties.</span></span> <span data-ttu-id="91c67-135">이미 만들었다고 가정 하는 <xref:System.Data.OleDb.OleDbConnection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-135">It assumes you have already created an <xref:System.Data.OleDb.OleDbConnection> object.</span></span>  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbCommand ^ InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : System.Data.IDbCommand with get, set" Usage="System.Data.IDbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91c67-136">데이터 소스에 새 레코드를 삽입하는 데 사용되는 SQL 문을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-136">Gets or sets an SQL statement used to insert new records into the data source.</span></span></summary>
        <value><span data-ttu-id="91c67-137"><see cref="T:System.Data.IDbCommand" />을 수행하는 동안 데이터 집합의 새 행에 대한 데이터 소스에 레코드를 삽입하는 데 사용되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-137">An <see cref="T:System.Data.IDbCommand" /> used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> to insert records in the data source for new rows in the data set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91c67-138">하는 동안 <xref:System.Data.Common.DbDataAdapter.Update%2A>이면이 속성은 설정 되지 않으며 기본 키 정보에는 <xref:System.Data.DataSet>의 <xref:System.Data.IDbDataAdapter.InsertCommand%2A> 설정 하는 경우 자동으로 생성할 수 있습니다는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-138">During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.InsertCommand%2A> can be generated automatically if you set the `SelectCommand` property of a .NET Framework data provider.</span></span> <span data-ttu-id="91c67-139">그런 다음 CommandBuilder에서 설정 하지 않으면 모든 추가 명령이 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-139">Then, any additional commands that you do not set are generated by the CommandBuilder.</span></span> <span data-ttu-id="91c67-140">이 세대 논리에 키 열 정보가 필요 합니다 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-140">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="91c67-141">자세한 내용은 참조 [commandbuilder를 사용 하를 사용 하 여 명령 생성](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-141">For more information see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 <span data-ttu-id="91c67-142">때 <xref:System.Data.IDbDataAdapter.InsertCommand%2A> 할당 된 이전에 만든 <xref:System.Data.IDbCommand>는 <xref:System.Data.IDbCommand> 복제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-142">When <xref:System.Data.IDbDataAdapter.InsertCommand%2A> is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned.</span></span> <span data-ttu-id="91c67-143">합니다 <xref:System.Data.IDbDataAdapter.InsertCommand%2A> 이전에 만든에 대 한 참조를 유지 관리 <xref:System.Data.IDbCommand> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-143">The <xref:System.Data.IDbDataAdapter.InsertCommand%2A> maintains a reference to the previously created <xref:System.Data.IDbCommand> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91c67-144">행을 반환 하는이 명령 실행 하는 경우 이러한 행에 추가할 수 있습니다는 <xref:System.Data.DataSet> 설정 하는 방법에 따라 합니다 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> 의 속성을 <xref:System.Data.IDbCommand> 개체.</span><span class="sxs-lookup"><span data-stu-id="91c67-144">If execution of this command returns rows, these rows may be added to the <xref:System.Data.DataSet> depending on how you set the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property of the <xref:System.Data.IDbCommand> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91c67-145">다음 예제에서는 상속 된 인스턴스를 만듭니다 <xref:System.Data.OleDb.OleDbDataAdapter> 집합과 클래스는 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 및 <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-145">The following example creates an instance of the inherited <xref:System.Data.OleDb.OleDbDataAdapter> class, and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> properties.</span></span> <span data-ttu-id="91c67-146">이미 만들었다고 가정 하는 <xref:System.Data.OleDb.OleDbConnection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-146">It assumes you have already created an <xref:System.Data.OleDb.OleDbConnection> object.</span></span>  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbCommand ^ SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : System.Data.IDbCommand with get, set" Usage="System.Data.IDbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91c67-147">데이터 소스에서 레코드를 선택하는 데 사용되는 SQL 문을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-147">Gets or sets an SQL statement used to select records in the data source.</span></span></summary>
        <value><span data-ttu-id="91c67-148"><see cref="T:System.Data.IDbCommand" />을 수행하는 동안 데이터 소스에서 데이터 집합에 배치할 레코드를 선택하는 데 사용되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-148">An <see cref="T:System.Data.IDbCommand" /> that is used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> to select records from data source for placement in the data set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91c67-149">때 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 할당 된 이전에 만든 <xref:System.Data.IDbCommand>는 <xref:System.Data.IDbCommand> 복제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-149">When <xref:System.Data.IDbDataAdapter.SelectCommand%2A> is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned.</span></span> <span data-ttu-id="91c67-150">합니다 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 이전에 만든에 대 한 참조를 유지 관리 <xref:System.Data.IDbCommand> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-150">The <xref:System.Data.IDbDataAdapter.SelectCommand%2A> maintains a reference to the previously created <xref:System.Data.IDbCommand> object.</span></span>  
  
 <span data-ttu-id="91c67-151">경우는 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 모든 행을 반환 하지 않는에 테이블이 추가 되는 <xref:System.Data.DataSet>, 예외가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-151">If the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> does not return any rows, no tables are added to the <xref:System.Data.DataSet>, and no exception is raised.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91c67-152">다음 예제에서는 상속 된 인스턴스를 만듭니다 <xref:System.Data.OleDb.OleDbDataAdapter> 집합과 클래스는 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 및 <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-152">The following example creates an instance of the inherited <xref:System.Data.OleDb.OleDbDataAdapter> class, and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> properties.</span></span> <span data-ttu-id="91c67-153">이미 만들었다고 가정 하는 <xref:System.Data.OleDb.OleDbConnection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-153">It assumes you have already created an <xref:System.Data.OleDb.OleDbConnection> object.</span></span>  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbCommand ^ UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : System.Data.IDbCommand with get, set" Usage="System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91c67-154">데이터 소스에서 레코드를 업데이트하는 데 사용되는 SQL 문을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-154">Gets or sets an SQL statement used to update records in the data source.</span></span></summary>
        <value><span data-ttu-id="91c67-155"><see cref="T:System.Data.IDbCommand" />을 수행하는 동안 데이터 집합의 수정된 행에 대한 데이터 소스에서 레코드를 업데이트하는 데 사용되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-155">An <see cref="T:System.Data.IDbCommand" /> used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> to update records in the data source for modified rows in the data set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91c67-156">하는 동안 <xref:System.Data.Common.DbDataAdapter.Update%2A>이면이 속성은 설정 되지 않으며 기본 키 정보에는 <xref:System.Data.DataSet>의 <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> 설정 하는 경우 자동으로 생성할 수 있습니다는 `SelectCommand` .NET Framework 데이터 공급자의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-156">During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> can be generated automatically if you set the `SelectCommand` property of a .NET Framework data provider.</span></span> <span data-ttu-id="91c67-157">그런 다음 CommandBuilder에서 설정 하지 않으면 모든 추가 명령이 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-157">Then, any additional commands that you do not set are generated by the CommandBuilder.</span></span> <span data-ttu-id="91c67-158">이 세대 논리에 키 열 정보가 필요 합니다 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-158">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="91c67-159">자세한 내용은 참조 [commandbuilder를 사용 하를 사용 하 여 명령 생성](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-159">For more information see [Generating Commands with CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).</span></span>  
  
 <span data-ttu-id="91c67-160">때 <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> 할당 된 이전에 만든 <xref:System.Data.IDbCommand>는 <xref:System.Data.IDbCommand> 복제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-160">When <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> is assigned to a previously created <xref:System.Data.IDbCommand>, the <xref:System.Data.IDbCommand> is not cloned.</span></span> <span data-ttu-id="91c67-161">합니다 <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> 이전에 만든에 대 한 참조를 유지 관리 <xref:System.Data.IDbCommand> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-161">The <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> maintains a reference to the previously created <xref:System.Data.IDbCommand> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91c67-162">이러한 행에 추가 된 행을 반환 하는이 명령 실행 하는 경우는 <xref:System.Data.DataSet>합니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-162">If execution of this command returns rows, these rows are added to the <xref:System.Data.DataSet>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91c67-163">다음 예제에서는 상속 된 인스턴스를 만듭니다 <xref:System.Data.OleDb.OleDbDataAdapter> 집합과 클래스는 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 및 <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-163">The following example creates an instance of the inherited <xref:System.Data.OleDb.OleDbDataAdapter> class, and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> properties.</span></span> <span data-ttu-id="91c67-164">이미 만들었다고 가정 하는 <xref:System.Data.OleDb.OleDbConnection> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="91c67-164">It assumes you have already created an <xref:System.Data.OleDb.OleDbConnection> object.</span></span>  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>