<Type Name="XmlReadMode" FullName="System.Data.XmlReadMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a5a6a6cbf395a227f8a3c516b5cdbb7f1cadcea1" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58693786" /></Metadata><TypeSignature Language="C#" Value="public enum XmlReadMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed XmlReadMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Data.XmlReadMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum XmlReadMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class XmlReadMode" />
  <TypeSignature Language="F#" Value="type XmlReadMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="55fa1-101">XML 데이터와 관계형 스키마를 <see cref="T:System.Data.DataSet" />으로 읽어오는 방법을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-101">Specifies how to read XML data and a relational schema into a <see cref="T:System.Data.DataSet" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55fa1-102">설정할 때이 열거형의 멤버를 사용 합니다 `ReadMode` 의 매개 변수는 <xref:System.Data.DataSet.ReadXml%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="55fa1-102">Use the members of this enumeration when setting the `ReadMode` parameter of the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="55fa1-103">`Auto` 모드 설정 보다 오래 걸릴 수 있습니다 <xref:System.Data.XmlReadMode> 명시적 옵션으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-103">`Auto` mode may be slower than setting <xref:System.Data.XmlReadMode> to an explicit option.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Auto">
      <MemberSignature Language="C#" Value="Auto" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode Auto = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Data.XmlReadMode.Auto" />
      <MemberSignature Language="VB.NET" Value="Auto" />
      <MemberSignature Language="C++ CLI" Value="Auto" />
      <MemberSignature Language="F#" Value="Auto = 0" Usage="System.Data.XmlReadMode.Auto" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="55fa1-104">기본.</span><span class="sxs-lookup"><span data-stu-id="55fa1-104">Default.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55fa1-105">이러한 작업의 가장 적절 한 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-105">Performs the most appropriate of these actions:</span></span>  
  
 <span data-ttu-id="55fa1-106">데이터가 DiffGram 이면 설정 `XmlReadMode` 에 `DiffGram`입니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-106">If the data is a DiffGram, sets `XmlReadMode` to `DiffGram`.</span></span>  
  
 <span data-ttu-id="55fa1-107">또는</span><span class="sxs-lookup"><span data-stu-id="55fa1-107">-or-</span></span>  
  
 <span data-ttu-id="55fa1-108">데이터 세트에 이미 스키마 있거나 문서에 인라인 스키마가 있는 경우 `XmlReadMode`을 `ReadSchema`로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-108">If the dataset already has a schema, or the document contains an in-line schema, sets `XmlReadMode` to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="55fa1-109">또는</span><span class="sxs-lookup"><span data-stu-id="55fa1-109">-or-</span></span>  
  
 <span data-ttu-id="55fa1-110">데이터 세트에 스키마가 없고 문서에 인라인 스키마가 없으면 `XmlReadMode`을 `InferSchema`로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-110">If the dataset does not already have a schema and the document does not contain an in-line schema, sets `XmlReadMode` to `InferSchema`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiffGram">
      <MemberSignature Language="C#" Value="DiffGram" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode DiffGram = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Data.XmlReadMode.DiffGram" />
      <MemberSignature Language="VB.NET" Value="DiffGram" />
      <MemberSignature Language="C++ CLI" Value="DiffGram" />
      <MemberSignature Language="F#" Value="DiffGram = 4" Usage="System.Data.XmlReadMode.DiffGram" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary><span data-ttu-id="55fa1-111">DiffGram을 읽고 DiffGram의 변경 내용을 <see cref="T:System.Data.DataSet" />에 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-111">Reads a DiffGram, applying changes from the DiffGram to the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="55fa1-112"><see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 작업과 의미론이 같습니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-112">The semantics are identical to those of a <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> operation.</span></span> <span data-ttu-id="55fa1-113"><see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 작업에서처럼 <see cref="P:System.Data.DataRow.RowState" /> 값이 유지됩니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-113">As with the <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> operation, <see cref="P:System.Data.DataRow.RowState" /> values are preserved.</span></span> <span data-ttu-id="55fa1-114"><see cref="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" />의 출력을 DiffGram으로 사용해야 DiffGram을 사용한 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" /> 입력을 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-114">Input to <see cref="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" /> with DiffGrams should only be obtained using the output from <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" /> as a DiffGram.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="55fa1-115">대상 <xref:System.Data.DataSet> 와 동일한 스키마 있어야 합니다.는 <xref:System.Data.DataSet> 기반이 <xref:System.Data.DataSet.WriteXml%2A> DiffGram 이라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-115">The target <xref:System.Data.DataSet> must have the same schema as the <xref:System.Data.DataSet> on which <xref:System.Data.DataSet.WriteXml%2A> as DiffGram is called.</span></span> <span data-ttu-id="55fa1-116">그렇지 않은 경우 DiffGram 병합 작업이 실패 하 고 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-116">Otherwise the DiffGram merge operation fails, and an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fragment">
      <MemberSignature Language="C#" Value="Fragment" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode Fragment = int32(5)" />
      <MemberSignature Language="DocId" Value="F:System.Data.XmlReadMode.Fragment" />
      <MemberSignature Language="VB.NET" Value="Fragment" />
      <MemberSignature Language="C++ CLI" Value="Fragment" />
      <MemberSignature Language="F#" Value="Fragment = 5" Usage="System.Data.XmlReadMode.Fragment" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary><span data-ttu-id="55fa1-117">FOR XML 쿼리를 실행하여 생성된 것과 같은 XML 단편을 SQL Server의 인스턴스에 대해 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-117">Reads XML fragments, such as those generated by executing FOR XML queries, against an instance of SQL Server.</span></span> <span data-ttu-id="55fa1-118"><see cref="T:System.Data.XmlReadMode" />를 <see langword="Fragment" />로 설정한 경우 기본 네임스페이스를 인라인 스키마로 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-118">When <see cref="T:System.Data.XmlReadMode" /> is set to <see langword="Fragment" />, the default namespace is read as the inline schema.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="IgnoreSchema">
      <MemberSignature Language="C#" Value="IgnoreSchema" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode IgnoreSchema = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Data.XmlReadMode.IgnoreSchema" />
      <MemberSignature Language="VB.NET" Value="IgnoreSchema" />
      <MemberSignature Language="C++ CLI" Value="IgnoreSchema" />
      <MemberSignature Language="F#" Value="IgnoreSchema = 2" Usage="System.Data.XmlReadMode.IgnoreSchema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="55fa1-119">인라인 스키마를 무시하고 데이터를 기존 <see cref="T:System.Data.DataSet" /> 스키마로 읽어옵니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-119">Ignores any inline schema and reads data into the existing <see cref="T:System.Data.DataSet" /> schema.</span></span> <span data-ttu-id="55fa1-120">데이터가 기존 스키마와 일치하지 않으면 <see cref="T:System.Data.DataSet" />에 정의된 다른 네임스페이스의 데이터와 함께 삭제됩니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-120">If any data does not match the existing schema, it is discarded (including data from differing namespaces defined for the <see cref="T:System.Data.DataSet" />).</span></span> <span data-ttu-id="55fa1-121">데이터가 DiffGram이면 <see langword="IgnoreSchema" />는 <see langword="DiffGram" />과 같은 기능을 가집니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-121">If the data is a DiffGram, <see langword="IgnoreSchema" /> has the same functionality as <see langword="DiffGram" />.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="InferSchema">
      <MemberSignature Language="C#" Value="InferSchema" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode InferSchema = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Data.XmlReadMode.InferSchema" />
      <MemberSignature Language="VB.NET" Value="InferSchema" />
      <MemberSignature Language="C++ CLI" Value="InferSchema" />
      <MemberSignature Language="F#" Value="InferSchema = 3" Usage="System.Data.XmlReadMode.InferSchema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary><span data-ttu-id="55fa1-122">인라인 스키마를 무시하고 데이터로부터 스키마를 유추한 다음 해당 데이터를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-122">Ignores any inline schema, infers schema from the data and loads the data.</span></span> <span data-ttu-id="55fa1-123"><see cref="T:System.Data.DataSet" />에 스키마가 이미 있으면 새 테이블을 추가하거나 기존 테이블에 열을 추가하여 현재 스키마를 확장합니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-123">If the <see cref="T:System.Data.DataSet" /> already contains a schema, the current schema is extended by adding new tables or adding columns to existing tables.</span></span> <span data-ttu-id="55fa1-124">유추된 테이블이 이미 있지만 네임스페이스가 다르거나 유추된 열 중에 기존 열과 충돌하는 열이 있으면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-124">An exception is thrown if the inferred table already exists but with a different namespace, or if any of the inferred columns conflict with existing columns.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="InferTypedSchema">
      <MemberSignature Language="C#" Value="InferTypedSchema" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode InferTypedSchema = int32(6)" />
      <MemberSignature Language="DocId" Value="F:System.Data.XmlReadMode.InferTypedSchema" />
      <MemberSignature Language="VB.NET" Value="InferTypedSchema" />
      <MemberSignature Language="C++ CLI" Value="InferTypedSchema" />
      <MemberSignature Language="F#" Value="InferTypedSchema = 6" Usage="System.Data.XmlReadMode.InferTypedSchema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary><span data-ttu-id="55fa1-125">모든 인라인 스키마를 무시하고 데이터로부터 강력한 형식의 스키마를 유추한 다음 해당 데이터를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-125">Ignores any inline schema, infers a strongly typed schema from the data, and loads the data.</span></span> <span data-ttu-id="55fa1-126">데이터에서 형식을 유추할 수 없으면 이 형식은 문자열 데이터로 해석됩니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-126">If the type cannot be inferred from the data, it is interpreted as string data.</span></span> <span data-ttu-id="55fa1-127"><see cref="T:System.Data.DataSet" />에 이미 스키마가 있으면 새 테이블을 추가하거나 기존 테이블에 열을 추가하여 현재 스키마를 확장합니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-127">If the <see cref="T:System.Data.DataSet" /> already contains a schema, the current schema is extended, either by adding new tables or by adding columns to existing tables.</span></span> <span data-ttu-id="55fa1-128">유추된 테이블이 이미 있지만 네임스페이스가 다르거나 유추된 열 중에 기존 열과 충돌하는 열이 있으면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-128">An exception is thrown if the inferred table already exists but with a different namespace, or if any of the inferred columns conflict with existing columns.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ReadSchema">
      <MemberSignature Language="C#" Value="ReadSchema" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode ReadSchema = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Data.XmlReadMode.ReadSchema" />
      <MemberSignature Language="VB.NET" Value="ReadSchema" />
      <MemberSignature Language="C++ CLI" Value="ReadSchema" />
      <MemberSignature Language="F#" Value="ReadSchema = 1" Usage="System.Data.XmlReadMode.ReadSchema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="55fa1-129">인라인 스키마를 읽고 데이터를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-129">Reads any inline schema and loads the data.</span></span> <span data-ttu-id="55fa1-130"><see cref="T:System.Data.DataSet" />에 스키마가 이미 있으면 스키마에 새 테이블을 추가할 수 있지만 인라인 스키마의 테이블이 <see cref="T:System.Data.DataSet" />에 이미 있으면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="55fa1-130">If the <see cref="T:System.Data.DataSet" /> already contains schema, new tables may be added to the schema, but an exception is thrown if any tables in the inline schema already exist in the <see cref="T:System.Data.DataSet" />.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>