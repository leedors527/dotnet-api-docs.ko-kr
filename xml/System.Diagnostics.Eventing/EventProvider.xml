<Type Name="EventProvider" FullName="System.Diagnostics.Eventing.EventProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5756a179ccc906802cbe0857cd0e2290e7672285" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57933640" /></Metadata><TypeSignature Language="C#" Value="public class EventProvider : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventProvider extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Eventing.EventProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class EventProvider&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventProvider : IDisposable" />
  <TypeSignature Language="F#" Value="type EventProvider = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>이 클래스를 사용하여 이벤트를 작성할 수 있습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 작성 하는 이벤트를 사용 하는 <xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A> 및 <xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A> 메서드, 이벤트를 정의 해야 합니다; 매니페스트에서 사용 하 여 기록 된 이벤트는 <xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A> 메서드 매니페스트가 필요 하지 않습니다.  
  
 이벤트에는 다음 관리 되는 데이터 형식을 포함할 수 있습니다.  
  
-   bool  
  
-   부울  
  
-   byte  
  
-   char  
  
-   decimal  
  
-   double  
  
-   float  
  
-   GUID  
  
-   int  
  
-   IntPtr  
  
-   long  
  
-   sbyte  
  
-   short  
  
-   string  
  
-   uint  
  
-   UInt64  
  
 매니페스트에 이벤트가 사용 하는 경우는 `Boolean` 형식에 쓸 수 없습니다 사용 하 여 데이터 요소를 `Boolean` 관리 코드에서 데이터 형식입니다. 합니다 `Boolean` 매니페스트의 형식에 4 바이트 값이 필요한 및 `Boolean` 관리 코드에서 데이터 형식이 1 바이트입니다. 대신 사용 해야 합니다는 `int` 데이터 형식 값을 작성할 수 있습니다. 로그인 하려는 경우는 `Boolean` 값, UInt8 매니페스트의 형식을 사용 합니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventProvider (Guid providerGuid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Guid providerGuid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (providerGuid As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventProvider(Guid providerGuid);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.Eventing.EventProvider : Guid -&gt; System.Diagnostics.Eventing.EventProvider" Usage="new System.Diagnostics.Eventing.EventProvider providerGuid" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="providerGuid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="providerGuid">공급자를 고유하게 식별하는 GUID입니다.</param>
        <summary><see cref="T:System.Diagnostics.Eventing.EventProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 공급자를 등록합니다. 완료 되 면 등록을 제거 하려면 호출을 <xref:System.Diagnostics.Eventing.EventProvider.Close%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InsufficientMemoryException">메모리가 부족하여 작업을 완료할 수 없는 경우</exception>
        <exception cref="T:System.PlatformNotSupportedException"><see cref="N:System.Diagnostics.Eventing" /> 네임스페이스의 클래스는 Windows Vista에서만 작동합니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="providerGuid" /> 매개 변수가 null인 경우</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">ETW 하위 시스템에서 오류가 반환된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="eventProvider.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ETW 하위 시스템에서 공급자 등록을 제거하고 관리되지 않는 리소스를 모두 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 리소스를 삭제 하기 위해 시스템을 기다리지 않고 완료 되 면이 메서드를 호출 해야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">ETW 하위 시스템에서 오류가 반환된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateActivityId">
      <MemberSignature Language="C#" Value="public static Guid CreateActivityId ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid CreateActivityId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.CreateActivityId" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateActivityId () As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Guid CreateActivityId();" />
      <MemberSignature Language="F#" Value="static member CreateActivityId : unit -&gt; Guid" Usage="System.Diagnostics.Eventing.EventProvider.CreateActivityId " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>공급자에 대한 고유 작업 식별자를 만듭니다.</summary>
        <returns><see cref="M:System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)" /> 메서드를 호출하여 공급자에 대한 작업 식별자를 설정할 때 사용하는 고유 GUID입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 정적입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="eventProvider.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Diagnostics.Eventing.EventProvider" /> 개체에서 사용하는 리소스를 해제합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="eventProvider.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">이 매개 변수는 관리되지 않는 리소스가 없으므로 이 메서드에서 무시됩니다.</param>
        <summary>이 <see cref="T:System.Diagnostics.Eventing.EventProvider" /> 개체에서 사용하는 리소스를 해제합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~EventProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!EventProvider ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="eventProvider.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>가비지 컬렉션에 의해 인스턴스가 회수되기 전에 리소스를 해제하고 내부 정리를 수행합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLastWriteEventError">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode GetLastWriteEventError ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Diagnostics.Eventing.EventProvider/WriteEventErrorCode GetLastWriteEventError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLastWriteEventError () As EventProvider.WriteEventErrorCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Eventing::EventProvider::WriteEventErrorCode GetLastWriteEventError();" />
      <MemberSignature Language="F#" Value="static member GetLastWriteEventError : unit -&gt; System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode" Usage="System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Eventing.EventProvider+WriteEventErrorCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이벤트 쓰기 실패와 관련된 마지막 오류를 가져옵니다.</summary>
        <returns>이 값을 사용하여 이벤트를 쓰지 못한 원인을 확인할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A>, <xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A>, 및 <xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A> 메서드 이벤트를 작성 하지 않은 경우이 값을 설정 합니다.  
  
 이 메서드는 정적입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsEnabled">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>세션에서 공급자를 활성화했는지 확인합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsEnabled() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEnabled () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEnabled();" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : unit -&gt; bool" Usage="eventProvider.IsEnabled " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>공급자를 활성화하는 데 사용된 수준 및 키워드에 관계없이 세션에서 공급자를 활성화했는지 확인합니다.</summary>
        <returns>세션에서 공급자가 활성화되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 공급자를 세션에서 공급자에 설정 되었는지 확인 하려면이 메서드 호출 하지 않습니다. 단순히 공급자 이벤트를 쓰고 ETW 이벤트 세션에 기록 되는지 여부를 결정 합니다. 공급자는 공급자가 이벤트를 생성할 수 있는 추가 작업을 수행 해야 하는 경우이 함수를 호출 하려고 할 수 있습니다. 이 경우이 함수를 호출 처음 저장할 수 리소스 및 시간.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled (byte level, long keywords);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsEnabled(unsigned int8 level, int64 keywords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEnabled (level As Byte, keywords As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEnabled(System::Byte level, long keywords);" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : byte * int64 -&gt; bool" Usage="eventProvider.IsEnabled (level, keywords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="System.Byte" />
        <Parameter Name="keywords" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="level">이벤트에 포함된 세부 수준입니다.</param>
        <param name="keywords">이벤트 범주를 지정하는 비트 마스크입니다. 이 마스크는 이벤트에 대한 매니페스트에 정의된 키워드 마스크와 같아야 합니다.</param>
        <summary>세션이 공급자로부터 지정된 이벤트를 요청하는지 확인합니다.</summary>
        <returns>세션에서 지정된 이벤트를 요청하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 공급자가 세션을 지정 된 이벤트를 요청 했는지 여부를 확인 하려면이 메서드를 호출 하지 않습니다 일반적으로 단순히 공급자 이벤트를 쓰고 ETW 이벤트 세션에 기록 되는지 여부를 결정 합니다. 공급자는 공급자가 이벤트를 생성할 수 있는 추가 작업을 수행 해야 하는 경우이 함수를 호출 하려고 할 수 있습니다. 이 경우 여부 세션 이벤트를 요청 하는 경우를 결정 하려면 먼저이 함수를 호출할 수 있습니다 저장 리소스 및 시간.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetActivityId">
      <MemberSignature Language="C#" Value="public static void SetActivityId (ref Guid id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetActivityId(valuetype System.Guid&amp; id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetActivityId (ByRef id As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetActivityId(Guid % id);" />
      <MemberSignature Language="F#" Value="static member SetActivityId :  -&gt; unit" Usage="System.Diagnostics.Eventing.EventProvider.SetActivityId id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Guid" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="id"><see cref="M:System.Diagnostics.Eventing.EventProvider.CreateActivityId" /> 메서드에서 반환하는 고유 작업 식별자입니다.</param>
        <summary><see cref="Overload:System.Diagnostics.Eventing.EventProvider.WriteEvent" /> 메서드에 사용되는 현재 작업 식별자를 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 식별자는 스레드 컨텍스트에 저장 됩니다.  
  
 .NET framework 버전 3.5에서에서 사용 했던 설정 하는 참고 합니다 `id` 이 메서드의 매개 변수 및 <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> 동일한 식별자 값에 대 한 속성 값. 그러나 framework 버전 4.0에에서는 <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> 메서드를 자동으로 활동 상관 관계 식별자를 설정 합니다.  
  
 이 메서드는 정적입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteEvent">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이벤트를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 매니페스트를 사용 하 여 이벤트를 정의 하는 경우 이러한 메서드를 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteEvent">
      <MemberSignature Language="C#" Value="public bool WriteEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, params object[] eventPayload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WriteEvent(valuetype System.Diagnostics.Eventing.EventDescriptor&amp; eventDescriptor, object[] eventPayload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteEvent (ByRef eventDescriptor As EventDescriptor, ParamArray eventPayload As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WriteEvent(System::Diagnostics::Eventing::EventDescriptor % eventDescriptor, ... cli::array &lt;System::Object ^&gt; ^ eventPayload);" />
      <MemberSignature Language="F#" Value="member this.WriteEvent :  * obj[] -&gt; bool" Usage="eventProvider.WriteEvent (eventDescriptor, eventPayload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventDescriptor" Type="System.Diagnostics.Eventing.EventDescriptor" RefType="ref" />
        <Parameter Name="eventPayload" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventDescriptor">작성할 이벤트를 식별하는 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" />의 인스턴스입니다.</param>
        <param name="eventPayload">작성할 이벤트 데이터가 들어 있는 개체 배열입니다. 개체는 매니페스트에 지정된 순서대로 배치되어야 합니다. 배열의 최대 크기는 32개체이며, 이 중 문자열은 최대 8개만 사용할 수 있습니다. 이벤트의 최대 데이터 크기는 64KB에서 이벤트 헤더의 크기를 뺀 값으로 제한됩니다. 세션의 버퍼 크기가 더 작고 세션에 이벤트로 확장된 데이터 항목이 포함되어 있는 경우 이벤트 크기도 더 작습니다.  
  
이 매개 변수는 null일 수 있습니다.</param>
        <summary>이벤트를 씁니다. 이벤트 데이터는 개체 배열로 지정됩니다.</summary>
        <returns>이벤트가 작성되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. false인 경우 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 메서드를 호출하여 실패한 원인을 확인할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 하는 경우는 <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> 이벤트의 경우이 메서드는 활동 식별자를 지정 하는 메서드는 스레드 컨텍스트에서 식별자를 검색 하 고 이벤트를 사용 하 여 포함 합니다.  
  
 메서드는 개체의 값을 씁니다 개체 유형이 지원 되지 않으면 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 페이로드에서 메서드. 목록은 지원 되는 개체 형식에 대 한 설명을 참조는 <xref:System.Diagnostics.Eventing.EventProvider> 클래스입니다.  
  
   
  
## Examples  
  
```csharp  
private static Guid providerId = new Guid("{FB33FDA8-45FB-4df0-8A55-EEB4BA88E7E7}");  
  
enum Keyword  
{  
    Read = 0x1,  
    Write = 0x2,  
    Local = 0x4,  
    Remote = 0x8  
}  
  
enum Level  
{  
    Critical = 1,  
    Error,  
    Warning,  
    Information,  
    Verbose  
}  
  
    EventProvider provider = new EventProvider(providerId);  
    EventDescriptor readEvent;  
    string path = @"<PATHGOESHERE>";  
    UInt64 bytesRead = <ASSIGNVALUE>;  
  
    if (provider.IsEnabled(Level.Information, (long)Keyword.Read))  
    {  
        unchecked  
        {  
            readEvent = new EventDescriptor(0x1, 0x0, 0x10, 0x4, 0x0, 0x0, (long)0x8000000000000005);  
        }  
  
        if (!provider.WriteEvent(ref readEvent, new object[] { path, bytesRead }))  
            Console.WriteLine(EventProvider.GetLastWriteEventError());  
    }  
  
    provider.Close();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="eventPayload" /> 매개 변수에 너무 많은 개체나 문자열이 포함된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEvent">
      <MemberSignature Language="C#" Value="public bool WriteEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WriteEvent(valuetype System.Diagnostics.Eventing.EventDescriptor&amp; eventDescriptor, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteEvent (ByRef eventDescriptor As EventDescriptor, data As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WriteEvent(System::Diagnostics::Eventing::EventDescriptor % eventDescriptor, System::String ^ data);" />
      <MemberSignature Language="F#" Value="member this.WriteEvent :  * string -&gt; bool" Usage="eventProvider.WriteEvent (eventDescriptor, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventDescriptor" Type="System.Diagnostics.Eventing.EventDescriptor" RefType="ref" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventDescriptor">작성할 이벤트를 식별하는 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" />의 인스턴스입니다.</param>
        <param name="data">이벤트 데이터로 쓸 문자열입니다.</param>
        <summary>이벤트를 씁니다. 이벤트 데이터는 문자열로 지정됩니다.</summary>
        <returns>이벤트가 작성되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. false인 경우 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 메서드를 호출하여 실패한 원인을 확인할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 하는 경우는 <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> 이벤트의 경우이 메서드는 활동 식별자를 지정 하는 메서드는 스레드 컨텍스트에서 식별자를 검색 하 고 이벤트를 사용 하 여 포함 합니다.  
  
 최대 문자열 길이 이벤트 헤더의 크기를 뺀 값 64KB로 제한 됩니다. 세션의 버퍼 크기가 더 작고 세션에 이벤트로 확장된 데이터 항목이 포함되어 있는 경우 이벤트 크기도 더 작습니다.  
  
   
  
## Examples  
  
```csharp  
private static Guid providerId = new Guid("{FB33FDA8-45FB-4df0-8A55-EEB4BA88E7E7}");  
  
EventProvider provider = new EventProvider(providerId);  
EventDescriptor writeEvent;  
  
if (provider.IsEnabled())  
{  
     unchecked  
     {  
          writeEvent = new EventDescriptor(0x2, 0x0, 0x10, 0x3, 0x0, 0x0, (long)0x8000000000000006);  
     }  
  
     if (!provider.WriteEvent(ref writeEvent, "Write event."))  
          Console.WriteLine(EventProvider.GetLastWriteEventError());  
}  
  
provider.Close();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="data" />이 <see langword="null" />인 경우입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEvent">
      <MemberSignature Language="C#" Value="protected bool WriteEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, int dataCount, IntPtr data);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool WriteEvent(valuetype System.Diagnostics.Eventing.EventDescriptor&amp; eventDescriptor, int32 dataCount, native int data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Function WriteEvent (ByRef eventDescriptor As EventDescriptor, dataCount As Integer, data As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool WriteEvent(System::Diagnostics::Eventing::EventDescriptor % eventDescriptor, int dataCount, IntPtr data);" />
      <MemberSignature Language="F#" Value="member this.WriteEvent :  * int * nativeint -&gt; bool" Usage="eventProvider.WriteEvent (eventDescriptor, dataCount, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventDescriptor" Type="System.Diagnostics.Eventing.EventDescriptor" RefType="ref" />
        <Parameter Name="dataCount" Type="System.Int32" />
        <Parameter Name="data" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="eventDescriptor">작성할 이벤트를 식별하는 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" />의 인스턴스입니다.</param>
        <param name="dataCount"><paramref name="data" /> 매개 변수가 가리키는 이벤트 데이터의 크기입니다. 이벤트 데이터의 최대 크기는 64KB에서 이벤트 헤더의 크기를 뺀 값으로 제한됩니다. 세션의 버퍼 크기가 더 작고 세션에 이벤트로 확장된 데이터 항목이 포함되어 있는 경우 이벤트 크기도 더 작습니다.</param>
        <param name="data">작성할 이벤트 데이터에 대한 포인터입니다.</param>
        <summary>이벤트를 씁니다. 이벤트 데이터는 메모리 블록으로 지정됩니다.</summary>
        <returns>이벤트가 작성되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. false인 경우 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 메서드를 호출하여 실패한 원인을 확인할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 하는 경우는 <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> 이벤트의 경우이 메서드는 활동 식별자를 지정 하는 메서드는 스레드 컨텍스트에서 식별자를 검색 하 고 이벤트를 사용 하 여 포함 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteMessageEvent">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>문자열 데이터가 포함된 이벤트를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이러한 메서드는 이벤트 매니페스트를 필요 하지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteMessageEvent">
      <MemberSignature Language="C#" Value="public bool WriteMessageEvent (string eventMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WriteMessageEvent(string eventMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteMessageEvent (eventMessage As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WriteMessageEvent(System::String ^ eventMessage);" />
      <MemberSignature Language="F#" Value="member this.WriteMessageEvent : string -&gt; bool" Usage="eventProvider.WriteMessageEvent eventMessage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventMessage">이벤트 데이터로 쓸 문자열입니다.</param>
        <summary>문자열 데이터가 포함된 이벤트를 씁니다.</summary>
        <returns>이벤트가 작성되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. false인 경우 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 메서드를 호출하여 실패한 원인을 확인할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 최대 문자열 길이 이벤트 헤더의 크기를 뺀 값 64KB로 제한 됩니다. 세션의 버퍼 크기가 더 작고 세션에 이벤트로 확장된 데이터 항목이 포함되어 있는 경우 이벤트 크기도 더 작습니다.  
  
   
  
## Examples  
  
```csharp  
if (!provider.WriteMessageEvent("Event string."))  
    Console.WriteLine(EventProvider.GetLastWriteEventError());  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="eventMessage" />이 <see langword="null" />인 경우입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteMessageEvent">
      <MemberSignature Language="C#" Value="public bool WriteMessageEvent (string eventMessage, byte eventLevel, long eventKeywords);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WriteMessageEvent(string eventMessage, unsigned int8 eventLevel, int64 eventKeywords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteMessageEvent (eventMessage As String, eventLevel As Byte, eventKeywords As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WriteMessageEvent(System::String ^ eventMessage, System::Byte eventLevel, long eventKeywords);" />
      <MemberSignature Language="F#" Value="member this.WriteMessageEvent : string * byte * int64 -&gt; bool" Usage="eventProvider.WriteMessageEvent (eventMessage, eventLevel, eventKeywords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventMessage" Type="System.String" />
        <Parameter Name="eventLevel" Type="System.Byte" />
        <Parameter Name="eventKeywords" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="eventMessage">이벤트 데이터로 쓸 문자열입니다.</param>
        <param name="eventLevel">이벤트에 포함된 세부 수준입니다. 공급자가 매니페스트를 사용하여 이벤트를 정의하는 경우 이 값을 매니페스트에 정의된 수준과 동일하게 설정해야 합니다.</param>
        <param name="eventKeywords">이벤트 범주를 지정하는 비트 마스크입니다. 공급자가 매니페스트를 사용하여 이벤트를 정의하는 경우 이 값을 매니페스트에 정의된 키워드 마스크와 동일하게 설정해야 합니다.</param>
        <summary>세션이 요청한 이벤트가 수준 및 키워드 값과 일치하는 경우 문자열 데이터가 들어 있는 이벤트를 씁니다.</summary>
        <returns>이벤트가 작성되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. false인 경우 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 메서드를 호출하여 실패한 원인을 확인할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 최대 문자열 길이 이벤트 헤더의 크기를 뺀 값 64KB로 제한 됩니다. 세션의 버퍼 크기가 더 작고 세션에 이벤트로 확장된 데이터 항목이 포함되어 있는 경우 이벤트 크기도 더 작습니다.  
  
   
  
## Examples  
  
```csharp  
// Calling this method with level and keyword set to zero is the same  
// as calling WriteMessageEvent(string); the event is always written.  
if (!provider.WriteMessageEvent("Event string.", 0, 0))  
    Console.WriteLine(EventProvider.GetLastWriteEventError());  
  
// Event is written if the level value of the session is less than or equal to 3, and bit 1 of the session  
// keyword bit-mask is set.  
if (!provider.WriteMessageEvent("Event string.", 3, 2))  
    Console.WriteLine(EventProvider.GetLastWriteEventError());  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="eventMessage" />이 <see langword="null" />인 경우입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteTransferEvent">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>종단 간 시나리오에서 이벤트를 추적할 때 이벤트를 서로 링크합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteTransferEvent">
      <MemberSignature Language="C#" Value="public bool WriteTransferEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, Guid relatedActivityId, params object[] eventPayload);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WriteTransferEvent(valuetype System.Diagnostics.Eventing.EventDescriptor&amp; eventDescriptor, valuetype System.Guid relatedActivityId, object[] eventPayload) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteTransferEvent (ByRef eventDescriptor As EventDescriptor, relatedActivityId As Guid, ParamArray eventPayload As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WriteTransferEvent(System::Diagnostics::Eventing::EventDescriptor % eventDescriptor, Guid relatedActivityId, ... cli::array &lt;System::Object ^&gt; ^ eventPayload);" />
      <MemberSignature Language="F#" Value="member this.WriteTransferEvent :  * Guid * obj[] -&gt; bool" Usage="eventProvider.WriteTransferEvent (eventDescriptor, relatedActivityId, eventPayload)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventDescriptor" Type="System.Diagnostics.Eventing.EventDescriptor" RefType="ref" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
        <Parameter Name="eventPayload" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventDescriptor">작성할 이벤트를 식별하는 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" />의 인스턴스입니다.</param>
        <param name="relatedActivityId">이전 구성 요소에서 가져온 작업 식별자입니다. 이 매개 변수를 사용하여 구성 요소의 이벤트를 이전 구성 요소의 이벤트에 링크할 수 있습니다.</param>
        <param name="eventPayload">작성할 이벤트 데이터가 들어 있는 개체 배열입니다. 데이터는 매니페스트에 지정된 순서대로 배치되어야 합니다. 배열의 최대 크기는 32개체이며, 이 중 문자열은 최대 8개만 사용할 수 있습니다. 이벤트의 최대 데이터 크기는 64KB에서 이벤트 헤더의 크기를 뺀 값으로 제한됩니다. 세션의 버퍼 크기가 더 작고 세션에 이벤트로 확장된 데이터 항목이 포함되어 있는 경우 이벤트 크기도 더 작습니다.</param>
        <summary>종단 간 시나리오에서 이벤트를 추적할 때 이벤트를 서로 링크합니다. 이벤트 데이터는 개체 배열로 지정됩니다.</summary>
        <returns>이벤트가 작성되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. false인 경우 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 메서드를 호출하여 실패한 원인을 확인할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드를 스레드 컨텍스트에서 설정 된 작업 ID를 사용 하 여이 구성 요소를 식별 합니다. 작업 ID를 설정 하려면 호출을 <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> 메서드.  
  
 사용 하는 경우는 <xref:System.Diagnostics.Trace> 클래스를 사용 하지 않는 것을 <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> 활동 ID를 지정 하는 방법 대신, 액세스를 <xref:System.Diagnostics.Trace.CorrelationManager%2A> 가져올 속성을 <xref:System.Diagnostics.CorrelationManager> 개체입니다. 그런 다음 설정의 <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> 속성 작업 id와 같습니다. 설정 해야 합니다 `relatedActivityId` 에 <xref:System.Diagnostics.CorrelationManager.ActivityId%2A> 값입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="eventPayload" />에 너무 많은 개체나 문자열이 포함된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTransferEvent">
      <MemberSignature Language="C#" Value="protected bool WriteTransferEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, Guid relatedActivityId, int dataCount, IntPtr data);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool WriteTransferEvent(valuetype System.Diagnostics.Eventing.EventDescriptor&amp; eventDescriptor, valuetype System.Guid relatedActivityId, int32 dataCount, native int data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Function WriteTransferEvent (ByRef eventDescriptor As EventDescriptor, relatedActivityId As Guid, dataCount As Integer, data As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool WriteTransferEvent(System::Diagnostics::Eventing::EventDescriptor % eventDescriptor, Guid relatedActivityId, int dataCount, IntPtr data);" />
      <MemberSignature Language="F#" Value="member this.WriteTransferEvent :  * Guid * int * nativeint -&gt; bool" Usage="eventProvider.WriteTransferEvent (eventDescriptor, relatedActivityId, dataCount, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventDescriptor" Type="System.Diagnostics.Eventing.EventDescriptor" RefType="ref" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
        <Parameter Name="dataCount" Type="System.Int32" />
        <Parameter Name="data" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="eventDescriptor">작성할 이벤트를 식별하는 <see cref="T:System.Diagnostics.Eventing.EventDescriptor" />의 인스턴스입니다.</param>
        <param name="relatedActivityId">이전 구성 요소에서 가져온 작업 식별자입니다. 이 매개 변수를 사용하여 구성 요소의 이벤트를 이전 구성 요소의 이벤트에 링크할 수 있습니다.</param>
        <param name="dataCount"><paramref name="data" /> 매개 변수가 가리키는 이벤트 데이터의 크기입니다. 이벤트 데이터의 최대 크기는 64KB에서 이벤트 헤더의 크기를 뺀 값으로 제한됩니다. 세션의 버퍼 크기가 더 작고 세션에 이벤트로 확장된 데이터 항목이 포함되어 있는 경우 이벤트 크기도 더 작습니다.</param>
        <param name="data">작성할 이벤트 데이터에 대한 포인터입니다.</param>
        <summary>종단 간 시나리오에서 이벤트를 추적할 때 이벤트를 서로 링크합니다. 이벤트 데이터는 메모리 블록으로 지정됩니다.</summary>
        <returns>이벤트가 작성되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. false인 경우 <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> 메서드를 호출하여 실패한 원인을 확인할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드를 스레드 컨텍스트에서 설정 된 작업 ID를 사용 하 여이 구성 요소를 식별 합니다. 작업 ID를 설정 하려면 호출을 <xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>