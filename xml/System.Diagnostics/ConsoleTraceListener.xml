<Type Name="ConsoleTraceListener" FullName="System.Diagnostics.ConsoleTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="653b0096816140df8e14c31875fab5b4d202d7ef" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56362361" /></Metadata><TypeSignature Language="C#" Value="public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConsoleTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConsoleTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsoleTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type ConsoleTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>추적 또는 디버깅 출력을 표준 출력 또는 표준 오류 스트림으로 보냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Diagnostics.ConsoleTraceListener> 추적 및 디버깅 메시지를 콘솔에 작성 하는 클래스입니다. 초기화할 수 있습니다는 <xref:System.Diagnostics.ConsoleTraceListener> 추적 메시지를 작성 하는 개체를 <xref:System.Console.Out%2A?displayProperty=nameWithType> 스트림 또는 <xref:System.Console.Error%2A?displayProperty=nameWithType> 스트림.  
  
> [!IMPORTANT]
>  <xref:System.IDisposable> 인터페이스 형식을 사용 하 여 마쳤으면 직접 또는 간접적으로의 삭제 해야 있습니다. 직접 형식의 dispose 호출 해당 <xref:System.IDisposable.Dispose%2A> 의 메서드를`try` / `catch` 블록입니다. 삭제 하지 직접, 언어 구문 같은 사용 `using` (C#에서) 또는 `Using` (Visual Basic에서는). 자세한 내용은 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하세요.를 <xref:System.IDisposable> 인터페이스 항목입니다.  
  
 추적 및 디버깅 출력을 사용 하도록 설정 합니다 <xref:System.Diagnostics.ConsoleTraceListener> 메시지가 기록 됩니다 지정 된 <xref:System.Console?displayProperty=nameWithType> 스트림을 사용 하 여 메시지 작성 하는 방법은 비슷합니다 합니다 <xref:System.Console.Write%2A?displayProperty=nameWithType> 또는 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 메서드. 콘솔 애플리케이션에서는 합니다 <xref:System.Console?displayProperty=nameWithType> 출력 및 오류 스트림을 기존 콘솔 창에 메시지를 작성 하거나 쓸 스트림을 리디렉션할 수 있습니다는 <xref:System.IO.TextWriter?displayProperty=nameWithType> 인스턴스.  
  
> [!NOTE]
>  Windows 기반 애플리케이션에서와 같이 콘솔 존재 하지 않는 경우 메시지를 콘솔에 표시 되지 않습니다.  
  
 추가 <xref:System.Diagnostics.ConsoleTraceListener> 개체를 해당 <xref:System.Diagnostics.Trace.Listeners%2A> 통해 기록 된 메시지를 원하는 경우 컬렉션 <xref:System.Diagnostics.Trace>를 <xref:System.Diagnostics.TraceSource>, 또는 <xref:System.Diagnostics.Debug> 콘솔에 기록 되도록 합니다. 또한 사용 하 여 콘솔에 직접 메시지를 작성할 수 있습니다 합니다 <xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType> 또는 <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType> 메서드.  
  
> [!NOTE]
>  <xref:System.Diagnostics.Debug> 하 고 <xref:System.Diagnostics.Trace> 클래스에 동일한 공유 <xref:System.Diagnostics.TraceListenerCollection> 각각을 통해 액세스 하는 컬렉션 `Listeners` 속성입니다. 추가 하는 경우는 <xref:System.Diagnostics.ConsoleTraceListener> 같은 수신기를 자동으로 사용 하는 다른 클래스가 이러한 클래스 중 하나를 사용 하 여 컬렉션 개체입니다.  
  
 대부분의 컴파일러는 추적을 사용 및 조건부 컴파일 플래그를 통해 출력을 디버그 합니다. 추적 또는 디버깅을 통해 기록 된 메시지를 사용 하지 않는 경우는 <xref:System.Diagnostics.Debug?displayProperty=nameWithType> 고 <xref:System.Diagnostics.Trace?displayProperty=nameWithType> 클래스는 실질적으로 무시 됩니다. 특정; 컴파일러 및 디버그 출력을 추적을 사용 하는 구문은 C# 또는 Visual Basic 이외의 컴파일러를 사용 하면 컴파일러에 대 한 설명서를 참조 합니다.  
  
-   C# 디버깅을 사용 하려면 추가 합니다 **/d: debug**플래그를 추가할 수 있습니다 하거나 코드를 컴파일할 때 컴파일러 명령줄 **#define 디버그** 파일의 맨 위로 이동 합니다. Visual Basic의 경우 추가 합니다 **/d: debug = True** 컴파일러 명령줄 플래그입니다.  
  
-   C#에서 추적을 사용 하려면 추가 합니다 **/d:TRACE** 코드를 컴파일할 때 컴파일러 명령줄 플래그 **#define 추적** 파일의 맨 위로 이동 합니다. Visual Basic의 경우 추가 합니다 **/d:TRACE = True** 컴파일러 명령줄 플래그입니다.  
  
 추가할 수 있습니다는 <xref:System.Diagnostics.ConsoleTraceListener> 개체를 <xref:System.Diagnostics.Trace.Listeners%2A> 코드의 컬렉션에 추가할 수 있습니다를 <xref:System.Diagnostics.ConsoleTraceListener> 개체를 <xref:System.Diagnostics.Trace.Listeners%2A> 애플리케이션 구성 파일을 통해 컬렉션. 추가 된 <xref:System.Diagnostics.ConsoleTraceListener> 특정 코드 섹션 또는 실행 경로 대 한 메시지를 작성 하기 위해 코드에는 개체입니다. 추가 된 <xref:System.Diagnostics.ConsoleTraceListener> 개체 모든 추적 및 디버그를 보내기 위해 애플리케이션 구성 파일에서 메시지를 콘솔 애플리케이션을 실행 하는 동안.  
  
 추적을 작성 하 고 코드의 특정 섹션에 대 한 콘솔에 메시지를 디버그 하려면 초기화를 <xref:System.Diagnostics.ConsoleTraceListener> 개체에 추가 하 여 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션입니다. 사용 하 여 메시지를 포함 하는 코드 부분을 계측 합니다 <xref:System.Diagnostics.Trace> 또는 <xref:System.Diagnostics.Debug> 클래스입니다. 코드 섹션의 끝을 제거 합니다 <xref:System.Diagnostics.ConsoleTraceListener> 에서 개체를 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션과 호출을 <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> 메서드를는 <xref:System.Diagnostics.ConsoleTraceListener>합니다.  
  
 모든 추적을 직접 애플리케이션을 실행 하는 동안 디버그 콘솔에 메시지 추가 <xref:System.Diagnostics.ConsoleTraceListener> 애플리케이션 구성 파일에는 개체입니다. 애플리케이션의 이름에 해당 하는 구성 파일 또는 app.config 파일의 경우 편집을 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] 프로젝트입니다. 이 파일의 요소를 삽입 한 <xref:System.Diagnostics.ConsoleTraceListener>합니다.  
  
 다음 예제에서는 <xref:System.Diagnostics.ConsoleTraceListener> 개체인 `configConsoleListener` 에 <xref:System.Diagnostics.Trace.Listeners%2A> 컬렉션입니다.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="configConsoleListener"            type="System.Diagnostics.ConsoleTraceListener" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
 </configuration>  
```  
  
 애플리케이션 구성 파일에 추적 수신기를 추가 하는 방법에 대 한 자세한 내용은 참조 하세요 [&lt;수신기&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 두 개의 공용 메서드를 사용 하 여 클래스로 구성 된 콘솔 애플리케이션을 구현 합니다.  
  
 `Main` 메서드는 명령줄 인수를 검사 하 고 추적 출력을 표준 오류 스트림 또는 표준 출력 스트림에 전송 해야 하는 경우를 결정 합니다. `Main` 만들고 초기화 된 <xref:System.Diagnostics.ConsoleTraceListener> 지정 된 개체 <xref:System.Console> 스트림을 출력 하 고이 개체의 추적 수신기 컬렉션에 추가 합니다. 그런 다음 호출을 `WriteEnvironmentInfoToTrace` 메서드는 실행 환경 및 추적 출력에 추적 수신기 구성에 대 한 세부 정보를 기록 합니다.  
  
 예제 애플리케이션을 실행 환경 및 추적 구성 세부 정보를 통해 지정 된 콘솔 출력 스트림에 기록 됩니다는 <xref:System.Diagnostics.ConsoleTraceListener> 개체입니다.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#1)]
 [!code-vb[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Console" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Diagnostics.ConsoleTraceListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>표준 출력 스트림에 쓴 추적 출력을 사용하여 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 <xref:System.Diagnostics.ConsoleTraceListener> 메시지를 쓸 개체를 <xref:System.Console.Out%2A?displayProperty=nameWithType> 스트림 합니다. 해당 <xref:System.Diagnostics.TraceListener.Name%2A> 속성은 빈 문자열로 초기화 됩니다 ("").  
  
   
  
## Examples  
 다음 코드 예제에서는 초기화를 <xref:System.Diagnostics.ConsoleTraceListener> 지정 된 개체 <xref:System.Console> 출력 스트림에 추적 수신기 컬렉션에 추가 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.ConsoleTraceListener> 클래스입니다.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener (bool useErrorStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool useErrorStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (useErrorStream As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener(bool useErrorStream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.ConsoleTraceListener : bool -&gt; System.Diagnostics.ConsoleTraceListener" Usage="new System.Diagnostics.ConsoleTraceListener useErrorStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="useErrorStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useErrorStream">추적 및 디버깅 출력을 표준 오류 스트림에 쓰는 경우 <see langword="true" />이고, 표준 출력 스트림에 쓰는 경우 <see langword="false" />입니다.</param>
        <summary>추적 출력을 표준 출력 스트림이나 표준 오류 스트림에 쓰는 옵션을 사용하여 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 <xref:System.Diagnostics.ConsoleTraceListener> 메시지를 쓸 개체를 <xref:System.Console.Out%2A?displayProperty=nameWithType> 또는 <xref:System.Console.Error%2A?displayProperty=nameWithType> 스트림 합니다. 해당 <xref:System.Diagnostics.TraceListener.Name%2A> 속성은 빈 문자열로 초기화 됩니다 ("").  
  
   
  
## Examples  
 다음 코드 예제에서는 초기화를 <xref:System.Diagnostics.ConsoleTraceListener> 지정 된 개체 <xref:System.Console> 출력 스트림에 추적 수신기 컬렉션에 추가 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.ConsoleTraceListener> 클래스입니다.  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Console" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="consoleTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 추적 수신기에 지정된 스트림에 대한 출력을 닫습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 대 한 지정 된 스트림에 <xref:System.Diagnostics.ConsoleTraceListener> 인스턴스 (중 하나는 <xref:System.Console.Out%2A?displayProperty=nameWithType> 스트림 또는 <xref:System.Console.Error%2A?displayProperty=nameWithType> 스트림) 닫혀 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>