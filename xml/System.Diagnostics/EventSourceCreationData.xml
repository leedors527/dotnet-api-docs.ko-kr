<Type Name="EventSourceCreationData" FullName="System.Diagnostics.EventSourceCreationData">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c40013fc396f54e9d0337d11e759ad8030d3f940" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56769634" /></Metadata><TypeSignature Language="C#" Value="public class EventSourceCreationData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSourceCreationData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSourceCreationData" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSourceCreationData" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSourceCreationData" />
  <TypeSignature Language="F#" Value="type EventSourceCreationData = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>로컬 컴퓨터 또는 원격 컴퓨터에서 이벤트 로그 소스를 만드는 데 사용되는 구성 설정을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Diagnostics.EventSourceCreationData> 지역화 된 엔트리를 이벤트 로그에 쓰기 위한 새 소스를 구성 하는 클래스입니다. 이벤트 로그에서 읽는 데이 클래스를 사용 하는 데 필요한 것입니다.  
  
 이 클래스에는 새 이벤트 소스와 관련된 된 이벤트 로그에 대 한 구성 설정을 정의합니다. 연결 된 이벤트 로그 로컬 컴퓨터나 원격 컴퓨터에 있을 수 있습니다. 로컬 컴퓨터의 기존 또는 새 이벤트 로그에 새 소스를 만들려면 설정를 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> 및 <xref:System.Diagnostics.EventSourceCreationData.Source%2A> 의 속성을 <xref:System.Diagnostics.EventSourceCreationData> 호출는 <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> 메서드. 이 메서드가 만드는 이벤트 원본에서 지정 하는 <xref:System.Diagnostics.EventSourceCreationData.Source%2A> 에 지정 된 이벤트 로그에 속성 및 레지스터 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>합니다. 이 동작은 사용 하 여 비슷합니다는 <xref:System.Diagnostics.EventLogInstaller> 를 이벤트 로그의 이벤트 소스를 등록 합니다.  
  
 사용 된 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 및 <xref:System.Diagnostics.EventLog.WriteEntry%2A> 이벤트 로그에 이벤트를 기록 하는 방법입니다. 이벤트를 작성 하는 이벤트 원본을 지정 해야 합니다. 만들기 및 소스를 사용 하 여 첫 번째 항목을 작성 하기 전에 이벤트 소스를 구성 해야 합니다.  
  
 애플리케이션을 설치 하는 동안 새 이벤트 원본을 만듭니다. 이렇게 하면 등록 된 이벤트 소스 목록을 새로 고치고 해당 구성에 운영 체제 있습니다. 운영 체제에서 이벤트 소스 목록을 새로 고치지 않은 경우 쓰려고 하면 새 원본 사용 하는 이벤트는 쓰기 작업이 실패 합니다. 사용 하 여 새 소스를 구성할 수 있습니다는 <xref:System.Diagnostics.EventLogInstaller>를 사용 하 여 또는 <xref:System.Diagnostics.EventLog.CreateEventSource%2A> 메서드. 새 이벤트 원본을 만들려면 컴퓨터에서 관리자 권한이 있어야 합니다.  
  
 기존 이벤트 로그 또는 새 이벤트 로그의 이벤트 소스를 만들 수 있습니다. 새 이벤트 로그에 대 한 새 소스를 만들면 해당 로그에 대 한 소스를 등록 하는 시스템 있지만 첫 번째 항목에 기록할 때 까지는 로그가 만들어지지 않습니다.  
  
 각 소스에서는 한 번에 하나의 이벤트 로그에 쓸 수 있습니다만 그러나 애플리케이션이 여러 이벤트 로그에 쓸 여러 원본을 사용할 수 있습니다. 예를 들어, 애플리케이션에 다른 이벤트 로그 또는 다른 리소스 파일에 대해 구성 된 여러 소스가 해야 합니다.  
  
 기존 원본의 구성 세부 정보를 변경 하려면 소스를 삭제 하며 사용 하 여 새 구성을 만들어야 합니다. 다른 애플리케이션이 나 구성 요소는 기존 소스를 사용 하는 경우 기존 소스를 삭제 하는 대신 업데이트 된 구성을 사용 하 여 새 소스를 만듭니다.  
  
 이벤트 범주 및 메시지 문자열에 대 한 지역화 된 리소스를 사용 하 여 이벤트 소스를 등록할 수 있습니다. 애플리케이션 실제 문자열을 지정 하는 대신 리소스 식별자를 사용 하 여 이벤트 로그 엔트리를 쓸 수 있습니다. 이벤트 뷰어를 찾아 현재 언어 설정에 따라 지역화 된 리소스 파일에서 해당 문자열을 표시할 리소스 식별자를 사용 합니다. 이벤트 범주, 메시지 및 매개 변수 삽입 문자열에 대 한 별도 파일을 등록할 수 있습니다 또는 세 가지 유형의 문자열 모두에 같은 리소스 파일을 등록할 수 있습니다. 사용 합니다 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>를 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, 및 <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> 이벤트 로그에 지역화 된 엔트리를 쓸 원본을 구성 하는 속성입니다. 애플리케이션 이벤트 로그에 직접 문자열 값을 쓰는, 이러한 속성을 설정할 필요가 없습니다.  
  
 원본 또는 지역화 된 엔트리를 쓰기 위한 직접 문자열을 작성 하기 위한 구성 되어야 합니다. <xref:System.Diagnostics.EventLog.WriteEntry%2A> 지역화할 수 있는 메시지 리소스 파일을 사용 하지 않는; 메서드는 이벤트 로그에 직접 지정된 된 문자열을 씁니다. 사용 된 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 지역화 된 메시지 리소스 파일을 사용 하 여 이벤트를 작성 하는 방법입니다.  
  
 애플리케이션 리소스 식별자와 문자열 값을 사용 하 여 항목을 기록 하는 경우 두 개의 별도 소스를 등록 해야 합니다. 예를 들어, 리소스 파일을 한 원본을 구성 하 고 해당 소스를 사용 하 여는 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 메서드를 이벤트 로그에 리소스 식별자를 사용 하 여 항목을 씁니다. 그런 다음 리소스 파일 없이 다른 소스를 만들고 해당 소스를 사용 합니다 <xref:System.Diagnostics.EventLog.WriteEntry%2A> 메서드를 해당 원본을 사용 하 여 이벤트 로그에 직접 문자열을 씁니다.  
  
   
  
## Examples  
 다음 코드 예제는 명령줄 인수에서 이벤트 소스에 대 한 구성 속성을 설정합니다. 입력된 인수는 이벤트 원본 이름, 이벤트 로그 이름, 컴퓨터 이름 및 이벤트 메시지 리소스 파일을 지정합니다. 코드 예제에서는 원본 기존 이벤트 원본에 충돌 하지 않는 한 다음 지정된 된 이벤트 로그에 대 한 새 이벤트 원본을 만듭니다 되었는지 확인 합니다.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#1)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#1)]
 [!code-vb[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">모든 멤버를 호출 하기 위한 <see cref="T:System.Diagnostics.EventSourceCreationData" /> 완전 신뢰를 사용 하 여 합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSourceCreationData (string source, string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string source, string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (source As String, logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSourceCreationData(System::String ^ source, System::String ^ logName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSourceCreationData : string * string -&gt; System.Diagnostics.EventSourceCreationData" Usage="new System.Diagnostics.EventSourceCreationData (source, logName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">엔트리 소스로 이벤트 로그에 등록할 이름입니다.</param>
        <param name="logName">소스 엔트리를 쓸 로그의 이름입니다.</param>
        <summary>지정된 이벤트 소스와 이벤트 로그 이름을 사용하여 <see cref="T:System.Diagnostics.EventSourceCreationData" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 쓸 항목 이벤트 로그, 이벤트 로그의 이벤트 소스를 먼저 만들어야 합니다. 새 소스를 등록 하려면 초기화를 <xref:System.Diagnostics.EventSourceCreationData> 인스턴스를 애플리케이션 및 호출에 대해 인스턴스 속성을 구성 합니다 <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> 메서드. 원본이 등록 되 면 항목을 사용 하 여 원본에서 작성할 수 있습니다 합니다 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 또는 <xref:System.Diagnostics.EventLog.WriteEntry%2A> 메서드.  
  
 이벤트 범주 및 메시지 문자열에 대 한 지역화 된 리소스를 사용 하 여 이벤트 소스를 등록할 수 있습니다. 애플리케이션 실제 문자열을 지정 하는 대신 리소스 식별자를 사용 하 여 이벤트 로그 엔트리를 쓸 수 있습니다. 이벤트 뷰어를 찾아 현재 언어 설정에 따라 지역화 된 리소스 파일에서 해당 문자열을 표시할 리소스 식별자를 사용 합니다. 이벤트 범주, 메시지 및 매개 변수 삽입 문자열에 대 한 별도 파일을 등록할 수 있습니다 또는 세 가지 유형의 문자열 모두에 같은 리소스 파일을 등록할 수 있습니다. 사용 합니다 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>를 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, 및 <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> 이벤트 로그에 지역화 된 엔트리를 쓸 원본을 구성 하는 속성입니다. 애플리케이션 이벤트 로그에 직접 문자열 값을 쓰는, 이러한 속성을 설정할 필요가 없습니다.  
  
 원본 또는 지역화 된 엔트리를 쓰기 위한 직접 문자열을 작성 하기 위한 구성 되어야 합니다. 애플리케이션 리소스 식별자와 문자열 값을 사용 하 여 항목을 기록 하는 경우 두 개의 별도 소스를 등록 해야 합니다. 예를 들어, 리소스 파일을 한 원본을 구성 하 고 해당 소스를 사용 하 여는 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 메서드를 이벤트 로그에 리소스 식별자를 사용 하 여 항목을 씁니다. 그런 다음 리소스 파일 없이 다른 소스를 만들고 해당 소스를 사용 합니다 <xref:System.Diagnostics.EventLog.WriteEntry%2A> 메서드를 이벤트 로그를 직접 문자열을 씁니다.  
  
 다음 테이블에 대 한 초기 속성 값이 표시는 <xref:System.Diagnostics.EventSourceCreationData>합니다.  
  
|속성|초기 값|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventSourceCreationData.Source%2A>|`source` 매개 변수입니다.|  
|<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>|`logName` 매개 변수입니다.|  
|<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>|로컬 컴퓨터 (".").|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>|0|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>|`null`(Visual Basic의 경우 `Nothing`)|  
|<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>|`null`(Visual Basic의 경우 `Nothing`)|  
|<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>|`null`(Visual Basic의 경우 `Nothing`)|  
  
   
  
## Examples  
 다음 코드 예제에서는 라는 이벤트 소스가 있는지 여부를 결정 `SampleApplicationSource` 로컬 컴퓨터에 등록 됩니다. 이벤트 원본이 존재 하지 않는 경우이 예제에서는 소스의 메시지 리소스 파일을 설정 하 고 새 이벤트 원본을 만듭니다. 코드 예제에서 리소스 식별자 값을 사용 하 여 이벤트 로그의 지역화 된 표시 이름을 설정 하는 마지막으로, `DisplayNameMsgId` 및 리소스 파일 경로 `messageFile`입니다.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 코드 예제에서는 리소스 라이브러리 EventLogMsgs.dll 내장 다음 메시지 텍스트 파일을 사용 합니다. 메시지 텍스트 파일은 메시지 리소스 파일 생성 되는 원본. 메시지 텍스트 파일의 리소스 식별자와 범주, 이벤트 메시지 및 매개 변수 삽입 문자열에 대 한 텍스트를 정의합니다.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">모든 멤버를 호출 하기 위한 <see cref="T:System.Diagnostics.EventSourceCreationData" /> 완전 신뢰를 사용 하 여 합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.LogName" />
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>범주 리소스 파일에서 범주 수를 가져오거나 설정합니다.</summary>
        <value>범주 리소스 파일에 있는 범주 수입니다. 기본값은 0입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> 및 <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> 지역화 된 범주 문자열을 사용 하 여 이벤트를 작성 하는 속성입니다. 이벤트 뷰어에서 이벤트를 작성 하는 경우 범주를 제공 하는 경우 이벤트 항목에 대 한 범주를 표시 합니다. 이벤트 로그 범주는 이벤트를 필터링 하거나 이벤트에 대 한 추가 정보를 제공 하는 애플리케이션 정의 문자열입니다. 예를 들어, 애플리케이션 다양 한 구성 요소 또는 다른 작업에 대 한 별도 범주를 정의할 수 있습니다.  
  
 이벤트 범주는 선택 사항입니다. 애플리케이션 범주를 사용 하지 않는 경우 설정 하지 않으면 합니다 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> 고 <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> 속성입니다.  
  
 에 있는 Platform SDK 설명서의 "메시지 컴파일러" 항목을 참조 하는 이벤트 메시지를 정의 하 고 이벤트 리소스 파일을 작성 하는 방법에 대 한 세부 정보에 대 한 [ http://msdn.microsoft.com ](https://msdn.microsoft.com/)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 라는 이벤트 소스가 있는지 여부를 결정 `SampleApplicationSource` 로컬 컴퓨터에 등록 됩니다. 이벤트 원본이 존재 하지 않는 경우이 예제에서는 소스의 메시지 리소스 파일을 설정 하 고 새 이벤트 원본을 만듭니다. 코드 예제에서 리소스 식별자 값을 사용 하 여 이벤트 로그의 지역화 된 표시 이름을 설정 하는 마지막으로, `DisplayNameMsgId` 및 리소스 파일 경로 `messageFile`입니다.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 코드 예제에서는 리소스 라이브러리 EventLogMsgs.dll 내장 다음 메시지 텍스트 파일을 사용 합니다. 메시지 텍스트 파일은 메시지 리소스 파일 생성 되는 원본. 메시지 텍스트 파일의 리소스 식별자와 범주, 이벤트 메시지 및 매개 변수 삽입 문자열에 대 한 텍스트를 정의합니다.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">속성이 음의 값이나 <see cref="F:System.UInt16.MaxValue" />보다 큰 값으로 설정된 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">모든 멤버를 호출 하기 위한 <see cref="T:System.Diagnostics.EventSourceCreationData" /> 완전 신뢰를 사용 하 여 합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>소스에 대한 범주 문자열이 들어 있는 리소스 파일의 경로를 가져오거나 설정합니다.</summary>
        <value>범주 리소스 파일의 경로입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> 및 <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> 지역화 된 범주 문자열을 사용 하 여 이벤트를 작성 하는 속성입니다. 이벤트 뷰어에서 이벤트를 작성 하는 경우 범주를 제공 하는 경우 이벤트 항목에 대 한 범주를 표시 합니다. 이벤트 로그 범주는 이벤트를 필터링 하거나 이벤트에 대 한 추가 정보를 제공 하는 애플리케이션 정의 문자열입니다. 예를 들어, 애플리케이션 다양 한 구성 요소 또는 다른 작업에 대 한 별도 범주를 정의할 수 있습니다.  
  
 이벤트 범주는 선택 사항입니다. 애플리케이션 범주를 사용 하지 않는 경우 설정 하지 않으면 합니다 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> 고 <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> 속성입니다.  
  
 에 있는 Platform SDK 설명서의 "메시지 컴파일러" 항목을 참조 하는 이벤트 메시지를 정의 하 고 이벤트 리소스 파일을 작성 하는 방법에 대 한 세부 정보에 대 한 [ http://msdn.microsoft.com ](https://msdn.microsoft.com/)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 라는 이벤트 소스가 있는지 여부를 결정 `SampleApplicationSource` 로컬 컴퓨터에 등록 됩니다. 이벤트 원본이 존재 하지 않는 경우이 예제에서는 소스의 메시지 리소스 파일을 설정 하 고 새 이벤트 원본을 만듭니다. 코드 예제에서 리소스 식별자 값을 사용 하 여 이벤트 로그의 지역화 된 표시 이름을 설정 하는 마지막으로, `DisplayNameMsgId` 및 리소스 파일 경로 `messageFile`입니다.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 코드 예제에서는 리소스 라이브러리 EventLogMsgs.dll 내장 다음 메시지 텍스트 파일을 사용 합니다. 메시지 텍스트 파일은 메시지 리소스 파일 생성 되는 원본. 메시지 텍스트 파일의 리소스 식별자와 범주, 이벤트 메시지 및 매개 변수 삽입 문자열에 대 한 텍스트를 정의합니다.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">모든 멤버를 호출 하기 위한 <see cref="T:System.Diagnostics.EventSourceCreationData" /> 완전 신뢰를 사용 하 여 합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="LogName">
      <MemberSignature Language="C#" Value="public string LogName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LogName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>소스가 엔트리를 쓰는 이벤트 로그 이름을 가져오거나 설정합니다.</summary>
        <value>이벤트 로그 이름입니다. 이 이름에는 응용 프로그램, 시스템 또는 사용자 지정 로그 이름을 사용할 수 있습니다. 기본값은 "Application"입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> 애플리케이션에 새 소스를 사용 하 여 항목을 쓰도록 이벤트 로그를 식별 하는 속성입니다. 이벤트 로그에는 새 로그 또는 기존 로그 수 있습니다. 애플리케이션 및 서비스 애플리케이션 로그 나 사용자 지정 로그에 작성 해야 합니다. 디바이스 드라이버는 시스템 로그에 작성 해야 합니다. 명시적으로 설정 하지 않으면 경우는 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> 속성, 이벤트 로그의 애플리케이션 로그에 기본값.  
  
> [!NOTE]
>  보안 로그에는 읽기 전용입니다.  
  
 새 원본에 대 한 기존 로그를 대상으로 설정 된 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> 속성을 기존 이벤트 로그 이름입니다. 원본에 대 한 새 이벤트 로그를 만들려면 설정 해야 합니다는 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> 속성입니다. 이벤트 로그 이름은 인쇄할 수 있는 문자로 구성되어야 하며 '*', '?' 또는 '\\'를 사용할 수 없습니다. 이벤트 로그 이름의 처음 8 개 문자가 지정된 된 컴퓨터의 이벤트 로그의 기존 이름의 처음 8 개 문자가 달라 야 합니다.  
  
 운영 체제 파일과 이벤트 로그를 저장합니다. 사용 하는 경우 <xref:System.Diagnostics.EventLogInstaller> 또는 <xref:System.Diagnostics.EventLog.CreateEventSource%2A> 메서드가 새 이벤트 로그에 연결된 된 파일을 만들도록 하는 지정한 컴퓨터의 %SystemRoot%\System32\Config 디렉터리에 저장 됩니다. 파일 이름은의 처음 8 개 문자를 추가 하 여 설정 됩니다는 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> ".evt" 파일 이름 확장명을 가진 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제는 명령줄 인수에서 이벤트 소스에 대 한 구성 속성을 설정합니다. 입력된 인수는 이벤트 원본 이름, 이벤트 로그 이름, 컴퓨터 이름 및 이벤트 메시지 리소스 파일을 지정합니다. 이 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.EventSourceCreationData> 클래스입니다.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">모든 멤버를 호출 하기 위한 <see cref="T:System.Diagnostics.EventSourceCreationData" /> 완전 신뢰를 사용 하 여 합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이벤트 소스를 등록할 컴퓨터 이름을 가져오거나 설정합니다.</summary>
        <value>이벤트 소스를 등록할 시스템 이름입니다. 기본값은 로컬 컴퓨터(".")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> 값에는 빈 문자열일 수 없습니다. 컴퓨터 이름을 명시적으로 설정 하지 않으면, 기본값은 로컬 컴퓨터 (".").  
  
 원격 컴퓨터에서 소스를 등록할 때 충분 한 권한이 있는 레지스트리 값을 작성 하는 컴퓨터에서 관리자 권한이 있어야 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 명령줄 인수에서 이벤트 소스에 대 한 구성 속성을 설정합니다. 입력된 인수는 이벤트 원본 이름, 이벤트 로그 이름, 컴퓨터 이름 및 이벤트 메시지 리소스 파일을 지정합니다. 이 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.EventSourceCreationData> 클래스입니다.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">컴퓨터 이름이 잘못된 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">모든 멤버를 호출 하기 위한 <see cref="T:System.Diagnostics.EventSourceCreationData" /> 완전 신뢰를 사용 하 여 합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>소스에 대한 메시지 서식 문자열이 들어 있는 메시지 리소스 파일의 경로를 가져오거나 설정합니다.</summary>
        <value>메시지 리소스 파일의 경로입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 지역화 된 이벤트 메시지를 쓸 이벤트 로그 소스를 구성 하는 속성입니다. 이벤트 메시지는 사용자에 게 이벤트를 설명 하는 애플리케이션 정의 문자열입니다.  
  
 애플리케이션 리소스 식별자를 사용 하 여 이벤트 로그 항목을 쓸 수 있습니다. 리소스 식별자를 인덱스에 있는 메시지는 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>합니다. 이벤트 뷰어를 찾아 현재 언어 설정에 따라 지역화 된 메시지 리소스 파일에서 해당 문자열을 표시할 리소스 식별자를 사용 합니다.  
  
 지역화 된 엔트리를 쓰기 위한 또는 직접 문자열을 작성 하는 것에 대 한 이벤트 소스를 구성 되어야 합니다. 사용 된 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 메시지 리소스 파일을 사용 하 여 구성 하는 원본에 대 한 지역화 된 엔트리를 작성 하는 방법입니다.  
  
 애플리케이션 문자열을 쓰는 이벤트 메시지를 직접 지역화 된 리소스 파일에 리소스 식별자를 사용 하는 대신 설정 하지 마십시오는 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 속성입니다.  
  
 에 있는 Platform SDK 설명서의 "메시지 컴파일러" 항목을 참조 하는 이벤트 메시지를 정의 하 고 이벤트 리소스 파일을 작성 하는 방법에 대 한 세부 정보에 대 한 [ http://msdn.microsoft.com ](https://msdn.microsoft.com/)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 라는 이벤트 소스가 있는지 여부를 결정 `SampleApplicationSource` 로컬 컴퓨터에 등록 됩니다. 이벤트 원본이 존재 하지 않는 경우이 예제에서는 소스의 메시지 리소스 파일을 설정 하 고 새 이벤트 원본을 만듭니다. 코드 예제에서 리소스 식별자 값을 사용 하 여 이벤트 로그의 지역화 된 표시 이름을 설정 하는 마지막으로, `DisplayNameMsgId` 및 리소스 파일 경로 `messageFile`입니다.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 코드 예제에서는 리소스 라이브러리 EventLogMsgs.dll 내장 다음 메시지 텍스트 파일을 사용 합니다. 메시지 텍스트 파일은 메시지 리소스 파일 생성 되는 원본. 메시지 텍스트 파일의 리소스 식별자와 범주, 이벤트 메시지 및 매개 변수 삽입 문자열에 대 한 텍스트를 정의합니다.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">모든 멤버를 호출 하기 위한 <see cref="T:System.Diagnostics.EventSourceCreationData" /> 완전 신뢰를 사용 하 여 합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>소스에 대한 메시지 매개 변수 문자열이 들어 있는 리소스 파일의 경로를 가져오거나 설정합니다.</summary>
        <value>매개 변수 리소스 파일의 경로입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> 속성을 사용 하 여 지역화 된 이벤트 메시지를 작성 하는 이벤트 로그 원본을 구성 매개 변수 문자열을 삽입 합니다. 에 지정 된 각 지역화 된 이벤트 메시지는 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 속성 삽입 문자열에 대 한 자리 표시자를 포함할 수 있습니다. 이러한 자리 표시자 위치 및 이벤트 메시지 내에서 언어 독립적인 문자열 리소스 식별자를 지정 하는 데 사용 됩니다. 해당 문자열을 사용 하 여 자리 표시자를 채우고 이벤트 뷰어는 <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> 지역화 된 이벤트 항목에 대 한 이벤트 로그 메시지의 서식을 지정 합니다.  
  
 예를 들어 메시지 텍스트 파일의 다음 섹션에는 매개 변수 자리 표시자를 사용 하 여 문자열로 정의합니다.  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 아래와 같이 삽입 문자열 매개 변수 리소스 파일에서 자리 표시자를 해당 하는 리소스 식별자를 사용 하 여 정의 해야 합니다.  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 지역화 된 엔트리를 쓰기 위한 또는 직접 문자열을 작성 하는 것에 대 한 이벤트 소스를 구성 되어야 합니다. 사용 된 <xref:System.Diagnostics.EventLog.WriteEvent%2A> 메시지 리소스 파일을 사용 하 여 구성 하는 원본에 대 한 지역화 된 엔트리를 작성 하는 방법입니다.  
  
 애플리케이션 이벤트 로그에 직접 이벤트 메시지 문자열을 기록 하는 경우 또는 경우에 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 속성에는 매개 변수 삽입 자리 표시자를 사용 하 여 메시지를 설정 하지 마십시오는 <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> 속성입니다.  
  
 에 있는 Platform SDK 설명서의 "메시지 컴파일러" 항목을 참조 하는 이벤트 메시지를 정의 하 고 이벤트 리소스 파일을 작성 하는 방법에 대 한 세부 정보에 대 한 [ http://msdn.microsoft.com ](https://msdn.microsoft.com/)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 라는 이벤트 소스가 있는지 여부를 결정 `SampleApplicationSource` 로컬 컴퓨터에 등록 됩니다. 이벤트 원본이 존재 하지 않는 경우이 예제에서는 소스의 메시지 리소스 파일을 설정 하 고 새 이벤트 원본을 만듭니다. 코드 예제에서 리소스 식별자 값을 사용 하 여 이벤트 로그의 지역화 된 표시 이름을 설정 하는 마지막으로, `DisplayNameMsgId` 및 리소스 파일 경로 `messageFile`입니다.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 코드 예제에서는 리소스 라이브러리 EventLogMsgs.dll 내장 다음 메시지 텍스트 파일을 사용 합니다. 메시지 텍스트 파일은 메시지 리소스 파일 생성 되는 원본. 메시지 텍스트 파일의 리소스 식별자와 범주, 이벤트 메시지 및 매개 변수 삽입 문자열에 대 한 텍스트를 정의합니다. 특히 리소스 식별자 1004에 대 한 정의 된 메시지는 리소스 식별자 5002 정의 된 매개 변수 문자열에 대 한 자리 표시자를 사용 합니다.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">모든 멤버를 호출 하기 위한 <see cref="T:System.Diagnostics.EventSourceCreationData" /> 완전 신뢰를 사용 하 여 합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이벤트 로그에 이벤트 소스로 등록할 이름을 가져오거나 설정합니다.</summary>
        <value>엔트리 소스로 이벤트 로그에 등록할 이름입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 애플리케이션의 이름 또는 대형 애플리케이션 내에서 구성 요소의 이름을 원본 이름은 종종입니다. 합니다 <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType> 메서드를 <xref:System.Diagnostics.EventSourceCreationData.Source%2A>, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>, 및 <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> 새 소스와 관련된 된 이벤트 로그에 대 한 대상 컴퓨터의 레지스트리 값을 만들기 위한 속성입니다. 새 원본 이름을 기존 원본 이름 또는 대상 컴퓨터의 기존 이벤트 로그 이름과 일치할 수 없습니다.  
  
 원본에 대 한 레지스트리 값을 만든 후 애플리케이션 구성된 된 이벤트 로그에 엔트리를 쓸 원본을 사용할 수 있습니다.  
  
 각 소스에서는 한 번에 하나의 이벤트 로그에 쓸 수 있습니다만 그러나 애플리케이션이 여러 이벤트 로그에 쓸 여러 원본을 사용할 수 있습니다. 예를 들어, 애플리케이션에 다른 이벤트 로그 또는 다른 리소스 파일에 대해 구성 된 여러 소스가 필요할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제는 명령줄 인수에서 이벤트 소스에 대 한 구성 속성을 설정합니다. 입력된 인수는 이벤트 원본 이름, 이벤트 로그 이름, 컴퓨터 이름 및 이벤트 메시지 리소스 파일을 지정합니다. 이 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Diagnostics.EventSourceCreationData> 클래스입니다.  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">모든 멤버를 호출 하기 위한 <see cref="T:System.Diagnostics.EventSourceCreationData" /> 완전 신뢰를 사용 하 여 합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>