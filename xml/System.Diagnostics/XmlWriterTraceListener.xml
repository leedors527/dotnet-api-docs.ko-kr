<Type Name="XmlWriterTraceListener" FullName="System.Diagnostics.XmlWriterTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="018649113dd09ead1653339657b6e61f572875b1" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57949123" /></Metadata><TypeSignature Language="C#" Value="public class XmlWriterTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlWriterTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.XmlWriterTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlWriterTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type XmlWriterTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>XML로 인코딩된 데이터인 추적 또는 디버깅 출력을 <see cref="T:System.IO.TextWriter" />나 <see cref="T:System.IO.Stream" />(예: <see cref="T:System.IO.FileStream" />)으로 보냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  수 해야 비관리 코드 권한이의 인스턴스를 만들려고 합니다 <xref:System.Diagnostics.XmlWriterTraceListener> 클래스입니다.  
  
 <xref:System.Diagnostics.XmlWriterTraceListener> 클래스에는 추적 및 디버깅 정보를 XML로 인코딩된 텍스트 스트림으로 변환 합니다. XML 출력의 설명에 따라 테이블에 표시 됩니다. 사용할 수는 [Service Trace Viewer 도구 (SvcTraceViewer.exe)](https://go.microsoft.com/fwlink/p/?LinkId=240129) 출력 XML을 표시 합니다.  
  
 활성화 하거나 비활성화할 수는 <xref:System.Diagnostics.XmlWriterTraceListener> 응용 프로그램 구성 파일을 사용 하 여 구성된 된 통해 <xref:System.Diagnostics.XmlWriterTraceListener> 응용 프로그램에서 합니다. 만들 수는 또는 <xref:System.Diagnostics.XmlWriterTraceListener> 코드에서.  
  
 구성 하는 <xref:System.Diagnostics.XmlWriterTraceListener>, 응용 프로그램의 이름에 해당 하는 구성 파일을 편집 합니다. 이 파일을 추가 또는 수신기 제거는 수신기에 대 한 속성을 설정 하거나 수 수신기를 제거 합니다. 다음 예제와 같이 구성 파일의 형식은 같아야 합니다.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="xmlListener"   
          type="System.Diagnostics.XmlWriterTraceListener"   
          initializeData="xmlOutput.xml"   
          traceOutputOptions="ProcessId, DateTime" />  
        <remove name="Default" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
 합니다 <xref:System.Diagnostics.XmlWriterTraceListener> 클래스를 상속 합니다 <xref:System.Diagnostics.TraceListener.Filter%2A> 기본 클래스에서 속성 <xref:System.Diagnostics.TraceListener>합니다.  <xref:System.Diagnostics.TraceListener.Filter%2A> 속성 수신기에서 필터링 하는 추적 출력의 추가 수준을 허용 합니다.  이면 있는 필터를 `Trace` 추적 수신기 호출의 메서드는 <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> 메서드는 추적을 내보낼지 여부를 결정 하는 필터입니다.  
  
> [!NOTE]
>  사용 중인 파일에 기록 하려고 시도 하거나 사용할 수 없거나, 파일 이름을 자동으로 옵니다 GUID입니다.  
  
> [!NOTE]
>  수신기 메서드는 메서드로 호출할 되어는 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource> 클래스입니다.  수신기 메서드는 응용 프로그램 코드에서 직접 호출할 수 없습니다. 합니다 <xref:System.Diagnostics.XmlWriterTraceListener> 사용에 대 한 수신기는 주로 <xref:System.Diagnostics.TraceSource> 클래스입니다. <xref:System.Diagnostics.XmlWriterTraceListener.Write%2A> 및 <xref:System.Diagnostics.XmlWriterTraceListener.WriteLine%2A> 에서 메서드를 호출할 수 있습니다를 <xref:System.Diagnostics.Trace> 및 <xref:System.Diagnostics.Debug> XML 요소에 대 한 클래스 및 기본 값 제공 되는 <xref:System.Diagnostics.Trace> 및 <xref:System.Diagnostics.Debug> 에 대 한 값을 제공 하지 않습니다.  
  
 다음 표에서 XML 출력의 특성과 해당 요소에 설명합니다.  
  
|요소|특성|출력|참고 사항|  
|-------------|----------------|------------|-----------|  
|`CallStack`|없음|현재 상태에 따라 달라 집니다 합니다 <xref:System.Diagnostics.TraceOptions.Callstack> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성입니다.|특수 문자 등 > 또는 < 이스케이프 시퀀스로 대체 됩니다. 이스케이프 된 문자 변환 표를 참조 하십시오.|  
|`Computer`|없음|항상 제공 합니다.|<xref:System.Environment.MachineName%2A> 속성 값|  
|`Correlation`|`ActivityID`|항상 있음|지정 하지 않으면 기본값은 빈 GUID입니다.|  
||`RelatedActivityID`|현재 상태에 따라 달라 집니다는 `relatedActivityId` 추적 메서드 호출의 매개 변수입니다.|<xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> 메서드의 `relatedActivityId` 매개 변수입니다.|  
|`DataItem`|없음|에 따라 달라 집니다 합니다 `data` 의 매개 변수는 <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> 메서드.|이 요소 값의 집합으로 기록 하므로 요소 또는 한 요소의 배열을 포함할 수 있습니다 `DataItem` 아래에 있는 노드는 `TraceData` 요소입니다.<br /><br /> 데이터를 사용 하 여 출력을 `ToString` 전달 된 데이터 개체의 메서드.|  
|`EventID`|없음|항상 제공 합니다.|매개 변수 입력 (`id`).|  
|`Execution`|`ProcessName`|항상 제공 합니다.|<xref:System.Diagnostics.TraceEventCache>합니다.|  
||`ProcessID`|항상 제공 합니다.|<xref:System.Diagnostics.TraceEventCache>합니다. Windows 98 및 Windows Me 운영 체제의 경우 `ProcessID` 음수를 양의 표현한 이며 올바른 프로세스 식별자를 가져오는 변환할지 2,147,483,647 보다 큽니다.|  
||`ThreadID`|항상 제공 합니다.|<xref:System.Diagnostics.TraceEventCache>합니다.|  
|`Level`|없음|항상 제공 합니다.|매개 변수 입력 (의 숫자 값을 `eventType`). 매개 변수 값을 255 보다 큰 255로 출력 됩니다.|  
|`LogicalOperationStack`|없음|현재 상태에 따라 달라 집니다 합니다 <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성입니다.|값은로 작성 되므로 둘 이상의 논리 작업 수 `LogicalOperation` 아래에 있는 노드는 `LogicalOperationStack` 요소입니다.|  
|`Message`|없음|추적 메서드 호출에서 메시지의 존재 여부에 따라 달라 집니다.|이 요소는 형식 인수가 제공 되지 경우 형식이 지정 된 메시지입니다.|  
|`Source`|`Name`|항상 제공 합니다.|입력 매개 변수입니다.|  
|`SubType`|`Name`|항상 제공 합니다.|입력 매개 변수입니다.|  
|`TimeCreated`|`SystemTime`|항상 제공 합니다.|에 없는 경우는 <xref:System.Diagnostics.TraceEventCache>, 기본값은 현재 시간입니다.|  
|`TimeStamp`|없음|현재 상태에 따라 달라 집니다 합니다 <xref:System.Diagnostics.TraceOptions.Timestamp> 플래그를 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 속성입니다.|<xref:System.Diagnostics.TraceEventCache>합니다.|  
|`Type`|없음|항상 제공 합니다.|항상 값 3입니다.|  
  
 다음 표에서 XML 출력에는 이스케이프 된 문자를 보여 줍니다. 모든 요소에 나타나고 제외 특성 이스케이프 합니다 `DataItem` 요소는 개체에 전달 하는 경우 이스케이프 되지 않습니다는 `data` 의 매개 변수를 <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> 메서드는는 <xref:System.Xml.XPath.XPathNavigator> 개체. 경우는 <xref:System.Xml.XPath.XPathNavigator> 데이터 개체에 사용 되는 <xref:System.Xml.XPath.XPathNavigator.MoveToRoot%2A> 메서드가 호출 되 고 전체 루트 노드는 이스케이프 되지 않은 데이터와 추적 됩니다.  
  
|이스케이프된 문자|값|  
|-----------------------|-----------|  
|&|&amp;|  
|\<|&lt;|  
|>|&gt;|  
|"|&quot;|  
|\|&apos;|  
|0xD|&\#xD;|  
|0xA|&\#xA;|  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Diagnostics.XmlWriterTraceListener> 이스케이프 및 이스케이프 되지 않은 데이터 파일 로그를 쓸 클래스입니다.  
  
 [!code-csharp[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/VB/module1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 수 있습니다. 연관된 열거형: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /></permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">추적 수신기가 쓸 스트림을 나타내는 <see cref="T:System.IO.Stream" />입니다.</param>
        <summary>지정된 스트림을 디버깅 및 추적 출력의 수신자로 사용하여 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.TraceListener.Name%2A> 속성은 빈 문자열로 초기화 됩니다 ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />가 <see langword="null" />입니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 수 있습니다. 연관된 열거형: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">추적 수신기에서 출력을 받는 <see cref="T:System.IO.TextWriter" />입니다.</param>
        <summary>지정된 작성자를 디버깅 및 추적 출력의 수신자로 사용하여 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.TraceListener.Name%2A> 속성은 빈 문자열로 초기화 됩니다 ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" />가 <see langword="null" />입니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 수 있습니다. 연관된 열거형: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">쓸 파일의 이름입니다.</param>
        <summary>지정된 파일을 디버깅 및 추적 출력의 수신자로 사용하여 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자의 새 인스턴스를 초기화 합니다 <xref:System.IO.StreamWriter> 지정된 된 경로에서 지정된 된 파일에 대 한 클래스를 사용 하 여 <xref:System.Text.Encoding.UTF8%2A> 인코딩. 파일이 존재 하는 경우에 추가 됩니다. 파일이 없으면 새 파일이 만들어집니다.  
  
> [!NOTE]
>  예외의 가능성을 줄이기 위해 사용 하 여 출력을 무효화할 수 있는 모든 문자 바뀝니다는 "?" 문자입니다.  
  
 <xref:System.Diagnostics.TraceListener.Name%2A> 속성은 빈 문자열로 초기화 됩니다 ("").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="filename" />가 <see langword="null" />입니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 수 있습니다. 연관된 열거형: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (stream, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">추적 수신기가 쓸 스트림을 나타내는 <see cref="T:System.IO.Stream" />입니다.</param>
        <param name="name">새 인스턴스 이름입니다.</param>
        <summary>지정된 스트림을 디버깅 및 추적 출력의 수신자로 사용하여, 지정된 이름을 가진 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 <xref:System.Diagnostics.TraceListener.Name%2A> 속성을를 `name` 매개 변수 값 또는 빈 문자열 ("") 경우는 `name` 매개 변수는 `null`합니다. 이름을 인덱스로 사용할 수는 <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> 컬렉션을 프로그래밍 방식으로 수신기에 대 한 속성을 변경 합니다. 예를 들어, 다음 코드에서는 합니다 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 인스턴스에 대 한 속성 <xref:System.Diagnostics.XmlWriterTraceListener> 인 <xref:System.Diagnostics.TraceListener.Name%2A> 속성이 "xmllistener 인" 합니다.  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />가 <see langword="null" />입니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 수 있습니다. 연관된 열거형: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (writer, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">추적 수신기에서 출력을 받는 <see cref="T:System.IO.TextWriter" />입니다.</param>
        <param name="name">새 인스턴스 이름입니다.</param>
        <summary>지정된 작성자를 디버깅 및 추적 출력의 수신자로 사용하여, 지정된 이름을 가진 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 <xref:System.Diagnostics.TraceListener.Name%2A> 속성을를 `name` 매개 변수 값 또는 빈 문자열 ("") 경우는 `name` 매개 변수는 `null`합니다. 이름을 인덱스로 사용할 수는 <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> 컬렉션을 프로그래밍 방식으로 수신기에 대 한 속성을 변경 합니다. 예를 들어, 다음 코드에서는 합니다 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 인스턴스에 대 한 속성 <xref:System.Diagnostics.XmlWriterTraceListener> 인 <xref:System.Diagnostics.TraceListener.Name%2A> 속성이 "xmllistener 인" 합니다.  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" />가 <see langword="null" />입니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 수 있습니다. 연관된 열거형: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (filename, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">쓸 파일의 이름입니다.</param>
        <param name="name">새 인스턴스 이름입니다.</param>
        <summary>지정된 파일을 디버깅 및 추적 출력의 수신자로 사용하여, 지정된 이름을 가진 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자의 새 인스턴스를 초기화 합니다 <xref:System.IO.StreamWriter> 지정된 된 경로에서 지정된 된 파일에 대 한 클래스를 사용 하 여 <xref:System.Text.Encoding.UTF8%2A> 인코딩. 파일이 존재 하는 경우에 추가 됩니다. 파일이 없으면 새 파일이 만들어집니다.  
  
> [!NOTE]
>  예외의 가능성을 줄이기 위해 사용 하 여 출력을 무효화할 수 있는 모든 문자 바뀝니다는 "?" 문자입니다.  
  
 <xref:System.Diagnostics.TraceListener.Name%2A> 속성을 `name` 매개 변수 값 또는 빈 문자열 ("") 경우는 `name` 매개 변수는 `null`. 이름을 인덱스로 사용할 수는 <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> 컬렉션을 프로그래밍 방식으로 수신기에 대 한 속성을 변경 합니다. 예를 들어, 다음 코드에서는 합니다 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 인스턴스에 대 한 속성 <xref:System.Diagnostics.XmlWriterTraceListener> 인 <xref:System.Diagnostics.TraceListener.Name%2A> 속성이 "xmllistener 인" 합니다.  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =  
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />가 <see langword="null" />입니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 수 있습니다. 연관된 열거형: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlWriterTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>추적 또는 디버깅 출력을 더 이상 받지 않도록 이 수신기에 대한 <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" />를 닫습니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="override this.Fail : string * string -&gt; unit" Usage="xmlWriterTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">쓸 오류 메시지입니다.</param>
        <param name="detailMessage">오류 메시지에 추가할 자세한 오류 메시지입니다.</param>
        <summary>오류 메시지와 자세한 오류 메시지를 포함한 추적 정보를 파일이나 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 동작은 응용 프로그램 및 사용자 인터페이스 모드로 실행 중일 때 메시지 상자에 메시지와 자세한 메시지를 표시 하는 <xref:System.Diagnostics.TraceListener> 인스턴스는 <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> 컬렉션입니다. 기본적으로 컬렉션의 인스턴스를 포함 <xref:System.Diagnostics.DefaultTraceListener>합니다. 추가 하거나 제거 하 여이 동작을 사용자 지정할 수는 <xref:System.Diagnostics.TraceListener> 컬렉션에서 합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 수 있습니다. 연관된 열거형: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>추적 데이터를 출력 파일이나 스트림에 씁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">현재 프로세스 ID, 스레드 ID 및 스택 추적 정보가 포함된 <see cref="T:System.Diagnostics.TraceEventCache" />입니다.</param>
        <param name="source">소스 이름입니다.</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 값 중 하나입니다.</param>
        <param name="id">이벤트의 숫자 식별자입니다.</param>
        <param name="data">내보낼 데이터 개체입니다.</param>
        <summary>추적 정보, 데이터 개체 및 이벤트 정보를 파일이나 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `eventCache`, `source`를 `eventType`, 및 `id` 머리글 및 바닥글 추적의 매개 변수를 사용 합니다. 합니다 `id` 매개 변수는 부호 없는 정수로 변환 쓰기 전에 따라서 음수 `id` 큰 양의 정수 값이 기록 됩니다. 합니다 `data` 매개 변수는 기록를 `DataItem` 노드에서 `TraceData` 요소입니다. `ToString` 개체를 문자열로 변환할 데이터 개체의 메서드를 사용 합니다.  
  
> [!IMPORTANT]
>  이 메서드는 응용 프로그램 코드에서 직접 호출할 수 없습니다.  메서드에서 호출 되는 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource> 추적 데이터를 작성 하는 클래스.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 수 있습니다. 연관된 열거형: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">현재 프로세스 ID, 스레드 ID 및 스택 추적 정보가 포함된 <see cref="T:System.Diagnostics.TraceEventCache" />입니다.</param>
        <param name="source">소스 이름입니다.</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 값 중 하나입니다.</param>
        <param name="id">이벤트의 숫자 식별자입니다.</param>
        <param name="data">내보낼 데이터 개체 배열입니다.</param>
        <summary>추적 정보, 데이터 개체 및 이벤트 정보를 파일이나 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `eventCache`, `source`를 `eventType`, 및 `id` 머리글 및 바닥글 추적의 매개 변수를 사용 합니다. 합니다 `id` 매개 변수는 부호 없는 정수로 변환 쓰기 전에 따라서 음수 `id` 큰 양의 정수 값이 기록 됩니다. 개체는 `data` 매개 변수 배열으로 기록 됩니다 `DataItem` 의 노드는 `TraceData` 요소입니다. `ToString` 개체를 문자열로 변환할 각 데이터 개체의 메서드를 사용 합니다.  
  
> [!IMPORTANT]
>  이 메서드는 응용 프로그램 코드에서 직접 호출할 수 없습니다.  메서드에서 호출 되는 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource> 추적 데이터를 작성 하는 클래스.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 수 있습니다. 연관된 열거형: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이벤트 추적 정보를 출력 파일이나 스트림에 씁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">현재 프로세스 ID, 스레드 ID 및 스택 추적 정보가 포함된 <see cref="T:System.Diagnostics.TraceEventCache" />입니다.</param>
        <param name="source">소스 이름입니다.</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 값 중 하나입니다.</param>
        <param name="id">이벤트의 숫자 식별자입니다.</param>
        <param name="message">쓸 메시지입니다.</param>
        <summary>추적 정보, 메시지 및 이벤트 정보를 파일이나 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `eventCache`, `source`를 `eventType`, 및 `id` 머리글 및 바닥글 추적의 매개 변수를 사용 합니다. 합니다 `id` 매개 변수는 부호 없는 정수로 변환 쓰기 전에 따라서 음수 `id` 큰 양의 정수 값이 기록 됩니다. 합니다 `message` 매개 변수는 기록 된 `Message` 요소입니다.  
  
> [!IMPORTANT]
>  이 메서드는 응용 프로그램 코드에서 직접 호출할 수 없습니다.  메서드에서 호출 되는 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource> 추적 데이터를 작성 하는 클래스.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 수 있습니다. 연관된 열거형: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">현재 프로세스 ID, 스레드 ID 및 스택 추적 정보가 포함된 <see cref="T:System.Diagnostics.TraceEventCache" />입니다.</param>
        <param name="source">소스 이름입니다.</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 값 중 하나입니다.</param>
        <param name="id">이벤트의 숫자 식별자입니다.</param>
        <param name="format"><paramref name="args" /> 배열에 들어 있는 개체에 해당하는 0개 이상의 형식 항목이 포함된 형식 문자열입니다.</param>
        <param name="args">형식을 지정할 개체를 0개 이상 포함하는 개체 배열입니다.</param>
        <summary>추적 정보, 형식 지정된 메시지 및 이벤트 정보를 파일이나 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `eventCache`, `source`를 `eventType`, 및 `id` 머리글 및 바닥글 추적의 매개 변수를 사용 합니다. 합니다 `id` 매개 변수는 부호 없는 정수로 변환 쓰기 전에 따라서 음수 `id` 큰 양의 정수 값이 기록 됩니다. <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 전달 메서드가 호출 되는 `format` 문자열 및 `args` 배열 형식을 매개 변수로 `args` 개체 배열을 `Message` 요소입니다.  
  
> [!IMPORTANT]
>  이 메서드는 응용 프로그램 코드에서 직접 호출할 수 없습니다.  메서드에서 호출 되는 <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, 및 <xref:System.Diagnostics.TraceSource> 추적 데이터를 작성 하는 클래스.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 수 있습니다. 연관된 열거형: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceTransfer (eventCache As TraceEventCache, source As String, id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceTransfer(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="override this.TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit" Usage="xmlWriterTraceListener.TraceTransfer (eventCache, source, id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache">현재 프로세스 ID, 스레드 ID 및 스택 추적 정보가 포함된 <see cref="T:System.Diagnostics.TraceEventCache" />입니다.</param>
        <param name="source">소스 이름입니다.</param>
        <param name="id">이벤트의 숫자 식별자입니다.</param>
        <param name="message">쓸 추적 메시지입니다.</param>
        <param name="relatedActivityId">관련 작업을 식별하는 <see cref="T:System.Guid" /> 구조체입니다.</param>
        <summary>관련 작업의 ID를 포함한 추적 정보, 메시지 및 이벤트 정보를 파일이나 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> 관련된 추적의 상관 관계에 대 한 메서드를 사용 합니다. 합니다 `eventCache`, `source`를 `id`, 및 `relatedActivityId` 머리글 및 바닥글 추적의 매개 변수를 사용 합니다. 합니다 `id` 매개 변수는 부호 없는 정수로 변환 쓰기 전에 따라서 음수 `id` 큰 양의 정수 값이 기록 됩니다. 합니다 `message` 매개 변수는 기록 된 `Message` 요소입니다. <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> 메서드는 변환할를 `relatedActivityId`"B"로 값 형식 헤더에 표시 되는 문자열입니다. 합니다 `SubTypeName` 추적 이벤트 유형으로 식별 하는 바닥글에는 요소는 <xref:System.Diagnostics.TraceEventType.Transfer>합니다.  
  
> [!IMPORTANT]
>  <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> 메서드는 응용 프로그램 코드에서 호출할 수 없습니다.  호출 하는 것을 <xref:System.Diagnostics.TraceSource> 개체에 대 한 추적 정보를 내보내려면 해당 <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 수 있습니다. 연관된 열거형: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="xmlWriterTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">쓸 메시지입니다.</param>
        <summary>추가 컨텍스트 정보가 없는 verbatim 메시지를 파일이나 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> 로그 출력에 컨텍스트 정보를 포함 하는 방법입니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 수 있습니다. 연관된 열거형: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="xmlWriterTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">쓸 메시지입니다.</param>
        <summary>현재 줄 종결자가 뒤에 오고 추가 컨텍스트 정보가 없는 verbatim 메시지를 파일이나 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A> 로그 출력에 컨텍스트 정보를 포함 하는 방법입니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 수 있습니다. 연관된 열거형: <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>