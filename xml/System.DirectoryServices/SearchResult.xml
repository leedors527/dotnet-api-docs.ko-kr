<Type Name="SearchResult" FullName="System.DirectoryServices.SearchResult">
  <Metadata><Meta Name="ms.openlocfilehash" Value="228baa02a4f293ad0a2ef52abc785965d6d11e73" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="37763564" /></Metadata><TypeSignature Language="C#" Value="public class SearchResult" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SearchResult extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.SearchResult" />
  <TypeSignature Language="VB.NET" Value="Public Class SearchResult" />
  <TypeSignature Language="C++ CLI" Value="public ref class SearchResult" />
  <TypeSignature Language="F#" Value="type SearchResult = class" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.DirectoryServices.SearchResult" /> 클래스는 Active Directory 도메인 서비스 계층 구조에서 <see cref="T:System.DirectoryServices.DirectorySearcher" />를 통해 검색하는 동안 반환되는 노드를 캡슐화합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인스턴스를 <xref:System.DirectoryServices.SearchResult> 클래스의 인스턴스를 매우 비슷합니다 <xref:System.DirectoryServices.DirectoryEntry> 클래스입니다. 중요 한 차이점은는 <xref:System.DirectoryServices.DirectoryEntry> 클래스 검색 하는 해당 정보는 Active Directory Domain Services 계층 구조에서 새 개체에 액세스할 때마다 반면에 대 한 데이터 <xref:System.DirectoryServices.SearchResult> 에서 사용할 수 있는 이미는 <xref:System.DirectoryServices.SearchResultCollection>양상으로, 사용 하 여 수행 되는 쿼리에서 반환 되는 <xref:System.DirectoryServices.DirectorySearcher> 클래스입니다. 통해 지정 된 속성만 합니다 <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=nameWithType> 쿼리에서 컬렉션에서 사용할 수 있습니다 <xref:System.DirectoryServices.SearchResult>합니다.  
  
   
  
## Examples  
 다음 예제에서는 새 <xref:System.DirectoryServices.DirectoryEntry> 사용 하 여 원하는 경로 사용 하 여 개체를 <xref:System.DirectoryServices.DirectorySearcher.FindOne%2A> 검색을 시작 하는 방법입니다. 예제에서는 검색을 수행한 후의 <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> 검색 결과에서 식별 된 활성 디렉터리 항목을 검색 하는 방법입니다.  
  
```vb  
Imports System  
Imports System.DirectoryServices  
Imports Microsoft.VisualBasic  
  
Public Class MySample  
   Public Shared Sub Main()  
      Dim myLDAPPath As String = ""  
      Try  
         ' Create a 'DirectoryEntry' object to search.  
         Console.WriteLine("Enter the path ( Ex : 'LDAP://MyServer')")  
         myLDAPPath = Console.ReadLine()  
         Dim mySearchRoot As New DirectoryEntry(myLDAPPath)  
  
         Dim myDirectorySearcher As New DirectorySearcher(mySearchRoot)  
  
         ' Get the first entry of the search.  
         Dim mySearchResult As SearchResult = myDirectorySearcher.FindOne()  
         If Not (mySearchResult Is Nothing) Then  
            ' Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  
            Dim myDirectoryEntry As DirectoryEntry = mySearchResult.GetDirectoryEntry()  
            Console.WriteLine(ControlChars.Newline + "The name of the 'myDirectoryEntry' " + _  
                        "directory entry that corresponds to the " + _  
                        "'mySearchResult' search result is : {0}" + _  
                        ControlChars.Newline, myDirectoryEntry.Name)  
            Dim mySearchResultPath As String = mySearchResult.Path  
            Console.WriteLine("The path for the 'mySearchResult' search result is : {0}" + _  
                              ControlChars.Newline, mySearchResultPath)  
            ' Get the properties of the 'mySearchResult'.  
            Dim myResultPropColl As ResultPropertyCollection  
            myResultPropColl = mySearchResult.Properties  
            Console.WriteLine("The properties of the 'mySearchResult' are :")  
            Dim myKey As String  
            For Each myKey In  myResultPropColl.PropertyNames  
               Dim tab1 As String = "    "  
               Console.WriteLine(myKey + " = ")  
               Dim myCollection As Object  
               For Each myCollection In  myResultPropColl(myKey)  
                  Console.WriteLine(tab1 + myCollection)  
               Next myCollection  
            Next myKey  
            myDirectoryEntry.Dispose()  
            mySearchRoot.Dispose()  
         Else  
            Console.WriteLine("The '" + myLDAPPath + "' path not found.")  
         End If  
      Catch e As Exception  
         Console.WriteLine("The '" + myLDAPPath + "' path not found.")  
         Console.WriteLine("Exception : " & e.Message)  
      End Try  
   End Sub 'Main  
End Class 'MySample  
```  
  
```csharp  
using System;  
using System.DirectoryServices;  
  
public class MySample  
{  
    public static void Main()  
    {  
        string myLDAPPath = "";  
        try  
        {  
            // Create a 'DirectoryEntry' object to search.  
            Console.WriteLine("Enter the path ( Ex : 'LDAP://MyServer')");  
            myLDAPPath = Console.ReadLine();  
  
            DirectoryEntry mySearchRoot = new DirectoryEntry(myLDAPPath);  
            DirectorySearcher myDirectorySearcher =   
                    new DirectorySearcher(mySearchRoot);  
  
            // Get the first entry of the search.  
            SearchResult mySearchResult = myDirectorySearcher.FindOne();  
  
            if ( mySearchResult != null )  
            {  
                // Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  
                DirectoryEntry myDirectoryEntry =   
                mySearchResult.GetDirectoryEntry();  
                Console.WriteLine("\nThe name of the 'myDirectoryEntry' " +  
                        "directory entry that corresponds to the " +  
                        "'mySearchResult' search result is : {0}\n",  
                        myDirectoryEntry.Name);  
                string mySearchResultPath = mySearchResult.Path;  
                Console.WriteLine("The path for the 'mySearchResult' search "  
                        + "result is : {0}\n", mySearchResultPath);  
  
                // Get the properties of the 'mySearchResult'.  
                ResultPropertyCollection myResultPropColl;  
                myResultPropColl = mySearchResult.Properties;  
                Console.WriteLine("The properties of the " +   
                        "'mySearchResult' are :");  
  
                foreach( string myKey in myResultPropColl.PropertyNames)  
                {  
                    string tab = "    ";  
                    Console.WriteLine(myKey + " = ");  
                    foreach( Object myCollection in myResultPropColl[myKey])  
                    {  
                        Console.WriteLine(tab + myCollection);  
                    }  
                }  
                mySearchRoot.Dispose();  
                myDirectoryEntry.Dispose();  
            }  
            else  
            {  
                Console.WriteLine("The '" + myLDAPPath + "' path not found.");  
            }  
        }  
        catch(Exception e)  
        {  
            Console.WriteLine("The '" + myLDAPPath + "' path not found.");  
            Console.WriteLine("Exception : " + e.Message);  
        }  
    }  
  
}  
```  
  
```cpp#  
#using <mscorlib.dll>  
#using <System.dll>  
#using <System.Directoryservices.dll>  
  
using namespace System;  
using namespace System::Collections;  
using namespace System::DirectoryServices;  
using namespace stdcli::language;  
  
int main()   
{  
    String^ myLDAPPath = "";  
    try   
    {  
        // Create a 'DirectoryEntry' object to search.  
        Console::WriteLine("Enter the path ( Ex : 'LDAP://MyServer')");  
        myLDAPPath = Console::ReadLine();  
        DirectoryEntry^ mySearchRoot = gcnew DirectoryEntry(myLDAPPath);  
  
        DirectorySearcher^ myDirectorySearcher = gcnew DirectorySearcher(mySearchRoot);  
  
        // Get the first entry of the search.  
        SearchResult^ mySearchResult = myDirectorySearcher->FindOne();  
        if (mySearchResult)   
        {  
            // Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  
            DirectoryEntry^ myDirectoryEntry = mySearchResult->GetDirectoryEntry();  
            Console::WriteLine(  
                String::Concat("\nThe name of the 'myDirectoryEntry' ",  
                "directory entry that corresponds to the ",  
                "'mySearchResult' search result is : {0}\n"),  
                myDirectoryEntry->Name);  
  
            String^ mySearchResultPath = mySearchResult->Path;  
            Console::WriteLine("The path for the 'mySearchResult' search result is :  
                    {0}\n", mySearchResultPath);  
  
            // Get the properties of the 'mySearchResult'.  
            ResultPropertyCollection^ myResultPropColl = mySearchResult->Properties;  
            Console::WriteLine("The properties of the 'mySearchResult' are :");  
            IEnumerator^ myEnum = myResultPropColl->PropertyNames->GetEnumerator();  
            while (myEnum->MoveNext())   
            {  
                String^ myKey = safe_cast<String^>(myEnum->Current);  
                Console::WriteLine("{0} = ", myKey);  
                IEnumerator^ myEnum = myResultPropColl->Item[myKey]->GetEnumerator();  
                while (myEnum->MoveNext())   
                {  
                    Console::WriteLine("\t{0}", myEnum->Current);  
                }  
            }  
            myDirectoryEntry->Dispose();  
            mySearchRoot->Dispose();   
        }   
        else   
        {  
            Console::WriteLine("The '{0}' path not found.", myLDAPPath);  
        }  
    }   
    catch (Exception^ e)   
    {  
        Console::WriteLine("The '{0}' path not found.",  myLDAPPath);  
        Console::WriteLine("Exception : {0}", e->Message);  
    }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.DirectoryServices.DirectoryServicesPermission"><see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
  </Docs>
  <Members>
    <Member MemberName="GetDirectoryEntry">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry GetDirectoryEntry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.DirectoryEntry GetDirectoryEntry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.SearchResult.GetDirectoryEntry" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDirectoryEntry () As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::DirectoryEntry ^ GetDirectoryEntry();" />
      <MemberSignature Language="F#" Value="member this.GetDirectoryEntry : unit -&gt; System.DirectoryServices.DirectoryEntry" Usage="searchResult.GetDirectoryEntry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Active Directory 도메인 서비스 계층 구조에서 <see cref="T:System.DirectoryServices.DirectoryEntry" />에 해당하는 <see cref="T:System.DirectoryServices.SearchResult" />를 검색합니다.</summary>
        <returns><see cref="T:System.DirectoryServices.DirectoryEntry" />에 해당하는 <see cref="T:System.DirectoryServices.SearchResult" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> 를 통해 반환 된 항목 대신 라이브 항목을 확인 하려는 경우 <xref:System.DirectoryServices.DirectorySearcher>, 반환 된 개체에서 메서드를 호출 하려는 경우 또는 합니다.  
  
> [!NOTE]
>  호출 <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> 각 <xref:System.DirectoryServices.SearchResult> 를 통해 반환 된 <xref:System.DirectoryServices.DirectorySearcher> 속도가 느려질 수 있습니다.  
  
   
  
## Examples  
 다음 예의 예제는 <xref:System.DirectoryServices.SearchResult>합니다. 원래 예제에서는 새 <xref:System.DirectoryServices.DirectoryEntry> 사용 하 여 원하는 경로 사용 하 여 개체를 <xref:System.DirectoryServices.DirectorySearcher.FindOne%2A> 검색을 시작 하는 방법입니다. 예제에서는 검색을 수행한 후의 <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> 검색 결과에서 식별 된 활성 디렉터리 항목을 검색 하는 방법입니다.  
  
```vb  
' Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  
Dim myDirectoryEntry As DirectoryEntry = mySearchResult.GetDirectoryEntry()  
Console.WriteLine(ControlChars.Newline + "The name of the 'myDirectoryEntry' " + _  
            "directory entry that corresponds to the " + _  
            "'mySearchResult' search result is : {0}" + _  
            ControlChars.Newline, myDirectoryEntry.Name)  
  
```  
  
```csharp  
// Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  
DirectoryEntry myDirectoryEntry =   
                           mySearchResult.GetDirectoryEntry();  
Console.WriteLine("\nThe name of the 'myDirectoryEntry' " +  
                  "directory entry that corresponds to the " +  
                  "'mySearchResult' search result is : {0}\n",  
                  myDirectoryEntry.Name);  
  
```  
  
```cpp#  
// Get the 'DirectoryEntry' that corresponds to 'mySearchResult'.  
DirectoryEntry^ myDirectoryEntry = mySearchResult->GetDirectoryEntry();  
Console::WriteLine(  
    String::Concat("\nThe name of the 'myDirectoryEntry' ",  
    "directory entry that corresponds to the ",  
    "'mySearchResult' search result is : {0}\n"),  
    myDirectoryEntry->Name);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SearchResult.Path" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Path : string" Usage="System.DirectoryServices.SearchResult.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.DirectoryServices.SearchResult" />의 경로를 가져옵니다.</summary>
        <value>이 <see cref="T:System.DirectoryServices.SearchResult" />의 경로입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DirectoryServices.SearchResult.Path%2A> 속성 Active Directory Domain Services 계층 구조에서이 항목을 고유 하 게 식별 합니다. 이 경로 사용 하 여 항목을 검색할 항상 있습니다.  
  
   
  
## Examples  
 다음 예의 예제는 <xref:System.DirectoryServices.SearchResult>합니다. 원래 예제에서는 새 <xref:System.DirectoryServices.DirectoryEntry> 사용 하 여 원하는 경로 사용 하 여 개체를 <xref:System.DirectoryServices.DirectorySearcher.FindOne%2A> 검색을 시작 하는 방법입니다. 예제에서는 검색을 수행한 후의 <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> 검색 결과에서 식별 된 활성 디렉터리 항목을 검색 하는 방법입니다.  
  
 구문 분석 하는 방법을 보여 주는이 예제는 <xref:System.DirectoryServices.SearchResult.Path%2A> 검색 결과에서 속성입니다.  
  
```vb  
Dim mySearchResultPath As String = mySearchResult.Path  
Console.WriteLine("The path for the 'mySearchResult' search result is : {0}" + _  
                  ControlChars.Newline, mySearchResultPath)  
  
```  
  
```csharp  
string mySearchResultPath = mySearchResult.Path;  
Console.WriteLine("The path for the 'mySearchResult' search "  
                  + "result is : {0}\n", mySearchResultPath);  
```  
  
```cpp#  
String^ mySearchResultPath = mySearchResult->Path;  
Console::WriteLine("The path for the 'mySearchResult' search result is : {0}\n", mySearchResultPath);  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ResultPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ResultPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.SearchResult.Properties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Properties As ResultPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ResultPropertyCollection ^ Properties { System::DirectoryServices::ResultPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.DirectoryServices.ResultPropertyCollection" Usage="System.DirectoryServices.SearchResult.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ResultPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 개체에 대한 속성의 <see cref="T:System.DirectoryServices.ResultPropertyCollection" /> 컬렉션을 가져옵니다.</summary>
        <value>이 개체에 대해 설정된 속성의 <see cref="T:System.DirectoryServices.ResultPropertyCollection" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 컬렉션을 통해 명시적으로 요청 된 속성 포함 <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad%2A?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 다음 예의 예제는 <xref:System.DirectoryServices.SearchResult>합니다. 원래 예제에서는 새 <xref:System.DirectoryServices.DirectoryEntry> 사용 하 여 원하는 경로 사용 하 여 개체를 <xref:System.DirectoryServices.DirectorySearcher.FindOne%2A> 검색을 시작 하는 방법입니다. 예제에서는 검색을 수행한 후의 <xref:System.DirectoryServices.SearchResult.GetDirectoryEntry%2A> 검색 결과에서 식별 된 활성 디렉터리 항목을 검색 하는 방법입니다.  
  
 이 예제에서는 검색 결과에 배치 되는 <xref:System.DirectoryServices.ResultPropertyCollection>합니다. 그런 다음 각 속성이 콘솔 창에 표시 됩니다.  
  
```vb  
' Get the properties for 'mySearchResult'.  
Dim myResultPropColl As ResultPropertyCollection  
myResultPropColl = mySearchResult.Properties  
Console.WriteLine("The properties of the 'mySearchResult' are :")  
Dim myKey As String  
For Each myKey In  myResultPropColl.PropertyNames  
   Dim tab1 As String = "    "  
   Console.WriteLine(myKey + " = ")  
   Dim myCollection As Object  
   For Each myCollection In  myResultPropColl(myKey)  
      Console.WriteLine(tab1 + myCollection)  
   Next myCollection  
Next myKey  
  
```  
  
```csharp  
// Get the properties for 'mySearchResult'.  
ResultPropertyCollection myResultPropColl;  
myResultPropColl = mySearchResult.Properties;  
Console.WriteLine("The properties of the " +   
                  "'mySearchResult' are :");  
foreach( string myKey in myResultPropColl.PropertyNames)  
{  
   string tab = "    ";  
   Console.WriteLine(myKey + " = ");  
   foreach( Object myCollection in myResultPropColl[myKey])  
   {  
      Console.WriteLine(tab + myCollection);  
   }  
}  
  
```  
  
```cpp#  
// Get the properties for 'mySearchResult'.  
ResultPropertyCollection^ myResultPropColl = mySearchResult->Properties;  
Console::WriteLine("The properties of the 'mySearchResult' are :");  
IEnumerator^ myEnum = myResultPropColl->PropertyNames->GetEnumerator();  
while (myEnum->MoveNext())   
{  
    String^ myKey = safe_cast<String^>(myEnum->Current);  
    Console::WriteLine("{0} = ", myKey);  
    IEnumerator^ myEnum = myResultPropColl->Item[myKey]->GetEnumerator();  
    while (myEnum->MoveNext())   
    {  
        Console::WriteLine("\t{0}", myEnum->Current);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>