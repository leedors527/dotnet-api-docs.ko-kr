<Type Name="Graphics" FullName="System.Drawing.Graphics">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3d23c3606f145c2114ec9a754cb959c07da47b20" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56793853" /></Metadata><TypeSignature Language="C#" Value="public sealed class Graphics : MarshalByRefObject, IDisposable, System.Drawing.IDeviceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Graphics extends System.MarshalByRefObject implements class System.Drawing.IDeviceContext, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Graphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Graphics&#xA;Inherits MarshalByRefObject&#xA;Implements IDeviceContext, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Graphics sealed : MarshalByRefObject, IDisposable, System::Drawing::IDeviceContext" />
  <TypeSignature Language="F#" Value="type Graphics = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable&#xA;    interface IDeviceContext" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Drawing.IDeviceContext</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>GDI+ 그리기 화면을 캡슐화합니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics> 클래스는 표시 디바이스에 개체를 그리기 위한 메서드를 제공 합니다. <xref:System.Drawing.Graphics> 특정 디바이스 컨텍스트를 사용 하 여 연결 합니다.  
  
 가져올 수 있습니다는 <xref:System.Drawing.Graphics> 호출 하 여 개체를 <xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=nameWithType> 에서 상속 되는 개체의 메서드를 <xref:System.Windows.Forms.Control?displayProperty=nameWithType>, 또는 컨트롤의 처리 하 여 <xref:System.Windows.Forms.Control.Paint?displayProperty=nameWithType> 이벤트 및 액세스를 <xref:System.Windows.Forms.PaintEventArgs.Graphics%2A> 속성을 <xref:System.Windows.Forms.PaintEventArgs?displayProperty=nameWithType> 클래스. 만들 수도 있습니다는 <xref:System.Drawing.Graphics> 를 사용 하 여 이미지에서 개체를 <xref:System.Drawing.Graphics.FromImage%2A> 메서드. 만들기에 대 한 자세한 내용은 <xref:System.Drawing.Graphics> 개체를 참조 하십시오 [방법: 그리는 데 필요한 그래픽 개체 만들기](~/docs/framework/winforms/advanced/how-to-create-graphics-objects-for-drawing.md)합니다.  
  
 사용 하 여 여러 다른 셰이프 및 줄을 그릴 수 있습니다는 <xref:System.Drawing.Graphics> 개체입니다. 특정 참조 선과 도형 그리기 하는 방법에 대 한 자세한 내용은 `Draw` *그리려는* 줄 또는 도형을 그릴 메서드. 이러한 메서드를 포함 <xref:System.Drawing.Graphics.DrawLine%2A>, <xref:System.Drawing.Graphics.DrawArc%2A>를 <xref:System.Drawing.Graphics.DrawClosedCurve%2A>합니다 <xref:System.Drawing.Graphics.DrawPolygon%2A>, 및 <xref:System.Drawing.Graphics.DrawRectangle%2A>합니다. 선과 도형 그리기 하는 방법에 대 한 자세한 내용은 참조 하세요. [선 그리기 및 도형에 펜을 사용 하 여](~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md) 하 고 [셰이프를 입력 하는 브러시를 사용 하 여](~/docs/framework/winforms/advanced/using-a-brush-to-fill-shapes.md)입니다.  
  
 사용 하 여 이미지 및 아이콘을 그릴 수도 있습니다는 <xref:System.Drawing.Graphics.DrawImage%2A> 고 <xref:System.Drawing.Graphics.DrawIcon%2A> 메서드를 각각. 그리기 화면을 화면에서 색 데이터 비트 블록 전송을 수행 하는 <xref:System.Drawing.Graphics> 개체를 참조 하십시오 <xref:System.Drawing.Graphics.CopyFromScreen%2A>합니다. 사용 하 여 이미지를 그리는 방법에 대 한 자세한 내용은 <xref:System.Drawing.Graphics> 개체를 참조 하십시오 [이미지, 비트맵, 아이콘 및 메타 파일을 사용 하 여 작업](~/docs/framework/winforms/advanced/working-with-images-bitmaps-icons-and-metafiles.md)합니다.  
  
 또한에서 사용 하는 좌표계를 조작할 수 있습니다는 <xref:System.Drawing.Graphics> 개체입니다. 좌표계 및 조작 하는 방법에 대 한 자세한 내용은 참조 하세요. [좌표계 및 변형](~/docs/framework/winforms/advanced/coordinate-systems-and-transformations.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms를 사용 하 여 용도로 설계 하며를 <xref:System.Windows.Forms.PaintEventArgs> 개체입니다. 합니다 <xref:System.Windows.Forms.PaintEventArgs> 개체의 이름은 `e` 매개 변수 이며는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일에서 이미지를 만듭니다. 예제 이름은 파일과 예제 폴더에 있습니다.  
  
-   이미지의 왼쪽 위 모퉁이 그릴 점을 만듭니다.  
  
-   실제 크기의 이미지를 사용 하 여 화면에 그릴를 <xref:System.Drawing.Graphics> 개체입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/162861f9-f050-445e-8abb-b2c43a918b8b">방법: 그리는 데 필요한 그래픽 개체 만들기</related>
    <related type="Article" href="https://msdn.microsoft.com/library/eb0f6d6f-9e52-4167-9592-ff4b82fb5869">그래픽 프로그래밍 시작</related>
    <related type="Article" href="https://msdn.microsoft.com/library/6207cad1-7a34-4bd6-bfc1-db823ca7a73e">Graphics 개체의 상태 관리</related>
  </Docs>
  <Members>
    <Member MemberName="AddMetafileComment">
      <MemberSignature Language="C#" Value="public void AddMetafileComment (byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMetafileComment(unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.AddMetafileComment(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddMetafileComment (data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddMetafileComment(cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.AddMetafileComment : byte[] -&gt; unit" Usage="graphics.AddMetafileComment data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="data">주석을 포함한 바이트의 배열입니다.</param>
        <summary>현재 <see cref="T:System.Drawing.Imaging.Metafile" />에 주석을 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는이 경우에 유효 <xref:System.Drawing.Graphics> 과 연관 된 <xref:System.Drawing.Imaging.Metafile>합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수인를 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기 뿐만 `thisForm`, <xref:System.Windows.Forms.Form> 예입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   임시 만듭니다 <xref:System.Drawing.Graphics> 메타 파일을 가져옵니다 작성용는 `hdc`, 해당 디바이스 컨텍스트에 대 한 핸들입니다.  
  
-   사용 하 여 새 메타 파일을 만듭니다는 `hdc`합니다.  
  
-   만듭니다는 <xref:System.Drawing.Graphics> 에서 메타 파일의 표시를 <xref:System.Drawing.Imaging.Metafile>입니다.  
  
-   메타 파일에 사각형을 그립니다.  
  
-   메타 파일에 메모를 추가 합니다.  
  
-   삭제 된 <xref:System.Drawing.Graphics> 메타 파일 닫습니다 메타 파일에 대 한 합니다.  
  
-   메타 파일을 삭제 합니다.  
  
-   임시 해제 `hdc`합니다.  
  
-   임시 삭제 <xref:System.Drawing.Graphics>합니다.  
  
-   이전에 만든된 파일에서 두 번째 메타 파일을 만듭니다.  
  
-   화면에 메타 파일을 그립니다.  
  
-   메타 파일을 삭제 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginContainer">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>그래픽 컨테이너를 이 <see cref="T:System.Drawing.Graphics" />의 현재 상태로 저장하고 새 그래픽 컨테이너를 열어 사용합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer () As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer();" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : unit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>그래픽 컨테이너를 이 <see cref="T:System.Drawing.Graphics" />의 현재 상태로 저장하고 새 그래픽 컨테이너를 열어 사용합니다.</summary>
        <returns>이 메서드는 호출되었을 때 이 <see cref="T:System.Drawing.Graphics" />의 상태를 나타내는 <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 합니다 <xref:System.Drawing.Graphics.EndContainer%2A> 중첩 된 graphics 컨테이너를 만드는 방법. Graphics 컨테이너에는 변환, 클리핑 영역 및 렌더링 속성과 같은 그래픽 상태를 유지 합니다.  
  
 호출 하는 경우는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드를 <xref:System.Drawing.Graphics>, 상태를 포함 하는 정보 블록이 <xref:System.Drawing.Graphics> 스택에 배치 됩니다. 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드가 반환 되는 <xref:System.Drawing.Drawing2D.GraphicsContainer> 정보 블록을 식별 하는 합니다. 식별 하는 개체를 전달 하는 경우는 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드 정보 블록 스택에서 제거 되 고 복원 하는 데 사용 되는 <xref:System.Drawing.Graphics> 당시 시점의 상태로 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출 합니다.  
  
 컨테이너는 중첩 될 수 있습니다. 즉, 호출할 수 있습니다 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드를 호출 하기 전에 여러 번의 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드. 호출할 때마다 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 정보 블록을 스택에 배치 되 고 수신 하는 <xref:System.Drawing.Drawing2D.GraphicsContainer> 정보 블록에 대 한 합니다. 해당 개체를 하나 전달 하는 경우는 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드를를 <xref:System.Drawing.Graphics> 당시 시점의 상태로 반환 됩니다 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 는 특정 반환 하는 메서드 호출 <xref:System.Drawing.Drawing2D.GraphicsContainer>. 정보 블록에서 스택에 배치 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출 스택에서 제거 되 고 그 후 해당 스택에 배치 하는 모든 정보 블록 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출도 제거 됩니다.  
  
 에 대 한 호출을 <xref:System.Drawing.Graphics.Save%2A> 메서드 호출 스택의 동일 위치 정보 블록을 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드. 처럼를 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드 호출을 이룹니다를 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출을 <xref:System.Drawing.Graphics.Restore%2A> 메서드 호출을 이룹니다를 <xref:System.Drawing.Graphics.Save%2A> 메서드 호출 합니다.  
  
 호출 하는 경우는 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드를 스택에 배치 된 모든 정보 블록 (여는 <xref:System.Drawing.Graphics.Save%2A> 메서드 또는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드) 해당 호출 후는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 스택에서 제거 됩니다. 마찬가지로 호출 하는 경우는 <xref:System.Drawing.Graphics.Restore%2A> 메서드를 스택에 배치 된 모든 정보 블록 (여는 <xref:System.Drawing.Graphics.Save%2A> 메서드 또는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드) 해당 호출 후는 <xref:System.Drawing.Graphics.Save%2A> 메서드 스택에서 제거 됩니다.  
  
 설정 된 그래픽 상태는 <xref:System.Drawing.Graphics.BeginContainer%2A> 렌더링 품질을 기본 그래픽 상태를 포함 하는 메서드; 메서드를 호출 하는 경우 기존 렌더링 품질 상태 변경 내용은 기본값으로 다시 설정 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   새 그래픽 컨테이너를 열고 이전 컨테이너를 저장 합니다.  
  
-   컨테이너에서 세계 좌표를 변환합니다.  
  
-   빨간색 사각형을 채우는 (의 좌표를 변환 합니다) 새 컨테이너입니다.  
  
-   새 컨테이너를 닫고 저장된 된 컨테이너를 복원 합니다.  
  
-   저장된 된 컨테이너의 녹색 사각형 (변환된 된 좌표)을 채웁니다.  
  
 결과 동일한 크기의 빨간색 사각형 위에 놓입니다 녹색 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.Rectangle dstrect, System.Drawing.Rectangle srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.Rectangle dstrect, valuetype System.Drawing.Rectangle srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As Rectangle, srcrect As Rectangle, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::Rectangle dstrect, System::Drawing::Rectangle srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer (dstrect, srcrect, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect"><paramref name="srcrect" /> 매개 변수로 컨테이너의 크기 조정 변환을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="srcrect"><paramref name="dstrect" /> 매개 변수로 컨테이너의 크기 조정 변환을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="unit">컨테이너의 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <summary>그래픽 컨테이너를 이 <see cref="T:System.Drawing.Graphics" />의 현재 상태로 저장하고 지정된 크기 조정 변환으로 새 그래픽 컨테이너를 열어 사용합니다.</summary>
        <returns>이 메서드는 호출되었을 때 이 <see cref="T:System.Drawing.Graphics" />의 상태를 나타내는 <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 합니다 <xref:System.Drawing.Graphics.EndContainer%2A> 중첩 된 graphics 컨테이너를 만드는 방법. Graphics 컨테이너에는 변환, 클리핑 영역 및 렌더링 속성과 같은 그래픽 상태를 유지 합니다.  
  
 호출 하는 경우는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드를 <xref:System.Drawing.Graphics>, 상태를 포함 하는 정보 블록이 <xref:System.Drawing.Graphics> 스택에 배치 됩니다. 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드가 반환 되는 <xref:System.Drawing.Drawing2D.GraphicsContainer> 정보 블록을 식별 하는 합니다. 식별 하는 개체를 전달 하는 경우는 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드 정보 블록 스택에서 제거 되 고 복원 하는 데 사용 되는 <xref:System.Drawing.Graphics> 당시 시점의 상태로 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출 합니다.  
  
 컨테이너는 중첩 될 수 있습니다. 즉, 호출할 수 있습니다 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드를 호출 하기 전에 여러 번의 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드. 호출할 때마다 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 정보 블록을 스택에 배치 되 고 수신 하는 <xref:System.Drawing.Drawing2D.GraphicsContainer> 정보 블록에 대 한 합니다. 해당 개체를 하나 전달 하는 경우는 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드를를 <xref:System.Drawing.Graphics> 당시 시점의 상태로 반환 됩니다 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 는 특정 반환 하는 메서드 호출 <xref:System.Drawing.Drawing2D.GraphicsContainer>. 정보 블록에서 스택에 배치 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출 스택에서 제거 되 고 그 후 해당 스택에 배치 하는 모든 정보 블록 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출도 제거 됩니다.  
  
 에 대 한 호출을 <xref:System.Drawing.Graphics.Save%2A> 메서드 호출 스택의 동일 위치 정보 블록을 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드. 처럼를 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드 호출을 이룹니다를 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출을 <xref:System.Drawing.Graphics.Restore%2A> 메서드 호출을 이룹니다를 <xref:System.Drawing.Graphics.Save%2A> 메서드 호출 합니다.  
  
 호출 하는 경우는 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드를 스택에 배치 된 모든 정보 블록 (여는 <xref:System.Drawing.Graphics.Save%2A> 메서드 또는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드) 해당 호출 후는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 스택에서 제거 됩니다. 마찬가지로 호출 하는 경우는 <xref:System.Drawing.Graphics.Restore%2A> 메서드를 스택에 배치 된 모든 정보 블록 (여는 <xref:System.Drawing.Graphics.Save%2A> 메서드 또는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드) 해당 호출 후는 <xref:System.Drawing.Graphics.Save%2A> 메서드 스택에서 제거 됩니다.  
  
 이 메서드를 사용 하 여 새 그래픽 컨테이너의 크기 조정 변환을 지정 합니다 `dstrect` 고 `srcrect` 매개 변수입니다. 소수 자릿수가 변환 같음를 적용할 때 `srcrect`, 결과 `dstrect`합니다.  
  
 설정 된 그래픽 상태는 <xref:System.Drawing.Graphics.BeginContainer%2A> 렌더링 품질을 기본 그래픽 상태를 포함 하는 메서드; 메서드를 호출 하는 경우 기존 렌더링 품질 상태 변경 내용은 기본값으로 다시 설정 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   새 컨테이너에 대 한 크기 조정 변환을 지정 하는 두 개의 사각형을 만듭니다.  
  
-   새 그래픽 컨테이너를 열고 이전 컨테이너를 저장 합니다.  
  
-   빨간색 사각형을 채우는 (의 좌표를 조정 합니다) 새 컨테이너입니다.  
  
-   새 컨테이너를 닫고 저장된 된 컨테이너를 복원 합니다.  
  
-   저장된 된 컨테이너의 녹색 사각형 (소수 자릿수가 없는 좌표)을 채웁니다.  
  
 결과 더 작은 빨간색 사각형 위에 놓입니다 녹색 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.RectangleF dstrect, System.Drawing.RectangleF srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.RectangleF dstrect, valuetype System.Drawing.RectangleF srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As RectangleF, srcrect As RectangleF, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::RectangleF dstrect, System::Drawing::RectangleF srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer (dstrect, srcrect, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect"><paramref name="srcrect" /> 매개 변수로 새 그래픽 컨테이너의 크기 조정 변환을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="srcrect"><paramref name="dstrect" /> 매개 변수로 새 그래픽 컨테이너의 크기 조정 변환을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="unit">컨테이너의 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <summary>그래픽 컨테이너를 이 <see cref="T:System.Drawing.Graphics" />의 현재 상태로 저장하고 지정된 크기 조정 변환으로 새 그래픽 컨테이너를 열어 사용합니다.</summary>
        <returns>이 메서드는 호출되었을 때 이 <see cref="T:System.Drawing.Graphics" />의 상태를 나타내는 <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 합니다 <xref:System.Drawing.Graphics.EndContainer%2A> 중첩 된 graphics 컨테이너를 만드는 방법. Graphics 컨테이너에는 변환, 클리핑 영역 및 렌더링 속성과 같은 그래픽 상태를 유지 합니다.  
  
 호출 하는 경우는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드를 <xref:System.Drawing.Graphics>, 상태를 포함 하는 정보 블록이 <xref:System.Drawing.Graphics> 스택에 배치 됩니다. 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드가 반환 되는 <xref:System.Drawing.Drawing2D.GraphicsContainer> 정보 블록을 식별 하는 합니다. 식별 하는 개체를 전달 하는 경우는 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드 정보 블록 스택에서 제거 되 고 복원 하는 데 사용 되는 <xref:System.Drawing.Graphics> 당시 시점의 상태로 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출 합니다.  
  
 컨테이너는 중첩 될 수 있습니다. 즉, 호출할 수 있습니다 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드를 호출 하기 전에 여러 번의 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드. 호출할 때마다 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 정보 블록을 스택에 배치 되 고 수신 하는 <xref:System.Drawing.Drawing2D.GraphicsContainer> 정보 블록에 대 한 합니다. 해당 개체를 하나 전달 하는 경우는 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드를를 <xref:System.Drawing.Graphics> 당시 시점의 상태로 반환 됩니다 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 는 특정 반환 하는 메서드 호출 <xref:System.Drawing.Drawing2D.GraphicsContainer>. 정보 블록에서 스택에 배치 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출 스택에서 제거 되 고 그 후 해당 스택에 배치 하는 모든 정보 블록 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출도 제거 됩니다.  
  
 에 대 한 호출을 <xref:System.Drawing.Graphics.Save%2A> 메서드 호출 스택의 동일 위치 정보 블록을 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드. 처럼를 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드 호출을 이룹니다를 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출을 <xref:System.Drawing.Graphics.Restore%2A> 메서드 호출을 이룹니다를 <xref:System.Drawing.Graphics.Save%2A> 메서드 호출 합니다.  
  
 호출 하는 경우는 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드를 스택에 배치 된 모든 정보 블록 (여는 `Save` 메서드 또는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드) 해당 호출 후는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 스택에서 제거 됩니다. 마찬가지로 호출 하는 경우는 <xref:System.Drawing.Graphics.Restore%2A> 메서드를 스택에 배치 된 모든 정보 블록 (여는 <xref:System.Drawing.Graphics.Save%2A> 메서드 또는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드) 해당 호출 후는 <xref:System.Drawing.Graphics.Save%2A> 메서드 스택에서 제거 됩니다.  
  
 이 메서드를 사용 하 여 새 그래픽 컨테이너의 크기 조정 변환을 지정 합니다 `dstrect` 고 `srcrect` 매개 변수입니다. 소수 자릿수가 변환 같음를 적용할 때 `srcrect`, 결과 `dstrect`합니다.  
  
 설정 된 그래픽 상태는 <xref:System.Drawing.Graphics.BeginContainer%2A> 렌더링 품질을 기본 그래픽 상태를 포함 하는 메서드; 메서드를 호출 하는 경우 기존 렌더링 품질 상태 변경 내용은 기본값으로 다시 설정 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   새 컨테이너에 대 한 크기 조정 변환을 지정 하는 두 개의 사각형을 만듭니다.  
  
-   새 그래픽 컨테이너를 열고 이전 컨테이너를 저장 합니다.  
  
-   빨간색 사각형을 채우는 (의 좌표를 조정 합니다) 새 컨테이너입니다.  
  
-   새 컨테이너를 닫고 저장된 된 컨테이너를 복원 합니다.  
  
-   저장된 된 컨테이너의 녹색 사각형 (소수 자릿수가 없는 좌표)을 채웁니다.  
  
 결과 더 작은 빨간색 사각형 위에 놓입니다 녹색 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Clear(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.Clear : System.Drawing.Color -&gt; unit" Usage="graphics.Clear color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">그리기 화면의 배경색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <summary>전체 그리기 화면을 지우고 지정된 배경색으로 화면을 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.Clear%2A> 메서드 graphics 개체의 상태를 지우고 graphics 개체를 업데이트할 수 없습니다 하는 경우 호출 되지 않아야 합니다. 예를 들어 경우는 <xref:System.Drawing.Graphics.Clear%2A> 메서드는 보안 데스크톱에서 터미널 서버 세션에서는 <xref:System.Runtime.InteropServices.ExternalException> 두면 발생할 수 있습니다는 <xref:System.Drawing.Graphics> 일관 되지 않은 상태의 개체입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드의 그리기 화면을 지우고는 <xref:System.Drawing.Graphics> 청록 시스템 정의 색을 배경색을 가져오거나 설정 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Clip" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Region" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Region ^ Clip { System::Drawing::Region ^ get(); void set(System::Drawing::Region ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Drawing.Region with get, set" Usage="System.Drawing.Graphics.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 그리기 영역을 제한하는 <see cref="T:System.Drawing.Region" />을 가져오거나 설정합니다.</summary>
        <value>현재 그리기에 사용할 수 있는 이 <see cref="T:System.Drawing.Graphics" />의 부분을 제한하는 <see cref="T:System.Drawing.Region" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 수정 합니다 <xref:System.Drawing.Region> 에서 반환 된 개체를 <xref:System.Drawing.Graphics.Clip%2A> 속성으로 후속 그리기 영향을 주지 않습니다는 <xref:System.Drawing.Graphics> 개체입니다. 클립 영역을 변경 하려면 대체 합니다 <xref:System.Drawing.Graphics.Clip%2A> 속성 값을 새 <xref:System.Drawing.Region> 개체입니다. 클리핑 영역 유한 인지를 확인 하려면 검색 된 <xref:System.Drawing.Graphics.Clip%2A> 속성과 호출 해당 <xref:System.Drawing.Region.IsInfinite%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Drawing.Graphics.Clip%2A> 속성입니다. 이 예제에서는 Windows Forms를 사용 하 여 사용 하도록 설계 되었습니다. 양식과 호출 코드를 붙여 합니다 `SetAndFillClip` 폼을 처리 하는 경우 메서드 <xref:System.Windows.Forms.Control.Paint> 이벤트를 전달 `e` 으로 <xref:System.Windows.Forms.PaintEventArgs>합니다.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.GraphicsProperties#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#4)]
 [!code-vb[System.Drawing.GraphicsProperties#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF ClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF ClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.ClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF ClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.ClipBounds : System.Drawing.RectangleF" Usage="System.Drawing.Graphics.ClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역에 대한 경계를 설정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체를 가져옵니다.</summary>
        <value>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역에 대한 경계 사각형을 나타내는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정 하는 결과 사각형의 단위는 <xref:System.Drawing.Graphics.PageUnit%2A> 속성입니다. 기본 단위는 픽셀입니다. <xref:System.Drawing.Graphics> 일반적으로 컨트롤과 연결 된 해당 컨트롤의 클라이언트 영역을 기준으로 사각형의 시작 됩니다.  
  
 클리핑 영역 제하지 없는 경우는 <xref:System.Drawing.Graphics.ClipBounds%2A> 속성 의미 없는 큰 사각형을 반환 합니다. 클리핑 영역 유한 인지를 확인 하려면 검색 된 <xref:System.Drawing.Graphics.Clip%2A> 속성과 호출 해당 <xref:System.Drawing.Region.IsInfinite%2A> 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingMode CompositingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingMode CompositingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingMode As CompositingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingMode CompositingMode { System::Drawing::Drawing2D::CompositingMode get(); void set(System::Drawing::Drawing2D::CompositingMode value); };" />
      <MemberSignature Language="F#" Value="member this.CompositingMode : System.Drawing.Drawing2D.CompositingMode with get, set" Usage="System.Drawing.Graphics.CompositingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />에 합성 이미지가 그려지는 방식을 지정하는 값을 가져옵니다.</summary>
        <value>이 속성은 <see cref="T:System.Drawing.Drawing2D.CompositingMode" /> 열거형의 멤버를 지정합니다. 기본값은 <see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceOver" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 혼합 모드 소스 이미지에서 픽셀 덮어쓰기 배경 픽셀을 사용 하 여 결합 됩니다 되는지 결정 됩니다.  
  
> [!NOTE]
>  사용 하지 않아야를 <xref:System.Drawing.Graphics.CompositingMode%2A> 속성 값 <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> 경우는 <xref:System.Drawing.Graphics.TextRenderingHint%2A> 속성이 <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>합니다. 예외가 발생할 수 있습니다 하거나 이미지가 제대로 렌더링 되지 않을 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingQuality">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingQuality CompositingQuality { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingQuality CompositingQuality" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingQuality" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingQuality As CompositingQuality" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingQuality CompositingQuality { System::Drawing::Drawing2D::CompositingQuality get(); void set(System::Drawing::Drawing2D::CompositingQuality value); };" />
      <MemberSignature Language="F#" Value="member this.CompositingQuality : System.Drawing.Drawing2D.CompositingQuality with get, set" Usage="System.Drawing.Graphics.CompositingQuality" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingQuality</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />에 그려진 합성 이미지의 렌더링 품질을 가져오거나 설정합니다.</summary>
        <value>이 속성은 <see cref="T:System.Drawing.Drawing2D.CompositingQuality" /> 열거형의 멤버를 지정합니다. 기본값은 <see cref="F:System.Drawing.Drawing2D.CompositingQuality.Default" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합성 품질 합성 이미지의 렌더링 품질 수준을 결정합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFromScreen">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>화면에서 <see cref="T:System.Drawing.Graphics" />의 그리기 화면으로 색 데이터 비트 블록 전송을 수행합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (upperLeftSource As Point, upperLeftDestination As Point, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : System.Drawing.Point * System.Drawing.Point * System.Drawing.Size -&gt; unit" Usage="graphics.CopyFromScreen (upperLeftSource, upperLeftDestination, blockRegionSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">소스 사각형의 왼쪽 위 모퉁이에 있는 점입니다.</param>
        <param name="upperLeftDestination">대상 사각형의 왼쪽 위 모퉁이에 있는 점입니다.</param>
        <param name="blockRegionSize">전송할 영역의 크기입니다.</param>
        <summary>픽셀의 사각형에 해당하는 색 데이터를 화면에서 <see cref="T:System.Drawing.Graphics" />의 그리기 화면으로 bitblt(bit-block transfer)합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> 메서드 위에 다른 하나의 이미지 계층에 유용 합니다. 소스 및 대상 색 혼합 되는 방법을 지정 하려면 중 하나를 사용 합니다 <xref:System.Drawing.Graphics.CopyFromScreen%2A> 사용 하는 메서드를 <xref:System.Drawing.CopyPixelOperation> 매개 변수입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Drawing.Graphics.CopyFromScreen%2A> 메서드를 사용하는 방법을 보여 줍니다. 이 예제를 실행 하려면 Windows 폼에 붙여 넣습니다. 양식의 처리 <xref:System.Windows.Forms.Control.Paint> 이벤트 및 호출 합니다 `CopyPixels1` 메서드에서 <xref:System.Windows.Forms.Control.Paint> 전달 하는 이벤트 처리 메서드를 `e` 으로 <xref:System.Windows.Forms.PaintEventArgs>입니다.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">작업을 수행하지 못했습니다.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">모든 windows에 액세스 합니다. 열거형 관련: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />합니다.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">방법: Windows Form 인쇄</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">방법: Windows Forms에서 깜빡임을 줄이기 위한 픽셀 복사</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : System.Drawing.Point * System.Drawing.Point * System.Drawing.Size * System.Drawing.CopyPixelOperation -&gt; unit" Usage="graphics.CopyFromScreen (upperLeftSource, upperLeftDestination, blockRegionSize, copyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" Index="3" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">소스 사각형의 왼쪽 위 모퉁이에 있는 점입니다.</param>
        <param name="upperLeftDestination">대상 사각형의 왼쪽 위 모퉁이에 있는 점입니다.</param>
        <param name="blockRegionSize">전송할 영역의 크기입니다.</param>
        <param name="copyPixelOperation"><see cref="T:System.Drawing.CopyPixelOperation" /> 값 중 하나입니다.</param>
        <summary>픽셀의 사각형에 해당하는 색 데이터를 화면에서 <see cref="T:System.Drawing.Graphics" />의 그리기 화면으로 bitblt(bit-block transfer)합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> 메서드 위에 다른 하나의 이미지 계층에 유용 합니다. `copyPixelOperation` 매개 변수를 지정 하 고 소스 색을 대상 영역의 색과 혼합 해야 하는 방법을 사용 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Drawing.Graphics.CopyFromScreen%2A> 메서드를 사용하는 방법을 보여 줍니다. 이 예제를 실행 하려면 Windows 폼에 붙여 넣습니다. 양식의 처리 <xref:System.Windows.Forms.Control.Paint> 이벤트 및 호출 합니다 `CopyPixels2` 메서드에서 <xref:System.Windows.Forms.Control.Paint> 전달 하는 이벤트 처리 메서드를 `e` 으로 <xref:System.Windows.Forms.PaintEventArgs>입니다.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#5)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="copyPixelOperation" />는 <see cref="T:System.Drawing.CopyPixelOperation" />의 멤버가 아닙니다.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">작업을 수행하지 못했습니다.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">모든 windows에 액세스 합니다. 열거형 관련: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />합니다.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">방법: Windows Form 인쇄</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">방법: Windows Forms에서 깜빡임을 줄이기 위한 픽셀 복사</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (sourceX As Integer, sourceY As Integer, destinationX As Integer, destinationY As Integer, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : int * int * int * int * System.Drawing.Size -&gt; unit" Usage="graphics.CopyFromScreen (sourceX, sourceY, destinationX, destinationY, blockRegionSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="sourceY" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="destinationX" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="destinationY" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" Index="4" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceX">원본 사각형 왼쪽 위 모퉁이에 있는 점의 x-좌표입니다.</param>
        <param name="sourceY">원본 사각형 왼쪽 위 모퉁이에 있는 점의 y-좌표입니다.</param>
        <param name="destinationX">대상 사각형 왼쪽 위 모퉁이에 있는 점의 x-좌표입니다.</param>
        <param name="destinationY">대상 사각형 왼쪽 위 모퉁이에 있는 점의 y-좌표입니다.</param>
        <param name="blockRegionSize">전송할 영역의 크기입니다.</param>
        <summary>화면에서 <see cref="T:System.Drawing.Graphics" />의 그리기 화면으로 픽셀의 사각형에 해당하는 색 데이터 비트 블록 전송을 수행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> 메서드 위에 다른 하나의 이미지 계층에 유용 합니다. 소스 및 대상 색 혼합 되는 방법을 지정 하려면 중 하나를 사용 합니다 <xref:System.Drawing.Graphics.CopyFromScreen%2A> 사용 하는 메서드를 <xref:System.Drawing.CopyPixelOperation> 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Drawing.Graphics.CopyFromScreen%2A> 현재 폼의 복사본을 인쇄 합니다.  
  
 [!code-csharp[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">작업을 수행하지 못했습니다.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">모든 windows에 액세스 합니다. 열거형 관련: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />합니다.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">방법: Windows Form 인쇄</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">방법: Windows Forms에서 깜빡임을 줄이기 위한 픽셀 복사</related>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : int * int * int * int * System.Drawing.Size * System.Drawing.CopyPixelOperation -&gt; unit" Usage="graphics.CopyFromScreen (sourceX, sourceY, destinationX, destinationY, blockRegionSize, copyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="sourceY" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="destinationX" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="destinationY" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" Index="4" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" Index="5" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceX">원본 사각형 왼쪽 위 모퉁이에 있는 점의 x-좌표입니다.</param>
        <param name="sourceY">소스 사각형의 왼쪽 위 모퉁이에 있는 점의 Y 좌표입니다.</param>
        <param name="destinationX">대상 사각형 왼쪽 위 모퉁이에 있는 점의 x-좌표입니다.</param>
        <param name="destinationY">대상 사각형 왼쪽 위 모퉁이에 있는 점의 y-좌표입니다.</param>
        <param name="blockRegionSize">전송할 영역의 크기입니다.</param>
        <param name="copyPixelOperation"><see cref="T:System.Drawing.CopyPixelOperation" /> 값 중 하나입니다.</param>
        <summary>화면에서 <see cref="T:System.Drawing.Graphics" />의 그리기 화면으로 픽셀의 사각형에 해당하는 색 데이터 비트 블록 전송을 수행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.CopyFromScreen%2A> 메서드 위에 다른 하나의 이미지 계층에 유용 합니다. `copyPixelOperation` 매개 변수를 지정 하 고 소스 색을 대상 영역의 색과 혼합 해야 하는 방법을 사용 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Drawing.Graphics.CopyFromScreen%2A> 메서드를 사용하는 방법을 보여 줍니다. 이 예제를 실행 하려면 Windows 폼에 붙여 넣습니다. 양식의 처리 <xref:System.Windows.Forms.Control.Paint> 이벤트 및 호출 합니다 `CopyPixels4` 메서드에서 <xref:System.Windows.Forms.Control.Paint> 전달 하는 이벤트 처리 메서드를 `e` 으로 <xref:System.Windows.Forms.PaintEventArgs>입니다.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#7)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="copyPixelOperation" />는 <see cref="T:System.Drawing.CopyPixelOperation" />의 멤버가 아닙니다.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">작업을 수행하지 못했습니다.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">모든 windows에 액세스 합니다. 열거형 관련: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />합니다.</permission>
        <related type="Article" href="https://msdn.microsoft.com/library/c8dff5f8-f56a-4c07-ae31-64643b31f8fc">방법: Windows Form 인쇄</related>
        <related type="Article" href="https://msdn.microsoft.com/library/33b76910-13a3-4521-be98-5c097341ae3b">방법: Windows Forms에서 깜빡임을 줄이기 위한 픽셀 복사</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="graphics.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />에서 사용하는 리소스를 모두 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 <xref:System.Drawing.Graphics.Dispose%2A> 이 사용 하는 리소스 <xref:System.Drawing.Graphics> 다른 용도로 다시 할당 될 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   만듭니다는 <xref:System.Drawing.Image> 예제 디렉터리에 파일 예제 그래픽에서 합니다.  
  
-   만듭니다는 <xref:System.Drawing.Graphics> 에서 <xref:System.Drawing.Image>합니다.  
  
-   그 사각형을 입력 하 여 이미지를 변경 합니다.  
  
-   그립니다는 <xref:System.Drawing.Image> 화면.  
  
-   만들어진 해제 <xref:System.Drawing.Graphics>합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiX">
      <MemberSignature Language="C#" Value="public float DpiX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiX" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiX" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiX { float get(); };" />
      <MemberSignature Language="F#" Value="member this.DpiX : single" Usage="System.Drawing.Graphics.DpiX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 가로 해상도를 가져옵니다.</summary>
        <value>이 <see cref="T:System.Drawing.Graphics" />에서 지원하는 가로 해상도 값(dpi)입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 고해상도 애플리케이션을 만드는 방법에 대 한 자세한 내용은 참조 하세요.  
  
 [높은 DPI](https://go.microsoft.com/fwlink/?LinkId=159804)합니다.  
  
   
  
## Examples  
 다음 메서드 사용을 보여 줍니다.는 <xref:System.Drawing.Graphics.DpiX%2A> 고 <xref:System.Drawing.Graphics.DpiY%2A> 속성입니다. 이 예제는 Windows 폼을 사용 합니다. 이 예제를 실행 하려면 포함 된 폼에 붙여넣습니다는 <xref:System.Windows.Forms.ListBox> listBox1 라는 및 폼의 생성자에서이 메서드를 호출 합니다.  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=159804">높은 DPI</related>
      </Docs>
    </Member>
    <Member MemberName="DpiY">
      <MemberSignature Language="C#" Value="public float DpiY { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiY" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiY" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiY { float get(); };" />
      <MemberSignature Language="F#" Value="member this.DpiY : single" Usage="System.Drawing.Graphics.DpiY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 세로 해상도를 가져옵니다.</summary>
        <value>이 <see cref="T:System.Drawing.Graphics" />에서 지원하는 세로 해상도 값(dpi)입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 고해상도 애플리케이션을 만드는 방법에 대 한 자세한 내용은 참조 하세요.  
  
 [높은 DPI](https://go.microsoft.com/fwlink/?LinkId=159804)합니다.  
  
   
  
## Examples  
 다음 메서드 사용을 보여 줍니다.는 <xref:System.Drawing.Graphics.DpiX%2A> 고 <xref:System.Drawing.Graphics.DpiY%2A> 속성입니다. 이 예제는 Windows 폼을 사용 합니다. 이 예제를 실행 하려면 포함 된 폼에 붙여넣습니다는 <xref:System.Windows.Forms.ListBox> listBox1 라는 및 폼의 생성자에서이 메서드를 호출 합니다.  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=159804">높은 DPI</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawArc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>좌표, 너비, 높이의 쌍으로 지정된 타원의 부분을 나타내는 호를 그립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.DrawArc (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">호의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="rect">타원의 경계를 정의하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="startAngle">X축에서 호의 시작점까지 시계 방향으로 측정된 각도(단위: 도)입니다.</param>
        <param name="sweepAngle"><paramref name="startAngle" /> 매개 변수에서 호의 끝점까지 시계 방향으로 측정된 각도(단위: 도)입니다.</param>
        <summary><see cref="T:System.Drawing.Rectangle" /> 구조체에서 지정한 타원의 부분을 나타내는 호를 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 타원의 경계의 일부는 호를 그립니다. 타원은 사각형의 경계에 의해 정의 됩니다. 호는 경계 간에 타원의 부분을 `startAngle` 매개 변수 및 `startAngle`  +  `sweepAngle` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   타원을 바인딩된 사각형을 만듭니다.  
  
-   시작 (45도) 및 (270) 스윕 각도 정의합니다.  
  
-   화면에 타원형 호를 그립니다.  
  
 결과 사이 있는 세그먼트를 누락 된 부분 타원을 + 및-x 축의 45도 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * System.Drawing.RectangleF * single * single -&gt; unit" Usage="graphics.DrawArc (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">호의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="rect">타원의 경계를 정의하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="startAngle">X축에서 호의 시작점까지 시계 방향으로 측정된 각도(단위: 도)입니다.</param>
        <param name="sweepAngle"><paramref name="startAngle" /> 매개 변수에서 호의 끝점까지 시계 방향으로 측정된 각도(단위: 도)입니다.</param>
        <summary><see cref="T:System.Drawing.RectangleF" /> 구조체에서 지정한 타원의 부분을 나타내는 호를 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 타원의 경계의 일부는 호를 그립니다. 타원은 사각형의 경계에 의해 정의 됩니다. 호는 경계 간에 타원의 부분을 `startAngle` 매개 변수 및 `startAngle`  +  `sweepAngle` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   타원을 바인딩된 사각형을 만듭니다.  
  
-   시작 (45도) 및 (270) 스윕 각도 정의합니다.  
  
-   화면에 타원형 호를 그립니다.  
  
 결과 사이 있는 세그먼트를 누락 된 부분 타원을 + 및-x 축의 45도 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * int * int * int * int * int * int -&gt; unit" Usage="graphics.DrawArc (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">호의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="x">타원을 정의하는 사각형의 왼쪽 위 모퉁이에 대한 X좌표입니다.</param>
        <param name="y">타원을 정의하는 사각형의 왼쪽 위 모퉁이에 대한 Y좌표입니다.</param>
        <param name="width">타원을 정의하는 사각형의 너비입니다.</param>
        <param name="height">타원을 정의하는 사각형의 높이입니다.</param>
        <param name="startAngle">X축에서 호의 시작점까지 시계 방향으로 측정된 각도(단위: 도)입니다.</param>
        <param name="sweepAngle"><paramref name="startAngle" /> 매개 변수에서 호의 끝점까지 시계 방향으로 측정된 각도(단위: 도)입니다.</param>
        <summary>좌표, 너비, 높이의 쌍으로 지정된 타원의 부분을 나타내는 호를 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 타원의 경계의 일부는 호를 그립니다. 타원은 사각형의 경계에 의해 정의 됩니다. 호는 경계 간에 타원의 부분을 `startAngle` 매개 변수 및 `startAngle`  +  `sweepAngle` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   타원의 경계가 사각형의 크기와 위치를 만듭니다.  
  
-   시작 (45도) 및 (270) 스윕 각도 정의합니다.  
  
-   화면에 타원형 호를 그립니다.  
  
 결과 사이 있는 세그먼트를 누락 된 부분 타원을 + 및-x 축의 45도 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawArc (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">호의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="x">타원을 정의하는 사각형의 왼쪽 위 모퉁이에 대한 X좌표입니다.</param>
        <param name="y">타원을 정의하는 사각형의 왼쪽 위 모퉁이에 대한 Y좌표입니다.</param>
        <param name="width">타원을 정의하는 사각형의 너비입니다.</param>
        <param name="height">타원을 정의하는 사각형의 높이입니다.</param>
        <param name="startAngle">X축에서 호의 시작점까지 시계 방향으로 측정된 각도(단위: 도)입니다.</param>
        <param name="sweepAngle"><paramref name="startAngle" /> 매개 변수에서 호의 끝점까지 시계 방향으로 측정된 각도(단위: 도)입니다.</param>
        <summary>좌표, 너비, 높이의 쌍으로 지정된 타원의 부분을 나타내는 호를 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 타원의 경계의 일부는 호를 그립니다. 타원은 사각형의 경계에 의해 정의 됩니다. 호는 경계 간에 타원의 부분을 `startAngle` 매개 변수 및 `startAngle`  +  `sweepAngle` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   타원의 경계가 사각형의 크기와 위치를 만듭니다.  
  
-   시작 (45도) 및 (270) 스윕 각도 정의합니다.  
  
-   화면에 타원형 호를 그립니다.  
  
 결과 사이 있는 세그먼트를 누락 된 부분 타원을 + 및-x 축의 45도 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#10)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#10)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBezier">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>네 개의 <see cref="T:System.Drawing.Point" /> 구조체로 정의되는 3차원 곡선 스플라인을 그립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2, valuetype System.Drawing.Point pt3, valuetype System.Drawing.Point pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2, System::Drawing::Point pt3, System::Drawing::Point pt4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * System.Drawing.Point * System.Drawing.Point * System.Drawing.Point * System.Drawing.Point -&gt; unit" Usage="graphics.DrawBezier (pen, pt1, pt2, pt3, pt4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
        <Parameter Name="pt3" Type="System.Drawing.Point" />
        <Parameter Name="pt4" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">곡선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" /> 구조체입니다.</param>
        <param name="pt1">곡선의 시작점을 나타내는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <param name="pt2">곡선의 첫째 제어점을 나타내는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <param name="pt3">곡선의 둘째 제어점을 나타내는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <param name="pt4">곡선의 끝점을 나타내는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <summary>네 개의 <see cref="T:System.Drawing.Point" /> 구조체로 정의되는 3차원 곡선 스플라인을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 베 지 어 곡선의 첫 번째 요소에서 네 번째 지점에 그려집니다. 두 번째 및 세 번째 요소는 곡선의 모양을 결정 하는 컨트롤 요소입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   시작, 종료 및 곡선에 대 한 두 개의 제어점을 만듭니다.  
  
-   화면에 베 지 어 곡선을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2, valuetype System.Drawing.PointF pt3, valuetype System.Drawing.PointF pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2, System::Drawing::PointF pt3, System::Drawing::PointF pt4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * System.Drawing.PointF * System.Drawing.PointF * System.Drawing.PointF * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawBezier (pen, pt1, pt2, pt3, pt4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
        <Parameter Name="pt3" Type="System.Drawing.PointF" />
        <Parameter Name="pt4" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">곡선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="pt1">곡선의 시작점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <param name="pt2">곡선의 첫째 제어점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <param name="pt3">곡선의 둘째 제어점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <param name="pt4">곡선의 끝점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <summary>네 개의 <see cref="T:System.Drawing.PointF" /> 구조체로 정의되는 3차원 곡선 스플라인을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 베 지 어 스플라인은 첫 번째 요소에서 네 번째 지점에 그려집니다. 두 번째 및 세 번째 요소는 곡선의 모양을 결정 하는 컨트롤 요소입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   시작, 종료 및 곡선에 대 한 두 개의 제어점을 만듭니다.  
  
-   화면에 베 지 어 곡선을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#12)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#12)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2, float32 x3, float32 y3, float32 x4, float32 y4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * single * single * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawBezier (pen, x1, y1, x2, y2, x3, y3, x4, y4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
        <Parameter Name="x3" Type="System.Single" />
        <Parameter Name="y3" Type="System.Single" />
        <Parameter Name="x4" Type="System.Single" />
        <Parameter Name="y4" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">곡선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="x1">곡선의 시작점에 대한 X좌표입니다.</param>
        <param name="y1">곡선의 시작점에 대한 Y좌표입니다.</param>
        <param name="x2">곡선의 첫째 제어점에 대한 X좌표입니다.</param>
        <param name="y2">곡선의 첫째 제어점에 대한 Y좌표입니다.</param>
        <param name="x3">곡선의 둘째 제어점에 대한 X좌표입니다.</param>
        <param name="y3">곡선의 둘째 제어점에 대한 Y좌표입니다.</param>
        <param name="x4">곡선의 끝점에 대한 X좌표입니다.</param>
        <param name="y4">곡선의 끝점에 대한 Y좌표입니다.</param>
        <summary>점을 나타내는 순서가 있는 네 개의 좌표 쌍에 의해 정의되는 3차원 곡선 스플라인을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 베 지 어 스플라인은 첫 번째 요소에서 네 번째 지점에 그려집니다. 두 번째 및 세 번째 요소는 곡선의 모양을 결정 하는 컨트롤 요소입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   시작, 종료 및 곡선에 대 한 두 개의 제어점 좌표를 만듭니다.  
  
-   화면에 베 지 어 곡선을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#13)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#13)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBeziers">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>일련의 3차원 곡선 스플라인을 <see cref="T:System.Drawing.Point" /> 구조체의 배열에서 그립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawBeziers : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawBeziers (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">곡선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">곡선을 결정하는 점을 나타내는 <see cref="T:System.Drawing.Point" /> 구조체의 배열입니다. 배열의 점 수는 3의 배수에 1을 더한 값이어야 합니다(예: 4, 7, 10 등).</param>
        <summary>일련의 3차원 곡선 스플라인을 <see cref="T:System.Drawing.Point" /> 구조체의 배열에서 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 배열의 점 개수 첫 번째 스플라인 4 개의 점이 필요 하 고 다른 스플라인 필요한 3 개의 점 때문에 1을 더한 3의 배수 여야 합니다. 첫 번째 베 지 어 스플라인은 첫 번째 요소에서 점 배열에서 네 번째 요소에 그려집니다. 두 번째 및 세 번째 요소는 곡선의 모양을 결정 하는 컨트롤 요소입니다. 각 후속 곡선 정확히 세 개 이상의 점 해야 합니다: 두 개 이상의 지점 및 끝 지점 제어 합니다. 이전 곡선의 끝 지점은 각 추가 곡선에 대 한 시작 점으로 사용 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   시작, 종료 및 첫 번째 곡선 및 끝점에 대 한 두 개의 제어점과 두 번째 곡선을 두 개의 제어 지점을 만듭니다.  
  
-   화면에 연속 된 베 지 어 곡선을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#14)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#14)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawBeziers : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawBeziers (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">곡선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">곡선을 결정하는 점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열입니다. 배열의 점 수는 3의 배수에 1을 더한 값이어야 합니다(예: 4, 7, 10 등).</param>
        <summary>일련의 3차원 곡선 스플라인을 <see cref="T:System.Drawing.PointF" /> 구조체의 배열에서 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 배열의 점 개수 첫 번째 스플라인 4 개의 점이 필요 하 고 다른 스플라인 필요한 3 개의 점 때문에 1을 더한 3의 배수 여야 합니다. 첫 번째 베 지 어 곡선의 첫 번째 요소에서 점 배열에서 네 번째 요소에 그려집니다. 두 번째 및 세 번째 요소는 곡선의 모양을 결정 하는 컨트롤 요소입니다. 각 후속 곡선 정확히 세 개 이상의 점 해야 합니다: 두 개 이상의 지점 및 끝 지점 제어 합니다. 이전 곡선의 끝 지점은 각 추가 곡선에 대 한 시작 점으로 사용 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   시작, 종료 및 첫 번째 곡선 및 끝점에 대 한 두 개의 제어점과 두 번째 곡선을 두 개의 제어 지점을 만듭니다.  
  
-   화면에 연속 된 베 지 어 곡선을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#15)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#15)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Point" /> 구조체의 배열에 의해 정의되는 닫힌 카디널 스플라인을 그립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">곡선의 색, 너비 및 높이를 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">스플라인을 정의하는 <see cref="T:System.Drawing.Point" /> 구조체의 배열입니다.</param>
        <summary><see cref="T:System.Drawing.Point" /> 구조체의 배열에 의해 정의되는 닫힌 카디널 스플라인을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 폐쇄형된 카디널 스플라인을 그립니다. 마지막 지점을 첫 번째 요소와 일치 하지 않는 경우 추가 곡선 세그먼트를 그림을 닫으면 첫 번째 지점과 마지막 지점에서 추가 됩니다.  
  
 점 배열에 4 개 이상 있어야 <xref:System.Drawing.Point> 구조입니다.  
  
 이 메서드는 0.5의 기본 장력을 사용 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 및 녹색 펜을 만듭니다.  
  
-   7 개의 점이 곡선을 만듭니다.  
  
-   닫힌 다각형는 7 개의 점이 간의 7 빨간색 직선을 그립니다.  
  
-   7 개의 점이 녹색 닫힌된 곡선을 그립니다.  
  
 메서드는 0.5의 기본 장력을 사용 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#16)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#16)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">곡선의 색, 너비 및 높이를 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">스플라인을 정의하는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열입니다.</param>
        <summary><see cref="T:System.Drawing.PointF" /> 구조체의 배열에 의해 정의되는 닫힌 카디널 스플라인을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 폐쇄형된 카디널 스플라인을 그립니다. 마지막 지점을 첫 번째 요소와 일치 하지 않는 경우 추가 곡선 세그먼트를 닫아야를 첫 번째 지점과 마지막 지점에서 추가 됩니다.  
  
 점 배열에 4 개 이상 있어야 <xref:System.Drawing.PointF> 구조입니다.  
  
 이 메서드는 0.5의 기본 장력을 사용 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 및 녹색 펜을 만듭니다.  
  
-   7 개의 점이 곡선을 만듭니다.  
  
-   닫힌 다각형는 7 개의 점이 간의 7 빨간색 직선을 그립니다.  
  
-   7 개의 점이 녹색 닫힌된 곡선을 그립니다.  
  
 메서드는 0.5의 기본 장력을 사용 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#18)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#18)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.Point[] * single * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points, tension, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">곡선의 색, 너비 및 높이를 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">스플라인을 정의하는 <see cref="T:System.Drawing.Point" /> 구조체의 배열입니다.</param>
        <param name="tension">곡선의 장력을 지정하는 0.0F 보다 크거나 같은 값입니다.</param>
        <param name="fillmode">곡선이 채워지는 방법을 결정하는 <see cref="T:System.Drawing.Drawing2D.FillMode" /> 열거형의 멤버입니다. 이 매개 변수는 필수이지만 무시됩니다.</param>
        <summary>지정된 장력을 사용하여 <see cref="T:System.Drawing.Point" /> 구조체의 배열에 의해 정의되는 닫힌 카디널 스플라인을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 폐쇄형된 카디널 스플라인을 그립니다. 마지막 지점을 첫 번째 요소와 일치 하지 않는 경우 추가 곡선 세그먼트를 닫아야를 첫 번째 지점과 마지막 지점에서 추가 됩니다.  
  
 점 배열에 4 개 이상 있어야 <xref:System.Drawing.Point> 구조입니다.  
  
 `tension` 매개 변수는 스플라인의 모양을 결정 합니다. 경우 값은 `tension` 매개 변수는 0.0F,이 메서드는 요소를 연결 하려면 직선 세그먼트를 그립니다. 일반적으로 `tension` 매개 변수 보다 작거나 1.0F로는 합니다. 1.0F 값 이상한 결과 생성합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 및 녹색 펜을 만듭니다.  
  
-   7 개의 점이 곡선을 만듭니다.  
  
-   다각형을 7 개의 점이 간의 7 빨간색 직선을 그립니다.  
  
-   장력을 채우기 모드 설정을 만듭니다.  
  
-   7 개의 점이 녹색 닫힌된 곡선을 그립니다.  
  
 1.0의 장력을 사용 하 여 메서드와 채우기 모드를 설정 `FillMode.Alternate`합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#17)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#17)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.PointF[] * single * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points, tension, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">곡선의 색, 너비 및 높이를 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">스플라인을 정의하는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열입니다.</param>
        <param name="tension">곡선의 장력을 지정하는 0.0F 보다 크거나 같은 값입니다.</param>
        <param name="fillmode">곡선이 채워지는 방법을 결정하는 <see cref="T:System.Drawing.Drawing2D.FillMode" /> 열거형의 멤버입니다. 이 매개 변수는 필수이지만 무시됩니다.</param>
        <summary>지정된 장력을 사용하여 <see cref="T:System.Drawing.PointF" /> 구조체의 배열에 의해 정의되는 닫힌 카디널 스플라인을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 폐쇄형된 카디널 스플라인을 그립니다. 마지막 지점을 첫 번째 요소와 일치 하지 않는 경우 추가 곡선 세그먼트를 닫아야를 첫 번째 지점과 마지막 지점에서 추가 됩니다.  
  
 점 배열에 4 개 이상 있어야 <xref:System.Drawing.PointF> 구조입니다.  
  
 `tension` 매개 변수는 스플라인의 모양을 결정 합니다. 경우 값은 `tension` 매개 변수는 0.0F,이 메서드는 요소를 연결 하려면 직선 세그먼트를 그립니다. 일반적으로 `tension` 매개 변수 보다 작거나 1.0F로는 합니다. 1.0F 값 이상한 결과 생성합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 및 녹색 펜을 만듭니다.  
  
-   7 개의 점이 곡선을 만듭니다.  
  
-   다각형을 7 개의 점이 간의 7 빨간색 직선을 그립니다.  
  
-   장력을 채우기 모드 설정을 만듭니다.  
  
-   7 개의 점이 녹색 닫힌된 곡선을 그립니다.  
  
 1.0의 장력을 사용 하 여 메서드와 채우기 모드를 설정 `FillMode.Alternate`합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#19)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#19)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Point" /> 구조체의 지정된 배열을 따라 카디널 스플라인을 그립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">곡선의 색, 너비 및 높이를 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">스플라인을 정의하는 <see cref="T:System.Drawing.Point" /> 구조체의 배열입니다.</param>
        <summary><see cref="T:System.Drawing.Point" /> 구조체의 지정된 배열을 따라 카디널 스플라인을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 카디널 스플라인을 그립니다.  
  
 점 배열에는 세 가지 이상을 포함 해야 합니다 <xref:System.Drawing.Point> 는 곡선을 그릴 수 있도록 합니다.  
  
 이 메서드는 0.5의 기본 장력을 사용 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 및 녹색 펜을 만듭니다.  
  
-   7 개의 점이 곡선을 만듭니다.  
  
-   불완전 한 다각형을 7 개의 점이 사이 6 빨간색 직선을 그립니다.  
  
-   7 개의 점이 통해 열린 녹색 곡선을 그립니다.  
  
 메서드는 0.5의 기본 장력을 사용 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#20)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#20)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">곡선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">스플라인을 정의하는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열입니다.</param>
        <summary><see cref="T:System.Drawing.PointF" /> 구조체의 지정된 배열을 따라 카디널 스플라인을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 카디널 스플라인을 그립니다.  
  
 점 배열에는 세 가지 이상을 포함 해야 합니다 <xref:System.Drawing.PointF> 는 곡선을 그릴 수 있도록 합니다.  
  
 이 메서드는 0.5의 기본 장력을 사용 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 및 녹색 펜을 만듭니다.  
  
-   7 개의 점이 곡선을 만듭니다.  
  
-   불완전 한 다각형을 7 개의 점이 사이 6 빨간색 직선을 그립니다.  
  
-   7 개의 점이 통해 열린 녹색 곡선을 그립니다.  
  
 메서드는 0.5의 기본 장력을 사용 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#23)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#23)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">곡선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">스플라인을 정의하는 <see cref="T:System.Drawing.Point" /> 구조체의 배열입니다.</param>
        <param name="tension">곡선의 장력을 지정하는 0.0F 보다 크거나 같은 값입니다.</param>
        <summary>지정된 장력을 사용하여 <see cref="T:System.Drawing.Point" /> 구조체의 지정된 배열을 따라 카디널 스플라인을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 카디널 스플라인을 그립니다.  
  
 점 배열에는 세 가지 이상을 포함 해야 합니다 <xref:System.Drawing.Point> 는 곡선을 그릴 수 있도록 합니다.  
  
 `tension` 매개 변수는 스플라인의 모양을 결정 합니다. 경우 값은 `tension` 매개 변수는 0.0F,이 메서드는 요소를 연결 하려면 직선 세그먼트를 그립니다. 일반적으로 `tension` 매개 변수 보다 작거나 1.0F로는 합니다. 1.0F 값 이상한 결과 생성합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 및 녹색 펜을 만듭니다.  
  
-   7 개의 점이 곡선을 만듭니다.  
  
-   불완전 한 다각형을 7 개의 점이 사이 6 빨간색 직선을 그립니다.  
  
-   장력 설정을 만듭니다.  
  
-   7 개의 점이 통해 열린 녹색 닫힌된 곡선을 그립니다.  
  
 메서드는 1.0의 장력을 사용 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#22)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#22)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">곡선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">곡선을 정의하는 점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열입니다.</param>
        <param name="tension">곡선의 장력을 지정하는 0.0F 보다 크거나 같은 값입니다.</param>
        <summary>지정된 장력을 사용하여 <see cref="T:System.Drawing.PointF" /> 구조체의 지정된 배열을 따라 카디널 스플라인을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 카디널 스플라인을 그립니다.  
  
 점 배열에는 세 가지 이상을 포함 해야 합니다 <xref:System.Drawing.PointF> 는 곡선을 그릴 수 있도록 합니다.  
  
 `tension` 매개 변수는 스플라인의 모양을 결정 합니다. 경우 값은 `tension` 매개 변수는 0.0F,이 메서드는 요소를 연결 하려면 직선 세그먼트를 그립니다. 일반적으로 `tension` 매개 변수 보다 작거나 1.0F로는 합니다. 1.0F 값 이상한 결과 생성합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 및 녹색 펜을 만듭니다.  
  
-   7 개의 점이 곡선을 만듭니다.  
  
-   불완전 한 다각형을 7 개의 점이 사이 6 빨간색 직선을 그립니다.  
  
-   장력 설정을 만듭니다.  
  
-   7 개의 점이 통해 열린 녹색 닫힌된 곡선을 그립니다.  
  
 메서드는 1.0의 장력을 사용 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#26)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#26)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * int * int -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">곡선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">스플라인을 정의하는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열입니다.</param>
        <param name="offset"><paramref name="points" /> 매개 변수 배열의 첫째 요소에서 곡선의 시작점까지의 오프셋입니다.</param>
        <param name="numberOfSegments">시작점 다음부터 곡선에 포함될 세그먼트의 수입니다.</param>
        <summary><see cref="T:System.Drawing.PointF" /> 구조체의 지정된 배열을 따라 카디널 스플라인을 그립니다. 그리기는 배열의 시작에서 오프셋을 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 카디널 스플라인을 그립니다.  
  
 점 배열에는 세 가지 이상을 포함 해야 합니다 <xref:System.Drawing.PointF> 는 곡선을 그릴 수 있도록 합니다.  
  
 값을 `offset` 매개 변수 배열에서 건너뛸 요소 수를 지정 합니다. 건너뛴된 요소 앞의 첫 번째 요소에는 곡선의 시작점을 나타냅니다.  
  
 값을 `numberOfSegments` 매개 변수를 그리는 곡선의 시작점을 후 세그먼트의 수를 지정 합니다. 값을 `numberOfSegments` 매개 변수는 1 이상 이어야 합니다. 값을 `offset` 매개 변수 값의 합 합니다 `numberOfSegments` 매개 변수 배열의 요소 개수 보다 작아야를 `points` 매개 변수.  
  
 이 메서드는 0.5의 기본 장력을 사용 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 및 녹색 펜을 만듭니다.  
  
-   7 개의 점이 곡선을 만듭니다.  
  
-   불완전 한 다각형을 7 개의 점이 사이 6 빨간색 직선을 그립니다.  
  
-   시작 지점 오프셋 및 세그먼트의 수를 정의합니다.  
  
-   마지막 다섯 개 지점을 통해 열린 녹색 곡선 (세 번째 요소부터 시작)를 그립니다.  
  
 메서드는 0.5의 기본 장력을 사용 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#24)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#24)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] * int * int * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">곡선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">스플라인을 정의하는 <see cref="T:System.Drawing.Point" /> 구조체의 배열입니다.</param>
        <param name="offset"><paramref name="points" /> 매개 변수 배열의 첫째 요소에서 곡선의 시작점까지의 오프셋입니다.</param>
        <param name="numberOfSegments">시작점 다음부터 곡선에 포함될 세그먼트의 수입니다.</param>
        <param name="tension">곡선의 장력을 지정하는 0.0F 보다 크거나 같은 값입니다.</param>
        <summary>지정된 장력을 사용하여 <see cref="T:System.Drawing.Point" /> 구조체의 지정된 배열을 따라 카디널 스플라인을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 카디널 스플라인을 그립니다.  
  
 점 배열에는 세 가지 이상을 포함 해야 합니다 <xref:System.Drawing.Point> 는 곡선을 그릴 수 있도록 합니다.  
  
 값을 `offset` 매개 변수 배열에서 건너뛸 요소 수를 지정 합니다. 건너뛴된 요소 앞의 첫 번째 요소에는 곡선의 시작점을 나타냅니다.  
  
 값을 `numberOfSegments` 매개 변수를 그리는 곡선의 시작점을 후 세그먼트의 수를 지정 합니다. 값을 `numberOfSegments` 매개 변수는 1 이상 이어야 합니다. 값을 `offset` 매개 변수 값의 합 합니다 `numberOfSegments` 매개 변수 배열의 요소 개수 보다 작아야를 `points` 매개 변수.  
  
 `tension` 매개 변수는 스플라인의 모양을 결정 합니다. 경우 값은 `tension` 매개 변수는 0.0F,이 메서드는 요소를 연결 하려면 직선 세그먼트를 그립니다. 일반적으로 `tension` 매개 변수 보다 작거나 1.0F로는 합니다. 1.0F 값 이상한 결과 생성합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 및 녹색 펜을 만듭니다.  
  
-   7 개의 점이 곡선을 만듭니다.  
  
-   불완전 한 다각형을 7 개의 점이 사이 6 빨간색 직선을 그립니다.  
  
-   시작 지점 오프셋 및 세그먼트의 수를 정의합니다.  
  
-   장력을 정의합니다.  
  
-   마지막 다섯 개 지점을 통해 열린 녹색 곡선 (세 번째 요소부터 시작)를 그립니다.  
  
 메서드는 1.0 장력을 설정합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#21)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#21)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * int * int * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">곡선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">스플라인을 정의하는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열입니다.</param>
        <param name="offset"><paramref name="points" /> 매개 변수 배열의 첫째 요소에서 곡선의 시작점까지의 오프셋입니다.</param>
        <param name="numberOfSegments">시작점 다음부터 곡선에 포함될 세그먼트의 수입니다.</param>
        <param name="tension">곡선의 장력을 지정하는 0.0F 보다 크거나 같은 값입니다.</param>
        <summary>지정된 장력을 사용하여 <see cref="T:System.Drawing.PointF" /> 구조체의 지정된 배열을 따라 카디널 스플라인을 그립니다. 그리기는 배열의 시작에서 오프셋을 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 카디널 스플라인을 그립니다.  
  
 점 배열에는 세 가지 이상을 포함 해야 합니다 <xref:System.Drawing.PointF> 곡선을 그릴 수 있도록 합니다.  
  
 값을 `offset` 매개 변수 배열에서 건너뛸 요소 수를 지정 합니다. 건너뛴된 요소 앞의 첫 번째 요소에는 곡선의 시작점을 나타냅니다.  
  
 값을 `numberOfSegments` 매개 변수를 그리는 곡선의 시작점을 후 세그먼트의 수를 지정 합니다. 값을 `numberOfSegments` 매개 변수는 1 이상 이어야 합니다. 값을 `offset` 매개 변수 값의 합 합니다 `numberOfSegments` 매개 변수 배열의 요소 개수 보다 작아야를 `points` 매개 변수.  
  
 `tension` 매개 변수는 스플라인의 모양을 결정 합니다. 경우 값은 `tension` 매개 변수는 0.0F,이 메서드는 요소를 연결 하려면 직선 세그먼트를 그립니다. 일반적으로 `tension` 매개 변수 보다 작거나 1.0F로는 합니다. 1.0F 값 이상한 결과 생성합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 및 녹색 펜을 만듭니다.  
  
-   7 개의 점이 곡선을 만듭니다.  
  
-   불완전 한 다각형을 7 개의 점이 사이 6 빨간색 직선을 그립니다.  
  
-   시작 지점 오프셋 및 세그먼트의 수를 정의합니다.  
  
-   장력을 정의합니다.  
  
-   마지막 다섯 개 지점을 통해 열린 녹색 곡선 (세 번째 요소부터 시작)를 그립니다.  
  
 메서드는 1.0 장력을 설정합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#25)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#25)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>좌표, 높이, 너비의 쌍으로 지정된 경계 사각형에 의해 정의되는 타원을 그립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawEllipse (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">타원의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="rect">타원의 경계를 정의하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <summary>경계 <see cref="T:System.Drawing.Rectangle" /> 구조체에 의해 지정된 타원을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 경계 사각형에 의해 정의 된 타원을 그립니다는 `rect` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   타원을 바인딩된 사각형을 만듭니다.  
  
-   화면에 타원을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#27)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#27)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawEllipse (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="pen">타원의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="rect">타원의 경계를 정의하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <summary>경계 <see cref="T:System.Drawing.RectangleF" />에 의해 정의된 타원을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 경계 사각형에 의해 정의 된 타원을 그립니다는 `rect` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   타원을 바인딩된 사각형을 만듭니다.  
  
-   화면에 타원을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#28)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#28)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawEllipse (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">타원의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="x">타원을 정의하는 경계 사각형의 왼쪽 위 모퉁이에 대한 X좌표입니다.</param>
        <param name="y">타원을 정의하는 경계 사각형의 왼쪽 위 모퉁이에 대한 Y좌표입니다.</param>
        <param name="width">타원을 정의하는 경계 사각형의 너비입니다.</param>
        <param name="height">타원을 정의하는 경계 사각형의 높이입니다.</param>
        <summary>직사각형의 왼쪽 위 좌표, 높이 및 너비로 지정된 경계 사각형에 의해 정의되는 타원을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는에 설명 된 경계 사각형에 의해 정의 된 타원을 그립니다 합니다 `x`, `y`를 `width`, 및 `height` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   타원의 경계가 사각형의 크기와 위치를 만듭니다.  
  
-   화면에 타원을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#29)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#29)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawEllipse (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">타원의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="x">타원을 정의하는 경계 사각형의 왼쪽 위 모퉁이에 대한 X좌표입니다.</param>
        <param name="y">타원을 정의하는 경계 사각형의 왼쪽 위 모퉁이에 대한 Y좌표입니다.</param>
        <param name="width">타원을 정의하는 경계 사각형의 너비입니다.</param>
        <param name="height">타원을 정의하는 경계 사각형의 높이입니다.</param>
        <summary>좌표, 높이, 너비의 쌍으로 지정된 경계 사각형에 의해 정의되는 타원을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는에 설명 된 경계 사각형에 의해 정의 된 타원을 그립니다 합니다 `x`, `y`를 `width`, 및 `height` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   타원의 경계가 사각형의 크기와 위치를 만듭니다.  
  
-   화면에 타원을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#30)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#30)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawIcon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 <see cref="T:System.Drawing.Icon" />에 의해 나타나는 이미지를 지정된 좌표에 그립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberSignature Language="F#" Value="member this.DrawIcon : System.Drawing.Icon * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawIcon (icon, targetRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">그릴 <see cref="T:System.Drawing.Icon" />입니다.</param>
        <param name="targetRect">표시 화면에 결과로 나타날 이미지의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다. <paramref name="icon" /> 매개 변수에 포함된 이미지는 이 사각형 영역의 크기에 맞게 크기가 조정됩니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Icon" />에 의해 나타나는 이미지를 <see cref="T:System.Drawing.Rectangle" /> 구조체에 의해 지정된 영역 안에 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   표준 Windows 아이콘 파일 예제 폴더에 SampIcon.ico에서에서 아이콘을 만듭니다.  
  
-   아이콘을 그릴 사각형을 만듭니다.  
  
-   화면에 아이콘을 그립니다.  
  
 사각형의 위치 화면에서 아이콘을 찾아 그려지는 아이콘의 배율을 사각형의 크기를 결정 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#31)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#31)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="icon" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawIcon : System.Drawing.Icon * int * int -&gt; unit" Usage="graphics.DrawIcon (icon, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="icon">그릴 <see cref="T:System.Drawing.Icon" />입니다.</param>
        <param name="x">그려지는 이미지의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="y">그려지는 이미지의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Icon" />에 의해 나타나는 이미지를 지정된 좌표에 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   표준 Windows 아이콘 파일 예제 폴더에 SampIcon.ico에서에서 아이콘을 만듭니다.  
  
-   아이콘을 그립니다.를 왼쪽 위 모퉁이의 좌표를 만듭니다.  
  
-   화면에 아이콘을 그립니다.  
  
 그려지는 아이콘이 확장 됩니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#32)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#32)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="icon" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIconUnstretched">
      <MemberSignature Language="C#" Value="public void DrawIconUnstretched (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIconUnstretched(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIconUnstretched(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberSignature Language="F#" Value="member this.DrawIconUnstretched : System.Drawing.Icon * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawIconUnstretched (icon, targetRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">그릴 <see cref="T:System.Drawing.Icon" />입니다.</param>
        <param name="targetRect">결과로 나타날 이미지의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다. 이미지는 이 사각형에 맞게 크기 조정되지 않으며, 원래 크기를 유지합니다. 이미지가 사각형보다 크면, 그 안에 맞추기 위해 잘려집니다.</param>
        <summary>이미지의 크기 조정 없이 지정된 <see cref="T:System.Drawing.Icon" />에 의해 나타나는 이미지를 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   표준 Windows 아이콘 파일 예제 폴더에 SampIcon.ico에서에서 아이콘을 만듭니다.  
  
-   아이콘을 그릴 사각형을 만듭니다.  
  
-   화면에 아이콘을 그립니다.  
  
 사각형의 위치 아이콘을 화면의 찾고 그려지는 아이콘은 실제 크기 이며 잘리지 않습니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#33)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#33)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="icon" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImage">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 <see cref="T:System.Drawing.Image" />를 지정된 위치에 원래 크기로 그립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point -&gt; unit" Usage="graphics.DrawImage (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="point">그려지는 이미지의 왼쪽 위 모퉁이의 위치를 나타내는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <summary>지정된 위치에 원래의 크기를 사용하여 특정 <see cref="T:System.Drawing.Image" />를 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> 픽셀 너비에 대 한 값 및 가로 해상도 (인치당 도트 수)에 대 한 값을 저장 합니다. 이미지를 인치 단위로 측정 된 실제 너비를 픽셀 너비의 가로 해상도 나눈 것입니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 사용 하 여 이미지에는 실제 너비는 3 인치 이와 유사 픽셀 높이 실제 높이에 적용 됩니다.  
  
 이 메서드는 이미지 인치 디스플레이 디바이스의 해상도 (인치당 도트 수)와 관계 없이 올바른 크기를 가집니다는 실제 크기를 사용 하 여 이미지를 그립니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 이미지에는 것으로 가정 합니다. 렌더링된 된 이미지의 픽셀 너비 (216/72) 수는 96dpi 해상도 포함 하는 디바이스에서 해당 이미지를 그릴이 메서드를 호출 하는 경우 * 96 = 288 개.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지의 왼쪽 위 모퉁이 그릴 점을 만듭니다.  
  
-   화면에 실제 크기의 이미지를 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#34)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#34)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawImage (image, destPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destPoints">평행 사변형을 정의하는 세 개의 <see cref="T:System.Drawing.Point" /> 구조체 배열입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />를 지정된 위치에 지정된 모양과 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.Point> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다.  
  
 에 의해 나타나는 이미지를 `image` 매개 변수 크기가 조정 되 고 지정 된 평행 사변형의 모양에 맞추기 위해는 `destPoints` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴는 평행 사변형을 정의 하는 지점을 만듭니다.  
  
-   화면에 이미지를 그립니다.  
  
 평행 사변형의 위치 화면에서 이미지를 찾아 그려지는 이미지의 배율과 평행 사변형의 원래 이미지 및 크기의 크기 및 모양을 결정 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#35)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#35)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawImage (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="point">그려지는 이미지의 왼쪽 위 모퉁이를 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <summary>지정된 위치에 원래의 크기를 사용하여 특정 <see cref="T:System.Drawing.Image" />를 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> 픽셀 너비에 대 한 값 및 가로 해상도 (인치당 도트 수)에 대 한 값을 저장 합니다. 이미지를 인치 단위로 측정 된 실제 너비를 픽셀 너비의 가로 해상도 나눈 것입니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 사용 하 여 이미지에는 실제 너비는 3 인치 이와 유사 픽셀 높이 실제 높이에 적용 됩니다.  
  
 이 메서드는 이미지 인치 디스플레이 디바이스의 해상도 (인치당 도트 수)와 관계 없이 올바른 크기를 가집니다는 실제 크기를 사용 하 여 이미지를 그립니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 이미지에는 것으로 가정 합니다. 렌더링된 된 이미지의 픽셀 너비 (216/72) 수는 96dpi 해상도 포함 하는 디바이스에서 해당 이미지를 그릴이 메서드를 호출 하는 경우 * 96 = 288 개.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지의 왼쪽 위 모퉁이 그릴 점을 만듭니다.  
  
-   화면에 실제 크기의 이미지를 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawImage (image, destPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destPoints">평행 사변형을 정의하는 세 개의 <see cref="T:System.Drawing.PointF" /> 구조체 배열입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />를 지정된 위치에 지정된 모양과 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.PointF> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다.  
  
 에 의해 나타나는 이미지를 `image` 개체를 확장 하 고 지정 된 평행 사변형의 모양에 맞추기 위해는 `destPoints` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴는 평행 사변형을 정의 하는 지점을 만듭니다.  
  
-   화면에 이미지를 그립니다.  
  
 평행 사변형의 위치 화면에서 이미지를 찾아 그려지는 이미지의 배율과 평행 사변형의 원래 이미지 및 크기의 크기 및 모양을 결정 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#41)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#41)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImage (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="rect">그려지는 이미지의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />를 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 의해 나타나는 이미지를 `image` 개체의 크기의 크기가 조정 되는 `rect` 사각형입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴 사각형을 만듭니다.  
  
-   화면에 이미지를 그립니다.  
  
 사각형의 위치를 화면에 이미지를 찾습니다 하 고 원본 이미지의 크기 및 사각형의 크기 그려지는 이미지의 배율을 결정 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#46)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#46)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawImage (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="rect">그려지는 이미지의 위치와 크기를 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />를 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 의해 나타나는 이미지를 `image` 개체의 크기의 크기가 조정 되는 `rect` 사각형입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴 사각형을 만듭니다.  
  
-   화면에 이미지를 그립니다.  
  
 사각형의 위치를 화면에 이미지를 찾습니다 하 고 이미지의 원래 크기 및 사각형의 크기 그려지는 이미지의 배율을 결정 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#56)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#56)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int -&gt; unit" Usage="graphics.DrawImage (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="x">그려지는 이미지의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="y">그려지는 이미지의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <summary>지정된 이미지를 좌표 쌍으로 지정된 위치에 원래 실제 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> 픽셀 너비에 대 한 값 및 가로 해상도 (인치당 도트 수)에 대 한 값을 저장 합니다. 이미지를 인치 단위로 측정 된 실제 너비를 픽셀 너비의 가로 해상도 나눈 것입니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 사용 하 여 이미지에는 실제 너비는 3 인치 이와 유사 픽셀 높이 실제 높이에 적용 됩니다.  
  
 <xref:System.Drawing.Graphics.DrawImage%2A> 메서드 인치 디스플레이 디바이스의 해상도 (인치당 도트 수)와 관계 없이 올바른 크기를 가집니다 이미지는 실제 크기를 사용 하 여 이미지를 그립니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 이미지에는 것으로 가정 합니다. 호출 하는 경우 <xref:System.Drawing.Graphics.DrawImage%2A> 96dpi 해상도 포함 하는 디바이스에서 해당 이미지를 그릴 렌더링 되는 이미지의 픽셀 너비 됩니다 (216/72) * 96 = 288 개.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예의 예제 폴더에는 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   그릴 이미지의 왼쪽 위 모퉁이 있는 점의 좌표를 만듭니다.  
  
-   실제 크기의 이미지를 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#58)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#58)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single -&gt; unit" Usage="graphics.DrawImage (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="x">그려지는 이미지의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="y">그려지는 이미지의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <summary>지정된 위치에 원래의 크기를 사용하여 특정 <see cref="T:System.Drawing.Image" />를 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> 픽셀 너비에 대 한 값 및 가로 해상도 (인치당 도트 수)에 대 한 값을 저장 합니다. 이미지를 인치 단위로 측정 된 실제 너비를 픽셀 너비의 가로 해상도 나눈 것입니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 사용 하 여 이미지에는 실제 너비는 3 인치 이와 유사 픽셀 높이 실제 높이에 적용 됩니다.  
  
 이 메서드는 이미지 인치 디스플레이 디바이스의 해상도 (인치당 도트 수)와 관계 없이 올바른 크기를 가집니다는 실제 크기를 사용 하 여 이미지를 그립니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 이미지에는 것으로 가정 합니다. 렌더링된 된 이미지의 픽셀 너비 (216/72) 수는 96dpi 해상도 포함 하는 디바이스에서 해당 이미지를 그릴이 메서드를 호출 하는 경우 * 96 = 288 개.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   그릴 이미지의 왼쪽 위 모퉁이 있는 점의 좌표를 만듭니다.  
  
-   화면에 실제 크기의 이미지를 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#61)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#61)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destPoints">평행 사변형을 정의하는 세 개의 <see cref="T:System.Drawing.Point" /> 구조체 배열입니다.</param>
        <param name="srcRect">그릴 <paramref name="image" /> 개체의 부분을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수가 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.Point> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다.  
  
 합니다 `srcRect` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 이 부분에서 크기가 조정 되 고 지정 된 평행 사변형 안에 맞추기 위해는 `destPoints` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴는 평행 사변형을 정의 하는 지점을 만듭니다.  
  
-   그릴 이미지의 부분의 선택 하려면 사각형을 만듭니다.  
  
-   그래픽 픽셀 단위 그리기를 설정 합니다.  
  
-   화면에 이미지를 그립니다.  
  
 평행 사변형의 위치 화면에서 이미지를 찾아 그려지는 이미지의 배율과 평행 사변형의 사각형 및 크기의 크기 및 모양을 결정 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#36)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#36)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destPoints">평행 사변형을 정의하는 세 개의 <see cref="T:System.Drawing.PointF" /> 구조체 배열입니다.</param>
        <param name="srcRect">그릴 <paramref name="image" /> 개체의 부분을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수가 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.PointF> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다.  
  
 합니다 `srcRect` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 이 부분에서 크기가 조정 되 고 지정 된 평행 사변형 안에 맞추기 위해는 `destPoints` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴 대상 평행 사변형을 정의 하는 지점을 만듭니다.  
  
-   이미지의 일부를 추출할 소스 사각형을 만듭니다.  
  
-   소스 사각형의 측정 단위를 픽셀로 설정입니다.  
  
-   화면에 이미지를 그립니다.  
  
 대상 평행 사변형의 위치는 화면에서 이미지를 정하고, 대상 평행 사변형의 소스 사각형 및 크기의 크기 및 모양을 결정합니다 그려지는 이미지의 배율과 및 사각형의 크기에 따라 결정 원본 이미지의 어떤 부분이 화면에 그려집니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#42)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#42)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destRect">그려지는 이미지의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다. 이미지는 사각형에 맞게 크기가 조정됩니다.</param>
        <param name="srcRect">그릴 <paramref name="image" /> 개체의 부분을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수가 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `srcRect` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 이 부분에서 지정 된 사각형 내에 맞게 크기가 조정 되는 `destRect` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴 대상 사각형을 만듭니다.  
  
-   이미지의 일부를 추출할 소스 사각형을 만듭니다.  
  
-   소스 사각형의 측정 단위를 픽셀로 설정입니다.  
  
-   화면에 이미지를 그립니다.  
  
 대상 사각형의 위치는 화면에서 이미지를 정하고, 원본 및 대상 사각형의 크기는 그려지는 이미지의 배율을 결정 및 소스 사각형의 크기에 그려지는 원본 이미지의 어떤 부분을 결정 합니다 화면입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#47)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#47)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destRect">그려지는 이미지의 위치와 크기를 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다. 이미지는 사각형에 맞게 크기가 조정됩니다.</param>
        <param name="srcRect">그릴 <paramref name="image" /> 개체의 부분을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수가 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `srcRect` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 이 부분에서 지정 된 사각형 내에 맞게 크기가 조정 되는 `destRect` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴 대상 사각형을 만듭니다.  
  
-   이미지의 일부를 추출할 소스 사각형을 만듭니다.  
  
-   소스 사각형의 측정 단위를 픽셀로 설정입니다.  
  
-   화면에 이미지를 그립니다.  
  
 대상 사각형의 위치는 화면에서 이미지를 정하고, 원본 및 대상 사각형의 크기는 그려지는 이미지의 배율을 결정 및 소스 사각형의 크기에 그려지는 원본 이미지의 어떤 부분을 결정 합니다 화면입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#57)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#57)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destPoints">평행 사변형을 정의하는 세 개의 <see cref="T:System.Drawing.Point" /> 구조체 배열입니다.</param>
        <param name="srcRect">그릴 <paramref name="image" /> 개체의 부분을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수가 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="imageAttr"><paramref name="image" /> 개체에 대한 다시 칠하기와 감마 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.Point> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다.  
  
 합니다 `srcRect` 의 사각형 부분을 지정 하는 매개 변수는`image` 그릴 개체입니다. 이 부분에서 크기가 조정 되 고 지정 된 평행 사변형 안에 맞추기 위해는 `destPoints` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴는 평행 사변형을 정의 하는 지점을 만듭니다.  
  
-   그릴 이미지의 부분의 선택 하려면 사각형을 만듭니다.  
  
-   그래픽 픽셀 단위 그리기를 설정 합니다.  
  
-   화면에 원본 이미지를 그립니다.  
  
-   조정된 된 이미지를 그릴 추가 평행 사변형을 만듭니다.  
  
-   만들고 더 큰 평균 보다 감마 값 조정된 된 이미지의 특성을 설정 합니다.  
  
-   화면으로 조정된 된 이미지를 그립니다.  
  
 원래, 조정 되지 않은 평행 사변형에 대 한 위치를 화면에 이미지를 찾는 및 그려지는 이미지의 배율과 평행 사변형의 사각형 및 크기의 크기 및 모양을 결정 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#37)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#37)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destPoints">평행 사변형을 정의하는 세 개의 <see cref="T:System.Drawing.PointF" /> 구조체 배열입니다.</param>
        <param name="srcRect">그릴 <paramref name="image" /> 개체의 부분을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수가 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="imageAttr"><paramref name="image" /> 개체에 대한 다시 칠하기와 감마 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.PointF> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다.  
  
 합니다 `srcRect` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 이 부분에서 크기가 조정 되 고 지정 된 평행 사변형 안에 맞추기 위해는 `destPoints` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴 대상 평행 사변형을 정의 하는 지점을 만듭니다.  
  
-   이미지의 일부를 추출할 소스 사각형을 만듭니다.  
  
-   소스 사각형의 측정 단위를 픽셀로 설정입니다.  
  
-   화면에 원본 이미지를 그립니다.  
  
-   조정된 된 이미지를 그릴 추가 평행 사변형을 만듭니다.  
  
-   만들고 더 큰 평균 보다 감마 값 조정된 된 이미지의 특성을 설정 합니다.  
  
-   화면으로 조정된 된 이미지를 그립니다.  
  
 위치 조정 되지 않은 원래 대상 평행 사변형에 대 한 크기 및 소스 사각형의 크기를 사용 하는, 화면에 이미지를 찾는 및 그려지는 이미지 및 크기의 배율과 대상 평행 사변형의 모양을 결정 합니다 사각형을 화면에 그려지는 원본 이미지의 부분을 결정 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#43)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#43)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, x, y, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="x">그려지는 이미지의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="y">그려지는 이미지의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <param name="srcRect">그릴 <paramref name="image" /> 개체의 부분을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수가 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <summary>이미지의 부분을 지정된 위치에 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> 픽셀 너비에 대 한 값 및 가로 해상도 (인치당 도트 수)에 대 한 값을 저장 합니다. 이미지를 인치 단위로 측정 된 실제 너비를 픽셀 너비의 가로 해상도 나눈 것입니다. 예를 들어, 360 픽셀 너비, 72 인치당의 가로 해상도 사용 하 여 이미지에는 실제 너비는 5 인치입니다. 이와 유사 픽셀 높이 실제 높이에 적용 됩니다.  
  
 이 메서드는 실제 크기를 사용 하 여 이미지 부분을 인치 디스플레이 디바이스의 해상도 (인치당 도트 수)와 관계 없이 올바른 크기를 가집니다 이미지의 일부를 그립니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 이미지 부분에는 것으로 가정 합니다. 부분 렌더링된 이미지의 픽셀 너비 (216/72) 부분을 그릴 이미지 96dpi 해상도 포함 하는 디바이스에서이 메서드를 호출 하면 수 * 96 = 288 개.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   그릴 이미지의 왼쪽 위 모퉁이의 좌표를 만듭니다.  
  
-   이미지의 일부를 추출할 소스 사각형을 만듭니다.  
  
-   소스 사각형의 측정 단위를 픽셀로 설정입니다.  
  
-   화면에 이미지를 그립니다.  
  
 소스 사각형의 크기를 화면에 그려지는 실제 크기는 원본 이미지의 부분을 결정 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#59)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#59)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int * int * int -&gt; unit" Usage="graphics.DrawImage (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="x">그려지는 이미지의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="y">그려지는 이미지의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <param name="width">그려지는 이미지의 너비입니다.</param>
        <param name="height">그려지는 이미지의 높이입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />를 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 정의 된 사각형의 `x`, `y`를 `width`, 및 `height` 그려지는 이미지의 크기와 위치를 결정 하는 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴 사각형의 크기와 위치를 만듭니다.  
  
-   화면에 이미지를 그립니다.  
  
 사각형의 위치를 화면에 이미지를 찾습니다 하 고 원본 이미지의 크기 및 사각형의 크기 그려지는 이미지의 배율을 결정 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#60)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#60)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, x, y, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="x">그려지는 이미지의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="y">그려지는 이미지의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <param name="srcRect">그릴 <see cref="T:System.Drawing.RectangleF" />의 부분을 지정하는 <see cref="T:System.Drawing.Image" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수가 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <summary>이미지의 부분을 지정된 위치에 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> 픽셀 너비에 대 한 값 및 가로 해상도 (인치당 도트 수)에 대 한 값을 저장 합니다. 이미지를 인치 단위로 측정 된 실제 너비를 픽셀 너비의 가로 해상도 나눈 것입니다. 예를 들어, 360 픽셀 너비, 72 인치당의 가로 해상도 사용 하 여 이미지에는 실제 너비는 5 인치입니다. 이와 유사 픽셀 높이 실제 높이에 적용 됩니다.  
  
 이 메서드는 실제 크기를 사용 하 여 이미지 부분을 인치 디스플레이 디바이스의 해상도 (인치당 도트 수)와 관계 없이 올바른 크기를 가집니다 이미지의 일부를 그립니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 이미지 부분에는 것으로 가정 합니다. 부분 렌더링된 이미지의 픽셀 너비 (216/72) 부분을 그릴 이미지 96dpi 해상도 포함 하는 디바이스에서이 메서드를 호출 하면 수 * 96 = 288 개.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   그릴 이미지의 왼쪽 위 모퉁이의 좌표를 만듭니다.  
  
-   이미지의 일부를 추출할 소스 사각형을 만듭니다.  
  
-   소스 사각형의 측정 단위를 픽셀로 설정입니다.  
  
-   화면에 이미지를 그립니다.  
  
 소스 사각형의 크기를 화면에 그려지는 실제 크기는 원본 이미지의 부분을 결정 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#62)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#62)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single * single * single -&gt; unit" Usage="graphics.DrawImage (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="x">그려지는 이미지의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="y">그려지는 이미지의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <param name="width">그려지는 이미지의 너비입니다.</param>
        <param name="height">그려지는 이미지의 높이입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />를 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 정의 된 사각형의 `x`, `y`를 `width`, 및 `height` 그려지는 이미지의 크기와 위치를 결정 하는 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴 사각형의 크기와 위치를 만듭니다.  
  
-   화면에 이미지를 그립니다.  
  
 사각형의 위치를 화면에 이미지를 찾습니다 하 고 원본 이미지의 크기 및 사각형의 크기 그려지는 이미지의 배율을 결정 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#63)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#63)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destPoints">평행 사변형을 정의하는 세 개의 <see cref="T:System.Drawing.PointF" /> 구조체 배열입니다.</param>
        <param name="srcRect">그릴 <paramref name="image" /> 개체의 부분을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수가 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="imageAttr"><paramref name="image" /> 개체에 대한 다시 칠하기와 감마 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <param name="callback">이미지를 그리는 동안 호출할 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 대리자입니다. 이 메서드는 애플리케이션에 의해 결정된 조건에 따라 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> 메서드의 실행을 중지할지 여부를 확인하기 위해 자주 호출됩니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.PointF> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다.  
  
 합니다 `srcRect` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 이 부분에서 크기가 조정 되 고 지정 된 평행 사변형 안에 맞추기 위해는 `destPoints` 매개 변수입니다.  
  
 이 오버 로드는 `callback` 매개 변수는 애플리케이션에 의해 결정 된 조건에 따라 시작 되 면 이미지의 그리기를 중지 하는 방법을 제공 합니다. 예를 들어, 애플리케이션은 큰 이미지를 그리기 시작할 수 및 사용자 사례 애플리케이션 수 그리기를 중지 하는 화면 이미지를 스크롤할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에 대 한 콜백 메서드를 먼저 정의 <xref:System.Drawing.Graphics.DrawImageAbort> 대리자를 보기 위해 단순한 테스트 단순한 정의 이며 여부를 <xref:System.Drawing.Graphics.DrawImage%2A> 메서드 호출을 null로 `callBackData` 매개 변수. 본문 예제에서는 다음 작업을 수행합니다.  
  
-   인스턴스를 만듭니다는 <xref:System.Drawing.Graphics.DrawImageAbort> 콜백 메서드입니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴는 평행 사변형을 정의 하는 지점을 만듭니다.  
  
-   그릴 이미지의 부분의 선택 하려면 사각형을 만듭니다.  
  
-   그래픽 픽셀 단위 그리기를 설정 합니다.  
  
-   화면에 원본 이미지를 그립니다.  
  
-   조정된 된 이미지를 그릴 추가 평행 사변형을 만듭니다.  
  
-   만들고 더 큰 평균 보다 감마 값 조정된 된 이미지의 특성을 설정 합니다.  
  
-   화면으로 조정된 된 이미지를 그립니다.  
  
 원래, 조정 되지 않은 평행 사변형에 대 한 위치를 화면에 이미지를 찾는 및 그려지는 이미지의 배율과 평행 사변형의 사각형 및 크기의 크기 및 모양을 결정 합니다.  
  
 이 예에서는 통과 하지 않는 오버 로드를 사용 하므로 `callBackData` 매개 변수를를 <xref:System.Drawing.Graphics.DrawImageAbort> 콜백이 반환 `true`, 유발 하는 <xref:System.Drawing.Graphics.DrawImage%2A> 메서드 종료 및 예제에 포함 된 예외 처리 코드를 출력 합니다 예외 텍스트를 그리지 않고 이미지입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#38)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#38)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destPoints">평행 사변형을 정의하는 세 개의 <see cref="T:System.Drawing.PointF" /> 구조체 배열입니다.</param>
        <param name="srcRect">그릴 <paramref name="image" /> 개체의 부분을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수가 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="imageAttr"><paramref name="image" /> 개체에 대한 다시 칠하기와 감마 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <param name="callback">이미지를 그리는 동안 호출할 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 대리자입니다. 이 메서드는 애플리케이션에 의해 결정된 조건에 따라 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> 메서드의 실행을 중지할지 여부를 확인하기 위해 자주 호출됩니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.PointF> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다.  
  
 합니다 `srcRect` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 이 부분에서 크기가 조정 되 고 지정 된 평행 사변형 안에 맞추기 위해는 `destPoints` 매개 변수입니다.  
  
 이 오버 로드는 `callback` 매개 변수는 애플리케이션에 의해 결정 된 조건에 따라 시작 되 면 이미지의 그리기를 중지 하는 방법을 제공 합니다. 예를 들어, 애플리케이션은 큰 이미지를 그리기 시작할 수 및 사용자 사례 애플리케이션 수 그리기를 중지 하는 화면 이미지를 스크롤할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에 대 한 콜백 메서드를 먼저 정의 <xref:System.Drawing.Graphics.DrawImageAbort> 대리자를 보기 위해 단순한 테스트 단순한 정의 이며 여부를 <xref:System.Drawing.Graphics.DrawImage%2A> 메서드 호출을 null로 `callBackData` 매개 변수. 본문 예제에서는 다음 작업을 수행합니다.  
  
-   인스턴스를 만듭니다는 <xref:System.Drawing.Graphics.DrawImageAbort> 콜백 메서드입니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴는 평행 사변형을 정의 하는 지점을 만듭니다.  
  
-   그릴 이미지의 부분의 선택 하려면 사각형을 만듭니다.  
  
-   그래픽 픽셀 단위 그리기를 설정 합니다.  
  
-   화면에 원본 이미지를 그립니다.  
  
-   조정된 된 이미지를 그릴 추가 평행 사변형을 만듭니다.  
  
-   만들고 더 큰 평균 보다 감마 값 조정된 된 이미지의 특성을 설정 합니다.  
  
-   화면으로 조정된 된 이미지를 그립니다.  
  
 원래, 조정 되지 않은 평행 사변형에 대 한 위치를 화면에 이미지를 찾는 및 그려지는 이미지의 배율과 평행 사변형의 사각형 및 크기의 크기 및 모양을 결정 합니다.  
  
 이 예에서는 통과 하지 않는 오버 로드를 사용 하므로 `callBackData` 매개 변수를를 <xref:System.Drawing.Graphics.DrawImageAbort> 콜백이 반환 `true`, 유발 하는 <xref:System.Drawing.Graphics.DrawImage%2A> 메서드 종료 및 예제에 포함 된 예외 처리 코드를 출력 합니다 예외 텍스트를 그리지 않고 이미지입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#44)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#44)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * int -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destPoints">평행 사변형을 정의하는 세 개의 <see cref="T:System.Drawing.PointF" /> 구조체 배열입니다.</param>
        <param name="srcRect">그릴 <paramref name="image" /> 개체의 부분을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수가 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="imageAttr"><paramref name="image" /> 개체에 대한 다시 칠하기와 감마 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <param name="callback">이미지를 그리는 동안 호출할 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 대리자입니다. 이 메서드는 애플리케이션에 의해 결정된 조건에 따라 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> 메서드의 실행을 중지할지 여부를 확인하기 위해 자주 호출됩니다.</param>
        <param name="callbackData"><see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> 메서드의 실행을 중지할지 여부를 확인할 때 사용하기 위한 <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 대리자의 추가 데이터를 지정하는 값입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.PointF> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다.  
  
 합니다 `srcRect` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 이 부분에서 크기가 조정 되 고 지정 된 평행 사변형 안에 맞추기 위해는 `destPoints` 매개 변수입니다.  
  
 이 오버 로드 된 `callback` 및 `callbackData` 매개 변수는 조건 및 애플리케이션에 의해 결정 되는 데이터에 따라 시작 되 면 이미지의 그리기를 중지 하는 방법을 제공 합니다. 예를 들어, 애플리케이션은 큰 이미지를 그리기 시작할 수 및 사용자 사례 애플리케이션 수 그리기를 중지 하는 화면 이미지를 스크롤할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에 대 한 콜백 메서드를 먼저 정의 <xref:System.Drawing.Graphics.DrawImageAbort> 대리자를 보기 위해 단순한 테스트 단순한 정의 이며 여부를 <xref:System.Drawing.Graphics.DrawImage%2A> 메서드 호출을 null로 `callBackData` 매개 변수. 본문 예제에서는 다음 작업을 수행합니다.  
  
-   인스턴스를 만듭니다는 <xref:System.Drawing.Graphics.DrawImageAbort> 콜백 메서드입니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴는 평행 사변형을 정의 하는 지점을 만듭니다.  
  
-   그릴 이미지의 부분의 선택 하려면 사각형을 만듭니다.  
  
-   그래픽 픽셀 단위 그리기를 설정 합니다.  
  
-   화면에 원본 이미지를 그립니다.  
  
-   조정된 된 이미지를 그릴 추가 평행 사변형을 만듭니다.  
  
-   만들고 더 큰 평균 보다 감마 값 조정된 된 이미지의 특성을 설정 합니다.  
  
-   화면으로 조정된 된 이미지를 그립니다.  
  
 원래, 조정 되지 않은 평행 사변형에 대 한 위치를 화면에 이미지를 찾는 및 그려지는 이미지의 배율과 평행 사변형의 사각형 및 크기의 크기 및 모양을 결정 합니다.  
  
 이 예에서는 전달 하는 오버 로드를 사용 하므로 `callBackData` 매개 변수를 <xref:System.Drawing.Graphics.DrawImageAbort> 콜백이 반환 `false`, 있어를 <xref:System.Drawing.Graphics.DrawImage%2A> 계속 하는 방법 및 예제 화면으로 조정 된 이미지를 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#39)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#39)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#39)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * int -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destPoints">평행 사변형을 정의하는 세 개의 <see cref="T:System.Drawing.PointF" /> 구조체 배열입니다.</param>
        <param name="srcRect">그릴 <paramref name="image" /> 개체의 부분을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수가 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="imageAttr"><paramref name="image" /> 개체에 대한 다시 칠하기와 감마 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <param name="callback">이미지를 그리는 동안 호출할 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 대리자입니다. 이 메서드는 애플리케이션에 의해 결정된 조건에 따라 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> 메서드의 실행을 중지할지 여부를 확인하기 위해 자주 호출됩니다.</param>
        <param name="callbackData"><see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> 메서드의 실행을 중지할지 여부를 확인할 때 사용하기 위한 <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 대리자의 추가 데이터를 지정하는 값입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.PointF> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다.  
  
 합니다 `srcRect` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 이 부분에서 크기가 조정 되 고 지정 된 평행 사변형 안에 맞추기 위해는 `destPoints` 매개 변수입니다.  
  
 이 오버 로드 된 `callback` 및 `callbackData` 매개 변수는 조건 및 애플리케이션에 의해 결정 되는 데이터에 따라 시작 되 면 이미지의 그리기를 중지 하는 방법을 제공 합니다. 예를 들어, 애플리케이션은 큰 이미지를 그리기 시작할 수 및 사용자 사례 애플리케이션 수 그리기를 중지 하는 화면 이미지를 스크롤할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수인 합니다 `Pa` <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에 대 한 콜백 메서드를 먼저 정의 <xref:System.Drawing.Graphics.DrawImageAbort> 대리자를 보기 위해 단순한 테스트 단순한 정의 이며 여부를 <xref:System.Drawing.Graphics.DrawImage%2A> 메서드 호출을 null로 `callBackData` 매개 변수. 본문 예제에서는 다음 작업을 수행합니다.  
  
-   인스턴스를 만듭니다는 <xref:System.Drawing.Graphics.DrawImageAbort> 콜백 메서드입니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴는 평행 사변형을 정의 하는 지점을 만듭니다.  
  
-   그릴 이미지의 부분의 선택 하려면 사각형을 만듭니다.  
  
-   그래픽 픽셀 단위 그리기를 설정 합니다.  
  
-   화면에 원본 이미지를 그립니다.  
  
-   조정된 된 이미지를 그릴 추가 평행 사변형을 만듭니다.  
  
-   만들고 더 큰 평균 보다 감마 값 조정된 된 이미지의 특성을 설정 합니다.  
  
-   화면으로 조정된 된 이미지를 그립니다.  
  
 원래, 조정 되지 않은 평행 사변형에 대 한 위치를 화면에 이미지를 찾는 및 그려지는 이미지의 배율과 평행 사변형의 사각형 및 크기의 크기 및 모양을 결정 합니다.  
  
 이 예에서는 전달 하는 오버 로드를 사용 하므로 `callBackData` 매개 변수를 <xref:System.Drawing.Graphics.DrawImageAbort> 콜백이 반환 `false`, 있어를 <xref:System.Drawing.Graphics.DrawImage%2A> 계속 하는 방법 및 예제 화면으로 조정 된 이미지를 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#45)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#45)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destRect">그려지는 이미지의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다. 이미지는 사각형에 맞게 크기가 조정됩니다.</param>
        <param name="srcX">그릴 원본 이미지 부분의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="srcY">그릴 소스 이미지 부분의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <param name="srcWidth">그릴 소스 이미지의 부분에 대한 너비입니다.</param>
        <param name="srcHeight">그릴 소스 이미지의 부분에 대한 높이입니다.</param>
        <param name="srcUnit">소스 사각형을 결정하기 위해 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `srcX`, `srcY`, `srcWidth`, 및 `srcHeight` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 사각형은 원본 이미지의 왼쪽 위 모퉁이 기준으로 합니다. 이 부분에서 지정 된 사각형 내에 맞게 크기가 조정 되는 `destRect` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴 대상 사각형을 만듭니다.  
  
-   이미지의 일부를 추출할 소스 사각형의 좌표를 만듭니다.  
  
-   소스 사각형의 측정 단위를 픽셀로 설정입니다.  
  
-   화면에 이미지를 그립니다.  
  
 대상 사각형의 위치는 화면에서 이미지를 찾는 소스 및 대상 사각형의 크기는 그려지는 이미지의 배율을 결정 하 고 소스 사각형의 크기에 그려지는 원본 이미지의 어떤 부분을 결정 합니다 화면입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#48)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#48)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destRect">그려지는 이미지의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다. 이미지는 사각형에 맞게 크기가 조정됩니다.</param>
        <param name="srcX">그릴 원본 이미지 부분의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="srcY">그릴 소스 이미지 부분의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <param name="srcWidth">그릴 소스 이미지의 부분에 대한 너비입니다.</param>
        <param name="srcHeight">그릴 소스 이미지의 부분에 대한 높이입니다.</param>
        <param name="srcUnit">소스 사각형을 결정하기 위해 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `srcX`, `srcY`, `srcWidth`, 및 `srcHeight` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 사각형은 원본 이미지의 왼쪽 위 모퉁이 기준으로 합니다. 이 부분에서 지정 된 사각형 내에 맞게 크기가 조정 되는 `destRect` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴 대상 사각형의 좌표를 만듭니다.  
  
-   이미지의 일부를 추출할 소스 사각형을 만듭니다.  
  
-   소스 사각형의 측정 단위를 픽셀로 설정입니다.  
  
-   화면에 이미지를 그립니다.  
  
 대상 사각형의 위치는 화면에서 이미지를 정하고, 원본 및 대상 사각형의 크기는 그려지는 이미지의 배율을 결정 및 소스 사각형의 크기에 그려지는 원본 이미지의 어떤 부분을 결정 합니다 화면입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#52)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#52)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destRect">그려지는 이미지의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다. 이미지는 사각형에 맞게 크기가 조정됩니다.</param>
        <param name="srcX">그릴 원본 이미지 부분의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="srcY">그릴 소스 이미지 부분의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <param name="srcWidth">그릴 소스 이미지의 부분에 대한 너비입니다.</param>
        <param name="srcHeight">그릴 소스 이미지의 부분에 대한 높이입니다.</param>
        <param name="srcUnit">소스 사각형을 결정하기 위해 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="imageAttr"><paramref name="image" /> 개체에 대한 다시 칠하기와 감마 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `srcX`, `srcY`, `srcWidth`, 및 `srcHeight` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 사각형은 원본 이미지의 왼쪽 위 모퉁이 기준으로 합니다. 이 부분에서 지정 된 사각형 내에 맞게 크기가 조정 되는 `destRect` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴 대상 사각형을 만듭니다.  
  
-   이미지의 일부를 추출할 소스 사각형의 좌표를 만듭니다.  
  
-   소스 사각형의 측정 단위를 픽셀로 설정입니다.  
  
-   화면에 원본 이미지를 그립니다.  
  
-   추가 조정된 된 이미지를 그릴 사각형을 만듭니다.  
  
-   만들고 더 큰 평균 보다 감마 값 조정된 된 이미지의 특성을 설정 합니다.  
  
-   화면으로 조정된 된 이미지를 그립니다.  
  
 조정 되지 않은 원래 대상 사각형의 위치를 화면에 이미지를 찾습니다 소스 및 대상 사각형의 크기는 그려지는 이미지의 배율을 결정 하 고 소스 사각형의 크기의 어떤 부분을 결정 합니다 원래 이미지 화면에 그려집니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#49)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#49)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#49)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destRect">그려지는 이미지의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다. 이미지는 사각형에 맞게 크기가 조정됩니다.</param>
        <param name="srcX">그릴 원본 이미지 부분의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="srcY">그릴 소스 이미지 부분의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <param name="srcWidth">그릴 소스 이미지의 부분에 대한 너비입니다.</param>
        <param name="srcHeight">그릴 소스 이미지의 부분에 대한 높이입니다.</param>
        <param name="srcUnit">소스 사각형을 결정하기 위해 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="imageAttrs"><paramref name="image" /> 개체에 대한 다시 칠하기와 감마 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `srcX`, `srcY`, `srcWidth`, 및 `srcHeight` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 사각형은 원본 이미지의 왼쪽 위 모퉁이 기준으로 합니다. 이 부분에서 지정 된 사각형 내에 맞게 크기가 조정 되는 `destRect` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴 대상 사각형을 만듭니다.  
  
-   이미지의 일부를 추출할 소스 사각형의 좌표를 만듭니다.  
  
-   소스 사각형의 측정 단위를 픽셀로 설정입니다.  
  
-   화면에 원본 이미지를 그립니다.  
  
-   추가 조정된 된 이미지를 그릴 사각형을 만듭니다.  
  
-   만들고 더 큰 평균 보다 감마 값 조정된 된 이미지의 특성을 설정 합니다.  
  
-   화면으로 조정된 된 이미지를 그립니다.  
  
 조정 되지 않은 원래 대상 사각형의 위치를 화면에 이미지를 찾습니다 소스 및 대상 사각형의 크기는 그려지는 이미지의 배율을 결정 하 고 소스 사각형의 크기의 어떤 부분을 결정 합니다 원래 이미지 화면에 그려집니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#53)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#53)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destRect">그려지는 이미지의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다. 이미지는 사각형에 맞게 크기가 조정됩니다.</param>
        <param name="srcX">그릴 원본 이미지 부분의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="srcY">그릴 소스 이미지 부분의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <param name="srcWidth">그릴 소스 이미지의 부분에 대한 너비입니다.</param>
        <param name="srcHeight">그릴 소스 이미지의 부분에 대한 높이입니다.</param>
        <param name="srcUnit">소스 사각형을 결정하기 위해 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="imageAttr"><paramref name="image" />에 대한 다시 칠하기와 감마 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <param name="callback">이미지를 그리는 동안 호출할 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 대리자입니다. 이 메서드는 애플리케이션에 의해 결정된 조건에 따라 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> 메서드의 실행을 중지할지 여부를 확인하기 위해 자주 호출됩니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `srcX`, `srcY`, `srcWidth`, 및 `srcHeight` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 사각형은 원본 이미지의 왼쪽 위 모퉁이 기준으로 합니다. 이 부분에서 지정 된 사각형 내에 맞게 크기가 조정 되는 `destRect` 개체입니다.  
  
 이 오버 로드는 `callback` 매개 변수는 애플리케이션에 의해 결정 된 조건에 따라 시작 되 면 이미지의 그리기를 중지 하는 방법을 제공 합니다. 예를 들어, 애플리케이션은 큰 이미지를 그리기 시작할 수 및 사용자 사례 애플리케이션 수 그리기를 중지 하는 화면 이미지를 스크롤할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에 대 한 콜백 메서드를 먼저 정의 <xref:System.Drawing.Graphics.DrawImageAbort> 대리자를 보기 위해 단순한 테스트 단순한 정의 이며 여부를 <xref:System.Drawing.Graphics.DrawImage%2A> 메서드 호출을 null로 `callBackData` 매개 변수. 본문 예제에서는 다음 작업을 수행합니다.  
  
-   인스턴스를 만듭니다는 <xref:System.Drawing.Graphics.DrawImageAbort> 콜백 메서드입니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴 대상 사각형을 정의 하는 지점을 만듭니다.  
  
-   그릴 이미지의 부분의 선택 소스 사각형을 만듭니다.  
  
-   그래픽 픽셀 단위 그리기를 설정 합니다.  
  
-   화면에 원본 이미지를 그립니다.  
  
-   조정된 된 이미지를 그릴 추가 대상 사각형을 만듭니다.  
  
-   만들고 더 큰 평균 보다 감마 값 조정된 된 이미지의 특성을 설정 합니다.  
  
-   화면으로 조정된 된 이미지를 그립니다.  
  
 조정 되지 않은 원래 대상 사각형의 위치 이미지 화면의 정하고, 대상 사각형의 소스 사각형 및 크기의 크기와 모양이 그려지는 이미지의 배율을 결정 합니다.  
  
 이 예에서는 통과 하지 않는 오버 로드를 사용 하므로 `callBackData` 매개 변수를를 <xref:System.Drawing.Graphics.DrawImageAbort> 콜백이 반환 `true`, 유발 하는 <xref:System.Drawing.Graphics.DrawImage%2A> 메서드 종료 및 예제에 포함 된 예외 처리 코드를 출력 합니다 예외 텍스트를 그리지 않고 이미지입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#50)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#50)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destRect">그려지는 이미지의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다. 이미지는 사각형에 맞게 크기가 조정됩니다.</param>
        <param name="srcX">그릴 원본 이미지 부분의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="srcY">그릴 소스 이미지 부분의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <param name="srcWidth">그릴 소스 이미지의 부분에 대한 너비입니다.</param>
        <param name="srcHeight">그릴 소스 이미지의 부분에 대한 높이입니다.</param>
        <param name="srcUnit">소스 사각형을 결정하기 위해 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="imageAttrs"><paramref name="image" /> 개체에 대한 다시 칠하기와 감마 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <param name="callback">이미지를 그리는 동안 호출할 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 대리자입니다. 이 메서드는 애플리케이션에 의해 결정된 조건에 따라 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> 메서드의 실행을 중지할지 여부를 확인하기 위해 자주 호출됩니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `srcX`, `srcY`, `srcWidth`, 및 `srcHeight` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 사각형은 원본 이미지의 왼쪽 위 모퉁이 기준으로 합니다. 이 부분에서 지정 된 사각형 내에 맞게 크기가 조정 되는 `destRect` 매개 변수입니다.  
  
 이 오버 로드는 `callback` 매개 변수는 애플리케이션에 의해 결정 된 조건에 따라 시작 되 면 이미지의 그리기를 중지 하는 방법을 제공 합니다. 예를 들어, 애플리케이션은 큰 이미지를 그리기 시작할 수 및 사용자 사례 애플리케이션 수 그리기를 중지 하는 화면 이미지를 스크롤할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에 대 한 콜백 메서드를 먼저 정의 <xref:System.Drawing.Graphics.DrawImageAbort> 대리자를 보기 위해 단순한 테스트 단순한 정의 이며 여부를 <xref:System.Drawing.Graphics.DrawImage%2A> 메서드 호출을 null로 `callBackData` 매개 변수. 본문 예제에서는 다음 작업을 수행합니다.  
  
-   인스턴스를 만듭니다는 <xref:System.Drawing.Graphics.DrawImageAbort> 콜백 메서드입니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴 대상 사각형을 정의 하는 지점을 만듭니다.  
  
-   그릴 이미지의 부분의 선택 소스 사각형을 만듭니다.  
  
-   그래픽 픽셀 단위 그리기를 설정 합니다.  
  
-   화면에 원본 이미지를 그립니다.  
  
-   조정된 된 이미지를 그릴 추가 대상 사각형을 만듭니다.  
  
-   만들고 더 큰 평균 보다 감마 값 조정된 된 이미지의 특성을 설정 합니다.  
  
-   화면으로 조정된 된 이미지를 그립니다.  
  
 조정 되지 않은 원래 대상 사각형의 위치 이미지 화면의 정하고, 대상 사각형의 소스 사각형 및 크기의 크기와 모양이 그려지는 이미지의 배율을 결정 합니다.  
  
 이 예에서는 통과 하지 않는 오버 로드를 사용 하므로 `callBackData` 매개 변수를를 <xref:System.Drawing.Graphics.DrawImageAbort> 콜백이 반환 `true`, 유발 하는 <xref:System.Drawing.Graphics.DrawImage%2A> 메서드 종료 및 예제에 포함 된 예외 처리 코드를 출력 합니다 예외 텍스트를 그리지 않고 이미지입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#54)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#54)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * nativeint -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destRect">그려지는 이미지의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다. 이미지는 사각형에 맞게 크기가 조정됩니다.</param>
        <param name="srcX">그릴 원본 이미지 부분의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="srcY">그릴 소스 이미지 부분의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <param name="srcWidth">그릴 소스 이미지의 부분에 대한 너비입니다.</param>
        <param name="srcHeight">그릴 소스 이미지의 부분에 대한 높이입니다.</param>
        <param name="srcUnit">소스 사각형을 결정하기 위해 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="imageAttrs"><paramref name="image" /> 개체에 대한 다시 칠하기와 감마 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <param name="callback">이미지를 그리는 동안 호출할 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 대리자입니다. 이 메서드는 애플리케이션에 의해 결정된 조건에 따라 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> 메서드의 실행을 중지할지 여부를 확인하기 위해 자주 호출됩니다.</param>
        <param name="callbackData"><see langword="DrawImage" /> 메서드의 실행을 중지할지 여부를 확인할 때 사용하기 위한 <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 대리자의 추가 데이터를 지정하는 값입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `srcX`, `srcY`, `srcWidth`, 및 `srcHeight` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 사각형은 원본 이미지의 왼쪽 위 모퉁이 기준으로 합니다. 이 부분에서 지정 된 사각형 내에 맞게 크기가 조정 되는 `destRect` 매개 변수입니다.  
  
 이 오버 로드 된 `callback` 및 `callbackData` 매개 변수는 조건 및 애플리케이션에 의해 결정 되는 데이터에 따라 시작 되 면 이미지의 그리기를 중지 하는 방법을 제공 합니다. 예를 들어, 애플리케이션은 큰 이미지를 그리기 시작할 수 및 사용자 사례 애플리케이션 수 그리기를 중지 하는 화면 이미지를 스크롤할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에 대 한 콜백 메서드를 먼저 정의 <xref:System.Drawing.Graphics.DrawImageAbort> 대리자를 보기 위해 단순한 테스트 단순한 정의 이며 여부를 <xref:System.Drawing.Graphics.DrawImage%2A> 메서드 호출을 null로 `callBackData` 매개 변수. 본문 예제에서는 다음 작업을 수행합니다.  
  
-   인스턴스를 만듭니다는 <xref:System.Drawing.Graphics.DrawImageAbort> 콜백 메서드입니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴 대상 사각형을 정의 하는 지점을 만듭니다.  
  
-   그릴 이미지의 부분의 선택 소스 사각형을 만듭니다.  
  
-   그래픽 픽셀 단위 그리기를 설정 합니다.  
  
-   화면에 원본 이미지를 그립니다.  
  
-   조정된 된 이미지를 그릴 추가 대상 사각형을 만듭니다.  
  
-   만들고 더 큰 평균 보다 감마 값 조정된 된 이미지의 특성을 설정 합니다.  
  
-   화면으로 조정된 된 이미지를 그립니다.  
  
 조정 되지 않은 원래 대상 사각형의 위치 이미지 화면의 정하고, 대상 사각형의 소스 사각형 및 크기의 크기와 모양이 그려지는 이미지의 배율을 결정 합니다.  
  
 이 예에서는 전달 하는 오버 로드를 사용 하므로 `callBackData` 매개 변수를 <xref:System.Drawing.Graphics.DrawImageAbort> 콜백이 반환 `false`, 있어를 <xref:System.Drawing.Graphics.DrawImage%2A> 계속 하는 방법 및 예제 화면으로 조정 된 이미지를 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#51)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#51)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * nativeint -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="destRect">그려지는 이미지의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다. 이미지는 사각형에 맞게 크기가 조정됩니다.</param>
        <param name="srcX">그릴 원본 이미지 부분의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="srcY">그릴 소스 이미지 부분의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <param name="srcWidth">그릴 소스 이미지의 부분에 대한 너비입니다.</param>
        <param name="srcHeight">그릴 소스 이미지의 부분에 대한 높이입니다.</param>
        <param name="srcUnit">소스 사각형을 결정하기 위해 사용하는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="imageAttrs"><paramref name="image" /> 개체에 대한 다시 칠하기와 감마 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <param name="callback">이미지를 그리는 동안 호출할 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 대리자입니다. 이 메서드는 애플리케이션에 의해 결정된 조건에 따라 <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> 메서드의 실행을 중지할지 여부를 확인하기 위해 자주 호출됩니다.</param>
        <param name="callbackData"><see langword="DrawImage" /> 메서드의 실행을 중지할지 여부를 확인할 때 사용하기 위한 <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> 대리자의 추가 데이터를 지정하는 값입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Image" />의 지정된 부분을 지정된 위치에 지정된 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `srcX`, `srcY`, `srcWidth`, 및 `srcHeight` 의 사각형 부분을 지정 하는 매개 변수는 `image` 그릴 개체입니다. 사각형은 원본 이미지의 왼쪽 위 모퉁이 기준으로 합니다. 이 부분에서 지정 된 사각형 내에 맞게 크기가 조정 되는 `destRect` 매개 변수입니다.  
  
 이 오버 로드 된 `callback` 및 `callbackData` 매개 변수는 조건 및 애플리케이션에 의해 결정 되는 데이터에 따라 시작 되 면 이미지의 그리기를 중지 하는 방법을 제공 합니다. 예를 들어, 애플리케이션은 큰 이미지를 그리기 시작할 수 및 사용자 사례 애플리케이션 수 그리기를 중지 하는 화면 이미지를 스크롤할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에 대 한 콜백 메서드를 먼저 정의 <xref:System.Drawing.Graphics.DrawImageAbort> 대리자를 보기 위해 단순한 테스트 단순한 정의 이며 여부를 <xref:System.Drawing.Graphics.DrawImage%2A> 메서드 호출을 null로 `callBackData` 매개 변수. 본문 예제에서는 다음 작업을 수행합니다.  
  
-   인스턴스를 만듭니다는 <xref:System.Drawing.Graphics.DrawImageAbort> 콜백 메서드입니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지를 그릴 대상 사각형을 정의 하는 지점을 만듭니다.  
  
-   그릴 이미지의 부분의 선택 소스 사각형을 만듭니다.  
  
-   그래픽 픽셀 단위 그리기를 설정 합니다.  
  
-   화면에 원본 이미지를 그립니다.  
  
-   조정된 된 이미지를 그릴 추가 대상 사각형을 만듭니다.  
  
-   만들고 더 큰 평균 보다 감마 값 조정된 된 이미지의 특성을 설정 합니다.  
  
-   화면으로 조정된 된 이미지를 그립니다.  
  
 조정 되지 않은 원래 대상 사각형의 위치 이미지 화면의 정하고, 대상 사각형의 소스 사각형 및 크기의 크기와 모양이 그려지는 이미지의 배율을 결정 합니다.  
  
 이 예에서는 전달 하는 오버 로드를 사용 하므로 `callBackData` 매개 변수를 <xref:System.Drawing.Graphics.DrawImageAbort> 콜백이 반환 `false`, 있어를 <xref:System.Drawing.Graphics.DrawImage%2A> 계속 하는 방법 및 예제 화면으로 조정 된 이미지를 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#55)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#55)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImageUnscaled">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 이미지를 좌표 쌍으로 지정된 위치에 원래 실제 크기로 그립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * System.Drawing.Point -&gt; unit" Usage="graphics.DrawImageUnscaled (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="point">그려지는 이미지의 왼쪽 위 모퉁이를 지정하는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <summary>지정된 위치에 원래의 크기를 사용하여 특정 이미지를 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> 픽셀 너비에 대 한 값 및 가로 해상도 (인치당 도트 수)에 대 한 값을 저장 합니다. 이미지를 인치 단위로 측정 된 실제 너비를 픽셀 너비의 가로 해상도 나눈 것입니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 사용 하 여 이미지에는 실제 너비는 3 인치 이와 유사 픽셀 높이 실제 높이에 적용 됩니다.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> 메서드 인치 디스플레이 디바이스의 해상도 (인치당 도트 수)와 관계 없이 올바른 크기를 가집니다 이미지는 실제 크기를 사용 하 여 이미지를 그립니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 이미지에는 것으로 가정 합니다. 호출 하는 경우 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> 96dpi 해상도 포함 하는 디바이스에서 해당 이미지를 그릴 렌더링 되는 이미지의 픽셀 너비 됩니다 (216/72) * 96 = 288 개.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에는 예제에서 이미지를 만듭니다.  
  
-   이미지의 왼쪽 위 모퉁이 그릴 점을 만듭니다.  
  
-   실제 크기를 사용 하 여 전체 이미지를 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#64)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#64)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImageUnscaled (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="rect">그려지는 이미지의 왼쪽 위 모퉁이를 지정하는 <see cref="T:System.Drawing.Rectangle" />입니다. 사각형의 X와 Y 속성은 왼쪽 위 모퉁이를 지정합니다. Width 및 Height 속성은 무시됩니다.</param>
        <summary>지정된 위치에 원래의 크기를 사용하여 특정 이미지를 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> 픽셀 너비에 대 한 값 및 가로 해상도 (인치당 도트 수)에 대 한 값을 저장 합니다. 이미지를 인치 단위로 측정 된 실제 너비를 픽셀 너비의 가로 해상도 나눈 것입니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 사용 하 여 이미지에는 실제 너비는 3 인치 이와 유사 픽셀 높이 실제 높이에 적용 됩니다.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> 메서드 인치 디스플레이 디바이스의 해상도 (인치당 도트 수)와 관계 없이 올바른 크기를 가집니다 이미지는 실제 크기를 사용 하 여 이미지를 그립니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 이미지에는 것으로 가정 합니다. 호출 하는 경우 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> 96dpi 해상도 포함 하는 디바이스에서 해당 이미지를 그릴 렌더링 되는 이미지의 픽셀 너비 됩니다 (216/72) * 96 = 288 개.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * int * int -&gt; unit" Usage="graphics.DrawImageUnscaled (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="x">그려지는 이미지의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="y">그려지는 이미지의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <summary>지정된 이미지를 좌표 쌍으로 지정된 위치에 원래 실제 크기로 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> 픽셀 너비에 대 한 값 및 가로 해상도 (인치당 도트 수)에 대 한 값을 저장 합니다. 이미지를 인치 단위로 측정 된 실제 너비를 픽셀 너비의 가로 해상도 나눈 것입니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 사용 하 여 이미지에는 실제 너비는 3 인치 이와 유사 픽셀 높이 실제 높이에 적용 됩니다.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> 메서드 인치 디스플레이 디바이스의 해상도 (인치당 도트 수)와 관계 없이 올바른 크기를 가집니다 이미지는 실제 크기를 사용 하 여 이미지를 그립니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 이미지에는 것으로 가정 합니다. 호출 하는 경우 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> 96dpi 해상도 포함 하는 디바이스에서 해당 이미지를 그릴 렌더링 되는 이미지의 픽셀 너비 됩니다 (216/72) * 96 = 288 개.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   JPEG 파일의 예제 폴더에 예제에서 이미지를 만듭니다.  
  
-   이미지의 왼쪽 위 모퉁이 그릴 점을 만듭니다.  
  
-   실제 크기를 사용 하 여 전체 이미지를 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#65)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#65)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#65)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * int * int * int * int -&gt; unit" Usage="graphics.DrawImageUnscaled (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="x">그려지는 이미지의 왼쪽 위 모퉁이에 대한 X 좌표입니다.</param>
        <param name="y">그려지는 이미지의 왼쪽 위 모퉁이에 대한 Y 좌표입니다.</param>
        <param name="width">사용되지 않습니다.</param>
        <param name="height">사용되지 않습니다.</param>
        <summary>지정된 위치에 원래의 크기를 사용하여 특정 이미지를 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Image> 픽셀 너비에 대 한 값 및 가로 해상도 (인치당 도트 수)에 대 한 값을 저장 합니다. 이미지를 인치 단위로 측정 된 실제 너비를 픽셀 너비의 가로 해상도 나눈 것입니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 사용 하 여 이미지에는 실제 너비는 3 인치 이와 유사 픽셀 높이 실제 높이에 적용 됩니다.  
  
 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> 메서드 인치 디스플레이 디바이스의 해상도 (인치당 도트 수)와 관계 없이 올바른 크기를 가집니다 이미지는 실제 크기를 사용 하 여 이미지를 그립니다. 예를 들어, 216 픽셀 너비, 72 인치당의 가로 해상도 이미지에는 것으로 가정 합니다. 호출 하는 경우 <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> 96dpi 해상도 포함 하는 디바이스에서 해당 이미지를 그릴 렌더링 되는 이미지의 픽셀 너비 됩니다 (216/72) * 96 = 288 개.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaledAndClipped">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaledAndClipped (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaledAndClipped(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaledAndClipped(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaledAndClipped : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImageUnscaledAndClipped (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" Index="0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" Index="1" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="image">그릴 <see cref="T:System.Drawing.Image" />입니다.</param>
        <param name="rect">이미지가 그려질 <see cref="T:System.Drawing.Rectangle" />입니다.</param>
        <summary>지정된 사각형에 맞게 이미지 크기를 조정하여 클리핑하지 않고 지정된 이미지를 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 <xref:System.Drawing.Graphics.DrawImageUnscaledAndClipped%2A> 메서드를 사용하는 방법을 보여 줍니다. 이 예제를 실행 하려면 Windows 폼에 붙여 넣습니다. 양식의 처리 <xref:System.Windows.Forms.Control.Paint> 이벤트 및 호출 합니다 `DrawImageUnscaled` 메서드에서 <xref:System.Windows.Forms.Control.Paint> 전달 하는 이벤트 처리 메서드를 `e` 으로 <xref:System.Windows.Forms.PaintEventArgs>입니다.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#8)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLine">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>좌표 쌍에 의해 지정된 두 개의 점을 연결하는 선을 그립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * System.Drawing.Point * System.Drawing.Point -&gt; unit" Usage="graphics.DrawLine (pen, pt1, pt2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="pt1">연결할 첫째 점을 나타내는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <param name="pt2">연결할 둘째 점을 나타내는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <summary>두 개의 <see cref="T:System.Drawing.Point" /> 구조체를 연결하는 선을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   선의 끝점에 대 한 끝점을 만듭니다.  
  
-   화면에 선을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#66)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#66)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#66)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">펜을 사용하여 선과 도형 그리기</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * System.Drawing.PointF * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawLine (pen, pt1, pt2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="pt1">연결할 첫째 점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <param name="pt2">연결할 둘째 점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <summary>두 개의 <see cref="T:System.Drawing.PointF" /> 구조체를 연결하는 선을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 두 지점을 연결 선을 그립니다 합니다 `pt1` 및 p`2` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   선의 끝점에 대 한 끝점을 만듭니다.  
  
-   화면에 선을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#67)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#67)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">펜을 사용하여 선과 도형 그리기</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, int32 x1, int32 y1, int32 x2, int32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawLine (pen, x1, y1, x2, y2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Int32" />
        <Parameter Name="y1" Type="System.Int32" />
        <Parameter Name="x2" Type="System.Int32" />
        <Parameter Name="y2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="x1">첫째 점의 X좌표입니다.</param>
        <param name="y1">첫째 점의 Y좌표입니다.</param>
        <param name="x2">둘째 점의 X좌표입니다.</param>
        <param name="y2">둘째 점의 Y좌표입니다.</param>
        <summary>좌표 쌍에 의해 지정된 두 개의 점을 연결하는 선을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 두 지점을 연결 선을 그립니다 합니다 `x1`, `y1`를 `x2`, 및 `y2` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   선의 끝점 좌표를 만듭니다.  
  
-   화면에 선을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#68)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#68)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">펜을 사용하여 선과 도형 그리기</related>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawLine (pen, x1, y1, x2, y2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="x1">첫째 점의 X좌표입니다.</param>
        <param name="y1">첫째 점의 Y좌표입니다.</param>
        <param name="x2">둘째 점의 X좌표입니다.</param>
        <param name="y2">둘째 점의 Y좌표입니다.</param>
        <summary>좌표 쌍에 의해 지정된 두 개의 점을 연결하는 선을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 두 지점을 연결 선을 그립니다 합니다 `x1`, `y1`를 `x2`, 및 `y2` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   선의 끝점 좌표를 만듭니다.  
  
-   화면에 선을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#69)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#69)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
        <related type="Article" href="~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md">펜을 사용하여 선과 도형 그리기</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLines">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Point" /> 구조체의 배열을 연결하는 일련의 선 세그먼트를 그립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawLines : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawLines (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">선분의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">연결할 점을 나타내는 <see cref="T:System.Drawing.Point" /> 구조체의 배열입니다.</param>
        <summary><see cref="T:System.Drawing.Point" /> 구조체의 배열을 연결하는 일련의 선 세그먼트를 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 일련의 끝점이 배열을 연결 하는 선 그립니다. 배열에서 처음 두 점 첫 번째 줄을 지정합니다. 각 추가 연결 지점 이전 선 세그먼트의 끝점 인 시작점 선 세그먼트의 끝을 지정 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   선 세그먼트의 요소의 배열을 만듭니다.  
  
-   화면에 연결 된 선 세그먼트를 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#70)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#70)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawLines : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawLines (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">선분의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">연결할 점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열입니다.</param>
        <summary><see cref="T:System.Drawing.PointF" /> 구조체의 배열을 연결하는 일련의 선 세그먼트를 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 일련의 끝점이 배열을 연결 하는 선 그립니다. 배열에서 처음 두 점 첫 번째 줄을 지정합니다. 각 추가 연결 지점 이전 선 세그먼트의 끝점 인 시작점 선 세그먼트의 끝을 지정 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   코드는 검은색 펜을을 만듭니다.  
  
-   선 세그먼트의 요소의 배열을 만듭니다.  
  
-   화면에 연결 된 선 세그먼트를 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#71)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#71)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPath">
      <MemberSignature Language="C#" Value="public void DrawPath (System.Drawing.Pen pen, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPath(class System.Drawing.Pen pen, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPath(System::Drawing::Pen ^ pen, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.DrawPath : System.Drawing.Pen * System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.DrawPath (pen, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="pen">경로의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="path">그릴 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />입니다.</param>
        <summary><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />를 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 그래픽 컨텍스트에 현재 변환에 적용 되는 <xref:System.Drawing.Drawing2D.GraphicsPath> 를 그리기 전에 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   그래픽 경로 개체를 만들어를 타원을 추가 합니다.  
  
-   Black 펜을 만듭니다.  
  
-   화면에 그래픽 경로를 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#72)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#72)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="path" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>좌표 쌍, 너비, 높이 및 두 개의 방사형 선에 의해 지정된 타원으로 정의된 부채꼴 모양을 그립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.DrawPie (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">부채꼴 모양의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="rect">부채꼴 모양에서 타원을 정의하는 경계 사각형을 나타내는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="startAngle">X축에서 부채꼴 모양의 첫째 면까지 시계 방향으로 측정한 각도입니다.</param>
        <param name="sweepAngle"><paramref name="startAngle" /> 매개 변수에서 부채꼴 모양의 둘째 점까지 시계 방향으로 측정한 각도입니다.</param>
        <summary><see cref="T:System.Drawing.Rectangle" /> 구조체와 두 개의 방사형 선에 의해 지정된 타원으로 정의된 부채꼴 모양을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 호의 끝점을 사용 하 여 교차 하는 두 개의 방사형 선에 타원의 호에서 정의 되는 원형 도형을 그립니다. 줄임표는 경계 사각형에 의해 정의 됩니다. 원형 도형이 정의한 두 개의 방사형 선에 구성 합니다 `startAngle` 및 `sweepAngle` 매개 변수 및 타원을 사용 하 여 방사형 해당 줄의 교차 부분 간에 호입니다.  
  
 경우는 `sweepAngle` 매개 변수 보다 작거나-360도 360도 보다 크거나, 360도 또는-360도 각각 것 처럼 처리 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   완전 한 타원을 제한 하는 사각형을 만듭니다.  
  
-   (X 축)에 상대적인 그리기를 시작 하는 각도 정의 및 그리기 (시계 방향으로 모두)입니다.  
  
-   화면에는 원형 세그먼트를 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#73)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#73)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * System.Drawing.RectangleF * single * single -&gt; unit" Usage="graphics.DrawPie (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">부채꼴 모양의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="rect">부채꼴 모양에서 타원을 정의하는 경계 사각형을 나타내는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="startAngle">X축에서 부채꼴 모양의 첫째 면까지 시계 방향으로 측정한 각도입니다.</param>
        <param name="sweepAngle"><paramref name="startAngle" /> 매개 변수에서 부채꼴 모양의 둘째 점까지 시계 방향으로 측정한 각도입니다.</param>
        <summary><see cref="T:System.Drawing.RectangleF" /> 구조체와 두 개의 방사형 선에 의해 지정된 타원으로 정의된 부채꼴 모양을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 호의 끝점을 사용 하 여 교차 하는 두 개의 방사형 선에 타원의 호에서 정의 되는 원형 도형을 그립니다. 줄임표는 경계 사각형에 의해 정의 됩니다. 원형 도형이 정의한 두 개의 방사형 선에 구성 합니다 `startAngle` 및 `sweepAngle` 매개 변수 및 타원을 사용 하 여 방사형 해당 줄의 교차 부분 간에 호입니다.  
  
 경우는 `sweepAngle` 매개 변수 보다 작거나-360도 360도 보다 크거나, 360도 또는-360도 각각 것 처럼 처리 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   완전 한 타원을 제한 하는 사각형을 만듭니다.  
  
-   (X 축)에 상대적인 그리기를 시작 하는 각도 정의 및 그리기 (시계 방향으로 모두)입니다.  
  
-   화면에는 원형 세그먼트를 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#74)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#74)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * int * int * int * int * int * int -&gt; unit" Usage="graphics.DrawPie (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">부채꼴 모양의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="x">타원을 부채꼴 모양이 되도록 정의하는 경계 사각형의 왼쪽 위 모퉁이에 대한 X좌표입니다.</param>
        <param name="y">타원을 부채꼴 모양이 되도록 정의하는 경계 사각형의 왼쪽 위 모퉁이에 대한 Y좌표입니다.</param>
        <param name="width">타원을 부채꼴 모양이 되도록 정의하는 경계 사각형의 너비입니다.</param>
        <param name="height">타원을 부채꼴 모양이 되도록 정의하는 경계 사각형의 높이입니다.</param>
        <param name="startAngle">X축에서 부채꼴 모양의 첫째 면까지 시계 방향으로 측정한 각도입니다.</param>
        <param name="sweepAngle"><paramref name="startAngle" /> 매개 변수에서 부채꼴 모양의 둘째 점까지 시계 방향으로 측정한 각도입니다.</param>
        <summary>좌표 쌍, 너비, 높이 및 두 개의 방사형 선에 의해 지정된 타원으로 정의된 부채꼴 모양을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 호의 끝점을 사용 하 여 교차 하는 두 개의 방사형 선에 타원의 호에서 정의 되는 원형 도형을 그립니다. 타원에 설명 된 경계 사각형에 의해 정의 됩니다 합니다 `x`, `y`를 `width`, 및 `height` 매개 변수입니다. 원형 도형이 정의한 두 개의 방사형 선에 구성 합니다 `startAngle` 및 `sweepAngle` 매개 변수 및 타원을 사용 하 여 방사형 해당 줄의 교차 부분 간에 호입니다.  
  
 경우는 `sweepAngle` 매개 변수 보다 작거나-360도 360도 보다 크거나, 360도 또는-360도 각각 것 처럼 처리 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   완전 한 타원을 제한 하는 사각형의 크기와 위치를 만듭니다.  
  
-   (X 축)에 상대적인 그리기를 시작 하는 각도 정의 및 그리기 (시계 방향으로 모두)입니다.  
  
-   화면에는 원형 도형을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#75)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#75)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawPie (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">부채꼴 모양의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="x">타원을 부채꼴 모양이 되도록 정의하는 경계 사각형의 왼쪽 위 모퉁이에 대한 X좌표입니다.</param>
        <param name="y">타원을 부채꼴 모양이 되도록 정의하는 경계 사각형의 왼쪽 위 모퉁이에 대한 Y좌표입니다.</param>
        <param name="width">타원을 부채꼴 모양이 되도록 정의하는 경계 사각형의 너비입니다.</param>
        <param name="height">타원을 부채꼴 모양이 되도록 정의하는 경계 사각형의 높이입니다.</param>
        <param name="startAngle">X축에서 부채꼴 모양의 첫째 면까지 시계 방향으로 측정한 각도입니다.</param>
        <param name="sweepAngle"><paramref name="startAngle" /> 매개 변수에서 부채꼴 모양의 둘째 점까지 시계 방향으로 측정한 각도입니다.</param>
        <summary>좌표 쌍, 너비, 높이 및 두 개의 방사형 선에 의해 지정된 타원으로 정의된 부채꼴 모양을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 호의 끝점을 사용 하 여 교차 하는 두 개의 방사형 선에 타원의 호에서 정의 되는 원형 도형을 그립니다. 타원에 설명 된 경계 사각형에 의해 정의 됩니다 합니다 `x`, `y`를 `width`, 및 `height` 매개 변수입니다. 원형 도형이 정의한 두 개의 방사형 선에 구성 합니다 `startAngle` 및 `sweepAngle` 매개 변수 및 타원을 사용 하 여 방사형 해당 줄의 교차 부분 간에 호입니다.  
  
 경우는 `sweepAngle` 매개 변수 보다 작거나-360도 360도 보다 크거나, 360도 또는-360도 각각 것 처럼 처리 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   완전 한 타원을 제한 하는 사각형의 크기와 위치를 만듭니다.  
  
-   (X 축)에 상대적인 그리기를 시작 하는 각도 정의 및 그리기 (시계 방향으로 모두)입니다.  
  
-   화면에는 원형 세그먼트를 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#76)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#76)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Point" /> 구조체의 배열에 의해 정의된 다각형을 그립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawPolygon : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawPolygon (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">다각형의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">다각형의 꼭짓점을 나타내는 <see cref="T:System.Drawing.Point" /> 구조체의 배열입니다.</param>
        <summary><see cref="T:System.Drawing.Point" /> 구조체의 배열에 의해 정의된 다각형을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 배열에서 두 연속 점 쌍 마다 다각형의 한 쪽을 지정합니다. 또한 배열의 첫 번째 지점과 마지막 지점 교차 하지 않을 경우 다각형의 마지막 쪽을 지정 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   다각형의 꼭지점에 대 한 7 개 요소의 배열을 만듭니다.  
  
-   화면에 다각형을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#78)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#78)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawPolygon : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawPolygon (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">다각형의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="points">다각형의 꼭짓점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열입니다.</param>
        <summary><see cref="T:System.Drawing.PointF" /> 구조체의 배열에 의해 정의된 다각형을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 배열에서 두 연속 점 쌍 마다 다각형의 한 쪽을 지정합니다. 또한 마지막 점과 배열 요소의 첫 번째 일치 하지 않는 경우 다각형의 마지막 쪽을 지정 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   다각형의 꼭지점에 대 한 7 개 요소의 배열을 만듭니다.  
  
-   화면에 다각형을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#77)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#77)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>좌표 쌍, 너비 및 높이에 의해 지정된 사각형을 그립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawRectangle (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">사각형의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="rect">그릴 사각형을 나타내는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <summary><see cref="T:System.Drawing.Rectangle" /> 구조체에 의해 지정된 사각형을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 그리는 방법에 대 한 자세한를 <xref:System.Drawing.RectangleF>를 참조 하세요 <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   사각형을 만듭니다.  
  
-   화면에 사각형을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#79)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#79)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#79)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawRectangle (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">사각형의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="x">그릴 사각형의 왼쪽 위 모퉁이의 X좌표입니다.</param>
        <param name="y">그릴 사각형의 왼쪽 위 모퉁이의 Y좌표입니다.</param>
        <param name="width">그릴 사각형의 너비입니다.</param>
        <param name="height">그릴 사각형의 높이입니다.</param>
        <summary>좌표 쌍, 너비 및 높이에 의해 지정된 사각형을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 그리는 방법에 대 한 자세한를 <xref:System.Drawing.RectangleF>를 참조 하세요 <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   사각형의 크기와 위치를 만듭니다.  
  
-   화면에 사각형을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#80)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#80)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawRectangle (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">사각형의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="x">그릴 사각형의 왼쪽 위 모퉁이의 X좌표입니다.</param>
        <param name="y">그릴 사각형의 왼쪽 위 모퉁이의 Y좌표입니다.</param>
        <param name="width">그릴 사각형의 너비입니다.</param>
        <param name="height">그릴 사각형의 높이입니다.</param>
        <summary>좌표 쌍, 너비 및 높이에 의해 지정된 사각형을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 그리는 방법에 대 한 자세한를 <xref:System.Drawing.RectangleF>를 참조 하세요 <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   사각형의 크기와 위치를 만듭니다.  
  
-   화면에 사각형을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#81)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#81)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#81)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Rectangle" /> 구조체에 의해 지정된 일련의 사각형을 그립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangles : System.Drawing.Pen * System.Drawing.Rectangle[] -&gt; unit" Usage="graphics.DrawRectangles (pen, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="pen">사각형 윤곽선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="rects">그릴 사각형을 나타내는 <see cref="T:System.Drawing.Rectangle" /> 구조체의 배열입니다.</param>
        <summary><see cref="T:System.Drawing.Rectangle" /> 구조체에 의해 지정된 일련의 사각형을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   세 개의 사각형의 배열을 만듭니다.  
  
-   화면에 사각형을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#82)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#82)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="rects" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rects" />이 길이가 0인 배열입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangles : System.Drawing.Pen * System.Drawing.RectangleF[] -&gt; unit" Usage="graphics.DrawRectangles (pen, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="pen">사각형 윤곽선의 색, 너비 및 스타일을 결정하는 <see cref="T:System.Drawing.Pen" />입니다.</param>
        <param name="rects">그릴 사각형을 나타내는 <see cref="T:System.Drawing.RectangleF" /> 구조체의 배열입니다.</param>
        <summary><see cref="T:System.Drawing.RectangleF" /> 구조체에 의해 지정된 일련의 사각형을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Black 펜을 만듭니다.  
  
-   세 개의 사각형의 배열을 만듭니다.  
  
-   화면에 사각형을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#83)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#83)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#83)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pen" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="rects" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rects" />이 길이가 0인 배열입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 위치에 지정된 <see cref="T:System.Drawing.Brush" /> 및 <see cref="T:System.Drawing.Font" /> 개체로 지정된 텍스트 문자열을 그립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawString (s, font, brush, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="s">그릴 문자열입니다.</param>
        <param name="font">문자열의 텍스트 형식을 정의하는 <see cref="T:System.Drawing.Font" />입니다.</param>
        <param name="brush">그려지는 텍스트의 색과 질감을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="point">그려지는 이미지의 왼쪽 위 모퉁이를 지정하는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <summary>지정된 위치에 지정된 <see cref="T:System.Drawing.Brush" /> 및 <see cref="T:System.Drawing.Font" /> 개체로 지정된 텍스트 문자열을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   그릴 텍스트 문자열을 만듭니다.  
  
-   글꼴을 Arial (16pt)으로 정의합니다.  
  
-   사용 하 여 그리는 단색의 검정 브러시를 만듭니다.  
  
-   왼쪽 위 모퉁이에서 텍스트를 그릴 수 있는 지점을 만듭니다.  
  
-   글꼴, 브러시 및 대상 지점을 사용 하 여 화면에 문자열을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#84)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#84)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#84)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="s" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">글꼴 및 텍스트 사용</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawString (s, font, brush, layoutRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="s">그릴 문자열입니다.</param>
        <param name="font">문자열의 텍스트 형식을 정의하는 <see cref="T:System.Drawing.Font" />입니다.</param>
        <param name="brush">그려지는 텍스트의 색과 질감을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="layoutRectangle">그려지는 텍스트의 위치를 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <summary>지정된 사각형에 지정된 <see cref="T:System.Drawing.Brush" /> 및 <see cref="T:System.Drawing.Font" /> 개체로 지정된 텍스트 문자열을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 나타내는 텍스트를 `s` 매개 변수를 나타내는 사각형 안에 그릴는 `layoutRectangle` 매개 변수입니다. 텍스트 사각형에 맞지 않으면 가장 가까운 단어에서 잘립니다. 사각형 내부에 문자열을 그리는 방법을 조작 하는 <xref:System.Drawing.Graphics.DrawString%2A> 오버 로드를 <xref:System.Drawing.StringFormat>합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   그릴 텍스트 문자열을 만듭니다.  
  
-   글꼴을 Arial (16pt)으로 정의합니다.  
  
-   사용 하 여 그리는 단색의 검정 브러시를 만듭니다.  
  
-   텍스트를 그릴 사각형을 만듭니다.  
  
-   화면에 사각형을 그립니다.  
  
-   글꼴, 브러시 및 대상 사각형을 사용 하 여 화면에 문자열을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#86)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#86)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="s" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">글꼴 및 텍스트 사용</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.PointF * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, point, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">그릴 문자열입니다.</param>
        <param name="font">문자열의 텍스트 형식을 정의하는 <see cref="T:System.Drawing.Font" />입니다.</param>
        <param name="brush">그려지는 텍스트의 색과 질감을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="point">그려지는 이미지의 왼쪽 위 모퉁이를 지정하는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <param name="format">그릴 텍스트에 적용되는 줄 간격 및 맞춤과 같은 서식 특성을 지정하는 <see cref="T:System.Drawing.StringFormat" />입니다.</param>
        <summary>지정된 위치에 지정된 <see cref="T:System.Drawing.Brush" />의 서식 특성을 사용하여 지정된 <see cref="T:System.Drawing.Font" /> 및 <see cref="T:System.Drawing.StringFormat" /> 개체로 지정된 텍스트 문자열을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   그릴 텍스트 문자열을 만듭니다.  
  
-   글꼴을 Arial (16pt)으로 정의합니다.  
  
-   사용 하 여 그리는 단색의 검정 브러시를 만듭니다.  
  
-   왼쪽 위 모퉁이에서 텍스트를 그릴 수 있는 지점을 만듭니다.  
  
-   세로로 그릴 문자열의 서식을 설정 합니다.  
  
-   글꼴, 브러시, 대상 지점 및 형식을 사용 하 여 화면에 문자열을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#85)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#85)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#85)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="s" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">글꼴 및 텍스트 사용</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, layoutRectangle, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">그릴 문자열입니다.</param>
        <param name="font">문자열의 텍스트 형식을 정의하는 <see cref="T:System.Drawing.Font" />입니다.</param>
        <param name="brush">그려지는 텍스트의 색과 질감을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="layoutRectangle">그려지는 텍스트의 위치를 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="format">그릴 텍스트에 적용되는 줄 간격 및 맞춤과 같은 서식 특성을 지정하는 <see cref="T:System.Drawing.StringFormat" />입니다.</param>
        <summary>지정된 사각형에 지정된 <see cref="T:System.Drawing.Brush" />의 서식 특성을 사용하여 지정된 <see cref="T:System.Drawing.Font" /> 및 <see cref="T:System.Drawing.StringFormat" /> 개체로 지정된 텍스트 문자열을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 나타내는 텍스트를 `s` 매개 변수를 나타내는 사각형 안에 그릴는 `layoutRectangle` 매개 변수입니다. 텍스트 사각형에 맞지 않으면 잘립니다 가장 가까운 단어에서 지정 하지 않으면는 `format` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   그릴 텍스트 문자열을 만듭니다.  
  
-   글꼴을 Arial (16pt)으로 정의합니다.  
  
-   사용 하 여 그리는 단색의 검정 브러시를 만듭니다.  
  
-   텍스트를 그릴 사각형을 만듭니다.  
  
-   화면에 사각형을 그립니다.  
  
-   사각형 내에서 가운데 문자열의 서식을 설정 합니다.  
  
-   글꼴, 브러시 및 대상 사각형을 사용 하 여 화면에 문자열을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#87)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#87)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="s" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">글꼴 및 텍스트 사용</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * single * single -&gt; unit" Usage="graphics.DrawString (s, font, brush, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="s">그릴 문자열입니다.</param>
        <param name="font">문자열의 텍스트 형식을 정의하는 <see cref="T:System.Drawing.Font" />입니다.</param>
        <param name="brush">그려지는 텍스트의 색과 질감을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="x">그려지는 텍스트의 왼쪽 위 모퉁이에 대한 X좌표입니다.</param>
        <param name="y">그려지는 텍스트의 왼쪽 위 모퉁이에 대한 Y좌표입니다.</param>
        <summary>지정된 위치에 지정된 <see cref="T:System.Drawing.Brush" /> 및 <see cref="T:System.Drawing.Font" /> 개체로 지정된 텍스트 문자열을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   그릴 텍스트 문자열을 만듭니다.  
  
-   글꼴을 Arial (16pt)으로 정의합니다.  
  
-   사용 하 여 그리는 black 단색 브러시를 만듭니다.  
  
-   왼쪽 위 모퉁이에서 텍스트를 그릴 수 있는 지점을 만듭니다.  
  
-   글꼴, 브러시 및 대상 지점을 사용 하 여 화면에 문자열을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#88)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#88)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="s" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">글꼴 및 텍스트 사용</related>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * single * single * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, x, y, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">그릴 문자열입니다.</param>
        <param name="font">문자열의 텍스트 형식을 정의하는 <see cref="T:System.Drawing.Font" />입니다.</param>
        <param name="brush">그려지는 텍스트의 색과 질감을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="x">그려지는 텍스트의 왼쪽 위 모퉁이에 대한 X좌표입니다.</param>
        <param name="y">그려지는 텍스트의 왼쪽 위 모퉁이에 대한 Y좌표입니다.</param>
        <param name="format">그릴 텍스트에 적용되는 줄 간격 및 맞춤과 같은 서식 특성을 지정하는 <see cref="T:System.Drawing.StringFormat" />입니다.</param>
        <summary>지정된 위치에 지정된 <see cref="T:System.Drawing.Brush" />의 서식 특성을 사용하여 지정된 <see cref="T:System.Drawing.Font" /> 및 <see cref="T:System.Drawing.StringFormat" /> 개체로 지정된 텍스트 문자열을 그립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   그릴 텍스트 문자열을 만듭니다.  
  
-   글꼴을 Arial (16pt)으로 정의합니다.  
  
-   사용 하 여 그리는 단색의 검정 브러시를 만듭니다.  
  
-   그릴 텍스트를 왼쪽 위 모퉁이 대 한 점의 좌표를 만듭니다.  
  
-   세로로 그릴 문자열의 형식을 가져오거나 설정 합니다.  
  
-   글꼴, 브러시, 대상 지점 및 형식을 사용 하 여 화면에 문자열을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#89)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#89)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="s" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">글꼴 및 텍스트 사용</related>
      </Docs>
    </Member>
    <Member MemberName="EndContainer">
      <MemberSignature Language="C#" Value="public void EndContainer (System.Drawing.Drawing2D.GraphicsContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndContainer(class System.Drawing.Drawing2D.GraphicsContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndContainer (container As GraphicsContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndContainer(System::Drawing::Drawing2D::GraphicsContainer ^ container);" />
      <MemberSignature Language="F#" Value="member this.EndContainer : System.Drawing.Drawing2D.GraphicsContainer -&gt; unit" Usage="graphics.EndContainer container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Drawing.Drawing2D.GraphicsContainer" />
      </Parameters>
      <Docs>
        <param name="container">이 메서드가 복원하는 컨테이너를 나타내는 <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" />입니다.</param>
        <summary>현재 그래픽 컨테이너를 닫고 <see cref="T:System.Drawing.Graphics" /> 메서드에 대한 호출에 의해 저장된 상태로 이 <see cref="M:System.Drawing.Graphics.BeginContainer" />의 상태를 복원합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 중첩 된 graphics 컨테이너를 만드는 방법. Graphics 컨테이너에는 변환, 클리핑 영역 및 렌더링 속성과 같은 그래픽 상태를 유지 합니다.  
  
 호출 하는 경우는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드를 <xref:System.Drawing.Graphics>, 상태를 포함 하는 정보 블록이 <xref:System.Drawing.Graphics> 스택에 배치 됩니다. 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드가 반환 되는 <xref:System.Drawing.Drawing2D.GraphicsContainer> 정보 블록을 식별 하는 합니다. 식별 하는 개체를 전달 하는 경우는 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드 정보 블록 스택에서 제거 되 고 복원 하는 데 사용 되는 <xref:System.Drawing.Graphics> 당시 시점의 상태로 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출 합니다.  
  
 컨테이너는 중첩 될 수 있습니다. 즉, 호출할 수 있습니다 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드를 호출 하기 전에 여러 번의 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드. 호출할 때마다 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 정보 블록을 스택에 배치 되 고 수신 하는 <xref:System.Drawing.Drawing2D.GraphicsContainer> 정보 블록에 대 한 합니다. 해당 개체를 하나 전달 하는 경우는 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드를를 <xref:System.Drawing.Graphics> 당시 시점의 상태로 반환 됩니다 합니다 <xref:System.Drawing.Graphics.BeginContainer%2A> 는 특정 반환 하는 메서드 호출 <xref:System.Drawing.Drawing2D.GraphicsContainer>. 정보 블록에서 스택에 배치 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출 스택에서 제거 되 고 그 후 해당 스택에 배치 하는 모든 정보 블록 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출도 제거 됩니다.  
  
 에 대 한 호출을 <xref:System.Drawing.Graphics.Save%2A> 메서드 호출 스택의 동일 위치 정보 블록을 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드. 처럼를 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드 호출을 이룹니다를 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출을 <xref:System.Drawing.Graphics.Restore%2A> 메서드 호출을 이룹니다를 <xref:System.Drawing.Graphics.Save%2A> 메서드 호출 합니다.  
  
 호출 하는 경우는 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드를 스택에 배치 된 모든 정보 블록 (여는 <xref:System.Drawing.Graphics.Save%2A> 메서드 또는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드) 해당 호출 후는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 스택에서 제거 됩니다. 마찬가지로 호출 하는 경우는 <xref:System.Drawing.Graphics.Restore%2A> 메서드를 스택에 배치 된 모든 정보 블록 (여는 <xref:System.Drawing.Graphics.Save%2A> 메서드 또는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드) 해당 호출 후는 <xref:System.Drawing.Graphics.Save%2A> 메서드 스택에서 제거 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   새 그래픽 컨테이너를 열고 이전 컨테이너를 저장 합니다.  
  
-   컨테이너에서 세계 좌표를 변환합니다.  
  
-   빨간색 사각형을 채우는 (의 좌표를 변환 합니다) 새 컨테이너입니다.  
  
-   새 컨테이너를 닫고 저장된 된 컨테이너를 복원 합니다.  
  
-   저장된 된 컨테이너의 녹색 사각형 (변환된 된 좌표)을 채웁니다.  
  
 결과 동일한 크기의 빨간색 사각형 위에 놓입니다 녹색 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#90)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#90)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#90)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateMetafile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 지점에 표시하기 위해 지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 콜백 메서드에 한 번에 하나씩 보냅니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoint">그려지는 메타파일의 왼쪽 위 모퉁이 위치를 지정하는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <summary>지정된 지점에 표시하기 위해 지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 콜백 메서드에 한 번에 하나씩 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
   
  
## Examples  
 다음 코드 예제에서는 폼을 만듭니다는 <xref:System.Drawing.Imaging.Metafile> private 멤버 중 하나입니다. <xref:System.Windows.Forms.Control.OnPaint%2A> 메서드 호출 <xref:System.Drawing.Graphics.EnumerateMetafile%2A>를 호출 하는 폼의 `MetafileCallback` 메타 파일의 각 레코드에 대 한 메서드. `MetafileCallback` 메서드는 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 메서드를 호출합니다. 있음을 합니다 `MetafileCallback` 로 레코드 데이터를 수신 하는 메서드는 <xref:System.IntPtr>, 하지만 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 메서드는 바이트 배열에서 레코드 데이터를 필요로 합니다. 에 대 한 호출 <xref:System.Runtime.InteropServices.Marshal.Copy%2A> 에 전달할 수 있도록 레코드 데이터를 바이트 배열로 복사 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>합니다.  
  
 [!code-csharp[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoints">그려지는 메타파일의 크기와 위치를 결정하는 평행 사변형이 정의된 세 개의 <see cref="T:System.Drawing.Point" /> 구조체 배열입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 지정된 평행 사변형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoint">그려지는 메타파일의 왼쪽 위 모퉁이 위치를 지정하는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <summary>지정된 지점에 표시하기 위해 지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 콜백 메서드에 한 번에 하나씩 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoints">그려지는 메타파일의 크기와 위치를 결정하는 평행 사변형이 정의된 세 개의 <see cref="T:System.Drawing.PointF" /> 구조체 배열입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 지정된 평행 사변형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.PointF> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다. 그려지는 메타 파일은 평행 사변형에 맞추기 위해 크기가 조정 되 고 있습니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destRect">그려지는 메타파일의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 지정된 사각형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destRect">그려지는 메타파일의 위치와 크기를 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 지정된 사각형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoint">그려지는 메타파일의 왼쪽 위 모퉁이 위치를 지정하는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <summary>지정된 지점에 표시하기 위해 지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 콜백 메서드에 한 번에 하나씩 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%2A>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoints">그려지는 메타파일의 크기와 위치를 결정하는 평행 사변형이 정의된 세 개의 <see cref="T:System.Drawing.Point" /> 구조체 배열입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 지정된 평행 사변형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoint">그려지는 메타파일의 왼쪽 위 모퉁이 위치를 지정하는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <summary>지정된 지점에 표시하기 위해 지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 콜백 메서드에 한 번에 하나씩 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoints">그려지는 메타파일의 크기와 위치를 결정하는 평행 사변형이 정의된 세 개의 <see cref="T:System.Drawing.PointF" /> 구조체 배열입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 지정된 평행 사변형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.PointF> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다. 그려지는 메타 파일은 평행 사변형에 맞추기 위해 크기가 조정 되 고 있습니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destRect">그려지는 메타파일의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 지정된 사각형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destRect">그려지는 메타파일의 위치와 크기를 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 지정된 사각형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoint">그려지는 메타파일의 왼쪽 위 모퉁이 위치를 지정하는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <param name="imageAttr">그려지는 이미지에 대한 이미지 특성 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 지정된 이미지 특성으로 지정된 지점에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoint">그려지는 메타파일의 왼쪽 위 모퉁이 위치를 지정하는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />에서 선택한 사각형의 레코드를 지정된 지점에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoints">그려지는 메타파일의 크기와 위치를 결정하는 평행 사변형이 정의된 세 개의 <see cref="T:System.Drawing.Point" /> 구조체 배열입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <param name="imageAttr">그려지는 이미지에 대한 이미지 특성 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 지정된 이미지 특성으로 지정된 평행 사변형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.Point> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다. 그려지는 메타 파일은 평행 사변형에 맞추기 위해 크기가 조정 되 고 있습니다.  
  
 지정 된 이미지 특성은 `imageAttr` 메타 파일 작성 된 경우 지정 된 매개 변수 대체 합니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoints">그려지는 메타파일의 크기와 위치를 결정하는 평행 사변형이 정의된 세 개의 <see cref="T:System.Drawing.Point" /> 구조체 배열입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />의 선택한 사각형에 있는 레코드를 지정된 평행 사변형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.Point> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다. 그려지는 메타 파일은 평행 사변형에 맞추기 위해 크기가 조정 되 고 있습니다.  
  
 지정 된 영역 외부에서 수행 하는 모든 그리기를 `srcRect` 매개 변수가 무시 됩니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoint">그려지는 메타파일의 왼쪽 위 모퉁이 위치를 지정하는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <param name="imageAttr">그려지는 이미지에 대한 이미지 특성 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 지정된 이미지 특성으로 지정된 지점에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, 특정 메서드를 호출 하 여 이렇게 해야 <xref:System.Drawing.Imaging.Metafile> 열거 되는 합니다.  
  
 지정 된 이미지 특성은 `imageAttr` 메타 파일 작성 된 경우 지정 된 매개 변수 대체 합니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoint">그려지는 메타파일의 왼쪽 위 모퉁이 위치를 지정하는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />에서 선택한 사각형의 레코드를 지정된 지점에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 지정 된 영역 외부에서 수행 하는 모든 그리기를 `srcRect` 매개 변수가 무시 됩니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoints">그려지는 메타파일의 크기와 위치를 결정하는 평행 사변형이 정의된 세 개의 <see cref="T:System.Drawing.PointF" /> 구조체 배열입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <param name="imageAttr">그려지는 이미지에 대한 이미지 특성 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 지정된 이미지 특성으로 지정된 평행 사변형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.PointF> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다. 그려지는 메타 파일은 평행 사변형에 맞추기 위해 크기가 조정 되 고 있습니다.  
  
 지정 된 이미지 특성은 `imageAttr` 메타 파일 작성 된 경우 지정 된 매개 변수 대체 합니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoints">그려지는 메타파일의 크기와 위치를 결정하는 평행 사변형이 정의된 세 개의 <see cref="T:System.Drawing.PointF" /> 구조체 배열입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />의 선택한 사각형에 있는 레코드를 지정된 평행 사변형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.Point> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다. 그려지는 메타 파일은 평행 사변형에 맞추기 위해 크기가 조정 되 고 있습니다.  
  
 지정 된 영역 외부에서 수행 하는 모든 그리기를 `srcRect` 매개 변수가 무시 됩니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destRect">그려지는 메타파일의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <param name="imageAttr">그려지는 이미지에 대한 이미지 특성 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 지정된 이미지 특성으로 지정된 사각형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 지정 된 이미지 특성은 `imageAttr` 메타 파일 작성 된 경우 지정 된 매개 변수 대체 합니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destRect">그려지는 메타파일의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />의 선택한 사각형에 있는 레코드를 지정된 사각형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 지정 된 영역 외부에서 수행 하는 모든 그리기를 `srcRect` 매개 변수가 무시 됩니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destRect">그려지는 메타파일의 위치와 크기를 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <param name="imageAttr">그려지는 이미지에 대한 이미지 특성 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Imaging.Metafile" />의 레코드를 지정된 이미지 특성으로 지정된 사각형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 지정 된 이미지 특성은 `imageAttr` 메타 파일 작성 된 경우 지정 된 매개 변수 대체 합니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destRect">그려지는 메타파일의 위치와 크기를 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />의 선택한 사각형에 있는 레코드를 지정된 사각형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 지정 된 영역 외부에서 수행 하는 모든 그리기를 `srcRect` 매개 변수가 무시 됩니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoint">그려지는 메타파일의 왼쪽 위 모퉁이 위치를 지정하는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />에서 선택한 사각형의 레코드를 지정된 지점에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoints">그려지는 메타파일의 크기와 위치를 결정하는 평행 사변형이 정의된 세 개의 <see cref="T:System.Drawing.Point" /> 구조체 배열입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />의 선택한 사각형에 있는 레코드를 지정된 평행 사변형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.Point> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다. 그려지는 메타 파일은 평행 사변형에 맞추기 위해 크기가 조정 되 고 있습니다.  
  
 지정 된 영역 외부에서 수행 하는 모든 그리기를 `srcRect` 매개 변수가 무시 됩니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoint">그려지는 메타파일의 왼쪽 위 모퉁이 위치를 지정하는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />에서 선택한 사각형의 레코드를 지정된 지점에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 지정 된 영역 외부에서 수행 하는 모든 그리기를 `srcRect` 매개 변수가 무시 됩니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoints">그려지는 메타파일의 크기와 위치를 결정하는 평행 사변형이 정의된 세 개의 <see cref="T:System.Drawing.PointF" /> 구조체 배열입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />의 선택한 사각형에 있는 레코드를 지정된 평행 사변형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.PointF> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다. 그려지는 메타 파일은 평행 사변형에 맞추기 위해 크기가 조정 되 고 있습니다.  
  
 지정 된 영역 외부에서 수행 하는 모든 그리기를 `srcRect` 매개 변수가 무시 됩니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destRect">그려지는 메타파일의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />의 선택한 사각형에 있는 레코드를 지정된 사각형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 지정 된 영역 외부에서 수행 하는 모든 그리기를 `srcRect` 매개 변수가 무시 됩니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destRect">그려지는 메타파일의 위치와 크기를 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="srcUnit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />의 선택한 사각형에 있는 레코드를 지정된 사각형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는`callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 지정 된 영역 외부에서 수행 하는 모든 그리기를 `srcRect` 매개 변수가 무시 됩니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoint">그려지는 메타파일의 왼쪽 위 모퉁이 위치를 지정하는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="unit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <param name="imageAttr">그려지는 이미지에 대한 이미지 특성 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />의 선택한 사각형에 있는 레코드를 지정된 이미지 특성으로 지정된 지점에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoints">그려지는 메타파일의 크기와 위치를 결정하는 평행 사변형이 정의된 세 개의 <see cref="T:System.Drawing.Point" /> 구조체 배열입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="unit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <param name="imageAttr">그려지는 이미지에 대한 이미지 특성 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />의 선택한 사각형에 있는 레코드를 지정된 이미지 특성으로 지정된 평행 사변형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.Point> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다. 그려지는 메타 파일은 평행 사변형에 맞추기 위해 크기가 조정 되 고 있습니다.  
  
 지정 된 영역 외부에서 수행 하는 모든 그리기를 `srcRect` 매개 변수가 무시 됩니다.  
  
 지정 된 이미지 특성은 `imageAttr` 메타 파일 작성 된 경우 지정 된 매개 변수 대체 합니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoint">그려지는 메타파일의 왼쪽 위 모퉁이 위치를 지정하는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="unit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <param name="imageAttr">그려지는 이미지에 대한 이미지 특성 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />의 선택한 사각형에 있는 레코드를 지정된 이미지 특성으로 지정된 지점에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 지정 된 영역 외부에서 수행 하는 모든 그리기를 `srcRect` 매개 변수가 무시 됩니다.  
  
 지정 된 이미지 특성은 `imageAttr` 메타 파일 작성 된 경우 지정 된 매개 변수 대체 합니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destPoints">그려지는 메타파일의 크기와 위치를 결정하는 평행 사변형이 정의된 세 개의 <see cref="T:System.Drawing.PointF" /> 구조체 배열입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="unit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <param name="imageAttr">그려지는 이미지에 대한 이미지 특성 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />의 선택한 사각형에 있는 레코드를 지정된 이미지 특성으로 지정된 평행 사변형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 `destPoints` 세 지점이 평행 사변형의 매개 변수를 지정 합니다. 세 가지 <xref:System.Drawing.PointF> 구조는 평행 사변형의 왼쪽 위, 오른쪽 위 및 왼쪽 아래 모서리를 나타냅니다. 네 번째 지점은 평행 사변형을 구성 하기 위해 처음 3 개에서 추정 됩니다. 그려지는 메타 파일은 평행 사변형에 맞추기 위해 크기가 조정 되 고 있습니다.  
  
 지정 된 영역 외부에서 수행 하는 모든 그리기를 `srcRect` 매개 변수가 무시 됩니다.  
  
 지정 된 이미지 특성은 `imageAttr` 메타 파일 작성 된 경우 지정 된 매개 변수 대체 합니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destRect">그려지는 메타파일의 위치와 크기를 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="unit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <param name="imageAttr">그려지는 이미지에 대한 이미지 특성 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />의 선택한 사각형에 있는 레코드를 지정된 이미지 특성으로 지정된 사각형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 지정 된 영역 외부에서 수행 하는 모든 그리기를 `srcRect` 매개 변수가 무시 됩니다.  
  
 지정 된 이미지 특성은 `imageAttr` 메타 파일 작성 된 경우 지정 된 매개 변수 대체 합니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">열거할 <see cref="T:System.Drawing.Imaging.Metafile" />입니다.</param>
        <param name="destRect">그려지는 메타파일의 위치와 크기를 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="srcRect">왼쪽 위 모퉁이를 기준으로 하여 그릴 메타파일의 부분을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="unit"><paramref name="srcRect" /> 매개 변수로 지정한 사각형에 포함된 메타파일의 부분을 결정하는 데 사용되는 측정 단위를 지정하는 <see cref="T:System.Drawing.GraphicsUnit" /> 열거형의 멤버입니다.</param>
        <param name="callback">메타파일 레코드가 보내질 메서드를 지정하는 <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> 대리자입니다.</param>
        <param name="callbackData">필수적이지만 무시되는 내부 포인터입니다. 이 매개 변수에 대해 <see cref="F:System.IntPtr.Zero" />를 전달할 수 있습니다.</param>
        <param name="imageAttr">그려지는 이미지에 대한 이미지 특성 정보를 지정하는 <see cref="T:System.Drawing.Imaging.ImageAttributes" />입니다.</param>
        <summary><see cref="T:System.Drawing.Imaging.Metafile" />의 선택한 사각형에 있는 레코드를 지정된 이미지 특성으로 지정된 사각형에 표시하기 위해 한 번에 하나씩 콜백 메서드로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 메타 파일에 포함 된 레코드를 열거 합니다. 각 레코드는 개별적으로 지정 된 콜백 메서드는 `callback` 매개 변수입니다. 일반적으로 콜백 메서드 호출을 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> "재생" 또는 그리기, 레코드에 대 한 방법입니다.  
  
 콜백 메서드를 호출 하는 경우 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>를 호출 하 여 이렇게 해야 합니다 <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> 특정 메서드의 <xref:System.Drawing.Imaging.Metafile> 열거 되.  
  
 지정 된 영역 외부에서 수행 하는 모든 그리기를 `srcRect` 매개 변수가 무시 됩니다.  
  
 지정 된 이미지 특성은 `imageAttr` 메타 파일 작성 된 경우 지정 된 매개 변수 대체 합니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>를 참조하십시오.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/7152b45b-a55c-49bc-8c78-ae002a844f71">이미지, 비트맵 및 메타파일</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExcludeClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 업데이트하여 <see cref="T:System.Drawing.Rectangle" /> 구조체에 의해 지정된 영역을 제외합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExcludeClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.ExcludeClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.ExcludeClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">사각형이 클립 영역에서 제외되도록 지정하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 업데이트하여 <see cref="T:System.Drawing.Rectangle" /> 구조체에 의해 지정된 영역을 제외합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 영역을 제외 합니다 `rect` 현재 클립 영역에서 매개 변수 결과 영역을 할당 합니다 <xref:System.Drawing.Graphics.Clip%2A> 이 속성 <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   100 픽셀 x 100 픽셀의 사각형 있는 왼쪽 위 모퉁이 좌표 (100, 100)를 만듭니다.  
  
-   사각형에 의해 정의 된 영역을 만듭니다.  
  
-   사각형 영역을 제외 하도록 클립 영역을 설정 합니다.  
  
-   300 픽셀 x 300 픽셀의 사각형 왼쪽 위 모퉁이 있는 파란색 단색 브러시를 사용 하 여 좌표 (0, 0)를 채웁니다.  
  
 결과 누락 된 해당 오른쪽 아래 모서리 쪽으로 사각형 영역을 사용 하 여 파란색 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#92)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#92)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#92)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.ExcludeClip : System.Drawing.Region -&gt; unit" Usage="graphics.ExcludeClip region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">영역이 클립 영역에서 제외되도록 지정하는 <see cref="T:System.Drawing.Region" />입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 업데이트하여 <see cref="T:System.Drawing.Region" />에 의해 지정된 영역을 제외합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 영역을 제외 합니다 `region` 현재 클립 영역에서 매개 변수 결과 영역을 할당 합니다 <xref:System.Drawing.Graphics.Clip%2A> 이 속성 <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   100 픽셀 x 100 픽셀의 사각형 있는 왼쪽 위 모퉁이 좌표 (100, 100)를 만듭니다.  
  
-   사각형을 제외할 클립 영역을 설정 합니다.  
  
-   300 픽셀 x 300 픽셀의 사각형 왼쪽 위 모퉁이 있는 파란색 단색 브러시를 사용 하 여 좌표 (0, 0)를 채웁니다.  
  
 결과 누락 된 해당 오른쪽 아래 모서리 쪽으로 사각형 영역을 사용 하 여 파란색 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#91)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#91)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#91)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Point" /> 구조체의 배열로 정의된 닫힌 카디널 스플라인 곡선의 내부를 채웁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] -&gt; unit" Usage="graphics.FillClosedCurve (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="points">스플라인을 정의하는 <see cref="T:System.Drawing.Point" /> 구조체의 배열입니다.</param>
        <summary><see cref="T:System.Drawing.Point" /> 구조체의 배열로 정의된 닫힌 카디널 스플라인 곡선의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 폐쇄형된 카디널 스플라인의 내부를 채웁니다. 마지막 지점을 첫 번째 요소와 일치 하지 않는 경우 추가 곡선 세그먼트를 닫아야를 첫 번째 지점과 마지막 지점에서 추가 됩니다.  
  
 점 배열에 4 개 이상 있어야 <xref:System.Drawing.Point> 구조입니다.  
  
 이 메서드는 0.5의 기본 장력을 사용 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 단색 브러시를 만듭니다.  
  
-   스플라인을 정의 4 개 요소의 배열을 만듭니다.  
  
-   화면에 곡선을 채웁니다.  
  
 곡선에 있는 기본 장력 0.5입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#93)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#93)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#93)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] -&gt; unit" Usage="graphics.FillClosedCurve (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="points">스플라인을 정의하는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열입니다.</param>
        <summary><see cref="T:System.Drawing.PointF" /> 구조체의 배열로 정의된 닫힌 카디널 스플라인 곡선의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 폐쇄형된 카디널 스플라인의 내부를 채웁니다. 마지막 지점을 첫 번째 요소와 일치 하지 않는 경우 추가 곡선 세그먼트를 닫아야를 첫 번째 지점과 마지막 지점에서 추가 됩니다.  
  
 점 배열에 4 개 이상 있어야 <xref:System.Drawing.PointF> 구조입니다.  
  
 이 메서드는 0.5의 기본 장력을 사용 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 단색 브러시를 만듭니다.  
  
-   스플라인을 정의 4 개 요소의 배열을 만듭니다.  
  
-   화면에 곡선을 채웁니다.  
  
 곡선에 있는 기본 장력 0.5입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#96)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#96)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#96)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="points">스플라인을 정의하는 <see cref="T:System.Drawing.Point" /> 구조체의 배열입니다.</param>
        <param name="fillmode">곡선이 채워지는 방법을 결정하는 <see cref="T:System.Drawing.Drawing2D.FillMode" /> 열거형의 멤버입니다.</param>
        <summary>지정된 채우기 모드를 사용하여 <see cref="T:System.Drawing.Point" /> 구조체의 배열로 정의된 닫힌 카디널 스플라인 곡선의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 폐쇄형된 카디널 스플라인의 내부를 채웁니다. 마지막 지점을 첫 번째 요소와 일치 하지 않는 경우 추가 곡선 세그먼트를 닫아야를 첫 번째 지점과 마지막 지점에서 추가 됩니다.  
  
 점 배열에 4 개 이상 있어야 <xref:System.Drawing.Point> 구조입니다.  
  
 이 메서드는 0.5의 기본 장력을 사용 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 단색 브러시를 만듭니다.  
  
-   스플라인을 정의 4 개 요소의 배열을 만듭니다.  
  
-   채우기 모드를 설정 <xref:System.Drawing.Drawing2D.FillMode.Winding>합니다.  
  
-   화면에 곡선을 채웁니다.  
  
 곡선에 있는 기본 장력 0.5입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#94)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#94)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#94)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="points">스플라인을 정의하는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열입니다.</param>
        <param name="fillmode">곡선이 채워지는 방법을 결정하는 <see cref="T:System.Drawing.Drawing2D.FillMode" /> 열거형의 멤버입니다.</param>
        <summary>지정된 채우기 모드를 사용하여 <see cref="T:System.Drawing.PointF" /> 구조체의 배열로 정의된 닫힌 카디널 스플라인 곡선의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 폐쇄형된 카디널 스플라인의 내부를 채웁니다. 마지막 지점을 첫 번째 요소와 일치 하지 않는 경우 추가 곡선 세그먼트를 닫아야를 첫 번째 지점과 마지막 지점에서 추가 됩니다.  
  
 점 배열에 4 개 이상 있어야 <xref:System.Drawing.Point> 구조입니다.  
  
 이 메서드는 0.5의 기본 장력을 사용 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 단색 브러시를 만듭니다.  
  
-   스플라인을 정의 4 개 요소의 배열을 만듭니다.  
  
-   채우기 모드를 설정 <xref:System.Drawing.Drawing2D.FillMode.Winding>합니다.  
  
-   화면에 곡선을 채웁니다.  
  
 곡선에 있는 기본 장력 0.5입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#97)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#97)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#97)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode * single -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="points">스플라인을 정의하는 <see cref="T:System.Drawing.Point" /> 구조체의 배열입니다.</param>
        <param name="fillmode">곡선이 채워지는 방법을 결정하는 <see cref="T:System.Drawing.Drawing2D.FillMode" /> 열거형의 멤버입니다.</param>
        <param name="tension">곡선의 장력을 지정하는 0.0F 보다 크거나 같은 값입니다.</param>
        <summary>지정된 채우기 모드와 장력을 사용하여 <see cref="T:System.Drawing.Point" /> 구조체의 배열로 정의된 닫힌 카디널 스플라인 곡선의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 폐쇄형된 카디널 스플라인의 내부를 채웁니다. 마지막 지점을 첫 번째 요소와 일치 하지 않는 경우 추가 곡선 세그먼트를 닫아야를 첫 번째 지점과 마지막 지점에서 추가 됩니다.  
  
 점 배열에 4 개 이상 있어야 <xref:System.Drawing.Point> 구조입니다.  
  
 `tension` 매개 변수는 스플라인의 모양을 결정 합니다. 경우 값은 `tension` 매개 변수는 0.0F,이 메서드는 요소를 연결 하려면 직선 세그먼트를 그립니다. 일반적으로 `tension` 매개 변수 보다 작거나 1.0F로는 합니다. 1.0F 값 이상한 결과 생성합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 단색 브러시를 만듭니다.  
  
-   스플라인을 정의 4 개 요소의 배열을 만듭니다.  
  
-   채우기 모드를 설정 <xref:System.Drawing.Drawing2D.FillMode.Winding>합니다.  
  
-   1.0 장력을 설정합니다.  
  
-   화면에 곡선을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#95)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#95)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#95)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode * single -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="points">스플라인을 정의하는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열입니다.</param>
        <param name="fillmode">곡선이 채워지는 방법을 결정하는 <see cref="T:System.Drawing.Drawing2D.FillMode" /> 열거형의 멤버입니다.</param>
        <param name="tension">곡선의 장력을 지정하는 0.0F 보다 크거나 같은 값입니다.</param>
        <summary>지정된 채우기 모드와 장력을 사용하여 <see cref="T:System.Drawing.PointF" /> 구조체의 배열로 정의된 닫힌 카디널 스플라인 곡선의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 배열의 각 요소를 통과 하는 폐쇄형된 카디널 스플라인의 내부를 채웁니다. 마지막 지점을 첫 번째 요소와 일치 하지 않는 경우 추가 곡선 세그먼트를 닫아야를 첫 번째 지점과 마지막 지점에서 추가 됩니다.  
  
 점 배열에 4 개 이상 있어야 <xref:System.Drawing.Point> 구조입니다.  
  
 `tension` 매개 변수는 스플라인의 모양을 결정 합니다. 경우 값은 `tension` 매개 변수는 0.0F,이 메서드는 요소를 연결 하려면 직선 세그먼트를 그립니다. 일반적으로 `tension` 매개 변수 보다 작거나 1.0F로는 합니다. 1.0F 값 이상한 결과 생성합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 단색 브러시를 만듭니다.  
  
-   스플라인을 정의 4 개 요소의 배열을 만듭니다.  
  
-   채우기 모드를 설정 <xref:System.Drawing.Drawing2D.FillMode.Winding>합니다.  
  
-   1.0 장력을 설정합니다.  
  
-   화면에 곡선을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#98)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#98)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>좌표, 너비, 높이의 쌍으로 지정된 경계 사각형에 의해 정의되는 타원의 내부를 채웁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * System.Drawing.Rectangle -&gt; unit" Usage="graphics.FillEllipse (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="rect">타원을 정의하는 경계 사각형을 나타내는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <summary><see cref="T:System.Drawing.Rectangle" /> 구조체에 의해 지정된 경계 사각형에 의해 정의되는 타원의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 방법을 사용 하 여 타원의 내부를 채웁니다는 <xref:System.Drawing.Brush>합니다. 타원 나타내는 경계 사각형에 의해 정의 됩니다는 `rect` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 단색 브러시를 만듭니다.  
  
-   타원을 제한 하는 사각형을 만듭니다.  
  
-   화면에서 타원을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#99)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#99)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.FillEllipse (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="rect">타원을 정의하는 경계 사각형을 나타내는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <summary><see cref="T:System.Drawing.RectangleF" /> 구조체에 의해 지정된 경계 사각형에 의해 정의되는 타원의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 방법을 사용 하 여 타원의 내부를 채웁니다는 <xref:System.Drawing.Brush>합니다. 타원 나타내는 경계 사각형에 의해 정의 됩니다는 `rect` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 단색 브러시를 만듭니다.  
  
-   타원을 제한 하는 사각형을 만듭니다.  
  
-   화면에서 타원을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#100)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#100)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * int * int * int * int -&gt; unit" Usage="graphics.FillEllipse (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="x">타원을 정의하는 경계 사각형의 왼쪽 위 모퉁이에 대한 X좌표입니다.</param>
        <param name="y">타원을 정의하는 경계 사각형의 왼쪽 위 모퉁이에 대한 Y좌표입니다.</param>
        <param name="width">타원을 정의하는 경계 사각형의 너비입니다.</param>
        <param name="height">타원을 정의하는 경계 사각형의 높이입니다.</param>
        <summary>좌표, 너비, 높이의 쌍으로 지정된 경계 사각형에 의해 정의되는 타원의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 방법을 사용 하 여 타원의 내부를 채웁니다는 <xref:System.Drawing.Brush>합니다. 타원 나타내는 경계 사각형에 의해 정의 됩니다 합니다 `x`, `y`를 `width`, 및 `height` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 단색 브러시를 만듭니다.  
  
-   타원을 제한 하는 사각형의 크기와 위치를 만듭니다.  
  
-   화면에서 타원을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#101)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#101)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * single * single * single * single -&gt; unit" Usage="graphics.FillEllipse (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="x">타원을 정의하는 경계 사각형의 왼쪽 위 모퉁이에 대한 X좌표입니다.</param>
        <param name="y">타원을 정의하는 경계 사각형의 왼쪽 위 모퉁이에 대한 Y좌표입니다.</param>
        <param name="width">타원을 정의하는 경계 사각형의 너비입니다.</param>
        <param name="height">타원을 정의하는 경계 사각형의 높이입니다.</param>
        <summary>좌표, 너비, 높이의 쌍으로 지정된 경계 사각형에 의해 정의되는 타원의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 방법을 사용 하 여 타원의 내부를 채웁니다는 <xref:System.Drawing.Brush>합니다. 타원 나타내는 경계 사각형에 의해 정의 됩니다 합니다 `x`, `y`를 `width`, 및 `height` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 단색 브러시를 만듭니다.  
  
-   타원을 제한 하는 사각형의 크기와 위치를 만듭니다.  
  
-   화면에서 타원을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#102)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#102)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPath">
      <MemberSignature Language="C#" Value="public void FillPath (System.Drawing.Brush brush, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPath(class System.Drawing.Brush brush, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPath(System::Drawing::Brush ^ brush, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.FillPath : System.Drawing.Brush * System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.FillPath (brush, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="path">채울 경로를 나타내는 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />입니다.</param>
        <summary><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Drawing2D.GraphicsPath> 는 일련의 선과 곡선 세그먼트로 구성 됩니다. 표시 되는 경로 `path` 매개 변수 닫혀 있지 않으며, 추가 세그먼트가에 추가 됩니다 마지막 지점에서 첫 번째 요소 경로를 닫습니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 단색 브러시를 만듭니다.  
  
-   그래픽 경로 개체를 만듭니다.  
  
-   타원의 그래픽 경로를 추가합니다.  
  
-   화면에서 경로 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#103)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#103)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="path" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>좌표 쌍, 너비, 높이 및 두 개의 방사형 선에 의해 지정된 타원에 의해 정의되는 부채꼴 섹션의 내부를 채웁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.FillPie (brush, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="rect">부채꼴 섹션에서 타원을 정의하는 경계 사각형을 나타내는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="startAngle">X축에서 부채꼴 섹션의 첫째 면까지 시계 방향으로 측정한 각도입니다.</param>
        <param name="sweepAngle"><paramref name="startAngle" /> 매개 변수에서 부채꼴 섹션의 둘째 면까지 시계 방향으로 측정한 각도입니다.</param>
        <summary><see cref="T:System.Drawing.RectangleF" /> 구조체와 두 개의 방사형 선에 의해 지정된 타원에 의해 정의되는 부채꼴 섹션의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 호의 끝점을 사용 하 여 교차 하는 두 개의 방사형 선에 타원의 호에서 정의 되는 원형 섹션의 내부를 채웁니다. 줄임표는 경계 사각형에 의해 정의 됩니다. 원형 섹션이 정의한 두 개의 방사형 선에 이루어져를 `startAngle` 및 `sweepAngle` 매개 변수 및 타원을 사용 하 여 방사형 해당 줄의 교차 부분 간에 호입니다.  
  
 경우는 `sweepAngle` 매개 변수 보다 작거나-360도 360도 보다 크거나, 360도 또는-360도 각각 것 처럼 처리 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 단색 브러시를 만듭니다.  
  
-   타원을 제한 하는 사각형을 만듭니다.  
  
-   (X 축)에 상대적인 시작 각도 및 스윕 각도 (시계 방향으로 둘 다)을 정의합니다.  
  
-   화면에서 타원의 원형 영역을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#104)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#104)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * int * int * int * int * int * int -&gt; unit" Usage="graphics.FillPie (brush, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="x">타원을 부채꼴 섹션이 되도록 정의하는 경계 사각형의 왼쪽 위 모퉁이에 대한 X좌표입니다.</param>
        <param name="y">타원을 부채꼴 섹션이 되도록 정의하는 경계 사각형의 왼쪽 위 모퉁이에 대한 Y좌표입니다.</param>
        <param name="width">타원을 부채꼴 섹션이 되도록 정의하는 경계 사각형의 너비입니다.</param>
        <param name="height">타원을 부채꼴 섹션이 되도록 정의하는 경계 사각형의 높이입니다.</param>
        <param name="startAngle">X축에서 부채꼴 섹션의 첫째 면까지 시계 방향으로 측정한 각도입니다.</param>
        <param name="sweepAngle"><paramref name="startAngle" /> 매개 변수에서 부채꼴 섹션의 둘째 면까지 시계 방향으로 측정한 각도입니다.</param>
        <summary>좌표 쌍, 너비, 높이 및 두 개의 방사형 선에 의해 지정된 타원에 의해 정의되는 부채꼴 섹션의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 호의 끝점을 사용 하 여 교차 하는 두 개의 방사형 선에 타원의 호에서 정의 되는 원형 섹션의 내부를 채웁니다. 줄임표는 경계 사각형에 의해 정의 됩니다. 원형 섹션이 정의한 두 개의 방사형 선에 이루어져를 `startAngle` 및 `sweepAngle` 매개 변수 및 타원을 사용 하 여 방사형 해당 줄의 교차 부분 간에 호입니다.  
  
 경우는 `sweepAngle` 매개 변수 보다 작거나-360도 360도 보다 크거나, 360도 또는-360도 각각 것 처럼 처리 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 단색 브러시를 만듭니다.  
  
-   타원을 제한 하는 사각형의 크기와 위치를 만듭니다.  
  
-   (X 축)에 상대적인 시작 각도 및 스윕 각도 (시계 방향으로 둘 다)을 정의합니다.  
  
-   화면에서 타원의 원형 영역을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#105)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#105)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * single * single * single * single * single * single -&gt; unit" Usage="graphics.FillPie (brush, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="x">타원을 부채꼴 섹션이 되도록 정의하는 경계 사각형의 왼쪽 위 모퉁이에 대한 X좌표입니다.</param>
        <param name="y">타원을 부채꼴 섹션이 되도록 정의하는 경계 사각형의 왼쪽 위 모퉁이에 대한 Y좌표입니다.</param>
        <param name="width">타원을 부채꼴 섹션이 되도록 정의하는 경계 사각형의 너비입니다.</param>
        <param name="height">타원을 부채꼴 섹션이 되도록 정의하는 경계 사각형의 높이입니다.</param>
        <param name="startAngle">X축에서 부채꼴 섹션의 첫째 면까지 시계 방향으로 측정한 각도입니다.</param>
        <param name="sweepAngle"><paramref name="startAngle" /> 매개 변수에서 부채꼴 섹션의 둘째 면까지 시계 방향으로 측정한 각도입니다.</param>
        <summary>좌표 쌍, 너비, 높이 및 두 개의 방사형 선에 의해 지정된 타원에 의해 정의되는 부채꼴 섹션의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 호의 끝점을 사용 하 여 교차 하는 두 개의 방사형 선에 타원의 호에서 정의 되는 원형 섹션의 내부를 채웁니다. 줄임표는 경계 사각형에 의해 정의 됩니다. 원형 섹션이 정의한 두 개의 방사형 선에 이루어져 합니다 `startAngle` 및 `sweepAngle` 매개 변수 및 타원을 사용 하 여 방사형 해당 줄의 교차 부분 간에 호.  
  
 경우는 `sweepAngle` 매개 변수 보다 작거나-360도 360도 보다 크거나, 360도 또는-360도 각각 것 처럼 처리 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   빨간색 단색 브러시를 만듭니다.  
  
-   타원을 제한 하는 사각형의 크기와 위치를 만듭니다.  
  
-   (X 축)에 상대적인 시작 각도 및 스윕 각도 (시계 방향으로 둘 다)을 정의합니다.  
  
-   화면에서 타원의 원형 영역을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#106)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#106)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Point" /> 구조체에 의해 지정된 점의 배열에 의해 정의되는 다각형의 내부를 채웁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.Point[] -&gt; unit" Usage="graphics.FillPolygon (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="points">채울 다각형의 꼭짓점을 나타내는 <see cref="T:System.Drawing.Point" /> 구조체의 배열입니다.</param>
        <summary><see cref="T:System.Drawing.Point" /> 구조체에 의해 지정된 점의 배열에 의해 정의되는 다각형의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 배열에서 두 연속 점 모든 다각형의 한 쪽을 지정합니다. 또한 첫 번째 지점과 마지막 지점 교차 하지 않을 경우 다각형의 닫는 쪽을 지정 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   파란색 단색 브러시를 만듭니다.  
  
-   7 개의 점이 다각형의 배열을 만듭니다.  
  
-   화면에 다각형 영역을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#107)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#107)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.PointF[] -&gt; unit" Usage="graphics.FillPolygon (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="points">채울 다각형의 꼭짓점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열입니다.</param>
        <summary><see cref="T:System.Drawing.PointF" /> 구조체에 의해 지정된 점의 배열에 의해 정의되는 다각형의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 배열에서 두 연속 점 모든 다각형의 한 쪽을 지정합니다. 또한 첫 번째 지점과 마지막 지점 교차 하지 않을 경우 다각형의 닫는 쪽을 지정 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   파란색 단색 브러시를 만듭니다.  
  
-   7 개의 점이 다각형의 배열을 만듭니다.  
  
-   화면에 다각형 영역을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#109)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#109)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#109)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillPolygon (brush, points, fillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="points">채울 다각형의 꼭짓점을 나타내는 <see cref="T:System.Drawing.Point" /> 구조체의 배열입니다.</param>
        <param name="fillMode">채우기의 스타일을 결정하는 <see cref="T:System.Drawing.Drawing2D.FillMode" /> 열거형의 멤버입니다.</param>
        <summary>지정된 채우기 모드를 사용하여 <see cref="T:System.Drawing.Point" /> 구조체에 의해 지정된 점의 배열에 의해 정의되는 다각형의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 배열에서 두 연속 점 모든 다각형의 한 쪽을 지정합니다. 또한 첫 번째 지점과 마지막 지점 교차 하지 않을 경우 다각형의 닫는 쪽을 지정 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   파란색 단색 브러시를 만듭니다.  
  
-   7 개의 점이 다각형의 배열을 만듭니다.  
  
-   채우기 모드를 설정 <xref:System.Drawing.Drawing2D.FillMode.Winding>합니다.  
  
-   화면에 다각형 영역을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#108)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#108)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillPolygon (brush, points, fillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="points">채울 다각형의 꼭짓점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열입니다.</param>
        <param name="fillMode">채우기의 스타일을 결정하는 <see cref="T:System.Drawing.Drawing2D.FillMode" /> 열거형의 멤버입니다.</param>
        <summary>지정된 채우기 모드를 사용하여 <see cref="T:System.Drawing.PointF" /> 구조체에 의해 지정된 점의 배열에 의해 정의되는 다각형의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 배열에서 두 연속 점 모든 다각형의 한 쪽을 지정합니다. 또한 첫 번째 지점과 마지막 지점 교차 하지 않을 경우 다각형의 닫는 쪽을 지정 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에는 다음 작업을 수행합니다.  
  
-   파란색 단색 브러시를 만듭니다.  
  
-   7 개의 점이 다각형의 배열을 만듭니다.  
  
-   채우기 모드를 설정 <xref:System.Drawing.Drawing2D.FillMode.Winding>합니다.  
  
-   화면에 다각형 영역을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#110)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#110)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="points" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>좌표 쌍, 너비 및 높이로 지정된 사각형의 내부에 의해 정의되는 사각형의 내부를 채웁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * System.Drawing.Rectangle -&gt; unit" Usage="graphics.FillRectangle (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="rect">채울 사각형을 나타내는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <summary><see cref="T:System.Drawing.Rectangle" /> 구조체의 의해 지정된 사각형의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 정의 된 사각형의 내부를 채웁니다는 `rect` 매개 변수를 지정 된 왼쪽 위를 포함 하 여 모서리 및 계산 된 최대 하단 및 아래쪽 가장자리입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에는 다음 작업을 수행합니다.  
  
-   파란색 단색 브러시를 만듭니다.  
  
-   사각형을 만듭니다.  
  
-   화면에서 사각형 영역을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#111)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#111)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.FillRectangle (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="rect">채울 사각형을 나타내는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <summary><see cref="T:System.Drawing.RectangleF" /> 구조체의 의해 지정된 사각형의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 정의 된 사각형의 내부를 채웁니다는 `rect` 매개 변수를 지정 된 왼쪽 위를 포함 하 여 모서리 및 계산 된 최대 하단 및 아래쪽 가장자리입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에는 다음 작업을 수행합니다.  
  
-   파란색 단색 브러시를 만듭니다.  
  
-   사각형을 만듭니다.  
  
-   화면에서 사각형 영역을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#112)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#112)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * int * int * int * int -&gt; unit" Usage="graphics.FillRectangle (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="x">채울 사각형의 왼쪽 위 모퉁이에 대한 X좌표입니다.</param>
        <param name="y">채울 사각형의 왼쪽 위 모퉁이에 대한 Y좌표입니다.</param>
        <param name="width">채울 사각형의 너비입니다.</param>
        <param name="height">채울 사각형의 높이입니다.</param>
        <summary>좌표 쌍, 너비 및 높이로 지정된 사각형의 내부에 의해 정의되는 사각형의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 정의 된 사각형의 내부를 채웁니다 합니다`x`, `y`를 `width`, 및 `height` 매개 변수를 지정 된 왼쪽 위를 포함 하 여 모서리 및 하단까지 계산 및 아래쪽 가장자리입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에는 다음 작업을 수행합니다.  
  
-   파란색 단색 브러시를 만듭니다.  
  
-   사각형의 크기와 위치를 만듭니다.  
  
-   화면에서 사각형 영역을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#113)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#113)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#113)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * single * single * single * single -&gt; unit" Usage="graphics.FillRectangle (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="x">채울 사각형의 왼쪽 위 모퉁이에 대한 X좌표입니다.</param>
        <param name="y">채울 사각형의 왼쪽 위 모퉁이에 대한 Y좌표입니다.</param>
        <param name="width">채울 사각형의 너비입니다.</param>
        <param name="height">채울 사각형의 높이입니다.</param>
        <summary>좌표 쌍, 너비 및 높이로 지정된 사각형의 내부에 의해 정의되는 사각형의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 정의 된 사각형의 내부를 채웁니다 합니다 `x`, `y`를 `width`, 및 `height` 매개 변수를 지정 된 왼쪽 위를 포함 하 여 모서리 및 하단까지 계산 및 아래쪽 가장자리입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에는 다음 작업을 수행합니다.  
  
-   파란색 단색 브러시를 만듭니다.  
  
-   사각형의 크기와 위치를 만듭니다.  
  
-   화면에서 사각형 영역을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#114)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#114)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#114)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Rectangle" /> 구조체에 의해 지정된 일련의 사각형의 내부를 채웁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.FillRectangles : System.Drawing.Brush * System.Drawing.Rectangle[] -&gt; unit" Usage="graphics.FillRectangles (brush, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="rects">채울 사각형을 나타내는 <see cref="T:System.Drawing.Rectangle" /> 구조체의 배열입니다.</param>
        <summary><see cref="T:System.Drawing.Rectangle" /> 구조체에 의해 지정된 일련의 사각형의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에는 다음 작업을 수행합니다.  
  
-   파란색 단색 브러시를 만듭니다.  
  
-   세 개의 사각형의 배열을 만듭니다.  
  
-   화면에 세 개의 사각형 영역을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#115)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#115)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#115)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="rects" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rects" />이 길이가 0인 배열입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.FillRectangles : System.Drawing.Brush * System.Drawing.RectangleF[] -&gt; unit" Usage="graphics.FillRectangles (brush, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="rects">채울 사각형을 나타내는 <see cref="T:System.Drawing.RectangleF" /> 구조체의 배열입니다.</param>
        <summary><see cref="T:System.Drawing.RectangleF" /> 구조체에 의해 지정된 일련의 사각형의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에는 다음 작업을 수행합니다.  
  
-   파란색 단색 브러시를 만듭니다.  
  
-   세 개의 사각형의 배열을 만듭니다.  
  
-   화면에 세 개의 사각형 영역을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#116)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#116)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#116)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="rects" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="Rects" />이 길이가 0인 배열입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRegion">
      <MemberSignature Language="C#" Value="public void FillRegion (System.Drawing.Brush brush, System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRegion(class System.Drawing.Brush brush, class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRegion(System::Drawing::Brush ^ brush, System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.FillRegion : System.Drawing.Brush * System.Drawing.Region -&gt; unit" Usage="graphics.FillRegion (brush, region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="brush">채우기의 특징을 결정하는 <see cref="T:System.Drawing.Brush" />입니다.</param>
        <param name="region">채울 영역을 나타내는 <see cref="T:System.Drawing.Region" />입니다.</param>
        <summary><see cref="T:System.Drawing.Region" />의 내부를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Region> 사각형과 경로로 구성 됩니다. 지역 닫히지 않으면 세그먼트를 추가 닫습니다 첫 번째 지점과 마지막 지점에서 추가 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에는 다음 작업을 수행합니다.  
  
-   파란색 단색 브러시를 만듭니다.  
  
-   사각형을 만듭니다.  
  
-   사각형 영역을 만듭니다.  
  
-   화면에서 사각형 영역을 채웁니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#117)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#117)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#117)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="brush" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="region" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Graphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Graphics ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="graphics.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>가비지 컬렉션이 회수하기 전에 개체가 리소스를 해제하고 다른 정리 작업을 수행할 수 있게 합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>모든 보류 중인 그래픽 작업을 강제로 제외시켜, 작업이 끝나기를 기다리지 않고 즉시 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="graphics.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>모든 보류 중인 그래픽 작업을 강제로 제외시켜, 작업이 끝나기를 기다리지 않고 즉시 반환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 플러시를 시작 하 고 현재 실행 중인 모든 그래픽 작업이 완료 되기를 기다리지 않고 즉시 반환 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (System.Drawing.Drawing2D.FlushIntention intention);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(valuetype System.Drawing.Drawing2D.FlushIntention intention) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (intention As FlushIntention)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush(System::Drawing::Drawing2D::FlushIntention intention);" />
      <MemberSignature Language="F#" Value="member this.Flush : System.Drawing.Drawing2D.FlushIntention -&gt; unit" Usage="graphics.Flush intention" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intention" Type="System.Drawing.Drawing2D.FlushIntention" />
      </Parameters>
      <Docs>
        <param name="intention">메서드가 즉시 반환하거나 모든 기존 작업을 마칠 때까지 기다리도록 지정하는 <see cref="T:System.Drawing.Drawing2D.FlushIntention" /> 열거형의 멤버입니다.</param>
        <summary>메서드가 기다리거나 기다리지 않도록 지정되어 있든, 모든 보류 중인 그래픽 작업을 강제로 실행시켜 작업이 끝나기 전에 반환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값이 <xref:System.Drawing.Drawing2D.FlushIntention.Flush> 에 대 한는 `intention` 매개 변수는 메서드가 값 플러시 시작 된 후 즉시 반환 지정 <xref:System.Drawing.Drawing2D.FlushIntention.Sync> 메서드 반환 하기 전에 모든 기존 작업이 완료 될 때까지 기다리도록 지정 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>장치 컨텍스트에 대한 지정된 핸들에서 새 <see cref="T:System.Drawing.Graphics" />를 만듭니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">장치 컨텍스트에 대한 핸들입니다.</param>
        <summary>장치 컨텍스트에 대한 지정된 핸들에서 새 <see cref="T:System.Drawing.Graphics" />를 만듭니다.</summary>
        <returns>이 메서드는 지정된 장치 컨텍스트에 대한 새 <see cref="T:System.Drawing.Graphics" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 항상 호출 해야 합니다 <xref:System.Drawing.Graphics.Dispose%2A> 해제 하는 메서드에 <xref:System.Drawing.Graphics> 및 관련 된 리소스에서 만든를 <xref:System.Drawing.Graphics.FromHdc%2A> 메서드.  
  
 디스플레이 디바이스에 연결 된 ICM 색 프로필을 하는 경우에 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 기본적으로 해당 프로필을 사용 하지 것입니다. ICM에 사용할 수 있도록를 <xref:System.Drawing.Graphics>, 생성 합니다 <xref:System.Drawing.Graphics> HDC (및 ICM_ON)를 전달 하면는 HDC에서를 `SetICMMode` 함수. 다음 수행한 모든 그리기를 <xref:System.Drawing.Graphics> 디스플레이 디바이스와 연결 된 ICM 프로필에 따라 조정 됩니다. ICM를 사용 하도록 설정 하면 성능이 저하 됩니다.  
  
 호출 시 디바이스 컨텍스트 (예: 매핑 모드, 논리 단위 및 like) 상태의 <xref:System.Drawing.Graphics.FromHdc%2A> 렌더링 작업에 영향을 줄 수는 <xref:System.Drawing.Graphics>합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에는 다음 작업을 수행합니다.  
  
-   내부 포인터 형식 변수를 만들고 `hdc` 형식의 그래픽 개체의 디바이스 컨텍스트에 대 한 핸들을 설정 합니다.  
  
-   사용 하 여 새 그래픽 개체를 만들고 `hdc`합니다.  
  
-   (화면)에 새 그래픽 개체를 사용 하 여 사각형을 그립니다.  
  
-   사용 하 여 새 그래픽 개체를 해제 `hdc`합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#118)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#118)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#118)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc, native int hdevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr, hdevice As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint * nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdc (hdc, hdevice)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
        <Parameter Name="hdevice" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">장치 컨텍스트에 대한 핸들입니다.</param>
        <param name="hdevice">장치 핸들입니다.</param>
        <summary>장치 컨텍스트에 대한 지정된 핸들과 장치에 대한 핸들에서 새 <see cref="T:System.Drawing.Graphics" />를 만듭니다.</summary>
        <returns>이 메서드는 지정된 장치 컨텍스트와 장치에 대한 새 <see cref="T:System.Drawing.Graphics" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 항상 호출 해야 합니다 <xref:System.Drawing.Graphics.Dispose%2A> 해제 하는 메서드에 <xref:System.Drawing.Graphics> 및 관련 된 리소스에서 만든를 <xref:System.Drawing.Graphics.FromHdc%2A> 메서드.  
  
 디스플레이 디바이스에 연결 된 ICM 색 프로필을 하는 경우에 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 기본적으로 해당 프로필을 사용 하지 것입니다. ICM에 사용할 수 있도록를 <xref:System.Drawing.Graphics>, 생성 합니다 <xref:System.Drawing.Graphics> HDC (및 ICM_ON)를 전달 하면는 HDC에서를 `SetICMMode` 함수. 다음 수행한 모든 그리기를 <xref:System.Drawing.Graphics> 디스플레이 디바이스와 연결 된 ICM 프로필에 따라 조정 됩니다. ICM를 사용 하도록 설정 하면 성능이 저하 됩니다.  
  
 호출 시 디바이스 컨텍스트 (예: 매핑 모드, 논리 단위 및 like) 상태의 <xref:System.Drawing.Graphics.FromHdc%2A> 렌더링 작업에 영향을 줄 수는 <xref:System.Drawing.Graphics>합니다.  
  
 디바이스 핸들을 일반적으로 특정 프린터 기능 쿼리 됩니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드에 액세스 합니다. 열거형 관련: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHdcInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdcInternal (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdcInternal(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdcInternal : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdcInternal hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">장치 컨텍스트에 대한 핸들입니다.</param>
        <summary>지정된 장치 컨텍스트에 대한 <see cref="T:System.Drawing.Graphics" />를 반환합니다.</summary>
        <returns>지정된 장치 컨텍스트에 대한 <see cref="T:System.Drawing.Graphics" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 사용할 수 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHwnd">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwnd (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwnd(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwnd(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwnd (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwnd(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member FromHwnd : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHwnd hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">창 핸들입니다.</param>
        <summary>지정된 창 핸들에서 새 <see cref="T:System.Drawing.Graphics" />를 만듭니다.</summary>
        <returns>이 메서드는 지정된 창 핸들에 대한 새 <see cref="T:System.Drawing.Graphics" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 항상 호출 해야 합니다 <xref:System.Drawing.Graphics.Dispose%2A> 해제 하는 메서드에 <xref:System.Drawing.Graphics> 및 관련 된 리소스에서 만든를 <xref:System.Drawing.Graphics.FromHwnd%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수인를 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기 뿐만 `thisForm`, <xref:System.Windows.Forms.Form> 예입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   새 내부 포인터 변수를 만들고 `hwnd` 예제 폼의 핸들을 설정 합니다.  
  
-   새 <xref:System.Drawing.Graphics> 핸들에서 합니다.  
  
-   새 사각형을 그립니다 <xref:System.Drawing.Graphics> 빨간색 펜을 사용 합니다.  
  
-   새 삭제 <xref:System.Drawing.Graphics>합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#119)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#119)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#119)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드에 액세스 합니다. 열거형 관련: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHwndInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwndInternal (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwndInternal(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwndInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwndInternal (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwndInternal(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member FromHwndInternal : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHwndInternal hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">창 핸들입니다.</param>
        <summary>지정된 창 핸들에 대한 새 <see cref="T:System.Drawing.Graphics" />를 만듭니다.</summary>
        <returns>지정된 창 핸들에 대한 <see cref="T:System.Drawing.Graphics" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 사용할 수 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromImage (System.Drawing.Image image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromImage(class System.Drawing.Image image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromImage(System::Drawing::Image ^ image);" />
      <MemberSignature Language="F#" Value="static member FromImage : System.Drawing.Image -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <param name="image">새 <see cref="T:System.Drawing.Image" />를 만들 <see cref="T:System.Drawing.Graphics" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Graphics" />에서 새 <see cref="T:System.Drawing.Image" />를 만듭니다.</summary>
        <returns>이 메서드는 지정된 <see cref="T:System.Drawing.Graphics" />에 대한 새 <see cref="T:System.Drawing.Image" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이미지를 인덱싱된 픽셀 형식에 있으면이 메서드는 메시지와 함께 예외를 throw, "그래픽 개체를 인덱싱된 픽셀 형식에는 이미지에서 만들 수 없습니다." 인덱싱된 픽셀 형식 다음 목록에 표시 됩니다.  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format1bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format4bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format8bppIndexed>  
  
 사용 하 여 다른 형식으로 인덱싱된 이미지를 저장할 수 있습니다는 <xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29> 메서드와 다음 검색을 <xref:System.Drawing.Graphics> 새 이미지에 대 한 개체입니다.  
  
 이 메서드는 또한 이미지 픽셀 형식 중 하나에 있는 경우 예외를 throw 합니다.  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Undefined>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.DontCare>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale>  
  
 항상 호출 해야 합니다 <xref:System.Drawing.Graphics.Dispose%2A> 해제 하는 메서드에 <xref:System.Drawing.Graphics> 및 관련 된 리소스에서 만든를 <xref:System.Drawing.Graphics.FromImage%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 코드에는 다음 작업을 수행합니다.  
  
-   만듭니다는 <xref:System.Drawing.Image> 예제 폴더에 파일 예제 그래픽에서.  
  
-   만듭니다는 <xref:System.Drawing.Graphics> 에서 <xref:System.Drawing.Image>합니다.  
  
-   그 사각형을 입력 하 여 이미지를 변경 합니다.  
  
-   그립니다는 <xref:System.Drawing.Image> 화면.  
  
-   만들어진 해제 <xref:System.Drawing.Graphics>합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#120)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#120)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="image" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.Exception"><paramref name="image" />에 인덱싱된 픽셀 형식이 있거나 형식이 정의되어 있지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/737bae30-e599-4e1d-bf30-bab8280b32be">방법: 런타임에 비트맵 만들기</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a626d701-bd99-4fd8-b92f-7b8f794e042b">이미지, 비트맵, 아이콘 및 메타파일 사용</related>
        <related type="Article" href="https://msdn.microsoft.com/library/162861f9-f050-445e-8abb-b2c43a918b8b">방법: 그리는 데 필요한 그래픽 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="GetContextInfo">
      <MemberSignature Language="C#" Value="public object GetContextInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetContextInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetContextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextInfo () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetContextInfo();" />
      <MemberSignature Language="F#" Value="member this.GetContextInfo : unit -&gt; obj" Usage="graphics.GetContextInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>누적 그래픽 컨텍스트를 가져옵니다.</summary>
        <returns>누적 그래픽 컨텍스트를 나타내는 <see cref="T:System.Object" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 값은 누적 클립 영역을 포함 하는 첫 번째 요소 및 누적 변환 행렬을 포함 하는 두 번째 요소 위치 개체 배열입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHalftonePalette">
      <MemberSignature Language="C#" Value="public static IntPtr GetHalftonePalette ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetHalftonePalette() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHalftonePalette" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHalftonePalette () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetHalftonePalette();" />
      <MemberSignature Language="F#" Value="static member GetHalftonePalette : unit -&gt; nativeint" Usage="System.Drawing.Graphics.GetHalftonePalette " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 Windows 하프톤 팔레트에 대한 핸들을 가져옵니다.</summary>
        <returns>팔레트에 대한 핸들을 지정하는 내부 포인터입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 용도 <xref:System.Drawing.Graphics.GetHalftonePalette%2A> 메서드를 사용 하도록 설정 하는 것 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 표시 픽셀당 8 비트를 사용 하는 경우 더 나은 품질 하프톤을 생성 합니다. 하프톤 팔레트를 사용 하 여 이미지를 표시 하려면 다음 절차를 따르십시오.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   상호 운용성 정의 <xref:System.Runtime.InteropServices.DllImportAttribute> 필요한을 포함 하는 Windows DLL 파일 gdi32.dll에 대 한 특성 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 함수입니다.  
  
-   정의 된 `SelectPalette` 및 `RealizePalette` 외부와 해당 DLL의 함수입니다.  
  
-   기존 이미지 파일 (이어야 하는 예제 코드 파일과 동일한 폴더에) 예제에서에서 이미지를 만들고 화면에 이미지를 그립니다.  
  
-   내부 포인터 형식 변수를 만들고 각각 graphics 개체를 현재 Windows 하프톤 팔레트에 핸들에 해당 값을 설정 합니다.  
  
-   선택한 하프톤 팔레트를 인식 합니다.  
  
-   사용 하 여 새 그래픽 개체를 만듭니다를 `hdc` 매개 변수입니다.  
  
-   이미지를 다시 그립니다.  
  
-   디바이스 컨텍스트에 대 한 핸들을 해제합니다.  
  
 결과 두 개의 샘플 이미지가 렌더링: 16 비트 색상표를 사용 하 고 8 비트 색상표를 사용 하 여 하나를 사용 하 여 하나입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#121)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#121)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#121)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHdc">
      <MemberSignature Language="C#" Value="public IntPtr GetHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHdc" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHdc () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IntPtr GetHdc();" />
      <MemberSignature Language="F#" Value="abstract member GetHdc : unit -&gt; nativeint&#xA;override this.GetHdc : unit -&gt; nativeint" Usage="graphics.GetHdc " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.GetHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />와 관련된 장치 컨텍스트에 대한 핸들을 가져옵니다.</summary>
        <returns>이 <see cref="T:System.Drawing.Graphics" />와 관련된 장치 컨텍스트에 대한 핸들입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 디바이스 컨텍스트는 기준으로 Windows 구조를 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 출력에 영향을 주는 그래픽 모드 뿐만 아니라 그래픽 개체 및 해당 관련된 특성의 집합을 정의 하는 합니다. 이 메서드는 글꼴을 제외 하 고 해당 디바이스 컨텍스트를 반환합니다. 글꼴 선택 되어 있지 않으므로를 호출 합니다 <xref:System.Drawing.Font.FromHdc%2A> 에서 반환 된 핸들을 사용 하 여 메서드를 <xref:System.Drawing.Graphics.GetHdc%2A> 메서드가 실패 합니다.  
  
 에 대 한 호출을 <xref:System.Drawing.Graphics.GetHdc%2A> 및 <xref:System.Drawing.Graphics.ReleaseHdc%2A> 메서드 쌍으로 나타나야 합니다. 범위에 있는 동안를 <xref:System.Drawing.Graphics.GetHdc%2A> 하 고 <xref:System.Drawing.Graphics.ReleaseHdc%2A> 메서드 쌍을 하면 일반적으로 호출할 유일한 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 함수입니다. 호출에 대 한 범위에 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 의 메서드를 <xref:System.Drawing.Graphics> 시킨를 `hdc` 매개 변수 실패는 `ObjectBusy` 오류. 또한 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 상태 변경 내용이 무시 합니다 <xref:System.Drawing.Graphics> 의 `hdc` 후속 작업에서 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 예제는 Windows를 호출 하는 방법을 보여 줍니다 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 와 동일한 작업을 수행 하는 함수를 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> 메서드. 이 코드에서는 다음 작업을 수행합니다.  
  
-   상호 운용성 정의 <xref:System.Runtime.InteropServices.DllImportAttribute> Windows DLL 파일 gdi32.dll에 대 한 특성입니다. 이 DLL에 원하는 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 함수입니다.  
  
-   정의 <xref:System.Drawing.Rectangle> 외부와 해당 DLL에는 함수입니다.  
  
-   빨간색 펜을 만듭니다.  
  
-   펜으로 사각형을 사용 하 여 화면을 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> 메서드.  
  
-   내부 포인터 형식 변수를 정의 `hdc` 형식의 디바이스 컨텍스트에 대 한 핸들을 해당 값을 가져오거나 설정 합니다.  
  
-   사각형을 사용 하 여 화면을 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> 함수입니다.  
  
-   나타내는 디바이스 컨텍스트를 해제 합니다 `hdc` 매개 변수입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#122)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#122)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#122)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드에 액세스 합니다. 열거형 관련: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetNearestColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GetNearestColor (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Color GetNearestColor(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Color GetNearestColor(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.GetNearestColor : System.Drawing.Color -&gt; System.Drawing.Color" Usage="graphics.GetNearestColor color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">일치를 찾을 <see cref="T:System.Drawing.Color" /> 구조체입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Color" /> 구조체와 가장 가까운 색을 가져옵니다.</summary>
        <returns><paramref name="color" /> 매개 변수로 지정된 색에 가장 가까운 색을 나타내는 <see cref="T:System.Drawing.Color" /> 구조체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   ARGB 좌표 (255 165, 63, 136)를 사용 하 여 임의의 색을 만듭니다.  
  
-   단색 브러시를 만들고 지정된 된 색을 색을 설정 합니다.  
  
-   임의의 색을 사용 하 여 타원을 채웁니다.  
  
-   두 번째 색을 만들고을 가장 가까운 시스템 ARGB 색 값을 설정 합니다.  
  
-   이 색을 사용 하 여 두 번째 타원을 채웁니다.  
  
 결과 두 개의 타원: 지정된 된 임의의 색 및 지정된 된 색에 가장 가까운 시스템 색을 사용 하 여 그리는 두 번째를 사용 하 여 그린 첫 번째입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#123)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#123)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.InterpolationMode InterpolationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.InterpolationMode InterpolationMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.InterpolationMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InterpolationMode As InterpolationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::InterpolationMode InterpolationMode { System::Drawing::Drawing2D::InterpolationMode get(); void set(System::Drawing::Drawing2D::InterpolationMode value); };" />
      <MemberSignature Language="F#" Value="member this.InterpolationMode : System.Drawing.Drawing2D.InterpolationMode with get, set" Usage="System.Drawing.Graphics.InterpolationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.InterpolationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />와 관련된 보간 모드를 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Drawing.Drawing2D.InterpolationMode" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 보간 모드 간 중간 값 하는 방법을 결정 끝점을 계산 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IntersectClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 현재 클립 영역과 지정된 <see cref="T:System.Drawing.Rectangle" /> 구조체의 교차 부분으로 업데이트합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.IntersectClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">현재 클립 영역과 교차하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 현재 클립 영역과 지정된 <see cref="T:System.Drawing.Rectangle" /> 구조체의 교차 부분으로 업데이트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 할당 합니다 <xref:System.Drawing.Graphics.Clip%2A> 속성 <xref:System.Drawing.Graphics> 현재 클립 영역과 지정 된 사각형의 교차로 표현 되는 영역을 `rect` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   왼쪽 위 모퉁이 사용 하 여 사각형을 만듭니다 (0, 0)이이 사각형에 클리핑 영역을 가져오거나 설정 합니다.  
  
-   왼쪽 위 모퉁이 사용 하 여 두 번째 사각형을 만듭니다 (100, 100)이 사각형과 현재 클립 영역 (첫 번째 사각형)의 교차점으로 클리핑 영역을 가져오거나 설정 합니다.  
  
-   파란색 단색 브러시를 사용 하 여 이전 사각형을 모두 포함 하는 큰 사각형을 채웁니다.  
  
-   클리핑 영역을 무한대로 다시 설정합니다.  
  
-   두 클리핑 영역 주위에 사각형을 그립니다. 클리핑 사각형을 첫 번째 및 두 번째 클리핑 영역에 대 한 빨간색 펜에 대 한 검정 펜을 사용 합니다.  
  
 결과 두 개의 사각형의 교차 부분만 파란색 채워집니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#124)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#124)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#124)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.RectangleF -&gt; unit" Usage="graphics.IntersectClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">현재 클립 영역과 교차하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 현재 클립 영역과 지정된 <see cref="T:System.Drawing.RectangleF" /> 구조체의 교차 부분으로 업데이트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 할당 합니다 <xref:System.Drawing.Graphics.Clip%2A> 속성 <xref:System.Drawing.Graphics> 현재 클립 영역과 지정 된 사각형의 교차로 표현 되는 영역을 `rect` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   왼쪽 위 모퉁이 사용 하 여 사각형을 만듭니다 (0, 0)이이 사각형에 클리핑 영역을 가져오거나 설정 합니다.  
  
-   왼쪽 위 모퉁이 사용 하 여 두 번째 사각형을 만듭니다 (100, 100)이 사각형과 현재 클립 영역 (첫 번째 사각형)의 교차점으로 클리핑 영역을 가져오거나 설정 합니다.  
  
-   파란색 단색 브러시를 사용 하 여 이전 사각형을 모두 포함 하는 큰 사각형을 채웁니다.  
  
-   클리핑 영역을 무한대로 다시 설정합니다.  
  
-   두 클리핑 영역 주위에 사각형을 그립니다. 클리핑 사각형을 첫 번째 및 두 번째 클리핑 영역에 대 한 빨간색 펜에 대 한 검정 펜을 사용 합니다.  
  
 결과 두 개의 사각형의 교차 부분만 파란색 채워집니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#125)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#125)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.Region -&gt; unit" Usage="graphics.IntersectClip region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">현재 영역과 교차하는 <see cref="T:System.Drawing.Region" />입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 현재 클립 영역과 지정된 <see cref="T:System.Drawing.Region" />의 교차 부분으로 업데이트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 할당 합니다 <xref:System.Drawing.Graphics.Clip%2A> 속성 <xref:System.Drawing.Graphics> 현재 클립 영역과 지정 된 지역의 교차로 표현 되는 영역을 `region` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   왼쪽 위 모퉁이 사용 하 여 사각형을 만듭니다 (0, 0).  
  
-   영역을 만드는 데 사용 및 사각형에 설정 하 고이 영역에 클립 영역을 설정 키를 누릅니다.  
  
-   왼쪽 위 모퉁이 사용 하 여 두 번째 사각형을 만듭니다 (100, 100).  
  
-   영역을 만드는 두 번째 사각형에 설정 하 고 결합 모드를 사용 하 여이 지역 및 현재 클립 영역 (첫 번째 사각형)의 교차점으로 클립 영역을 설정 <xref:System.Drawing.Drawing2D.CombineMode.Replace>합니다.  
  
-   파란색 단색 브러시를 사용 하 여 이전 두 지역 모두를 포함 하는 큰 사각형을 채웁니다.  
  
-   클리핑 영역을 무한대로 다시 설정합니다.  
  
-   두 클리핑 영역 주위에 사각형을 그립니다. 첫 번째 클리핑 영역 및 두 번째 클리핑 영역에 대 한 빨간색 펜에 대 한 검정 펜을 사용 합니다.  
  
 결과 두 영역의 교차 부분만 파란색 채워집니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#126)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#126)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#126)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClipEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClipEmpty : bool" Usage="System.Drawing.Graphics.IsClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역이 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역이 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsVisible">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>좌표 쌍에 의해 지정된 점이 이 <see cref="T:System.Drawing.Graphics" />의 보이는 클립 영역 안에 포함되었는지 여부를 나타냅니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.Point -&gt; bool" Usage="graphics.IsVisible point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">표시 여부를 테스트하는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Point" /> 구조체가 이 <see cref="T:System.Drawing.Graphics" />의 보이는 클립 영역 안에 포함되었는지 여부를 나타냅니다.</summary>
        <returns><paramref name="point" /> 매개 변수에 의해 지정된 점이 이 <see cref="T:System.Drawing.Graphics" />의 보이는 클립 영역 안에 포함되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   사각형 클립 영역을 만들고 사용 하 여 폼의 그래픽 개체에 대 한 클리핑 영역으로 설정 <xref:System.Drawing.Drawing2D.CombineMode.Replace>합니다.  
  
-   두 점 하나는 클리핑 영역 및 외부 하나 만듭니다.  
  
-   각 요소의 표시 여부를 테스트 하 고 표시 하는 것만을 그립니다.  
  
 결과 하나의 작은 빨간색 원이 클립 영역 내에 있는 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#127)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#127)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#127)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.PointF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (point As PointF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.PointF -&gt; bool" Usage="graphics.IsVisible point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="point">표시 여부를 테스트하는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.PointF" /> 구조체가 이 <see cref="T:System.Drawing.Graphics" />의 보이는 클립 영역 안에 포함되었는지 여부를 나타냅니다.</summary>
        <returns><paramref name="point" /> 매개 변수에 의해 지정된 점이 이 <see cref="T:System.Drawing.Graphics" />의 보이는 클립 영역 안에 포함되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   사각형 클립 영역을 만들고 사용 하 여 폼 그래픽에 대 한 클리핑 영역으로 설정 <xref:System.Drawing.Drawing2D.CombineMode.Replace>합니다.  
  
-   두 점 하나는 클리핑 영역 및 외부 하나 만듭니다.  
  
-   각 요소의 표시 여부를 테스트 하 고 표시 하는 것만을 그립니다.  
  
 결과 하나의 작은 빨간색 원이 클립 영역 내에 있는 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#128)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#128)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#128)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As Rectangle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.Rectangle -&gt; bool" Usage="graphics.IsVisible rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">표시 여부를 테스트하는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <summary><see cref="T:System.Drawing.Rectangle" /> 구조체에 의해 지정된 사각형이 이 <see cref="T:System.Drawing.Graphics" />의 표시된 클립 영역 안에 포함되었는지 여부를 나타냅니다.</summary>
        <returns><paramref name="rect" /> 매개 변수에 의해 지정된 사각형이 이 <see cref="T:System.Drawing.Graphics" />의 표시된 클립 영역 안에 포함되면 <see langword="true" />이고, 포함되지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   사각형 클립 영역을 만들고 사용 하 여 폼의 그래픽 개체에 대 한 클리핑 영역으로 설정 <xref:System.Drawing.Drawing2D.CombineMode.Replace>합니다.  
  
-   위치 및 두 개의 사각형의 크기, 하나는 클리핑 영역 및 외부 하나 만듭니다.  
  
-   각각의 표시 여부를 테스트 하 고 표시 하는 것만을 그립니다.  
  
 결과 하나의 작은 빨간색 사각형이 클립 영역 내에 있는 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#129)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#129)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#129)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As RectangleF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.RectangleF -&gt; bool" Usage="graphics.IsVisible rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">표시 여부를 테스트하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <summary><see cref="T:System.Drawing.RectangleF" /> 구조체에 의해 지정된 사각형이 이 <see cref="T:System.Drawing.Graphics" />의 표시된 클립 영역 안에 포함되었는지 여부를 나타냅니다.</summary>
        <returns><paramref name="rect" /> 매개 변수에 의해 지정된 사각형이 이 <see cref="T:System.Drawing.Graphics" />의 표시된 클립 영역 안에 포함되면 <see langword="true" />이고, 포함되지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   사각형 클립 영역을 만들고 사용 하 여 폼의 그래픽 개체에 대 한 클리핑 영역으로 설정 <xref:System.Drawing.Drawing2D.CombineMode.Replace>합니다.  
  
-   두 사각형이, 하나는 클리핑 영역 및 외부 하나 만듭니다.  
  
-   각각의 표시 여부를 테스트 하 고 표시 하는 것만을 그립니다.  
  
 결과 하나의 작은 빨간색 사각형이 클립 영역 내에 있는 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#130)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#130)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#130)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : int * int -&gt; bool" Usage="graphics.IsVisible (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">표시 여부를 테스트할 점의 X좌표입니다.</param>
        <param name="y">표시 여부를 테스트할 점의 Y좌표입니다.</param>
        <summary>좌표 쌍에 의해 지정된 점이 이 <see cref="T:System.Drawing.Graphics" />의 보이는 클립 영역 안에 포함되었는지 여부를 나타냅니다.</summary>
        <returns><paramref name="x" />와 <paramref name="y" /> 매개 변수에 의해 정의된 점이 이 <see cref="T:System.Drawing.Graphics" />의 보이는 클립 영역 안에 포함되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   사각형 클립 영역을 만들고 사용 하 여 폼의 그래픽 개체에 대 한 클리핑 영역으로 설정 <xref:System.Drawing.Drawing2D.CombineMode.Replace>합니다.  
  
-   두 점 하나는 클리핑 영역 및 외부 하나 만듭니다.  
  
-   각 요소의 표시 여부를 테스트 하 고 표시 하는 것만을 그립니다.  
  
 결과 하나의 작은 빨간색 원이 클립 영역 내에 있는 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#131)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#131)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : single * single -&gt; bool" Usage="graphics.IsVisible (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">표시 여부를 테스트할 점의 X좌표입니다.</param>
        <param name="y">표시 여부를 테스트할 점의 Y좌표입니다.</param>
        <summary>좌표 쌍에 의해 지정된 점이 이 <see cref="T:System.Drawing.Graphics" />의 보이는 클립 영역 안에 포함되었는지 여부를 나타냅니다.</summary>
        <returns><paramref name="x" />와 <paramref name="y" /> 매개 변수에 의해 정의된 점이 이 <see cref="T:System.Drawing.Graphics" />의 보이는 클립 영역 안에 포함되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   사각형 클립 영역을 만들고 사용 하 여 폼의 그래픽 개체에 대 한 클리핑 영역으로 설정 <xref:System.Drawing.Drawing2D.CombineMode.Replace>합니다.  
  
-   두 점 하나는 클리핑 영역 및 외부 하나 만듭니다.  
  
-   각 요소의 표시 여부를 테스트 하 고 표시 하는 것만을 그립니다.  
  
 결과 하나의 작은 빨간색 원이 클립 영역 내에 있는 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#133)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#133)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#133)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer, width As Integer, height As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : int * int * int * int -&gt; bool" Usage="graphics.IsVisible (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">표시 여부를 테스트할 사각형의 왼쪽 위 모퉁이에 대한 X좌표입니다.</param>
        <param name="y">표시 여부를 테스트할 사각형의 왼쪽 위 모퉁이에 대한 Y좌표입니다.</param>
        <param name="width">표시 여부를 테스트할 사각형의 너비입니다.</param>
        <param name="height">표시 여부를 테스트할 사각형의 높이입니다.</param>
        <summary>좌표 쌍, 너비 및 높이에 의해 지정된 사각형이 이 <see cref="T:System.Drawing.Graphics" />의 보이는 클립 영역 안에 포함되었는지 여부를 나타냅니다.</summary>
        <returns><paramref name="x" />, <paramref name="y" />, <paramref name="width" /> 및 <paramref name="height" /> 매개 변수에 의해 정의된 사각형이 이 <see cref="T:System.Drawing.Graphics" />의 보이는 클립 영역 안에 포함되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   사각형 클립 영역을 만들고 사용 하 여 폼의 그래픽 개체에 대 한 클리핑 영역으로 설정 <xref:System.Drawing.Drawing2D.CombineMode.Replace>합니다.  
  
-   위치 및 두 개의 사각형의 크기, 하나는 클리핑 영역 및 외부 하나 만듭니다.  
  
-   각각의 표시 여부를 테스트 하 고 표시 하는 것만을 그립니다.  
  
 결과 하나의 작은 빨간색 사각형이 클립 영역 내에 있는 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#132)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#132)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#132)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single, width As Single, height As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : single * single * single * single -&gt; bool" Usage="graphics.IsVisible (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">표시 여부를 테스트할 사각형의 왼쪽 위 모퉁이에 대한 X좌표입니다.</param>
        <param name="y">표시 여부를 테스트할 사각형의 왼쪽 위 모퉁이에 대한 Y좌표입니다.</param>
        <param name="width">표시 여부를 테스트할 사각형의 너비입니다.</param>
        <param name="height">표시 여부를 테스트할 사각형의 높이입니다.</param>
        <summary>좌표 쌍, 너비 및 높이에 의해 지정된 사각형이 이 <see cref="T:System.Drawing.Graphics" />의 보이는 클립 영역 안에 포함되었는지 여부를 나타냅니다.</summary>
        <returns><paramref name="x" />, <paramref name="y" />, <paramref name="width" /> 및 <paramref name="height" /> 매개 변수에 의해 정의된 사각형이 이 <see cref="T:System.Drawing.Graphics" />의 보이는 클립 영역 안에 포함되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   사각형 클립 영역을 만들고 사용 하 여 폼의 그래픽 개체에 대 한 클리핑 영역으로 설정 <xref:System.Drawing.Drawing2D.CombineMode.Replace>합니다.  
  
-   위치 및 두 개의 사각형의 크기, 하나는 클리핑 영역 및 외부 하나 만듭니다.  
  
-   각각의 표시 여부를 테스트 하 고 표시 하는 것만을 그립니다.  
  
 결과 하나의 작은 빨간색 사각형이 클립 영역 내에 있는 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#134)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#134)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#134)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsVisibleClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisibleClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisibleClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisibleClipEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisibleClipEmpty : bool" Usage="System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 보이는 클립 영역이 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역에 대해 보이는 부분이 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 표시 된 클립 영역이이의 클립 영역의 교집합입니다 `Graphics` 및 창의 클리핑 영역입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCharacterRanges">
      <MemberSignature Language="C#" Value="public System.Drawing.Region[] MeasureCharacterRanges (string text, System.Drawing.Font font, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Region[] MeasureCharacterRanges(string text, class System.Drawing.Font font, valuetype System.Drawing.RectangleF layoutRect, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Drawing::Region ^&gt; ^ MeasureCharacterRanges(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::RectangleF layoutRect, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureCharacterRanges : string * System.Drawing.Font * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; System.Drawing.Region[]" Usage="graphics.MeasureCharacterRanges (text, font, layoutRect, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">측정할 문자열입니다.</param>
        <param name="font">문자열의 텍스트 형식을 정의하는 <see cref="T:System.Drawing.Font" />입니다.</param>
        <param name="layoutRect">문자열에 대한 레이아웃 사각형을 지정하는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="stringFormat">줄 간격과 같은 문자열에 대한 서식 정보를 나타내는 <see cref="T:System.Drawing.StringFormat" />입니다.</param>
        <summary>지정된 문자열 안의 문자 위치 영역의 경계를 각각 설정하는 <see cref="T:System.Drawing.Region" /> 개체의 배열을 가져옵니다.</summary>
        <returns>이 메서드는 지정된 문자열 안의 문자 위치 영역의 경계를 각각 설정하는 <see cref="T:System.Drawing.Region" /> 개체의 배열을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드에서 반환 된 지역 해상도 의해 좌우 되므로 있을 수 있습니다 정확도 약간 손실 문자열 하나 해상도 메타 파일에 기록 되며 나중에 다른 해상도로 다시 재생 하는 경우.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   "첫 번째 및 두 번째 범위" 문자열을 설정 하 고 문자열 ("Times New Roman", 16 포인트)를 표시 하기 위한 글꼴입니다.  
  
-   집합 두 자로 된 범위 내의 문자열 ("First" 및 "두 번째" 단어에 해당).  
  
-   문자열을 표시 하는 사각형을 만듭니다.  
  
-   문자열 두 문자 범위를 포함 하 여 ¾의 서식을 설정 합니다.  
  
-   화면에 문자열을 그립니다.  
  
-   문자 범위를 측정, 바인딩된 두 개의 지정된 범위는 사각형을 결정 합니다.  
  
-   화면에 두 개의 사각형을 그립니다.  
  
 결과 빨간색 직사각형으로 제한 ("First") 첫 번째 범위와 두 번째 범위 ("두 번째") 파란색 사각형에 의해 경계가 지정 된 문자열을 표시 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#135)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#135)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#135)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MeasureString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 <see cref="T:System.Drawing.Font" />를 사용하여 그릴 때 지정된 문자열을 측정합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
      </Parameters>
      <Docs>
        <param name="text">측정할 문자열입니다.</param>
        <param name="font">문자열의 텍스트 형식을 정의하는 <see cref="T:System.Drawing.Font" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Font" />를 사용하여 그릴 때 지정된 문자열을 측정합니다.</summary>
        <returns>이 메서드는 <paramref name="text" /> 매개 변수를 사용하여 그린 대로 <paramref name="font" /> 매개 변수에 지정된 문자열의 크기(<see cref="T:System.Drawing.SizeF" /> 속성에 지정된 단위)를 나타내는 <see cref="P:System.Drawing.Graphics.PageUnit" /> 구조체를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> 메서드는 개별 사용 하 여 문자열 및 문자 모양 있어 걸친 수 있도록 문자열 앞뒤 약간의 추가 공백 포함을 위해 설계 되었습니다. 또한 합니다 <xref:System.Drawing.Graphics.DrawString%2A> 메서드는 디스플레이 품질을 최적화 하기 위해 문자 모양 요소를 조정 하 고 보고 보다 좁은 문자열로 표시 될 수 있습니다 <xref:System.Drawing.Graphics.MeasureString%2A>합니다. 메트릭 (예: 서식 있는 텍스트를 구현 하는 경우) 레이아웃에서 인접 문자열에 대 한 적합 한을 가져오려면를 <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> 메서드 또는 중 하나는 <xref:System.Drawing.Graphics.MeasureString%2A> 사용 하는 메서드를 <xref:System.Drawing.StringFormat>, 전달 및 <xref:System.Drawing.StringFormat.GenericTypographic%2A>. 또한 확인 합니다 <xref:System.Drawing.Graphics.TextRenderingHint%2A> 에 대 한 합니다 <xref:System.Drawing.Graphics> 는 <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   측정할 문자열을 만듭니다.  
  
-   글꼴 개체를 만들고 Arial (16 포인트)로 설정 합니다.  
  
-   크기 개체를 만들고 문자열의 크기를 측정 하 고 글꼴 개체를 사용 합니다.  
  
-   문자열의 측정 된 크기를 사용 하 여 빨간색 사각형을 그립니다.  
  
-   그려지는 사각형 내에 있는 문자열을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#136)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#136)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#136)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">글꼴 및 텍스트 사용</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="text">측정할 문자열입니다.</param>
        <param name="font">문자열의 텍스트 형식을 정의하는 <see cref="T:System.Drawing.Font" />입니다.</param>
        <param name="layoutArea">텍스트에 대한 최대 레이아웃 영역을 지정하는 <see cref="T:System.Drawing.SizeF" /> 구조체입니다.</param>
        <summary>지정된 레이아웃 영역 안에서 지정된 <see cref="T:System.Drawing.Font" />를 사용하여 그릴 때 지정된 문자열을 측정합니다.</summary>
        <returns>이 메서드는 <paramref name="text" /> 매개 변수를 사용하여 그린 대로 <paramref name="font" /> 매개 변수에 지정된 문자열의 크기(<see cref="T:System.Drawing.SizeF" /> 속성에 지정된 단위)를 나타내는 <see cref="P:System.Drawing.Graphics.PageUnit" /> 구조체를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> 메서드는 개별 사용 하 여 문자열 및 문자 모양 있어 걸친 수 있도록 문자열 앞뒤 약간의 추가 공백 포함을 위해 설계 되었습니다. 또한 합니다 <xref:System.Drawing.Graphics.DrawString%2A> 메서드는 디스플레이 품질을 최적화 하기 위해 문자 모양 요소를 조정 하 고 보고 보다 좁은 문자열로 표시 될 수 있습니다 <xref:System.Drawing.Graphics.MeasureString%2A>합니다. 메트릭 (예: 서식 있는 텍스트를 구현 하는 경우) 레이아웃에서 인접 문자열에 대 한 적합 한을 가져오려면를 <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> 메서드 또는 중 하나는 <xref:System.Drawing.Graphics.MeasureString%2A> 사용 하는 메서드를 <xref:System.Drawing.StringFormat>, 전달 및 <xref:System.Drawing.StringFormat.GenericTypographic%2A>. 또한 확인 합니다 <xref:System.Drawing.Graphics.TextRenderingHint%2A> 에 대 한 합니다 <xref:System.Drawing.Graphics> 는 <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   측정할 문자열을 Arial (16 포인트)로 설정 글꼴 개체를 만듭니다.  
  
-   문자열의 최대 레이아웃 크기를 설정합니다.  
  
-   Size 개체를 만들고, 글꼴 개체 및 레이아웃을 최대 크기를 사용 하 여 문자열의 크기를 측정 하 합니다.  
  
-   문자열의 측정 된 크기를 사용 하 여 빨간색 사각형을 그립니다.  
  
-   그려지는 사각형 내에 있는 문자열을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#138)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#138)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#138)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">글꼴 및 텍스트 사용</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * int -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, width)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">측정할 문자열입니다.</param>
        <param name="font">문자열의 형식을 정의하는 <see cref="T:System.Drawing.Font" />입니다.</param>
        <param name="width">최대 문자열 너비(픽셀)입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Font" />를 사용하여 그릴 때 지정된 문자열을 측정합니다.</summary>
        <returns>이 메서드는 <paramref name="text" /> 매개 변수를 사용하여 그린 대로 <paramref name="font" /> 매개 변수에 지정된 문자열의 크기(<see cref="T:System.Drawing.SizeF" /> 속성에 지정된 단위)를 나타내는 <see cref="P:System.Drawing.Graphics.PageUnit" /> 구조체를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `width` 반환 된 너비 요소의 최대값을 지정 하는 매개 변수 <xref:System.Drawing.SizeF> 구조 (<xref:System.Drawing.SizeF.Width%2A>). 경우는 `width` 매개 변수를 사용 하면 반환된 된 문자열의 실제 너비 보다 작으면 <xref:System.Drawing.SizeF.Width%2A> 구성 요소는 지정된 된 너비에 맞춰 문자의 최대 수를 나타내는 값으로 잘립니다. 반환된 된 전체 문자열에 맞게 <xref:System.Drawing.SizeF.Height%2A> 구성 요소는 줄 바꿈 문자를 사용 하 여 문자열을 표시할 수 있는 값으로 조정 됩니다.  
  
 <xref:System.Drawing.Graphics.MeasureString%2A> 메서드는 개별 사용 하 여 문자열 및 문자 모양 있어 걸친 수 있도록 문자열 앞뒤 약간의 추가 공백 포함을 위해 설계 되었습니다. 또한 합니다 <xref:System.Drawing.Graphics.DrawString%2A> 메서드는 디스플레이 품질을 최적화 하기 위해 문자 모양 요소를 조정 하 고 보고 보다 좁은 문자열로 표시 될 수 있습니다 <xref:System.Drawing.Graphics.MeasureString%2A>합니다. 메트릭 (예: 서식 있는 텍스트를 구현 하는 경우) 레이아웃에서 인접 문자열에 대 한 적합 한을 가져오려면를 <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> 메서드 또는 중 하나는 <xref:System.Drawing.Graphics.MeasureString%2A> 사용 하는 메서드를 <xref:System.Drawing.StringFormat>, 전달 및 <xref:System.Drawing.StringFormat.GenericTypographic%2A>. 또한 확인 합니다 <xref:System.Drawing.Graphics.TextRenderingHint%2A> 에 대 한 합니다 <xref:System.Drawing.Graphics> 는 <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   측정할 문자열을 Arial (16 포인트)로 설정 글꼴 개체를 만듭니다.  
  
-   문자열의 최대 너비를 설정합니다.  
  
-   Size 개체를 만들고 글꼴 개체와 최대 문자열 너비를 사용 하 여 문자열의 크기를 측정 하 합니다.  
  
-   문자열의 측정 된 크기를 사용 하 여 빨간색 사각형을 그립니다.  
  
-   그려지는 사각형 내에 있는 문자열을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#141)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#141)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#141)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">글꼴 및 텍스트 사용</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.PointF origin, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.PointF origin, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::PointF origin, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.PointF * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, origin, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="origin" Type="System.Drawing.PointF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">측정할 문자열입니다.</param>
        <param name="font">문자열의 텍스트 형식을 정의하는 <see cref="T:System.Drawing.Font" />입니다.</param>
        <param name="origin">문자열의 왼쪽 위 모퉁이를 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체입니다.</param>
        <param name="stringFormat">줄 간격과 같은 문자열에 대한 서식 정보를 나타내는 <see cref="T:System.Drawing.StringFormat" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Font" />로 그리고, 지정된 <see cref="T:System.Drawing.StringFormat" />으로 형식을 지정할 때 지정된 문자열을 측정합니다.</summary>
        <returns>이 메서드는 <paramref name="text" /> 매개 변수와 <paramref name="font" /> 매개 변수를 사용하여 그린 대로 <paramref name="stringFormat" /> 매개 변수에 지정된 문자열의 크기(<see cref="T:System.Drawing.SizeF" /> 속성에 지정된 단위)를 나타내는 <see cref="P:System.Drawing.Graphics.PageUnit" /> 구조체를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> 메서드는 개별 사용 하 여 문자열 및 문자 모양 있어 걸친 수 있도록 문자열 앞뒤 약간의 추가 공백 포함을 위해 설계 되었습니다. 또한 합니다 <xref:System.Drawing.Graphics.DrawString%2A> 메서드는 디스플레이 품질을 최적화 하기 위해 문자 모양 요소를 조정 하 고 보고 보다 좁은 문자열로 표시 될 수 있습니다 <xref:System.Drawing.Graphics.MeasureString%2A>합니다. 메트릭 (예: 서식 있는 텍스트를 구현 하는 경우) 레이아웃에서 인접 문자열에 대 한 적합 한을 가져오려면를 <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> 메서드 또는 중 하나는 <xref:System.Drawing.Graphics.MeasureString%2A> 사용 하는 메서드를 <xref:System.Drawing.StringFormat>, 전달 및 <xref:System.Drawing.StringFormat.GenericTypographic%2A>. 또한 확인 합니다 <xref:System.Drawing.Graphics.TextRenderingHint%2A> 에 대 한 합니다 <xref:System.Drawing.Graphics> 는 <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   측정할 문자열을 만들고 Arial (16 포인트)로 설정 하는 글꼴 개체  
  
-   문자열의 왼쪽 위 모퉁이 찾으려고 지점을 만듭니다.  
  
-   문자열 형식 개체를 만들고 그 형식 플래그 설정 하는 <xref:System.Drawing.StringFormatFlags.DirectionVertical>합니다.  
  
-   문자열을 크기 개체를 만듭니다.  
  
-   문자열, 글꼴 개체, 위치 지정 점 및 문자열 형식을 사용 하 여 문자열의 크기를 측정 합니다.  
  
-   찾기 지점과 문자열의 측정된 크기를 사용 하 여 빨간색 사각형을 그립니다.  
  
-   그려지는 사각형 내에 있는 문자열을 그립니다.  
  
 결과 세로 문자열을 둘러싸는 세로 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#137)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#137)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#137)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">글꼴 및 텍스트 사용</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">측정할 문자열입니다.</param>
        <param name="font">문자열의 텍스트 형식을 정의하는 <see cref="T:System.Drawing.Font" />입니다.</param>
        <param name="layoutArea">텍스트에 대한 최대 레이아웃 영역을 지정하는 <see cref="T:System.Drawing.SizeF" /> 구조체입니다.</param>
        <param name="stringFormat">줄 간격과 같은 문자열에 대한 서식 정보를 나타내는 <see cref="T:System.Drawing.StringFormat" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Font" />로 그리고, 지정된 <see cref="T:System.Drawing.StringFormat" />으로 형식을 지정할 때 지정된 문자열을 측정합니다.</summary>
        <returns>이 메서드는 <paramref name="text" /> 매개 변수와 <paramref name="font" /> 매개 변수를 사용하여 그린 대로 <paramref name="stringFormat" /> 매개 변수에 지정된 문자열의 크기(<see cref="T:System.Drawing.SizeF" /> 속성에 지정된 단위)를 나타내는 <see cref="P:System.Drawing.Graphics.PageUnit" /> 구조체를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> 메서드는 개별 사용 하 여 문자열 및 문자 모양 있어 걸친 수 있도록 문자열 앞뒤 약간의 추가 공백 포함을 위해 설계 되었습니다. 또한 합니다 <xref:System.Drawing.Graphics.DrawString%2A> 메서드는 디스플레이 품질을 최적화 하기 위해 문자 모양 요소를 조정 하 고 보고 보다 좁은 문자열로 표시 될 수 있습니다 <xref:System.Drawing.Graphics.MeasureString%2A>합니다. 메트릭 (예: 서식 있는 텍스트를 구현 하는 경우) 레이아웃에서 인접 문자열에 대 한 적합 한을 가져오려면를 <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> 메서드 또는 중 하나는 <xref:System.Drawing.Graphics.MeasureString%2A> 사용 하는 메서드를 <xref:System.Drawing.StringFormat>, 전달 및 <xref:System.Drawing.StringFormat.GenericTypographic%2A>. 또한 확인 합니다 <xref:System.Drawing.Graphics.TextRenderingHint%2A> 에 대 한 합니다 <xref:System.Drawing.Graphics> 는 <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   측정할 문자열을 Arial (16 포인트)로 설정 글꼴 개체를 만듭니다.  
  
-   문자열을 크기 개체를 만들고 문자열의 최대 레이아웃 크기를 설정 합니다.  
  
-   문자열 형식 개체를 만들고 그 형식 플래그 설정 하는 <xref:System.Drawing.StringFormatFlags.DirectionVertical>합니다.  
  
-   문자열 및 글꼴 개체, 최대 레이아웃 크기 문자열 형식을 사용 하 여 문자열의 크기를 측정 합니다.  
  
-   문자열의 측정 된 크기를 사용 하 여 빨간색 사각형을 그립니다.  
  
-   그려지는 사각형 내에 있는 문자열을 그립니다.  
  
 결과 세로 문자열을 둘러싸는 세로 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#139)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#139)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#139)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">글꼴 및 텍스트 사용</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * int * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, width, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">측정할 문자열입니다.</param>
        <param name="font">문자열의 텍스트 형식을 정의하는 <see cref="T:System.Drawing.Font" />입니다.</param>
        <param name="width">문자열의 최대 너비입니다.</param>
        <param name="format">줄 간격과 같은 문자열에 대한 서식 정보를 나타내는 <see cref="T:System.Drawing.StringFormat" />입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Font" />로 그리고, 지정된 <see cref="T:System.Drawing.StringFormat" />으로 형식을 지정할 때 지정된 문자열을 측정합니다.</summary>
        <returns>이 메서드는 <paramref name="text" /> 매개 변수와 <paramref name="font" /> 매개 변수를 사용하여 그린 대로 <paramref name="stringFormat" /> 매개 변수에 지정된 문자열의 크기(<see cref="T:System.Drawing.SizeF" /> 속성에 지정된 단위)를 나타내는 <see cref="P:System.Drawing.Graphics.PageUnit" /> 구조체를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> 메서드는 개별 사용 하 여 문자열 및 문자 모양 있어 걸친 수 있도록 문자열 앞뒤 약간의 추가 공백 포함을 위해 설계 되었습니다. 또한 합니다 <xref:System.Drawing.Graphics.DrawString%2A> 메서드는 디스플레이 품질을 최적화 하기 위해 문자 모양 요소를 조정 하 고 보고 보다 좁은 문자열로 표시 될 수 있습니다 <xref:System.Drawing.Graphics.MeasureString%2A>합니다. 메트릭 (예: 서식 있는 텍스트를 구현 하는 경우) 레이아웃에서 인접 문자열에 대 한 적합 한을 가져오려면를 <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> 메서드 또는 중 하나는 <xref:System.Drawing.Graphics.MeasureString%2A> 사용 하는 메서드를 <xref:System.Drawing.StringFormat>, 전달 및 <xref:System.Drawing.StringFormat.GenericTypographic%2A>. 또한 확인 합니다 <xref:System.Drawing.Graphics.TextRenderingHint%2A> 에 대 한 합니다 <xref:System.Drawing.Graphics> 는 <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   측정값 및 글꼴을 문자열로 만듭니다 개체 Arial (16 포인트)로 설정 합니다.  
  
-   문자열의 최대 너비를 설정합니다.  
  
-   문자열 형식 개체를 만들고 그 형식 플래그 설정 하는 <xref:System.Drawing.StringFormatFlags.DirectionVertical>합니다.  
  
-   문자열을 크기 개체를 만듭니다.  
  
-   문자열, font 개체, 최대 너비와 문자열 형식으로 사용 하 여 문자열의 크기를 측정 합니다.  
  
-   문자열의 측정 된 크기를 사용 하 여 빨간색 사각형을 그립니다.  
  
-   그려지는 사각형 내에 있는 문자열을 그립니다.  
  
 결과 세로 문자열을 둘러싸는 세로 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#142)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#142)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#142)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">글꼴 및 텍스트 사용</related>
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat, out int charactersFitted, out int linesFilled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat, [out] int32&amp; charactersFitted, [out] int32&amp; linesFilled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat, [Runtime::InteropServices::Out] int % charactersFitted, [Runtime::InteropServices::Out] int % linesFilled);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF * System.Drawing.StringFormat *  *  -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea, stringFormat, charactersFitted, linesFilled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
        <Parameter Name="charactersFitted" Type="System.Int32" RefType="out" />
        <Parameter Name="linesFilled" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">측정할 문자열입니다.</param>
        <param name="font">문자열의 텍스트 형식을 정의하는 <see cref="T:System.Drawing.Font" />입니다.</param>
        <param name="layoutArea">텍스트에 대한 최대 레이아웃 영역을 지정하는 <see cref="T:System.Drawing.SizeF" /> 구조체입니다.</param>
        <param name="stringFormat">줄 간격과 같은 문자열에 대한 서식 정보를 나타내는 <see cref="T:System.Drawing.StringFormat" />입니다.</param>
        <param name="charactersFitted">문자열에 있는 문자의 수입니다.</param>
        <param name="linesFilled">문자열에 있는 텍스트 줄의 수입니다.</param>
        <summary>지정된 <see cref="T:System.Drawing.Font" />로 그리고, 지정된 <see cref="T:System.Drawing.StringFormat" />으로 형식을 지정할 때 지정된 문자열을 측정합니다.</summary>
        <returns>이 메서드는 <paramref name="text" /> 매개 변수와 <paramref name="font" /> 매개 변수를 사용하여 그린 대로 <paramref name="stringFormat" /> 매개 변수의 문자열 크기(<see cref="T:System.Drawing.SizeF" /> 속성에 지정된 단위)를 나타내는 <see cref="P:System.Drawing.Graphics.PageUnit" /> 구조체를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.MeasureString%2A> 메서드는 개별 사용 하 여 문자열 및 문자 모양 있어 걸친 수 있도록 문자열 앞뒤 약간의 추가 공백 포함을 위해 설계 되었습니다. 또한 합니다 <xref:System.Drawing.Graphics.DrawString%2A> 메서드는 디스플레이 품질을 최적화 하기 위해 문자 모양 요소를 조정 하 고 보고 보다 좁은 문자열로 표시 될 수 있습니다 <xref:System.Drawing.Graphics.MeasureString%2A>합니다. 인접 문자열 레이아웃 (예: 서식 있는 텍스트를 구현 하는 경우)에 대해 적합 한 메트릭을 가져오려면를 <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> 메서드 또는 중 하나는 <xref:System.Drawing.Graphics.MeasureString%2A> 사용 하는 메서드를 <xref:System.Drawing.StringFormat> 전달 <xref:System.Drawing.StringFormat.GenericTypographic%2A>합니다. 또한 확인 합니다 <xref:System.Drawing.Graphics.TextRenderingHint%2A> 에 대 한는 <xref:System.Drawing.Graphics> 는 <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   측정할 문자열을 만들고 Arial (16 포인트)로 설정 하는 글꼴 개체  
  
-   문자열의 최대 레이아웃 크기를 설정합니다.  
  
-   문자열 형식 개체를 만들고 그 형식 플래그 설정 하는 <xref:System.Drawing.StringFormatFlags.DirectionVertical>합니다.  
  
-   정수 변수를 만듭니다 `charactersFitted` 고 `linesFilled` 및 크기 개체를 문자열을 측정 합니다.  
  
-   문자열의 크기를 측정 하 고 맞추는 문자 및 문자열, font 개체, 최대 레이아웃 크기 및 문자열 형식을 사용 하 여 채워진 줄의 수를 결정 합니다.  
  
-   문자열의 측정 된 크기를 사용 하 여 빨간색 사각형을 그립니다.  
  
-   그려지는 사각형 내에 있는 문자열을 그립니다.  
  
-   맞추는 문자와 채워진 줄 번호의 값을 그립니다.  
  
 결과 세로 문자열을 둘러싸는 세로 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#140)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#140)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#140)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="font" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
        <related type="Article" href="~/docs/framework/winforms/advanced/using-fonts-and-text.md">글꼴 및 텍스트 사용</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 전역 변환과 지정된 <see cref="T:System.Drawing.Drawing2D.Matrix" />를 곱합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix -&gt; unit" Usage="graphics.MultiplyTransform matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">전역 변환을 곱하는 4x4 <see cref="T:System.Drawing.Drawing2D.Matrix" />입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 전역 변환과 지정된 <see cref="T:System.Drawing.Drawing2D.Matrix" />를 곱합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드 앞에서 지정 된 매트릭스를 추가 합니다 `matrix` 매개 변수를 결과 되도록 `matrix` 월드 변형을 x입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   만듭니다는 `transformMatrix` 행렬 (두 두 항등 매트릭스와 0 변환 벡터)입니다.  
  
-   변환 매트릭스 벡터 (200, 100)로 변환합니다.  
  
-   Windows Form의 월드 변형 매트릭스 30도 만큼 회전, 폼의 변형 매트릭스를 30도 회전 행렬을 추가 합니다.  
  
-   변환 된으로 회전된 월드 변형 매트릭스를 곱합니다 `transformMatrix`를 앞에 추가 하 고는 `transformMatrix` 월드 변형 매트릭스를 합니다.  
  
-   회전 되 고 번역 된 타원을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#143)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#143)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#143)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0659fe00-9e0c-41c4-9118-016f2404c905">매트릭스에 의한 변형 표시</related>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.MultiplyTransform (matrix, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">전역 변환을 곱하는 4x4 <see cref="T:System.Drawing.Drawing2D.Matrix" />입니다.</param>
        <param name="order">곱하기의 순서를 결정하는 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> 열거형의 멤버입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 전역 변환과 지정된 <see cref="T:System.Drawing.Drawing2D.Matrix" />를 지정된 순서로 곱합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값이 <xref:System.Drawing.Drawing2D.MatrixOrder.Prepend> 에 대 한는 `order` 곱하기의 순서는 매개 변수 지정 `matrix` 월드 변형을 x입니다. 값이 <xref:System.Drawing.Drawing2D.MatrixOrder.Append> 에 대 한 `order` 곱하기의 순서는 월드 변형을 x 지정 `matrix`합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   만듭니다는 `transformMatrix` 행렬 (두 두 항등 매트릭스와 0 변환 벡터)입니다.  
  
-   변환 매트릭스 벡터 (200, 100)로 변환합니다.  
  
-   폼의 변형 매트릭스를 30도 회전 매트릭스를 앞으로 30도, Windows Form의 월드 변형 매트릭스를 회전 합니다.  
  
-   으로 변환 된 회전된 월드 변형 매트릭스를 곱합니다 `transformMatrix`, 추가 된 `transformMatrix` 월드 변형 매트릭스를 합니다.  
  
-   회전 되 고 번역 된 타원을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#144)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#144)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#144)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/0659fe00-9e0c-41c4-9118-016f2404c905">매트릭스에 의한 변형 표시</related>
      </Docs>
    </Member>
    <Member MemberName="PageScale">
      <MemberSignature Language="C#" Value="public float PageScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PageScale" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageScale" />
      <MemberSignature Language="VB.NET" Value="Public Property PageScale As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float PageScale { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.PageScale : single with get, set" Usage="System.Drawing.Graphics.PageScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 전체 단위와 페이지 단위 사이의 배율을 가져오거나 설정합니다.</summary>
        <value>이 속성은 이 <see cref="T:System.Drawing.Graphics" />에 대한 전체 단위와 페이지 단위 사이의 배율 값을 지정합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Drawing.Graphics.PageScale%2A> 및 <xref:System.Drawing.Graphics.TranslateTransform%2A> 사각형을 그릴 때 크기와 원점을 변경 하는 멤버입니다.  
  
 이 예제에서는 Windows Forms를 사용 하 여 사용 하도록 설계 되었습니다. 양식과 호출 코드를 붙여 합니다 `ChangePageScaleAndTranslateTransform` 폼을 처리 하는 경우 메서드 <xref:System.Windows.Forms.Control.Paint> 이벤트를 전달 `e` 으로 <xref:System.Windows.Forms.PaintEventArgs>합니다.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.GraphicsProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#2)]
 [!code-vb[System.Drawing.GraphicsProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">좌표계 형식</related>
      </Docs>
    </Member>
    <Member MemberName="PageUnit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit PageUnit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.GraphicsUnit PageUnit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageUnit" />
      <MemberSignature Language="VB.NET" Value="Public Property PageUnit As GraphicsUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::GraphicsUnit PageUnit { System::Drawing::GraphicsUnit get(); void set(System::Drawing::GraphicsUnit value); };" />
      <MemberSignature Language="F#" Value="member this.PageUnit : System.Drawing.GraphicsUnit with get, set" Usage="System.Drawing.Graphics.PageUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 페이지 좌표에 사용되는 측정 단위를 가져오거나 설정합니다.</summary>
        <value><see cref="F:System.Drawing.GraphicsUnit.World" />를 제외한 <see cref="T:System.Drawing.GraphicsUnit" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 그래픽 장치는이 페이지 좌표에 사용 되는 측정 단위 <xref:System.Drawing.Graphics>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 변경의 효과 보여 줍니다.는 <xref:System.Drawing.Graphics.PageUnit%2A> 속성입니다.  
  
 이 예제에서는 Windows Forms를 사용 하 여 사용 하도록 설계 되었습니다. 양식과 호출 코드를 붙여 합니다 `ChangePageUnit` 폼을 처리 하는 경우 메서드 <xref:System.Windows.Forms.Control.Paint> 이벤트를 전달 `e` 으로 <xref:System.Windows.Forms.PaintEventArgs>합니다.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.GraphicsProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#3)]
 [!code-vb[System.Drawing.GraphicsProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="P:System.Drawing.Graphics.PageUnit" />는 물리적 단위가 아닌 <see cref="F:System.Drawing.GraphicsUnit.World" />로 설정됩니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">좌표계 형식</related>
      </Docs>
    </Member>
    <Member MemberName="PixelOffsetMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PixelOffsetMode" />
      <MemberSignature Language="VB.NET" Value="Public Property PixelOffsetMode As PixelOffsetMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PixelOffsetMode PixelOffsetMode { System::Drawing::Drawing2D::PixelOffsetMode get(); void set(System::Drawing::Drawing2D::PixelOffsetMode value); };" />
      <MemberSignature Language="F#" Value="member this.PixelOffsetMode : System.Drawing.Drawing2D.PixelOffsetMode with get, set" Usage="System.Drawing.Graphics.PixelOffsetMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PixelOffsetMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />를 렌더링할 때 픽셀을 오프셋하는 방법을 지정하는 값을 가져오거나 설정합니다.</summary>
        <value>이 속성은 <see cref="T:System.Drawing.Drawing2D.PixelOffsetMode" /> 열거형의 멤버를 지정합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 사용 하거나 더 높은 품질, 느린 렌더링 또는 낮은 품질의 렌더링 속도의 내용 지정 <xref:System.Drawing.Graphics> 개체입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReleaseHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이 <see cref="M:System.Drawing.Graphics.GetHdc" />의 <see cref="T:System.Drawing.Graphics" /> 메서드에 대한 이전 호출에서 얻은 장치 컨텍스트 핸들을 해제합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHdc();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHdc : unit -&gt; unit&#xA;override this.ReleaseHdc : unit -&gt; unit" Usage="graphics.ReleaseHdc " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.ReleaseHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="M:System.Drawing.Graphics.GetHdc" />의 <see cref="T:System.Drawing.Graphics" /> 메서드에 대한 이전 호출에서 얻은 장치 컨텍스트 핸들을 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.GetHdc%2A> 및 <xref:System.Drawing.Graphics.ReleaseHdc%2A> 가져오고 Windows 디바이스에 대 한 핸들을 해제할 수 있도록 하는 두 가지가 있습니다. 에 대 한 호출을 항상 따라야 <xref:System.Drawing.Graphics.GetHdc%2A> 에 대 한 호출을 사용 하 여 <xref:System.Drawing.Graphics.ReleaseHdc%2A> Windows 핸들을 사용 하 여 완료 될 때입니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드에 액세스 합니다. 열거형 관련: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</permission>
        <altmember cref="T:System.Drawing.IDeviceContext" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="member this.ReleaseHdc : nativeint -&gt; unit" Usage="graphics.ReleaseHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">이 <see cref="M:System.Drawing.Graphics.GetHdc" />의 <see cref="T:System.Drawing.Graphics" /> 메서드에 대한 이전 호출에서 얻은 장치 컨텍스트에 대한 핸들입니다.</param>
        <summary>이 <see cref="M:System.Drawing.Graphics.GetHdc" />의 <see cref="T:System.Drawing.Graphics" /> 메서드에 대한 이전 호출에서 얻은 장치 컨텍스트 핸들을 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 디바이스 컨텍스트는 기준으로 Windows 구조를 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 출력에 영향을 주는 그래픽 모드 뿐만 아니라 그래픽 개체 및 해당 관련된 특성의 집합을 정의 하는 합니다.  
  
 에 대 한 호출을 <xref:System.Drawing.Graphics.GetHdc%2A> 및 <xref:System.Drawing.Graphics.ReleaseHdc%2A> 메서드 쌍으로 나타나야 합니다. 범위에 있는 동안을 <xref:System.Drawing.Graphics.GetHdc%2A> 하 고 <xref:System.Drawing.Graphics.ReleaseHdc%2A> 메서드 쌍을 일반적으로 수행한 호출에만 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 함수입니다. 호출에 대 한 범위에 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 의 메서드를 <xref:System.Drawing.Graphics> 시킨를 `hdc` 매개 변수 실패는 `ObjectBusy` 오류. 또한 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] 상태 변경 내용이 무시 합니다 <xref:System.Drawing.Graphics> 의 `hdc` 후속 작업에서 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 예제는 Windows를 호출 하는 방법을 보여 줍니다 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 와 동일한 작업을 수행 하는 함수를 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> 메서드. 이 코드에서는 다음 작업을 수행합니다.  
  
-   상호 운용성 정의 <xref:System.Runtime.InteropServices.DllImportAttribute> Windows DLL 파일 gdi32.dll에 대 한 특성입니다. 이 DLL에 원하는 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] 기능을 정의 합니다 <xref:System.Drawing.Rectangle> 외부와 해당 DLL에는 함수입니다.  
  
-   빨간색 펜을 만듭니다.  
  
-   펜으로 사각형을 사용 하 여 화면을 [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> 메서드.  
  
-   내부 포인터 형식 변수를 정의 `hdc` 형식의 디바이스 컨텍스트에 대 한 핸들을 해당 값을 가져오거나 설정 합니다.  
  
-   사각형을 사용 하 여 화면을 [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> 함수입니다.  
  
-   나타내는 디바이스 컨텍스트를 해제 합니다 `hdc` 매개 변수입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#145)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#145)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#145)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드에 액세스 합니다. 열거형 관련: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdcInternal">
      <MemberSignature Language="C#" Value="public void ReleaseHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdcInternal (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdcInternal(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="member this.ReleaseHdcInternal : nativeint -&gt; unit" Usage="graphics.ReleaseHdcInternal hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netcore-2.1;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;dotnet-plat-ext-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">장치 컨텍스트에 대한 핸들입니다.</param>
        <summary>장치 컨텍스트에 대한 핸들을 해제합니다.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드에 액세스 합니다. 열거형 관련: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />합니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="RenderingOrigin">
      <MemberSignature Language="C#" Value="public System.Drawing.Point RenderingOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point RenderingOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.RenderingOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderingOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point RenderingOrigin { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderingOrigin : System.Drawing.Point with get, set" Usage="System.Drawing.Graphics.RenderingOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>디더링 및 빗살 무늬 브러시에 대한 이 <see cref="T:System.Drawing.Graphics" />의 렌더링 원점을 가져오거나 설정합니다.</summary>
        <value>픽셀 당 8비트 및 픽셀 당 16비트 디더링의 디더링 원점을 나타내고 빗살 무늬 브러시의 원점을 설정하는 데도 사용되는 <see cref="T:System.Drawing.Point" /> 구조체입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetClip">
      <MemberSignature Language="C#" Value="public void ResetClip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetClip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetClip" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetClip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetClip();" />
      <MemberSignature Language="F#" Value="member this.ResetClip : unit -&gt; unit" Usage="graphics.ResetClip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 무한 영역으로 다시 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때의 클립 영역을 <xref:System.Drawing.Graphics> 은 무한대,이 항목 <xref:System.Drawing.Graphics> 그립니다는 클리핑되지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   왼쪽 위 모퉁이 사용 하 여 사각형을 만듭니다 (0, 0)이이 사각형에 클리핑 영역을 가져오거나 설정 합니다.  
  
-   왼쪽 위 모퉁이 사용 하 여 두 번째 사각형을 만듭니다 (100, 100)이 사각형과 현재 클립 영역 (첫 번째 사각형)의 교차점으로 클리핑 영역을 가져오거나 설정 합니다.  
  
-   파란색 단색 브러시를 사용 하 여 이전 사각형을 모두 포함 하는 큰 사각형을 채웁니다.  
  
-   클리핑 영역을 무한대로 다시 설정합니다.  
  
-   두 클리핑 영역; 주위에 사각형을 그립니다. 클리핑 사각형을 첫 번째 및 두 번째 클리핑 영역에 대 한 빨간색 펜에 대 한 검정 펜을 사용 합니다.  
  
 결과 두 개의 사각형의 교차 부분만 파란색 채워집니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#146)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#146)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#146)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberSignature Language="F#" Value="member this.ResetTransform : unit -&gt; unit" Usage="graphics.ResetTransform " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 전역 변환 매트릭스를 항등 매트릭스로 다시 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 항등 매트릭스에 없는 크기 조정, 회전 또는 변환 변환을 나타냅니다. 이 월드 변형을 재설정 <xref:System.Drawing.Graphics> 의미를 항등 매트릭스로 해당 월드 변형을 변환 된 항목의 기 하 도형 변경 되지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Windows 폼의 세계 변환을 벡터 (100, 0)로 변환합니다.  
  
-   폼의 그래픽 상태를 저장합니다.  
  
-   폼의 세계 변환을 항등으로 다시 설정 하 고 빨간색 단색 브러시를 사용 하 여 사각형을 채웁니다.  
  
-   변환된 된 그래픽 상태를 복원 하 고 사각형 파랑 브러시를 단색으로 채웁니다.  
  
 결과 변환 되지 않음된 빨강으로 채워진 사각형 및 번역 된 파란색으로 채워진 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#147)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#147)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#147)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public void Restore (System.Drawing.Drawing2D.GraphicsState gstate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restore(class System.Drawing.Drawing2D.GraphicsState gstate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restore (gstate As GraphicsState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restore(System::Drawing::Drawing2D::GraphicsState ^ gstate);" />
      <MemberSignature Language="F#" Value="member this.Restore : System.Drawing.Drawing2D.GraphicsState -&gt; unit" Usage="graphics.Restore gstate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gstate" Type="System.Drawing.Drawing2D.GraphicsState" />
      </Parameters>
      <Docs>
        <param name="gstate">이 <see cref="T:System.Drawing.Drawing2D.GraphicsState" />가 복원될 상태를 나타내는 <see cref="T:System.Drawing.Graphics" />입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 상태를 <see cref="T:System.Drawing.Drawing2D.GraphicsState" />가 나타내는 상태로 복원합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 하는 경우는 <xref:System.Drawing.Graphics.Save%2A> 메서드를 <xref:System.Drawing.Graphics>, 상태를 포함 하는 정보 블록이 <xref:System.Drawing.Graphics> 스택에 배치 됩니다. 합니다 <xref:System.Drawing.Graphics.Save%2A> 메서드가 반환 되는 <xref:System.Drawing.Drawing2D.GraphicsState> 정보 블록을 식별 하는 합니다. 전달 하는 경우를 식별 <xref:System.Drawing.Drawing2D.GraphicsState> 에 <xref:System.Drawing.Graphics.Restore%2A> 메서드 정보 블록 스택에서 제거 되 고 복원 하는 데 사용 되는 <xref:System.Drawing.Graphics> 당시 시점의 상태로 <xref:System.Drawing.Graphics.Save%2A> 메서드 호출 합니다. <xref:System.Drawing.Drawing2D.GraphicsState> 에 지정된 된 호출에서 반환 되는 <xref:System.Drawing.Graphics.Save%2A> 메서드를 한 번만 전달할 수 있습니다는 `Restore` 메서드.  
  
 에 대 한 호출을 <xref:System.Drawing.Graphics.Save%2A> 메서드를 중첩 될 수 있습니다; 그리고 즉, 호출할 수 있습니다는 <xref:System.Drawing.Graphics.Save%2A> 메서드를 호출 하기 전에 여러 번을 <xref:System.Drawing.Graphics.Restore%2A> 메서드. 호출할 때마다 합니다 <xref:System.Drawing.Graphics.Save%2A> 메서드 정보 블록을 스택에 배치 되 고 수신 하는 <xref:System.Drawing.Drawing2D.GraphicsState> 정보 블록에 대 한 합니다. 해당 개체를 하나 전달 하는 경우는 <xref:System.Drawing.Graphics.Restore%2A> 메서드를를 <xref:System.Drawing.Graphics> 당시 시점의 상태로 반환 됩니다 합니다 <xref:System.Drawing.Graphics.Save%2A> 는 특정 반환 하는 메서드 호출 <xref:System.Drawing.Drawing2D.GraphicsState>. 정보 블록에서 스택에 배치 <xref:System.Drawing.Graphics.Save%2A> 메서드 호출 스택에서 제거 되 고 그 후 해당 스택에 배치 하는 모든 정보 블록 <xref:System.Drawing.Graphics.Save%2A> 메서드 호출도 제거 됩니다.  
  
 에 대 한 호출을 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출 스택의 동일 위치 정보 블록을 <xref:System.Drawing.Graphics.Save%2A> 메서드. 처럼를 <xref:System.Drawing.Graphics.Restore%2A> 호출을 이룹니다를 <xref:System.Drawing.Graphics.Save%2A> 호출을 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드 호출을 이룹니다를 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출 합니다.  
  
 호출 하는 경우는 <xref:System.Drawing.Graphics.Restore%2A> 메서드를 스택에 배치 된 모든 정보 블록 (여는 <xref:System.Drawing.Graphics.Save%2A> 메서드 또는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드) 해당 호출 후는 <xref:System.Drawing.Graphics.Save%2A> 메서드 스택에서 제거 됩니다. 마찬가지로 호출 하는 경우는 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드를 스택에 배치 된 모든 정보 블록 (여는 <xref:System.Drawing.Graphics.Save%2A> 메서드 또는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드) 해당 호출 후는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 스택에서 제거 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Windows 폼의 세계 변환을 벡터 (100, 0)로 변환합니다.  
  
-   폼의 그래픽 상태를 저장합니다.  
  
-   폼의 세계 변환을 항등으로 다시 설정 하 고 빨간색 단색 브러시를 사용 하 여 사각형을 채웁니다.  
  
-   변환된 된 그래픽 상태를 복원 하 고 두 번째 사각형 파랑 브러시를 단색으로 채웁니다.  
  
 결과 변환 되지 않음된 빨강으로 채워진 사각형 및 번역 된 파란색으로 채워진 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#148)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#148)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#148)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 변환 매트릭스에 지정된 회전을 적용합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single -&gt; unit" Usage="graphics.RotateTransform angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">회전 각도입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 변환 매트릭스에 지정된 회전을 적용합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 회전 작업 구성 요소에서 파생 된 행렬의 변환 매트릭스를 `angle` 매개 변수입니다. 이 메서드는 변형 매트릭스에 추가 하 여 회전을 적용 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Windows Form의 월드 변형 매트릭스 벡터 (0, 100)로 변환합니다.  
  
-   회전 매트릭스를 월드 변형 매트릭스 앞에 추가 30도 각도로 월드 변형을 회전 합니다.  
  
-   파란색 펜으로 회전 되 고 번역 된 타원을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#149)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#149)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#149)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.RotateTransform (angle, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">회전 각도입니다.</param>
        <param name="order">회전이 매트릭스 변환에 추가되거나 미리 추가되는지 여부를 지정하는 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> 열거형의 멤버입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 변환 매트릭스에 지정된 회전을 지정된 순서로 적용합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 회전 작업 구성 요소에서 파생 된 행렬의 변환 매트릭스를 `angle` 매개 변수입니다. 이 메서드 앞에 추가 하거나의 변형 매트릭스를 추가 합니다 <xref:System.Drawing.Graphics> 에 따라 회전 매트릭스를 `order` 매개 변수.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Windows Form의 월드 변형 매트릭스 벡터 (0, 100)로 변환합니다.  
  
-   전 세계 변환을 사용 하 여 월드 변형 매트릭스를 회전 행렬을 추가 30도 각도로 회전 <xref:System.Drawing.Drawing2D.MatrixOrder.Append>합니다.  
  
-   파란색 펜을 사용 하 여 변환, 회전 타원을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#150)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#150)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#150)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsState Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsState Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Save" />
      <MemberSignature Language="VB.NET" Value="Public Function Save () As GraphicsState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsState ^ Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; System.Drawing.Drawing2D.GraphicsState" Usage="graphics.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 현재 상태를 저장하고 <see cref="T:System.Drawing.Drawing2D.GraphicsState" />로 저장된 상태를 확인합니다.</summary>
        <returns>이 메서드는 이 <see cref="T:System.Drawing.Drawing2D.GraphicsState" />의 저장된 상태를 나타내는 <see cref="T:System.Drawing.Graphics" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 하는 경우는 <xref:System.Drawing.Graphics.Save%2A> 메서드를 <xref:System.Drawing.Graphics>, 상태를 포함 하는 정보 블록이 <xref:System.Drawing.Graphics> 스택에 배치 됩니다. 합니다 <xref:System.Drawing.Graphics.Save%2A> 메서드가 반환 되는 <xref:System.Drawing.Drawing2D.GraphicsState> 정보 블록을 식별 하는 합니다. 전달 하는 경우를 식별 <xref:System.Drawing.Drawing2D.GraphicsState> 에 <xref:System.Drawing.Graphics.Restore%2A> 메서드 정보 블록 스택에서 제거 되 고 복원 하는 데 사용 되는 <xref:System.Drawing.Graphics> 당시 시점의 상태로 <xref:System.Drawing.Graphics.Save%2A> 메서드 호출 합니다. <xref:System.Drawing.Drawing2D.GraphicsState> 에 지정된 된 호출에서 반환 되는 <xref:System.Drawing.Graphics.Save%2A> 메서드를 한 번만 전달할 수 있습니다는 <xref:System.Drawing.Graphics.Restore%2A> 메서드.  
  
 에 대 한 호출을 <xref:System.Drawing.Graphics.Save%2A> 메서드를 중첩 될 수 있습니다; 그리고 즉, 호출할 수 있습니다는 <xref:System.Drawing.Graphics.Save%2A> 메서드를 호출 하기 전에 여러 번을 <xref:System.Drawing.Graphics.Restore%2A> 메서드. 호출할 때마다 합니다 <xref:System.Drawing.Graphics.Save%2A> 메서드 정보 블록을 스택에 배치 되 고 수신 하는 <xref:System.Drawing.Drawing2D.GraphicsState> 정보 블록에 대 한 합니다. 해당 개체를 하나 전달 하는 경우는 <xref:System.Drawing.Graphics.Restore%2A> 메서드를를 <xref:System.Drawing.Graphics> 당시 시점의 상태로 반환 됩니다 합니다 <xref:System.Drawing.Graphics.Save%2A> 는 특정 반환 하는 메서드 호출 <xref:System.Drawing.Drawing2D.GraphicsState>. 정보 블록에서 스택에 배치 <xref:System.Drawing.Graphics.Save%2A> 메서드 호출 스택에서 제거 되 고 그 후 해당 스택에 배치 하는 모든 정보 블록 <xref:System.Drawing.Graphics.Save%2A> 메서드 호출도 제거 됩니다.  
  
 에 대 한 호출을 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출 스택의 동일 위치 정보 블록을 <xref:System.Drawing.Graphics.Save%2A> 메서드. 처럼를 <xref:System.Drawing.Graphics.Restore%2A> 호출을 이룹니다를 <xref:System.Drawing.Graphics.Save%2A> 호출을 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드 호출을 이룹니다를 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 호출 합니다.  
  
 호출 하는 경우는 <xref:System.Drawing.Graphics.Restore%2A> 메서드를 스택에 배치 된 모든 정보 블록 (여는 <xref:System.Drawing.Graphics.Save%2A> 메서드 또는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드) 해당 호출 후는 <xref:System.Drawing.Graphics.Save%2A> 메서드 스택에서 제거 됩니다. 마찬가지로 호출 하는 경우는 <xref:System.Drawing.Graphics.EndContainer%2A> 메서드를 스택에 배치 된 모든 정보 블록 (여는 <xref:System.Drawing.Graphics.Save%2A> 메서드 또는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드) 해당 호출 후는 <xref:System.Drawing.Graphics.BeginContainer%2A> 메서드 스택에서 제거 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Windows 폼의 세계 변환을 벡터 (100, 0)로 변환합니다.  
  
-   폼의 그래픽 상태를 저장합니다.  
  
-   Id (항등 매트릭스를 2x2 + 0 벡터 변환)를 폼의 세계 변환을 다시 설정 하 고 빨간색 단색 브러시를 사용 하 여 사각형을 채웁니다.  
  
-   변환된 된 그래픽 상태를 복원 하 고 사각형 파랑 브러시를 단색으로 채웁니다.  
  
 결과 왼쪽에는 번역 되지 않은 빨강으로 채워진 사각형 및 폼의 오른쪽에 번역 된 파란색으로 채워진 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#151)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#151)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#151)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>변환 매트릭스를 개체의 변환 매트릭스에 미리 추가하여, 지정된 크기 조정 작업을 이 <see cref="T:System.Drawing.Graphics" />의 변환 매트릭스에 적용합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single -&gt; unit" Usage="graphics.ScaleTransform (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">x 방향으로 인수의 크기를 조정합니다.</param>
        <param name="sy">Y 방향으로 인수의 크기를 조정합니다.</param>
        <summary>변환 매트릭스를 개체의 변환 매트릭스에 미리 추가하여, 지정된 크기 조정 작업을 이 <see cref="T:System.Drawing.Graphics" />의 변환 매트릭스에 적용합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 크기 조정 작업 구성 요소가 들어 있는 대각선 행렬의 변환 매트릭스의 (`sx`, `sy`, 1). 이 메서드 앞의 변형 매트릭스를 <xref:System.Drawing.Graphics> 크기 조정 매트릭스입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Windows Form의 월드 변형 매트릭스를 30도 회전 시킵니다.  
  
-   크기 조정 변환을 추가 하 여 3 x 방향의 비율과 y 방향의 1의 비율을 여는 행렬을 조정 합니다.  
  
-   파란색 펜을 사용 하 여 크기가 조정 되 고 회전 된 사각형을 그립니다.  
  
 결과 여전히 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#152)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#152)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#152)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.ScaleTransform (sx, sy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">x 방향으로 인수의 크기를 조정합니다.</param>
        <param name="sy">Y 방향으로 인수의 크기를 조정합니다.</param>
        <param name="order">크기 조정 작업이 변환 매트릭스에 추가되거나 미리 추가되는지 여부를 지정하는 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> 열거형의 멤버입니다.</param>
        <summary>지정된 크기 조정 작업을 지정된 순서로 이 <see cref="T:System.Drawing.Graphics" />의 변환 매트릭스에 적용합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 크기 조정 작업 구성 요소가 들어 있는 대각선 행렬의 변환 매트릭스의 (`sx`, `sy`, 1). 이 메서드 앞에 추가 하거나의 변형 매트릭스를 추가 합니다 <xref:System.Drawing.Graphics> 에 따라 크기 조정 매트릭스를 `order` 매개 변수.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Windows Form의 월드 변형 매트릭스를 30도 회전 시킵니다.  
  
-   사용 하 여 크기 조정 변환을 추가 하 여 해당 행렬 x 방향으로 3 배 인수 1 y 방향에서으로 확장을 <xref:System.Drawing.Drawing2D.MatrixOrder.Append> 멤버입니다.  
  
-   파란색 펜을 사용 하 여 회전, 크기 조정 된 사각형을 그립니다.  
  
 결과 평행 사변형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#153)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#153)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#153)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 지정된 <see cref="T:System.Drawing.Graphics" />의 <see langword="Clip" /> 속성으로 설정합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.SetClip path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">새 클립 영역을 나타내는 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 지정된 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />로 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 표시 되는 그래픽 경로 `path` 매개 변수 닫혀 있지 않으며, 추가 세그먼트가에 추가 됩니다 마지막 지점에서 첫 번째 요소 경로를 닫습니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   그래픽 경로 만들고 타원을 경로에 추가 합니다.  
  
-   타원형 경로로 클립 영역을 설정 합니다.  
  
-   검은색 단색 브러시를 사용 하 여 큰 사각형을 채웁니다.  
  
 결과 검은색, 채워진 타원을 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#154)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#154)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#154)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (g As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Graphics -&gt; unit" Usage="graphics.SetClip g" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="g">새 클립 영역을 가져오는 <see cref="T:System.Drawing.Graphics" />입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 지정된 <see cref="T:System.Drawing.Graphics" />의 <see langword="Clip" /> 속성으로 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수인를 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기 뿐만 `thisForm`, <xref:System.Windows.Forms.Form> 예입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   임시 만듭니다 <xref:System.Drawing.Graphics> 에서 합니다 `thisForm` <xref:System.Windows.Forms.Form> 예제입니다.  
  
-   임시의 클립 영역을 설정 <xref:System.Drawing.Graphics> 작은 사각형으로 합니다.  
  
-   폼의 그래픽 개체의 클립 영역을 임시 업데이트 <xref:System.Drawing.Graphics>합니다.  
  
-   검은색 단색 브러시를 사용 하 여 큰 사각형을 채웁니다.  
  
 결과는 소규모, 채워진, 검은색 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#156)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#156)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#156)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.SetClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">새 클립 영역을 나타내는 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 <see cref="T:System.Drawing.Rectangle" /> 구조체에 의해 지정된 사각형으로 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   클리핑 영역에 대 한 작은 사각형을 만듭니다.  
  
-   사각형에 클립 영역을 설정 합니다.  
  
-   검은색 단색 브러시를 사용 하 여 큰 사각형을 채웁니다.  
  
 결과는 소규모, 채워진, 검은색 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#158)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#158)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#158)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.RectangleF -&gt; unit" Usage="graphics.SetClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">새 클립 영역을 나타내는 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 <see cref="T:System.Drawing.RectangleF" /> 구조체에 의해 지정된 사각형으로 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   클리핑 영역에 대 한 작은 사각형을 만듭니다.  
  
-   사각형에 클립 영역을 설정 합니다.  
  
-   검은색 단색 브러시를 사용 하 여 큰 사각형을 채웁니다.  
  
 결과는 소규모, 채워진, 검은색 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#160)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#160)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#160)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Drawing2D.GraphicsPath * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (path, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="path">결합할 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />입니다.</param>
        <param name="combineMode">사용할 결합 작업을 지정하는 <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 열거형의 멤버입니다.</param>
        <summary>현재 클립 영역과 지정된 <see cref="T:System.Drawing.Graphics" />를 결합하는 지정된 작업의 결과로 이 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />의 클립 영역을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 표시 되는 그래픽 경로 `path` 매개 변수 닫혀 있지 않으며, 추가 세그먼트가에 추가 됩니다 마지막 지점에서 첫 번째 요소 경로를 닫습니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   그래픽 경로 만들고 타원을 경로에 추가 합니다.  
  
-   클리핑 영역을 사용 하 여 타원형 경로로 설정 된 <xref:System.Drawing.Drawing2D.CombineMode.Replace> 멤버입니다.  
  
-   검은색 단색 브러시를 사용 하 여 큰 사각형을 채웁니다.  
  
 결과 검은색, 채워진 타원을 합니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#155)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#155)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#155)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Graphics * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (g, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="g">결합할 클립 영역을 지정하는 <see cref="T:System.Drawing.Graphics" />입니다.</param>
        <param name="combineMode">사용할 결합 작업을 지정하는 <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 열거형의 멤버입니다.</param>
        <summary>현재 클립 영역과 지정된 <see cref="T:System.Drawing.Graphics" />의 <see cref="P:System.Drawing.Graphics.Clip" /> 속성의 지정된 결합 작업의 결과로 이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수인를 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기 뿐만 `thisForm`, <xref:System.Windows.Forms.Form> 예입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   임시 만듭니다 <xref:System.Drawing.Graphics> 에서 합니다 `thisForm` <xref:System.Windows.Forms.Form> 예제입니다.  
  
-   임시의 클립 영역을 설정 <xref:System.Drawing.Graphics> 작은 사각형으로 합니다.  
  
-   폼의 그래픽 개체의 클립 영역을 새 업데이트 <xref:System.Drawing.Graphics> 사용 하 여는 <xref:System.Drawing.Drawing2D.CombineMode.Replace> 멤버입니다.  
  
-   검은색 단색 브러시를 사용 하 여 큰 사각형을 채웁니다.  
  
 결과는 소규모, 채워진, 검은색 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#157)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#157)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#157)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Rectangle * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (rect, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">결합할 <see cref="T:System.Drawing.Rectangle" /> 구조체입니다.</param>
        <param name="combineMode">사용할 결합 작업을 지정하는 <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 열거형의 멤버입니다.</param>
        <summary>현재 클립 영역과 <see cref="T:System.Drawing.Graphics" /> 구조체에 의해 지정된 사각형을 결합하는 지정된 작업의 결과로 이 <see cref="T:System.Drawing.Rectangle" />의 클립 영역을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   클리핑 영역에 대 한 작은 사각형을 만듭니다.  
  
-   클리핑 영역을 사각형으로 설정 된 <xref:System.Drawing.Drawing2D.CombineMode.Replace> 멤버입니다.  
  
-   검은색 단색 브러시를 사용 하 여 큰 사각형을 채웁니다.  
  
 결과는 소규모, 채워진, 검은색 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#159)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#159)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#159)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.RectangleF * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (rect, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">결합할 <see cref="T:System.Drawing.RectangleF" /> 구조체입니다.</param>
        <param name="combineMode">사용할 결합 작업을 지정하는 <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 열거형의 멤버입니다.</param>
        <summary>현재 클립 영역과 <see cref="T:System.Drawing.Graphics" /> 구조체에 의해 지정된 사각형을 결합하는 지정된 작업의 결과로 이 <see cref="T:System.Drawing.RectangleF" />의 클립 영역을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   클리핑 영역에 대 한 작은 사각형을 만듭니다.  
  
-   클리핑 영역을 사각형으로 설정 된 <xref:System.Drawing.Drawing2D.CombineMode.Replace> 멤버입니다.  
  
-   검은색 단색 브러시를 사용 하 여 큰 사각형을 채웁니다.  
  
 결과는 소규모, 채워진, 검은색 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#161)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#161)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Region region, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Region region, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Region ^ region, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Region * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (region, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="region">결합할 <see cref="T:System.Drawing.Region" />입니다.</param>
        <param name="combineMode">사용할 결합 작업을 지정하는 <see cref="T:System.Drawing.Drawing2D.CombineMode" /> 열거형의 멤버입니다.</param>
        <summary>현재 클립 영역과 지정된 <see cref="T:System.Drawing.Graphics" />를 결합하는 지정된 작업의 결과로 이 <see cref="T:System.Drawing.Region" />의 클립 영역을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   클리핑 영역에 대 한 작은 사각형을 만듭니다.  
  
-   클리핑 영역을 사각형으로 설정 된 <xref:System.Drawing.Drawing2D.CombineMode.Replace> 멤버입니다.  
  
-   검은색 단색 브러시를 사용 하 여 큰 사각형을 채웁니다.  
  
 결과는 소규모, 채워진, 검은색 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#162)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#162)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#162)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmoothingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.SmoothingMode SmoothingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.SmoothingMode SmoothingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.SmoothingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property SmoothingMode As SmoothingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::SmoothingMode SmoothingMode { System::Drawing::Drawing2D::SmoothingMode get(); void set(System::Drawing::Drawing2D::SmoothingMode value); };" />
      <MemberSignature Language="F#" Value="member this.SmoothingMode : System.Drawing.Drawing2D.SmoothingMode with get, set" Usage="System.Drawing.Graphics.SmoothingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.SmoothingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 렌더링 품질을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Drawing.Drawing2D.SmoothingMode" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다듬기 모드 선, 곡선 및 채워진 영역의 가장자리 사용할 다듬기 (앤티앨리어싱) 여부를 지정 합니다. 한 가지 예외는 경로 그라데이션 브러시 다듬기 모드를 따르지 않습니다. 영역을 사용 하 여 입력을 <xref:System.Drawing.Drawing2D.PathGradientBrush> 동일한 방식으로 (별칭이 지정 됨)에 관계 없이 렌더링 됩니다는 <xref:System.Drawing.Graphics.SmoothingMode%2A> 속성입니다.  
  
   
  
## Examples  
 다음 메서드 설정의 효과 보여 줍니다.는 <xref:System.Drawing.Pen.DashCap%2A>, <xref:System.Drawing.Pen.DashPattern%2A>, 및 <xref:System.Drawing.Graphics.SmoothingMode%2A> 속성입니다. 예제의 출력은 다음 그림에 표시 됩니다.  
  
 ![다듬기가 적용 하지 않고 사용 하 여 줄입니다. ] (~/add/media/gdi-smoothingmode.png "다듬기가 적용 하지 않고 사용 하 여 줄.")  
  
 이 예제에서는 Windows Forms를 사용 하 여 사용 하도록 설계 되었습니다. 양식과 호출 코드를 붙여 합니다 `ShowPensAndSmoothingMode` 폼을 처리 하는 경우 메서드 <xref:System.Windows.Forms.Control.Paint> 이벤트를 전달 `e` 으로 <xref:System.Windows.Forms.PaintEventArgs>합니다.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContrast">
      <MemberSignature Language="C#" Value="public int TextContrast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextContrast" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextContrast" />
      <MemberSignature Language="VB.NET" Value="Public Property TextContrast As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextContrast { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextContrast : int with get, set" Usage="System.Drawing.Graphics.TextContrast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>렌더링 텍스트의 감마 보정 값을 가져오거나 설정합니다.</summary>
        <value>앤티 앨리어싱된 ClearType 텍스트의 렌더링에 사용되는 감마 보정 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 감마 보정 값은 0에서 12 사이 여야 합니다. 기본값은 4입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 합니다 <xref:System.Drawing.Graphics.TextRenderingHint%2A> 고 <xref:System.Drawing.Graphics.TextContrast%2A> 속성입니다.  
  
 이 예제에서는 Windows Forms를 사용 하 여 사용 하도록 설계 되었습니다. 양식과 호출 코드를 붙여 합니다 `ChangeTextRenderingHintAndTextContrast` 폼을 처리 하는 경우 메서드 <xref:System.Windows.Forms.Control.Paint> 이벤트를 전달 `e` 으로 <xref:System.Windows.Forms.PaintEventArgs>합니다.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextRenderingHint">
      <MemberSignature Language="C#" Value="public System.Drawing.Text.TextRenderingHint TextRenderingHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Text.TextRenderingHint TextRenderingHint" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextRenderingHint" />
      <MemberSignature Language="VB.NET" Value="Public Property TextRenderingHint As TextRenderingHint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Text::TextRenderingHint TextRenderingHint { System::Drawing::Text::TextRenderingHint get(); void set(System::Drawing::Text::TextRenderingHint value); };" />
      <MemberSignature Language="F#" Value="member this.TextRenderingHint : System.Drawing.Text.TextRenderingHint with get, set" Usage="System.Drawing.Graphics.TextRenderingHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Text.TextRenderingHint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />와 관련된 텍스트의 렌더링 모드를 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Drawing.Text.TextRenderingHint" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 텍스트 렌더링 힌트 텍스트 앤티앨리어싱으로 렌더링 하는지 여부를 지정 합니다.  
  
> [!NOTE]
>  사용 하지 않아야를 <xref:System.Drawing.Graphics.CompositingMode%2A> 속성 값 <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> 경우는 <xref:System.Drawing.Graphics.TextRenderingHint%2A> 속성이 <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>합니다. 예외가 발생할 수 있습니다 하거나 이미지가 제대로 렌더링 되지 않을 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 합니다 <xref:System.Drawing.Graphics.TextRenderingHint%2A> 고 <xref:System.Drawing.Graphics.TextContrast%2A> 속성입니다.  
  
 이 예제에서는 Windows Forms를 사용 하 여 사용 하도록 설계 되었습니다. 양식과 호출 코드를 붙여 합니다 `ChangeTextRenderingHintAndTextContrast` 폼을 처리 하는 경우 메서드 <xref:System.Windows.Forms.Control.Paint> 이벤트를 전달 `e` 으로 <xref:System.Windows.Forms.PaintEventArgs>합니다.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Drawing.Drawing2D.Matrix with get, set" Usage="System.Drawing.Graphics.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />에 대한 기하학적 변환의 복사본을 가져오거나 설정합니다.</summary>
        <value>이 <see cref="T:System.Drawing.Drawing2D.Matrix" />에 대한 기하학적 변환을 나타내는 <see cref="T:System.Drawing.Graphics" />의 복사본입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 GDI +-세 가지 좌표 공간을 사용 하는 중: 전역, 페이지 및 디바이스입니다. 세계 좌표 좌표 특정 그래픽 월드를 모델링 하는 데 사용 되며.NET Framework의 메서드에 전달 합니다. 페이지 좌표 폼 또는 컨트롤 같은 그리기 화면을 사용 하는 좌표계를 가리킵니다. 디바이스 좌표는 화면 또는 프린터와 같은 항목이 그려지는 실제 디바이스에서 사용 된 좌표입니다. <xref:System.Drawing.Graphics.Transform%2A> 속성 세계 좌표 페이지 좌표를 매핑하는 월드 변형을 나타냅니다.  
  
 행렬을 반환 하 고는 <xref:System.Drawing.Graphics.Transform%2A> 기하학적 변형의 복사본 속성이 더 이상 필요할 때 행렬의 삭제 해야 합니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c61ff50a-eb1d-4e6c-83cd-f7e9764cfa9f">좌표계 형식</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransformPoints">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 현재 전체 및 페이지 변환을 사용하여 점의 배열을 하나의 좌표 공간에서 다른 좌표 공간으로 변환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.Point[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.Point[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::Point&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Point[] -&gt; unit" Usage="graphics.TransformPoints (destSpace, srcSpace, pts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">대상 좌표 공간을 지정하는 <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> 열거형의 멤버입니다.</param>
        <param name="srcSpace">소스 좌표 공간을 지정하는 <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> 열거형의 멤버입니다.</param>
        <param name="pts">변환할 점을 나타내는 <see cref="T:System.Drawing.Point" /> 구조체의 배열입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 현재 전체 및 페이지 변환을 사용하여 점의 배열을 하나의 좌표 공간에서 다른 좌표 공간으로 변환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   두 개의 점을 만들고 해당 사이 파란색 선을 그립니다.  
  
-   X 방향 및 y 방향의 30 40 양만큼 변환할 world 변환을 설정 합니다.  
  
-   세계 좌표에서 요소를 변환 (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>)를 페이지 좌표로 (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  
  
-   월드 id로 다시 설정합니다.  
  
-   변환 된 점 사이의 빨강 선을 그립니다.  
  
 결과 파란색 선 및 번역 된 빨간색 줄 아래입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#163)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#163)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#163)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.PointF[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.PointF[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::PointF&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.PointF[] -&gt; unit" Usage="graphics.TransformPoints (destSpace, srcSpace, pts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">대상 좌표 공간을 지정하는 <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> 열거형의 멤버입니다.</param>
        <param name="srcSpace">소스 좌표 공간을 지정하는 <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> 열거형의 멤버입니다.</param>
        <param name="pts">변환할 점을 나타내는 <see cref="T:System.Drawing.PointF" /> 구조체의 배열입니다.</param>
        <summary>이 <see cref="T:System.Drawing.Graphics" />의 현재 전체 및 페이지 변환을 사용하여 점의 배열을 하나의 좌표 공간에서 다른 좌표 공간으로 변환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   두 개의 점을 만들고 해당 사이 파란색 선을 그립니다.  
  
-   X 방향 및 y 방향의 30 40 양만큼 변환할 world 변환을 설정 합니다.  
  
-   세계 좌표에서 요소를 변환 (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>)를 페이지 좌표로 (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  
  
-   월드 id로 다시 설정 하 고 변환된 된 점 사이 빨간색 선을 그립니다.  
  
 결과 파란색 선 및 번역 된 빨간색 줄 아래입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#164)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#164)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#164)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>가로와 세로 방향으로 지정된 크기만큼 이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 변환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (int dx, int dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(int32 dx, int32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Integer, dy As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(int dx, int dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateClip : int * int -&gt; unit" Usage="graphics.TranslateClip (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dx">변환의 X좌표입니다.</param>
        <param name="dy">변환의 Y좌표입니다.</param>
        <summary>가로와 세로 방향으로 지정된 크기만큼 이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 변환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   클리핑 영역에 대 한 사각형을 만듭니다.  
  
-   사각형에 클립 영역을 설정 합니다.  
  
-   클리핑 영역을 벡터 (50, 50)로 변환 합니다.  
  
-   검은색 단색 브러시를 사용 하 여 큰 사각형을 채웁니다.  
  
 결과 변환, 작은 검은색 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#165)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#165)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#165)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateClip : single * single -&gt; unit" Usage="graphics.TranslateClip (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">변환의 X좌표입니다.</param>
        <param name="dy">변환의 Y좌표입니다.</param>
        <summary>가로와 세로 방향으로 지정된 크기만큼 이 <see cref="T:System.Drawing.Graphics" />의 클립 영역을 변환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   클리핑 영역에 대 한 사각형을 만듭니다.  
  
-   사각형에 클립 영역을 설정 합니다.  
  
-   클리핑 영역을 벡터 (50.0 f, 50.0 f)로 변환합니다.  
  
-   검은색 단색 브러시를 사용 하 여 큰 사각형을 채웁니다.  
  
 결과 변환, 작은 검은색 사각형입니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#166)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#166)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#166)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Drawing.Graphics" />의 변환 매트릭스 앞에 지정된 변환을 추가하여 좌표계의 원점을 변경합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single -&gt; unit" Usage="graphics.TranslateTransform (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">변환의 X좌표입니다.</param>
        <param name="dy">변환의 Y좌표입니다.</param>
        <summary><see cref="T:System.Drawing.Graphics" />의 변환 매트릭스 앞에 지정된 변환을 추가하여 좌표계의 원점을 변경합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 출처는 일반적으로 그리기 화면의 왼쪽 위 모퉁이.  이동 된 행렬으로 변환 매트릭스 변환 작업으로 구성 합니다 `dx` 및 `dy` 매개 변수입니다. 이 메서드를 변환 매트릭스 변환 행렬을 추가 하 여 변환 적용 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Windows Form의 월드 변형 매트릭스를 30.0F도 회전 시킵니다.  
  
-   Graphics 개체의 출처를 호출 하 여 이동 <xref:System.Drawing.Graphics.TranslateTransform%2A>를 번역에 변형 매트릭스 앞에 추가 합니다.  
  
-   파란색 펜을 사용 하 여 변환, 회전 타원을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#167)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#167)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#167)]  
  
 다음 그림에서는 이전 코드 예제를 실행 하는 출력을 보여줍니다.  
  
 ![번역 및 변형 된 타원](~/add/media/ndp-tranlatetransform.png "번역 및 변형 된 타원")  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/9fef7451-bddf-4c68-9350-400d1f1f25a3">좌표계 및 변형</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f8e18d3-d2f5-460e-a8e3-2da891c301de">관리 GDI+에서 변형 사용</related>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.TranslateTransform (dx, dy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">변환의 X좌표입니다.</param>
        <param name="dy">변환의 Y좌표입니다.</param>
        <param name="order">해당 이동이 변환 매트릭스의 앞에 추가될지 또는 뒤에 추가될지를 지정하는 <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> 열거형의 멤버입니다.</param>
        <summary>지정된 순서로 <see cref="T:System.Drawing.Graphics" />의 변환 매트릭스에 지정된 변환을 적용하여 좌표계의 원점을 변경합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이동 된 행렬으로 변환 매트릭스 변환 작업으로 구성 합니다 `dx` 및 `dy` 매개 변수입니다. 이 메서드 앞에 추가 하거나의 변형 매트릭스를 추가 합니다 <xref:System.Drawing.Graphics> 에 따라 변환 매트릭스를 `order` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제는 Windows Forms에서 사용 하도록 설계 되었으며 필요 <xref:System.Windows.Forms.PaintEventArgs> `e`의 매개 변수는 <xref:System.Windows.Forms.Control.Paint> 이벤트 처리기입니다. 이 코드에서는 다음 작업을 수행합니다.  
  
-   Windows Form의 월드 변형 매트릭스를 30.0F도 회전 시킵니다.  
  
-   그래픽 개체의 원본 호출 하 여 이동 <xref:System.Drawing.Graphics.TranslateTransform%2A>, 월드 변형 매트릭스에 번역을 추가 합니다.  
  
-   파란색 펜으로 회전 되 고 번역 된 타원을 그립니다.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#168)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#168)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#168)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/9fef7451-bddf-4c68-9350-400d1f1f25a3">좌표계 및 변형</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f8e18d3-d2f5-460e-a8e3-2da891c301de">관리 GDI+에서 변형 사용</related>
      </Docs>
    </Member>
    <Member MemberName="VisibleClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF VisibleClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF VisibleClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.VisibleClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisibleClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF VisibleClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.VisibleClipBounds : System.Drawing.RectangleF" Usage="System.Drawing.Graphics.VisibleClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Drawing.Graphics" />의 보이는 클립 영역에 대한 경계 사각형을 가져옵니다.</summary>
        <value>이 <see cref="T:System.Drawing.RectangleF" />의 보이는 클립 영역에 대한 경계 사각형을 나타내는 <see cref="T:System.Drawing.Graphics" /> 구조체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정 하는 결과 사각형의 단위는 <xref:System.Drawing.Graphics.PageUnit%2A> 속성입니다. 기본 단위는 픽셀입니다. <xref:System.Drawing.Graphics> 일반적으로 컨트롤과 연결 된 해당 컨트롤의 클라이언트 영역을 기준으로 사각형의 시작 됩니다.  
  
 표시 된 클립 영역이이의 클립 영역의 교집합입니다 <xref:System.Drawing.Graphics> 및 창의 클리핑 영역입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>