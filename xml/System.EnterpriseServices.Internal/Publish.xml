<Type Name="Publish" FullName="System.EnterpriseServices.Internal.Publish">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d276f41fff81d51e4027bc462c279a6f405e43e3" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55403896" /></Metadata><TypeSignature Language="C#" Value="public class Publish : System.EnterpriseServices.Internal.IComSoapPublisher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Publish extends System.Object implements class System.EnterpriseServices.Internal.IComSoapPublisher" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.Internal.Publish" />
  <TypeSignature Language="VB.NET" Value="Public Class Publish&#xA;Implements IComSoapPublisher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Publish : System::EnterpriseServices::Internal::IComSoapPublisher" />
  <TypeSignature Language="F#" Value="type Publish = class&#xA;    interface IComSoapPublisher" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.EnterpriseServices.Internal.IComSoapPublisher</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("d8013eef-730b-45e2-ba24-874b7242c425")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>SOAP 사용 가능 COM+ 애플리케이션에 대한 COM 인터페이스를 게시합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.Internal.Publish> 되는.NET Framework에서 내부적으로 사용 합니다. 코드에서 직접 사용할 필요가 없습니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Publish ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Publish();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.EnterpriseServices.Internal.Publish" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMailBox">
      <MemberSignature Language="C#" Value="public void CreateMailBox (string RootMailServer, string MailBox, out string SmtpName, out string Domain, out string PhysicalPath, out string Error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateMailBox(string RootMailServer, string MailBox, [out] string&amp; SmtpName, [out] string&amp; Domain, [out] string&amp; PhysicalPath, [out] string&amp; Error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.CreateMailBox(System.String,System.String,System.String@,System.String@,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateMailBox (RootMailServer As String, MailBox As String, ByRef SmtpName As String, ByRef Domain As String, ByRef PhysicalPath As String, ByRef Error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateMailBox(System::String ^ RootMailServer, System::String ^ MailBox, [Runtime::InteropServices::Out] System::String ^ % SmtpName, [Runtime::InteropServices::Out] System::String ^ % Domain, [Runtime::InteropServices::Out] System::String ^ % PhysicalPath, [Runtime::InteropServices::Out] System::String ^ % Error);" />
      <MemberSignature Language="F#" Value="abstract member CreateMailBox : string * string *  *  *  *  -&gt; unit&#xA;override this.CreateMailBox : string * string *  *  *  *  -&gt; unit" Usage="publish.CreateMailBox (RootMailServer, MailBox, SmtpName, Domain, PhysicalPath, Error)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.CreateMailBox(System.String,System.String,System.String@,System.String@,System.String@,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RootMailServer" Type="System.String" />
        <Parameter Name="MailBox" Type="System.String" />
        <Parameter Name="SmtpName" Type="System.String" RefType="out" />
        <Parameter Name="Domain" Type="System.String" RefType="out" />
        <Parameter Name="PhysicalPath" Type="System.String" RefType="out" />
        <Parameter Name="Error" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="RootMailServer">루트 메일 서버의 URL입니다.</param>
        <param name="MailBox">만들 사서함입니다.</param>
        <param name="SmtpName">이 메서드가 반환될 때 이 매개 변수에는 사서함이 들어 있는 SMTP(Simple Mail Transfer Protocol) 서버의 이름이 포함됩니다.</param>
        <param name="Domain">이 메서드가 반환될 때 이 매개 변수에는 SMTP 서버의 도메인이 포함됩니다.</param>
        <param name="PhysicalPath">이 메서드가 반환될 때 이 매개 변수에는 사서함에 대한 파일 시스템 경로가 포함됩니다.</param>
        <param name="Error">문제가 발생하면 이 메서드가 반환될 때 이 매개 변수에 오류 메시지가 포함됩니다.</param>
        <summary>SOAP 사용 가능 COM+ 애플리케이션 사서함을 지정된 URL에 만듭니다. 완전히 구현되지 않았습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 완전히 구현 되지 않은; 사서함을 만들지 않습니다. "COM + SOAP 서비스 SMTP 게시 지원 되지 않습니다." 오류 메시지를 반환 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">호출 체인에 있는 호출자에게 비관리 코드에 액세스할 수 있는 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드에 액세스할 수 있습니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateVirtualRoot">
      <MemberSignature Language="C#" Value="public void CreateVirtualRoot (string Operation, string FullUrl, out string BaseUrl, out string VirtualRoot, out string PhysicalPath, out string Error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateVirtualRoot(string Operation, string FullUrl, [out] string&amp; BaseUrl, [out] string&amp; VirtualRoot, [out] string&amp; PhysicalPath, [out] string&amp; Error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateVirtualRoot (Operation As String, FullUrl As String, ByRef BaseUrl As String, ByRef VirtualRoot As String, ByRef PhysicalPath As String, ByRef Error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateVirtualRoot(System::String ^ Operation, System::String ^ FullUrl, [Runtime::InteropServices::Out] System::String ^ % BaseUrl, [Runtime::InteropServices::Out] System::String ^ % VirtualRoot, [Runtime::InteropServices::Out] System::String ^ % PhysicalPath, [Runtime::InteropServices::Out] System::String ^ % Error);" />
      <MemberSignature Language="F#" Value="abstract member CreateVirtualRoot : string * string *  *  *  *  -&gt; unit&#xA;override this.CreateVirtualRoot : string * string *  *  *  *  -&gt; unit" Usage="publish.CreateVirtualRoot (Operation, FullUrl, BaseUrl, VirtualRoot, PhysicalPath, Error)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.CreateVirtualRoot(System.String,System.String,System.String@,System.String@,System.String@,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Operation" Type="System.String" />
        <Parameter Name="FullUrl" Type="System.String" />
        <Parameter Name="BaseUrl" Type="System.String" RefType="out" />
        <Parameter Name="VirtualRoot" Type="System.String" RefType="out" />
        <Parameter Name="PhysicalPath" Type="System.String" RefType="out" />
        <Parameter Name="Error" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="Operation">수행할 작업입니다.</param>
        <param name="FullUrl">가상 루트에 대한 전체 URL 주소입니다.</param>
        <param name="BaseUrl">이 메서드가 반환될 때 이 매개 변수에는 기본 URL 주소가 포함됩니다.</param>
        <param name="VirtualRoot">이 메서드가 반환될 때 이 매개 변수에 가상 루트의 이름이 포함됩니다.</param>
        <param name="PhysicalPath">이 메서드가 반환될 때 이 매개 변수에는 가상 루트의 파일 경로가 포함됩니다.</param>
        <param name="Error">문제가 발생하면 이 메서드가 반환될 때 이 매개 변수에 오류 메시지가 포함됩니다.</param>
        <summary>SOAP 사용 가능 COM+ 애플리케이션 가상 루트를 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 것이 좋습니다 <xref:System.EnterpriseServices.Internal.SoapServerVRoot.CreateVirtualRootEx%2A> 대신 사용할 <xref:System.EnterpriseServices.Internal.Publish.CreateVirtualRoot%2A>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">호출 체인에 있는 호출자에게 비관리 코드에 액세스할 수 있는 권한이 없는 경우  
  
또는 
호출자에게 DNS 정보에 액세스할 권한이 없는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="FullUrl" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">로컬 호스트 이름을 확인할 때 오류가 발생한 경우</exception>
        <exception cref="T:System.UriFormatException"><paramref name="FullUrl" />가 비어 있는 경우  
  
또는 
<paramref name="FullUrl" />에 지정한 스키마가 잘못된 경우  
  
또는 
 <paramref name="FullUrl" />에 세 개 이상의 연속된 슬래시가 포함된 경우  
  
또는 
<paramref name="FullUrl" />에 지정한 암호가 잘못된 경우  
  
또는 
<paramref name="FullUrl" />에 지정한 호스트 이름이 잘못된 경우  
  
또는 
<paramref name="FullUrl" />에 지정한 파일 이름이 잘못된 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">원격 인프라의 구성 합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DeleteMailBox">
      <MemberSignature Language="C#" Value="public void DeleteMailBox (string RootMailServer, string MailBox, out string Error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteMailBox(string RootMailServer, string MailBox, [out] string&amp; Error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.DeleteMailBox(System.String,System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteMailBox (RootMailServer As String, MailBox As String, ByRef Error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DeleteMailBox(System::String ^ RootMailServer, System::String ^ MailBox, [Runtime::InteropServices::Out] System::String ^ % Error);" />
      <MemberSignature Language="F#" Value="abstract member DeleteMailBox : string * string *  -&gt; unit&#xA;override this.DeleteMailBox : string * string *  -&gt; unit" Usage="publish.DeleteMailBox (RootMailServer, MailBox, Error)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.DeleteMailBox(System.String,System.String,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RootMailServer" Type="System.String" />
        <Parameter Name="MailBox" Type="System.String" />
        <Parameter Name="Error" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="RootMailServer">루트 메일 서버의 URL입니다.</param>
        <param name="MailBox">삭제할 사서함입니다.</param>
        <param name="Error">문제가 발생하면 이 메서드가 반환될 때 이 매개 변수에 오류 메시지가 포함됩니다.</param>
        <summary>SOAP 사용 가능 COM+ 애플리케이션 사서함을 지정된 URL에서 삭제합니다. 완전히 구현되지 않았습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 완전히 구현, 사서함이 삭제 되지 않습니다. "COM + SOAP 서비스 SMTP 게시 지원 되지 않습니다." 오류 메시지를 반환 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">호출 체인에 있는 호출자에게 비관리 코드에 액세스할 수 있는 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드에 액세스할 수 있습니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DeleteVirtualRoot">
      <MemberSignature Language="C#" Value="public void DeleteVirtualRoot (string RootWebServer, string FullUrl, out string Error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteVirtualRoot(string RootWebServer, string FullUrl, [out] string&amp; Error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot(System.String,System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteVirtualRoot (RootWebServer As String, FullUrl As String, ByRef Error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DeleteVirtualRoot(System::String ^ RootWebServer, System::String ^ FullUrl, [Runtime::InteropServices::Out] System::String ^ % Error);" />
      <MemberSignature Language="F#" Value="abstract member DeleteVirtualRoot : string * string *  -&gt; unit&#xA;override this.DeleteVirtualRoot : string * string *  -&gt; unit" Usage="publish.DeleteVirtualRoot (RootWebServer, FullUrl, Error)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.DeleteVirtualRoot(System.String,System.String,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RootWebServer" Type="System.String" />
        <Parameter Name="FullUrl" Type="System.String" />
        <Parameter Name="Error" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="RootWebServer">루트 웹 서버입니다.</param>
        <param name="FullUrl">가상 루트에 대한 전체 URL 주소입니다.</param>
        <param name="Error">문제가 발생하면 이 메서드가 반환될 때 이 매개 변수에 오류 메시지가 포함됩니다.</param>
        <summary>SOAP 사용 가능 COM+ 애플리케이션 가상 루트를 삭제합니다. 완전히 구현되지 않았습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기능 <xref:System.EnterpriseServices.Internal.Publish.DeleteVirtualRoot%2A> 아직 지원 되지 않습니다.  
  
> [!CAUTION]
>  현재 메서드는 오류 없이 있지만 가상 루트는 삭제 되지 않습니다.  
  
 권장 되는 메서드를 됩니다 기능 사용 가능 해지면 <xref:System.EnterpriseServices.Internal.SoapServerVRoot.DeleteVirtualRootEx%2A>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">호출 체인에 있는 호출자에게 비관리 코드에 액세스할 수 있는 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드에 액세스할 수 있습니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GacInstall">
      <MemberSignature Language="C#" Value="public void GacInstall (string AssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GacInstall(string AssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.GacInstall(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GacInstall (AssemblyPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GacInstall(System::String ^ AssemblyPath);" />
      <MemberSignature Language="F#" Value="abstract member GacInstall : string -&gt; unit&#xA;override this.GacInstall : string -&gt; unit" Usage="publish.GacInstall AssemblyPath" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.GacInstall(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AssemblyPath">어셈블리에 대한 파일 시스템 경로입니다.</param>
        <summary>전역 어셈블리 캐시에 어셈블리를 설치합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">호출 체인에 있는 호출자에게 비관리 코드에 액세스할 수 있는 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드에 액세스할 수 있습니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GacRemove">
      <MemberSignature Language="C#" Value="public void GacRemove (string AssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GacRemove(string AssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.GacRemove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GacRemove (AssemblyPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GacRemove(System::String ^ AssemblyPath);" />
      <MemberSignature Language="F#" Value="abstract member GacRemove : string -&gt; unit&#xA;override this.GacRemove : string -&gt; unit" Usage="publish.GacRemove AssemblyPath" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.GacRemove(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AssemblyPath">어셈블리에 대한 파일 시스템 경로입니다.</param>
        <summary>전역 어셈블리 캐시에서 어셈블리를 제거합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">호출 체인에 있는 호출자에게 비관리 코드에 액세스할 수 있는 권한이 없는 경우  
  
또는 
호출자에게 경로 검색 권한이 없습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="AssemblyPath" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="AssemblyPath" />가 비어 있는 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="AssemblyPath" />가 없는 경우</exception>
        <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
        <exception cref="T:System.BadImageFormatException"><paramref name="AssemblyPath" />는 유효한 어셈블리가 아닙니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드에 액세스할 수 있습니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblyNameForCache">
      <MemberSignature Language="C#" Value="public void GetAssemblyNameForCache (string TypeLibPath, out string CachePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetAssemblyNameForCache(string TypeLibPath, [out] string&amp; CachePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.GetAssemblyNameForCache(System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetAssemblyNameForCache (TypeLibPath As String, ByRef CachePath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetAssemblyNameForCache(System::String ^ TypeLibPath, [Runtime::InteropServices::Out] System::String ^ % CachePath);" />
      <MemberSignature Language="F#" Value="abstract member GetAssemblyNameForCache : string *  -&gt; unit&#xA;override this.GetAssemblyNameForCache : string *  -&gt; unit" Usage="publish.GetAssemblyNameForCache (TypeLibPath, CachePath)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.GetAssemblyNameForCache(System.String,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TypeLibPath" Type="System.String" />
        <Parameter Name="CachePath" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="TypeLibPath">typelib가 포함된 파일의 경로입니다.</param>
        <param name="CachePath">이 메서드가 반환될 때 이 매개 변수에는 SoapCache 디렉터리의 이름이 포함됩니다.</param>
        <summary>SoapCache 디렉터리에서 강력한 이름으로 서명하여 생성된 어셈블리에 대한 전체 경로를 반환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 관리 되지 않는 COM + 구성 요소는 SOAP 끝점으로.NET remoting을 통해 게시할 수에 대 한 프록시를.NET Framework로 관리 되지 않는 구성 요소를 사용할 수 있도록 하기 위해 생성 해야 합니다. 프로그래밍 방식으로 형식 라이브러리 가져오기 (Tlbimp.exe)와 같은 단계를 수행 하 여 이렇게는 [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)] 프록시 메타 데이터 어셈블리에 관리 되지 않는 COM + 형식 라이브러리를 변환 하는 데 사용 되는 도구입니다. 그러나 성공 하려면 SOAP 통해 클라이언트 활성화에 대 한 클라이언트 및 서버 컴퓨터 같은 강력한 이름의 서명 된 메타 데이터 프록시를 공유 해야 합니다. 따라서 관리 되는 프록시 어셈블리를 비관리 COM + 구성 요소에 대해 생성 될 때 강력한 이름 키도 생성 되어 프록시 어셈블리를 서명 하는 데 사용 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="TypeLibPath" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
        <exception cref="T:System.ArgumentException">파일 이름이 비어 있거나, 공백만 포함하거나 잘못된 문자를 포함합니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException"><paramref name="TypeLibPath" />에 대한 액세스가 거부되었습니다.</exception>
        <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="TypeLibPath" />의 문자열 중간에 콜론(:)이 있습니다.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 읽기. 연결 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetClientPhysicalPath">
      <MemberSignature Language="C#" Value="public static string GetClientPhysicalPath (bool CreateDir);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetClientPhysicalPath(bool CreateDir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.GetClientPhysicalPath(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetClientPhysicalPath (CreateDir As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetClientPhysicalPath(bool CreateDir);" />
      <MemberSignature Language="F#" Value="static member GetClientPhysicalPath : bool -&gt; string" Usage="System.EnterpriseServices.Internal.Publish.GetClientPhysicalPath CreateDir" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CreateDir" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="CreateDir">디렉터리를 만들려면 <see langword="true" />로 설정하고, 경로는 반환하지만 디렉터리를 만들지 않으려면 <see langword="false" />로 설정합니다.</param>
        <summary>클라이언트 구성 파일 저장용 디렉터리 경로를 반환합니다.</summary>
        <returns>구성 파일을 포함하는 디렉터리 경로입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 디렉터리를 만들고 "\com\SOAPAssembly\\" 시스템 디렉터리입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeNameFromProgId">
      <MemberSignature Language="C#" Value="public string GetTypeNameFromProgId (string AssemblyPath, string ProgId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetTypeNameFromProgId(string AssemblyPath, string ProgId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.GetTypeNameFromProgId(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeNameFromProgId (AssemblyPath As String, ProgId As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetTypeNameFromProgId(System::String ^ AssemblyPath, System::String ^ ProgId);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeNameFromProgId : string * string -&gt; string&#xA;override this.GetTypeNameFromProgId : string * string -&gt; string" Usage="publish.GetTypeNameFromProgId (AssemblyPath, ProgId)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.GetTypeNameFromProgId(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AssemblyPath" Type="System.String" />
        <Parameter Name="ProgId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AssemblyPath">어셈블리에 대한 파일 시스템 경로입니다.</param>
        <param name="ProgId">클래스의 프로그래밍 식별자입니다.</param>
        <summary>어셈블리 전체를 반영하고 ProgID와 일치하는 형식 이름을 반환합니다.</summary>
        <returns>ProgID와 일치하는 형식 이름입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">호출 체인에 있는 호출자에게 비관리 코드에 액세스할 수 있는 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드에 액세스할 수 있습니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ParseUrl">
      <MemberSignature Language="C#" Value="public static void ParseUrl (string FullUrl, out string BaseUrl, out string VirtualRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ParseUrl(string FullUrl, [out] string&amp; BaseUrl, [out] string&amp; VirtualRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.ParseUrl(System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ParseUrl (FullUrl As String, ByRef BaseUrl As String, ByRef VirtualRoot As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ParseUrl(System::String ^ FullUrl, [Runtime::InteropServices::Out] System::String ^ % BaseUrl, [Runtime::InteropServices::Out] System::String ^ % VirtualRoot);" />
      <MemberSignature Language="F#" Value="static member ParseUrl : string *  *  -&gt; unit" Usage="System.EnterpriseServices.Internal.Publish.ParseUrl (FullUrl, BaseUrl, VirtualRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FullUrl" Type="System.String" />
        <Parameter Name="BaseUrl" Type="System.String" RefType="out" />
        <Parameter Name="VirtualRoot" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="FullUrl">가상 루트에 대한 전체 URL 주소입니다.</param>
        <param name="BaseUrl">이 메서드가 반환될 때 이 매개 변수에는 기본 URL 주소가 포함됩니다.</param>
        <param name="VirtualRoot">이 메서드가 반환될 때 이 매개 변수에 가상 루트의 이름이 포함됩니다.</param>
        <summary>URL을 구문 분석하고 기본 URL 및 가상 루트 부분을 반환합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="FullUrl" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">로컬 호스트 이름을 확인할 때 오류가 발생한 경우</exception>
        <exception cref="T:System.Security.SecurityException">호출자에게 DNS 정보에 액세스할 권한이 없는 경우</exception>
        <exception cref="T:System.UriFormatException"><paramref name="FullUrl" />가 비어 있는 경우  
  
또는 
<paramref name="FullUrl" />에 지정한 스키마가 잘못된 경우  
  
또는 
 <paramref name="FullUrl" />에 너무 많은 슬래시가 들어 있습니다.  
  
또는 
<paramref name="FullUrl" />에 지정한 암호가 잘못된 경우  
  
또는 
<paramref name="FullUrl" />에 지정한 호스트 이름이 잘못된 경우  
  
또는 
<paramref name="FullUrl" />에 지정한 파일 이름이 잘못된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ProcessClientTlb">
      <MemberSignature Language="C#" Value="public void ProcessClientTlb (string ProgId, string SrcTlbPath, string PhysicalPath, string VRoot, string BaseUrl, string Mode, string Transport, out string AssemblyName, out string TypeName, out string Error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessClientTlb(string ProgId, string SrcTlbPath, string PhysicalPath, string VRoot, string BaseUrl, string Mode, string Transport, [out] string&amp; AssemblyName, [out] string&amp; TypeName, [out] string&amp; Error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.ProcessClientTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessClientTlb (ProgId As String, SrcTlbPath As String, PhysicalPath As String, VRoot As String, BaseUrl As String, Mode As String, Transport As String, ByRef AssemblyName As String, ByRef TypeName As String, ByRef Error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessClientTlb(System::String ^ ProgId, System::String ^ SrcTlbPath, System::String ^ PhysicalPath, System::String ^ VRoot, System::String ^ BaseUrl, System::String ^ Mode, System::String ^ Transport, [Runtime::InteropServices::Out] System::String ^ % AssemblyName, [Runtime::InteropServices::Out] System::String ^ % TypeName, [Runtime::InteropServices::Out] System::String ^ % Error);" />
      <MemberSignature Language="F#" Value="abstract member ProcessClientTlb : string * string * string * string * string * string * string *  *  *  -&gt; unit&#xA;override this.ProcessClientTlb : string * string * string * string * string * string * string *  *  *  -&gt; unit" Usage="publish.ProcessClientTlb (ProgId, SrcTlbPath, PhysicalPath, VRoot, BaseUrl, Mode, Transport, AssemblyName, TypeName, Error)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.ProcessClientTlb(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProgId" Type="System.String" />
        <Parameter Name="SrcTlbPath" Type="System.String" />
        <Parameter Name="PhysicalPath" Type="System.String" />
        <Parameter Name="VRoot" Type="System.String" />
        <Parameter Name="BaseUrl" Type="System.String" />
        <Parameter Name="Mode" Type="System.String" />
        <Parameter Name="Transport" Type="System.String" />
        <Parameter Name="AssemblyName" Type="System.String" RefType="out" />
        <Parameter Name="TypeName" Type="System.String" RefType="out" />
        <Parameter Name="Error" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ProgId">클래스의 프로그래밍 식별자입니다.</param>
        <param name="SrcTlbPath">typelib가 포함된 파일의 경로입니다.</param>
        <param name="PhysicalPath">웹 애플리케이션 디렉터리입니다.</param>
        <param name="VRoot">가상 루트의 이름입니다.</param>
        <param name="BaseUrl">가상 루트가 들어 있는 기본 URL입니다.</param>
        <param name="Mode">활성화 모드입니다.</param>
        <param name="Transport">사용되지 않습니다. 이 매개 변수에 <see langword="null" />을 지정합니다.</param>
        <param name="AssemblyName">이 메서드가 반환될 때 이 매개 변수에는 어셈블리의 표시 이름이 포함됩니다.</param>
        <param name="TypeName">이 메서드가 반환될 때 이 매개 변수에는 어셈블리의 정규화된 형식 이름이 포함됩니다.</param>
        <param name="Error">문제가 발생하면 이 메서드가 반환될 때 이 매개 변수에 오류 메시지가 포함됩니다.</param>
        <summary>클라이언트에 구성 파일을 만들어 클라이언트 형식 라이브러리를 처리합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 원격 구성 파일을 생성 하는 클라이언트 프록시 가져오기에 사용 됩니다.  
  
 경우는 `Mode` 매개 변수는 "wellknownobject" 또는 빈 문자열 (""), 잘 알려진 개체 것으로 간주 됩니다. 그렇지 않은 경우 클라이언트 활성화가 사용 됩니다.  
  
 것이 좋습니다 <xref:System.EnterpriseServices.Internal.SoapClientImport.ProcessClientTlbEx%2A> 대신 사용할 <xref:System.EnterpriseServices.Internal.Publish.ProcessClientTlb%2A>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">호출 체인에 있는 호출자에게 비관리 코드에 액세스할 수 있는 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드에 액세스할 수 있습니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessServerTlb">
      <MemberSignature Language="C#" Value="public void ProcessServerTlb (string ProgId, string SrcTlbPath, string PhysicalPath, string Operation, out string strAssemblyName, out string TypeName, out string Error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessServerTlb(string ProgId, string SrcTlbPath, string PhysicalPath, string Operation, [out] string&amp; strAssemblyName, [out] string&amp; TypeName, [out] string&amp; Error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.ProcessServerTlb(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessServerTlb (ProgId As String, SrcTlbPath As String, PhysicalPath As String, Operation As String, ByRef strAssemblyName As String, ByRef TypeName As String, ByRef Error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessServerTlb(System::String ^ ProgId, System::String ^ SrcTlbPath, System::String ^ PhysicalPath, System::String ^ Operation, [Runtime::InteropServices::Out] System::String ^ % strAssemblyName, [Runtime::InteropServices::Out] System::String ^ % TypeName, [Runtime::InteropServices::Out] System::String ^ % Error);" />
      <MemberSignature Language="F#" Value="abstract member ProcessServerTlb : string * string * string * string *  *  *  -&gt; unit&#xA;override this.ProcessServerTlb : string * string * string * string *  *  *  -&gt; unit" Usage="publish.ProcessServerTlb (ProgId, SrcTlbPath, PhysicalPath, Operation, strAssemblyName, TypeName, Error)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.ProcessServerTlb(System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ProgId" Type="System.String" />
        <Parameter Name="SrcTlbPath" Type="System.String" />
        <Parameter Name="PhysicalPath" Type="System.String" />
        <Parameter Name="Operation" Type="System.String" />
        <Parameter Name="strAssemblyName" Type="System.String" RefType="out" />
        <Parameter Name="TypeName" Type="System.String" RefType="out" />
        <Parameter Name="Error" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ProgId">클래스의 프로그래밍 식별자입니다.</param>
        <param name="SrcTlbPath">형식 라이브러리가 포함된 파일의 경로입니다.</param>
        <param name="PhysicalPath">웹 애플리케이션 디렉터리입니다.</param>
        <param name="Operation">수행할 작업입니다.</param>
        <param name="strAssemblyName">이 메서드가 반환될 때 이 매개 변수에는 어셈블리의 표시 이름이 포함됩니다.</param>
        <param name="TypeName">이 메서드가 반환될 때 이 매개 변수에는 어셈블리의 정규화된 형식 이름이 포함됩니다.</param>
        <param name="Error">문제가 발생하면 이 메서드가 반환될 때 이 매개 변수에 오류 메시지가 포함됩니다.</param>
        <summary>Web.config 및 Default.disco 파일에서 구성 요소 항목을 추가하거나 삭제하여 서버 형식 라이브러리를 처리합니다. 필요한 경우 프록시를 생성합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.Internal.Publish.ProcessServerTlb%2A> 검색 파일 및 typelib, 구성 요소에 대 한 web.config 파일에 항목을 추가 하 고 생성 하거나 프록시를 관리 되지 않는 구성 요소에 대 한 bin 디렉터리에 복사 합니다. 경우 `Operation` equals "삭제" 후 구성 요소 항목을 Web.config 및 Default.disco 파일에서 제거 됩니다.  
  
 것이 좋습니다 <xref:System.EnterpriseServices.Internal.SoapServerTlb.AddServerTlb%2A> 하 고 <xref:System.EnterpriseServices.Internal.SoapServerTlb.DeleteServerTlb%2A> 대신 사용할 <xref:System.EnterpriseServices.Internal.Publish.ProcessServerTlb%2A>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">호출 체인에 있는 호출자에게 비관리 코드에 액세스할 수 있는 권한이 없는 경우</exception>
        <exception cref="T:System.EnterpriseServices.ServicedComponentException"><paramref name="SrcTlbPath" /> 매개 변수가 scrobj.dll을 참조하기 때문에 스크립트 구성 요소의 SOAP 게시가 지원되지 않는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드에 액세스할 수 있습니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="RegisterAssembly">
      <MemberSignature Language="C#" Value="public void RegisterAssembly (string AssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterAssembly(string AssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.RegisterAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterAssembly (AssemblyPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterAssembly(System::String ^ AssemblyPath);" />
      <MemberSignature Language="F#" Value="abstract member RegisterAssembly : string -&gt; unit&#xA;override this.RegisterAssembly : string -&gt; unit" Usage="publish.RegisterAssembly AssemblyPath" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.RegisterAssembly(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AssemblyPath">어셈블리에 대한 파일 시스템 경로입니다.</param>
        <summary>COM interop에 어셈블리를 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.Internal.Publish.RegisterAssembly%2A> 어셈블리의 생성 가능한 클래스를 등록 하는 어셈블리 등록 도구 (Regasm.exe)을 사용 합니다. 자세한 내용은 [Regasm.exe (어셈블리 등록 도구)](~/docs/framework/tools/regasm-exe-assembly-registration-tool.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.EnterpriseServices.RegistrationException">입력 어셈블리에 강력한 이름이 없는 경우</exception>
        <exception cref="T:System.Security.SecurityException">호출 체인에 있는 호출자에게 비관리 코드에 액세스할 수 있는 권한이 없는 경우  
  
또는 
"file://"로 시작하지 않는 Codebase가 필수 <see cref="T:System.Net.WebPermission" /> 없이 지정되었습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="AssemblyPath" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="AssemblyPath" />를 찾을 수 없거나 파일 확장명이 지정되지 않은 경우</exception>
        <exception cref="T:System.BadImageFormatException"><paramref name="AssemblyPath" />는 유효한 어셈블리가 아닙니다.</exception>
        <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 개의 증거로 두 번 로드되었거나 어셈블리 이름이 시스템 정의 최대 길이를 초과합니다.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />로 표시된 메서드가 <see langword="static" />이 아닌 경우  
  
또는 
지정된 계층 구조 수준에 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />로 표시된 메서드가 두 개 이상 있는 경우  
  
또는 
<see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />로 표시된 메서드의 시그니처가 잘못된 경우</exception>
        <permission cref="T:System.Security.Permissions.RegistryPermission">레지스트리에 액세스 하는 기능입니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">현재 디렉터리를 결정 합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.AllAccess" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">"file://"로 시작 하는 URI를 읽는 합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <permission cref="T:System.Net.WebPermission">"file://"로 시작 하지 않는 URI를 읽는 합니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="UnRegisterAssembly">
      <MemberSignature Language="C#" Value="public void UnRegisterAssembly (string AssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnRegisterAssembly(string AssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.Publish.UnRegisterAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnRegisterAssembly (AssemblyPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void UnRegisterAssembly(System::String ^ AssemblyPath);" />
      <MemberSignature Language="F#" Value="abstract member UnRegisterAssembly : string -&gt; unit&#xA;override this.UnRegisterAssembly : string -&gt; unit" Usage="publish.UnRegisterAssembly AssemblyPath" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IComSoapPublisher.UnRegisterAssembly(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AssemblyPath">어셈블리에 대한 파일 시스템 경로입니다.</param>
        <summary>COM interop 어셈블리의 등록을 취소합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.Internal.Publish.UnRegisterAssembly%2A> 어셈블리의 생성 가능한 클래스의 등록을 취소 하려면 Regasm.exe를 사용 합니다. 자세한 내용은 [Regasm.exe (어셈블리 등록 도구)](~/docs/framework/tools/regasm-exe-assembly-registration-tool.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">호출 체인에 있는 호출자에게 비관리 코드에 액세스할 수 있는 권한이 없는 경우  
  
또는 
"file://"로 시작하지 않는 Codebase가 필수 <see cref="T:System.Net.WebPermission" /> 없이 지정되었습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="AssemblyPath" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException"><paramref name="AssemblyPath" />를 찾을 수 없거나 파일 확장명이 지정되지 않은 경우</exception>
        <exception cref="T:System.BadImageFormatException"><paramref name="AssemblyPath" />는 유효한 어셈블리가 아닙니다.</exception>
        <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 개의 증거로 두 번 로드되었거나 어셈블리 이름이 시스템 정의 최대 길이를 초과합니다.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />로 표시된 메서드가 <see langword="static" />이 아닌 경우  
  
또는 
지정된 계층 구조 수준에 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />로 표시된 메서드가 두 개 이상 있는 경우  
  
또는 
<see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />로 표시된 메서드의 시그니처가 잘못된 경우</exception>
        <permission cref="T:System.Security.Permissions.RegistryPermission">레지스트리에 액세스 하는 기능입니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">현재 디렉터리를 결정 합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.AllAccess" /></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">"file://"로 시작 하는 URI를 읽는 합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <permission cref="T:System.Net.WebPermission">"file://"로 시작 하지 않는 URI를 읽는 합니다.</permission>
      </Docs>
    </Member>
  </Members>
</Type>