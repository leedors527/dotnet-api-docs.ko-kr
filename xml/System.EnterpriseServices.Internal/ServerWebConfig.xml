<Type Name="ServerWebConfig" FullName="System.EnterpriseServices.Internal.ServerWebConfig">
  <Metadata><Meta Name="ms.openlocfilehash" Value="53f364833a60c642225544ca5e25c1b803b80a34" /><Meta Name="ms.sourcegitcommit" Value="84c54c0c7d64827a5637d1f05e74e1f0598606a1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/27/2018" /><Meta Name="ms.locfileid" Value="42949026" /></Metadata><TypeSignature Language="C#" Value="public class ServerWebConfig : System.EnterpriseServices.Internal.IServerWebConfig" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServerWebConfig extends System.Object implements class System.EnterpriseServices.Internal.IServerWebConfig" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.Internal.ServerWebConfig" />
  <TypeSignature Language="VB.NET" Value="Public Class ServerWebConfig&#xA;Implements IServerWebConfig" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServerWebConfig : System::EnterpriseServices::Internal::IServerWebConfig" />
  <TypeSignature Language="F#" Value="type ServerWebConfig = class&#xA;    interface IServerWebConfig" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.EnterpriseServices.Internal.IServerWebConfig</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>SOAP 사용 가능 COM+ 애플리케이션에 대한 Web.config 파일을 만듭니다. 또한 애플리케이션에 게시되는 COM 인터페이스에 해당하는 파일에 구성 요소 항목을 추가할 수 있습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.Internal.ServerWebConfig> 클래스에서 인터넷 정보 서비스 (IIS) 6.0 SOAP 사용 가능 COM + 응용 프로그램에 대 한 가상 루트를 만드는 동안 Web.config 파일을 만드는 데 사용 됩니다. 또한 애플리케이션에 추가할 구성 요소 인터페이스에 대 한 Web.config 파일에 XML 요소를 추가할 수 있습니다.  
  
 <xref:System.EnterpriseServices.Internal.ServerWebConfig> 되는.NET Framework에서 내부적으로 사용 합니다. 코드에서 직접 사용할 필요가 없습니다.  
  
 ]]></format>
    </remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServerWebConfig ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.ServerWebConfig.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServerWebConfig();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.EnterpriseServices.Internal.ServerWebConfig" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="AddElement">
      <MemberSignature Language="C#" Value="public void AddElement (string FilePath, string AssemblyName, string TypeName, string ProgId, string WkoMode, out string Error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddElement(string FilePath, string AssemblyName, string TypeName, string ProgId, string WkoMode, [out] string&amp; Error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.ServerWebConfig.AddElement(System.String,System.String,System.String,System.String,System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddElement (FilePath As String, AssemblyName As String, TypeName As String, ProgId As String, WkoMode As String, ByRef Error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddElement(System::String ^ FilePath, System::String ^ AssemblyName, System::String ^ TypeName, System::String ^ ProgId, System::String ^ WkoMode, [Runtime::InteropServices::Out] System::String ^ % Error);" />
      <MemberSignature Language="F#" Value="abstract member AddElement : string * string * string * string * string *  -&gt; unit&#xA;override this.AddElement : string * string * string * string * string *  -&gt; unit" Usage="serverWebConfig.AddElement (FilePath, AssemblyName, TypeName, ProgId, WkoMode, Error)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IServerWebConfig.AddElement(System.String,System.String,System.String,System.String,System.String,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FilePath" Type="System.String" />
        <Parameter Name="AssemblyName" Type="System.String" />
        <Parameter Name="TypeName" Type="System.String" />
        <Parameter Name="ProgId" Type="System.String" />
        <Parameter Name="WkoMode" Type="System.String" />
        <Parameter Name="Error" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="FilePath">기존 Web.config 파일의 경로입니다.</param>
        <param name="AssemblyName">추가되는 형식이 들어 있는 어셈블리의 이름입니다.</param>
        <param name="TypeName">추가되는 형식의 이름입니다.</param>
        <param name="ProgId">추가되는 형식의 프로그래밍 식별자입니다.</param>
        <param name="WkoMode"><see cref="T:System.Runtime.Remoting.WellKnownObjectMode" /> 열거형의 멤버 이름에 해당하는 문자열 상수로서 잘 알려진 개체가 활성화되는 방법을 나타냅니다.</param>
        <param name="Error">오류 메시지를 쓸 수 있는 문자열입니다.</param>
        <summary>XML 요소를 SOAP 사용 가능 COM+ 애플리케이션에 게시되는 COM 인터페이스에 해당하는 Web.config 파일에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정된 된 형식에 대 한 합니다 <xref:System.EnterpriseServices.Internal.ServerWebConfig.AddElement%2A> Web.config 파일에 추가 하는 메서드를 `<wellknown>` 및 `<activated>` 요소의 자식으로는 `<service>` 다음 XPath 사용 하 여 요소:  
  
 `/configuration/system.runtime.remoting/application/service`  
  
 합니다 `AssemblyName`, `TypeName`를 `ProgId`, 및 `WkoMode` 매개 변수는 두 개의 추가 요소 특성 값에 통합 됩니다.  
  
 <xref:System.EnterpriseServices.Internal.ServerWebConfig.AddElement%2A> 해야 하지 직접 호출할 수 있습니다. 대신, 호출 된 <xref:System.EnterpriseServices.Internal.Publish.ProcessServerTlb%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public void Create (string FilePath, string FilePrefix, out string Error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Create(string FilePath, string FilePrefix, [out] string&amp; Error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.ServerWebConfig.Create(System.String,System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Create (FilePath As String, FilePrefix As String, ByRef Error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Create(System::String ^ FilePath, System::String ^ FilePrefix, [Runtime::InteropServices::Out] System::String ^ % Error);" />
      <MemberSignature Language="F#" Value="abstract member Create : string * string *  -&gt; unit&#xA;override this.Create : string * string *  -&gt; unit" Usage="serverWebConfig.Create (FilePath, FilePrefix, Error)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IServerWebConfig.Create(System.String,System.String,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FilePath" Type="System.String" />
        <Parameter Name="FilePrefix" Type="System.String" />
        <Parameter Name="Error" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="FilePath">구성 파일이 만들어지는 폴더입니다.</param>
        <param name="FilePrefix">config 확장명이 추가될 문자열 값 "Web"입니다. </param>
        <param name="Error">오류 메시지를 쓸 수 있는 문자열입니다.</param>
        <summary>게시되는 COM 인터페이스에 XML 요소를 추가할 수 있도록 SOAP 사용 가능 COM+ 애플리케이션에 대한 Web.config 파일을 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.Internal.ServerWebConfig.Create%2A> 메서드 다음 XPath 사용 하 여 빈 요소에 대 한 계층을 포함 하는 Web.config 파일을 만듭니다.  
  
```  
/configuration/system.runtime.remoting/application/service  
```  
  
 인스턴스화하는 대신 한 <xref:System.EnterpriseServices.Internal.ServerWebConfig> 클래스 개체를 호출 <xref:System.EnterpriseServices.Internal.ServerWebConfig.Create%2A> 를 직접 호출을 <xref:System.EnterpriseServices.Internal.Publish.CreateVirtualRoot%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>