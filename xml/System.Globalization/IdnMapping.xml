<Type Name="IdnMapping" FullName="System.Globalization.IdnMapping">
  <Metadata><Meta Name="ms.openlocfilehash" Value="991d06df8a52ddaf51ac516fe9c0e3d9ef6d0132" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58732983" /></Metadata><TypeSignature Language="C#" Value="public sealed class IdnMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IdnMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.IdnMapping" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IdnMapping" />
  <TypeSignature Language="C++ CLI" Value="public ref class IdnMapping sealed" />
  <TypeSignature Language="F#" Value="type IdnMapping = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>인터넷 도메인 이름에 ASCII 문자가 아닌 문자를 사용할 수 있도록 합니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인터넷 도메인 이름 레이블 구분 기호로 구분 된 도메인 이름 레이블의 라는 하나 이상의 부분으로 구성 됩니다. 예를 들어, 도메인 이름 "www.proseware.com", "www", "proseware" 레이블과 마침표로 구분 하 여 "com"으로 구성 됩니다. 표준 도메인 이름은 US-ASCII (또는 기본 라틴 문자) 문자 범위 (u+0021 U + 007E에에서 지정 된 문자의 구성 됩니다. 국제화 도메인 이름을 응용 프로그램 (IDNA)에서 US ASCII 문자 집합을 사용 하지 않는 문화권에 대 한 인터넷 사용을 용이 하 게 표준 US-ASCII 문자 범위 외부의 유니코드 문자 포함을 지원 하기 위해 2003에 적용 됩니다. 그러나 이름 서버 및 도메인 이름 확인은 US-ASCII 문자 범위 내 문자에 의존 하 여 계속 합니다.  
  
 IDNA 메커니즘은 US-ASCII 문자 범위 외부의 도메인 이름 시스템에서 지 원하는 US-ASCII 문자 범위를 유니코드 문자를 포함 하는 다국어 도메인 이름을 매핑할 Punycode를 사용 합니다. IDNA 메커니즘은 인터넷을 통해 전송 하는 데이터가 아니라 도메인 이름만 변환 됩니다.  
  
> [!IMPORTANT]
>  에 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Globalization.IdnMapping> 클래스의 사용 중인 운영 체제에 따라 IDNA 표준에 다양 한 버전 지원:  
>   
>  -   실행할 때 [!INCLUDE[win8](~/includes/win8-md.md)]에 설명 된 IDNA 표준의 2008 버전 지원 [RFC 5891: 응용 프로그램 (IDNA)에서 다국어 도메인 이름: 프로토콜](https://go.microsoft.com/fwlink/?LinkId=231875)합니다.  
> -   이전 버전의 Windows 운영 체제를 실행 하는 경우에 설명 된 표준의 2003 버전 지원 [RFC 3490: 도메인 이름 (IDNA) 응용 프로그램의 국제화](https://go.microsoft.com/fwlink/?LinkId=158110)합니다.  
>   
>  참조 [Unicode Technical Standard #46: IDNA 호환성 처리](https://go.microsoft.com/fwlink/?LinkId=232459) 이러한 표준 방식으로 차이점에 대 한 특정 문자 집합을 처리 합니다.  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType> 메서드 정규화 된 도메인 이름, 정규화 된 이름 (U + 0020 ~ U + 007E), US ASCII 코드 포인트 범위에서 표시 가능한 유니코드 문자로 구성 되어 있으며 ASCII compatible encoding (ACE) 접두사를 앞에 추가 하는 표현으로 변환 (" 香 港 ") 각 레이블에 합니다. 합니다 <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=nameWithType> 메서드를 변환 하 여 도메인 이름 레이블의 복원는 <xref:System.Globalization.IdnMapping.GetAscii%2A> 메서드.  
  
 변환할 문자열 레이블 구분 기호를 포함 하는 경우 표의 마침표 문자 (U + 3002), 전체 중지 (U + FF0E) 전자 및 반자 표의 전체 중지 (U + FF61)는 <xref:System.Globalization.IdnMapping.GetAscii%2A> 메서드를 레이블 구분 기호로 마침표 (마침표, U + 변환 002E)입니다. 하지만 <xref:System.Globalization.IdnMapping.GetUnicode%2A> 메서드는 원래 레이블 구분 기호 문자를 복원 하지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> 배열을 변환 방법 internationalized domain name Punycode로 변환 합니다. <xref:System.Globalization.IdnMapping.GetUnicode%2A> 메서드는 다음 있는 Punycode 도메인 이름을 원래 도메인 이름으로 다시 변환 하지만 표준 레이블 구분 기호를 사용 하 여 원래 레이블 구분 기호를 바꿉니다.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>모든 public 메서드 <see cref="T:System.Globalization.IdnMapping" /> 스레드로부터 안전 하 고 있다면 여러 스레드에서 동시에 사용할 수는 <see cref="T:System.Globalization.IdnMapping" /> 인스턴스의 속성이 설정 되어 있지도 동시에 합니다.</threadsafe>
    <altmember cref="Overload:System.String.Normalize" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdnMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IdnMapping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Globalization.IdnMapping" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=nameWithType> 하 고 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=nameWithType> 속성으로 초기화 됩니다 `false`합니다. 소수의 ASCII 문자 A-z, 0-9, 하이픈 (-) 이외의 문자 (U + 00ad), 및 도메인 이름에 마침표 (.) 문자를 사용할 수 있지만 할당 되지 않은 유니코드 코드 포인트 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUnassigned">
      <MemberSignature Language="C#" Value="public bool AllowUnassigned { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUnassigned" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUnassigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUnassigned { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUnassigned : bool with get, set" Usage="System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Globalization.IdnMapping" /> 개체의 멤버에서 수행한 작업에 할당되지 않은 유니코드 코드 포인트가 사용되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>할당되지 않은 코드 포인트가 작업에 사용되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 등록 된 도메인 이름을 지정 하지 않은 코드 포인트를 포함할 수 없습니다. 따라서 기본값을 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> 속성은 `false`합니다. IDNA 사양 문자열을 일치 하는 쿼리에서만 할당 되지 않은 코드 포인트를 허용 합니다 (즉, 도메인 이름 조회에서). 도메인 이름에 할당 되지 않은 코드 포인트를 사용 하는 방법에 대 한 자세한 내용은 참조 ["준비 국제 문자열 (stringprep) 의", RFC 3454](https://go.microsoft.com/fwlink/?LinkId=231873) 고 [RFC 5891, "응용 프로그램 (에서 국제 도메인 이름 IDNA): 프로토콜"](https://go.microsoft.com/fwlink/?LinkId=231875)합니다.  
  
> [!IMPORTANT]
>  경우는 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> 속성은 `false`, 속성과 연결 된 동작을 기본 운영 체제에 따라 달라 집니다. 온 [!INCLUDE[win8](~/includes/win8-md.md)], <xref:System.Globalization.IdnMapping> IDNA 2008 유니코드 6.0 표준을 기반으로 하는 클래스를 준수 합니다. 이전 버전의 Windows에는 <xref:System.Globalization.IdnMapping> 클래스는 유니코드 3를 기반으로 하는 IDNA 2003에 기반 합니다. *x*합니다. IDNA 2003에서 할당 되지 않은 일부 코드 포인트가 문자 할당 되 고 IDNA 2008에서 지원 됩니다. 예를 들어, U + 0221 유니코드 4.0에서 도입 되었습니다. [!INCLUDE[win8](~/includes/win8-md.md)],으로 인코딩하는 "xn-6la"입니다. Windows의 이전 버전에서 throw 한 <xref:System.ArgumentException> 예외입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="idnMapping.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">현재 개체와 비교할 개체입니다.</param>
        <summary>지정된 개체가 현재 <see cref="T:System.Globalization.IdnMapping" /> 개체와 같은지 여부를 나타냅니다.</summary>
        <returns><paramref name="obj" /> 매개 변수로 지정된 개체가 <see cref="T:System.Globalization.IdnMapping" />에서 파생되었으며 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 및 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 속성이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAscii">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>US-ASCII 문자 범위 외부의 유니코드 문자를 포함하는 도메인 이름 레이블의 문자열을 US-ASCII 문자 범위(U+0020 ~ U+007E)에 있는 표시 가능한 유니코드 문자의 문자열로 인코딩합니다. 문자열은 IDNA 표준에 따라 형식이 지정됩니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string -&gt; string" Usage="idnMapping.GetAscii unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unicode">변환할 문자열입니다. 레이블 구분 기호로 구분된 하나 이상의 도메인 이름으로 구성되어 있어야 합니다.</param>
        <summary>유니코드 문자로 구성된 도메인 이름 레이블 문자열을 US-ASCII 문자 범위에 있는 표시 가능한 유니코드 문자의 문자열로 인코딩합니다. 문자열은 IDNA 표준에 따라 형식이 지정됩니다.</summary>
        <returns><paramref name="unicode" /> 매개 변수로 지정된 문자열에 해당하며, US-ASCII 문자 범위(U+0020 ~ U+007E)의 표시 가능한 유니코드 문자로 구성되고, IDNA 표준에 따라 형식이 지정된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `unicode` 매개 변수는 유효한 유니코드 문자로 구성 된 하나 이상의 레이블의 문자열을 지정 합니다. 레이블의는 레이블 구분 기호로 구분 됩니다. `unicode` 매개 변수는 레이블 구분을 사용 하 여 시작할 수 없습니다 있지만 등 필요에 따라 구분 기호로 끝날 수 있습니다. 레이블 구분 기호는 마침표 (기간, U + 002E), 표의 전체 중지 (U + 3002), 전체 중지 (U + FF0E) 전자 및 반자 표의 전체 중지 (U + FF61). 예를 들어, 도메인 이름 "www.adatum.com", "www", "adatum" 레이블과 마침표로 구분 하 여 "com"으로 구성 됩니다.  
  
 레이블을 다음 문자를 포함할 수 없습니다.  
  
-   U + 0001 001F U +와 U + 007F-유니코드 제어 문자.  
  
-   경우에 유니코드 문자를 할당 되지 않은 값을 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> 속성은 `false`합니다.  
  
-   US-ASCII에서 사용할 수 없는 문자가 문자 공간 등의 범위 (u+0020), 느낌표 ((u+0021)을 표시 경우 줄 (U + 005f 인) 문자를 낮은 값을 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> 속성은 `true`.  
  
-   IDNA 표준의 특정 버전으로 금지 되는 문자입니다. 금지 된 문자에 대 한 자세한 내용은 참조 하세요. [RFC 3454: 다국어 문자열 ("stringprep")를 준비](https://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 및 [RFC 5982: 응용 프로그램에 대 한 다국어 도메인 이름을 확인 하 고 유니코드 코드 포인트](https://go.microsoft.com/fwlink/?LinkId=231877) IDNA 2008에 대 한 합니다.  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A> 메서드 전체 중지 (기간, U + 002E)을 모든 레이블 구분 기호를 변환 합니다.  
  
 경우 `unicode` US-ASCII 외부 문자가 없는 문자 범위 및 US-ASCII 문자 범위 내에 문자가 없는 금지 되어 있으며, 메서드가 반환 `unicode` 변경 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> 배열을 변환 방법 internationalized domain name, Punycode로 변환 하는 것과 같습니다는 인코딩된 US-ASCII 문자 범위에 있는 문자로 구성 된 합니다. <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> 메서드는 다음 다시 원래 도메인 이름에 있는 Punycode 도메인 이름을 변환 하지만 표준 레이블 구분 기호를 사용 하 여 원래 레이블 구분 기호를 바꿉니다.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="unicode" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="unicode" />가 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 및 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 속성과 IDNA 표준에 맞지 않는 경우</exception>
        <block subset="none" type="usage"><para>에 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <see cref="T:System.Globalization.IdnMapping" /> 클래스의 사용 중인 운영 체제에 따라 IDNA 표준에 다양 한 버전 지원: 
-에서 실행 [!INCLUDE[win8](~/includes/win8-md.md)]에 설명 된 IDNA 표준의 2008 버전 지원 [RFC 5891: 응용 프로그램 (IDNA)에서 다국어 도메인 이름: 프로토콜](https://go.microsoft.com/fwlink/?LinkId=231875)합니다.  
  
-에 설명 된 표준의 2003 버전 지원 이전 버전의 Windows 운영 체제를 실행 하는 경우 [RFC 3490: 도메인 이름 (IDNA) 응용 프로그램의 국제화](https://go.microsoft.com/fwlink/?LinkId=158110)합니다.  
  
참조 [Unicode Technical Standard #46: IDNA 호환성 처리](https://go.microsoft.com/fwlink/?LinkId=232459) 이러한 표준 방식으로 차이점에 대 한 특정 문자 집합을 처리 합니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">변환할 문자열입니다. 레이블 구분 기호로 구분된 하나 이상의 도메인 이름으로 구성되어 있어야 합니다.</param>
        <param name="index">0부터 시작하는 오프셋으로, <paramref name="unicode" />에서 변환할 부분 문자열의 시작을 지정합니다. 변환 작업은 <paramref name="unicode" /> 문자열의 끝까지 수행됩니다.</param>
        <summary>US-ASCII 문자 범위 외부의 유니코드 문자를 포함하는 도메인 이름 레이블의 부분 문자열을 인코딩합니다. 하위 문자열은 US-ASCII 문자 범위의 표시 가능한 유니코드 문자열로 변환되고 IDNA 표준에 따라 형식이 지정됩니다.</summary>
        <returns><paramref name="unicode" /> 및 <paramref name="index" /> 매개 변수로 지정된 부분 문자열에 해당하며, US-ASCII 문자 범위(U+0020 ~ U+007E)의 표시 가능한 유니코드 문자로 구성되고, IDNA 표준에 따라 형식이 지정된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `unicode` 고 `index` 매개 변수는 유효한 유니코드 문자로 구성 된 하나 이상의 레이블이 있는 부분 문자열을 정의 합니다. 레이블의는 레이블 구분 기호로 구분 됩니다. 부분 문자열의 첫 번째 문자는 레이블 구분을 사용 하 여 시작할 수 없습니다 있지만 등 필요에 따라 구분 기호로 끝날 수 있습니다. 레이블 구분 기호는 마침표 (기간, U + 002E), 표의 전체 중지 (U + 3002), 전체 중지 (U + FF0E) 전자 및 반자 표의 전체 중지 (U + FF61). 예를 들어, 도메인 이름 "www.adatum.com", "www", "adatum" 레이블과 마침표로 구분 하 여 "com"으로 구성 됩니다.  
  
 레이블을 다음 문자를 포함할 수 없습니다.  
  
-   U + 0001 001F U +와 U + 007F-유니코드 제어 문자.  
  
-   유니코드 문자 값에 따라 할당 되지 않은 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> 속성입니다.  
  
-   US-ASCII에서 사용할 수 없는 문자가 문자 공간 등의 범위 (u+0020), 느낌표 ((u+0021)를 표시 및 값에 따라 낮은 줄 (U + 005f 인) 문자를 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> 속성.  
  
-   IDNA 표준의 특정 버전으로 금지 되는 문자입니다. 금지 된 문자에 대 한 자세한 내용은 참조 하세요. [RFC 3454: 다국어 문자열 ("stringprep")를 준비](https://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 및 [RFC 5982: 응용 프로그램에 대 한 다국어 도메인 이름을 확인 하 고 유니코드 코드 포인트](https://go.microsoft.com/fwlink/?LinkId=231877) IDNA 2008에 대 한 합니다.  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A> 메서드 전체 중지 (기간, U + 002E)을 모든 레이블 구분 기호를 변환 합니다.  
  
 경우 `unicode` US-ASCII 외부 문자가 없는 문자 범위 및 US-ASCII 문자 범위 내에 문자가 없는 금지 되어 있으며, 메서드가 반환 `unicode` 변경 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 로컬 부분을 제거 및 @ 문자는 전자 메일 주소를 전달 하는 결과 도메인 이름는 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> US-ASCII 문자 구성 된 인코딩된 해당 되는 Punycode 도메인 이름을 만드는 방법 문자 범위입니다. <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> 메서드는 다음 다시 원래 도메인 이름에 있는 Punycode 도메인 이름을 변환 하지만 표준 레이블 구분 기호를 사용 하 여 원래 레이블 구분 기호를 바꿉니다.  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1a.cs#2)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="unicode" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />가 0보다 작은 경우  
  
또는 
 <paramref name="index" /> 이 <paramref name="unicode" />의 길이보다 큽니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="unicode" />가 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 및 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 속성과 IDNA 표준에 맞지 않는 경우</exception>
        <block subset="none" type="usage"><para>에 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <see cref="T:System.Globalization.IdnMapping" /> 클래스의 사용 중인 운영 체제에 따라 IDNA 표준에 다양 한 버전 지원: 
-에서 실행 [!INCLUDE[win8](~/includes/win8-md.md)]에 설명 된 IDNA 표준의 2008 버전 지원 [RFC 5891: 응용 프로그램 (IDNA)에서 다국어 도메인 이름: 프로토콜](https://go.microsoft.com/fwlink/?LinkId=231875)합니다.  
  
-에 설명 된 표준의 2003 버전 지원 이전 버전의 Windows 운영 체제를 실행 하는 경우 [RFC 3490: 도메인 이름 (IDNA) 응용 프로그램의 국제화](https://go.microsoft.com/fwlink/?LinkId=158110)합니다.  
  
참조 [Unicode Technical Standard #46: IDNA 호환성 처리](https://go.microsoft.com/fwlink/?LinkId=232459) 이러한 표준 방식으로 차이점에 대 한 특정 문자 집합을 처리 합니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">변환할 문자열입니다. 레이블 구분 기호로 구분된 하나 이상의 도메인 이름으로 구성되어 있어야 합니다.</param>
        <param name="index">0부터 시작하는 오프셋으로, <paramref name="unicode" />에서 부분 문자열의 시작을 지정합니다.</param>
        <param name="count"><paramref name="index" /> 문자열의 <paramref name="unicode" />가 지정한 위치에서 시작하는 하위 문자열 중 변환할 문자 수입니다.</param>
        <summary>US-ASCII 문자 범위 외부의 유니코드 문자를 포함하는 도메인 이름 레이블의 부분 문자열에 있는 지정된 수의 문자를 인코딩합니다. 하위 문자열은 US-ASCII 문자 범위의 표시 가능한 유니코드 문자열로 변환되고 IDNA 표준에 따라 형식이 지정됩니다.</summary>
        <returns><paramref name="unicode" />, <paramref name="index" /> 및 <paramref name="count" /> 매개 변수로 지정된 부분 문자열에 해당하며, US-ASCII 문자 범위(U+0020 ~ U+007E)의 표시 가능한 유니코드 문자로 구성되고, IDNA 표준에 따라 형식이 지정된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `Unicode`, `index`, 및 `count` 매개 변수는 유효한 유니코드 문자로 구성 된 하나 이상의 레이블이 있는 부분 문자열을 정의 합니다. 레이블의는 레이블 구분 기호로 구분 됩니다. 부분 문자열의 첫 번째 문자는 레이블 구분을 사용 하 여 시작할 수 없습니다 있지만 등 필요에 따라 구분 기호로 끝날 수 있습니다. 레이블 구분 기호는 마침표 (기간, U + 002E), 표의 전체 중지 (U + 3002), 전체 중지 (U + FF0E) 전자 및 반자 표의 전체 중지 (U + FF61). 예를 들어, 도메인 이름 "www.adatum.com", "www", "adatum" 레이블과 마침표로 구분 하 여 "com"으로 구성 됩니다.  
  
 레이블을 다음 문자를 포함할 수 없습니다.  
  
-   U + 0001 001F U +와 U + 007F-유니코드 제어 문자.  
  
-   유니코드 문자 값에 따라 할당 되지 않은 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> 속성입니다.  
  
-   US-ASCII에서 사용할 수 없는 문자가 문자 공간 등의 범위 (u+0020), 느낌표 ((u+0021)를 표시 및 값에 따라 낮은 줄 (U + 005f 인) 문자를 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> 속성.  
  
-   IDNA 표준의 특정 버전으로 금지 되는 문자입니다. 금지 된 문자에 대 한 자세한 내용은 참조 하세요. [RFC 3454: 다국어 문자열 ("stringprep")를 준비](https://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 및 [RFC 5982: 응용 프로그램에 대 한 다국어 도메인 이름을 확인 하 고 유니코드 코드 포인트](https://go.microsoft.com/fwlink/?LinkId=231877) IDNA 2008에 대 한 합니다.  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A> 메서드 전체 중지 (기간, U + 002E)을 모든 레이블 구분 기호를 변환 합니다. 부분 문자열은 US-ASCII 문자 범위를 벗어나는 문자가 없는 경우 US-ASCII 문자 범위 내에 문자가 없는 금지 됩니다 메서드를 변경 하지 않고 부분 문자열을 반환 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> IDNA 표준에 따르는 도메인 이름에는 다국어 도메인 이름을 변환 하는 방법입니다. <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> 메서드는 다음 표준화 된 도메인 이름을 원래 도메인 이름으로 다시 변환 하지만 표준 레이블 구분 기호를 사용 하 여 원래 레이블 구분 기호를 바꿉니다.  
  
 [!code-csharp[IdnMapping.GetX#1](~/samples/snippets/csharp/VS_Snippets_CLR/IdnMapping.GetX/CS/getx.cs#1)]
 [!code-vb[IdnMapping.GetX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IdnMapping.GetX/VB/getx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="unicode" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.  
  
또는 
 <paramref name="index" /> 이 <paramref name="unicode" />의 길이보다 큽니다.  
  
또는 
 <paramref name="index" />가 <paramref name="unicode" />의 길이에서 <paramref name="count" />를 뺀 값보다 큰 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="unicode" />가 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 및 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 속성과 IDNA 표준에 맞지 않는 경우</exception>
        <block subset="none" type="usage"><para>에 [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <see cref="T:System.Globalization.IdnMapping" /> 클래스의 사용 중인 운영 체제에 따라 IDNA 표준에 다양 한 버전 지원: 
-에서 실행 [!INCLUDE[win8](~/includes/win8-md.md)]에 설명 된 IDNA 표준의 2008 버전 지원 [RFC 5891: 응용 프로그램 (IDNA)에서 다국어 도메인 이름: 프로토콜](https://go.microsoft.com/fwlink/?LinkId=231875)합니다.  
  
-에 설명 된 표준의 2003 버전 지원 이전 버전의 Windows 운영 체제를 실행 하는 경우 [RFC 3490: 도메인 이름 (IDNA) 응용 프로그램의 국제화](https://go.microsoft.com/fwlink/?LinkId=158110)합니다.  
  
참조 [Unicode Technical Standard #46: IDNA 호환성 처리](https://go.microsoft.com/fwlink/?LinkId=232459) 이러한 표준 방식으로 차이점에 대 한 특정 문자 집합을 처리 합니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="idnMapping.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Globalization.IdnMapping" /> 개체의 해시 코드를 반환합니다.</summary>
        <returns><see cref="T:System.Globalization.IdnMapping" /> 개체의 속성에서 파생된 네 개의 부호 있는 32비트 상수 중 하나입니다.  반환 값에는 특별한 의미가 없으므로 해시 코드 알고리즘에 사용하기는 적합하지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 재정의 <xref:System.Globalization.IdnMapping.GetHashCode%2A> 메서드 응용 프로그램에서 의미 있는 해시 코드 알고리즘을 구현 해야 합니다.  
  
   
  
## Examples  
 다음 예제에서는 단일 문자열을 공백으로 구분 하 여 여러 전자 메일 주소를 포함할 수 있다는 것을 가정 합니다. 로컬 부분을 제거 및 @ 각 전자 메일 주소를 전달 하는 문자는 결과 도메인 이름에 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> 또는 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> Punycode 도메인 이름을 만드는 방법. <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> 메서드 원래 도메인 이름으로 다시 있는 Punycode 도메인 이름을 변환 합니다.  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1b.cs#3)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1b.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>IDNA 표준에 따라 인코딩된 하나 이상의 도메인 이름 레이블을 유니코드 문자열로 디코딩합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string -&gt; string" Usage="idnMapping.GetUnicode ascii" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ascii">디코딩할 문자열로, IDNA 표준에 따라 인코딩된 US-ASCII 문자 범위(U+0020 ~ U+007E)에 있는 하나 이상의 레이블로 구성됩니다.</param>
        <summary>IDNA 표준에 따라 인코딩된 하나 이상의 도메인 이름 레이블의 문자열을 유니코드 문자열로 디코딩합니다.</summary>
        <returns><paramref name="ascii" /> 매개 변수로 지정된 IDNA 부분 문자열에 해당하는 유니코드입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 도메인 이름, 레이블 및 레이블 구분 기호에 대 한 자세한 내용은 설명 부분을 참조 하세요.를 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> 배열을 변환 방법 internationalized domain name Punycode로 변환 합니다. <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> 메서드는 다음 다시 원래 도메인 이름에 있는 Punycode 도메인 이름을 변환 하지만 표준 레이블 구분 기호를 사용 하 여 원래 레이블 구분 기호를 바꿉니다.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ascii" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="ascii" />가 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 및 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 속성과 IDNA 표준에 맞지 않는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">디코딩할 문자열로, IDNA 표준에 따라 인코딩된 US-ASCII 문자 범위(U+0020 ~ U+007E)에 있는 하나 이상의 레이블로 구성됩니다.</param>
        <param name="index">0부터 시작하는 오프셋으로, <paramref name="ascii" />에서 디코딩할 부분 문자열의 시작을 지정합니다. 디코딩 작업은 <paramref name="ascii" /> 문자열의 끝까지 수행됩니다.</param>
        <summary>IDNA 표준에 따라 인코딩된 하나 이상의 도메인 이름 레이블의 하위 문자열을 유니코드 문자열로 디코딩합니다.</summary>
        <returns><paramref name="ascii" /> 및 <paramref name="index" /> 매개 변수로 지정된 IDNA 부분 문자열에 해당하는 유니코드입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 도메인 이름, 레이블 및 레이블 구분 기호에 대 한 자세한 내용은 설명 부분을 참조 하세요.를 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ascii" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />가 0보다 작은 경우  
  
또는 
 <paramref name="index" /> 이 <paramref name="ascii" />의 길이보다 큽니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="ascii" />가 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 및 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 속성과 IDNA 표준에 맞지 않는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">디코딩할 문자열로, IDNA 표준에 따라 인코딩된 US-ASCII 문자 범위(U+0020 ~ U+007E)에 있는 하나 이상의 레이블로 구성됩니다.</param>
        <param name="index">0부터 시작하는 오프셋으로, <paramref name="ascii" />에서 부분 문자열의 시작을 지정합니다.</param>
        <param name="count"><paramref name="index" /> 문자열의 <paramref name="ascii" />가 지정한 위치에서 시작하는 하위 문자열 중 변환할 문자 수입니다.</param>
        <summary>IDNA표준에 따라 인코딩된 하나 이상의 도메인 이름 레이블을 포함하는 지정된 길이의 부분 문자열을 유니코드 문자의 문자열로 디코딩합니다.</summary>
        <returns><paramref name="ascii" />, <paramref name="index" /> 및 <paramref name="count" /> 매개 변수로 지정된 IDNA 부분 문자열에 해당하는 유니코드입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 도메인 이름, 레이블 및 레이블 구분 기호에 대 한 자세한 내용은 설명 부분을 참조 하세요.를 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ascii" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.  
  
또는 
 <paramref name="index" /> 이 <paramref name="ascii" />의 길이보다 큽니다.  
  
또는 
 <paramref name="index" />가 <paramref name="ascii" />의 길이에서 <paramref name="count" />를 뺀 값보다 큰 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="ascii" />가 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 및 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 속성과 IDNA 표준에 맞지 않는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="UseStd3AsciiRules">
      <MemberSignature Language="C#" Value="public bool UseStd3AsciiRules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseStd3AsciiRules" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStd3AsciiRules As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseStd3AsciiRules { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseStd3AsciiRules : bool with get, set" Usage="System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Globalization.IdnMapping" /> 개체의 멤버에서 수행한 작업에 표준 명명 규칙이 사용되었는지 또는 비표준 명명 규칙이 사용되었는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>표준 명명 규칙이 작업에 사용되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 도메인 이름은 표준 명명 규칙을 따르는 US-ASCII 문자 범위에 있는 문자의 특정 하위 집합을 구성 됩니다. 문자는 문자 A-Z, 0에서 9 까지의 숫자, 하이픈 (-) 문자 (U + 00ad), 및 마침표 (.). 문자의 대/소문자는 중요 하지 않습니다. 광범위 한 ASCII 범위 사용을 허용 하는 완화 된 명명 규칙에서 느낌표 문자 ((u+0021), 및는 밑줄 문자 (U + 005f 인), 문자, 공백 포함 (u+0020) 문자입니다. 하는 경우 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> 됩니다 `true`, 표준 문자만 반환한 레이블에 나타날 수 있습니다는 <xref:System.Globalization.IdnMapping.GetAscii%2A> 메서드.  
  
 기본적으로 값을 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> 속성은 `false`, 레이블에 확장 된 ASCII 문자 하위 집합 허용 됩니다.  
  
> [!NOTE]
>  합니다 <xref:System.Globalization.IdnMapping> 표시할 문자 u+0000에서 U + 001F, 사용을 금지 하는 클래스 및 도메인 이름에서 U + 007F 설정과 관계 없이 레이블는 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> 속성입니다. 이 금지 사항 이름 스푸핑을 같은 보안 공격의 위험을 줄입니다.  
  
   
  
## Examples  
 다음 예제에서는 ASCII 범위 u+0000에서 U + 007F에에서 문자를 포함 하는 Url을 생성 하 고 전달 하는 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> 두 메서드의 <xref:System.Globalization.IdnMapping> 개체입니다. 하나의 개체에 해당 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> 속성으로 설정 `true`, 다른 개체에 설정 및 `false`합니다. 출력에는 유효 하지 않은 경우 문자를 표시 합니다 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> 속성은 `true` 하지만 경우에 유효한 `false`.  
  
 [!code-csharp[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/cs/usestd3asciirules1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/vb/usestd3asciirules1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>