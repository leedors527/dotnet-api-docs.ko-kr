<Type Name="SortKey" FullName="System.Globalization.SortKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="462ed59ec15d5cfd7ed1dd2156c44362d624184b" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58726925" /></Metadata><TypeSignature Language="C#" Value="public class SortKey" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit SortKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.SortKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SortKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SortKey" />
  <TypeSignature Language="F#" Value="type SortKey = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>문자열을 해당 정렬 키에 매핑한 결과를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 문자열의 문화권 구분 비교는 대/소문자 및 분음 부호 가중치 여러 범주의 정렬 가중치가, 스크립트, 사전순, 포함 된 문자열의 각 문자에 따라 다릅니다. 정렬 키는 특정 문자열에 대 한 이러한 가중치의 리포지토리 역할도합니다.  
  
 합니다 <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=nameWithType> 의 인스턴스를 반환 하는 메서드는 <xref:System.Globalization.SortKey> 문화권 구분 매핑이 지정된 된 문자열의 문자를 반영 하는 클래스입니다. 값을 <xref:System.Globalization.SortKey> 개체가 반환한 키 데이터는 <xref:System.Globalization.SortKey.KeyData%2A> 속성. 이 주요 데이터 일련의 문자열, 문화권별 정렬 규칙 및 사용자 지정 비교 옵션을 인코딩할 바이트로 이루어져 있습니다. 각 정렬 키의 해당 키 데이터 비트 비교의 정렬 키를 사용 하는 비교 구성 됩니다.  예를 들어 정렬 키를 호출 하 여 만든 합니다 <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29> 값을 사용 하 여 메서드 <xref:System.Globalization.CompareOptions.IgnoreCase?displayProperty=nameWithType>, 정렬 키를 사용 하는 문자열 비교 작업은 대/소문자입니다.  
  
 정적 호출 하 여 정렬 키를 비교 하는 문자열에 대 한 정렬 키를 만든 후 <xref:System.Globalization.SortKey.Compare%2A?displayProperty=nameWithType> 메서드. 보다 훨씬 빠르게 수행 되므로이 메서드는 간단한 바이트 단위로 비교를 수행 합니다 <xref:System.String.Compare%2A?displayProperty=nameWithType> 또는 <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> 메서드.  

> [!NOTE]
> 다운로드할 수 있습니다는 [가중치 테이블 정렬](https://www.microsoft.com/en-us/download/details.aspx?id=10921), Windows 운영 체제에 대 한 정렬 및 비교 작업에 사용 되는 문자 가중치에 대 한 정보를 포함 하는 텍스트 파일의 집합을 [기본 유니코드 데이터 정렬 요소 테이블](https://www.unicode.org/Public/UCA/latest/allkeys.txt), Linux 및 macOS에 대 한 정렬 가중치 테이블입니다.

## <a name="performance-considerations"></a>성능 고려 사항  
 문자열 비교를 수행 하는 경우는 <xref:System.Globalization.SortKey.Compare%2A> 및 <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> 메서드 생성 결과 동일 하지만 해당 대상 시나리오가 서로 다릅니다.  
  
 높은 수준에서 <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> 메서드 각 문자열에 대 한 정렬 키를 생성, 비교를 수행 하 고 다음 정렬 키를 삭제 및 비교의 결과 반환 합니다. 그러나는 <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> 메서드 실제로 생성 하지 비교를 수행 하는 전체 정렬 키입니다. 대신 메서드가 각 문자열에서 각 텍스트 요소 (즉, 기본 문자, 서로게이트 쌍 또는 문자 시퀀스 결합)에 대 한 주요 데이터를 생성 합니다. 해당 텍스트 요소에 대 한 키 데이터를 비교합니다. 작업 비교의 최종 결과 결정 하는 즉시 종료 합니다. 정렬 키 정보가 계산 없는 <xref:System.Globalization.SortKey> 개체가 만들어집니다. 이 전략은 한 번에 두 문자열을 비교 하는 경우 성능 측면에서 경제적 하지만 동일한 문자열이 여러 번을 비교 하는 경우 비용이 많이 드는 됩니다.  
  
 <xref:System.Globalization.SortKey.Compare%2A> 메서드를 사용 하려면 차세대는 <xref:System.Globalization.SortKey> 비교를 수행 하기 전에 각 문자열에 대 한 개체입니다. 이 전략은 생성 하는 데 메모리와 시간으로 인해 첫 번째 비교에 대 한 성능 측면에서 비용이 많이 드는 <xref:System.Globalization.SortKey> 개체입니다. 동일한 정렬 키를 여러 번을 비교 하는 경우에 경제적입니다.  
  
 예를 들어 인덱스 문자열 기반 열에 지정된 된 검색 문자열과 일치 하는 행에 대 한 데이터베이스 테이블을 검색 하는 응용 프로그램을 작성 합니다. 테이블에는 수천 개의 행을 포함 하 고 시간이 오래 걸리는 각 행의 인덱스 검색 문자열을 비교 합니다. 따라서 응용 프로그램에서 행과 해당 인덱스 열에 저장 하는 경우 또한 생성 하 고 검색 성능을 향상 시키기 위한 전용된 열에서 인덱스에 대 한 정렬 키를 저장. 응용 프로그램 대상 행을 검색할 때 검색 문자열 인덱스 문자열 검색 문자열을 비교 하는 대신 인덱스 문자열을 정렬 키에 대 한 정렬 키를 비교 합니다.  
  
## <a name="security-considerations"></a>보안 고려 사항  
 <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> 메서드가 반환 되는 <xref:System.Globalization.SortKey> 지정 된 문자열을 기반으로 하는 값을 가진 개체가 및 <xref:System.Globalization.CompareOptions> 값 및 기본 연결 된 문화권 <xref:System.Globalization.CompareInfo> 개체입니다. 보안 결정은 문자열 비교 또는 대/소문자 변경에 따라 종속 하는 경우 사용 해야는 <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> 메서드의 동작 작업의 운영 체제의 문화권 설정에 관계 없이 일관 되도록 고정 문화권입니다.  
  
 정렬 키를 얻으려면 다음 단계를 사용 합니다.  
  
1.  고정 문화권을 검색 합니다 <xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=nameWithType> 속성입니다.  
  
2.  검색을 <xref:System.Globalization.CompareInfo> 에서 고정 문화권에 대 한 개체는 <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> 속성입니다.  
  
3.  <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> 메서드를 호출합니다.  
  
 값을 사용 하 여 작업을 <xref:System.Globalization.SortKey> 개체는 Windows를 호출 하는 것은 `LCMapString` LCMAP_SORTKEY 값이 지정 된 메서드. 그러나는 <xref:System.Globalization.SortKey> 개체 영어 문자에 대 한 정렬 키의 정렬 키 한국어 문자를 앞에 야 합니다.  
  
 <xref:System.Globalization.SortKey> 개체 수 serialize 된 있지만 이러한를 넘을 수 있도록 <xref:System.AppDomain> 개체입니다. 응용 프로그램을 serialize 하는 경우는 <xref:System.Globalization.SortKey> 개체를.NET Framework의 새 버전이 있는 경우 응용 프로그램의 모든 정렬 키를 다시 생성 해야 합니다.  
  
 정렬 키에 대 한 자세한 내용은 유니코드 기술 표준 #10, "유니코드 데이터 정렬 알고리즘"을 참조 합니다 [유니코드 컨소시엄 웹 사이트](https://go.microsoft.com/fwlink/?linkid=37123)합니다.  
  
   
  
## Examples  
 다음 예제에서는 llama"문자열" "EN-US" 및 "ES-ES" 문화권 "EN-US" 및 "ES-ES" 기존의 문화권을 사용 하 여 비교 합니다.  
  
 [!code-cpp[System.Globalization.SortKey.Compare#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CPP/sortkey_compare.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CS/sortkey_compare.cs#1)]
 [!code-vb[System.Globalization.SortKey.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/VB/sortkey_compare.vb#1)]  
  
 다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Globalization.SortKey> 큰 배열의 검색 및 정렬을 광범위 하 게 의존 하는 응용 프로그램의 성능을 향상 시키는 클래스입니다. 이 예제에는 경우 13 개 요소가 있는 이름의 순서가 지정 되지 않은 배열을 만듭니다. 그런 다음 각 이름의 정렬 키를 전달 하는 병렬 배열에 저장 된 <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType> 메서드. 결과 정렬 된 배열입니다. 예제에서는 세 문자열 배열을 검색합니다. 각 검색 문자열에 대 한 호출을 <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> 검색 문자열의 정렬 키를 차례로 호출 하는 메서드는 <xref:System.Array.FindIndex%2A?displayProperty=nameWithType> 정렬 키의 배열에서 해당 정렬 키의 인덱스를 검색 하는 방법. 이름 및 정렬 키 배열 병렬 이기 때문에 반환 된 인덱스에 있는 이름의 인덱스 이기도 합니다 `names` 배열입니다.  
  
 [!code-csharp[System.Globalization.SortKey.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.sortkey.class/cs/sortkey1.cs#1)]
 [!code-vb[System.Globalization.SortKey.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.sortkey.class/vb/sortkey1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
    <altmember cref="P:System.Globalization.SortKey.KeyData" />
  </Docs>
  <Members>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(class System.Globalization.SortKey sortkey1, class System.Globalization.SortKey sortkey2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (sortkey1 As SortKey, sortkey2 As SortKey) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::Globalization::SortKey ^ sortkey1, System::Globalization::SortKey ^ sortkey2);" />
      <MemberSignature Language="F#" Value="static member Compare : System.Globalization.SortKey * System.Globalization.SortKey -&gt; int" Usage="System.Globalization.SortKey.Compare (sortkey1, sortkey2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortkey1" Type="System.Globalization.SortKey" />
        <Parameter Name="sortkey2" Type="System.Globalization.SortKey" />
      </Parameters>
      <Docs>
        <param name="sortkey1">비교할 첫째 정렬 키입니다.</param>
        <param name="sortkey2">비교할 둘째 정렬 키입니다.</param>
        <summary>두 정렬 키를 비교합니다.</summary>
        <returns><paramref name="sortkey1" />과(와) <paramref name="sortkey2" /> 간의 관계를 나타내는 부호 있는 정수입니다.  
  
 <list type="table"><listheader><term> 값 
 </term><description> 조건 
 </description></listheader><item><term> 0보다 작음 
 </term><description><paramref name="sortkey1" />가 <paramref name="sortkey2" />보다 작은 경우  
  
 </description></item><item><term> 0 
 </term><description><paramref name="sortkey1" />가 <paramref name="sortkey2" />와 같은 경우  
  
 </description></item><item><term> 0보다 큼 
 </term><description><paramref name="sortkey1" />가 <paramref name="sortkey2" />보다 큰 경우  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.SortKey.Compare%2A> 메서드 비교 합니다 <xref:System.Globalization.SortKey.KeyData%2A> 의 속성을 `sortkey1` 및 `sortkey2` 매개 변수. 메서드는 동일한 결과 생성 합니다 <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> 메서드.  
  
 에 대 한 자세한 내용은 합니다 <xref:System.Globalization.SortKey.Compare%2A> 메서드와 정렬 키의 비교 참조를 <xref:System.Globalization.SortKey> 클래스 항목.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하 여 두 문자열을 비교 합니다 <xref:System.Globalization.SortKey.Compare%2A> 메서드와 해당 <xref:System.Globalization.CompareInfo.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> 메서드.  
  
 [!code-csharp[sys.glob.sortkey.compare#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.compare/cs/skcmp.cs#1)]
 [!code-vb[sys.glob.sortkey.compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.compare/vb/skcmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sortkey1" /> 또는 <paramref name="sortkey2" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="sortKey.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">현재 <see cref="T:System.Globalization.SortKey" /> 개체와 비교할 개체입니다.</param>
        <summary>지정한 개체와 현재 <see cref="T:System.Globalization.SortKey" /> 개체가 같은지 여부를 확인합니다.</summary>
        <returns><paramref name="value" /> 매개 변수가 현재 <see cref="T:System.Globalization.SortKey" /> 개체와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 개의 <xref:System.Globalization.SortKey> 개체는 같은 것으로 간주 되는 <xref:System.Globalization.SortKey.KeyData%2A> 속성이 같으면 합니다.  
  
 이 메서드는 <xref:System.Object.Equals%2A?displayProperty=nameWithType>를 재정의합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 결과 보여 줍니다 <xref:System.Globalization.SortKey.Equals%2A> 다른와 비교 하면 <xref:System.Globalization.SortKey> 개체입니다.  
  
 [!code-cpp[System.Globalization.SortKey.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CPP/sortkey_equals.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CS/sortkey_equals.cs#1)]
 [!code-vb[System.Globalization.SortKey.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/VB/sortkey_equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="P:System.Globalization.SortKey.KeyData" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="sortKey.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>해시 알고리즘과 해시 테이블 같은 데이터 구조에 적합한 현재 <see cref="T:System.Globalization.SortKey" /> 개체에 대한 해시 함수의 역할을 합니다.</summary>
        <returns>현재 <see cref="T:System.Globalization.SortKey" /> 개체의 해시 코드입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 <xref:System.Globalization.SortKey.Equals%2A> 메서드에 따라 동일한 두 개체에 대해 같은 해시 코드를 생성합니다.  
  
 이 메서드는 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>를 재정의합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.SortKey.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="KeyData">
      <MemberSignature Language="C#" Value="public virtual byte[] KeyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] KeyData" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.KeyData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyData As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Byte&gt; ^ KeyData { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyData : byte[]" Usage="System.Globalization.SortKey.KeyData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Globalization.SortKey" /> 개체를 나타내는 바이트 배열을 가져옵니다.</summary>
        <value>현재 <see cref="T:System.Globalization.SortKey" /> 개체를 나타내는 바이트 배열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환한 데이터의 사용에 대 한 자세한 내용은 합니다 <xref:System.Globalization.SortKey.KeyData%2A> 비교 문자열에서 속성 참조는 <xref:System.Globalization.SortKey> 클래스 항목입니다.  
  
   
  
## Examples  
 다음 코드 예제는 원래 문자열과 동일한 문자열 및 대/소문자 구분 정렬 키와 대/소문자 구분 정렬 키에 대 한 주요 데이터를 표시합니다.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalString">
      <MemberSignature Language="C#" Value="public virtual string OriginalString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalString" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.OriginalString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OriginalString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ OriginalString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalString : string" Usage="System.Globalization.SortKey.OriginalString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Globalization.SortKey" /> 개체를 만드는 데 사용되는 원래 문자열을 가져옵니다.</summary>
        <value>현재 <see cref="T:System.Globalization.SortKey" /> 개체를 만드는 데 사용되는 원래 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는 원래 문자열과 동일한 문자열 및 대/소문자 구분 정렬 키와 대/소문자 구분 정렬 키에 대 한 주요 데이터를 표시합니다.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="sortKey.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.Globalization.SortKey" /> 개체를 나타내는 문자열을 반환합니다.</summary>
        <returns>현재 <see cref="T:System.Globalization.SortKey" /> 개체를 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 값은 연결 된 문자열 "SortKey-", 문화권 식별자 및 현재 비교 옵션 <xref:System.Globalization.SortKey> 개체 및 값을 <xref:System.Globalization.SortKey.OriginalString%2A> 속성입니다.  
  
 이 메서드는 <xref:System.Object.ToString%2A?displayProperty=nameWithType>를 재정의합니다.  
  
   
  
## Examples  
 원래 문자열에 의해 생성 된 문자열을 표시 하는 다음 코드 예제는 <xref:System.Globalization.SortKey.ToString%2A> 대/소문자 구분 및 대/소문자 구분 정렬 키 및 대/소문자 구분 및 대/소문자 구분 정렬 키에 대 한 키 데이터에 대 한 메서드.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>