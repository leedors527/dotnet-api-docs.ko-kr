<Type Name="TextElementEnumerator" FullName="System.Globalization.TextElementEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2f18c2ff7b2e93f57b88267f524cea011ec84d37" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58716088" /></Metadata><TypeSignature Language="C#" Value="public class TextElementEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit TextElementEnumerator extends System.Object implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.TextElementEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class TextElementEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextElementEnumerator : System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type TextElementEnumerator = class&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>문자열의 텍스트 요소를 열거합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework의 문자 소 즉, 단일 문자로 표시 되는 텍스트 단위로 텍스트 요소를 정의 합니다. 텍스트 요소를 다음 중 하나일 수 있습니다.  
  
-   Single로 표현 되는 기본 문자, <xref:System.Char> 값입니다. 예를 들어, 라틴어 대문자 문자는 (u+0041) 및 LATIN 작은 문자 AE (U + 00E6)는 기본 문자입니다.  
  
-   조합 문자는 기본 문자와 조합 문자를 하나 이상 구성 하는 시퀀스입니다. 예를 들어 예제에서는 결합 장 뒤에 (u+0041) LATIN CAPITAL LETTER (U + 0304)을 조합 하는 문자 시퀀스입니다.  
  
-   서로게이트 쌍에는 합니다 [유니코드 표준](https://go.microsoft.com/fwlink/?linkid=37123) 두 코드 단위의 시퀀스를 구성 하는 단일 추상 문자에 대 한 코드 문자 표현으로 정의: high surrogate 및 하위 서로게이트입니다. 서로게이트 쌍은 u t F-16으로 인코딩된 문자로 유니코드 Basic Multilingual Plane 외부에 문자를 나타내는 데 사용 됩니다. 예를 들어, 고딕 문자 SAUIL (U + 10343) 값인 0xDF43 하위 서로게이트 값이 0xD800 high surrogate와 인코딩 u t F-16에 표시 됩니다. 기본 문자 또는 조합 문자에 서로게이트 쌍을 나타낼 수 있습니다.  
  
 합니다 <xref:System.Globalization.TextElementEnumerator> 클래스를 사용 하면 단일 아니라 문자열의 텍스트 요소를 사용 하 여 작업할 수 <xref:System.Char> 개체입니다.  
  
 인스턴스화하는 <xref:System.Globalization.TextElementEnumerator> 문자열을 전달 하 여 특정 문자열을 나타내는 개체를 <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType> 메서드. 이 문자열의 첫째 텍스트 요소 앞에 배치 되는 열거자를 반환 합니다. 호출 된 <xref:System.Globalization.TextElementEnumerator.Reset%2A> 메서드 또한 다시이 위치로 열거자를 가져옵니다. 호출 해야이 잘못 된 상태를 나타내므로 <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> 의 값을 읽기 전에 문자열의 첫 번째 요소로 열거자를 이동 하는 <xref:System.Globalization.TextElementEnumerator.Current%2A> 현재 텍스트 요소를 반환 하는 속성입니다.  
  
 작업할 때를 <xref:System.Globalization.TextElementEnumerator> 열거자를 배치 하는 일을 담당 하는 개체입니다. 합니다 <xref:System.Globalization.TextElementEnumerator.Current%2A> 속성 중 하나를 호출할 때까지 동일한 텍스트 요소를 반환 <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> 또는 <xref:System.Globalization.TextElementEnumerator.Reset%2A>합니다. 열거자 잘못 된 상태에서 이면 첫째 텍스트 요소 앞 이나 문자열의 마지막 텍스트 요소 뒤에 배치 됩니다. 열거자가 잘못 된 상태에서의 값을 검색 하려고 합니다 <xref:System.Globalization.TextElementEnumerator.Current%2A> 속성 예외를 throw 합니다. 테스트 하 여 열거자가 잘못 된 상태에 있는지 여부를 확인할 수 있습니다 있는지 여부를의 반환 값을 <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> 속성은 `false`합니다.  
  
 <xref:System.Globalization.TextElementEnumerator> 개체는 문자열 변수 또는 현재 리터럴 문자열의 현재 상태의 스냅숏을 나타냅니다는 <xref:System.Globalization.TextElementEnumerator> 개체가 인스턴스화되면 합니다. 다음 사항에 유의합니다.  
  
-   텍스트 요소의 열거자 문자열에 데이터를 읽는에 사용할 수 있습니다. 기본 문자열을 수정할 수는 없습니다.  
  
-   열거자를 나타내는 문자열에 대 한 단독 액세스가 없습니다. 열거자가 만들어진 후 문자열 변수를 수정할 수 있습니다.  
  
-   <xref:System.Globalization.TextElementEnumerator> 시 문자열에 있는 텍스트 요소를 열거 하는 개체는는 <xref:System.Globalization.TextElementEnumerator> 개체 인스턴스화 되었습니다. 해당 변수는 나중에 수정할 문자열 변수의 후속 변경 내용은 반영 하지 않습니다.  
  
-   때문에 합니다 <xref:System.Globalization.TextElementEnumerator> 클래스를 재정의 하지 않습니다 <xref:System.Object.Equals%2A?displayProperty=nameWithType>두 가지 즉, <xref:System.Globalization.TextElementEnumerator> 동일한 문자열을 나타내는 개체는 같지 않은 간주 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Globalization.TextElementEnumerator> 문자열의 텍스트 요소를 열거 하는 클래스입니다.  
  
 [!code-cpp[System.Globalization.TextElementEnumerator.Summary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TextElementEnumerator.Summary/CPP/tee_summary.cpp#1)]
 [!code-csharp[System.Globalization.TextElementEnumerator.Summary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TextElementEnumerator.Summary/CS/tee_summary.cs#1)]
 [!code-vb[System.Globalization.TextElementEnumerator.Summary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TextElementEnumerator.Summary/VB/tee_summary.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.StringInfo" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public object Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Current" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextElementEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : obj" Usage="System.Globalization.TextElementEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문자열의 현재 텍스트 요소를 가져옵니다.</summary>
        <value>문자열의 현재 텍스트 요소를 포함하는 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 열거자를 만든 후 또는 후는 <xref:System.Globalization.TextElementEnumerator.Reset%2A> 가 호출 <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> 호출 하 여 열거자를 문자열의 첫째 텍스트 요소 값을 읽기 전에 <xref:System.Globalization.TextElementEnumerator.Current%2A>입니다. 그렇지 않으면 <xref:System.Globalization.TextElementEnumerator.Current%2A> 정의 되지 않습니다.  
  
 <xref:System.Globalization.TextElementEnumerator.Current%2A> 마지막으로 호출 하는 경우 예외를 throw <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> 반환 `false`, 문자열의 끝을 나타내는입니다.  
  
 <xref:System.Globalization.TextElementEnumerator.Current%2A> 열거자에 대 한 연속 호출의 위치를 이동 하지 않습니다 <xref:System.Globalization.TextElementEnumerator.Current%2A> 될 때까지 동일한 개체를 반환 <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> 또는 <xref:System.Globalization.TextElementEnumerator.Reset%2A> 라고 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">열거자가 문자열의 첫째 텍스트 요소 앞이나 마지막 텍스트 요소 뒤에 배치되는 경우</exception>
        <altmember cref="M:System.Globalization.TextElementEnumerator.GetTextElement" />
        <altmember cref="P:System.Globalization.TextElementEnumerator.ElementIndex" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.MoveNext" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.Reset" />
      </Docs>
    </Member>
    <Member MemberName="ElementIndex">
      <MemberSignature Language="C#" Value="public int ElementIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ElementIndex" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextElementEnumerator.ElementIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElementIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ElementIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementIndex : int" Usage="System.Globalization.TextElementEnumerator.ElementIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>열거자가 현재 위치하고 있는 텍스트 요소의 인덱스를 가져옵니다.</summary>
        <value>열거자가 현재 위치하고 있는 텍스트 요소의 인덱스입니다.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">열거자가 문자열의 첫째 텍스트 요소 앞이나 마지막 텍스트 요소 뒤에 배치되는 경우</exception>
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.GetTextElement" />
      </Docs>
    </Member>
    <Member MemberName="GetTextElement">
      <MemberSignature Language="C#" Value="public string GetTextElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetTextElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextElementEnumerator.GetTextElement" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextElement () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTextElement();" />
      <MemberSignature Language="F#" Value="member this.GetTextElement : unit -&gt; string" Usage="textElementEnumerator.GetTextElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>문자열의 현재 텍스트 요소를 가져옵니다.</summary>
        <returns>읽고 있는 문자열의 현재 텍스트 요소를 포함하는 새 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드가 반환와 동일한 텍스트 요소를 <xref:System.Globalization.TextElementEnumerator.Current%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">열거자가 문자열의 첫째 텍스트 요소 앞이나 마지막 텍스트 요소 뒤에 배치되는 경우</exception>
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
        <altmember cref="P:System.Globalization.TextElementEnumerator.ElementIndex" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextElementEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="textElementEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>열거자를 문자열의 다음 텍스트 요소로 이동합니다.</summary>
        <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />가 반환되고 문자열의 끝을 지난 경우 <see langword="false" />가 반환됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 열거자를 만든 후 또는 후는 <xref:System.Globalization.TextElementEnumerator.Reset%2A> 는 호출 열거자는 문자열을 첫 번째 호출은 첫 번째 텍스트 요소 앞에 배치 되 <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> 열거자 문자열의 첫째 텍스트 요소 위로 이동 합니다.  
  
 이 열거자를 만든 후 문자열을 수정 하는 경우 <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> 예외를 throw 합니다.  
  
 문자열의 끝에 대 한 전달, 후속 호출 되 면 <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> 반환 `false` 때까지 <xref:System.Globalization.TextElementEnumerator.Reset%2A> 라고 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
        <altmember cref="M:System.Globalization.TextElementEnumerator.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextElementEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="textElementEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>문자열의 첫째 텍스트 요소 앞의 초기 위치에 열거자를 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.TextElementEnumerator.Reset%2A> 메서드 첫째 텍스트 요소 앞의 문자열의 시작 부분에 열거자를 이동 합니다. 호출한 후 <xref:System.Globalization.TextElementEnumerator.Reset%2A>를 호출 해야 합니다 <xref:System.Globalization.TextElementEnumerator.MoveNext%2A> 하는 열거자를 호출 하기 전에 문자열의 첫째 텍스트 요소를 <xref:System.Globalization.TextElementEnumerator.Current%2A> 첫 번째 텍스트 요소의 값을 읽을 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.TextElementEnumerator.MoveNext" />
        <altmember cref="P:System.Globalization.TextElementEnumerator.Current" />
      </Docs>
    </Member>
  </Members>
</Type>