<Type Name="ZipArchive" FullName="System.IO.Compression.ZipArchive">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5ca7e4e3069c106cecf652e28ece1a38bfc4d892" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541634" /></Metadata><TypeSignature Language="C#" Value="public class ZipArchive : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ZipArchive extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Compression.ZipArchive" />
  <TypeSignature Language="VB.NET" Value="Public Class ZipArchive&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ZipArchive : IDisposable" />
  <TypeSignature Language="F#" Value="type ZipArchive = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>zip 보관 파일 형식으로 압축된 파일 패키지를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zip 보관 파일 및 해당 파일 항목을 조작 하기 위한 메서드는 세 가지 클래스에 분산 합니다. <xref:System.IO.Compression.ZipFile>, <xref:System.IO.Compression.ZipArchive>, 및 <xref:System.IO.Compression.ZipArchiveEntry>합니다.  
  
|대상|기능|  
|--------|---------|  
|Zip 보관 파일을 디렉터리에서 만들기|<xref:System.IO.Compression.ZipFile.CreateFromDirectory%2A?displayProperty=nameWithType>|  
|디렉터리에는 zip 보관 파일의 내용을 추출합니다|<xref:System.IO.Compression.ZipFile.ExtractToDirectory%2A?displayProperty=nameWithType>|  
|새 파일을 기존 zip 보관 파일 추가|<xref:System.IO.Compression.ZipArchive.CreateEntry%2A?displayProperty=nameWithType>|  
|Zip 보관 파일에서 파일을 검색 합니다.|<xref:System.IO.Compression.ZipArchive.GetEntry%2A?displayProperty=nameWithType>|  
|Zip 보관 파일에서 모든 파일을 검색 합니다.|<xref:System.IO.Compression.ZipArchive.Entries%2A?displayProperty=nameWithType>|  
|Zip 보관 파일에 포함 된 단일 파일에 스트림을 열기|<xref:System.IO.Compression.ZipArchiveEntry.Open%2A?displayProperty=nameWithType>|  
|Zip 보관 파일에서 파일을 삭제 합니다.|<xref:System.IO.Compression.ZipArchiveEntry.Delete%2A?displayProperty=nameWithType>|  
  
 새 항목을 만든 경우에 파일 압축 및 zip 패키지에 추가 합니다. <xref:System.IO.Compression.ZipArchive.CreateEntry%2A> 메서드를 사용 하면 항목을 추가할 때 디렉터리 계층 구조를 지정할 수 있습니다. Zip 패키지 내에서 새 항목의 상대 경로 포함할 수 있습니다. 예를 들어의 상대 경로 사용 하 여 새 항목을 만들 `AddedFolder\NewFile.txt` AddedFolder 라는 디렉터리에 압축 된 텍스트 파일을 만듭니다.  
  
 참조 하는 경우는 `System.IO.Compression.FileSystem` 어셈블리 프로젝트에서 네 개의 확장 메서드에 액세스할 수 있습니다 (에서 합니다 <xref:System.IO.Compression.ZipFileExtensions> 클래스)에 대 한 합니다 <xref:System.IO.Compression.ZipArchive> 클래스: <xref:System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String)>, <xref:System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String,System.IO.Compression.CompressionLevel)>, <xref:System.IO.Compression.ZipFileExtensions.ExtractToDirectory(System.IO.Compression.ZipArchive,System.String)>, 및 <xref:System.IO.Compression.ZipFileExtensions.ExtractToDirectory(System.IO.Compression.ZipArchive,System.String,System.Boolean)> (.NET에서 사용할 수 Core 2.0 및 이후 버전)입니다. 이러한 확장 메서드를 사용 하 여 압축 및 압축 파일에 항목의 내용이 있습니다. 합니다 `System.IO.Compression.FileSystem` 어셈블리를 사용할 수 없는 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 앱. [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 앱을 압축 하 고 사용 하 여 파일의 압축을 풀 수를 <xref:System.IO.Compression.DeflateStream> 또는 <xref:System.IO.Compression.GZipStream> 클래스를 사용할 수 있습니다는 [!INCLUDE[wrt](~/includes/wrt-md.md)] 형식 [압축 프로그램](https://go.microsoft.com/fwlink/p/?LinkID=246357) 및 [압축 풀기 프로그램](https://go.microsoft.com/fwlink/p/?LinkID=246358)합니다.  
  
   
  
## Examples  
 첫 번째 예제에는 새 항목을 만들고 스트림을 사용 하 여 기록 되도록 하는 방법을 보여 줍니다.  
  
 [!code-csharp[System.IO.Compression.ZipArchiveMode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchivemode/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipArchiveMode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchivemode/vb/program1.vb#1)]  
  
 다음 예제에서는 zip 보관 파일을 열고 항목의 컬렉션을 반복 하는 방법을 보여 줍니다.  
  
 [!code-csharp[System.IO.Compression.ZipArchive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipArchive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program1.vb#1)]  
  
 세 번째 예제에서는 기존 파일에서 zip 보관 파일에서 새 항목 만들기 및 보관 압축을 풉니다 확장 메서드를 사용 하는 방법을 보여 줍니다. 참조 해야 합니다는 `System.IO.Compression.FileSystem` 코드를 실행 하는 어셈블리입니다.  
  
 [!code-csharp[System.IO.Compression.ZipArchive#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program3.cs#3)]
 [!code-vb[System.IO.Compression.ZipArchive#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Compression.ZipFile" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.IO.Compression.ZipArchive" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ZipArchive (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ZipArchive(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.IO.Compression.ZipArchive : System.IO.Stream -&gt; System.IO.Compression.ZipArchive" Usage="new System.IO.Compression.ZipArchive stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">읽을 보관 저장소가 포함된 스트림입니다.</param>
        <summary>지정된 스트림에서 <see cref="T:System.IO.Compression.ZipArchive" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">스트림이 이미 닫혔거나 읽기를 지원하지 않는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.IO.InvalidDataException">스트림의 콘텐츠가 zip 보관 위치 형식이 아닙니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ZipArchive (System.IO.Stream stream, System.IO.Compression.ZipArchiveMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, valuetype System.IO.Compression.ZipArchiveMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ZipArchive(System::IO::Stream ^ stream, System::IO::Compression::ZipArchiveMode mode);" />
      <MemberSignature Language="F#" Value="new System.IO.Compression.ZipArchive : System.IO.Stream * System.IO.Compression.ZipArchiveMode -&gt; System.IO.Compression.ZipArchive" Usage="new System.IO.Compression.ZipArchive (stream, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
      </Parameters>
      <Docs>
        <param name="stream">입력 또는 출력 스트림입니다.</param>
        <param name="mode">ZIP 보관 파일이 엔트리를 읽거나 만들기 또는 업데이트하는 데 사용되는지 여부를 나타내는 열거형 값 중 하나입니다.</param>
        <summary>지정된 모드를 사용하여 지정된 스트림에서 <see cref="T:System.IO.Compression.ZipArchive" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 `mode` 매개 변수는 설정 <xref:System.IO.Compression.ZipArchiveMode.Read>, 스트림 읽기를 지원 해야 합니다. 경우는 `mode` 매개 변수는 설정 <xref:System.IO.Compression.ZipArchiveMode.Create>, 스트림이 쓰기를 지원 해야 합니다. 경우는 `mode` 매개 변수는 설정 <xref:System.IO.Compression.ZipArchiveMode.Update>, 읽기, 쓰기 및 검색 스트림을 지원 해야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">스트림이 이미 닫히거나 스트림의 기능이 모드와 일치하지 않는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 값이 잘못된 경우</exception>
        <exception cref="T:System.IO.InvalidDataException">스트림의 콘텐츠는 zip 보관 위치로 해석할 수 없습니다.  
  
또는 
 <paramref name="mode" />는 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />이고 엔트리는 보관 파일에 없거나 손상되어 읽을 수 없습니다.  
  
또는 
 <paramref name="mode" />가 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />이고 엔트리가 너무 커서 메모리에 들어가지 않습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ZipArchive (System.IO.Stream stream, System.IO.Compression.ZipArchiveMode mode, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, valuetype System.IO.Compression.ZipArchiveMode mode, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ZipArchive(System::IO::Stream ^ stream, System::IO::Compression::ZipArchiveMode mode, bool leaveOpen);" />
      <MemberSignature Language="F#" Value="new System.IO.Compression.ZipArchive : System.IO.Stream * System.IO.Compression.ZipArchiveMode * bool -&gt; System.IO.Compression.ZipArchive" Usage="new System.IO.Compression.ZipArchive (stream, mode, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">입력 또는 출력 스트림입니다.</param>
        <param name="mode">ZIP 보관 파일이 엔트리를 읽거나 만들기 또는 업데이트하는 데 사용되는지 여부를 나타내는 열거형 값 중 하나입니다.</param>
        <param name="leaveOpen"><see cref="T:System.IO.Compression.ZipArchive" /> 개체를 삭제한 후 스트림을 열어 두려면 <see langword="true" />이고, 닫으려면 <see langword="false" />입니다.</param>
        <summary>지정된 모드에 대해 지정된 스트림에서 <see cref="T:System.IO.Compression.ZipArchive" /> 클래스의 새 인스턴스를 초기화하고 스트림을 선택적으로 연 상태로 둡니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 `mode` 매개 변수는 설정 <xref:System.IO.Compression.ZipArchiveMode.Read>, 스트림 읽기를 지원 해야 합니다. 경우는 `mode` 매개 변수는 설정 <xref:System.IO.Compression.ZipArchiveMode.Create>, 스트림이 쓰기를 지원 해야 합니다. 경우는 `mode` 매개 변수는 설정 <xref:System.IO.Compression.ZipArchiveMode.Update>, 읽기, 쓰기 및 검색 스트림을 지원 해야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">스트림이 이미 닫히거나 스트림의 기능이 모드와 일치하지 않는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 값이 잘못된 경우</exception>
        <exception cref="T:System.IO.InvalidDataException">스트림의 콘텐츠는 zip 보관 위치로 해석할 수 없습니다.  
  
또는 
 <paramref name="mode" />는 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />이고 엔트리는 보관 파일에 없거나 손상되어 읽을 수 없습니다.  
  
또는 
 <paramref name="mode" />가 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />이고 엔트리가 너무 커서 메모리에 들어가지 않습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ZipArchive (System.IO.Stream stream, System.IO.Compression.ZipArchiveMode mode, bool leaveOpen, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, valuetype System.IO.Compression.ZipArchiveMode mode, bool leaveOpen, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ZipArchive(System::IO::Stream ^ stream, System::IO::Compression::ZipArchiveMode mode, bool leaveOpen, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="new System.IO.Compression.ZipArchive : System.IO.Stream * System.IO.Compression.ZipArchiveMode * bool * System.Text.Encoding -&gt; System.IO.Compression.ZipArchive" Usage="new System.IO.Compression.ZipArchive (stream, mode, leaveOpen, entryNameEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">입력 또는 출력 스트림입니다.</param>
        <param name="mode">ZIP 보관 파일이 엔트리를 읽거나 만들기 또는 업데이트하는 데 사용되는지 여부를 나타내는 열거형 값 중 하나입니다.</param>
        <param name="leaveOpen"><see cref="T:System.IO.Compression.ZipArchive" /> 개체를 삭제한 후 스트림을 열어 두려면 <see langword="true" />이고, 닫으려면 <see langword="false" />입니다.</param>
        <param name="entryNameEncoding">이 아카이브에서 이름을 읽거나 쓰는 동안 사용할 인코딩입니다. 인코딩이 항목 이름에 대해 UTF-8 인코딩을 지원하지 않는 zip 보관 도구와 라이브러리를 사용하여 상호 운용성에 인코딩이 필요할 때만 이 매개 변수에 대한 값을 지정합니다.</param>
        <summary>지정된 모드에 대해 지정된 스트림에서 <see cref="T:System.IO.Compression.ZipArchive" /> 클래스의 새 인스턴스를 초기화하고 항목 이름에 대해 지정된 인코딩을 사용하며 스트림을 선택적으로 연 상태로 둡니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 `mode` 매개 변수는 설정 <xref:System.IO.Compression.ZipArchiveMode.Read>, 스트림 읽기를 지원 해야 합니다. 경우는 `mode` 매개 변수는 설정 <xref:System.IO.Compression.ZipArchiveMode.Create>, 스트림이 쓰기를 지원 해야 합니다. 경우는 `mode` 매개 변수는 설정 <xref:System.IO.Compression.ZipArchiveMode.Update>, 읽기, 쓰기 및 검색 스트림을 지원 해야 합니다.  
  
 읽기 위해 zip 보관 파일을 여는 경우 및 `entryNameEncoding` 로 설정 되어 `null`, 다음 규칙에 따라 디코딩 항목 이름:  
  
-   플래그 (로컬 파일 헤더의 범용 비트 플래그) 인코딩 언어를 설정 하지 않은 경우 현재 시스템 기본값 코드 페이지를 항목 이름 디코딩하는 데 사용 됩니다.  
  
-   언어 인코딩 플래그를 설정 하는 경우 u t F-8은 항목 이름 디코딩하는 데 사용 됩니다.  
  
 읽기 위해 zip 보관 파일을 여는 경우 및 `entryNameEncoding` 이외의 값으로 설정 되어 `null`, 항목 이름은 다음 규칙에 따라 디코딩.  
  
-   언어 인코딩이 플래그는 설정 되지 않은 경우, 지정 된 `entryNameEncoding` 를 항목 이름 디코딩하는 데 사용 됩니다.  
  
-   언어 인코딩 플래그를 설정 하는 경우 u t F-8은 항목 이름 디코딩하는 데 사용 됩니다.  
  
 보관 파일을 작성 하는 경우 및 `entryNameEncoding` 로 설정 된 `null`, 항목 이름은 다음 규칙에 따라 인코딩됩니다.  
  
-   ASCII 범위 밖의 문자를 포함 하는 항목 이름에 대해 언어 인코딩 플래그를 설정 하 고 항목 이름 u t F-8을 사용 하 여 인코딩됩니다.  
  
-   ASCII 문자만 포함 된 항목 이름에 대해 언어 인코딩 플래그를 설정 하지 않으면 및 현재 시스템 기본값 코드 페이지를 사용 하 여 항목 이름은 인코딩됩니다.  
  
 보관 파일을 작성 하는 경우 및 `entryNameEncoding` 이외의 값으로 설정 됩니다 `null`, 지정 된 `entryNameEncoding` 바이트에 항목 이름을 인코딩하는 데 사용 됩니다. 언어 인코딩이 플래그 (로컬 파일 헤더의 범용 비트 플래그)에 지정 된 인코딩의 인코딩을 u t F-8 인 경우에 설정 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">스트림이 이미 닫히거나 스트림의 기능이 모드와 일치하지 않는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 값이 잘못된 경우</exception>
        <exception cref="T:System.IO.InvalidDataException">스트림의 콘텐츠는 zip 보관 위치로 해석할 수 없습니다.  
  
또는 
 <paramref name="mode" />는 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />이고 엔트리는 보관 파일에 없거나 손상되어 읽을 수 없습니다.  
  
또는 
 <paramref name="mode" />가 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />이고 엔트리가 너무 커서 메모리에 들어가지 않습니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateEntry">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zip 보관 파일에 빈 항목을 만듭니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateEntry">
      <MemberSignature Language="C#" Value="public System.IO.Compression.ZipArchiveEntry CreateEntry (string entryName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Compression.ZipArchiveEntry CreateEntry(string entryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.CreateEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateEntry (entryName As String) As ZipArchiveEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Compression::ZipArchiveEntry ^ CreateEntry(System::String ^ entryName);" />
      <MemberSignature Language="F#" Value="member this.CreateEntry : string -&gt; System.IO.Compression.ZipArchiveEntry" Usage="zipArchive.CreateEntry entryName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchiveEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entryName">만들 항목의 이름을 지정하는, 보관 저장소의 루트에 상대적인 경로입니다.</param>
        <summary>ZIP 보관 위치에 지정된 경로 및 항목 이름을 가진 빈 항목을 만듭니다.</summary>
        <returns>ZIP 보관 위치의 빈 항목입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `entryName` 문자열 zip 보관 파일 내에 원하는 항목의 상대 경로 반영 해야 합니다. 사용자가 제공한 문자열에서 제한은 없습니다. 그러나이 파일의 형식은 상대 경로로, 항목, 생성 되지만 zip 보관 파일의 내용을 추출 하면 예외가 발생할 수 있습니다. 지정 된 경로 및 이름을 사용 하 여 항목에 이미 있으면 보관 파일에 있는 두 번째 항목을 동일한 이름과 경로 사용 하 여 생성 됩니다.  
  
 값을 <xref:System.IO.Compression.ZipArchiveEntry.LastWriteTime%2A> 새 항목에 대 한 속성을 현재 시간으로 설정 됩니다. 항목은 기본 압축 알고리즘의 기본 압축 수준을 사용 하 여 압축 됩니다. 사용 하 여 다른 압축 수준을 지정 하려는 경우는 <xref:System.IO.Compression.ZipArchive.CreateEntry%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 항목을 만들고 스트림을 사용 하 여 기록 되도록 하는 방법을 보여 줍니다.  
  
 [!code-csharp[System.IO.Compression.ZipArchiveMode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchivemode/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipArchiveMode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchivemode/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="entryName" />가 <see cref="F:System.String.Empty" />입니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="entryName" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.NotSupportedException">zip 보관 위치가 쓰기를 지원하지 않는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">zip 보관 위치가 삭제되었습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateEntry">
      <MemberSignature Language="C#" Value="public System.IO.Compression.ZipArchiveEntry CreateEntry (string entryName, System.IO.Compression.CompressionLevel compressionLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Compression.ZipArchiveEntry CreateEntry(string entryName, valuetype System.IO.Compression.CompressionLevel compressionLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.CreateEntry(System.String,System.IO.Compression.CompressionLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Compression::ZipArchiveEntry ^ CreateEntry(System::String ^ entryName, System::IO::Compression::CompressionLevel compressionLevel);" />
      <MemberSignature Language="F#" Value="member this.CreateEntry : string * System.IO.Compression.CompressionLevel -&gt; System.IO.Compression.ZipArchiveEntry" Usage="zipArchive.CreateEntry (entryName, compressionLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchiveEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryName" Type="System.String" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
      </Parameters>
      <Docs>
        <param name="entryName">만들 항목의 이름을 지정하는, 보관 저장소의 루트에 상대적인 경로입니다.</param>
        <param name="compressionLevel">항목을 만들 때 속도 또는 압축 효율을 강조할지 여부를 나타내는 열거형 값 중 하나입니다.</param>
        <summary>ZIP 보관 위치에 지정된 항목 이름 및 압축 수준을 가진 빈 항목을 만듭니다.</summary>
        <returns>ZIP 보관 위치의 빈 항목입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `entryName` 문자열 zip 보관 파일 내에 원하는 항목의 상대 경로 반영 해야 합니다. 사용자가 제공한 문자열에서 제한은 없습니다. 그러나이 파일의 형식은 상대 경로로, 항목, 생성 되지만 zip 보관 파일의 내용을 추출 하면 예외가 발생할 수 있습니다. 지정한 이름 가진 항목이 이미 보관 되어 있는, 경우에 동일한 이름의 두 번째 항목을 만들어집니다.  
  
 값을 <xref:System.IO.Compression.ZipArchiveEntry.LastWriteTime%2A> 새 항목에 대 한 속성을 현재 시간으로 설정 됩니다. 설정 된 `compressionLevel` 매개 변수를 <xref:System.IO.Compression.CompressionLevel.Optimal> 하려는 파일 압축을 가능한 한 경우. 설정 된 `compressionLevel` 매개 변수를 <xref:System.IO.Compression.CompressionLevel.Fastest> 압축 작업 시나리오에 충분히 빠르게 완료 됩니다 하지 우려되는 경우에 합니다.  
  
   
  
## Examples  
 다음 예제에서는 최적의 압축 수준을 사용 하 여 항목을 만드는 방법을 보여 줍니다. 또한 스트림을 사용 하 여 새 항목에 씁니다.  
  
 [!code-csharp[System.IO.Compression.ZipArchiveMode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchivemode/cs/program2.cs#2)]
 [!code-vb[System.IO.Compression.ZipArchiveMode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchivemode/vb/program2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="entryName" />가 <see cref="F:System.String.Empty" />입니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="entryName" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.NotSupportedException">zip 보관 위치가 쓰기를 지원하지 않는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">zip 보관 위치가 삭제되었습니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>해당 <see cref="T:System.IO.Compression.ZipArchive" /> 개체에서 사용하는 리소스를 모두 해제합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="zipArchive.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.IO.Compression.ZipArchive" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 보관 파일을 작성 하 고 사용 하는 모든 리소스를 해제 합니다 <xref:System.IO.Compression.ZipArchive> 개체입니다. 사용 하 여 개체를 생성 하지 않는 한는 <xref:System.IO.Compression.ZipArchive.%23ctor%28System.IO.Stream%2CSystem.IO.Compression.ZipArchiveMode%2CSystem.Boolean%29> 집합과 생성자 오버 로드 해당 `leaveOpen` 매개 변수를 `true`, 모든 기본 스트림이 닫힌 되며 후속 쓰기 작업을 위해 더 이상 사용할 수 없습니다.  
  
 이 인스턴스를 사용 하 여 작업을 마쳤으면 <xref:System.IO.Compression.ZipArchive>, 호출 <xref:System.IO.Compression.ZipArchive.Dispose> 이 인스턴스에서 사용 하는 모든 리소스를 해제 합니다. 이에 대 한 추가 참조를 제거 해야 <xref:System.IO.Compression.ZipArchive> 종료에 대 한 활성 상태로 유지 하는 대신 인스턴스의 메모리를 가비지 수집기가 회수할 수 있도록 인스턴스입니다.  
  
 <xref:System.IO.Compression.ZipArchive.Dispose> 호출 된 <xref:System.IO.Compression.ZipArchive.Dispose%28System.Boolean%29> 관리 및 관리 되지 않는 리소스를 해제 하는 코드를 포함 하는 메서드. 자세한 내용은 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="zipArchive.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">보관 파일에 쓰기를 완료하고 관리되지 않은 리소스와 관리되는 리소스를 해제하려면 <see langword="true" />이고, 관리되지 않은 리소스만 해제하려면 <see langword="false" />입니다.</param>
        <summary><see cref="M:System.IO.Compression.ZipArchive.Dispose" /> 클래스의 현재 인스턴스가 사용하는 관리되지 않는 리소스를 해제하기 위해 <see cref="M:System.Object.Finalize" /> 및 <see cref="T:System.IO.Compression.ZipArchive" /> 메서드에 의해 호출되며 선택적으로 보관 파일을 작성하고 관리되는 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `disposing` 로 설정 된 `true`를 사용 하 여 개체를 생성 하지 않는 한 모든 기본 스트림을 닫혀 있고 후속 쓰기 작업을 위해 더 이상 사용할 수는 <xref:System.IO.Compression.ZipArchive.%23ctor%28System.IO.Stream%2CSystem.IO.Compression.ZipArchiveMode%2CSystem.Boolean%29> 생성자 오버 로드 하 고 집합 해당 `leaveOpen` 매개변수`true`.  
  
 이 메서드는 공용만 호출한 <xref:System.IO.Compression.ZipArchive.Dispose> 및 <xref:System.Object.Finalize> 메서드가이 메서드를 직접 호출 하지 않습니다.  
  
 Dispose 패턴의 부울 매개 변수를 구현 하는 경우는 <xref:System.IO.Compression.ZipArchive.Dispose%28System.Boolean%29> 메서드를 다음과 같이 사용 해야 합니다.  
  
-   합니다 <xref:System.IO.Compression.ZipArchive.Dispose> 현재 개체의 메서드를 호출 해야 <xref:System.IO.Compression.ZipArchive.Dispose%28System.Boolean%29> 로 설정 하는 부울 매개 변수를 사용 하 여 `true` 와 관리 되지 않는 리소스를 해제 합니다.  
  
-   합니다 <xref:System.Object.Finalize> 현재 개체의 메서드를 호출 해야 <xref:System.IO.Compression.ZipArchive.Dispose%28System.Boolean%29> 로 설정 하는 부울 매개 변수를 사용 하 여 `false` 관리 되지 않는 리소스만 해제 하려면.
  
 자세한 내용은 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Entries">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.Compression.ZipArchiveEntry&gt; Entries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IO.Compression.ZipArchiveEntry&gt; Entries" />
      <MemberSignature Language="DocId" Value="P:System.IO.Compression.ZipArchive.Entries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Entries As ReadOnlyCollection(Of ZipArchiveEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::Compression::ZipArchiveEntry ^&gt; ^ Entries { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::Compression::ZipArchiveEntry ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Entries : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.Compression.ZipArchiveEntry&gt;" Usage="System.IO.Compression.ZipArchive.Entries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.Compression.ZipArchiveEntry&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 ZIP 아카이브에 있는 항목의 컬렉션을 가져옵니다.</summary>
        <value>현재 zip 보관 위치에 있는 항목의 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.IO.Compression.ZipArchive.Entries%2A> 항목의 전체 컬렉션을 검색할 속성입니다. 사용 된 <xref:System.IO.Compression.ZipArchive.GetEntry%2A> 이름별 단일 항목을 검색 하는 방법입니다.  
  
   
  
## Examples  
 다음 예제에서는 zip 보관 파일을 열고 항목의 컬렉션을 반복 하는 방법을 보여 줍니다.  
  
 [!code-csharp[System.IO.Compression.ZipArchive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipArchive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">zip 보관 위치가 읽기를 지원하지 않는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">zip 보관 위치가 삭제되었습니다.</exception>
        <exception cref="T:System.IO.InvalidDataException">zip 보관 위치가 손상되었으므로 해당 항목을 검색할 수 없습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntry">
      <MemberSignature Language="C#" Value="public System.IO.Compression.ZipArchiveEntry GetEntry (string entryName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Compression.ZipArchiveEntry GetEntry(string entryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.GetEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEntry (entryName As String) As ZipArchiveEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Compression::ZipArchiveEntry ^ GetEntry(System::String ^ entryName);" />
      <MemberSignature Language="F#" Value="member this.GetEntry : string -&gt; System.IO.Compression.ZipArchiveEntry" Usage="zipArchive.GetEntry entryName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchiveEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entryName">검색할 항목을 식별하는, 보관 저장소의 루트에 상대적인 경로입니다.</param>
        <summary>Zip 보관 위치에 지정된 항목에 대한 래퍼를 검색합니다.</summary>
        <returns>보관 저장소의 지정된 항목에 대한 래퍼이거나, 항목이 보관 저장소에 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 보관 파일에 지정 된 이름을 가진 여러 항목이 있으면 첫 번째 반환 됩니다. 항목의 이름을 비교할 `entryName` 서 수 비교를 사용 하 여 합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법의 <xref:System.IO.Compression.ZipArchive.GetEntry%2A> 엔트리를 검색 하는 방법입니다.  
  
 [!code-csharp[System.IO.Compression.ZipArchiveEntry#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchiveentry/cs/program2.cs#2)]
 [!code-vb[System.IO.Compression.ZipArchiveEntry#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchiveentry/vb/program2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="entryName" />가 <see cref="F:System.String.Empty" />입니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="entryName" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.NotSupportedException">zip 보관 위치가 읽기를 지원하지 않는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">zip 보관 위치가 삭제되었습니다.</exception>
        <exception cref="T:System.IO.InvalidDataException">zip 보관 위치가 손상되었으므로 해당 항목을 검색할 수 없습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.IO.Compression.ZipArchiveMode Mode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Compression.ZipArchiveMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.IO.Compression.ZipArchive.Mode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Mode As ZipArchiveMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Compression::ZipArchiveMode Mode { System::IO::Compression::ZipArchiveMode get(); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.IO.Compression.ZipArchiveMode" Usage="System.IO.Compression.ZipArchive.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchiveMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>zip 보관 파일이 엔트리에 대해 수행할 수 있는 동작의 유형을 나타내는 값을 가져옵니다.</summary>
        <value>엔트리에 ZIP을 보관할 수 있는 동작(읽기, 만들기 또는 업데이트) 유형을 설명하는 열거형 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 지정 합니다 <xref:System.IO.Compression.ZipArchive> 속성의 인스턴스를 만들 때의 <xref:System.IO.Compression.ZipArchive> 클래스입니다. 사용 된 <xref:System.IO.Compression.ZipArchive.%23ctor%28System.IO.Stream%2CSystem.IO.Compression.ZipArchiveMode%29> 또는 <xref:System.IO.Compression.ZipArchive.%23ctor%28System.IO.Stream%2CSystem.IO.Compression.ZipArchiveMode%2CSystem.Boolean%29> 생성자에 대 한 값을 제공 하는 <xref:System.IO.Compression.ZipArchive.Mode%2A> 속성.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
