<Type Name="FileRegion" FullName="System.IO.Log.FileRegion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2a060b3e8bf8cf5eff816618c88c043998848cb5" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="37759154" /></Metadata><TypeSignature Language="C#" Value="public sealed class FileRegion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileRegion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.FileRegion" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FileRegion" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileRegion sealed" />
  <TypeSignature Language="F#" Value="type FileRegion = class" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>보관할 파일의 영역을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Log.LogArchiveSnapshot> 개체에는 <xref:System.IO.Log.LogStore>에 일관성 있는 데이터 백업을 생성하는 데 필요한 정보가 포함되어 있습니다. 실제 데이터는 <xref:System.IO.Log.FileRegion> 속성에서 반환하는 <xref:System.IO.Log.LogArchiveSnapshot.ArchiveRegions%2A> 개체의 열거 가능한 컬렉션에 들어 있습니다. 각 <xref:System.IO.Log.FileRegion> 인스턴스는 보관해야 하는 파일의 바이트 시퀀스를 나타냅니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.IO.Log.LogStore> 및 <xref:System.IO.Log.FileRegion> 클래스를 사용하여 로그 저장소를 XML로 보관하는 방법을 보여 줍니다.  
  
 [!code-csharp[FileRegion#0](~/samples/snippets/csharp/VS_Snippets_CFX/fileregion/cs/fileregion.cs#0)]
 [!code-vb[FileRegion#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/fileregion/vb/fileregion.vb#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FileLength">
      <MemberSignature Language="C#" Value="public long FileLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 FileLength" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.FileRegion.FileLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileLength As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long FileLength { long get(); };" />
      <MemberSignature Language="F#" Value="member this.FileLength : int64" Usage="System.IO.Log.FileRegion.FileLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>파일의 길이(바이트)를 가져옵니다.</summary>
        <value>파일의 길이(바이트)입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 파일에 있는 단일 영역의 길이 대신 전체 파일의 길이를 반환합니다. 파일에 있는 영역의 길이는 <xref:System.IO.Log.LogStore.Length%2A> 메서드에서 반환하는 스트림의 <xref:System.IO.Log.FileRegion.GetStream%2A> 속성을 확인하여 찾을 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.IO.Log.LogStore> 및 <xref:System.IO.Log.FileRegion> 클래스를 사용하여 로그 저장소를 XML로 보관하는 방법을 보여 줍니다.  
  
 [!code-csharp[FileRegion#0](~/samples/snippets/csharp/VS_Snippets_CFX/fileregion/cs/fileregion.cs#0)]
 [!code-vb[FileRegion#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/fileregion/vb/fileregion.vb#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.FileRegion.GetStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetStream();" />
      <MemberSignature Language="F#" Value="member this.GetStream : unit -&gt; System.IO.Stream" Usage="fileRegion.GetStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>보관할 데이터를 읽는 데 사용할 수 있는 스트림을 반환합니다.</summary>
        <returns>보관할 데이터를 포함하는 스트림입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 <xref:System.IO.Log.LogStore> 및 <xref:System.IO.Log.FileRegion> 클래스를 사용하여 로그 저장소를 XML로 보관하는 방법을 보여 줍니다.  
  
 [!code-csharp[FileRegion#0](~/samples/snippets/csharp/VS_Snippets_CFX/fileregion/cs/fileregion.cs#0)]
 [!code-vb[FileRegion#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/fileregion/vb/fileregion.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">예기치 못한 I/O 예외 때문에 요청을 수행할 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">작업이 지원되지 않습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
        <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 프로그램을 계속 실행할 수 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">지정된 로그 저장소에 대한 액세스가 운영 체제에서 거부된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public long Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Offset" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.FileRegion.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Offset { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Offset : int64" Usage="System.IO.Log.FileRegion.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터가 시작되는 파일의 오프셋을 가져옵니다.</summary>
        <value>데이터가 시작되는 파일의 오프셋입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 <xref:System.IO.Log.LogStore> 및 <xref:System.IO.Log.FileRegion> 클래스를 사용하여 로그 저장소를 XML로 보관하는 방법을 보여 줍니다.  
  
 [!code-csharp[FileRegion#0](~/samples/snippets/csharp/VS_Snippets_CFX/fileregion/cs/fileregion.cs#0)]
 [!code-vb[FileRegion#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/fileregion/vb/fileregion.vb#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.FileRegion.Path" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Path : string" Usage="System.IO.Log.FileRegion.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 영역을 포함하는 파일의 정규화된 위치를 가져옵니다.</summary>
        <value>이 영역을 포함하는 파일의 정규화된 위치입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 <xref:System.IO.Log.LogStore> 및 <xref:System.IO.Log.FileRegion> 클래스를 사용하여 로그 저장소를 XML로 보관하는 방법을 보여 줍니다.  
  
 [!code-csharp[FileRegion#0](~/samples/snippets/csharp/VS_Snippets_CFX/fileregion/cs/fileregion.cs#0)]
 [!code-vb[FileRegion#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/fileregion/vb/fileregion.vb#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>