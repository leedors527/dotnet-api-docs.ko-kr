<Type Name="IRecordSequence" FullName="System.IO.Log.IRecordSequence">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ffdfe5ac704327420d0d6e8650da73efc0cde964" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57931352" /></Metadata><TypeSignature Language="C#" Value="public interface IRecordSequence : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRecordSequence implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.IRecordSequence" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRecordSequence&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRecordSequence : IDisposable" />
  <TypeSignature Language="F#" Value="type IRecordSequence = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>레코드 시퀀스에 대한 제네릭 인터페이스를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Log.IRecordSequence> 인터페이스는 레코드 기반 스트림에 대한 추상 인터페이스를 제공합니다. <xref:System.IO.Log.IRecordSequence> 인스턴스를 사용하여 로그 레코드를 읽고 쓸 수 있습니다.  
  
 <xref:System.IO.Log.IRecordSequence> 인터페이스는 다음 기능을 제공합니다.  
  
-   <xref:System.IO.Log.IRecordSequence.Append%2A> 메서드를 사용하여 로그 레코드를 추가합니다.  
  
-   <xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> 메서드를 사용하여 추가된 레코드를 읽습니다.  
  
-   <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> 메서드를 사용하여 특수 재시작 레코드를 씁니다.  
  
-   <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 메서드를 사용하여 가장 최근에 쓴 재시작 레코드에서 재시작 레코드를 읽습니다.  
  
-   <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 사용하여 영속 저장소에 레코드를 플러시합니다.  
  
-   레코드를 추가하기 위한 공간을 예약합니다.  
  
-   로그의 기준을 앞으로 이동하여 로그 공간을 확보합니다.  
  
-   로그의 기준을 여유 공간으로 이동하기 위해 <xref:System.IO.Log.IRecordSequence.TailPinned> 이벤트 알림을 받습니다.  
  
 로그 레코드가 <xref:System.IO.Log.IRecordSequence> 인스턴스에 추가되고 각 로그 레코드에 고유한 시퀀스 번호가 지정됩니다. 시퀀스 번호는 지정된 레코드 시퀀스에서 일정한 값으로 순차적으로 증가합니다. 로그 레코드는 바이트 배열 세그먼트의 <xref:System.IO.Log.IRecordSequence>에 있는 <xref:System.Collections.IList> 인스턴스에 제공되는 불투명 데이터로 구성됩니다.  
  
 <xref:System.IO.Log.IRecordSequence> 인터페이스는 로그 경계에 대한 정보를 제공하는 몇 가지 기본 속성도 노출합니다.  
  
-   <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A> 속성에는 레코드 시퀀스에 있는 유효한 첫 번째 레코드의 시퀀스 번호가 포함되어 있습니다.  
  
-   <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A> 속성에는 마지막으로 추가된 레코드의 시퀀스 번호보다 반드시 큰 시퀀스 번호가 포함되어 있습니다.  
  
-   <xref:System.IO.Log.IRecordSequence.RestartSequenceNumber%2A> 속성에는 마지막으로 기록된 재시작 영역의 시퀀스 번호가 포함되어 있습니다.  
  
-   <xref:System.IO.Log.IRecordSequence.MaximumRecordLength%2A> 속성에는 시퀀스에서 추가하거나 읽을 수 있는 가장 큰 레코드의 크기가 포함되어 있습니다.  
  
-   <xref:System.IO.Log.IRecordSequence.ReservedBytes%2A> 속성에는 이 레코드 시퀀스에서 만든 모든 예약의 총 크기가 포함되어 있습니다.  
  
-   <xref:System.IO.Log.IRecordSequence.RetryAppend%2A> 속성이 `true`로 설정되어 있고 시퀀스에 공간이 없기 때문에 <xref:System.IO.Log.IRecordSequence.Append%2A> 작업이 실패하면 레코드 시퀀스에서 공간을 확보하려고 시도하고 추가 작업을 다시 시도합니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AdvanceBaseSequenceNumber">
      <MemberSignature Language="C#" Value="public void AdvanceBaseSequenceNumber (System.IO.Log.SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AdvanceBaseSequenceNumber(valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AdvanceBaseSequenceNumber (newBaseSequenceNumber As SequenceNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AdvanceBaseSequenceNumber(System::IO::Log::SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member AdvanceBaseSequenceNumber : System.IO.Log.SequenceNumber -&gt; unit" Usage="iRecordSequence.AdvanceBaseSequenceNumber newBaseSequenceNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="newBaseSequenceNumber">레코드 시퀀스의 새 기준 시퀀스 번호입니다.</param>
        <summary>로그의 기준 시퀀스 번호를 앞으로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Log.LogRecordSequence> 인스턴스를 사용하고 로그에서 공간을 확보하기 위해 시퀀스 번호를 앞으로 이동하려고 하면 새 기준 시퀀스 번호가 다른 로그 범위에 있어야 이전 범위가 빈 것으로 표시됩니다. 범위를 부분적으로 해제할 수는 없습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="newBaseSequenceNumber" />이 잘못되었습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="newBaseSequenceNumber" />가 로그에서 활성 상태가 아닌 경우</exception>
        <exception cref="T:System.IO.IOException">시퀀스를 수정하는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스가 꽉 찼습니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Append">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 로그 레코드를 <see cref="T:System.IO.Log.IRecordSequence" />에 씁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="F#" Value="abstract member Append : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="nextUndoRecord">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="previousRecord">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="recordAppendOptions">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 로그 레코드를 <see cref="T:System.IO.Log.IRecordSequence" />에 씁니다.</summary>
        <returns>추가된 로그 레코드의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 일반적으로 이 메서드는 레코드를 쓰기 전에 완료됩니다. 레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">레코드를 추가하는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions);" />
      <MemberSignature Language="F#" Value="abstract member Append : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="nextUndoRecord">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="previousRecord">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="recordAppendOptions">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 로그 레코드를 <see cref="T:System.IO.Log.IRecordSequence" />에 추가합니다.</summary>
        <returns>추가된 로그 레코드의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 일반적으로 이 메서드는 레코드를 쓰기 전에 완료됩니다. 레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">레코드를 추가하는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member Append : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions, reservations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="nextUndoRecord">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="previousRecord">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="recordAppendOptions">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</param>
        <param name="reservations">이 레코드에 사용해야 하는 예약이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 시퀀스에서 이전에 예약된 공간을 사용하여 로그 레코드를 <see cref="T:System.IO.Log.IRecordSequence" />에 추가합니다.</summary>
        <returns>추가된 로그 레코드의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 추가된 레코드는 `reservations` 매개 변수로 지정된 예약을 사용하여 이전에 예약된 공간을 사용합니다. 추가 작업이 성공하면 데이터가 포함될 수 있는 가장 작은 예약 영역을 사용하고 해당 예약 영역이 컬렉션에서 제거됩니다.  
  
 일반적으로 이 메서드는 레코드를 쓰기 전에 완료됩니다. 레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">레코드를 추가하는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Append(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Append(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member Append : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Append (data, nextUndoRecord, previousRecord, recordAppendOptions, reservations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="nextUndoRecord">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="previousRecord">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="recordAppendOptions">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</param>
        <param name="reservations">이 레코드에 사용해야 하는 예약이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 시퀀스에서 이전에 예약된 공간을 사용하여 로그 레코드를 <see cref="T:System.IO.Log.IRecordSequence" />에 추가합니다.</summary>
        <returns>추가된 로그 레코드의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 추가된 레코드는 `reservations` 매개 변수로 지정된 예약을 사용하여 이전에 예약된 공간을 사용합니다. 추가 작업이 성공하면 데이터가 포함될 수 있는 가장 작은 예약 영역을 사용하고 해당 예약 영역이 컬렉션에서 제거됩니다.  
  
 일반적으로 이 메서드는 레코드를 쓰기 전에 완료됩니다. 레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">레코드를 추가하는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber BaseSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber BaseSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.BaseSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber BaseSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.IRecordSequence.BaseSequenceNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 현재 <see cref="T:System.IO.Log.IRecordSequence" />에서 유효한 첫 번째 레코드의 시퀀스 번호를 가져옵니다.</summary>
        <value><see cref="T:System.IO.Log.IRecordSequence" />에서 유효한 레코드에 해당하는 가장 작은 시퀀스 번호입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 유효한 시퀀스 번호는 <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A>보다 크거나 같고 <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>보다 작습니다.  
  
 이 속성의 값은 <xref:System.IO.Log.IRecordSequence.AdvanceBaseSequenceNumber%2A> 또는 <xref:System.IO.Log.IRecordSequence.WriteRestartArea%2A> 메서드를 호출하여 변경할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 속성에 액세스한 경우</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 비동기 추가 작업을 시작합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="nextUndoRecord">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="previousRecord">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="recordAppendOptions">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</param>
        <param name="callback">추가가 완료되면 호출되는 선택적 비동기 콜백입니다.</param>
        <param name="state">이 특정 비동기 추가 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 비동기 추가 작업을 시작합니다.</summary>
        <returns>보류 중일 수 있는 비동기 추가를 나타내는 <see cref="T:System.IAsyncResult" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 메서드에 전달하여 추가 작업을 완료하고 리소스를 적절하게 해제할 수 있도록 해야 합니다. 비동기 추가 중에 오류가 발생한 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndAppend%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.  
  
 `data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 일반적으로 이 메서드는 레코드를 쓰기 전에 완료됩니다. 레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">레코드를 추가하는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="nextUndoRecord">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="previousRecord">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="recordAppendOptions">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</param>
        <param name="callback">추가가 완료되면 호출되는 선택적 비동기 콜백입니다.</param>
        <param name="state">이 특정 비동기 추가 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 시퀀스에서 이전에 예약된 공간을 사용하여 비동기 추가 작업을 시작합니다.</summary>
        <returns>보류 중일 수 있는 비동기 추가를 나타내는 <see cref="T:System.IAsyncResult" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 메서드에 전달하여 추가 작업을 완료하고 리소스를 적절하게 해제할 수 있도록 해야 합니다. 비동기 추가 중에 오류가 발생한 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndAppend%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.  
  
 `data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 일반적으로 이 메서드는 레코드를 쓰기 전에 완료됩니다. 레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">레코드를 추가하는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="nextUndoRecord">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="previousRecord">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="recordAppendOptions">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</param>
        <param name="reservations">이 레코드에 사용해야 하는 예약이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</param>
        <param name="callback">추가가 완료되면 호출되는 선택적 비동기 콜백입니다.</param>
        <param name="state">이 특정 비동기 추가 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 시퀀스에서 이전에 예약된 공간을 사용하여 비동기 추가 작업을 시작합니다.</summary>
        <returns>보류 중일 수 있는 비동기 추가를 나타내는 <see cref="T:System.IAsyncResult" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 메서드에 전달하여 추가 작업을 완료하고 리소스를 적절하게 해제할 수 있도록 해야 합니다. 비동기 추가 중에 오류가 발생한 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndAppend%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.  
  
 `data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 추가된 레코드는 `reservations` 매개 변수로 지정된 예약을 사용하여 이전에 예약된 공간을 사용합니다. 추가 작업이 성공하면 데이터가 포함될 수 있는 가장 작은 예약 영역을 사용하고 해당 예약 영역이 컬렉션에서 제거됩니다.  
  
 일반적으로 이 메서드는 레코드를 쓰기 전에 완료됩니다. 레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">레코드를 추가하는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousUndoRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousUndoRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousUndoRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginAppend (data, nextUndoRecord, previousUndoRecord, recordAppendOptions, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservations" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="nextUndoRecord">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="previousUndoRecord">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="recordAppendOptions">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</param>
        <param name="reservations">이 레코드에 사용해야 하는 예약이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</param>
        <param name="callback">추가가 완료되면 호출되는 선택적 비동기 콜백입니다.</param>
        <param name="state">이 특정 비동기 추가 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 시퀀스에서 이전에 예약된 공간을 사용하여 비동기 추가 작업을 시작합니다.</summary>
        <returns>보류 중일 수 있는 비동기 추가를 나타내는 <see cref="T:System.IAsyncResult" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndAppend%2A> 메서드에 전달하여 추가 작업을 완료하고 리소스를 적절하게 해제할 수 있도록 해야 합니다. 비동기 추가 중에 오류가 발생한 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndAppend%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.  
  
 `data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 추가된 레코드는 `reservations` 매개 변수로 지정된 예약을 사용하여 이전에 예약된 공간을 사용합니다. 추가 작업이 성공하면 데이터가 포함될 수 있는 가장 작은 예약 영역을 사용하고 해당 예약 영역이 컬렉션에서 제거됩니다.  
  
 일반적으로 이 메서드는 레코드를 쓰기 전에 완료됩니다. 레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">레코드를 추가하는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginFlush">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginFlush (System.IO.Log.SequenceNumber sequenceNumber, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginFlush(valuetype System.IO.Log.SequenceNumber sequenceNumber, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginFlush(System::IO::Log::SequenceNumber sequenceNumber, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginFlush : System.IO.Log.SequenceNumber * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginFlush (sequenceNumber, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sequenceNumber">써야 하는 최신 레코드의 시퀀스 번호입니다. 이 <see cref="T:System.IO.Log.SequenceNumber" />가 유효하지 않은 경우 모든 레코드를 써야 합니다.</param>
        <param name="callback">플러시가 완료되면 호출되는 선택적 비동기 콜백입니다.</param>
        <param name="state">이 특정 비동기 플러시 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 시퀀스에서 이전에 예약된 공간을 사용하여 비동기 플러시 작업을 시작합니다.</summary>
        <returns>보류 중일 수 있는 비동기 플러시 작업을 나타내는 <see cref="T:System.IAsyncResult" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndFlush%2A> 메서드에 전달하여 플러시를 완료하고 리소스를 적절하게 해제해야 합니다. 비동기 플러시 중에 오류가 발생하는 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndFlush%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.  
  
 이 메서드를 호출하면 <xref:System.IO.Log.IRecordSequence>에 추가된 모든 레코드가 영속적으로 기록됩니다.  
  
 레코드 시퀀스가 삭제되었거나 잘못된 인수를 전달하는 경우 이 작업 내에서 즉시 예외가 throw됩니다. 비동기 플러시 요청 중에 발생한 오류(예: I/O 요청 중의 디스크 오류)로 인해 <xref:System.IO.Log.IRecordSequence.EndFlush%2A> 메서드를 호출할 때 예외가 throw됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">데이터를 플러시하는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginReserveAndAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 비동기 예약 및 추가 작업을 시작합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReserveAndAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReserveAndAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReserveAndAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReserveAndAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, cli::array &lt;long&gt; ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReserveAndAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="nextUndoRecord">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="previousRecord">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="recordAppendOptions">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</param>
        <param name="reservationCollection">예약을 만들 예약 컬렉션입니다.</param>
        <param name="reservations">만들 예약(바이트)입니다.</param>
        <param name="callback">추가가 완료되면 호출되는 선택적 비동기 콜백입니다.</param>
        <param name="state">이 특정 비동기 추가 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 비동기 예약 및 추가 작업을 시작합니다.</summary>
        <returns>보류 중일 수 있는 이 비동기 작업을 나타내는 <see cref="T:System.IAsyncResult" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 메서드에 전달하여 추가 작업을 완료하고 리소스를 적절하게 해제할 수 있도록 해야 합니다. 비동기 추가 중에 오류가 발생한 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.  
  
 `data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 지정된 예약은 레코드 추가 작업이 포함된 원자 단위 작업에서 제공된 예약 컬렉션에 추가됩니다. 추가가 실패하면 공간이 예약되지 않습니다.  
  
 일반적으로 이 메서드는 레코드를 쓰기 전에 완료될 수 있습니다. 레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.  
  
 레코드 시퀀스가 삭제되었거나 잘못된 인수를 전달하는 경우 이 작업 내에서 즉시 예외가 throw됩니다. 비동기 추가 요청 중에 발생한 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 메서드를 호출할 때 예외로 throw됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">레코드를 추가하는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 레코드를 포함하거나 예약을 만들 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReserveAndAppend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReserveAndAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReserveAndAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReserveAndAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, cli::array &lt;long&gt; ^ reservations, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReserveAndAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="nextUndoRecord">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="previousRecord">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="recordAppendOptions">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</param>
        <param name="reservationCollection">예약을 만들 예약 컬렉션입니다.</param>
        <param name="reservations">만들 예약(바이트)입니다.</param>
        <param name="callback">추가가 완료되면 호출되는 선택적 비동기 콜백입니다.</param>
        <param name="state">이 특정 비동기 추가 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 비동기 예약 및 추가 작업을 시작합니다.</summary>
        <returns>보류 중일 수 있는 이 비동기 작업을 나타내는 <see cref="T:System.IAsyncResult" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 메서드에 전달하여 추가 작업을 완료하고 리소스를 적절하게 해제할 수 있도록 해야 합니다. 비동기 추가 중에 오류가 발생한 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.  
  
 `data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 지정된 예약은 레코드 추가 작업이 포함된 원자 단위 작업에서 제공된 예약 컬렉션에 추가됩니다. 추가가 실패하면 공간이 예약되지 않습니다.  
  
 일반적으로 이 메서드는 레코드를 쓰기 전에 완료될 수 있습니다. 레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.  
  
 레코드 시퀀스가 삭제되었거나 잘못된 인수를 전달하는 경우 이 작업 내에서 즉시 예외가 throw됩니다. 비동기 추가 요청 중에 발생한 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 메서드를 호출할 때 예외로 throw됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">레코드를 추가하는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 레코드를 포함하거나 예약을 만들 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginWriteRestartArea">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 비동기 재시작 영역 쓰기 작업을 시작합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginWriteRestartArea">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWriteRestartArea (data As ArraySegment(Of Byte), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginWriteRestartArea (data, newBaseSequenceNumber, reservation, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="newBaseSequenceNumber">새 기준 시퀀스 번호입니다. 지정된 시퀀스 번호는 현재 기준 시퀀스 번호보다 크거나 같아야 합니다.</param>
        <param name="reservation">이 재시작 영역에 사용해야 하는 예약이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</param>
        <param name="callback">재시작 영역 쓰기가 완료되면 호출되는 선택적 비동기 콜백입니다.</param>
        <param name="state">이 특정 비동기 재시작 영역 쓰기 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 시퀀스에서 이전에 예약된 공간을 사용하여 비동기 재시작 영역 쓰기 작업을 시작합니다.</summary>
        <returns>보류 중일 수 있는 비동기 재시작 영역 쓰기 작업을 나타내는 <see cref="T:System.IAsyncResult" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 메서드에 전달하여 재시작 영역 쓰기 작업을 완료하고 리소스를 적절하게 해제할 수 있도록 해야 합니다. 비동기 재시작 영역 쓰기 작업 중에 오류가 발생한 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.  
  
 `data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 작업이 성공적으로 완료되면 기준 세그먼트 번호가 업데이트된 것입니다. 새 기준 시퀀스 번호보다 작은 시퀀스 번호를 가진 모든 로그 레코드에 액세스할 수 없습니다.  
  
 <xref:System.IO.Log.ReservationCollection>을 지정하는 경우 쓴 재시작 영역은 컬렉션에 포함된 예약을 사용하여 이전에 예약된 공간을 사용합니다. 메서드가 성공하면 데이터가 포함될 수 있는 가장 작은 예약을 사용하고 해당 예약이 컬렉션에서 제거됩니다.  
  
 레코드 시퀀스가 삭제되었거나 잘못된 인수를 전달하는 경우 이 작업 내에서 즉시 예외가 throw됩니다. 비동기 추가 요청 중에 발생한 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 메서드를 호출할 때 예외로 throw됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginWriteRestartArea">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWriteRestartArea (data As IList(Of ArraySegment(Of Byte)), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRecordSequence.BeginWriteRestartArea (data, newBaseSequenceNumber, reservation, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="newBaseSequenceNumber">새 기준 시퀀스 번호입니다. 지정된 시퀀스 번호는 현재 기준 시퀀스 번호보다 크거나 같아야 합니다.</param>
        <param name="reservation">이 재시작 영역에 사용해야 하는 예약이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</param>
        <param name="callback">재시작 영역 쓰기가 완료되면 호출되는 선택적 비동기 콜백입니다.</param>
        <param name="state">이 특정 비동기 재시작 영역 쓰기 요청을 다른 요청과 구별하는 사용자 제공 개체입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 시퀀스에서 이전에 예약된 공간을 사용하여 비동기 재시작 영역 쓰기 작업을 시작합니다.</summary>
        <returns>보류 중일 수 있는 비동기 재시작 영역 쓰기 작업을 나타내는 <see cref="T:System.IAsyncResult" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드에서 반환된 <xref:System.IAsyncResult>를 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 메서드에 전달하여 재시작 영역 쓰기 작업을 완료하고 리소스를 적절하게 해제할 수 있도록 해야 합니다. 비동기 재시작 영역 쓰기 작업 중에 오류가 발생한 경우 이 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A>를 사용하여 <xref:System.IAsyncResult> 메서드를 호출하기 전에는 예외가 throw되지 않습니다.  
  
 `data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 작업이 성공적으로 완료되면 기준 세그먼트 번호가 업데이트된 것입니다. 새 기준 시퀀스 번호보다 작은 시퀀스 번호를 가진 모든 로그 레코드에 액세스할 수 없습니다.  
  
 <xref:System.IO.Log.ReservationCollection>을 지정하는 경우 쓴 재시작 영역은 컬렉션에 포함된 예약을 사용하여 이전에 예약된 공간을 사용합니다. 메서드가 성공하면 데이터가 포함될 수 있는 가장 작은 예약을 사용하고 해당 예약이 컬렉션에서 제거됩니다.  
  
 레코드 시퀀스가 삭제되었거나 잘못된 인수를 전달하는 경우 이 작업 내에서 즉시 예외가 throw됩니다. 비동기 추가 요청 중에 발생한 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A> 메서드를 호출할 때 예외로 throw됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">재시작 영역을 쓰는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 레코드를 포함할 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReservationCollection">
      <MemberSignature Language="C#" Value="public System.IO.Log.ReservationCollection CreateReservationCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Log.ReservationCollection CreateReservationCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.CreateReservationCollection" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateReservationCollection () As ReservationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::ReservationCollection ^ CreateReservationCollection();" />
      <MemberSignature Language="F#" Value="abstract member CreateReservationCollection : unit -&gt; System.IO.Log.ReservationCollection" Usage="iRecordSequence.CreateReservationCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.ReservationCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 재정의할 때 새 <see cref="T:System.IO.Log.ReservationCollection" />를 만듭니다.</summary>
        <returns>새로 만든 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndAppend (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndAppend(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndAppend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAppend (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndAppend(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndAppend : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.EndAppend result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">처리 중인 비동기 I/O 요청에 대한 참조입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 비동기 추가 작업을 종료합니다.</summary>
        <returns>추가된 로그 레코드의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 I/O 작업이 완료될 때까지 차단됩니다. 비동기 쓰기 요청 중에 발생하는 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndAppend%2A>를 호출할 때 표시됩니다.  
  
 이 메서드는 <xref:System.IAsyncResult> 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.BeginAppend%2A>마다 정확히 한 번만 호출해야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="EndFlush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndFlush (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndFlush(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndFlush(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndFlush (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndFlush(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndFlush : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.EndFlush result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">처리 중인 비동기 I/O 요청에 대한 참조입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 비동기 플러시 작업을 종료합니다.</summary>
        <returns>마지막으로 쓴 레코드의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 I/O 작업이 완료될 때까지 차단됩니다. 비동기 플러시 요청 중에 발생하는 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndFlush%2A>를 호출할 때 표시됩니다.  
  
 이 메서드는 <xref:System.IAsyncResult> 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.BeginFlush%2A>마다 정확히 한 번만 호출해야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="EndReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndReserveAndAppend (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndReserveAndAppend(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndReserveAndAppend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReserveAndAppend (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndReserveAndAppend(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReserveAndAppend : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.EndReserveAndAppend result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">처리 중인 비동기 I/O 요청에 대한 참조입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 비동기 예약 및 추가 작업을 종료합니다.</summary>
        <returns>추가된 로그 레코드의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 I/O 작업이 완료될 때까지 차단됩니다. 비동기 쓰기 요청 중에 발생하는 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A>를 호출할 때 표시됩니다.  
  
 이 메서드는 <xref:System.IAsyncResult> 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.BeginReserveAndAppend%2A>마다 정확히 한 번만 호출해야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="EndWriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber EndWriteRestartArea (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber EndWriteRestartArea(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.EndWriteRestartArea(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWriteRestartArea (result As IAsyncResult) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber EndWriteRestartArea(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWriteRestartArea : IAsyncResult -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.EndWriteRestartArea result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">처리 중인 비동기 I/O 요청에 대한 참조입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 비동기 재시작 영역 쓰기 작업을 종료합니다.</summary>
        <returns>쓴 로그 레코드의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 I/O 작업이 완료될 때까지 차단됩니다. 비동기 쓰기 요청 중에 발생하는 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndWriteRestartArea%2A>를 호출할 때 표시됩니다.  
  
 이 메서드는 <xref:System.IAsyncResult> 메서드에서 반환된 <xref:System.IO.Log.IRecordSequence.BeginWriteRestartArea%2A>마다 정확히 한 번만 호출해야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 추가된 레코드가 기록됩니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Function Flush () As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 추가된 모든 레코드가 기록됩니다.</summary>
        <returns>마지막으로 쓴 레코드의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출하면 <xref:System.IO.Log.IRecordSequence>에 추가된 모든 레코드가 영속적으로 기록됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">데이터를 플러시하는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber Flush (System.IO.Log.SequenceNumber sequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber Flush(valuetype System.IO.Log.SequenceNumber sequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.Flush(System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber Flush(System::IO::Log::SequenceNumber sequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member Flush : System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.Flush sequenceNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="sequenceNumber">써야 하는 최신 레코드의 시퀀스 번호입니다. 이 <see cref="T:System.IO.Log.SequenceNumber" />가 유효하지 않은 경우 모든 레코드를 써야 합니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 지정된 시퀀스 번호 이하의 시퀀스 번호를 가진 추가된 모든 레코드가 영속적으로 기록됩니다.</summary>
        <returns>마지막으로 쓴 레코드의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출하면 지정된 시퀀스 번호 이하의 시퀀스 번호를 가진 모든 레코드가 영속적으로 기록됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">데이터를 플러시하는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="LastSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber LastSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber LastSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.LastSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber LastSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.LastSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.IRecordSequence.LastSequenceNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 마지막으로 추가된 레코드보다 큰 시퀀스 번호를 가져옵니다.</summary>
        <value>마지막으로 추가된 레코드보다 큰 시퀀스 번호입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에는 마지막으로 추가된 레코드의 시퀀스 번호보다 반드시 큰 시퀀스 번호가 포함되어 있습니다. 유효한 시퀀스 번호는 <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A>보다 크거나 같고 <xref:System.IO.Log.IRecordSequence.LastSequenceNumber%2A>보다 작습니다.  
  
> [!NOTE]
>  <xref:System.IO.Log.LogRecordSequence> 인스턴스를 사용하는 경우 <xref:System.IO.Log.LogRecordSequence.LastSequenceNumber%2A> 값은 레코드가 로그로 플러시될 때까지 최신이 아닐 수 있습니다. 참조 <xref:System.IO.Log.IRecordSequence.Flush%2A> 고 <xref:System.IO.Log.RecordAppendOptions> 레코드 플러시에 대 한 자세한 내용은 합니다. 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 속성에 액세스한 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="MaximumRecordLength">
      <MemberSignature Language="C#" Value="public long MaximumRecordLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumRecordLength" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.MaximumRecordLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaximumRecordLength As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumRecordLength { long get(); };" />
      <MemberSignature Language="F#" Value="member this.MaximumRecordLength : int64" Usage="System.IO.Log.IRecordSequence.MaximumRecordLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 이 시퀀스에서 추가하거나 읽을 수 있는 가장 큰 레코드의 크기(바이트)를 가져옵니다.</summary>
        <value>이 시퀀스에서 추가하거나 읽을 수 있는 가장 큰 레코드의 크기(바이트)입니다.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 속성에 액세스한 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadLogRecords">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt; ReadLogRecords (System.IO.Log.SequenceNumber start, System.IO.Log.LogRecordEnumeratorType logRecordEnum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogRecord&gt; ReadLogRecords(valuetype System.IO.Log.SequenceNumber start, valuetype System.IO.Log.LogRecordEnumeratorType logRecordEnum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLogRecords (start As SequenceNumber, logRecordEnum As LogRecordEnumeratorType) As IEnumerable(Of LogRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogRecord ^&gt; ^ ReadLogRecords(System::IO::Log::SequenceNumber start, System::IO::Log::LogRecordEnumeratorType logRecordEnum);" />
      <MemberSignature Language="F#" Value="abstract member ReadLogRecords : System.IO.Log.SequenceNumber * System.IO.Log.LogRecordEnumeratorType -&gt; seq&lt;System.IO.Log.LogRecord&gt;" Usage="iRecordSequence.ReadLogRecords (start, logRecordEnum)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="logRecordEnum" Type="System.IO.Log.LogRecordEnumeratorType" />
      </Parameters>
      <Docs>
        <param name="start">읽기가 시작되는 첫 번째 레코드의 시퀀스 번호입니다.</param>
        <param name="logRecordEnum"><see cref="T:System.IO.Log.LogRecordEnumeratorType" />에서 레코드를 읽는 방식(즉 앞으로 또는 뒤로)을 지정하는 유효한 <see cref="T:System.IO.Log.LogRecordSequence" /> 값입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 시퀀스에 있는 레코드의 열거 가능한 컬렉션을 반환합니다.</summary>
        <returns>시퀀스에 있는 레코드의 열거 가능한 컬렉션입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생 클래스에서 재정의되는 경우 시퀀스에 있는 레코드의 열거 가능한 컬렉션을 반환합니다. 열거되는 레코드의 순서는 `logRecordEnum` 매개 변수의 값에 따라 결정됩니다.  
  
   
  
## Examples  
 이 샘플에서는 <xref:System.IO.Log.IRecordSequence.ReadLogRecords%2A> 메서드를 사용하는 방법을 보여 줍니다.  
  
```csharp  
using System;  
 using System.IO;  
 using System.IO.Log;  
  
 class ReadRecordsSample  
 {  
     static SequenceNumber AppendRecord(IRecordSequence sequence,  
                                        string message,  
                                        SequenceNumber user,  
                                        SequenceNumber previous)  
     {  
         MemoryStream data = new MemoryStream();  
         BinaryWriter writer = new BinaryWriter(data);  
         writer.Write(message);  
  
         ArraySegment<byte>[] segments;  
         segments = new ArraySegment<byte>[1];  
         segments[0] = new ArraySegment(data.GetBuffer(),  
                                        0,  
                                        Data.Length);  
  
         return sequence.Append(segments,  
                                user,  
                                previous,  
                                WriteFlags.None);  
     }  
  
     public static void Main(string[] args)  
     {  
         IRecordSequence sequence;  
         sequence = new FileIRecordSequence(args[0]);  
  
         SequenceNumber a, b, c, d;  
  
         a = AppendRecord(sequence,  
                          "This is record A",  
                          SequenceNumber.Invalid,  
                          SequenceNumber.Invalid);  
         Console.WriteLine("Record A has sequence number System.IO.Log", a);  
  
         b = AppendRecord(sequence,  
                          "This is record B",  
                          a,  
                          a);  
         Console.WriteLine("Record B has sequence number System.IO.Log", b);  
  
         c = AppendRecord(sequence,  
                          "This is record C",  
                          a,  
                          a);  
         Console.WriteLine("Record C has sequence number System.IO.Log", c);  
  
         d = AppendRecord(sequence,  
                          "This is record D",  
                          b,  
                          c);  
         Console.WriteLine("Record D has sequence number System.IO.Log", d);  
  
         foreach(LogRecord record in  
                 sequence.ReadLogRecords(a, ReadDirection.Forward))  
         {  
             BinaryReader reader = new BinaryReader(record.Data);  
             Console.WriteLine("System.IO.Log: T:System.IO.Log.IRecordSequence",  
                               record.SequenceNumber,  
                               reader.ReadString());  
         }  
  
         foreach(LogRecord record in  
                 sequence.ReadLogRecords(d, ReadDirection.User))  
         {  
             BinaryReader reader = new BinaryReader(record.Data);  
             Console.WriteLine("System.IO.Log: T:System.IO.Log.IRecordSequence",  
                               record.SequenceNumber,  
                               reader.ReadString());  
         }  
  
         foreach(LogRecord record in  
                 sequence.ReadLogRecords(d, ReadDirection.Previous))  
         {  
             BinaryReader reader = new BinaryReader(record.Data);  
             Console.WriteLine("System.IO.Log: T:System.IO.Log.IRecordSequence",  
                               record.SequenceNumber,  
                               reader.ReadString());  
         }  
     }  
       }  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">레코드를 읽는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadRestartAreas">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt; ReadRestartAreas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogRecord&gt; ReadRestartAreas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReadRestartAreas" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadRestartAreas () As IEnumerable(Of LogRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogRecord ^&gt; ^ ReadRestartAreas();" />
      <MemberSignature Language="F#" Value="abstract member ReadRestartAreas : unit -&gt; seq&lt;System.IO.Log.LogRecord&gt;" Usage="iRecordSequence.ReadRestartAreas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 시퀀스에 있는 재시작 영역의 열거 가능한 컬렉션을 반환합니다.</summary>
        <returns>시퀀스에 있는 재시작 영역의 열거 가능한 컬렉션입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 재시작 영역은 시퀀스 번호의 역순(가장 큰 시퀀스 번호부터 가장 작은 시퀀스 번호까지)으로 열거됩니다. 마지막 시퀀스 번호와 기준 시퀀스 번호 사이의 시퀀스 번호를 가진 재시작 영역만 열거됩니다.  
  
> [!NOTE]
>  <xref:System.IO.Log.IRecordSequence.BaseSequenceNumber%2A>가 포함된 로그 범위가 손상되면 이 메서드에서 "예기치 않은 I/O 예외 때문에 요청을 수행할 수 없습니다. 오류 코드 '80070026'을(를) 반환했습니다." 오류 메시지와 함께 <xref:System.IO.IOException>을 다음과 같은 오류 코드가 반환 되었습니다. '80070026'".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">레코드를 읽는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReserveAndAppend">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 단일 예약을 자동으로 만들고 레코드를 시퀀스에 추가합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber ReserveAndAppend (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, params long[] reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber ReserveAndAppend(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber ReserveAndAppend(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, ... cli::array &lt;long&gt; ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member ReserveAndAppend : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.ReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="nextUndoRecord">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="previousRecord">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="recordAppendOptions">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</param>
        <param name="reservationCollection">예약을 만들 컬렉션이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</param>
        <param name="reservations">만들 예약(바이트)입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 단일 예약을 자동으로 만들고 레코드를 시퀀스에 추가합니다.</summary>
        <returns>추가된 로그 레코드의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 지정된 예약은 레코드 추가 작업이 포함된 원자 단위 작업에서 제공된 예약 컬렉션에 추가됩니다. 추가가 실패하면 공간이 예약되지 않습니다.  
  
 일반적으로 이 메서드는 레코드를 쓰기 전에 완료될 수 있습니다. 레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">레코드를 추가하는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 레코드를 포함하거나 예약을 만들 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ReserveAndAppend">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber ReserveAndAppend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, params long[] reservations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber ReserveAndAppend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber nextUndoRecord, valuetype System.IO.Log.SequenceNumber previousRecord, valuetype System.IO.Log.RecordAppendOptions recordAppendOptions, class System.IO.Log.ReservationCollection reservationCollection, int64[] reservations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber ReserveAndAppend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber nextUndoRecord, System::IO::Log::SequenceNumber previousRecord, System::IO::Log::RecordAppendOptions recordAppendOptions, System::IO::Log::ReservationCollection ^ reservationCollection, ... cli::array &lt;long&gt; ^ reservations);" />
      <MemberSignature Language="F#" Value="abstract member ReserveAndAppend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.SequenceNumber * System.IO.Log.RecordAppendOptions * System.IO.Log.ReservationCollection * int64[] -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.ReserveAndAppend (data, nextUndoRecord, previousRecord, recordAppendOptions, reservationCollection, reservations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="nextUndoRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="previousRecord" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="recordAppendOptions" Type="System.IO.Log.RecordAppendOptions" />
        <Parameter Name="reservationCollection" Type="System.IO.Log.ReservationCollection" />
        <Parameter Name="reservations" Type="System.Int64[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="nextUndoRecord">사용자가 지정한 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="previousRecord">이전 순서에서 다음 레코드의 시퀀스 번호입니다.</param>
        <param name="recordAppendOptions">데이터를 쓰는 방법을 지정하는 <see cref="T:System.IO.Log.RecordAppendOptions" />의 유효한 값입니다.</param>
        <param name="reservationCollection">예약을 만들 예약 컬렉션입니다.</param>
        <param name="reservations">만들 예약(바이트)입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 단일 예약을 자동으로 만들고 레코드를 시퀀스에 추가합니다.</summary>
        <returns>추가된 로그 레코드의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `data` 매개 변수에 포함된 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 그러나 레코드를 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 지정된 예약은 레코드 추가 작업이 포함된 원자 단위 작업에서 제공된 예약 컬렉션에 추가됩니다. 추가가 실패하면 공간이 예약되지 않습니다.  
  
 일반적으로 이 메서드는 레코드를 쓰기 전에 완료될 수 있습니다. 레코드가 기록되도록 하려면 <xref:System.IO.Log.RecordAppendOptions.ForceFlush> 매개 변수를 사용하여 `recordAppendOptions` 플래그를 지정하거나, <xref:System.IO.Log.IRecordSequence.Flush%2A> 메서드를 호출합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">레코드를 추가하는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 레코드를 포함하거나 예약을 만들 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ReservedBytes">
      <MemberSignature Language="C#" Value="public long ReservedBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReservedBytes" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.ReservedBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReservedBytes As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReservedBytes { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ReservedBytes : int64" Usage="System.IO.Log.IRecordSequence.ReservedBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 예약된 총 바이트 수를 가져옵니다.</summary>
        <value>이 레코드 시퀀스에서 만들어진 모든 예약의 총 크기입니다.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 속성에 액세스한 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartSequenceNumber">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber RestartSequenceNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.SequenceNumber RestartSequenceNumber" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.RestartSequenceNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RestartSequenceNumber As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::SequenceNumber RestartSequenceNumber { System::IO::Log::SequenceNumber get(); };" />
      <MemberSignature Language="F#" Value="member this.RestartSequenceNumber : System.IO.Log.SequenceNumber" Usage="System.IO.Log.IRecordSequence.RestartSequenceNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 가장 최근에 기록된 재시작 영역의 시퀀스 번호를 가져옵니다.</summary>
        <value>가장 최근에 기록된 재시작 영역의 시퀀스 번호입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 재시작 영역은 클라이언트의 마지막 검사점 작업을 포함하는 정보를 임시로 저장하는 데 사용됩니다. 복구가 필요한 경우 재시작 영역의 구문을 분석하여 마지막 검사점 작업에서 데이터를 모두 검색할 수 있습니다. 이 데이터는 트랜잭션 테이블, 더티 페이지 테이블 및 열린 파일 테이블을 복구 프로세스에서 사용할 수 있도록 초기화합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 속성에 액세스한 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="RetryAppend">
      <MemberSignature Language="C#" Value="public bool RetryAppend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RetryAppend" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.IRecordSequence.RetryAppend" />
      <MemberSignature Language="VB.NET" Value="Public Property RetryAppend As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RetryAppend { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RetryAppend : bool with get, set" Usage="System.IO.Log.IRecordSequence.RetryAppend" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>로그가 꽉 차는 경우 추가 작업이 자동으로 다시 시도되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>로그가 꽉 차는 경우 추가 작업이 자동으로 다시 시도되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 값이 `true`이고 시퀀스에 충분한 공간이 없기 때문에 <xref:System.IO.Log.IRecordSequence.Append%2A> 호출이 실패하면 레코드 시퀀스에서 공간을 확보하려고 시도하고 추가 작업을 다시 시도합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 속성에 액세스한 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="TailPinned">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt; TailPinned;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IO.Log.TailPinnedEventArgs&gt; TailPinned" />
      <MemberSignature Language="DocId" Value="E:System.IO.Log.IRecordSequence.TailPinned" />
      <MemberSignature Language="VB.NET" Value="Event TailPinned As EventHandler(Of TailPinnedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IO::Log::TailPinnedEventArgs ^&gt; ^ TailPinned;" />
      <MemberSignature Language="F#" Value="member this.TailPinned : EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt; " Usage="member this.TailPinned : System.EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IO.Log.TailPinnedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>레코드 시퀀스에서 테일이 앞으로 이동해야 한다고 결정하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 레코드 시퀀스에 공간이 부족하면 이 이벤트를 발생시킬 수 있습니다. 이 이벤트가 발생하면 공간을 확보하기 위해 시퀀스의 테일(즉, 기준 시퀀스 번호)이 앞으로 이동합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRestartArea">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 재시작 영역을 <see cref="T:System.IO.Log.IRecordSequence" />에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 재시작 영역은 클라이언트의 마지막 검사점 작업을 포함하는 정보를 임시로 저장하는 데 사용됩니다. 복구가 필요한 경우 재시작 영역의 구문을 분석하여 마지막 검사점 작업에서 데이터를 모두 검색할 수 있습니다. 이 데이터는 트랜잭션 테이블, 더티 페이지 테이블 및 열린 파일 테이블을 복구 프로세스에서 사용할 수 있도록 초기화합니다. 재시작 영역은 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 메서드를 사용하여 읽을 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte)) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : ArraySegment&lt;byte&gt; -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 재시작 영역을 <see cref="T:System.IO.Log.IRecordSequence" />에 씁니다.</summary>
        <returns>쓴 재시작 영역의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 재시작 영역은 클라이언트의 마지막 검사점 작업을 포함하는 정보를 임시로 저장하는 데 사용됩니다. CLFS(Common Log File System)에서는 적어도 하나의 유효한 영역을 항상 사용할 수 있도록 하기 위해 두 개의 재시작 영역을 유지 관리합니다. 복구가 필요한 경우 CLFS에서는 재시작 영역을 읽고 마지막 검사점 작업에서 데이터를 모두 읽습니다. 이 데이터는 트랜잭션 테이블, 더티 페이지 테이블 및 열린 파일 테이블을 복구 프로세스에서 사용할 수 있도록 초기화합니다.  
  
 재시작 영역은 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 메서드를 사용하여 읽을 수 있습니다.  
  
 바이트 배열 세그먼트의 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 재시작 영역을 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">재시작 영역을 쓰는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 재시작 영역을 포함할 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte))) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 재시작 영역을 <see cref="T:System.IO.Log.IRecordSequence" />에 씁니다.</summary>
        <returns>쓴 재시작 영역의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 재시작 영역은 클라이언트의 마지막 검사점 작업을 포함하는 정보를 임시로 저장하는 데 사용됩니다. 복구가 필요한 경우 재시작 영역의 구문을 분석하여 마지막 검사점 작업에서 데이터를 모두 검색할 수 있습니다. 이 데이터는 트랜잭션 테이블, 더티 페이지 테이블 및 열린 파일 테이블을 복구 프로세스에서 사용할 수 있도록 초기화합니다. 재시작 영역은 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 메서드를 사용하여 읽을 수 있습니다.  
  
 바이트 배열 세그먼트의 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 재시작 영역을 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">재시작 영역을 쓰는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 재시작 영역을 포함할 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte), newBaseSequenceNumber As SequenceNumber) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea (data, newBaseSequenceNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="newBaseSequenceNumber">새 기준 시퀀스 번호입니다. 지정된 시퀀스 번호는 현재 기준 시퀀스 번호보다 크거나 같아야 합니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 재시작 영역을 <see cref="T:System.IO.Log.IRecordSequence" />에 쓰고 기준 시퀀스 번호를 업데이트합니다.</summary>
        <returns>쓴 재시작 영역의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 재시작 영역은 클라이언트의 마지막 검사점 작업을 포함하는 정보를 임시로 저장하는 데 사용됩니다. 복구가 필요한 경우 재시작 영역의 구문을 분석하여 마지막 검사점 작업에서 데이터를 모두 검색할 수 있습니다. 이 데이터는 트랜잭션 테이블, 더티 페이지 테이블 및 열린 파일 테이블을 복구 프로세스에서 사용할 수 있도록 초기화합니다. 재시작 영역은 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 메서드를 사용하여 읽을 수 있습니다.  
  
 재시작 영역이 기록되면 바이트 배열 세그먼트의 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 재시작 영역을 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 이 메서드가 성공적으로 완료되면 기준 세그먼트 번호가 업데이트된 것입니다. 새 기준 시퀀스 번호보다 작은 시퀀스 번호를 가진 모든 로그 레코드에 액세스할 수 없습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">재시작 영역을 쓰는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 재시작 영역을 포함할 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte)), newBaseSequenceNumber As SequenceNumber) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSequenceNumber);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea (data, newBaseSequenceNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="newBaseSequenceNumber">새 기준 시퀀스 번호입니다. 지정된 시퀀스 번호는 현재 기준 시퀀스 번호보다 크거나 같아야 합니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 재시작 영역을 <see cref="T:System.IO.Log.IRecordSequence" />에 쓰고 기준 시퀀스 번호를 업데이트합니다.</summary>
        <returns>쓴 재시작 영역의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 재시작 영역은 클라이언트의 마지막 검사점 작업을 포함하는 정보를 임시로 저장하는 데 사용됩니다. 복구가 필요한 경우 재시작 영역의 구문을 분석하여 마지막 검사점 작업에서 데이터를 모두 검색할 수 있습니다. 이 데이터는 트랜잭션 테이블, 더티 페이지 테이블 및 열린 파일 테이블을 복구 프로세스에서 사용할 수 있도록 초기화합니다. 재시작 영역은 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 메서드를 사용하여 읽을 수 있습니다.  
  
 재시작 영역이 기록되면 바이트 배열 세그먼트의 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 재시작 영역을 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 이 메서드가 성공적으로 완료되면 기준 세그먼트 번호가 업데이트된 것입니다. 새 기준 시퀀스 번호보다 작은 시퀀스 번호를 가진 모든 로그 레코드에 액세스할 수 없습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">재시작 영역을 쓰는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 재시작 영역을 포함할 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment&lt;byte&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As ArraySegment(Of Byte), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(ArraySegment&lt;System::Byte&gt; data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : ArraySegment&lt;byte&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea (data, newBaseSequenceNumber, reservation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="newBaseSequenceNumber">새 기준 시퀀스 번호입니다. 지정된 시퀀스 번호는 현재 기준 시퀀스 번호보다 크거나 같아야 합니다.</param>
        <param name="reservation">이 재시작 영역에 사용해야 하는 예약이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 예약을 사용하여 재시작 영역을 <see cref="T:System.IO.Log.IRecordSequence" />에 쓰고 기준 시퀀스 번호를 업데이트합니다.</summary>
        <returns>쓴 재시작 영역의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 재시작 영역은 클라이언트의 마지막 검사점 작업을 포함하는 정보를 임시로 저장하는 데 사용됩니다. 복구가 필요한 경우 재시작 영역의 구문을 분석하여 마지막 검사점 작업에서 데이터를 모두 검색할 수 있습니다. 이 데이터는 트랜잭션 테이블, 더티 페이지 테이블 및 열린 파일 테이블을 복구 프로세스에서 사용할 수 있도록 초기화합니다. 재시작 영역은 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 메서드를 사용하여 읽을 수 있습니다.  
  
 재시작 영역이 기록되면 바이트 배열 세그먼트의 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 재시작 영역을 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 예약을 지정하는 경우 쓴 재시작 영역은 컬렉션에 포함된 예약을 사용하여 이전에 예약된 공간을 사용합니다. 메서드가 성공하면 데이터가 포함될 수 있는 가장 작은 예약을 사용하고 해당 예약이 컬렉션에서 제거됩니다.  
  
 이 메서드가 성공적으로 완료되면 기준 세그먼트 번호가 업데이트된 것입니다. 새 기준 시퀀스 번호보다 작은 시퀀스 번호를 가진 모든 로그 레코드에 액세스할 수 없습니다.  
  
 레코드 시퀀스가 삭제되었거나 잘못된 인수를 전달하는 경우 이 작업 내에서 즉시 예외가 throw됩니다. 비동기 추가 요청 중에 발생한 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 메서드를 호출할 때 예외로 throw됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">재시작 영역을 쓰는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 재시작 영역을 포함할 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRestartArea">
      <MemberSignature Language="C#" Value="public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; data, System.IO.Log.SequenceNumber newBaseSequenceNumber, System.IO.Log.ReservationCollection reservation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.IO.Log.SequenceNumber WriteRestartArea(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; data, valuetype System.IO.Log.SequenceNumber newBaseSequenceNumber, class System.IO.Log.ReservationCollection reservation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.IRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteRestartArea (data As IList(Of ArraySegment(Of Byte)), newBaseSequenceNumber As SequenceNumber, reservation As ReservationCollection) As SequenceNumber" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Log::SequenceNumber WriteRestartArea(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ data, System::IO::Log::SequenceNumber newBaseSequenceNumber, System::IO::Log::ReservationCollection ^ reservation);" />
      <MemberSignature Language="F#" Value="abstract member WriteRestartArea : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.IO.Log.SequenceNumber * System.IO.Log.ReservationCollection -&gt; System.IO.Log.SequenceNumber" Usage="iRecordSequence.WriteRestartArea (data, newBaseSequenceNumber, reservation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.SequenceNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="newBaseSequenceNumber" Type="System.IO.Log.SequenceNumber" />
        <Parameter Name="reservation" Type="System.IO.Log.ReservationCollection" />
      </Parameters>
      <Docs>
        <param name="data">연결하여 레코드로 추가할 바이트 배열 세그먼트의 목록입니다.</param>
        <param name="newBaseSequenceNumber">새 기준 시퀀스 번호입니다. 지정된 시퀀스 번호는 현재 기준 시퀀스 번호보다 크거나 같아야 합니다.</param>
        <param name="reservation">이 재시작 영역에 사용해야 하는 예약이 포함된 <see cref="T:System.IO.Log.ReservationCollection" />입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 예약을 사용하여 재시작 영역을 <see cref="T:System.IO.Log.IRecordSequence" />에 쓰고 기준 시퀀스 번호를 업데이트합니다.</summary>
        <returns>쓴 재시작 영역의 시퀀스 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 재시작 영역은 클라이언트의 마지막 검사점 작업을 포함하는 정보를 임시로 저장하는 데 사용됩니다. 복구가 필요한 경우 재시작 영역의 구문을 분석하여 마지막 검사점 작업에서 데이터를 모두 검색할 수 있습니다. 이 데이터는 트랜잭션 테이블, 더티 페이지 테이블 및 열린 파일 테이블을 복구 프로세스에서 사용할 수 있도록 초기화합니다. 재시작 영역은 <xref:System.IO.Log.IRecordSequence.ReadRestartAreas%2A> 메서드를 사용하여 읽을 수 있습니다.  
  
 재시작 영역이 기록되면 바이트 배열 세그먼트의 데이터는 레코드로 추가하기 위한 단일 바이트 배열로 연결됩니다. 재시작 영역을 읽을 때 데이터를 배열 세그먼트로 다시 분할할 수 있는 방법은 없습니다.  
  
 예약을 지정하는 경우 쓴 재시작 영역은 컬렉션에 포함된 예약을 사용하여 이전에 예약된 공간을 사용합니다. 메서드가 성공하면 데이터가 포함될 수 있는 가장 작은 예약을 사용하고 해당 예약이 컬렉션에서 제거됩니다.  
  
 이 메서드가 성공적으로 완료되면 기준 세그먼트 번호가 업데이트된 것입니다. 새 기준 시퀀스 번호보다 작은 시퀀스 번호를 가진 모든 로그 레코드에 액세스할 수 없습니다.  
  
 레코드 시퀀스가 삭제되었거나 잘못된 인수를 전달하는 경우 이 작업 내에서 즉시 예외가 throw됩니다. 비동기 추가 요청 중에 발생한 오류(예: I/O 요청 중의 디스크 오류)는 <xref:System.IO.Log.IRecordSequence.EndReserveAndAppend%2A> 메서드를 호출할 때 예외로 throw됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
        <exception cref="T:System.IO.IOException">재시작 영역을 쓰는 동안 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스에서 새 재시작 영역을 포함할 충분한 여유 공간을 만들 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>