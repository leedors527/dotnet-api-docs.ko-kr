<Type Name="LogPolicy" FullName="System.IO.Log.LogPolicy">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b7bafa234b9feebfcca1383b45c3b8555f5c167d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="37758972" /></Metadata><TypeSignature Language="C#" Value="public sealed class LogPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogPolicy extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.LogPolicy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogPolicy" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogPolicy sealed" />
  <TypeSignature Language="F#" Value="type LogPolicy = class" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.IO.Log.LogStore" />와 연결된 정책을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 정책은 <xref:System.IO.Log.LogStore> 인스턴스와 해당 클라이언트가 따라야 할 규칙의 집합입니다. <xref:System.IO.Log.LogPolicy> 인스턴스는 특정 <xref:System.IO.Log.LogStore>와 연결된 정책을 검사하고 수정하는 데 사용됩니다. 정책에서는 허용 가능한 최소 및 최대 로그 크기나 <xref:System.IO.Log.LogStore> 인스턴스가 증가할 수 있는 방법을 설명할 수 있습니다. 또한 <xref:System.IO.Log.LogStore> 인스턴스를 보관할 수 있는지 여부도 제어할 수 있습니다.  
  
 속성을 변경한 후에는 <xref:System.IO.Log.LogPolicy.Commit%2A> 메서드를 사용하여 변경 내용을 <xref:System.IO.Log.LogStore>에 적용해야 합니다. <xref:System.IO.Log.LogPolicy.Refresh%2A> 메서드를 호출하여 변경 내용을 취소하거나 최신 정책을 가져올 수 있습니다.  
  
   
  
## Examples  
 이 예제에서는 <xref:System.IO.Log.LogPolicy> 클래스를 사용하여 로그 레코드 시퀀스에 대한 정책을 설정하는 방법을 보여 줍니다.  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AutoGrow">
      <MemberSignature Language="C#" Value="public bool AutoGrow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGrow" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogPolicy.AutoGrow" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGrow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGrow { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGrow : bool with get, set" Usage="System.IO.Log.LogPolicy.AutoGrow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.IO.Log.LogStore" />가 자동으로 증가할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.IO.Log.LogStore" /> 크기가 자동으로 증가할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 이 예제에서는 <xref:System.IO.Log.LogPolicy> 클래스를 사용하여 로그 레코드 시퀀스에 대한 정책을 설정하는 방법을 보여 줍니다.  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoShrinkPercentage">
      <MemberSignature Language="C#" Value="public int AutoShrinkPercentage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AutoShrinkPercentage" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogPolicy.AutoShrinkPercentage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoShrinkPercentage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AutoShrinkPercentage { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.AutoShrinkPercentage : int with get, set" Usage="System.IO.Log.LogPolicy.AutoShrinkPercentage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.IO.Log.LogStore" />에서 줄일 수 있는 여유 공간의 백분율을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.IO.Log.LogStore" />에서 줄일 수 있는 여유 공간의 백분율입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Log.LogStore>의 여유 공간 크기가 이 속성으로 지정된 크기보다 크면 <xref:System.IO.Log.LogStore> 속성으로 지정된 크기에 도달할 때까지 <xref:System.IO.Log.LogPolicy.MinimumExtentCount%2A>에서 크기를 자동으로 줄입니다.  
  
   
  
## Examples  
 이 예제에서는 <xref:System.IO.Log.LogPolicy> 클래스를 사용하여 로그 레코드 시퀀스에 대한 정책을 설정하는 방법을 보여 줍니다.  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogPolicy.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberSignature Language="F#" Value="member this.Commit : unit -&gt; unit" Usage="logPolicy.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.IO.Log.LogStore" />에 대한 현재 정책으로 이 정책을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 변경한 후에는 <xref:System.IO.Log.LogPolicy.Commit%2A>를 호출하여 변경 내용을 기록해야 합니다.  
  
   
  
## Examples  
 이 예제에서는 <xref:System.IO.Log.LogPolicy> 클래스를 사용하여 로그 레코드 시퀀스에 대한 정책을 설정하는 방법을 보여 줍니다.  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">로그에 설치된 정책 집합이 잘못된 경우  
  
또는 
로그의 정책에 따라 이 작업이 완료되지 못한 경우</exception>
        <exception cref="T:System.IO.IOException">예기치 못한 I/O 예외 때문에 요청을 수행할 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">현재 플랫폼에서 이 정책을 설정할 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
        <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 프로그램을 계속 실행할 수 없는 경우</exception>
        <exception cref="T:System.IO.PathTooLongException">새 범위 접두사가 잘못되었거나 너무 긴 경우. 유효한 접두사를 제공해야 합니다.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스가 꽉 찼습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">지정된 로그 저장소에 대한 액세스가 운영 체제에서 거부된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GrowthRate">
      <MemberSignature Language="C#" Value="public System.IO.Log.PolicyUnit GrowthRate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.PolicyUnit GrowthRate" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogPolicy.GrowthRate" />
      <MemberSignature Language="VB.NET" Value="Public Property GrowthRate As PolicyUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::PolicyUnit GrowthRate { System::IO::Log::PolicyUnit get(); void set(System::IO::Log::PolicyUnit value); };" />
      <MemberSignature Language="F#" Value="member this.GrowthRate : System.IO.Log.PolicyUnit with get, set" Usage="System.IO.Log.LogPolicy.GrowthRate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.PolicyUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.IO.Log.LogStore" />의 자동 증가 비율을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.IO.Log.LogStore" />의 자동 증가 비율입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Log.LogStore>가 꽉 차면 이 정책 값에 따라 추가할 수 있는 공간의 크기가 결정됩니다. 공간을 추가하면 <xref:System.IO.Log.LogStore>의 범위 수가 <xref:System.IO.Log.LogPolicy.MaximumExtentCount%2A>를 초과하는 경우에는 공간이 추가되지 않습니다.  
  
   
  
## Examples  
 이 예제에서는 <xref:System.IO.Log.LogPolicy> 클래스를 사용하여 로그 레코드 시퀀스에 대한 정책을 설정하는 방법을 보여 줍니다.  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumExtentCount">
      <MemberSignature Language="C#" Value="public int MaximumExtentCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumExtentCount" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogPolicy.MaximumExtentCount" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumExtentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaximumExtentCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumExtentCount : int with get, set" Usage="System.IO.Log.LogPolicy.MaximumExtentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.IO.Log.LogExtent" />에 포함될 수 있는 최대 <see cref="T:System.IO.Log.LogStore" /> 인스턴스 수를 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.IO.Log.LogExtent" />에 포함될 수 있는 최대 <see cref="T:System.IO.Log.LogStore" /> 인스턴스 수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 이 예제에서는 <xref:System.IO.Log.LogPolicy> 클래스를 사용하여 로그 레코드 시퀀스에 대한 정책을 설정하는 방법을 보여 줍니다.  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumExtentCount">
      <MemberSignature Language="C#" Value="public int MinimumExtentCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumExtentCount" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogPolicy.MinimumExtentCount" />
      <MemberSignature Language="VB.NET" Value="Public Property MinimumExtentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinimumExtentCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MinimumExtentCount : int with get, set" Usage="System.IO.Log.LogPolicy.MinimumExtentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.IO.Log.LogExtent" />에 포함될 수 있는 최소 <see cref="T:System.IO.Log.LogStore" /> 인스턴스 수를 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.IO.Log.LogExtent" />에 포함될 수 있는 최소 <see cref="T:System.IO.Log.LogStore" /> 인스턴스 수를 지정하는 정수입니다. CLFS를 사용하려면 최소 범위 수가 2개여야 하므로 이 값은 2 이상이어야 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 이 예제에서는 <xref:System.IO.Log.LogPolicy> 클래스를 사용하여 로그 레코드 시퀀스에 대한 정책을 설정하는 방법을 보여 줍니다.  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewExtentPrefix">
      <MemberSignature Language="C#" Value="public string NewExtentPrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewExtentPrefix" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogPolicy.NewExtentPrefix" />
      <MemberSignature Language="VB.NET" Value="Public Property NewExtentPrefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NewExtentPrefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewExtentPrefix : string with get, set" Usage="System.IO.Log.LogPolicy.NewExtentPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>자동으로 만들어진 범위에 대한 접두사 문자열을 가져오거나 설정합니다.</summary>
        <value>자동으로 만들어진 범위에 대한 접두사 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 문자열에는 새 범위가 만들어진 디렉터리의 전체 경로가 포함될 수 있습니다. 범위의 기본 경로는 기본 <xref:System.IO.Log.LogStore> 파일이 포함된 디렉터리입니다.  
  
   
  
## Examples  
 이 예제에서는 <xref:System.IO.Log.LogPolicy> 클래스를 사용하여 로그 레코드 시퀀스에 대한 정책을 설정하는 방법을 보여 줍니다.  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextExtentSuffix">
      <MemberSignature Language="C#" Value="public long NextExtentSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 NextExtentSuffix" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogPolicy.NextExtentSuffix" />
      <MemberSignature Language="VB.NET" Value="Public Property NextExtentSuffix As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long NextExtentSuffix { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.NextExtentSuffix : int64 with get, set" Usage="System.IO.Log.LogPolicy.NextExtentSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>새 범위에 대한 접미사 번호를 가져오거나 설정합니다.</summary>
        <value>새 범위에 대한 접미사 번호입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 이 예제에서는 <xref:System.IO.Log.LogPolicy> 클래스를 사용하여 로그 레코드 시퀀스에 대한 정책을 설정하는 방법을 보여 줍니다.  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PinnedTailThreshold">
      <MemberSignature Language="C#" Value="public System.IO.Log.PolicyUnit PinnedTailThreshold { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Log.PolicyUnit PinnedTailThreshold" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogPolicy.PinnedTailThreshold" />
      <MemberSignature Language="VB.NET" Value="Public Property PinnedTailThreshold As PolicyUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Log::PolicyUnit PinnedTailThreshold { System::IO::Log::PolicyUnit get(); void set(System::IO::Log::PolicyUnit value); };" />
      <MemberSignature Language="F#" Value="member this.PinnedTailThreshold : System.IO.Log.PolicyUnit with get, set" Usage="System.IO.Log.LogPolicy.PinnedTailThreshold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Log.PolicyUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>로그의 기준을 앞으로 이동하기 위해 <see cref="E:System.IO.Log.LogRecordSequence.TailPinned" /> 이벤트에 필요한 공간의 크기를 가져오거나 설정합니다.</summary>
        <value>로그의 기준을 앞으로 이동하기 위해 <see cref="E:System.IO.Log.LogRecordSequence.TailPinned" /> 이벤트에 필요한 공간의 크기입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 공간의 크기는 백분율 단위나 CLFS의 가장 가까운 컨테이너로 반올림된 바이트 단위로 표현될 수 있습니다. 기본값은 35%입니다.  
  
   
  
## Examples  
 이 예제에서는 <xref:System.IO.Log.LogPolicy> 클래스를 사용하여 로그 레코드 시퀀스에 대한 정책을 설정하는 방법을 보여 줍니다.  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogPolicy.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh();" />
      <MemberSignature Language="F#" Value="member this.Refresh : unit -&gt; unit" Usage="logPolicy.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.IO.Log.LogStore" />에 대한 현재 정책을 읽고 수행되었을 수 있는 변경 내용을 모두 취소합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 이 예제에서는 <xref:System.IO.Log.LogPolicy> 클래스를 사용하여 로그 레코드 시퀀스에 대한 정책을 설정하는 방법을 보여 줍니다.  
  
 [!code-csharp[S_UELogRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#2)]
 [!code-vb[S_UELogRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">로그에 설치된 정책 집합이 잘못된 경우  
  
또는 
로그의 정책에 따라 이 작업이 완료되지 못한 경우</exception>
        <exception cref="T:System.IO.IOException">예기치 못한 I/O 예외 때문에 요청을 수행할 수 없는 경우</exception>
        <exception cref="T:System.NotSupportedException">현재 플랫폼에서 이 정책을 설정할 수 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
        <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 프로그램을 계속 실행할 수 없는 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스가 꽉 찼습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">지정된 로그 저장소에 대한 액세스가 운영 체제에서 거부된 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>