<Type Name="ReservationCollection" FullName="System.IO.Log.ReservationCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3af3e1a742555f90bf2bf9a58d5acc17efc5ab90" /><Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/09/2018" /><Meta Name="ms.locfileid" Value="51307962" /></Metadata><TypeSignature Language="C#" Value="public abstract class ReservationCollection : System.Collections.Generic.ICollection&lt;long&gt;, System.Collections.Generic.IEnumerable&lt;long&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ReservationCollection extends System.Object implements class System.Collections.Generic.ICollection`1&lt;int64&gt;, class System.Collections.Generic.IEnumerable`1&lt;int64&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.ReservationCollection" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ReservationCollection&#xA;Implements ICollection(Of Long), IEnumerable(Of Long)" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReservationCollection abstract : System::Collections::Generic::ICollection&lt;long&gt;, System::Collections::Generic::IEnumerable&lt;long&gt;" />
  <TypeSignature Language="F#" Value="type ReservationCollection = class&#xA;    interface ICollection&lt;int64&gt;&#xA;    interface seq&lt;int64&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Int64&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Int64&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>레코드 시퀀스에서 만든 공간 예약의 컬렉션을 관리합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 클래스는 레코드 시퀀스에 만들어진 예약 영역의 집합을 나타냅니다. 컬렉션에 항목을 추가하면 새 예약이 할당됩니다. 컬렉션에서 항목을 제거하면 예약이 해제됩니다.  
  
 애플리케이션에서는 나중에 로그에 쓸 데이터가 있지만 즉시 쓸 수 없을 때 로그 공간을 예약합니다. 예약은 쓸 데이터가 있을 때 데이터를 로그에 쓸 수 있도록 보장합니다. 로그를 사용할 경우 애플리케이션은 주로 마샬링 영역에서 하나 이상의 로그 레코드를 예약합니다. 예약은 레코드를 추가하기 전에 수행해야 합니다.  
  
 예약을 사용하면 데이터가 커밋되기 전에 작업이 완료되도록 보장할 수 있습니다. 그렇지 않으면 변경 사항이 롤백됩니다. 또한 "실행 취소 작업"을 로그에 쓸 수도 있습니다. 또한 "실행 취소 작업"을 로그에 쓰는 데에도 사용할 수 있습니다. 롤백 작업 중에 RM(리소스 관리자)이 중단될 경우 트랜잭션 RM은 원래 상태를 복구할 수 있어야 합니다. RM에서는 예약 영역을 사용함으로써 로그의 공간을 미리 예약할 수 있습니다.  
  
 호출 시 지정된 매개 변수에 따라 <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> 메서드는 공간을 예약하거나 데이터를 추가하거나 두 작업을 모두 수행할 수 있습니다. 트랜잭션에서 작업이 진행되는 동안 애플리케이션에서 실행 취소 정보를 추가하고 보정 레코드를 위한 공간을 예약할 수 있습니다. 롤백 작업 중에 생성된 보정 레코드는 디스크에서 실행 취소된 내용을 나타냅니다. 이 레코드는 미리 예약된 공간을 사용하여 추가됩니다. 따라서 롤백 작업을 수행하는 동안 RM에 로그 공간이 부족해지는 심각한 상태가 발생하지 않습니다. 트랜잭션 중에 로그가 꽉 찰 경우 애플리케이션에서는 영속 데이터를 손상시키지 않고 트랜잭션을 안전하게 롤백할 수 있습니다.  
  
 CLFS는 미리 쓰기 로깅을 위한 ARIES 규격 로깅 시스템입니다. 미리 쓰기 로깅을 수행할 때 애플리케이션은 작업을 수행하기 전에 실행 취소 레코드를 쓰고 롤백 중에 사용할 수 있는 보정 레코드를 쓸 로그 공간의 크기를 예약합니다. 이 예약된 공간은 나중에 보정 레코드를 실제로 쓸 때 사용됩니다.  
  
 애플리케이션에서는 특정 시간에 많은 공간을 예약하거나 액세스할 수 있습니다. 단, 이 두 가지를 동시에 수행할 수는 없습니다. 커밋 레코드가 로그에 기록되면 애플리케이션에서 보정 레코드를 위한 예약을 해제할 수 있습니다. 이 작업은 <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> 또는 <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> 메서드를 호출하여 수행할 수 있습니다. <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> 메서드를 호출하면 작업이 원자성을 유지할 수 있지만 <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> 메서드를 호출하면 그렇게 할 수 없습니다.  
  
 레코드를 비울 때는 이전의 <xref:System.IO.Log.IRecordSequence.ReserveAndAppend%2A> 메서드 호출에서 함께 예약했던 레코드를 비워야 합니다.  
  
> [!NOTE]
>  <xref:System.IO.Log.IRecordSequence> 구현에서 <xref:System.IO.Log.ReservationCollection.MakeReservation%2A> 및 <xref:System.IO.Log.ReservationCollection.FreeReservation%2A> 메서드를 구현하여 실제 예약 할당 및 할당 취소를 수행해야 합니다. 또한 예약된 공간에 레코드를 쓸 때 구현에서 <xref:System.IO.Log.ReservationCollection.ReservationFreed%2A>도 호출해야 합니다.  
  
   
  
## Examples  
 예약은 다음 예제에 나와 있는 것처럼 두 가지 방법으로 수행할 수 있습니다. 확실한 처리를 위해 예제의 방법을 사용할 수 있습니다. 이 작업은 CLFS 기반 <xref:System.IO.Log.LogRecordSequence> 클래스를 사용할 때만 수행할 수 있습니다.  
  
```  
//Using the ReserveAndAppend Method  
ReservationCollection reservations = recordSequence.CreateReservationCollection();  
long[] lengthOfUndoRecords = new long[] { 1000 };  
recordSequence.ReserveAndAppend(recordData,  
                                                     userSqn,  
                                                     previousSqn,  
                                                     RecordSequenceAppendOptions.None,  
                                                     reservations,  
                                                     lengthOfUndoRecords);  
recordSequence.Append(undoRecordData,    // If necessary …  
                                    userSqn,  
                                    previousSqn,  
                                    RecordSequenceAppendOptions.ForceFlush,  
                                    reservations);  
  
// Using the Manual Approach  
ReservationCollection reservations = recordSequence.CreateReservationCollection();  
reservations.Add(lengthOfUndoRecord);  
try  
{  
   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  
}  
catch (Exception)  
{  
   reservations.Remove(lengthOfUndoRecord);  
   throw;  
}  
  
recordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ReservationCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ReservationCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.IO.Log.ReservationCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.Add(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (size As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(long size);" />
      <MemberSignature Language="F#" Value="abstract member Add : int64 -&gt; unit&#xA;override this.Add : int64 -&gt; unit" Usage="reservationCollection.Add size" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">요청된 예약의 크기(바이트)입니다.</param>
        <summary>예약을 할당하고 컬렉션에 추가합니다. 이 메서드는 상속될 수 없습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 수동으로 예약하는 방법을 보여 줍니다. 이 작업은 CLFS 기반 <xref:System.IO.Log.LogRecordSequence> 클래스를 사용할 때만 수행할 수 있습니다.  
  
```  
ReservationCollection reservations = recordSequence.CreateReservationCollection();  
reservations.Add(lengthOfUndoRecord);  
try  
{  
   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  
}  
catch (Exception)  
{  
   reservations.Remove(lengthOfUndoRecord);  
   throw;  
}  
  
recordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="archiveTail" />이 이 시퀀스의 기준 시퀀스 번호와 마지막 시퀀스 번호 사이에 있지 않은 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="size" />가 잘못되었거나 최대 예약 크기를 초과하는 경우</exception>
        <exception cref="T:System.IO.IOException">아카이브 스냅숏을 만들 때 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
        <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 프로그램을 계속 실행할 수 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">지정된 로그 저장소에 대한 액세스가 운영 체제에서 거부된 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스가 꽉 찼습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="reservationCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>컬렉션에 있는 모든 예약을 해제합니다. 이 메서드는 상속될 수 없습니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="size" />가 잘못되었거나 최대 예약 크기를 초과하는 경우</exception>
        <exception cref="T:System.IO.IOException">아카이브 스냅숏을 만들 때 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
        <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 프로그램을 계속 실행할 수 없는 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스가 꽉 찼습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">지정된 로그 저장소에 대한 액세스가 운영 체제에서 거부된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.Contains(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (size As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(long size);" />
      <MemberSignature Language="F#" Value="abstract member Contains : int64 -&gt; bool&#xA;override this.Contains : int64 -&gt; bool" Usage="reservationCollection.Contains size" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">컬렉션에서 찾을 크기입니다.</param>
        <summary>지정된 크기의 예약이 만들어졌는지 여부를 확인합니다. 이 메서드는 상속될 수 없습니다.</summary>
        <returns>지정된 크기의 예약이 하나 이상 만들어졌으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
        <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 프로그램을 계속 실행할 수 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">지정된 로그 저장소에 대한 액세스가 운영 체제에서 거부된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (long[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(int64[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.CopyTo(System.Int64[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Long(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;long&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : int64[] * int -&gt; unit&#xA;override this.CopyTo : int64[] * int -&gt; unit" Usage="reservationCollection.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Int64[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">복사할 대상 배열입니다.</param>
        <param name="arrayIndex">복사를 시작할 배열의 인덱스(0부터 시작)입니다.</param>
        <summary>대상 배열의 지정된 인덱스에서 시작하여 전체 컬렉션을 1차원 배열에 복사합니다. 이 메서드는 상속될 수 없습니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="array" /> 또는 <paramref name="arrayIndex" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" />가 0보다 작거나 <paramref name="array" />의 길이보다 크거나 같은 경우</exception>
        <exception cref="T:System.ArgumentException">지정된 배열에 데이터를 복사할 공간이 충분하지 않은 경우  
  
또는 
 <paramref name="array" />가 요청된 작업에 지원되는 유일한 형식인 1차원 배열이 아닌 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
        <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 프로그램을 계속 실행할 수 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">지정된 로그 저장소에 대한 액세스가 운영 체제에서 거부된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.ReservationCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.IO.Log.ReservationCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컬렉션에 있는 예약의 수를 가져옵니다.</summary>
        <value>컬렉션에 있는 예약의 수입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ReservationCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ReservationCollection ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="reservationCollection.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.IO.Log.ReservationCollection" />이 가비지 컬렉션기에서 제거되기 전에 리소스를 해제할 수 있습니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FreeReservation">
      <MemberSignature Language="C#" Value="protected abstract void FreeReservation (long size);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FreeReservation(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.FreeReservation(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub FreeReservation (size As Long)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void FreeReservation(long size);" />
      <MemberSignature Language="F#" Value="abstract member FreeReservation : int64 -&gt; unit" Usage="reservationCollection.FreeReservation size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">해제할 예약의 크기입니다.</param>
        <summary>파생 클래스에서 재정의된 경우 지정된 크기의 예약을 해제합니다.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><see cref="T:System.IO.Log.ReservationCollection" />에서 상속할 경우 이 메서드를 구현하여 레코드 시퀀스에서 공간을 실제로 해제해야 합니다. 이 메서드가 완료될 때 <see cref="M:System.IO.Log.ReservationCollection.ReservationFreed(System.Int64)" />를 직접 호출하지 않도록 합니다. 이 논리는 자동으로 처리됩니다.  
  
레코드를 비울 때는 이전의 <see cref="Overload:System.IO.Log.IRecordSequence.ReserveAndAppend" /> 메서드 호출에서 함께 예약했던 레코드를 비워야 합니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetBestMatchingReservation">
      <MemberSignature Language="C#" Value="protected long GetBestMatchingReservation (long size);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance int64 GetBestMatchingReservation(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.GetBestMatchingReservation(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetBestMatchingReservation (size As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; long GetBestMatchingReservation(long size);" />
      <MemberSignature Language="F#" Value="member this.GetBestMatchingReservation : int64 -&gt; int64" Usage="reservationCollection.GetBestMatchingReservation size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">일치해야 하는 예약의 크기입니다.</param>
        <summary>파생 클래스에서 재정의된 경우 지정된 크기와 가장 일치하는 예약을 가져옵니다.</summary>
        <returns>지정된 크기보다 크거나 같은 컬렉션의 예약입니다. 그러한 예약이 없는 경우 -1입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 일반적으로 예약된 공간에서 레코드 시퀀스에 레코드를 추가할 때 호출됩니다. 이 메서드에서 반환할 때 반환된 크기의 예약이 컬렉션에서 제거됩니다. 어떤 이유로 인해 예약된 공간이 실제로 액세스되지 않을 경우 <xref:System.IO.Log.ReservationCollection.ReservationMade%2A>이 레코드 시퀀스에서 예약된 공간의 크기를 정확하게 나타내도록 <xref:System.IO.Log.ReservationCollection> 메서드가 호출되어야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;long&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;int64&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;long&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;int64&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;int64&gt;" Usage="reservationCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.IO.Log.ReservationCollection" />를 통해 반복할 수 있는 열거자를 반환합니다. 이 메서드는 상속될 수 없습니다.</summary>
        <returns><see cref="T:System.IO.Log.ReservationCollection" />을 반복할 수 있는 열거자입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">다음 이유 중 하나로 인해 작업이 잘못되었습니다. 
-  열거형이 끝난 경우  
  
-  컬렉션이 수정된 경우  
  
-  열거형이 시작되지 않은 경우 <see cref="M:System.Collections.IEnumerator.MoveNext" />를 호출해야 합니다.</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
        <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 프로그램을 계속 실행할 수 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">지정된 로그 저장소에 대한 액세스가 운영 체제에서 거부된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.ReservationCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.IO.Log.ReservationCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컬렉션이 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
        <value>이 속성은 항상 <see langword="false" />를 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Log.ReservationCollection>은 읽기 전용이 아닙니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeReservation">
      <MemberSignature Language="C#" Value="protected abstract void MakeReservation (long size);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void MakeReservation(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.MakeReservation(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub MakeReservation (size As Long)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void MakeReservation(long size);" />
      <MemberSignature Language="F#" Value="abstract member MakeReservation : int64 -&gt; unit" Usage="reservationCollection.MakeReservation size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">할당할 예약의 크기입니다.</param>
        <summary>파생 클래스에서 재정의된 경우 지정된 크기의 예약을 할당합니다.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><see cref="T:System.IO.Log.ReservationCollection" />에서 상속할 경우 이 메서드를 구현하여 레코드 시퀀스에서 공간을 실제로 예약해야 합니다. 이 메서드가 완료될 때 <see cref="M:System.IO.Log.ReservationCollection.ReservationMade(System.Int64)" />를 직접 호출하지 않도록 합니다. 이 논리는 자동으로 처리됩니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (long item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(int64 item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.Remove(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(long item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : int64 -&gt; bool&#xA;override this.Remove : int64 -&gt; bool" Usage="reservationCollection.Remove item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="item">해제할 예약의 크기입니다.</param>
        <summary>예약이 만들어진 경우 지정된 크기의 예약을 해제합니다. 이 메서드는 상속될 수 없습니다.</summary>
        <returns>지정된 크기의 예약이 발견되어 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 수동으로 예약하는 방법을 보여 줍니다. 이 작업은 CLFS 기반 <xref:System.IO.Log.LogRecordSequence> 클래스를 사용할 때만 수행할 수 있습니다.  
  
```  
ReservationCollection reservations = recordSequence.CreateReservationCollection();  
reservations.Add(lengthOfUndoRecord);  
try  
{  
   recordSequence.Append(recordData, userSqn, previousSqn, RecordAppendOptions.None);  
}  
catch (Exception)  
{  
   reservations.Remove(lengthOfUndoRecord);  
   throw;  
}  
  
recordSequence.Append(undoRecordData, userSqn, previousSqn, RecordAppendOptions.ForceFlush, reservations);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">지정된 예약 컬렉션에서 제공된 레코드에 적합한 크기의 예약을 찾을 수 없는 경우</exception>
        <exception cref="T:System.IO.IOException">아카이브 스냅숏을 만들 때 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
        <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 프로그램을 계속 실행할 수 없는 경우</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">레코드 시퀀스가 꽉 찼습니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">지정된 로그 저장소에 대한 액세스가 운영 체제에서 거부된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ReservationFreed">
      <MemberSignature Language="C#" Value="protected void ReservationFreed (long size);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ReservationFreed(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.ReservationFreed(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ReservationFreed (size As Long)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ReservationFreed(long size);" />
      <MemberSignature Language="F#" Value="member this.ReservationFreed : int64 -&gt; unit" Usage="reservationCollection.ReservationFreed size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">해제된 예약의 크기입니다.</param>
        <summary>파생 클래스에서 재정의된 경우 예약이 해제되었음을 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Log.ReservationCollection>에서 상속할 때 컬렉션에서 제거되는 것 외의 다른 이유로 예약이 해제되면 이 메서드를 호출해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReservationMade">
      <MemberSignature Language="C#" Value="protected void ReservationMade (long size);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ReservationMade(int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.ReservationMade(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ReservationMade (size As Long)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ReservationMade(long size);" />
      <MemberSignature Language="F#" Value="member this.ReservationMade : int64 -&gt; unit" Usage="reservationCollection.ReservationMade size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="size">만들어진 예약의 크기입니다.</param>
        <summary>파생 클래스에서 재정의된 경우 예약이 만들어졌음을 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Log.ReservationCollection>에서 상속할 경우 <xref:System.IO.Log.ReservationCollection.Add%2A>를 호출하지 않고 다른 방법으로 예약을 만들면 이 메서드를 호출해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.ReservationCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.IO.Log.ReservationCollection" />를 통해 반복할 수 있는 열거자를 반환합니다. 이 메서드는 상속될 수 없습니다.</summary>
        <returns><see cref="T:System.IO.Log.ReservationCollection" />을 반복할 수 있는 열거자입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">다음 이유 중 하나로 인해 작업이 잘못되었습니다. 
-  열거형이 끝난 경우  
  
-  컬렉션이 수정된 경우  
  
-  열거형이 시작되지 않은 경우 <see cref="M:System.Collections.IEnumerator.MoveNext" />를 호출해야 합니다.</exception>
        <exception cref="T:System.ObjectDisposedException">시퀀스가 삭제된 후 메서드가 호출된 경우</exception>
        <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 프로그램을 계속 실행할 수 없는 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">지정된 로그 저장소에 대한 액세스가 운영 체제에서 거부된 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>