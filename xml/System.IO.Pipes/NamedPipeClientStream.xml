<Type Name="NamedPipeClientStream" FullName="System.IO.Pipes.NamedPipeClientStream">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2269e0a9e20c5a853354daa11834a510c0c01e8f" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58720045" /></Metadata><TypeSignature Language="C#" Value="public sealed class NamedPipeClientStream : System.IO.Pipes.PipeStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit NamedPipeClientStream extends System.IO.Pipes.PipeStream" />
  <TypeSignature Language="DocId" Value="T:System.IO.Pipes.NamedPipeClientStream" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class NamedPipeClientStream&#xA;Inherits PipeStream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NamedPipeClientStream sealed : System::IO::Pipes::PipeStream" />
  <TypeSignature Language="F#" Value="type NamedPipeClientStream = class&#xA;    inherit PipeStream" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Pipes</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Pipes.PipeStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>동기 및 비동기 읽기/쓰기 작업을 모두 지원하는 명명된 파이프 주위의 <see cref="T:System.IO.Stream" />을 노출합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 명명 된 파이프는 파이프 서버와 하나 이상의 파이프 클라이언트 간의 통신에 대 한 단방향 또는 이중 파이프를 제공합니다. 로컬 또는 네트워크를 통해 명명 된 파이프를 프로세스 간 통신에 사용할 수 있습니다. 여러 단일 파이프 이름을 공유할 수 있습니다 <xref:System.IO.Pipes.NamedPipeClientStream> 개체입니다.  
  
 모든 프로세스는 명명된 된 파이프 서버 또는 클라이언트 또는 둘 다로 작동할 수 있습니다.  
  
> [!NOTE]
>  에 대 한 [!INCLUDE[winxppro](~/includes/winxppro-md.md)] 고 [!INCLUDE[win2kserver](~/includes/win2kserver-md.md)], 최대 10 개의 파이프는 네트워크를 통해 동시에 연결할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 자식 프로세스는 동일한 컴퓨터를 사용 하 여 명명 된 파이프에는 부모 프로세스에서 문자열을 보내는 방법을 보여 줍니다. 이 예제에서는 <xref:System.IO.Pipes.NamedPipeServerStream> 부모 프로세스에는 개체입니다. 합니다 <xref:System.IO.Pipes.NamedPipeServerStream> 개체에는 <xref:System.IO.Pipes.PipeDirection> 의 값 <xref:System.IO.Pipes.PipeDirection.Out>합니다. 대기 후 서버를 <xref:System.IO.Pipes.NamedPipeClientStream> 연결할 자식 프로세스에서 개체입니다. 이 예제에서는 두 프로세스가 동일한 컴퓨터에는 및 <xref:System.IO.Pipes.NamedPipeClientStream> 개체에는 <xref:System.IO.Pipes.PipeDirection> 의 값 <xref:System.IO.Pipes.PipeDirection.In>합니다. 그런 다음, 부모 프로세스는 사용자가 제공한 문자열을 자식 프로세스로 보냅니다. 문자열을 콘솔에 표시 됩니다.  
  
 이 예제에서는 서버 프로세스에 연결 하는 클라이언트 프로세스입니다. 파이프 클라이언트와 서버 모두에 대 한 코드를 포함 한 전체 코드 샘플을 참조 하세요. [방법: 네트워크 프로세스 간 통신에 명명된 파이프 사용](~/docs/standard/io/how-to-use-named-pipes-for-network-interprocess-communication.md)을 참조하세요.  
  
 [!code-csharp[System.IO.Pipes.NamedPipeClientStream_Sample1#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Pipes.NamedPipeClientStream_Sample1/cs/Program.cs#01)]
 [!code-vb[System.IO.Pipes.NamedPipeClientStream_Sample1#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Pipes.NamedPipeClientStream_Sample1/vb/program.vb#01)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamedPipeClientStream (string pipeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pipeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pipeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NamedPipeClientStream(System::String ^ pipeName);" />
      <MemberSignature Language="F#" Value="new System.IO.Pipes.NamedPipeClientStream : string -&gt; System.IO.Pipes.NamedPipeClientStream" Usage="new System.IO.Pipes.NamedPipeClientStream pipeName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pipeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pipeName">파이프의 이름입니다.</param>
        <summary>지정된 파이프 이름을 사용하여 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 다음 기본값을 사용합니다.  
  
-   기본 서버 이름은 "."입니다.  
  
-   기본값 <xref:System.IO.Pipes.PipeDirection> 의 값 <xref:System.IO.Pipes.PipeDirection.InOut>합니다.  
  
-   기본값 <xref:System.IO.Pipes.PipeOptions> 의 값 <xref:System.IO.Pipes.PipeOptions.None>합니다.  
  
-   기본값 <xref:System.Security.Principal.TokenImpersonationLevel> 의 값 <xref:System.Security.Principal.TokenImpersonationLevel.None>합니다.  
  
-   기본값 <xref:System.IO.HandleInheritability> 의 값 <xref:System.IO.HandleInheritability.None>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pipeName" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="pipeName" />이 빈 문자열인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />이 "익명"으로 설정된 경우</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamedPipeClientStream (string serverName, string pipeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string serverName, string pipeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serverName As String, pipeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NamedPipeClientStream(System::String ^ serverName, System::String ^ pipeName);" />
      <MemberSignature Language="F#" Value="new System.IO.Pipes.NamedPipeClientStream : string * string -&gt; System.IO.Pipes.NamedPipeClientStream" Usage="new System.IO.Pipes.NamedPipeClientStream (serverName, pipeName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serverName" Type="System.String" />
        <Parameter Name="pipeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serverName">연결할 원격 컴퓨터의 이름 또는 로컬 컴퓨터를 지정하는 경우 "."입니다.</param>
        <param name="pipeName">파이프의 이름입니다.</param>
        <summary>지정된 파이프 및 서버 이름을 사용하여 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 다음 기본값을 사용합니다.  
  
-   기본값 <xref:System.IO.Pipes.PipeDirection> 의 값 <xref:System.IO.Pipes.PipeDirection.InOut>합니다.  
  
-   기본값 <xref:System.IO.Pipes.PipeOptions> 의 값 <xref:System.IO.Pipes.PipeOptions.None>합니다.  
  
-   기본값 <xref:System.Security.Principal.TokenImpersonationLevel> 의 값 <xref:System.Security.Principal.TokenImpersonationLevel.None>합니다.  
  
-   기본값 <xref:System.IO.HandleInheritability> 의 값 <xref:System.IO.HandleInheritability.None>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pipeName" /> 또는 <paramref name="serverName" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="pipeName" /> 또는 <paramref name="serverName" />가 길이가 0인 문자열인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />이 "익명"으로 설정된 경우</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamedPipeClientStream (string serverName, string pipeName, System.IO.Pipes.PipeDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string serverName, string pipeName, valuetype System.IO.Pipes.PipeDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serverName As String, pipeName As String, direction As PipeDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NamedPipeClientStream(System::String ^ serverName, System::String ^ pipeName, System::IO::Pipes::PipeDirection direction);" />
      <MemberSignature Language="F#" Value="new System.IO.Pipes.NamedPipeClientStream : string * string * System.IO.Pipes.PipeDirection -&gt; System.IO.Pipes.NamedPipeClientStream" Usage="new System.IO.Pipes.NamedPipeClientStream (serverName, pipeName, direction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serverName" Type="System.String" />
        <Parameter Name="pipeName" Type="System.String" />
        <Parameter Name="direction" Type="System.IO.Pipes.PipeDirection" />
      </Parameters>
      <Docs>
        <param name="serverName">연결할 원격 컴퓨터의 이름 또는 로컬 컴퓨터를 지정하는 경우 "."입니다.</param>
        <param name="pipeName">파이프의 이름입니다.</param>
        <param name="direction">파이프의 방향을 결정하는 열거형 값 중 하나입니다.</param>
        <summary>지정된 파이프와 서버 이름 및 지정된 파이프 방향을 사용하여 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 다음 기본값을 사용합니다.  
  
-   기본값 <xref:System.IO.Pipes.PipeOptions> 의 값 <xref:System.IO.Pipes.PipeOptions.None>합니다.  
  
-   기본값 <xref:System.Security.Principal.TokenImpersonationLevel> 의 값 <xref:System.Security.Principal.TokenImpersonationLevel.None>합니다.  
  
-   기본값 <xref:System.IO.HandleInheritability> 의 값 <xref:System.IO.HandleInheritability.None>합니다.  
  
   
  
## Examples  
 다음 예제에서는 명명 된 파이프 하 여 자식 프로세스에는 부모 프로세스에서 문자열을 보내는 방법을 보여 줍니다. 이 예제에서는 <xref:System.IO.Pipes.NamedPipeClientStream> 로컬 컴퓨터의 파이프에 연결 하는 자식 프로세스에는 개체입니다. 서버 예제에서 볼 수 있습니다는 <xref:System.IO.Pipes.NamedPipeServerStream> 클래스입니다. 이 예제는에 대해 제공 된 큰 예제의 일부 합니다 <xref:System.IO.Pipes.NamedPipeServerStream> 고 <xref:System.IO.Pipes.NamedPipeClientStream> 클래스입니다.  
  
 [!code-csharp[System.IO.Pipes.NamedPipeClientStream_Sample1#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Pipes.NamedPipeClientStream_Sample1/cs/Program.cs#01)]
 [!code-vb[System.IO.Pipes.NamedPipeClientStream_Sample1#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Pipes.NamedPipeClientStream_Sample1/vb/program.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pipeName" /> 또는 <paramref name="serverName" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="pipeName" /> 또는 <paramref name="serverName" />가 길이가 0인 문자열인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />이 "익명"으로 설정된 경우  
  
또는 
 <paramref name="direction" />는 유효한 <see cref="T:System.IO.Pipes.PipeDirection" /> 값이 아닙니다.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamedPipeClientStream (System.IO.Pipes.PipeDirection direction, bool isAsync, bool isConnected, Microsoft.Win32.SafeHandles.SafePipeHandle safePipeHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.IO.Pipes.PipeDirection direction, bool isAsync, bool isConnected, class Microsoft.Win32.SafeHandles.SafePipeHandle safePipeHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NamedPipeClientStream(System::IO::Pipes::PipeDirection direction, bool isAsync, bool isConnected, Microsoft::Win32::SafeHandles::SafePipeHandle ^ safePipeHandle);" />
      <MemberSignature Language="F#" Value="new System.IO.Pipes.NamedPipeClientStream : System.IO.Pipes.PipeDirection * bool * bool * Microsoft.Win32.SafeHandles.SafePipeHandle -&gt; System.IO.Pipes.NamedPipeClientStream" Usage="new System.IO.Pipes.NamedPipeClientStream (direction, isAsync, isConnected, safePipeHandle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="direction" Type="System.IO.Pipes.PipeDirection" />
        <Parameter Name="isAsync" Type="System.Boolean" />
        <Parameter Name="isConnected" Type="System.Boolean" />
        <Parameter Name="safePipeHandle" Type="Microsoft.Win32.SafeHandles.SafePipeHandle" />
      </Parameters>
      <Docs>
        <param name="direction">파이프의 방향을 결정하는 열거형 값 중 하나입니다.</param>
        <param name="isAsync">핸들이 비동기 방식으로 열린 경우 <see langword="true" />, 그렇지 않은 경우 <see langword="false" />입니다.</param>
        <param name="isConnected">파이프가 연결된 경우 <see langword="true" />, 그렇지 않은 경우 <see langword="false" />입니다.</param>
        <param name="safePipeHandle">이 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 개체가 캡슐화할 파이프의 SafeHandle입니다.</param>
        <summary>지정된 파이프 방향을 사용하여 지정된 파이프 핸들에 대한 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">스트림이 닫혔습니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="safePipeHandle" />는 유효한 핸들이 아닙니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="safePipeHandle" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="direction" />는 유효한 <see cref="T:System.IO.Pipes.PipeDirection" /> 값이 아닙니다.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamedPipeClientStream (string serverName, string pipeName, System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string serverName, string pipeName, valuetype System.IO.Pipes.PipeDirection direction, valuetype System.IO.Pipes.PipeOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serverName As String, pipeName As String, direction As PipeDirection, options As PipeOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NamedPipeClientStream(System::String ^ serverName, System::String ^ pipeName, System::IO::Pipes::PipeDirection direction, System::IO::Pipes::PipeOptions options);" />
      <MemberSignature Language="F#" Value="new System.IO.Pipes.NamedPipeClientStream : string * string * System.IO.Pipes.PipeDirection * System.IO.Pipes.PipeOptions -&gt; System.IO.Pipes.NamedPipeClientStream" Usage="new System.IO.Pipes.NamedPipeClientStream (serverName, pipeName, direction, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serverName" Type="System.String" />
        <Parameter Name="pipeName" Type="System.String" />
        <Parameter Name="direction" Type="System.IO.Pipes.PipeDirection" />
        <Parameter Name="options" Type="System.IO.Pipes.PipeOptions" />
      </Parameters>
      <Docs>
        <param name="serverName">연결할 원격 컴퓨터의 이름 또는 로컬 컴퓨터를 지정하는 경우 "."입니다.</param>
        <param name="pipeName">파이프의 이름입니다.</param>
        <param name="direction">파이프의 방향을 결정하는 열거형 값 중 하나입니다.</param>
        <param name="options">파이프를 열거나 만드는 방법을 결정하는 열거형 값 중 하나입니다.</param>
        <summary>지정된 파이프와 서버 이름 및 지정된 파이프 방향과 파이프 옵션을 사용하여 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 다음 기본값을 사용합니다.  
  
-   기본값 <xref:System.Security.Principal.TokenImpersonationLevel> 의 값 <xref:System.Security.Principal.TokenImpersonationLevel.None>합니다.  
  
-   기본값 <xref:System.IO.HandleInheritability> 의 값 <xref:System.IO.HandleInheritability.None>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pipeName" /> 또는 <paramref name="serverName" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="pipeName" /> 또는 <paramref name="serverName" />가 길이가 0인 문자열인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />이 "익명"으로 설정된 경우  
  
또는 
 <paramref name="direction" />은 유효한 <see cref="T:System.IO.Pipes.PipeDirection" /> 값이 아닙니다.  
  
또는 
 <paramref name="options" />는 유효한 <see cref="T:System.IO.Pipes.PipeOptions" /> 값이 아닙니다.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamedPipeClientStream (string serverName, string pipeName, System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeOptions options, System.Security.Principal.TokenImpersonationLevel impersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string serverName, string pipeName, valuetype System.IO.Pipes.PipeDirection direction, valuetype System.IO.Pipes.PipeOptions options, valuetype System.Security.Principal.TokenImpersonationLevel impersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serverName As String, pipeName As String, direction As PipeDirection, options As PipeOptions, impersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NamedPipeClientStream(System::String ^ serverName, System::String ^ pipeName, System::IO::Pipes::PipeDirection direction, System::IO::Pipes::PipeOptions options, System::Security::Principal::TokenImpersonationLevel impersonationLevel);" />
      <MemberSignature Language="F#" Value="new System.IO.Pipes.NamedPipeClientStream : string * string * System.IO.Pipes.PipeDirection * System.IO.Pipes.PipeOptions * System.Security.Principal.TokenImpersonationLevel -&gt; System.IO.Pipes.NamedPipeClientStream" Usage="new System.IO.Pipes.NamedPipeClientStream (serverName, pipeName, direction, options, impersonationLevel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serverName" Type="System.String" />
        <Parameter Name="pipeName" Type="System.String" />
        <Parameter Name="direction" Type="System.IO.Pipes.PipeDirection" />
        <Parameter Name="options" Type="System.IO.Pipes.PipeOptions" />
        <Parameter Name="impersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="serverName">연결할 원격 컴퓨터의 이름 또는 로컬 컴퓨터를 지정하는 경우 "."입니다.</param>
        <param name="pipeName">파이프의 이름입니다.</param>
        <param name="direction">파이프의 방향을 결정하는 열거형 값 중 하나입니다.</param>
        <param name="options">파이프를 열거나 만드는 방법을 결정하는 열거형 값 중 하나입니다.</param>
        <param name="impersonationLevel">보안 가장 수준을 결정하는 열거형 값 중 하나입니다.</param>
        <summary>지정된 파이프와 서버 이름, 지정된 파이프 방향, 파이프 옵션 및 보안 가장 수준을 사용하여 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 기본 <xref:System.IO.HandleInheritability> 의 값 <xref:System.IO.HandleInheritability.None>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pipeName" /> 또는 <paramref name="serverName" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="pipeName" /> 또는 <paramref name="serverName" />가 길이가 0인 문자열인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />이 "익명"으로 설정된 경우  
  
또는 
 <paramref name="direction" />은 유효한 <see cref="T:System.IO.Pipes.PipeDirection" /> 값이 아닙니다.  
  
또는 
 <paramref name="options" />은 유효한 <see cref="T:System.IO.Pipes.PipeOptions" /> 값이 아닙니다.  
  
또는 
 <paramref name="impersonationLevel" />는 유효한 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값이 아닙니다.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamedPipeClientStream (string serverName, string pipeName, System.IO.Pipes.PipeAccessRights desiredAccessRights, System.IO.Pipes.PipeOptions options, System.Security.Principal.TokenImpersonationLevel impersonationLevel, System.IO.HandleInheritability inheritability);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string serverName, string pipeName, valuetype System.IO.Pipes.PipeAccessRights desiredAccessRights, valuetype System.IO.Pipes.PipeOptions options, valuetype System.Security.Principal.TokenImpersonationLevel impersonationLevel, valuetype System.IO.HandleInheritability inheritability) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeAccessRights,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serverName As String, pipeName As String, desiredAccessRights As PipeAccessRights, options As PipeOptions, impersonationLevel As TokenImpersonationLevel, inheritability As HandleInheritability)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NamedPipeClientStream(System::String ^ serverName, System::String ^ pipeName, System::IO::Pipes::PipeAccessRights desiredAccessRights, System::IO::Pipes::PipeOptions options, System::Security::Principal::TokenImpersonationLevel impersonationLevel, System::IO::HandleInheritability inheritability);" />
      <MemberSignature Language="F#" Value="new System.IO.Pipes.NamedPipeClientStream : string * string * System.IO.Pipes.PipeAccessRights * System.IO.Pipes.PipeOptions * System.Security.Principal.TokenImpersonationLevel * System.IO.HandleInheritability -&gt; System.IO.Pipes.NamedPipeClientStream" Usage="new System.IO.Pipes.NamedPipeClientStream (serverName, pipeName, desiredAccessRights, options, impersonationLevel, inheritability)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serverName" Type="System.String" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pipeName" Type="System.String" Index="1" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="desiredAccessRights" Type="System.IO.Pipes.PipeAccessRights" Index="2" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.IO.Pipes.PipeOptions" Index="3" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="impersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" Index="4" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="inheritability" Type="System.IO.HandleInheritability" Index="5" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="serverName">연결할 원격 컴퓨터의 이름 또는 로컬 컴퓨터를 지정하는 경우 "."입니다.</param>
        <param name="pipeName">파이프의 이름입니다.</param>
        <param name="desiredAccessRights">파이프에 대해 원하는 액세스 권한을 지정하는 열거형 값 중 하나입니다.</param>
        <param name="options">파이프를 열거나 만드는 방법을 결정하는 열거형 값 중 하나입니다.</param>
        <param name="impersonationLevel">보안 가장 수준을 결정하는 열거형 값 중 하나입니다.</param>
        <param name="inheritability">기본 핸들이 자식 프로세스로 상속되는지 여부를 결정하는 열거형 값 중 하나입니다.</param>
        <summary>지정된 파이프와 서버 이름, 지정된 파이프 옵션, 보안 가장 수준 및 상속 모드를 사용하여 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자에 대 한 파이프 방향에 따라 결정 됩니다는 `desiredAccessRights` 매개 변수입니다. 경우는 `desiredAccessRights` 값이 <xref:System.IO.Pipes.PipeAccessRights.ReadData>, 파이프 방향 됩니다 <xref:System.IO.Pipes.PipeDirection.In>합니다. 경우 값 `desiredAccessRights` 됩니다 <xref:System.IO.Pipes.PipeAccessRights.WriteData>, 파이프 방향 됩니다 <xref:System.IO.Pipes.PipeDirection.Out>합니다. 경우 값 `desiredAccessRights` 모두 포함 <xref:System.IO.Pipes.PipeAccessRights.ReadData> 및 <xref:System.IO.Pipes.PipeAccessRights.WriteData>, 파이프 방향 됩니다 <xref:System.IO.Pipes.PipeDirection.InOut>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pipeName" /> 또는 <paramref name="serverName" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="pipeName" /> 또는 <paramref name="serverName" />가 길이가 0인 문자열인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />이 "익명"으로 설정된 경우  
  
또는 
 <paramref name="options" />은 유효한 <see cref="T:System.IO.Pipes.PipeOptions" /> 값이 아닙니다.  
  
또는 
 <paramref name="impersonationLevel" />은 유효한 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값이 아닙니다.  
  
또는 
 <paramref name="inheritability" />는 유효한 <see cref="T:System.IO.HandleInheritability" /> 값이 아닙니다.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamedPipeClientStream (string serverName, string pipeName, System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeOptions options, System.Security.Principal.TokenImpersonationLevel impersonationLevel, System.IO.HandleInheritability inheritability);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string serverName, string pipeName, valuetype System.IO.Pipes.PipeDirection direction, valuetype System.IO.Pipes.PipeOptions options, valuetype System.Security.Principal.TokenImpersonationLevel impersonationLevel, valuetype System.IO.HandleInheritability inheritability) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serverName As String, pipeName As String, direction As PipeDirection, options As PipeOptions, impersonationLevel As TokenImpersonationLevel, inheritability As HandleInheritability)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NamedPipeClientStream(System::String ^ serverName, System::String ^ pipeName, System::IO::Pipes::PipeDirection direction, System::IO::Pipes::PipeOptions options, System::Security::Principal::TokenImpersonationLevel impersonationLevel, System::IO::HandleInheritability inheritability);" />
      <MemberSignature Language="F#" Value="new System.IO.Pipes.NamedPipeClientStream : string * string * System.IO.Pipes.PipeDirection * System.IO.Pipes.PipeOptions * System.Security.Principal.TokenImpersonationLevel * System.IO.HandleInheritability -&gt; System.IO.Pipes.NamedPipeClientStream" Usage="new System.IO.Pipes.NamedPipeClientStream (serverName, pipeName, direction, options, impersonationLevel, inheritability)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serverName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="pipeName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="direction" Type="System.IO.Pipes.PipeDirection" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="options" Type="System.IO.Pipes.PipeOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="impersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="inheritability" Type="System.IO.HandleInheritability" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="serverName">연결할 원격 컴퓨터의 이름 또는 로컬 컴퓨터를 지정하는 경우 "."입니다.</param>
        <param name="pipeName">파이프의 이름입니다.</param>
        <param name="direction">파이프의 방향을 결정하는 열거형 값 중 하나입니다.</param>
        <param name="options">파이프를 열거나 만드는 방법을 결정하는 열거형 값 중 하나입니다.</param>
        <param name="impersonationLevel">보안 가장 수준을 결정하는 열거형 값 중 하나입니다.</param>
        <param name="inheritability">기본 핸들이 자식 프로세스로 상속되는지 여부를 결정하는 열거형 값 중 하나입니다.</param>
        <summary>지정된 파이프와 서버 이름, 지정된 파이프 방향, 파이프 옵션, 보안 가장 수준 및 상속 모드를 사용하여 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="pipeName" /> 또는 <paramref name="serverName" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="pipeName" /> 또는 <paramref name="serverName" />가 길이가 0인 문자열인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pipeName" />이 "익명"으로 설정된 경우  
  
또는 
 <paramref name="direction" />은 유효한 <see cref="T:System.IO.Pipes.PipeDirection" /> 값이 아닙니다.  
  
또는 
 <paramref name="options" />은 유효한 <see cref="T:System.IO.Pipes.PipeOptions" /> 값이 아닙니다.  
  
또는 
 <paramref name="impersonationLevel" />은 유효한 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 값이 아닙니다.  
  
또는 
 <paramref name="inheritability" />는 유효한 <see cref="T:System.IO.HandleInheritability" /> 값이 아닙니다.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="CheckPipePropertyOperations">
      <MemberSignature Language="C#" Value="protected internal override void CheckPipePropertyOperations ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void CheckPipePropertyOperations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.NamedPipeClientStream.CheckPipePropertyOperations" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub CheckPipePropertyOperations ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void CheckPipePropertyOperations();" />
      <MemberSignature Language="F#" Value="override this.CheckPipePropertyOperations : unit -&gt; unit" Usage="namedPipeClientStream.CheckPipePropertyOperations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Connect">
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>대기 중인 서버에 연결합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.NamedPipeClientStream.Connect" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect();" />
      <MemberSignature Language="F#" Value="member this.Connect : unit -&gt; unit" Usage="namedPipeClientStream.Connect " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>무한 시간 제한 값을 사용하여 대기 중인 서버에 연결합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 합니다 <xref:System.IO.Pipes.NamedPipeClientStream.Connect%28System.Int32%29> 무한 시간 제한 값을 사용 하 여 메서드.  
  
 이 메서드는 파이프 인스턴스를 사용할 수 있게 기다립니다. <xref:System.IO.Pipes.NamedPipeClientStream.Connect%2A> 전에 반환할 수 있습니다 <xref:System.IO.Pipes.NamedPipeServerStream.WaitForConnection%2A> 에서 호출 되는 <xref:System.IO.Pipes.NamedPipeServerStream> 개체를 하지만 <xref:System.IO.Pipes.NamedPipeServerStream.WaitForConnection%2A> 될 때까지 반환 되지 것입니다 <xref:System.IO.Pipes.NamedPipeClientStream.Connect%2A> 반환 했습니다.  
  
 파이프에 기록 된 모든 데이터를 <xref:System.IO.Pipes.NamedPipeClientStream> 개체에 연결 하는 서버가 호출 되기 전에 <xref:System.IO.Pipes.NamedPipeServerStream.WaitForConnection%2A>를 호출 다음에 서버를 사용할 수 <xref:System.IO.Pipes.NamedPipeServerStream.WaitForConnection%2A>입니다.  
  
   
  
## Examples  
 다음 예제에서는 명명 된 파이프 하 여 자식 프로세스에는 부모 프로세스에서 문자열을 보내는 방법을 보여 줍니다. 이 예제에서는 <xref:System.IO.Pipes.NamedPipeClientStream> 로컬 컴퓨터의 파이프에 연결 하는 자식 프로세스에는 개체입니다. 서버 예제에서 볼 수 있습니다는 <xref:System.IO.Pipes.NamedPipeServerStream> 클래스입니다. 이 예제는에 대해 제공 된 큰 예제의 일부 합니다 <xref:System.IO.Pipes.NamedPipeServerStream> 고 <xref:System.IO.Pipes.NamedPipeClientStream> 클래스입니다.  
  
 [!code-csharp[System.IO.Pipes.NamedPipeClientStream_Sample1#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Pipes.NamedPipeClientStream_Sample1/cs/Program.cs#01)]
 [!code-vb[System.IO.Pipes.NamedPipeClientStream_Sample1#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Pipes.NamedPipeClientStream_Sample1/vb/program.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">클라이언트가 이미 연결되어 있습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.NamedPipeClientStream.Connect(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (timeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(int timeout);" />
      <MemberSignature Language="F#" Value="member this.Connect : int -&gt; unit" Usage="namedPipeClientStream.Connect timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="timeout">연결 제한 시간이 초과되기 전에 서버 응답을 기다릴 시간(밀리초)입니다.</param>
        <summary>지정된 시간 제한 기간 내에 대기 서버에 연결합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 파이프 인스턴스를 사용할 수 있게 기다립니다. <xref:System.IO.Pipes.NamedPipeClientStream.Connect%2A> 전에 반환할 수 있습니다 <xref:System.IO.Pipes.NamedPipeServerStream.WaitForConnection%2A> 에서 호출 되는 <xref:System.IO.Pipes.NamedPipeServerStream>, 있지만 <xref:System.IO.Pipes.NamedPipeServerStream.WaitForConnection%2A> 될 때까지 반환 되지 것입니다 <xref:System.IO.Pipes.NamedPipeClientStream.Connect%2A> 반환 했습니다. 설정한 합니다 `timeout` 매개 변수를 <xref:System.Threading.Timeout.Infinite> 무한 시간 제한 값을 지정 합니다.  
  
 파이프에 기록 된 모든 데이터를 <xref:System.IO.Pipes.NamedPipeClientStream> 개체에 연결 하는 서버가 호출 되기 전에 <xref:System.IO.Pipes.NamedPipeServerStream.WaitForConnection%2A>를 호출 다음에 서버를 사용할 수 <xref:System.IO.Pipes.NamedPipeServerStream.WaitForConnection%2A>입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException">지정된 <paramref name="timeout" /> 기간 내에 서버에 연결할 수 없는 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />이 0보다 작고 <see cref="F:System.Threading.Timeout.Infinite" />로 설정되지 않았습니다.</exception>
        <exception cref="T:System.InvalidOperationException">클라이언트가 이미 연결되어 있습니다.</exception>
        <exception cref="T:System.IO.IOException">서버가 다른 클라이언트에 연결되었고 시간 초과 기간이 만료 되었습니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConnectAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>비동기 연결 작업(operation)을 나타내는 작업(task)입니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync();" />
      <MemberSignature Language="F#" Value="member this.ConnectAsync : unit -&gt; System.Threading.Tasks.Task" Usage="namedPipeClientStream.ConnectAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>시간 제한 없이 대기 중인 서버에 비동기 방식으로 연결합니다.</summary>
        <returns>비동기 연결 작업(operation)을 나타내는 작업(task)입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (timeout As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(int timeout);" />
      <MemberSignature Language="F#" Value="member this.ConnectAsync : int -&gt; System.Threading.Tasks.Task" Usage="namedPipeClientStream.ConnectAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="timeout">연결 제한 시간이 초과되기 전에 서버 응답을 기다릴 시간(밀리초)입니다.</param>
        <summary>지정된 시간 제한 내에 대기 중인 서버에 비동기 방식으로 연결합니다.</summary>
        <returns>비동기 연결 작업(operation)을 나타내는 작업(task)입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ConnectAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="namedPipeClientStream.ConnectAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
        <summary>대기 중인 서버에 비동기 방식으로 연결하고 취소 요청을 모니터링합니다.</summary>
        <returns>비동기 연결 작업(operation)을 나타내는 작업(task)입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (int timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(int32 timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(int timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ConnectAsync : int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="namedPipeClientStream.ConnectAsync (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="timeout">연결 제한 시간이 초과되기 전에 서버 응답을 기다릴 시간(밀리초)입니다.</param>
        <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
        <summary>지정된 시간 제한 내에 대기 중인 서버에 비동기 방식으로 연결하고 취소 요청을 모니터링합니다.</summary>
        <returns>비동기 연결 작업(operation)을 나타내는 작업(task)입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NamedPipeClientStream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipes.NamedPipeClientStream.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NamedPipeClientStream ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="namedPipeClientStream.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>가비지 컬렉션에 의해 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 인스턴스가 회수되기 전에 관리되지 않는 리소스를 해제하고 기타 정리 작업을 수행합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfServerInstances">
      <MemberSignature Language="C#" Value="public int NumberOfServerInstances { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfServerInstances" />
      <MemberSignature Language="DocId" Value="P:System.IO.Pipes.NamedPipeClientStream.NumberOfServerInstances" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumberOfServerInstances As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberOfServerInstances { int get(); };" />
      <MemberSignature Language="F#" Value="member this.NumberOfServerInstances : int" Usage="System.IO.Pipes.NamedPipeClientStream.NumberOfServerInstances" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>같은 파이프 이름을 공유하는 서버 인스턴스의 수를 가져옵니다.</summary>
        <value>같은 파이프 이름을 공유하는 서버 인스턴스의 수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에 대 한 서버 인스턴스의 수를 반환 합니다.는 <xref:System.IO.Pipes.NamedPipeServerStream> 개체를 현재 <xref:System.IO.Pipes.NamedPipeClientStream> 개체에 대 한 핸들을가지고 있거나에 연결 되어 있습니다. 하는 경우 현재 <xref:System.IO.Pipes.NamedPipeClientStream> 개체에 명명 된 파이프 서버에 아직 연결 되지 않았거나 현재 파이프 핸들을 아직 설정 하지 않은 경우이 속성이 throw는 <xref:System.InvalidOperationException>합니다.  
  
   
  
## Examples  
 다음 예제에서는 명명 된 파이프 하 여 자식 프로세스에는 부모 프로세스에서 문자열을 보내는 방법을 보여 줍니다. 이 예제에서는 <xref:System.IO.Pipes.NamedPipeClientStream> 개체가 로컬 컴퓨터의 파이프에 연결 하는 자식 프로세스에서 만들어집니다. 서버 예제에서 볼 수 있습니다는 <xref:System.IO.Pipes.NamedPipeServerStream> 클래스입니다. 이 예제는에 대해 제공 된 큰 예제의 일부 합니다 <xref:System.IO.Pipes.NamedPipeServerStream> 고 <xref:System.IO.Pipes.NamedPipeClientStream> 클래스입니다.  
  
 [!code-csharp[System.IO.Pipes.NamedPipeClientStream_Sample1#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Pipes.NamedPipeClientStream_Sample1/cs/Program.cs#01)]
 [!code-vb[System.IO.Pipes.NamedPipeClientStream_Sample1#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Pipes.NamedPipeClientStream_Sample1/vb/program.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">파이프 핸들이 설정되지 않은 경우  
  
또는 
현재 <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> 개체가 아직 <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> 개체에 연결되지 않은 경우</exception>
        <exception cref="T:System.IO.IOException">파이프가 끊어졌거나 I/O 오류가 발생한 경우</exception>
        <exception cref="T:System.ObjectDisposedException">내부 파이프 핸들이 닫혔습니다.</exception>
      </Docs>
    </Member>
  </Members>
</Type>