<Type Name="SecurityToken" FullName="System.IdentityModel.Tokens.SecurityToken">
  <Metadata><Meta Name="ms.openlocfilehash" Value="67881ad20a428df0b74bdede54027b38fd235e07" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58456915" /></Metadata><TypeSignature Language="C#" Value="public abstract class SecurityToken" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SecurityToken extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SecurityToken" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SecurityToken" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityToken abstract" />
  <TypeSignature Language="F#" Value="type SecurityToken = class" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>모든 보안 토큰을 구현하는 데 사용되는 기본 클래스를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인증 자격 증명을 제공하거나 메시지를 보호하려면 보안 토큰을 사용합니다.  
  
 보안 토큰 인증 자격 증명을 암호화 키 자료를 제공 하는 데 사용 하거나 수, 보안 토큰 서비스 (STS)를 주제에 대 한 클레임의 컬렉션에서 발급 한 보안 토큰의 경우. 모든 보안 토큰에서 파생 된 <xref:System.IdentityModel.Tokens.SecurityToken> 클래스입니다.  
  
 .NET 4.5 부터는 Windows Identity Foundation (WIF)는.NET Framework에 완전히 통합 되었습니다 및 WIF에 의해 노출 하는 클래스는 코드에서 보안 토큰을 처리 하는 기본 방법입니다. WIF에서는 보안 토큰으로 serialize 되 고 deserialize 하 고 해당 xml에서 표현 되며 유효성 검사에서 파생 된 클래스를 사용 하 여는 <xref:System.IdentityModel.Tokens.SecurityTokenHandler> 기본 클래스입니다. 뿐 아니라 토큰 올바른지를 확인 하지만 반환 수도 포함 토큰의 유효성을 검사 한 <xref:System.Security.Claims.ClaimsIdentity> 인증 및 권한 부여 결정에 사용할 수 있는 토큰의 인스턴스. <xref:System.Security.Claims.ClaimsIdentity> 토큰 처리기의 구현에 의해 생성 되는 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> 메서드에서 토큰에 내장 된 클레임 에서도 잘 자체를 입력 하는 토큰에 포함 된 클레임입니다.  
  
 WIF는 다음과 같은 유형의 보안 토큰에 대 한 지원을 제공합니다.  
  
-   <xref:System.IdentityModel.Tokens.Saml2SecurityToken>: SAML 2.0 어셜션 기준이 되는 보안 토큰을 나타냅니다. 토큰 유형이이 일반적으로 Ws-trust 또는 WS-페더레이션 보안 토큰 요청 (RST)에 대 한 응답에서 보안 토큰 서비스에 의해 발급 됩니다.  
  
-   <xref:System.IdentityModel.Tokens.SamlSecurityToken>:  SAML 1.1 어설션 기준이 되는 보안 토큰을 나타냅니다. 토큰 유형이이 일반적으로 Ws-trust 또는 WS-페더레이션 보안 토큰 요청 (RST)에 대 한 응답에서 보안 토큰 서비스에 의해 발급 됩니다.  
  
-   <xref:System.IdentityModel.Tokens.KerberosRequestorSecurityToken> 및 <xref:System.IdentityModel.Tokens.KerberosReceiverSecurityToken>: Kerberos 티켓을 수신 하거나 SOAP 메시지를 전송 하는 기준이 되는 보안 토큰을 나타냅니다.  
  
-   <xref:System.IdentityModel.Tokens.RsaSecurityToken>: RSA 알고리즘을 사용하여 만든 키를 기반으로 하는 보안 토큰을 나타냅니다.  
  
-   <xref:System.IdentityModel.Tokens.SessionSecurityToken>: 세션에 대 한 정보를 포함 하는 보안 토큰을 나타냅니다.  
  
-   <xref:System.IdentityModel.Tokens.UserNameSecurityToken>: 사용자 이름 및 암호를 기반으로 하는 보안 토큰을 나타냅니다.  
  
-   <xref:System.IdentityModel.Tokens.WindowsSecurityToken>: Windows 도메인 또는 사용자 계정의 ID를 기반으로 하는 보안 토큰을 나타냅니다.  
  
-   <xref:System.IdentityModel.Tokens.X509SecurityToken>: X.509 인증서를 기반으로 하는 보안 토큰을 나타냅니다.  
  
-   <xref:System.IdentityModel.Tokens.X509WindowsSecurityToken>: Windows 도메인 사용자 또는 로컬 컴퓨터 사용자 계정에 매핑되는 X.509 인증서를 기반으로 하는 보안 토큰을 나타냅니다.  
  
 두 개의 다른 보안 토큰 클래스 <xref:System.IdentityModel.Tokens.GenericXmlSecurityToken> 및 <xref:System.IdentityModel.Tokens.EncryptedSecurityToken>, 일반적인 경우를 처리 하는 데 사용할 수 있습니다.  
  
 세 가지 주요 범주로 나뉩니다. 토큰 보안 대체로:  
  
-   토큰을 수행 하거나 암호화를 참조 하는 키 자료입니다. 예를 들어 합니다 <xref:System.IdentityModel.Tokens.RsaSecurityToken> 고 <xref:System.IdentityModel.Tokens.X509SecurityToken> 형식은이 목적을 위해 종종 사용 됩니다.  
  
-   이미 인증 된 사용자에 대 한 자격 증명을 나타내는 토큰입니다. 예를 들어 합니다 <xref:System.IdentityModel.Tokens.UserNameSecurityToken>, <xref:System.IdentityModel.Tokens.WindowsSecurityToken>, 및 인증서를 사용 하 여 인증 된 사용자의 경우는 <xref:System.IdentityModel.Tokens.X509SecurityToken> 형식입니다.  
  
-   Ws-trust 또는 WS-페더레이션 프로토콜 중 하나를 사용 하 여 보안 토큰 요청에 대 한 응답으로 보안 토큰 서비스 (STS)에서 발급 된 토큰입니다. 반환 된 일반적으로 이러한는 `wst:RequestSecurityTokenResponse` XML 조각입니다. 합니다 <xref:System.IdentityModel.Tokens.Saml2SecurityToken> 및 <xref:System.IdentityModel.Tokens.SamlSecurityToken> 형식은 이러한 토큰을 나타내는 데 자주 사용 됩니다.  
  
 특별 한 토큰 형식에는 <xref:System.IdentityModel.Tokens.SessionSecurityToken>, 활성 또는 수동 시나리오에서 세션을 사용 하는 경우에 보안 주체를 다시 만드는 데 필요한 정보를 포함 합니다.  
  
 기존 토큰 형식에 기능을 추가 하려면 토큰에 추가 하는 새 요소를 지원 하기 위해 특정 형식 및 연결 된 토큰 처리기에서 파생할 수 있습니다. 에 새 토큰 형식에 대 한 지원을 추가 하려면에서 직접 파생 된 <xref:System.IdentityModel.Tokens.SecurityToken> 클래스입니다. 토큰 처리기 클래스에서 파생 시켜 만들 또한 해야이 작업을 수행 하는 경우는 <xref:System.IdentityModel.Tokens.SecurityTokenHandler> 클래스입니다. 어떻게 토큰을 사용 하는 것을 따라도 해야에서 파생 하 여 사용자 지정 토큰 확인자를 만들려면 합니다 <xref:System.IdentityModel.Tokens.IssuerTokenResolver> 도 하나 이상의 사용자 지정 키 식별자 절 형식에서 파생 된 클래스는 <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> 클래스입니다.  
  
   
  
## Examples  
 에 사용 되는 코드 예제는 <xref:System.IdentityModel.Tokens.SecurityToken> 항목에서 수행 되는 `Custom Token` 샘플. 이 샘플의 간단한 웹 토큰 (SWT) 처리를 사용 하도록 설정 하는 사용자 지정 클래스를 제공 합니다. 구현을 포함 한 `SimpleWebToken` 클래스 및 `SimpleWebTokenHandler` SWT 토큰을 지 원하는 다른 클래스 뿐만 아니라 클래스. 이 샘플 및 사용할 수 있는 다른 샘플에 대 한 WIF에 대 한 다운로드 위치에 대 한, 참조 [WIF 코드 샘플 인덱스](~/docs/framework/security/wif-code-sample-index.md)합니다. 다음 코드의 구현을 보여 줍니다는 `SimpleWebToken` 클래스입니다. 이 클래스 확장 <xref:System.IdentityModel.Tokens.SecurityToken>합니다.  
  
 [!code-csharp[WifCustomTokenST#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtokenconstants.cs#1)]  
[!code-csharp[WifCustomTokenST#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>재정의 해야 합니다 <see cref="P:System.IdentityModel.Tokens.SecurityToken.Id" />, <see cref="P:System.IdentityModel.Tokens.SecurityToken.SecurityKeys" />, <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" />, 및 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> 속성입니다. 합니다 <see cref="M:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1" />, <see cref="M:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1" />를 <see cref="M:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />, 및 <see cref="M:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" /> 메서드는 모두 지원 형식의 키 식별자 <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />합니다. 파생된 클래스에서 다른 키 식별자 형식을 지원 하기 위해 이러한 메서드를 재정의 해야 합니다.</para></block>
    <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
    <altmember cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
    <altmember cref="T:System.IdentityModel.Tokens.IssuerTokenResolver" />
    <altmember cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SecurityToken ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SecurityToken();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.IdentityModel.Tokens.SecurityToken" /> 클래스를 초기화하기 위해 파생 클래스의 생성자에서 호출됩니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCreateKeyIdentifierClause&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual bool CanCreateKeyIdentifierClause&lt;T&gt; () where T : System.IdentityModel.Tokens.SecurityKeyIdentifierClause;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanCreateKeyIdentifierClause&lt;(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanCreateKeyIdentifierClause(Of T As SecurityKeyIdentifierClause) () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::IdentityModel::Tokens::SecurityKeyIdentifierClause virtual bool CanCreateKeyIdentifierClause();" />
      <MemberSignature Language="F#" Value="abstract member CanCreateKeyIdentifierClause : unit -&gt; bool (requires 'T :&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause)&#xA;override this.CanCreateKeyIdentifierClause : unit -&gt; bool (requires 'T :&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" Usage="securityToken.CanCreateKeyIdentifierClause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">만들 키 식별자를 지정하는 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />입니다.</typeparam>
        <summary>이 보안 토큰이 지정된 키 식별자를 만들 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <returns><see langword="true" />가 <paramref name="T" /> 형식이면 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 보안 토큰이 특정 키 식별자를 만들 수 있는지 확인하려면 <xref:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause%2A> 메서드를 사용합니다. 키 식별자를 만들려면 <xref:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause%2A> 메서드를 호출합니다.  
  
 기본 구현은 형식의 키 식별자 절을 지원 <xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1" />
        <altmember cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />
      </Docs>
    </Member>
    <Member MemberName="CreateKeyIdentifierClause&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual T CreateKeyIdentifierClause&lt;T&gt; () where T : System.IdentityModel.Tokens.SecurityKeyIdentifierClause;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T CreateKeyIdentifierClause&lt;(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateKeyIdentifierClause(Of T As SecurityKeyIdentifierClause) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::IdentityModel::Tokens::SecurityKeyIdentifierClause virtual T CreateKeyIdentifierClause();" />
      <MemberSignature Language="F#" Value="abstract member CreateKeyIdentifierClause : unit -&gt; 'T (requires 'T :&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause)&#xA;override this.CreateKeyIdentifierClause : unit -&gt; 'T (requires 'T :&gt; System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" Usage="securityToken.CreateKeyIdentifierClause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">만들 키 식별자를 지정하는 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />입니다.</typeparam>
        <summary>지정된 키 식별자 절을 만듭니다.</summary>
        <returns>보안 토큰의 키 식별자 절인 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 보안 토큰이 특정 키 식별자를 만들 수 있는지 확인하려면 <xref:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause%2A> 메서드를 사용합니다. 키 식별자를 만들려면 <xref:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause%2A> 메서드를 호출합니다.  
  
 기본 구현은 형식의 키 식별자 절을 지원 <xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause>합니다. 형식의 키 식별자 절을 하는 경우 <xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause> 를 만들 수 없습니다는 <xref:System.NotSupportedException> throw 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1" />
        <altmember cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public abstract string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityToken.Id" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.IdentityModel.Tokens.SecurityToken.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>보안 토큰의 고유 식별자를 가져옵니다.</summary>
        <value>보안 토큰의 고유 식별자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 보안 토큰이 XML로 serialize되면 보안 토큰의 `Id` 특성이 <xref:System.IdentityModel.Tokens.SecurityToken.Id%2A> 속성의 값으로 설정됩니다.  
  
   
  
## Examples  
 에 사용 되는 코드 예제는 <xref:System.IdentityModel.Tokens.SecurityToken> 항목에서 수행 되는 `Custom Token` 샘플. 이 샘플의 간단한 웹 토큰 (SWT) 처리를 사용 하도록 설정 하는 사용자 지정 클래스를 제공 합니다. 구현을 포함 한 `SimpleWebToken` 클래스 및 `SimpleWebTokenHandler` SWT 토큰을 지 원하는 다른 클래스 뿐만 아니라 클래스. 이 샘플 및 사용할 수 있는 다른 샘플에 대 한 WIF에 대 한 다운로드 위치에 대 한, 참조 [WIF 코드 샘플 인덱스](~/docs/framework/security/wif-code-sample-index.md)합니다. 다음 코드와의 재정의 <xref:System.IdentityModel.Tokens.SecurityToken.Id%2A> 속성입니다.  
  
 [!code-csharp[WifCustomTokenST#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtokenconstants.cs#1)]  
[!code-csharp[WifCustomTokenST#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#3)]  
[!code-csharp[WifCustomTokenST#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>재정의 해야 합니다는 <see cref="P:System.IdentityModel.Tokens.SecurityToken.Id" /> 속성입니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="MatchesKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool MatchesKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MatchesKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MatchesKeyIdentifierClause (keyIdentifierClause As SecurityKeyIdentifierClause) As Boolean" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MatchesKeyIdentifierClause(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ keyIdentifierClause);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="public virtual bool MatchesKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause skiClause);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MatchesKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause skiClause) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MatchesKeyIdentifierClause (skiClause As SecurityKeyIdentifierClause) As Boolean" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MatchesKeyIdentifierClause(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ skiClause);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member MatchesKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; bool&#xA;override this.MatchesKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; bool" Usage="securityToken.MatchesKeyIdentifierClause skiClause" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member MatchesKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; bool&#xA;override this.MatchesKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; bool" Usage="securityToken.MatchesKeyIdentifierClause skiClause" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="skiClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="keyIdentifierClause">이 인스턴스와 비교할 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />입니다.</param>
        <param name="skiClause">이 인스턴스와 비교할 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />입니다.</param>
        <summary>이 인스턴스의 키 식별자가 지정된 키 식별자로 확인될 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns><paramref name="keyIdentifierClause" />가 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />이고 <see cref="P:System.IdentityModel.Tokens.SecurityToken.Id" /> 속성과 동일한 고유 식별자를 갖고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 구현은 형식의 키 식별자 절을 지원 <xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />
      </Docs>
    </Member>
    <Member MemberName="ResolveKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKey ResolveKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKey ResolveKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResolveKeyIdentifierClause (keyIdentifierClause As SecurityKeyIdentifierClause) As SecurityKey" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityKey ^ ResolveKeyIdentifierClause(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ keyIdentifierClause);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKey ResolveKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause skiClause);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKey ResolveKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause skiClause) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResolveKeyIdentifierClause (skiClause As SecurityKeyIdentifierClause) As SecurityKey" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityKey ^ ResolveKeyIdentifierClause(System::IdentityModel::Tokens::SecurityKeyIdentifierClause ^ skiClause);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member ResolveKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; System.IdentityModel.Tokens.SecurityKey&#xA;override this.ResolveKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; System.IdentityModel.Tokens.SecurityKey" Usage="securityToken.ResolveKeyIdentifierClause skiClause" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member ResolveKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; System.IdentityModel.Tokens.SecurityKey&#xA;override this.ResolveKeyIdentifierClause : System.IdentityModel.Tokens.SecurityKeyIdentifierClause -&gt; System.IdentityModel.Tokens.SecurityKey" Usage="securityToken.ResolveKeyIdentifierClause skiClause" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="skiClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="keyIdentifierClause">키를 가져올 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />입니다.</param>
        <param name="skiClause">키를 가져올 <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />입니다.</param>
        <summary>지정된 키 식별자 절의 키를 가져옵니다.</summary>
        <returns>키를 나타내는 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause%2A> 메서드는 <xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A>를 호출하여 지정된 키 식별자 절이 이 인스턴스와 동일한지 먼저 확인합니다.  
  
 기본 구현에서는 첫 번째 요소를 반환 합니다 <xref:System.IdentityModel.Tokens.SecurityToken.SecurityKeys%2A> 컬렉션 컬렉션이 비어 있는 경우 <xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A> 반환 `true`이 고, 그렇지 않으면 반환 `null`합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="T:System.IdentityModel.Tokens.SecurityToken" />에서 상속하고 <see cref="M:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" /> 메서드를 구현하는 경우 <paramref name="keyIdentifierClause" />를 확인할 수 없으면 <see langword="null" />을 반환합니다. <see cref="M:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" /> 메서드에서 예외를 throw하면 안 됩니다.</para></block>
        <altmember cref="M:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
        <altmember cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />
      </Docs>
    </Member>
    <Member MemberName="SecurityKeys">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Tokens.SecurityKey&gt; SecurityKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.Tokens.SecurityKey&gt; SecurityKeys" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityToken.SecurityKeys" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SecurityKeys As ReadOnlyCollection(Of SecurityKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Tokens::SecurityKey ^&gt; ^ SecurityKeys { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Tokens::SecurityKey ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityKeys : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Tokens.SecurityKey&gt;" Usage="System.IdentityModel.Tokens.SecurityToken.SecurityKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Tokens.SecurityKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>보안 토큰과 연결된 암호화 키를 가져옵니다.</summary>
        <value>보안 토큰과 연결된 키의 집합을 포함하는 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 형식의 <see cref="T:System.IdentityModel.Tokens.SecurityKey" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.IdentityModel.Tokens.SamlSecurityToken.SecurityKeys%2A> 토큰 또는 SOAP 메시지를 보호 하기 위해이 보안 토큰에 대 한 암호화 키를 설정 하는 속성입니다. 키 수, 무엇 보다도 디지털 서명 또는 토큰 또는 SOAP 메시지를 암호화 합니다.  
  
   
  
## Examples  
 에 사용 되는 코드 예제는 <xref:System.IdentityModel.Tokens.SecurityToken> 항목에서 수행 되는 `Custom Token` 샘플. 이 샘플의 간단한 웹 토큰 (SWT) 처리를 사용 하도록 설정 하는 사용자 지정 클래스를 제공 합니다. 구현을 포함 한 `SimpleWebToken` 클래스 및 `SimpleWebTokenHandler` SWT 토큰을 지 원하는 다른 클래스 뿐만 아니라 클래스. 이 샘플 및 사용할 수 있는 다른 샘플에 대 한 WIF에 대 한 다운로드 위치에 대 한, 참조 [WIF 코드 샘플 인덱스](~/docs/framework/security/wif-code-sample-index.md)합니다. 다음 코드와의 재정의 <xref:System.IdentityModel.Tokens.SecurityToken.SecurityKeys%2A> 속성입니다.  
  
 [!code-csharp[WifCustomTokenST#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtokenconstants.cs#1)]  
[!code-csharp[WifCustomTokenST#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#3)]  
[!code-csharp[WifCustomTokenST#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>재정의 해야 합니다는 <see cref="P:System.IdentityModel.Tokens.SecurityToken.SecurityKeys" /> 속성입니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="ValidFrom">
      <MemberSignature Language="C#" Value="public abstract DateTime ValidFrom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ValidFrom" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ValidFrom As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property DateTime ValidFrom { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidFrom : DateTime" Usage="System.IdentityModel.Tokens.SecurityToken.ValidFrom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 보안 토큰이 유효한 기간의 시작 시간을 가져옵니다.</summary>
        <value>이 보안 토큰이 유효한 기간의 시작 시간을 나타내는 <see cref="T:System.DateTime" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> 토큰이 유효한 기간을 확인하려면 <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> 및 <xref:System.IdentityModel.Tokens.SecurityToken> 속성을 사용합니다. <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> 및 <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> 속성은 각각 보안 토큰이 유효한 기간의 시작 시간과 종료 시간을 나타냅니다.  
  
   
  
## Examples  
 에 사용 되는 코드 예제는 <xref:System.IdentityModel.Tokens.SecurityToken> 항목에서 수행 되는 `Custom Token` 샘플. 이 샘플의 간단한 웹 토큰 (SWT) 처리를 사용 하도록 설정 하는 사용자 지정 클래스를 제공 합니다. 구현을 포함 한 `SimpleWebToken` 클래스 및 `SimpleWebTokenHandler` SWT 토큰을 지 원하는 다른 클래스 뿐만 아니라 클래스. 이 샘플 및 사용할 수 있는 다른 샘플에 대 한 WIF에 대 한 다운로드 위치에 대 한, 참조 [WIF 코드 샘플 인덱스](~/docs/framework/security/wif-code-sample-index.md)합니다. 다음 코드와의 재정의 <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> 속성입니다.  
  
 [!code-csharp[WifCustomTokenST#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtokenconstants.cs#1)]  
[!code-csharp[WifCustomTokenST#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#3)]  
[!code-csharp[WifCustomTokenST#6](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#6)]  
[!code-csharp[WifCustomTokenST#8](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#8)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>재정의 해야 합니다는 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" /> 속성입니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="ValidTo">
      <MemberSignature Language="C#" Value="public abstract DateTime ValidTo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ValidTo" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ValidTo As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property DateTime ValidTo { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidTo : DateTime" Usage="System.IdentityModel.Tokens.SecurityToken.ValidTo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 보안 토큰이 유효한 기간의 종료 시간을 가져옵니다.</summary>
        <value>이 보안 토큰이 유효한 기간의 종료 시간을 나타내는 <see cref="T:System.DateTime" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> 토큰이 유효한 기간을 확인하려면 <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> 및 <xref:System.IdentityModel.Tokens.SecurityToken> 속성을 사용합니다. <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> 및 <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> 속성은 각각 보안 토큰이 유효한 기간의 시작 시간과 종료 시간을 나타냅니다.  
  
   
  
## Examples  
 에 사용 되는 코드 예제는 <xref:System.IdentityModel.Tokens.SecurityToken> 항목에서 수행 되는 `Custom Token` 샘플. 이 샘플의 간단한 웹 토큰 (SWT) 처리를 사용 하도록 설정 하는 사용자 지정 클래스를 제공 합니다. 구현을 포함 한 `SimpleWebToken` 클래스 및 `SimpleWebTokenHandler` SWT 토큰을 지 원하는 다른 클래스 뿐만 아니라 클래스. 이 샘플 및 사용할 수 있는 다른 샘플에 대 한 WIF에 대 한 다운로드 위치에 대 한, 참조 [WIF 코드 샘플 인덱스](~/docs/framework/security/wif-code-sample-index.md)합니다. 다음 코드와의 재정의 <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> 속성입니다.  
  
 [!code-csharp[WifCustomTokenST#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtokenconstants.cs#1)]  
[!code-csharp[WifCustomTokenST#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#3)]  
[!code-csharp[WifCustomTokenST#7](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#7)]  
[!code-csharp[WifCustomTokenST#8](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#8)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>재정의 해야 합니다는 <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> 속성입니다.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>