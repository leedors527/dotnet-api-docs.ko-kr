<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="18b622ce78fe8295b4aac908d2b2687c5ed1f01f" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58715507" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>여러 트리 노드(DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression 및 IndexExpression)의 인수에 액세스하기 위한 내부 인터페이스를 제공합니다.  이 API를 사용하면 안됩니다.  DLL 리팩터링으로 인해 공용으로만 사용되며 내부 성능 최적화용으로만 존재합니다.  
  
이는 식 트리의 크기를 줄이는 두 가지 최적화를 가능하게 합니다.  첫 번째 최적화를 통해 트리 노드가 ReadOnlyCollection이 아니라 IList&lt;T&gt;를 유지할 수 있습니다.  IList&lt;T&gt;는 각 노드에 대해 ReadOnlyCollection을 할당하는 비용을 절약합니다.  두 번째는 특정 수의 인수(예: Block2, Block3, Block4)를 보유하는 특수 서브 클래스를 만들 수 있게 합니다.  따라서 이러한 노드는 ReadOnlyCollection과 해당 요소를 저장하기 위한 배열을 모두 할당하지 않으므로 노드당 32바이트를 절약합니다.  
  
식 트리 노드는 ReadOnlyCollections의 원래 LINQ 속성을 계속 노출합니다.  노드는 배열 또는 일반적으로 배열에 저장되는 요소를 모두 저장하는 필드를 재사용함으로써 이 작업을 수행합니다.  
  
배열의 경우 컬렉션은 ReadOnlyCollection&lt;T&gt;가 아니라 IList&lt;T&gt;로 형식화됩니다.  노드가 처음 생성될 때 배열입니다.  컴파일러가 멤버에 액세스할 때 이 인터페이스를 사용합니다.  배열 요소에 액세스하면 배열이 ReadOnlyCollection으로 승격됩니다.  
  
개체의 경우 첫 번째 인수를 개체에 입력한 필드에 저장합니다.  노드를 처음 생성할 때 필드는 Expression을 보유합니다.  컴파일러는 이 인터페이스를 통해 인수에 액세스하고 첫 번째 인수에 대한 접근자는 Expression.ReturnObject를 사용하여 Expression 또는 ReadOnlyCollection 사례를 처리하는 개체를 반환합니다.  사용자가 ReadOnlyCollection에 액세스하면 개체 필드가 ReadOnlyCollection에 직접 저장되도록 개체 필드가 업데이트됩니다.  
  
Expression이 동일한 ReadOnlyCollection을 일관되게 반환하는 것이 중요합니다.  그렇지 않으면 재기록 트리 워커가 중단됩니다.  동일한 Expression 노드에서 서로 다른 ReadOnlyCollections를 반환하는 것은 LINQ v1의 주요 변경 내용입니다.  현재 사용자가 개체 ID를 통해 노드가 변경되었는지 여부를 확인할 수 있습니다.  오버로드된 필드에 ReadOnlyCollection을 저장하면 메모리 사용량이 감소하고 공용 API에 대한 호환성이 유지됩니다.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인수 수를 식 트리 노드에 반환합니다.  이 형식은 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
        <value>식 트리 노드에 <see cref="T:System.Int32" />로 반환되는 인수 수입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">인수의 인덱스입니다.</param>
        <summary>인덱스에서 인수를 반환하며 인덱스가 범위를 벗어나는 경우 throw합니다.  이 형식은 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
        <returns>인덱스에서 인수를 반환하며, 인덱스가 <see cref="T:System.Linq.Expressions.Expression" />으로 범위를 벗어나는 경우 발생합니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>