<Type Name="IGrouping&lt;TKey,TElement&gt;" FullName="System.Linq.IGrouping&lt;TKey,TElement&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="198c4dbf6050cf6a36f481f1bf89a388b39bae0d" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58717284" /></Metadata><TypeSignature Language="C#" Value="public interface IGrouping&lt;out TKey,out TElement&gt; : System.Collections.Generic.IEnumerable&lt;out TElement&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IGrouping`2&lt;+ TKey, + TElement&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!TElement&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IGrouping`2" />
  <TypeSignature Language="VB.NET" Value="Public Interface IGrouping(Of Out TKey, Out TElement)&#xA;Implements IEnumerable(Of Out TElement)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TElement&gt;&#xA;public interface class IGrouping : System::Collections::Generic::IEnumerable&lt;TElement&gt;" />
  <TypeSignature Language="F#" Value="type IGrouping&lt;'Key, 'Element&gt; = interface&#xA;    interface seq&lt;'Element&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TElement">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TElement&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey"><see cref="T:System.Linq.IGrouping`2" />의 키 형식입니다.</typeparam>
    <typeparam name="TElement"><see cref="T:System.Linq.IGrouping`2" />의 값 형식입니다.</typeparam>
    <summary>공통 키가 있는 개체의 컬렉션을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Linq.IGrouping%602> 되는 <xref:System.Collections.Generic.IEnumerable%601> 또한으로 키를 가진 합니다. 키의 각 값에 공통 된 특성을 나타내는 <xref:System.Linq.IGrouping%602>합니다.  
  
 값을 <xref:System.Linq.IGrouping%602> 의 요소와 훨씬 액세스는 <xref:System.Collections.Generic.IEnumerable%601> 액세스 하는 합니다. 예를 들어, 값을 사용 하 여 액세스할 수 있습니다는 `foreach` Visual C# 또는 `For Each` Visual Basic 루프를 반복 하는 <xref:System.Linq.IGrouping%602> 개체입니다. 예제 단원의 키와 값에 액세스 하는 방법을 보여 주는 코드 예제는 <xref:System.Linq.IGrouping%602> 개체입니다.  
  
 합니다 <xref:System.Linq.IGrouping%602> 형식에서 사용 되는 <xref:System.Linq.Enumerable.GroupBy%2A> 형식의 요소 시퀀스를 반환 하는 표준 쿼리 연산자 메서드가 <xref:System.Linq.IGrouping%602>합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Linq.IGrouping%602> 개체입니다.  
  
 이 예에서 <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> 의 배열 이라고 <xref:System.Reflection.MemberInfo> 반환한 개체 <xref:System.Type.GetMembers%2A>합니다. <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> 값을 기반으로 개체를 그룹화가 <xref:System.Reflection.MemberInfo.MemberType%2A> 속성입니다. 각 고유 값 <xref:System.Reflection.MemberInfo.MemberType%2A> 배열의 <xref:System.Reflection.MemberInfo> 개체 키가 되는 새 <xref:System.Linq.IGrouping%602> 개체 및 <xref:System.Reflection.MemberInfo> 해당 키 형식에 있는 개체는 <xref:System.Linq.IGrouping%602> 값 개체의 시퀀스입니다.  
  
 마지막으로 <xref:System.Linq.Enumerable.First%2A> 메서드는 순서에 따라 <xref:System.Linq.IGrouping%602> 개체를 가져올 첫 번째 <xref:System.Linq.IGrouping%602> 개체입니다.  
  
 예제에서는 다음의 키를 출력 합니다 <xref:System.Linq.IGrouping%602> 개체 및 <xref:System.Reflection.MemberInfo.Name%2A> 속성에서 각 값의를 <xref:System.Linq.IGrouping%602> 값 개체의 시퀀스입니다. 에 액세스 하는 프로그램 <xref:System.Linq.IGrouping%602> 값 개체의 시퀀스를 사용 하면 됩니다는 <xref:System.Linq.IGrouping%602> 변수 자체.  
  
 [!code-csharp[System.Linq.IGrouping#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.IGrouping/CS/igrouping.cs#1)]
 [!code-vb[System.Linq.IGrouping#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.IGrouping/VB/IGrouping.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public TKey Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TKey Key" />
      <MemberSignature Language="DocId" Value="P:System.Linq.IGrouping`2.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As TKey" />
      <MemberSignature Language="F#" Value="member this.Key : 'Key" Usage="System.Linq.IGrouping&lt;'Key, 'Element&gt;.Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TKey Key { TKey get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Linq.IGrouping`2" />의 키를 가져옵니다.</summary>
        <value><see cref="T:System.Linq.IGrouping`2" />의 키입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 키를 <xref:System.Linq.IGrouping%602> 에서 각 값에 공통적으로 적용 되는 특성을 나타내는 <xref:System.Linq.IGrouping%602>합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Linq.IGrouping%602.Key%2A> 속성에 각각 레이블을 <xref:System.Linq.IGrouping%602> 시퀀스의 개체 <xref:System.Linq.IGrouping%602> 개체. 합니다 <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> 메서드는 시퀀스를 가져오는 데 <xref:System.Linq.IGrouping%602> 개체입니다. 합니다 `foreach` Visual C# 또는 `For Each` Visual Basic의 루프 다음 반복 각 <xref:System.Linq.IGrouping%602> 개체를 포함 하는 값의 수와 해당 키를 출력 합니다.  
  
 [!code-csharp[System.Linq.IGrouping#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.IGrouping/CS/igrouping.cs#2)]
 [!code-vb[System.Linq.IGrouping#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.IGrouping/VB/IGrouping.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>