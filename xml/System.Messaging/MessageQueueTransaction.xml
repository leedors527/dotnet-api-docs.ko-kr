<Type Name="MessageQueueTransaction" FullName="System.Messaging.MessageQueueTransaction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="277c43eb88a67a34c9bfcd8ab649d418c83e3121" /><Meta Name="ms.sourcegitcommit" Value="cbcba80f998e27b87425ad54726bdb684fb3a932" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="09/04/2018" /><Meta Name="ms.locfileid" Value="43616085" /></Metadata><TypeSignature Language="C#" Value="public class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueTransaction extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="F#" Value="type MessageQueueTransaction = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>메시지 큐 내부 트랜잭션을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 트랜잭션의 일부로 메시지를 주고받을 설정에 사용할 수 있습니다는 <xref:System.Messaging.MessageQueueTransaction> 트랜잭션을 만들고의 오버 로드에 전달 하는 클래스를 <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> 메서드 또는 <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> 메서드를를 `transaction` 매개 변수입니다. 트랜잭션의 일부로 전송 된 메시지는 트랜잭션 큐로 전송 되어야 합니다. 지정 된 트랜잭션을 사용 하 여 트랜잭션 큐에서 받은 메시지를 수신 해야 합니다.  
  
 외에 <xref:System.Messaging.MessageQueue.Receive%2A> 메서드는 지정 된 식별자 또는 지정 된 상관 관계 식별자를 사용 하 여 메시지를 받을 수 있습니다. 참조 된 <xref:System.Messaging.MessageQueue.ReceiveById%2A> 및 <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> 선택적으로 트랜잭션 큐에서 메시지를 수신 하는 방법에 대 한 자세한 내용은 합니다.  
  
 트랜잭션 큐로 전송 된 메시지는 트랜잭션이 커밋된 경우 제거 됩니다. 마찬가지로, 트랜잭션이 롤백되면 트랜잭션 큐에서 수신 된 메시지 큐로 반환 됩니다.  
  
 인스턴스화하는 경우는 <xref:System.Messaging.MessageQueueTransaction> 적용 가능한 오버 로드에 전달 합니다 <xref:System.Messaging.MessageQueue.Send%2A> 메서드 또는 <xref:System.Messaging.MessageQueue.Receive%2A> 비트랜잭션 큐에 메시지를 보내거나 메서드 비트랜잭션 큐에서 메시지를 수신 하는 메서드 예외를 throw 하는 "잘못 된 트랜잭션 사용을"을 나타냅니다.  
  
 <xref:System.Messaging.MessageQueueTransaction> 스레딩 아파트를 인식 하며 따라서 아파트 상태가 `STA`, 트랜잭션이 여러 스레드를 사용할 수 없습니다. 에 주 스레드의 상태를 설정 하는 Visual Basic `STA`이므로 적용 해야 합니다는 <xref:System.MTAThreadAttribute> 에 `Main` 서브루틴입니다. 그렇지 않으면 다른 스레드를 사용하여 트랜잭션 메시지를 전달할 때 <xref:System.Messaging.MessageQueueException> 예외가 throw됩니다. 적용 된 <xref:System.MTAThreadAttribute> 다음 조각을 사용 하 여 합니다.  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>이 형식은 스레드로부터 안전합니다.</threadsafe>
    <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Messaging.MessageQueueTransaction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자를 설정 합니다 <xref:System.Messaging.MessageQueueTransaction.Status%2A> 속성을 `Initialized`입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="messageQueueTransaction.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>내부 트랜잭션 보류를 롤백합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> 에 대 한 호출에서 시작 되는 프로세스가 성공적으로 완료 표시 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>합니다.  
  
 일반적으로 하나를 호출 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 내에서 `Try...Catch` 를 호출 하는 예외 처리 블록 <xref:System.Messaging.MessageQueueTransaction.Commit%2A> 에 `Try` 절 및 호출 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> 에서 `Catch` 절.  
  
 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> 전체 트랜잭션을 롤백합니다. 호출한 후 주고받은 모든 메시지가 포함 됩니다 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">롤백하려는 내부 트랜잭션이 시작되지 않은 경우</exception>
        <exception cref="T:System.Messaging.MessageQueueException">내부 메시지 큐 오류가 발생하는 경우</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="messageQueueTransaction.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>새 메시지 큐 내부 트랜잭션을 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 커밋 또는 롤백 트랜잭션의 성공 여부에 따라 처리의 시작을 표시 합니다. 처리 하는 동안 예외가 발생 하는 경우 전체 트랜잭션이 롤백됩니다. 호출한 후 주고받은 모든 메시지가 포함 됩니다 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>합니다.  
  
 일반적으로 하나를 호출 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 내에서 `Try...Catch` 를 호출 하는 예외 처리 블록 <xref:System.Messaging.MessageQueueTransaction.Commit%2A> 에 `Try` 절 및 호출 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> 에서 `Catch` 절.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">트랜잭션이 이미 시작된 경우</exception>
        <exception cref="T:System.Messaging.MessageQueueException">내부 메시지 큐 오류가 발생하는 경우</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberSignature Language="F#" Value="member this.Commit : unit -&gt; unit" Usage="messageQueueTransaction.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>보류 중인 내부 트랜잭션을 커밋합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueTransaction.Commit%2A> 에 대 한 호출에서 시작 되는 프로세스가 성공적으로 완료 표시 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>합니다. 호출 사이 예외가 발생 하는 경우는 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 를 호출 <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, 전체 트랜잭션이 롤백됩니다. 호출한 후 주고받은 모든 메시지가 포함 됩니다 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>합니다.  
  
 일반적으로 하나를 호출 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 내에서 `Try...Catch` 를 호출 하는 예외 처리 블록 <xref:System.Messaging.MessageQueueTransaction.Commit%2A> 에 `Try` 절 및 호출 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> 에서 `Catch` 절.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">커밋하려는 트랜잭션이 시작되지 않은 경우</exception>
        <exception cref="T:System.Messaging.MessageQueueException">내부 메시지 큐 오류가 발생하는 경우</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Messaging.MessageQueueTransaction" />에서 사용하는 리소스를 해제합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageQueueTransaction.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Messaging.MessageQueueTransaction" />에서 사용하는 모든 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> 에서 사용 하는 리소스는 <xref:System.Messaging.MessageQueueTransaction> 다른 용도로 다시 할당 될 수 있습니다. 에 대 한 자세한 내용은 `Dispose`를 참조 하세요 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.  
  
 보류 중인 내부 트랜잭션을 롤백할 가능성이 <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageQueueTransaction.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
        <summary><see cref="T:System.Messaging.MessageQueueTransaction" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 공용 <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> 메서드 및 <xref:System.Object.Finalize%2A> 메서드. `Dispose` 보호 된 호출 `Dispose(Boolean)` 메서드를 `disposing` 매개 변수 설정 `true`합니다. <xref:System.Object.Finalize%2A> 호출 `Dispose` 사용 하 여 `disposing` 로 `false`합니다.  
  
 `disposing` 매개 변수가 `true`인 경우 이 메서드는 이 <xref:System.Messaging.MessageQueueTransaction>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다. 이 메서드는 참조되는 각 개체의 `Dispose` 메서드를 호출합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" /> 다른 개체에서 여러 번 호출할 수 있습니다. <see langword="Dispose(Boolean)" />를 재정의할 때 이전 <see langword="Dispose" /> 호출에서 삭제된 개체를 참조하지 않도록 주의하십시오. 구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose" />를 참조 하세요 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.  에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see langword="Finalize" />를 참조 하십시오 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Finalize 메서드 재정의](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))합니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueTransaction ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageQueueTransaction.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 인스턴스에서 보유한 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 <xref:System.Object.Finalize%2A?displayProperty=nameWithType>를 재정의합니다. 애플리케이션 코드는이 메서드를 호출 하지 개체의 <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> 메서드를 호출 하 여 가비지 수집기에 의해 종료를 사용 하지 않도록 설정 된 경우가 아니면 자동으로 가비지를 수집 하는 동안 호출 됩니다는 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 메서드.  
  
 자세한 내용은 [Finalize 메서드 및 소멸자](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100))를 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md), 및 [Finalize 메서드 재정의](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueTransactionStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueTransactionStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueTransaction.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As MessageQueueTransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueueTransactionStatus Status { System::Messaging::MessageQueueTransactionStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Messaging.MessageQueueTransactionStatus" Usage="System.Messaging.MessageQueueTransaction.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueTransactionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>트랜잭션 상태를 가져옵니다.</summary>
        <value>트랜잭션 커밋, 중단, 초기화 또는 보류 여부를 표시하는 <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인스턴스를 <xref:System.Messaging.MessageQueueTransaction> 클래스를 만든 합니다 <xref:System.Messaging.MessageQueueTransaction.Status%2A> 생성자에 의해 설정 됩니다 `Initialized`합니다. 호출한 후 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 를 호출 하기 전에 <xref:System.Messaging.MessageQueueTransaction.Commit%2A> 또는 <xref:System.Messaging.MessageQueueTransaction.Abort%2A>의 <xref:System.Messaging.MessageQueueTransaction.Status%2A> 는 `Pending`합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueTransactionStatus" />
      </Docs>
    </Member>
  </Members>
</Type>