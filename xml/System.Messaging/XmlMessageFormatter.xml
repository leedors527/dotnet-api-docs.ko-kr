<Type Name="XmlMessageFormatter" FullName="System.Messaging.XmlMessageFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ebd69e389a8e772381b0a3f87e7c323d91525d51" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55346878" /></Metadata><TypeSignature Language="C#" Value="public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlMessageFormatter extends System.Object implements class System.ICloneable, class System.Messaging.IMessageFormatter" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.XmlMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlMessageFormatter&#xA;Implements ICloneable, IMessageFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlMessageFormatter : ICloneable, System::Messaging::IMessageFormatter" />
  <TypeSignature Language="F#" Value="type XmlMessageFormatter = class&#xA;    interface IMessageFormatter&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Messaging.IMessageFormatter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>XSD 스키마 정의에 기반한 XML 형식을 사용하여 개체를 메시지 본문 간에 serialize 및 deserialize합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Messaging.XmlMessageFormatter> 은 기본 포맷터는 인스턴스의 <xref:System.Messaging.MessageQueue> 큐에 기록 되는 메시지 직렬화를 사용 하 여 합니다. 인스턴스를 만들면 <xref:System.Messaging.MessageQueue>, 인스턴스의 <xref:System.Messaging.XmlMessageFormatter> 생성 되 고 연결 된는 <xref:System.Messaging.MessageQueue>합니다. 코드에서 만들고 할당 하 여 다른 포맷터를 지정할 수 있습니다 합니다 <xref:System.Messaging.MessageQueue.Formatter%2A> 의 속성에 <xref:System.Messaging.MessageQueue>입니다.  
  
 큐의 기본 <xref:System.Messaging.XmlMessageFormatter> 인스턴스를 큐에 쓸 수 있지만 중 하나를 설정 하기 전에 큐에서 읽기를 사용할 수는 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 또는 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 포맷터의 속성입니다. 기본 포맷터 인스턴스를 하나 또는 두이 값을 설정 하거나 또는 포맷터의 새 인스턴스를 만들고를 적절 한 인수로 전달 하 여 값을 자동으로 설정할 수 있습니다 <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> 생성자입니다.  
  
 지정 하는 경우 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 대신 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, 오류가 발생할 가능성이 줄어듭니다 읽기 시간 보다는 컴파일 시간에 형식의 존재 여부 검사 됩니다. <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 정규화 된 어셈블리 이름만 지정 되도록 모든 항목이 필요 합니다. 또한 여러 동시 작업 버전을 사용 하는 경우 버전 번호는 대상 형식 이름에 추가 해야 합니다.  
  
 합니다 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 알 포맷터는 스키마를 메시지를 역직렬화 하는 동안 일치 시 키 려 합니다. 따라서 메시지 본문을 해석 하는 포맷터입니다.  
  
 메시지 본문에 serialize 된 인스턴스는 형식 배열에 있는 스키마 중 하나를 사용 하 여 준수 해야 합니다. 사용 하 여 메시지를 읽을 때의 <xref:System.Messaging.MessageQueue.Receive%2A> 메서드를 메서드를 메시지 본문을 읽고 식별 스키마에 해당 하는 형식의 개체를 만듭니다.  
  
 두 속성 중 하나만 큐에서 읽을 때 설정 해야 하지만 둘 다 설정할 수 있습니다. 형식 집합이 결합된 된 두 속성 집합입니다. 속성을 사용 하 여를 결정 하는 애플리케이션에 따라 다릅니다. 메시지 본문 형식 스키마와 일치 하지 않습니다 형식 속성 중 하나에 대 한 배열에 들어 있으면 메시지를 읽을 때 예외가 throw 됩니다.  
  
 <xref:System.Messaging.XmlMessageFormatter> 느슨하게 연결 된 XML 기반 메시징 중요 한 구성 합니다. XSD.exe 유틸리티 사용 XML 형식은 유틸리티 애플리케이션에서 사용 된 클래스가 직렬화를 사용 하는 경우와 같이 XML 스키마를 생성 하는 데 사용 됩니다. 이 클래스에는 기본 생성자가 있어야 합니다.  
  
 형식에는 다시 역방향 프로세스에서이 유틸리티는 스키마를 기반으로 클래스를 생성 하는 경우에 게 배포할 클래스 데이터에 설명 합니다. 공익 사업 및 생성 된 XML 스키마 사용을 사용 하면 클래스의 구현을 변경 된 후에 클래스를 다시 컴파일할 때마다 redistributing.dll 파일을 방지할 수 있습니다. 스키마를 클라이언트 또는 서버에서 변경 되지 않으면으로 어느 쪽의 변경 내용이 다른 다른 영향을 주지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 세 가지 코드를 포함 합니다: 서버 구성 요소, order 클래스 및 클라이언트 코드입니다. Order 클래스 서버가 들어오는 메시지에서 인식 하는 스키마를 생성 하는 XSD.exe 유틸리티에서 사용할 수 있습니다. 스키마가 클래스의 "모양"를 설명 하는 XML 형식된 파일입니다. 이 스키마 서버 클래스와 동일한 스키마를 공유 하는 클라이언트 관련 order 클래스를 생성 하는 클라이언트 쪽에서 사용할 수 있습니다.  
  
 다음 코드 예제에서는 메시지 큐를 통해 주문을 받는 서버 구성 요소를 나타냅니다. 메시지의 본문에 해당 스키마에는 아래 Order.cs 클래스와 일치 순서 개체 여야 합니다. 서버 프로세스 또는 애플리케이션에는 순서를 역직렬화합니다.  
  
 [!code-cpp[Classic XmlMessageFormatter Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlMessageFormatter Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source.cs#1)]
 [!code-vb[Classic XmlMessageFormatter Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source.vb#1)]  
  
 다음 코드 예제에서는 애플리케이션 서버에서 수신 하 고 deserialize 하는 order 개체에 대 한 스키마를 제공 하는 order 클래스를 나타냅니다.  
  
 [!code-cpp[Classic XmlMessageFormatter Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic XmlMessageFormatter Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source2.cs#2)]
 [!code-vb[Classic XmlMessageFormatter Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source2.vb#2)]  
  
 모든 클라이언트 애플리케이션 상호 작용 하는 서버에서 애플리케이션을 사용 하 여 메시지 본문에 로컬로 정의 된 순서 클래스에서 직렬화 정보로 서버에 메시지를 보내야 합니다. 로컬로 정의 된 order 클래스에는 애플리케이션 서버에서 메시지 본문을 역직렬화 할 시도가 order 서버에서 정의 된 클래스와 동일한 스키마가 있어야 합니다. XSD.exe 유틸리티 관리자를 서버에 애플리케이션 만들기 및 배포 서버로 이동 하는 메시지를 serialize 하는 클라이언트가 사용 해야 하는 스키마를 수 있습니다.  
  
 클라이언트 애플리케이션의 관리자가 order 클래스에 대 한 스키마를 받으면 XSD.exe 유틸리티 클래스를 생성할 클라이언트 관련 주문 스키마에서 다시 사용 됩니다. 클라이언트 코드 아래 예제에서는 order 클래스가 아닌 서버에에서 사용 되는이 클래스가 (XSD.exe 유틸리티는 원래 클래스와 이름이 같은 스키마에서 생성 된 클래스를 발생 하는 데 사용). 이 새 order 클래스 순서 메시지 본문으로 serialize 됩니다.  
  
 다음 코드 예제에서는 클라이언트 쪽 처리, 큐에 순서와 관련 된 정보를 보내고 주문을 serialize 하는 데 사용 됩니다. XSD.exe 유틸리티에서 Order.cs 클래스에 대해 생성 된 스키마의 요소를 사용 하 여 항목, Quantity 및 주소 정보를 연결 하는 코드입니다. 주문은 로컬 컴퓨터의 주문 큐로 전송 됩니다.  
  
 [!code-cpp[Classic XmlMessageFormatter Example#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source3.cpp#3)]
 [!code-csharp[Classic XmlMessageFormatter Example#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source3.cs#3)]
 [!code-vb[Classic XmlMessageFormatter Example#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source3.vb#3)]  
  
 스키마는 서버에서 order 클래스에서 생성 된 후에 클래스를 수정할 수 있습니다. 스키마가 변경 하지 않는 한 스키마를 다시 배포할 필요가 없습니다. 스키마를 배포 하 고 클라이언트 쪽 order 클래스를 생성, 후 해당 클라이언트 클래스도 수정할 수 있습니다 서버의 order 클래스와 독립적으로으로 스키마 자체는 수정 되지 않습니다. 두 클래스는 느슨하게 결합 합니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
    <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
    <altmember cref="T:System.Messaging.IMessageFormatter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Messaging.XmlMessageFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>대상 형식 집합을 설정하지 않고 <see cref="T:System.Messaging.XmlMessageFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 오버 로드 생성자의 가장 많이 사용 됩니다 큐에 쓸 때 처럼 작성 하는 경우 대상 형식은 필요 하지 않습니다.  
  
 인스턴스를 사용 하 여 큐에서 메시지를 읽을 <xref:System.Messaging.XmlMessageFormatter> 설정 해야이 생성자를 사용 하 여 만든, 합니다 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 또는 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 포맷터에서 deserialize 할 형식을 알 수 있도록 하는 속성입니다.  
  
 새로 만들 때 <xref:System.Messaging.MessageQueue>, 기본값 <xref:System.Messaging.XmlMessageFormatter> 만들어지면이 인스턴스는 대상 유형으로 설정 하지 않고 합니다. 이 생성자를 사용 하 여 만든 포맷터가와 마찬가지로 큐에서 읽고 싶은 경우 포맷터 인스턴스에 대 한 대상 형식을 설정 해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (string[] targetTypeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] targetTypeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypeNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;System::String ^&gt; ^ targetTypeNames);" />
      <MemberSignature Language="F#" Value="new System.Messaging.XmlMessageFormatter : string[] -&gt; System.Messaging.XmlMessageFormatter" Usage="new System.Messaging.XmlMessageFormatter targetTypeNames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypeNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="targetTypeNames">제공된 메시지로부터 포맷터에 의해 deserialize될 사용 가능한 형식의 집합을 지정하는 <see cref="T:System.String" /> 형식의 배열입니다. 이러한 값은 "MyNamespace.MyOrders, MyOrdersAssemblyName"처럼 정규화된 값이어야 합니다.</param>
        <summary>정규화된 문자열 값의 배열로 전달된 대상 형식을 설정하여 <see cref="T:System.Messaging.XmlMessageFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대상 형식 매개 변수가 있는 생성자는 큐에서 읽는 경우에 가장 자주 사용 됩니다. 를 작성할 때 대상 형식을 지정 하는 데 필요한 아닙니다.  
  
 이 오버 로드는 <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> 생성자 집합 합니다 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 속성을 통해 전달 되는 배열 값을는 `targetTypeNames` 매개 변수입니다. 설정 하면이 속성을 <xref:System.Messaging.MessageQueue> 이 사용 하 여 <xref:System.Messaging.XmlMessageFormatter> 인스턴스 개체를 포함 하는 메시지를 읽을 수 형식 지정 합니다.  
  
 모두를 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 알 포맷터는 스키마를 메시지를 역직렬화 하는 동안 일치 시 키 려 합니다. 따라서 메시지 본문을 해석 하는 포맷터입니다.  
  
 메시지 본문에 serialize 된 인스턴스는 형식 배열에 있는 스키마 중 하나를 사용 하 여 준수 해야 합니다. 사용 하 여 메시지를 읽을 때의 <xref:System.Messaging.MessageQueue.Receive%2A> 메서드를 메서드를 메시지 본문을 읽고 식별 스키마에 해당 하는 형식의 개체를 만듭니다.  
  
 두 속성 중 하나만 큐에서 읽을 때 설정 해야 하지만 둘 다 설정할 수 있습니다. 형식 집합이 결합된 된 두 속성 집합입니다. 애플리케이션에는 의사 결정 사용할 것입니다. 메시지 본문 형식 스키마와 일치 하지 않습니다 형식 속성 중 하나에 대 한 배열에 들어 있으면 읽기 시 예외가 throw 됩니다.  
  
   
  
## Examples  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetTypeNames" /> 매개 변수가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (Type[] targetTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type[] targetTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;Type ^&gt; ^ targetTypes);" />
      <MemberSignature Language="F#" Value="new System.Messaging.XmlMessageFormatter : Type[] -&gt; System.Messaging.XmlMessageFormatter" Usage="new System.Messaging.XmlMessageFormatter targetTypes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="targetTypes">제공된 메시지로부터 포맷터에 의해 deserialize될 사용 가능한 형식의 집합을 지정하는 <see cref="T:System.Type" /> 형식의 배열입니다.</param>
        <summary>개체 형식의 배열로 전달된 대상 형식을 설정하여 <see cref="T:System.Messaging.XmlMessageFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대상 형식 매개 변수가 있는 생성자는 큐에서 읽는 경우에 가장 자주 사용 됩니다. 를 작성할 때 대상 형식을 지정 하는 데 필요한 아닙니다.  
  
 이 오버 로드는 <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> 생성자 집합 합니다 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성을 통해 전달 되는 배열 값을는 `targetTypes` 매개 변수입니다. 이 속성을 사용 하면 설정을 <xref:System.Messaging.MessageQueue> 이 사용 하 여 <xref:System.Messaging.XmlMessageFormatter> 인스턴스에 지정 된 형식의 개체를 포함 하는 메시지를 읽을 수 있습니다.  
  
 모두를 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 알 포맷터는 스키마를 메시지를 역직렬화 하는 동안 일치 시 키 려 합니다. 따라서 메시지 본문을 해석 하는 포맷터입니다.  
  
 메시지 본문에 serialize 된 인스턴스는 형식 배열에 있는 스키마 중 하나를 사용 하 여 준수 해야 합니다. 사용 하 여 메시지를 읽을 때의 <xref:System.Messaging.MessageQueue.Receive%2A> 메서드를 메서드를 메시지 본문을 읽고 식별 스키마에 해당 하는 형식의 개체를 만듭니다.  
  
 두 속성 중 하나만 큐에서 읽을 때 설정 해야 하지만 둘 다 설정할 수 있습니다. 형식 집합이 결합된 된 두 속성 집합입니다. 애플리케이션에는 의사 결정 사용할 것입니다. 메시지 본문 형식 스키마와 일치 하지 않습니다 형식 속성 중 하나에 대 한 배열에 들어 있으면 읽기 시 예외가 throw 됩니다.  
  
 지정 하는 경우 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 대신 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, 오류가 발생할 가능성이 줄어듭니다 읽기 시간 보다는 컴파일 시간에 형식의 존재 여부 검사 됩니다. <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 정규화 된 어셈블리 이름만 지정 되도록 모든 항목이 필요 합니다. 또한 여러 동시 작업 버전을 사용 하는 경우 버전 번호는 대상 형식 이름에 추가 해야 합니다.  
  
 사용 하는 경우 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>, 각 개체를 추가할 수 있습니다 (예를 들어 `MyClass`)는 다음 C# 코드에서와 같은 방법으로 목록에 있습니다.  
  
```  
TargetTypes = new Type[]{typeof(MyClass)}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetTypes" /> 매개 변수가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanRead(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member CanRead : System.Messaging.Message -&gt; bool&#xA;override this.CanRead : System.Messaging.Message -&gt; bool" Usage="xmlMessageFormatter.CanRead message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">검사할 <see cref="T:System.Messaging.Message" />입니다.</param>
        <summary>포맷터에서 메시지를 deserialize할 수 있는지 여부를 확인합니다.</summary>
        <returns>XML 포맷터에서 메시지를 읽을 수 있으면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때 <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> 라고, 포맷터 하려고 메시지 내용을 deserialize 할 수 있는 항목 인지 확인 합니다. 포맷터 수만 메시지를 deserialize 할 형식에 있는 경우 메시지 본문에 동일한 스키마 형식 중 하나를 나타내는 배열에는 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 고 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성입니다. <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> 반환 `false` 다음과 같은 두 상황:  
  
-   메시지를 사용 하 여 형식이 지정 되지 않았습니다는 <xref:System.Messaging.XmlMessageFormatter>합니다.  
  
-   메시지 본문의 스키마 중 하나에 나열 된 아닙니다 합니다 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 또는 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성입니다.  
  
 합니다 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 알 포맷터 개체의 형식이 있어야를 역직렬화 합니다. 모든 형식의 목록에서 누락 되었습니다 아직 메시지 내에 있으면 <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> 반환 `false`합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 및 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 속성을 모두 설정하지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="xmlMessageFormatter.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.Messaging.XmlMessageFormatter" /> 인스턴스와 읽기/쓰기 속성(대상 형식의 집합)이 같은 <see cref="T:System.Messaging.XmlMessageFormatter" />의 인스턴스를 만듭니다.</summary>
        <returns>이 <see cref="T:System.Messaging.XmlMessageFormatter" /> 인스턴스와 속성이 같지만 해당 메타데이터에서 포맷터 클래스 인스턴스가 되도록 지정되지 않은 개체를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 포맷터의 복사본을 만들고이 값에는 모든 속성을 초기화 <xref:System.Messaging.XmlMessageFormatter> 개체입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.IMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.Messaging.Message -&gt; obj&#xA;override this.Read : System.Messaging.Message -&gt; obj" Usage="xmlMessageFormatter.Read message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">deserialize될 <see cref="T:System.Messaging.Message" />(XML 형식)입니다.</param>
        <summary>지정된 메시지의 내용을 읽고 deserialize된 메시지가 포함된 개체를 만듭니다.</summary>
        <returns>deserialize된 메시지를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 알 포맷터는 스키마를 메시지를 역직렬화 하는 동안 일치 시 키 려 합니다. 이러한 속성 중 하나는 메시지를 deserialize 할 수 전에 설정 되어야 합니다.  
  
 메시지 본문에 serialize 된 인스턴스는 형식 배열에 있는 스키마 중 하나를 사용 하 여 준수 해야 합니다. 사용 하 여 메시지를 읽을 때의 <xref:System.Messaging.MessageQueue.Receive%2A> 메서드를 메서드를 메시지 본문을 읽고 식별 스키마에 해당 하는 형식의 개체를 만듭니다.  
  
 대상 유형을 큐에 쓰려면 지정할 필요가 없습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 및 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 속성을 모두 설정하지 않은 경우  
  
또는 
메시지 본문에 serialize된 인스턴스가 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 및 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 속성에 표시된 어느 특성도 따르지 않는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypeNames">
      <MemberSignature Language="C#" Value="public string[] TargetTypeNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] TargetTypeNames" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypeNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ TargetTypeNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetTypeNames : string[] with get, set" Usage="System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("XmlMsgTargetTypeNames")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>제공된 메시지로부터 포맷터에 의해 deserialize될 사용 가능한 형식의 집합을 지정합니다.</summary>
        <value>메시지를 읽을 때 메시지 본문에서 deserialize되는 개체의 형식을 지정하는 <see cref="T:System.String" /> 형식의 배열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 알 포맷터는 스키마를 메시지를 역직렬화 하는 동안 일치 시 키 려 합니다. 따라서 메시지 본문을 해석 하는 포맷터입니다.  
  
 메시지 본문에 serialize 된 인스턴스는 형식 배열에 있는 스키마 중 하나를 사용 하 여 준수 해야 합니다. 사용 하 여 메시지를 읽을 때의 <xref:System.Messaging.MessageQueue.Receive%2A> 메서드를 메서드를 메시지 본문을 읽고 식별 스키마에 해당 하는 형식의 개체를 만듭니다.  
  
 두 속성 중 하나만 큐에서 읽을 때 설정 해야 하지만 둘 다 설정할 수 있습니다. 형식 집합이 결합된 된 두 속성 집합입니다. 속성을 사용 하 여를 결정 하는 애플리케이션에 따라 다릅니다. 메시지 본문 형식 스키마와 일치 하지 않습니다 형식 속성 중 하나에 대 한 배열에 들어 있으면 메시지를 읽을 때 예외가 throw 됩니다.  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 정규화 된 어셈블리 이름만 지정 되도록 모든 항목이 필요 합니다. 또한 여러 동시 작업 버전을 사용 하는 경우 버전 번호는 대상 형식 이름에 추가 해야 합니다.  
  
 대상 유형은 큐에서 읽는 경우에 필요 합니다. 합니다 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 고 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 큐에 쓸 설정할 필요가 없습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 속성은 <see langword="null" />입니다.</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypes">
      <MemberSignature Language="C#" Value="public Type[] TargetTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] TargetTypes" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypes As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;Type ^&gt; ^ TargetTypes { cli::array &lt;Type ^&gt; ^ get(); void set(cli::array &lt;Type ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetTypes : Type[] with get, set" Usage="System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("XmlMsgTargetTypes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>제공된 메시지로부터 포맷터에 의해 deserialize될 사용 가능한 형식의 집합을 지정합니다.</summary>
        <value>메시지를 읽을 때 메시지 본문에서 deserialize되는 개체의 형식을 지정하는 <see cref="T:System.Type" /> 형식의 배열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 알 포맷터는 스키마를 메시지를 역직렬화 하는 동안 일치 시 키 려 합니다. 따라서 메시지 본문을 해석 하는 포맷터입니다.  
  
 메시지 본문에 serialize 된 인스턴스는 형식 배열에 있는 스키마 중 하나를 사용 하 여 준수 해야 합니다. 사용 하 여 메시지를 읽을 때의 <xref:System.Messaging.MessageQueue.Receive%2A> 메서드를 메서드를 메시지 본문을 읽고 식별 스키마에 해당 하는 형식의 개체를 만듭니다.  
  
 두 속성 중 하나만 큐에서 읽을 때 설정 해야 하지만 둘 다 설정할 수 있습니다. 형식 집합이 결합된 된 두 속성 집합입니다. 속성을 사용 하 여를 결정 하는 애플리케이션에 따라 다릅니다. 메시지 본문 형식 스키마와 일치 하지 않습니다 형식 속성 중 하나에 대 한 배열에 들어 있으면 메시지를 읽을 때 예외가 throw 됩니다.  
  
 대상 유형은 큐에서 읽는 경우에 필요 합니다. 합니다 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 고 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 큐에 쓸 설정할 필요가 없습니다.  
  
 지정 하는 경우 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 대신 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, 오류가 발생할 가능성이 줄어듭니다 읽기 시간 보다는 컴파일 시간에 형식의 존재 여부 검사 됩니다.  
  
 사용 하는 경우 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>, 각 개체를 추가할 수 있습니다 (예를 들어 `MyClass`)는 C# 코드에서와 같은 방법으로 목록에 `TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 큐에서 주문을 포함 하는 메시지를 송수신 설정 합니다.  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 속성은 <see langword="null" />입니다.</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Messaging.Message * obj -&gt; unit&#xA;override this.Write : System.Messaging.Message * obj -&gt; unit" Usage="xmlMessageFormatter.Write (message, obj)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><see cref="T:System.Messaging.Message" /> 속성에 serialize된 개체가 포함될 <see cref="P:System.Messaging.Message.Body" />입니다.</param>
        <param name="obj">메시지 본문으로 serialize될 <see cref="T:System.Object" />입니다.</param>
        <summary>메시지 본문으로 개체를 serialize합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대상 유형은 지정할 필요가 없습니다를 읽을 때 있어야 하므로 큐에 쓸 수 있습니다. 합니다 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 또는 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성은 메시지를 역직렬화 하는 경우에 포맷터에서 사용 됩니다.  
  
 <xref:System.Messaging.XmlMessageFormatter> 활용을 <xref:System.Xml.Serialization.XmlSerializer> serialize 할 수 있는 정의 하는 클래스입니다. 만 public 필드와 공용 속성을 serialize 할 수 있습니다. SOAP 프로토콜을 사용 하 여 인코딩된 스타일을 사용 하지는 마십시오 상태로 구조, 배열 및 구조 배열을 포함 하는 구조체는 모든 직렬화 가능 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> 매개 변수가 <see langword="null" />인 경우  
  
또는 
<paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>