<Type Name="PingReply" FullName="System.Net.NetworkInformation.PingReply">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2750e7a260fe829621cbe77b38b9b869d5350955" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58716079" /></Metadata><TypeSignature Language="C#" Value="public class PingReply" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PingReply extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.PingReply" />
  <TypeSignature Language="VB.NET" Value="Public Class PingReply" />
  <TypeSignature Language="C++ CLI" Value="public ref class PingReply" />
  <TypeSignature Language="F#" Value="type PingReply = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="Overload:System.Net.NetworkInformation.Ping.Send" /> 또는 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 작업의 결과 상태 및 데이터에 대한 정보를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping> 클래스는 원격 컴퓨터에 제어 메시지 ICMP (Internet Protocol) 에코 요청을 보내고 ICMP echo reply 메시지를 통해 컴퓨터에서 다시 정보를 수신 하려고 합니다. 합니다 <xref:System.Net.NetworkInformation.Ping> 클래스의 인스턴스를 사용 합니다 <xref:System.Net.NetworkInformation.PingReply> 상태 요청을 보내고 응답을 수신 하는 데 걸리는 시간 등의 작업에 대 한 정보를 반환 하는 클래스입니다.  
  
 합니다 <xref:System.Net.NetworkInformation.Ping.Send%2A> 의 인스턴스를 반환 하는 메서드는 <xref:System.Net.NetworkInformation.PingReply> 클래스를 직접. <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> 메서드는 반환을 <xref:System.Net.NetworkInformation.PingReply> 에 <xref:System.Net.NetworkInformation.PingCompletedEventHandler> 메서드의 <xref:System.Net.NetworkInformation.PingCompletedEventArgs> 매개 변수. <xref:System.Net.NetworkInformation.PingReply> 를 통해 액세스를 <xref:System.Net.NetworkInformation.PingCompletedEventArgs.Reply%2A> 속성입니다.  
  
 경우 값 <xref:System.Net.NetworkInformation.PingReply.Status%2A> 아닙니다 <xref:System.Net.NetworkInformation.IPStatus.Success>를 반환 하는 값을 사용 하지 않아야 합니다 <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>, <xref:System.Net.NetworkInformation.PingReply.Options%2A> 또는 <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> 속성입니다. <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> 속성은 0을 반환 합니다 <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> 속성은 빈 배열을 반환 및 <xref:System.Net.NetworkInformation.PingReply.Options%2A> 속성은 반환 `null`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.NetworkInformation.Ping> 클래스를 동기적으로 ICMP 에코 요청을 보내고 응답을 표시 합니다.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IPAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IPAddress ^ Address { System::Net::IPAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Address : System.Net.IPAddress" Usage="System.Net.NetworkInformation.PingReply.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ICMP(Internet Control Message Protocol) Echo Reply를 보내는 호스트의 주소를 가져옵니다.</summary>
        <value>ICMP Echo 메시지의 대상이 들어 있는 <see cref="T:System.Net.IPAddress" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Net.NetworkInformation.PingReply.Address%2A> 에서 반환 된 <xref:System.Net.NetworkInformation.Ping.Send%2A> 오버 로드는 악의적인 원격 컴퓨터에서 발생할 수 있습니다. 이 주소를 사용 하 여 원격 컴퓨터에 연결 되지 않습니다. 연결 하려는 컴퓨터의 IP 주소를 확인 하려면 DNS를 사용 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 ICMP echo request를 동기적으로 보내고이 속성의 값을 표시 합니다.  
  
 [!code-cpp[NclPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NclPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public byte[] Buffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Buffer" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Buffer As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Buffer { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Buffer : byte[]" Usage="System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ICMP(Internet Control Message Protocol) Echo Reply 메시지에서 받은 데이터의 버퍼를 가져옵니다.</summary>
        <value>ICMP Echo Reply 메시지에서 받은 데이터가 들어 있는 <see cref="T:System.Byte" /> 배열이거나, 받은 회신이 없는 경우 빈 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 보낸 ICMP echo request를 사용 하 여 데이터 버퍼는 알려진된 크기의 패킷 왕복 이동 시간을 계산할 수 있도록 에코 응답에 보낸 사람에 게 반환 됩니다. 와 결합 된 데이터 버퍼를 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> 옵션, 원본 및 대상 컴퓨터 간의 네트워크 경로 대 한 최대 전송 단위 검색에 사용할 수 있습니다. 자세한 내용은 1574 RFC, 섹션 3.2의 경우에 사용할 수 있는에서 "경로 추적"을 참조 하세요 [ https://www.ietf.org ](https://www.ietf.org)합니다.  
  
 사용한 기본 버퍼 <xref:System.Net.NetworkInformation.Ping.Send%2A> 고 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> 32 바이트의 데이터를 포함 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 ICMP echo request를 동기적으로 보내고이 속성에 의해 반환 되는 버퍼의 크기를 표시 합니다.  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkInformation.PingOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As PingOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::PingOptions ^ Options { System::Net::NetworkInformation::PingOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Net.NetworkInformation.PingOptions" Usage="System.Net.NetworkInformation.PingReply.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ICMP(Internet Control Message Protocol) Echo Request에 대한 회신을 전송하는 데 사용된 옵션을 가져옵니다.</summary>
        <value><see cref="T:System.Net.NetworkInformation.PingOptions" />가 <see cref="P:System.Net.NetworkInformation.PingReply.Status" />이면 회신을 전송하는 데 사용된 TTL(Time to Live) 및 조각화 지시문이 들어 있는 <see cref="F:System.Net.NetworkInformation.IPStatus.Success" /> 개체이고, 그렇지 않으면 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 TTL 노드는 원본과 대상 간에 이동할 때 해당 패킷을 전달할 수 있는 다시 시도 횟수를 정의 합니다. 홉을 라고도 전달 횟수 TTL에 대 한 지정 된 값을 초과 하면 패킷이 배달할 수 없는 것으로 간주 됩니다 및 삭제 됩니다.  
  
 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ICMP 에코 요청 컨트롤 패킷 조각화에 지정 된 값입니다. 하는 경우 <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> 됩니다 `true` 패킷에 사용 된 네트워크 경로의 최대 전송 단위를 초과 하는 패킷 크기, 패킷이 삭제 됩니다 및 <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig> 오류가 반환 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 ICMP 에코 요청을 동기적으로 전송 및 저장 된 값을 표시 합니다 <xref:System.Net.NetworkInformation.PingOptions> 이 속성에 의해 반환 되는 개체입니다.  
  
 [!code-cpp[NclPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NclPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundtripTime">
      <MemberSignature Language="C#" Value="public long RoundtripTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 RoundtripTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoundtripTime As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long RoundtripTime { long get(); };" />
      <MemberSignature Language="F#" Value="member this.RoundtripTime : int64" Usage="System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ICMP(Internet Control Message Protocol) Echo Request를 보내고 이에 대응하는 ICMP Echo Reply 메시지를 받는 데 걸린 시간(밀리초)을 가져옵니다.</summary>
        <value>라운드트립 시간(밀리초)을 나타내는 <see cref="T:System.Int64" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Echo request에 실패 하면는 <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> 시간이 값인도 유효한 요청에 성공 하면 0으로 보고 됩니다. 확인 해야 합니다는 <xref:System.Net.NetworkInformation.PingReply.Status%2A> 이 속성에 의해 반환 되는 값을 무시할지 여부를 확인 하려면.  
  
   
  
## Examples  
 다음 코드 예제는 ICMP echo request를 동기적으로 보내고이 속성에 의해 반환 되는 버퍼의 크기를 표시 합니다.  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.IPStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.NetworkInformation.IPStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As IPStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::IPStatus Status { System::Net::NetworkInformation::IPStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Net.NetworkInformation.IPStatus" Usage="System.Net.NetworkInformation.PingReply.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.IPStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ICMP(Internet Control Message Protocol) Echo Request를 보내고 이에 대응하는 ICMP Echo Reply 메시지를 받으려고 시도한 결과 상태를 가져옵니다.</summary>
        <value>요청의 결과를 나타내는 <see cref="T:System.Net.NetworkInformation.IPStatus" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 값 <xref:System.Net.NetworkInformation.PingReply.Status%2A> 아닙니다 <xref:System.Net.NetworkInformation.IPStatus.Success>를 반환 하는 값을 사용 하지 않아야 합니다 <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>, <xref:System.Net.NetworkInformation.PingReply.Options%2A> 또는 <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> 속성입니다. <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> 및 <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> 속성은 0을 반환 하며 <xref:System.Net.NetworkInformation.PingReply.Options%2A> 속성은 반환 `null`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.NetworkInformation.Ping> 클래스를 동기적으로 ICMP 에코 요청을 보내고 응답을 표시 합니다.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>