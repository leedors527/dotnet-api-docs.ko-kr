<Type Name="TcpListener" FullName="System.Net.Sockets.TcpListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eb2b4d962e9ff84bbe0aad0968396a6df0015b8c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58698723" /></Metadata><TypeSignature Language="C#" Value="public class TcpListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpListener extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpListener" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpListener" />
  <TypeSignature Language="F#" Value="type TcpListener = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>TCP 네트워크 클라이언트에서 연결을 수신합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener> 클래스에 대 한 수신 대기 하며 동기식 차단에서 들어오는 연결 요청을 수락 하는 간단한 메서드를 제공 합니다. 사용할 수 있습니다는 <xref:System.Net.Sockets.TcpClient> 또는 <xref:System.Net.Sockets.Socket> 연결할는 <xref:System.Net.Sockets.TcpListener>합니다. 만들기는 <xref:System.Net.Sockets.TcpListener> 를 사용 하는 <xref:System.Net.IPEndPoint>, 로컬 IP 주소 및 포트 번호 또는 포트 번호를 방금 합니다. 지정 <xref:System.Net.IPAddress.Any> 로컬 IP 주소 및 로컬 포트 번호를 해당 값을 할당 하려면 기본 서비스 공급자를 하려는 경우에 0입니다. 이 작업을 수행 하려는 경우 사용할 수는 <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> 소켓에 연결한 후 할당된 된 정보를 식별 하는 속성입니다.  
  
 사용 된 <xref:System.Net.Sockets.TcpListener.Start%2A> 메서드 들어오는 연결 요청을 수신 대기를 시작 합니다. <xref:System.Net.Sockets.TcpListener.Start%2A> 들어오는 연결 중 하나를 호출 하기 전에 큐를 <xref:System.Net.Sockets.TcpListener.Stop%2A> 메서드 또는 해당 큐에 대기 했음을 <xref:System.Net.Sockets.SocketOptionName.MaxConnections>합니다. 사용 하 여 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 또는 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 들어오는 연결 요청 큐에서 연결을 가져오려고 합니다. 이러한 두 메서드는 차단 됩니다. 차단 되지 않도록 하려는 경우 사용할 수 있습니다는 <xref:System.Net.Sockets.TcpListener.Pending%2A> 연결 요청이 큐에서 사용할 수 있는지 확인 하려면 먼저 메서드.  
  
 호출 된 <xref:System.Net.Sockets.TcpListener.Stop%2A> 닫는 메서드를는 <xref:System.Net.Sockets.TcpListener>합니다.  
  
> [!NOTE]
>  <xref:System.Net.Sockets.TcpListener.Stop%2A> 메서드는 승인 된 모든 연결을 닫지 않습니다. 이러한 작업을 개별적으로 닫는 책임이 있습니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Net.Sockets.TcpListener>합니다.  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 참조 <xref:System.Net.Sockets.TcpClient> 클라이언트 예제입니다.  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission">나가는 연결을 설정 하거나 들어오는 요청을 수락 합니다.</permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Net.Sockets.TcpListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : int -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener port" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use TcpListener (IPAddress address, int port) instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use TcpListener(IPAddress localaddr, int port) instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use TcpListener(IPAddress localaddr, int port).")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use TcpListener(IPAddress localaddr, int port) instead. https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="port">들어오는 연결 시도를 수신하는 데 사용되는 포트입니다.</param>
        <summary>지정된 포트에서 수신하는 <see cref="T:System.Net.Sockets.TcpListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 사용되지 않습니다. 사용 된 <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType> 또는 <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType> 생성자입니다.  
  
 이 생성자를 사용 하면 들어오는 연결 시도를 수신 대기할 포트 번호를 지정할 수 있습니다. 이 생성자를 사용 하 여 기본 서비스 공급자는 가장 적합 한 네트워크 주소를 할당합니다. 사용 되는 로컬 포트는 중요 하지 않은 경우에 포트 번호는 0을 지정할 수 있습니다. 이 경우 서비스 공급자에는 사용할 수 있는 임시 포트 번호를 할당 합니다. 사용 하 여 할당 된 로컬 네트워크 주소 및 포트 번호를 검색할 수 있습니다이 방법을 사용 하는 경우는 <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> 속성입니다.  
  
 호출 된 <xref:System.Net.Sockets.TcpListener.Start%2A> 메서드 들어오는 연결 시도를 수신 대기를 시작 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener> 로컬 포트 번호를 사용 합니다.  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" />가 <see cref="F:System.Net.IPEndPoint.MinPort" />와 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 사이에 없는 경우</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPEndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : System.Net.IPEndPoint -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener localEP" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP"><see cref="T:System.Net.IPEndPoint" />수신기를 바인딩할 로컬 엔드포인트를 나타내는 <see cref="T:System.Net.Sockets.Socket" />입니다.</param>
        <summary>지정된 로컬 엔드포인트를 사용하여 <see cref="T:System.Net.Sockets.TcpListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자를 사용 하면 로컬 IP 주소를 지정할 수 있습니다 하 고 들어오는 연결에 대 한 수신 대기할 포트 번호 시도 합니다. 이 생성자를 사용 하기 전에 만들어야 합니다를 <xref:System.Net.IPEndPoint> 원하는 로컬 IP 주소와 포트 번호를 사용 하 여 합니다. 이 전달 <xref:System.Net.IPEndPoint> 으로 생성자에는 `localEP` 매개 변수입니다.  
  
 할당 되는 로컬 주소는 중요 하지 않은 경우 만들 수 있습니다는 <xref:System.Net.IPEndPoint> 를 사용 하 여 <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> 주소 매개 변수 및 기본 서비스 공급자 가장 적합 한 네트워크 주소를 할당 합니다. 이렇게 하면 여러 네트워크 인터페이스가 있는 경우 응용 프로그램을 간소화 하는 데 도움이 될 수 있습니다. 사용 되는 로컬 포트는 중요 하지 않은 경우 만들 수 있습니다는 <xref:System.Net.IPEndPoint> 포트 번호 0을 사용 합니다. 이 경우 서비스 공급자에는 사용할 수 있는 임시 포트 번호를 할당 합니다. 사용 하 여 할당 된 로컬 네트워크 주소 및 포트 번호를 검색할 수 있습니다이 방법을 사용 하는 경우는 <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> 속성입니다.  
  
 호출 된 <xref:System.Net.Sockets.TcpListener.Start%2A> 메서드 들어오는 연결 시도를 수신 대기를 시작 합니다.  
  
> [!NOTE]
>  응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다. 자세한 내용은 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.  
  
   
  
## Examples  
 인스턴스를 만들고 다음 코드 예제는 <xref:System.Net.Sockets.TcpListener> 로컬 끝점을 사용 하 여 클래스입니다.  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="localEP" />가 <see langword="null" />입니다.</exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPAddress localaddr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress localaddr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localaddr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPAddress ^ localaddr, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : System.Net.IPAddress * int -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener (localaddr, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localaddr" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localaddr">로컬 IP 주소를 나타내는 <see cref="T:System.Net.IPAddress" />입니다.</param>
        <param name="port">들어오는 연결 시도를 수신하는 데 사용되는 포트입니다.</param>
        <summary>지정된 로컬 IP 주소와 포트 번호에서 들어오는 연결 시도를 수신하는 <see cref="T:System.Net.Sockets.TcpListener" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자를 사용 하면 로컬 IP 주소를 지정할 수 있습니다 하 고 들어오는 연결에 대 한 수신 대기할 포트 번호 시도 합니다. 이 생성자를 호출 하기 전에 먼저 만들어야 합니다를 <xref:System.Net.IPAddress> 원하는 로컬 주소를 사용 합니다. 이 전달 <xref:System.Net.IPAddress> 으로 생성자에는 `localaddr` 매개 변수입니다. 할당 되는 로컬 주소는 중요 하지 않은 경우 지정할 <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> 에 대 한는 `localaddr` 매개 변수 및 기본 서비스 공급자는 가장 적합 한 네트워크 주소를 할당 합니다. 이렇게 하면 여러 네트워크 인터페이스가 있는 경우 응용 프로그램을 간소화 하는 데 도움이 될 수 있습니다. 사용 되는 로컬 포트는 중요 하지 않은 경우에 포트 번호는 0을 지정할 수 있습니다. 이 경우 서비스 공급자에는 1024-5000 사이의 사용 가능한 포트 번호를 할당 합니다. 사용 하 여 할당 된 로컬 네트워크 주소 및 포트 번호를 검색할 수 있습니다이 방법을 사용 하는 경우는 <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> 속성입니다.  
  
 호출 된 <xref:System.Net.Sockets.TcpListener.Start%2A> 메서드 들어오는 연결 시도를 수신 대기를 시작 합니다.  
  
> [!NOTE]
>  응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다. 자세한 내용은 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.  
  
   
  
## Examples  
 인스턴스를 만들고 다음 코드 예제는 <xref:System.Net.Sockets.TcpListener> 로컬 IP 주소 및 포트 번호를 사용 하 여 클래스입니다.  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="localaddr" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" />가 <see cref="F:System.Net.IPEndPoint.MinPort" />와 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 사이에 없는 경우</exception>
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket AcceptSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket AcceptSocket() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocket" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocket () As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ AcceptSocket();" />
      <MemberSignature Language="F#" Value="member this.AcceptSocket : unit -&gt; System.Net.Sockets.Socket" Usage="tcpListener.AcceptSocket " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>보류 중인 연결 요청을 받아들입니다.</summary>
        <returns>데이터를 보내고 받는 데 사용되는 <see cref="T:System.Net.Sockets.Socket" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 가 반환 하는 차단 메서드를 <xref:System.Net.Sockets.Socket> 데이터를 받고 보내는 데 사용할 수 있습니다. 차단 되지 않도록 하려는 경우 사용 된 <xref:System.Net.Sockets.TcpListener.Pending%2A> 연결 요청이 들어오는 연결 큐에서 사용할 수 있는지 확인 하는 방법입니다.  
  
 <xref:System.Net.Sockets.Socket> 반환 원격 호스트의 IP 주소와 포트 번호를 사용 하 여 초기화 됩니다. 중 하나를 사용할 수 있습니다 합니다 <xref:System.Net.Sockets.Socket.Send%2A> 및 <xref:System.Net.Sockets.Socket.Receive%2A> 에서 사용할 수 있는 메서드는 <xref:System.Net.Sockets.Socket> 원격 호스트와 통신 하는 클래스입니다. 완료 될 때 사용 하 여 합니다 <xref:System.Net.Sockets.Socket>를 호출 해야 해당 <xref:System.Net.Sockets.Socket.Close%2A> 메서드. 응용 프로그램이 비교적 단순한 경우 사용을 고려 합니다 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드 대신 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드. <xref:System.Net.Sockets.TcpClient> 동기식 차단에서 네트워크를 통해 데이터를 주고받기 위한 간단한 메서드를 사용 하 여 제공 합니다.  
  
> [!NOTE]
>  응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다. 자세한 내용은 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드를 사용 하 여 반환 하는 <xref:System.Net.Sockets.Socket>합니다. 이 <xref:System.Net.Sockets.Socket> 새로 연결 된 클라이언트와 통신 하는 데 사용 됩니다.  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.TcpListener.Start" />의 호출과 함께 수신기가 시작하지 않은 경우</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt; AcceptSocketAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.Socket&gt; AcceptSocketAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocketAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocketAsync () As Task(Of Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::Socket ^&gt; ^ AcceptSocketAsync();" />
      <MemberSignature Language="F#" Value="member this.AcceptSocketAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;" Usage="tcpListener.AcceptSocketAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>보류 중인 연결 요청을 비동기 작업으로 허용합니다.</summary>
        <returns>비동기 작업(operation)을 나타내는 작업(task) 개체입니다. 작업 개체의 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성은 데이터를 보내고 받는 데 사용하는 <see cref="T:System.Net.Sockets.Socket" />을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task%601> 개체 소켓 연결이 승인 된 후 완료 됩니다.  
  
 합니다 <xref:System.Net.Sockets.Socket> 에서 반환 된 <xref:System.Threading.Tasks.Task%601> 원격 호스트의 IP 주소와 포트 번호를 사용 하 여 초기화 됩니다. 중 하나를 사용할 수 있습니다 합니다 <xref:System.Net.Sockets.Socket.Send%2A> 및 <xref:System.Net.Sockets.Socket.Receive%2A> 에서 사용할 수 있는 메서드는 <xref:System.Net.Sockets.Socket> 원격 호스트와 통신 하는 클래스입니다. 완료 될 때 사용 하 여 합니다 <xref:System.Net.Sockets.Socket>를 호출 해야 해당 <xref:System.Net.Sockets.Socket.Close%2A> 메서드. 응용 프로그램이 비교적 단순한 경우 사용을 고려 합니다 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드 대신 <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> 메서드. <xref:System.Net.Sockets.TcpClient> 동기식 차단에서 네트워크를 통해 데이터를 주고받기 위한 간단한 메서드를 사용 하 여 제공 합니다.  
  
> [!NOTE]
>  응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다. 자세한 내용은 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.TcpListener.Start" />의 호출과 함께 수신기가 시작하지 않은 경우</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient AcceptTcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient AcceptTcpClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClient () As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ AcceptTcpClient();" />
      <MemberSignature Language="F#" Value="member this.AcceptTcpClient : unit -&gt; System.Net.Sockets.TcpClient" Usage="tcpListener.AcceptTcpClient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>보류 중인 연결 요청을 받아들입니다.</summary>
        <returns>데이터를 보내고 받는 데 사용되는 <see cref="T:System.Net.Sockets.TcpClient" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 가 반환 하는 차단 메서드를 <xref:System.Net.Sockets.TcpClient> 데이터를 받고 보내는 데 사용할 수 있습니다. 사용 된 <xref:System.Net.Sockets.TcpListener.Pending%2A> 차단 되지 않도록 하려는 경우 연결 요청이 들어오는 연결 큐에서 사용할 수 있는지 확인 하는 방법입니다.  
  
 사용 된 <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> 메서드 내부 <xref:System.Net.Sockets.NetworkStream> 반환 된 <xref:System.Net.Sockets.TcpClient>. <xref:System.Net.Sockets.NetworkStream> 하면 메서드를 사용 하 여 원격 호스트와 송수신에 대 한 합니다. 후에 사용 하 여 합니다 <xref:System.Net.Sockets.TcpClient>를 호출 해야 해당 <xref:System.Net.Sockets.TcpClient.Close%2A> 메서드. 보다 더 큰 유연성을 원하는 경우는 <xref:System.Net.Sockets.TcpClient> 제품을 사용해 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>합니다.  
  
> [!NOTE]
>  응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다. 자세한 내용은 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드를 사용 하 여 반환 하는 <xref:System.Net.Sockets.TcpClient>합니다. 이 <xref:System.Net.Sockets.TcpClient> 새로 연결 된 클라이언트와 통신 하는 데 사용 됩니다.  
  
 [!code-cpp[Classic TcpListenerExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListenerExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListenerExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListenerExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListenerExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListenerExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.TcpListener.Start" />의 호출과 함께 수신기가 시작하지 않은 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 속성을 사용하여 특정 오류 코드를 가져오십시오. 이 코드를 가져온 다음, <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows 소켓 버전 2 API 오류 코드</see> 설명서에서 오류에 대한 자세한 설명을 참조할 수 있습니다.</exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClientAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClientAsync () As Task(Of TcpClient)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::TcpClient ^&gt; ^ AcceptTcpClientAsync();" />
      <MemberSignature Language="F#" Value="member this.AcceptTcpClientAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;" Usage="tcpListener.AcceptTcpClientAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>보류 중인 연결 요청을 비동기 작업으로 허용합니다.</summary>
        <returns>비동기 작업(operation)을 나타내는 작업(task) 개체입니다. 작업 개체의 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성은 데이터를 보내고 받는 데 사용하는 <see cref="T:System.Net.Sockets.TcpClient" />을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task%601> 개체는 TCP 연결을 승인 된 후 완료 됩니다.  
  
 사용 하 여는 <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> 메서드 내부 <xref:System.Net.Sockets.NetworkStream> 반환 된 <xref:System.Net.Sockets.TcpClient> 에 <xref:System.Threading.Tasks.Task%601>합니다. <xref:System.Net.Sockets.NetworkStream> 하면 메서드를 사용 하 여 원격 호스트와 송수신에 대 한 합니다. 후에 사용 하 여 합니다 <xref:System.Net.Sockets.TcpClient>를 호출 해야 해당 <xref:System.Net.Sockets.TcpClient.Close%2A> 메서드. 보다 더 큰 유연성을 원하는 경우는 <xref:System.Net.Sockets.TcpClient> 제품을 사용 하는 것이 좋습니다 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 또는 <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>합니다.  
  
> [!NOTE]
>  응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다. 자세한 내용은 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.TcpListener.Start" />의 호출과 함께 수신기가 시작하지 않은 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 속성을 사용하여 특정 오류 코드를 가져오십시오. 이 코드를 가져온 다음, <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows 소켓 버전 2 API 오류 코드</see> 설명서에서 오류에 대한 자세한 설명을 참조할 수 있습니다.</exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Active" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool" Usage="System.Net.Sockets.TcpListener.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Net.Sockets.TcpListener" />가 클라이언트 연결을 실제로 수신하고 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value><see cref="T:System.Net.Sockets.TcpListener" />가 실제로 수신하고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생 된 클래스 <xref:System.Net.Sockets.TcpListener> 여부를 확인 하려면이 속성을 사용할 수는 <xref:System.Net.Sockets.Socket> 현재 들어오는 연결 시도를 수신 대기 합니다. 합니다 <xref:System.Net.Sockets.TcpClient.Active%2A> 중복을 방지 하려면 속성을 사용할 수 있습니다 <xref:System.Net.Sockets.TcpListener.Start%2A> 시도 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberSignature Language="F#" Value="member this.AllowNatTraversal : bool -&gt; unit" Usage="tcpListener.AllowNatTraversal allowed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="allowed">NAT 통과를 설정 또는 해제할지를 지정하는 부울 값입니다.</param>
        <summary><see cref="T:System.Net.Sockets.TcpListener" /> 인스턴스에 대해 NAT(Network Address Translation) 통과를 설정하거나 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> 메서드를 사용 하도록 설정 또는 NAT 통과 사용 하지 않도록 설정에 사용 되는 <xref:System.Net.Sockets.TcpListener> 인스턴스. Teredo, 6to4 또는 ISATAP 터널을 사용 하 여 NAT 통과 제공할 수 있습니다.  
  
 경우는 `allowed` 매개 변수는 false를 <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> 연결된 된 소켓에서 옵션을 설정 <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>합니다. 이 명시적으로 사용 하지 않도록 설정에 대 한 NAT 통과 <xref:System.Net.Sockets.TcpListener> 인스턴스.  
  
 경우는 `allowed` 매개 변수는 true를 <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> 연결된 된 소켓에서 옵션을 설정 <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>합니다. 이 수에 대 한 NAT 통과 <xref:System.Net.Sockets.TcpListener> 시스템에서 방화벽 규칙에 따라 합니다.  
  
 <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> 메서드를 호출 하기 전에 호출 해야 합니다는 <xref:System.Net.Sockets.TcpListener.Start%2A> 메서드 (소켓이 바인딩되어) 전에 들어오는 연결 요청을 수신 대기를 시작 합니다. 하는 경우 <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> 메서드가 이후에 호출 합니다 <xref:System.Net.Sockets.TcpListener.Start%2A> 메서드는 <xref:System.InvalidOperationException> throw 됩니다.  
  
 Teredo 주소는 2001의 접두사를 사용 하 여 IPv6 주소:: / 32입니다. Teredo 주소는 일반 DNS 이름 확인을 통해 반환 또는 로컬 인터페이스에 할당 된 IPv6 주소로 열거할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> 메서드를 호출한 후 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 메서드를 호출한 경우입니다.</exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptSocket">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptSocket(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptSocket (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptSocket(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAcceptSocket : AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpListener.BeginAcceptSocket (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback">작업이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="state">연결을 받아들이는 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <paramref name="callback" /> 대리자에게 전달됩니다.</param>
        <summary>들어오는 연결 시도를 받아들이는 비동기 작업을 시작합니다.</summary>
        <returns><see cref="T:System.IAsyncResult" />의 비동기 생성을 참조하는 <see cref="T:System.Net.Sockets.Socket" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> 를 호출 하 여 작업을 완료 해야 합니다 <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> 메서드. 메서드는 일반적으로 `callback` 위임 합니다.  
  
 이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다. 작업이 완료 될 때까지 차단 합니다 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드.  
  
 비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.  
  
> [!NOTE]
>  호출할 수 있습니다 합니다 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 반환 된 속성 <xref:System.Net.Sockets.Socket> 원격 호스트의 네트워크 주소 및 포트 번호를 확인할 수 있습니다.  
  
> [!NOTE]
>  수신 되 면를 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 참조 하 고 특정 오류 코드를 가져옵니다는 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 설명서에 대 한 자세한 설명은 오류.  
  
> [!NOTE]
>  응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다. 자세한 내용은 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> 만들고 소켓을 연결 하는 메서드. 콜백 대리자 호출을 <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> 비동기 요청을 종료 하는 방법입니다.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스하려고 시도하는 동안 오류가 발생한 경우.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptTcpClient">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptTcpClient(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptTcpClient (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptTcpClient(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAcceptTcpClient : AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpListener.BeginAcceptTcpClient (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback">작업이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="state">연결을 받아들이는 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <paramref name="callback" /> 대리자에게 전달됩니다.</param>
        <summary>들어오는 연결 시도를 받아들이는 비동기 작업을 시작합니다.</summary>
        <returns><see cref="T:System.IAsyncResult" />의 비동기 생성을 참조하는 <see cref="T:System.Net.Sockets.TcpClient" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> 를 호출 하 여 작업을 완료 해야 합니다 <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> 메서드. 메서드는 일반적으로 `callback` 위임 합니다.  
  
 이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다. 작업이 완료 될 때까지 차단 합니다 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드.  
  
 비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.  
  
> [!NOTE]
>  수신 되 면를 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 참조 하 고 특정 오류 코드를 가져옵니다는 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 설명서에 대 한 자세한 설명은 오류.  
  
> [!NOTE]
>  응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다. 자세한 내용은 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> 만들고 소켓을 연결 하는 메서드. 콜백 대리자 호출을 <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> 비동기 요청을 종료 하는 방법입니다.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스하려고 시도하는 동안 오류가 발생한 경우.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Net.Sockets.TcpListener Create (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Sockets.TcpListener Create(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Create(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (port As Integer) As TcpListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Sockets::TcpListener ^ Create(int port);" />
      <MemberSignature Language="F#" Value="static member Create : int -&gt; System.Net.Sockets.TcpListener" Usage="System.Net.Sockets.TcpListener.Create port" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="port">들어오는 연결 시도를 수신하는 데 사용되는 포트입니다.</param>
        <summary>지정된 포트에서 수신 대기할 새 <see cref="T:System.Net.Sockets.TcpListener" /> 인스턴스를 만듭니다.</summary>
        <returns>지정된 포트에서 수신 대기할 새 <see cref="T:System.Net.Sockets.TcpListener" /> 인스턴스입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAcceptSocket(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptSocket (asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAcceptSocket(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAcceptSocket : IAsyncResult -&gt; System.Net.Sockets.Socket" Usage="tcpListener.EndAcceptSocket asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><see cref="T:System.IAsyncResult" /> 메서드를 호출하여 반환된 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />입니다.</param>
        <summary>들어오는 연결 시도를 비동기적으로 받아들이고 원격 호스트 통신을 처리할 새로운 <see cref="T:System.Net.Sockets.Socket" />을 만듭니다.</summary>
        <returns><see cref="T:System.Net.Sockets.Socket" />  
  
데이터를 보내고 받는 데 사용되는 <see cref="T:System.Net.Sockets.Socket" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드 차단 작업이 때까지 완료 합니다. 이 작업을 동기적으로 수행 하려면 사용 된 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드.  
  
> [!NOTE]
>  호출할 수 있습니다 합니다 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 반환 된 속성 <xref:System.Net.Sockets.Socket> 원격 호스트의 네트워크 주소 및 포트 번호를 확인할 수 있습니다.  
  
> [!NOTE]
>  수신 되 면를 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 참조 하 고 특정 오류 코드를 가져옵니다는 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 설명서에 대 한 자세한 설명은 오류.  
  
> [!NOTE]
>  응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다. 자세한 내용은 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> 만들고 소켓을 연결 하는 메서드. 콜백 대리자 호출을 <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> 비동기 요청을 종료 하는 방법입니다.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">내부 <see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> 메서드를 호출하여 <paramref name="asyncResult" /> 매개 변수를 만들지 못한 경우</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> 메서드가 이미 호출된 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><see cref="T:System.Net.Sockets.Socket" />에 액세스하려고 시도하는 동안 오류가 발생한 경우.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient EndAcceptTcpClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptTcpClient (asyncResult As IAsyncResult) As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ EndAcceptTcpClient(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAcceptTcpClient : IAsyncResult -&gt; System.Net.Sockets.TcpClient" Usage="tcpListener.EndAcceptTcpClient asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><see cref="T:System.IAsyncResult" /> 메서드를 호출하여 반환된 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />입니다.</param>
        <summary>들어오는 연결 시도를 비동기적으로 받아들이고 원격 호스트 통신을 처리할 새로운 <see cref="T:System.Net.Sockets.TcpClient" />을 만듭니다.</summary>
        <returns><see cref="T:System.Net.Sockets.TcpClient" />  
  
데이터를 보내고 받는 데 사용되는 <see cref="T:System.Net.Sockets.TcpClient" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드 차단 작업이 때까지 완료 합니다. 이 작업을 동기적으로 수행 하려면 사용 된 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드.  
  
> [!NOTE]
>  호출할 수 있습니다 합니다 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 기본 소켓의 속성 (<xref:System.Net.Sockets.TcpClient.Client%2A>) 원격 호스트의 네트워크 주소 및 포트 번호를 확인할 수 있습니다.  
  
> [!NOTE]
>  수신 되 면를 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 참조 하 고 특정 오류 코드를 가져옵니다는 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 설명서에 대 한 자세한 설명은 오류.  
  
> [!NOTE]
>  응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다. 자세한 내용은 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> 만들고 소켓을 연결 하는 메서드. 콜백 대리자 호출을 <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> 비동기 요청을 종료 하는 방법입니다.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Boolean" />가 특정 포트를 하나의 내부 소켓에서만 수신하는 것을 허용하는지 여부를 지정하는 <see cref="T:System.Net.Sockets.TcpListener" /> 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Net.Sockets.TcpListener" />가 특정 포트를 하나의 <see cref="T:System.Net.Sockets.TcpListener" />에서만 수신하는 것을 허용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. . Windows Server 2003 및 Windows XP 서비스 팩 2 이상에서는 기본값이 <see langword="true" />이고, 다른 모든 버전에서는 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 여러 수신기는 특정 포트를 수신할 수 있습니다. 그러나 수신기 중 하나에만 포트로 전송 되는 네트워크 트래픽에 대 한 작업을 수행할 수 있습니다. 둘 이상의 수신기를 특정 포트에 바인딩하지 하려고 하는 경우 보다 구체적인 IP 주소를 사용 하 여 한 해당 포트에 전송 되는 네트워크 트래픽을 처리 합니다. 사용할 수는 <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> 여러 수신기가 특정 포트를 수신 대기 하지 않도록 속성을 합니다.  
  
 호출 하기 전에이 속성을 설정 <xref:System.Net.Sockets.TcpListener.Start%2A>, 호출 또는 <xref:System.Net.Sockets.TcpListener.Stop%2A> 메서드 및이 속성을 설정 합니다.  
  
   
  
## Examples  
 다음 코드 예제를 가져오고 설정 합니다 <xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A> 속성입니다.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#2)]
 [!code-vb[System.Net.Sockets.TcpListener1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.TcpListener" />가 시작된 경우. <see cref="M:System.Net.Sockets.TcpListener.Stop" /> 메서드를 호출한 다음 <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> 속성을 설정하십시오.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">내부 소켓에 액세스하려고 시도하는 동안 오류가 발생한 경우.</exception>
        <exception cref="T:System.ObjectDisposedException">내부 <see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpListener ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="tcpListener.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Net.Sockets.TcpListener" /> 클래스에서 사용한 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
합니다 <xref:System.Net.Sockets.TcpListener> 종료자 무료 리소스와 관련 된 클래스는 <xref:System.Net.Sockets.TcpListener> 인스턴스.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalEndpoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndpoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndpoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ LocalEndpoint { System::Net::EndPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalEndpoint : System.Net.EndPoint" Usage="System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Net.EndPoint" />의 내부 <see cref="T:System.Net.Sockets.TcpListener" />를 가져옵니다.</summary>
        <value><see cref="T:System.Net.EndPoint" />이 바인딩될 <see cref="T:System.Net.Sockets.Socket" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 수는 <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> 소켓 연결이 설정 된 후에 들어오는 클라이언트 연결 요청을 수신 하는 데 사용 되는 로컬 네트워크 인터페이스 및 포트 번호를 식별 하는 속성입니다. 이 먼저 캐스팅 해야 합니다 <xref:System.Net.EndPoint> 에 <xref:System.Net.IPEndPoint>합니다. 호출할 수 있습니다 합니다 <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> 로컬 IP 주소를 검색할 속성 및 <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> 로컬 포트 번호를 검색할 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제는 로컬 IP 주소와 포트 번호를 표시 합니다 <xref:System.Net.Sockets.TcpListener> 들어오는 연결 요청을 수신 합니다.  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.EndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Pending">
      <MemberSignature Language="C#" Value="public bool Pending ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Pending() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Pending" />
      <MemberSignature Language="VB.NET" Value="Public Function Pending () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Pending();" />
      <MemberSignature Language="F#" Value="member this.Pending : unit -&gt; bool" Usage="tcpListener.Pending " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>보류 중인 연결 요청이 있는지 여부를 확인합니다.</summary>
        <returns>연결이 보류 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 비차단 메서드는 보류 중인 연결 요청이 있는지를 결정 합니다. 때문에 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 및 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 될 때까지 실행을 차단 하는 메서드를 <xref:System.Net.Sockets.TcpListener.Start%2A> 메서드는 들어오는 연결 요청을 큐에 대기 했음을 <xref:System.Net.Sockets.TcpListener.Pending%2A> 메서드는 연결 동의 하기 전에 사용할 수 있는 경우 확인 데 사용할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener.Pending%2A> 메서드. 연결 요청을 허용 하려고 대기 하는 경우를 호출 합니다는 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드 구성 됩니다.  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.TcpListener.Start" />의 호출과 함께 수신기가 시작하지 않은 경우</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Server { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Server" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Server" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Server As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Server { System::Net::Sockets::Socket ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Server : System.Net.Sockets.Socket" Usage="System.Net.Sockets.TcpListener.Server" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>내부 네트워크 <see cref="T:System.Net.Sockets.Socket" />을 가져옵니다.</summary>
        <value>내부 <see cref="T:System.Net.Sockets.Socket" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener> 만듭니다는 <xref:System.Net.Sockets.Socket> 들어오는 클라이언트 연결 요청을 수신 대기 합니다. 파생 된 클래스 <xref:System.Net.Sockets.TcpListener> 이이 속성을 사용할 수 <xref:System.Net.Sockets.Socket>입니다. 기본 사용 <xref:System.Net.Sockets.Socket> 반환한 합니다 <xref:System.Net.Sockets.TcpListener.Server%2A> 는 그 외에도 필요 하면 액세스 <xref:System.Net.Sockets.TcpListener> 제공 합니다.  
  
> [!NOTE]
>  합니다 <xref:System.Net.Sockets.TcpListener.Server%2A> 속성을 반환 합니다만 <xref:System.Net.Sockets.Socket> 들어오는 클라이언트 연결 요청을 수신 하는 데 사용 합니다. 사용 된 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드를 가져와서 보류 중인 연결 요청을 수락를 <xref:System.Net.Sockets.Socket> 데이터 보내기 및 받기에 대 한 합니다. 사용할 수도 있습니다는 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드를 가져와서 보류 중인 연결 요청을 수락을 <xref:System.Net.Sockets.TcpClient> 데이터 보내기 및 받기에 대 한 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.TcpListener.Server%2A> 속성입니다. 내부 <xref:System.Net.Sockets.Socket> 검색 하며 <xref:System.Net.Sockets.SocketOptionName.Linger> <xref:System.Net.Sockets.Socket> 옵션이 구성 된 제한 시간을 10 초 후 데이터 네트워크 버퍼에 연결을 닫은 후 계속 남아 있으면입니다.  
  
 [!code-csharp[TcpListenerProtectedMembers1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListenerProtectedMembers1/CS/source.cs#1)]
 [!code-vb[TcpListenerProtectedMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListenerProtectedMembers1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>들어오는 연결 요청의 수신을 시작합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="tcpListener.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>들어오는 연결 요청의 수신을 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Net.Sockets.TcpListener.Start%2A> 메서드를 기본 초기화 <xref:System.Net.Sockets.Socket>, 로컬 끝점에 바인드합니다 및 들어오는 연결 시도를 수신 합니다. 연결 요청이 수신 되 면 합니다 <xref:System.Net.Sockets.TcpListener.Start%2A> 요청을 큐에 메서드를 호출할 때까지 추가 요청을 수신 대기를 계속 합니다 <xref:System.Net.Sockets.TcpListener.Stop%2A> 메서드. 하는 경우 <xref:System.Net.Sockets.TcpListener> 연결 요청을 받으면 발생 후 이미 연결 수가 최대 큐에 대기 했음을는 <xref:System.Net.Sockets.SocketException> 클라이언트에서.  
  
 들어오는 연결 큐에서 연결을 제거 하려면 하나를 사용 합니다 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드 또는 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드. 합니다 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드는 큐에서 연결을 제거 하 고 반환 됩니다는 <xref:System.Net.Sockets.TcpClient> 데이터를 받고 보내는 데 사용할 수 있습니다. 합니다 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드는 반환을 <xref:System.Net.Sockets.Socket> 동일 하 게 사용할 수 있습니다. 응용 프로그램에 동기 I/O 필요한 경우 사용 하 여 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>입니다. 자세한 동작 제어를 사용 하 여 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>입니다. 두 가지이 방법에는 연결 요청을 큐에 있을 때까지 차단 합니다.  
  
 사용 합니다 <xref:System.Net.Sockets.TcpListener.Stop%2A> 닫는 메서드를를 <xref:System.Net.Sockets.TcpListener> 수신을 중지 합니다. 허용 된 연결을 개별적으로 닫는 책임이 있습니다.  
  
> [!NOTE]
>  응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다. 자세한 내용은 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 어떻게 <xref:System.Net.Sockets.TcpListener.Start%2A> 들어오는 클라이언트 연결 시도를 수신 하는 데 사용 됩니다.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 속성을 사용하여 특정 오류 코드를 가져오십시오. 이 코드를 가져온 다음, <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows 소켓 버전 2 API 오류 코드</see> 설명서에서 오류에 대한 자세한 설명을 참조할 수 있습니다.</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (backlog As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(int backlog);" />
      <MemberSignature Language="F#" Value="member this.Start : int -&gt; unit" Usage="tcpListener.Start backlog" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="backlog">보류 중인 연결 큐의 최대 길이입니다.</param>
        <summary>최대 보류 연결 수로 들어오는 연결 요청에 대한 수신을 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Net.Sockets.TcpListener.Start%2A> 메서드를 기본 초기화 <xref:System.Net.Sockets.Socket>, 로컬 끝점에 바인드합니다 및 들어오는 연결 시도를 수신 합니다. 연결 요청이 수신 되 면 <xref:System.Net.Sockets.TcpListener.Start%2A> 요청을 큐를 호출할 때까지 추가 요청을 수신 대기를 계속 합니다 <xref:System.Net.Sockets.TcpListener.Stop%2A> 메서드. 하는 경우 <xref:System.Net.Sockets.TcpListener> 발생 하는 연결 수가 최대 큐에 이미 대기 했음을 후 연결 요청을 받으면는 <xref:System.Net.Sockets.SocketException> 클라이언트에서.  
  
 들어오는 연결 큐에서 연결을 제거 하려면 하나를 사용 합니다 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드 또는 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드. 합니다 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 메서드는 큐에서 연결을 제거 하 고 반환 됩니다는 <xref:System.Net.Sockets.TcpClient> 데이터를 받고 보내는 데 사용할 수 있습니다. 합니다 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드는 반환을 <xref:System.Net.Sockets.Socket> 동일 하 게 사용할 수 있습니다. 응용 프로그램에 동기 I/O 필요한 경우 사용 된 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>합니다. 사용 하 여 자세한 동작 제어 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 메서드. 두 가지이 방법에는 연결 요청을 큐에 있을 때까지 차단 합니다.  
  
 사용 합니다 <xref:System.Net.Sockets.TcpListener.Stop%2A> 닫는 메서드를를 <xref:System.Net.Sockets.TcpListener> 수신을 중지 합니다. 허용 된 연결을 개별적으로 닫는 책임이 있습니다.  
  
> [!NOTE]
>  <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 사용하여 특정 오류 코드를 가져온 다음, [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 설명서에서 오류에 대한 자세한 설명을 참조하세요.  
  
> [!NOTE]
>  응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다. 자세한 내용은 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 어떻게 <xref:System.Net.Sockets.TcpListener.Start%2A> 들어오는 클라이언트 연결 시도를 수신 하는 데 사용 됩니다.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스하는 동안 오류가 발생한 경우.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="backlog" /> 매개 변수가 0보다 작거나 허용된 최대 연결 수를 초과한 경우.</exception>
        <exception cref="T:System.InvalidOperationException">내부 <see cref="T:System.Net.Sockets.Socket" />이 null인 경우</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="tcpListener.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>수신기를 닫습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.Stop%2A> 수신기를 닫습니다. 큐에 있는 모든 연결 허용 되지 않은 요청은 손실 됩니다. 허용할 원격 호스트 연결을 대기 시킵니다는 <xref:System.Net.Sockets.SocketException>합니다. 허용 된 연결을 개별적으로 닫는 책임이 있습니다.  
  
> [!NOTE]
>  응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다. 자세한 내용은 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Net.Sockets.TcpListener.Stop%2A> 내부를 닫는 메서드를 <xref:System.Net.Sockets.Socket>입니다.  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 속성을 사용하여 특정 오류 코드를 가져오십시오. 이 코드를 가져온 다음, <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows 소켓 버전 2 API 오류 코드</see> 설명서에서 오류에 대한 자세한 설명을 참조할 수 있습니다.</exception>
        <block subset="none" type="usage"><para><see cref="M:System.Net.Sockets.TcpListener.Stop" /> 메서드는 기본도 닫힙니다 <see cref="T:System.Net.Sockets.Socket" />를 새로 만들고 <see cref="T:System.Net.Sockets.Socket" /> 에 대 한는 <see cref="T:System.Net.Sockets.TcpListener" />합니다. 내부 속성을 설정 하면 <see cref="T:System.Net.Sockets.Socket" /> 호출 하기 전에 <see cref="M:System.Net.Sockets.TcpListener.Stop" /> 메서드를 이러한 속성은 전달 되지 새 <see cref="T:System.Net.Sockets.Socket" />합니다.</para></block>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
  </Members>
</Type>