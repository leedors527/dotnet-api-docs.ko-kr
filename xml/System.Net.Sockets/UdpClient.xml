<Type Name="UdpClient" FullName="System.Net.Sockets.UdpClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d42bde34ddb45dd28478821767458cdff363446b" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="58875205" /></Metadata><TypeSignature Language="C#" Value="public class UdpClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UdpClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.UdpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class UdpClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UdpClient : IDisposable" />
  <TypeSignature Language="F#" Value="type UdpClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>UDP(User Datagram Protocol) 네트워크 서비스를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpClient> 클래스 동기식 차단 연결 없는 UDP 데이터 그램을 주고받기 위한 간단한 메서드를 제공 합니다. UDP 전송 연결 없는 프로토콜 이기 때문에 데이터 보내기 및 받기 전에 원격 호스트에 연결을 설정할 필요가 없습니다. 그러나 옵션이 다음 두 가지 방법 중 하나에서 기본 원격 호스트를 설정 하는 위해 있습니다.  
  
-   인스턴스를 만듭니다는 <xref:System.Net.Sockets.UdpClient> 원격 호스트 이름을 사용 하 여 클래스 및 매개 변수로 포트 번호입니다.  
  
-   인스턴스를 만듭니다는 <xref:System.Net.Sockets.UdpClient> 클래스 및 호출 된 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드.  
  
 제공 하는 송신 메서드 중 하나를 사용할 수는 <xref:System.Net.Sockets.UdpClient> 원격 장치에 데이터를 보내도록 합니다. 사용 된 <xref:System.Net.Sockets.UdpClient.Receive%2A> 원격 호스트에서 데이터를 수신 하는 방법입니다.  
  
> [!NOTE]
>  호출 하지 마세요 <xref:System.Net.Sockets.UdpClient.Send%2A> 호스트 이름을 사용 하 여 또는 <xref:System.Net.IPEndPoint> 이미 기본 원격 호스트를 지정한 경우. 이렇게 하면 <xref:System.Net.Sockets.UdpClient> 예외가 throw 됩니다.  
  
 <xref:System.Net.Sockets.UdpClient> 메서드를 사용 하면 멀티 캐스트 데이터 그램을 받고 보내는 데 수도 있습니다. 사용 합니다 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> 구독할 메서드는 <xref:System.Net.Sockets.UdpClient> 멀티 캐스트 그룹에. 사용 합니다 <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> 구독을 취소 하는 메서드를 <xref:System.Net.Sockets.UdpClient> 멀티 캐스트 그룹에서 합니다.  
  
   
  
## Examples  
 다음 예제에서는 설정 된 <xref:System.Net.Sockets.UdpClient> 11000 포트로 호스트 이름 www.contoso.com을 사용 하 여 연결 합니다. 작은 문자열 메시지는 두 개의 별도 원격 호스트 컴퓨터에 전송 됩니다. <xref:System.Net.Sockets.UdpClient.Receive%2A> 메시지가 수신 될 때까지 메서드 실행을 차단 합니다. 사용 하 여 합니다 <xref:System.Net.IPEndPoint> 전달할 <xref:System.Net.Sockets.UdpClient.Receive%2A>, 응답 호스트의 id가 노출 합니다.  
  
 [!code-cpp[Classic UdpClientExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClientExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClientExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClientExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClientExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClientExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission">나가는 연결을 설정 하거나 들어오는 요청을 수락 합니다.</permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
    <related type="Article" href="~/docs/framework/network-programming/tcp-udp.md">TCP-UDP</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Net.Sockets.UdpClient" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Net.Sockets.UdpClient" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자를 만듭니다 <xref:System.Net.Sockets.UdpClient> 에 가장 적합 한 로컬 IPv4 주소와 포트 번호를 할당 하려면 기본 서비스 공급자 수 있습니다. 이 생성자를 사용 하는 경우는 <xref:System.Net.Sockets.UdpClient> 인스턴스 변경 또는 IPv6 대상 사용 하 여 connect 메서드 호출에 의해 덮어쓸 수 없는 ipv4 주소 패밀리를 사용 하 여 설정 됩니다.  
  
> [!NOTE]
>  표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
 이 생성자 소켓 바인딩에 수행 하지 않기 때문에 멀티 캐스트 그룹을 조인 하는 데 적합 하지 않습니다. 또한 IPv4 주소 형식에만 작동합니다.  
  
   
  
## Examples  
 다음 예제에서는의 인스턴스를 만드는 기본 생성자를 사용 하는 방법에 설명 합니다 <xref:System.Net.Sockets.UdpClient> 클래스입니다.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : int -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient port" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">통신할 로컬 포트 번호입니다.</param>
        <summary><see cref="T:System.Net.Sockets.UdpClient" /> 클래스의 새 인스턴스를 초기화하고 해당 인스턴스를 제공되는 로컬 포트 번호에 바인딩합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 내부 만듭니다 <xref:System.Net.Sockets.Socket> 통신 하려는 포트 번호에 바인딩합니다. 로컬 포트 번호를 설정 하려는 경우이 생성자를 사용 합니다. 기본 서비스 공급자는 로컬 IP 주소를 할당 합니다. 생성자에 0을 전달 하는 경우 기본 서비스 공급자 포트 번호를 할당 합니다. 이 생성자를 사용 하는 경우는 <xref:System.Net.Sockets.UdpClient> 인스턴스 변경 또는 IPv6 대상 사용 하 여 connect 메서드 호출에 의해 덮어쓸 수 없는 ipv4 주소 패밀리를 사용 하 여 설정 됩니다.  
  
> [!NOTE]
>  표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
 이 생성자는 IPv4 주소 형식에만 작동합니다.  
  
   
  
## Examples  
 다음 예제에서는 로컬 포트 번호를 사용 하 여의 인스턴스를 만드는 방법을 보여 줍니다는 <xref:System.Net.Sockets.UdpClient> 클래스입니다.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" /> 매개 변수가 <see cref="F:System.Net.IPEndPoint.MaxPort" />보다 크거나 <see cref="F:System.Net.IPEndPoint.MinPort" />보다 작은 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::Net::IPEndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : System.Net.IPEndPoint -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient localEP" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP">UDP 연결을 바인딩할 로컬 엔드포인트를 나타내는 <see cref="T:System.Net.IPEndPoint" />입니다.</param>
        <summary><see cref="T:System.Net.Sockets.UdpClient" /> 클래스의 새 인스턴스를 초기화하고 해당 인스턴스를 지정된 로컬 엔드포인트에 바인딩합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자를 만듭니다 <xref:System.Net.Sockets.UdpClient> 에 바인딩합니다 합니다 <xref:System.Net.IPEndPoint> 에 지정 된 된 `localEP` 매개 변수. 이 생성자를 호출 하기 전에 만들어야 합니다를 <xref:System.Net.IPEndPoint> 보내고 데이터를 수신 하려는 IP 주소와 포트 번호를 사용 하 여 합니다. 데이터 보내기 및 받기에 대 한 로컬 IP 주소 및 포트 번호를 지정할 필요가 없습니다. 이렇게 하지 않으면 경우 기본 서비스 공급자가 가장 적합 한 로컬 IP 주소와 포트 번호를 할당 합니다.  
  
 이 생성자를 사용 하는 경우는 <xref:System.Net.Sockets.UdpClient> 인스턴스는 지정 된 주소 패밀리를 사용 하 여 설정 됩니다는 `localEP` 매개 변수를 변경 하거나 다른 주소 패밀리를 사용 하 여 connect 메서드 호출에 의해 덮어쓸 수 없습니다.  
  
> [!NOTE]
>  표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
   
  
## Examples  
 다음 예에서는 인스턴스의 생성 하는 방법에 설명 합니다 <xref:System.Net.Sockets.UdpClient> 로컬 끝점을 사용 하 여 클래스입니다.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="localEP" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
        <altmember cref="T:System.Net.IPEndPoint" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::Net::Sockets::AddressFamily family);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : System.Net.Sockets.AddressFamily -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient family" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="family">소켓의 주소 지정 체계를 지정하는 <see cref="T:System.Net.Sockets.AddressFamily" /> 값 중 하나입니다.</param>
        <summary><see cref="T:System.Net.Sockets.UdpClient" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `family` 매개 변수는 수신기 IP 버전 4 주소 (IPv4) 또는 IP 버전 6(ipv6) 사용 하는지 여부를 결정 주소입니다. IPv4 주소를 사용 하려면 전달 된 <xref:System.Net.Sockets.AddressFamily.InterNetwork> 값입니다. IPv6 주소를 사용 하려면 전달 된 <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> 값입니다. 다른 값을 전달 하면 메서드가 throw 하는 <xref:System.ArgumentException>합니다.  
  
 이 생성자를 사용 하는 경우는 <xref:System.Net.Sockets.UdpClient> 인스턴스는 지정 된 주소 패밀리를 사용 하 여 설정 됩니다는 `family` 매개 변수를 변경 하거나 다른 주소 패밀리를 사용 하 여 connect 메서드 호출에 의해 덮어쓸 수 없습니다.  
  
> [!NOTE]
>  표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType> 소켓 바인딩에 수행 하지 않기 때문에 멀티 캐스트 그룹을 조인 하는 데 적합 하지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="family" />이 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 또는 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />이 아닌 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (int port, System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port, valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer, family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(int port, System::Net::Sockets::AddressFamily family);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : int * System.Net.Sockets.AddressFamily -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient (port, family)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="port">들어오는 연결 시도를 수신하는 데 사용되는 포트입니다.</param>
        <param name="family">소켓의 주소 지정 체계를 지정하는 <see cref="T:System.Net.Sockets.AddressFamily" /> 값 중 하나입니다.</param>
        <summary><see cref="T:System.Net.Sockets.UdpClient" /> 클래스의 새 인스턴스를 초기화하고 해당 인스턴스를 제공되는 로컬 포트 번호에 바인딩합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 내부 만듭니다 <xref:System.Net.Sockets.Socket> 통신 하려는 포트 번호에 바인딩합니다.  
  
 `family` 매개 변수는 수신기 IP 버전 4 주소 (IPv4) 또는 IP 버전 6(ipv6) 사용 하는지 여부를 결정 주소입니다. IPv4 주소를 사용 하려면 전달 된 <xref:System.Net.Sockets.AddressFamily.InterNetwork> 값입니다. IPv6 주소를 사용 하려면 전달 된 <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> 값입니다. 다른 값을 전달 하면 메서드가 throw 하는 <xref:System.ArgumentException>합니다.  
  
 이 생성자를 사용 하는 경우는 <xref:System.Net.Sockets.UdpClient> 인스턴스는 지정 된 주소 패밀리를 사용 하 여 설정 됩니다는 `family` 매개 변수를 변경 하거나 다른 주소 패밀리를 사용 하 여 connect 메서드 호출에 의해 덮어쓸 수 없습니다.  
  
> [!NOTE]
>  표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후 참조를 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
   
  
## Examples  
 다음 코드 예제에는 멀티 캐스트 그룹에서 사용 하는 UDP 클라이언트를 만드는 방법을 보여 줍니다.  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#3)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="family" />이 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 또는 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />이 아닌 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" />가 <see cref="F:System.Net.IPEndPoint.MaxPort" />보다 크거나 <see cref="F:System.Net.IPEndPoint.MinPort" />보다 작습니다.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : string * int -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient (hostname, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostname">연결할 원격 DNS 호스트의 이름입니다.</param>
        <param name="port">연결할 원격 포트 번호입니다.</param>
        <summary><see cref="T:System.Net.Sockets.UdpClient" /> 클래스의 새 인스턴스를 초기화하고 기본 원격 호스트를 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 새 <xref:System.Net.Sockets.UdpClient> 를 사용 하 여 원격 호스트를 설정 하 고는 `hostname` 고 `port` 매개 변수입니다. 기본 원격 호스트를 설정 하는 것은 선택 사항입니다. 이 생성자를 사용 하는 경우 각 호출에서 원격 호스트를 지정할 필요가 없습니다를 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드. 기본 원격 호스트를 지정 하면 해당 호스트에 제한 됩니다. 호출 하 여 언제 든 지 기본 원격 호스트를 변경할 수는 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드. 호출 하는 원격 호스트를 지정 하려는 경우는 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드를이 생성자를 사용 하지 마십시오.  
  
> [!NOTE]
>  표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
   
  
## Examples  
 다음 예에서는 인스턴스의 생성 하는 방법에 설명 합니다 <xref:System.Net.Sockets.UdpClient> 호스트 이름을 사용 하 여 클래스 및 포트 번호입니다.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostname" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" />가 <see cref="F:System.Net.IPEndPoint.MinPort" />와 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 사이에 없는 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Active" />
      <MemberSignature Language="VB.NET" Value="Protected Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool with get, set" Usage="System.Net.Sockets.UdpClient.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>기본 원격 호스트가 설정되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>연결이 활성화되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생 된 클래스 <xref:System.Net.Sockets.UdpClient> 이 속성을 사용 하 여 기본 원격 호스트를 설정 된 경우를 결정할 수 있습니다. 호출 하거나 적절 한 생성자를 사용 하 여 기본 원격 호스트를 설정할 수 있습니다는 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드. 호출 하 여 원격 호스트에서 기본 원격 호스트를 설정 하는 경우 지정할 수 없습니다 <xref:System.Net.Sockets.UdpClient.Send%2A>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.UdpClient" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberSignature Language="F#" Value="member this.AllowNatTraversal : bool -&gt; unit" Usage="udpClient.AllowNatTraversal allowed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="allowed">NAT 통과를 설정 또는 해제할지를 지정하는 부울 값입니다.</param>
        <summary><see cref="T:System.Net.Sockets.UdpClient" /> 인스턴스에 대해 NAT(Network Address Translation) 통과를 설정하거나 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A> 메서드를 사용 하도록 설정 또는 NAT 통과 사용 하지 않도록 설정에 사용 되는 <xref:System.Net.Sockets.UdpClient> 인스턴스. Teredo, 6to4 또는 ISATAP 터널을 사용 하 여 NAT 통과 제공할 수 있습니다.  
  
 경우는 `allowed` 매개 변수는 false를 <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> 연결된 된 소켓에서 옵션을 설정 <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>합니다. 이 명시적으로 사용 하지 않도록 설정에 대 한 NAT 통과 <xref:System.Net.Sockets.UdpClient> 인스턴스.  
  
 경우는 `allowed` 매개 변수는 true를 <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> 연결된 된 소켓에서 옵션을 설정 <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>합니다. 이 수에 대 한 NAT 통과 <xref:System.Net.Sockets.UdpClient> 시스템에서 방화벽 규칙에 따라 합니다.  
  
 Teredo 주소는 2001의 접두사를 사용 하 여 IPv6 주소:: / 32입니다. Teredo 주소는 일반 DNS 이름 확인을 통해 반환 또는 로컬 인터페이스에 할당 된 IPv6 주소로 열거할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public int Available { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Available" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Available" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Available As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Available { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Available : int" Usage="System.Net.Sockets.UdpClient.Available" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>네트워크에서 받은 데이터 중 읽을 수 있는 데이터의 양을 가져옵니다.</summary>
        <value>네트워크에서 받은 데이터의 바이트 수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpClient.Available%2A> 속성 읽기에 대 한 네트워크 버퍼에 대기 하는 데이터의 양을 결정 하는 데 사용 됩니다. 데이터를 사용할 수 있는 경우 호출 <xref:System.Net.Sockets.NetworkStream.Read%2A> 데이터를 가져올 수 있습니다. 사용 가능한 데이터가 없는 경우는 <xref:System.Net.Sockets.UdpClient.Available%2A> 속성 0을 반환 합니다.  
  
 원격 호스트 종료 되거나 연결이 닫히면 합니다 <xref:System.Net.Sockets.UdpClient.Available%2A> 속성을 <xref:System.Net.Sockets.SocketException>입니다.  
  
> [!NOTE]
>  수신 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 참조 하는 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.UdpClient.Available%2A> 속성입니다.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스하려고 시도하는 동안 오류가 발생한 경우.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginReceive (requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="requestCallback">작업이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="state">수신 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <paramref name="requestCallback" /> 대리자에게 전달됩니다.</param>
        <summary>데이터그램을 원격 호스트에서 비동기적으로 받습니다.</summary>
        <returns>비동기 수신을 참조하는 <see cref="T:System.IAsyncResult" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> 를 호출 하 여 작업을 완료 해야 합니다 <xref:System.Net.Sockets.UdpClient.EndReceive%2A> 메서드. 메서드는 일반적으로 `requestCallback` 위임 합니다.  
  
 이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다. 작업이 완료 될 때까지 차단 합니다 <xref:System.Net.Sockets.UdpClient.Receive%2A> 메서드.  
  
 비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> 서버 응답을 비동기적으로 합니다.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginSend">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>데이터그램을 원격 호스트에 비동기적으로 보냅니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="datagram">보낼 데이터가 들어 있는 <see cref="T:System.Byte" /> 배열입니다.</param>
        <param name="bytes">보낼 바이트 수입니다.</param>
        <param name="requestCallback">작업이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="state">보내기 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <paramref name="requestCallback" /> 대리자에게 전달됩니다.</param>
        <summary>데이터그램을 원격 호스트에 비동기적으로 보냅니다. 대상은 이전에 <see cref="Overload:System.Net.Sockets.UdpClient.Connect" />를 호출할 때 지정됩니다.</summary>
        <returns>비동기 보내기를 참조하는 <see cref="T:System.IAsyncResult" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 <xref:System.Net.Sockets.UdpClient.BeginSend%2A> 를 호출 하 여 작업을 완료 해야 합니다 <xref:System.Net.Sockets.UdpClient.EndSend%2A> 메서드. 메서드는 일반적으로 `requestCallback` 위임 합니다.  
  
 이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다. 작업이 완료 될 때까지 차단, 중 하나를 사용 합니다 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드 오버 로드 합니다.  
  
 비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.UdpClient.BeginSend%2A> 서버 요청을 비동기적으로 보내야 합니다.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, class System.Net.IPEndPoint endPoint, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, endPoint As IPEndPoint, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::Net::IPEndPoint ^ endPoint, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * System.Net.IPEndPoint * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, endPoint, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="datagram">보낼 데이터가 들어 있는 <see cref="T:System.Byte" /> 배열입니다.</param>
        <param name="bytes">보낼 바이트 수입니다.</param>
        <param name="endPoint">데이터의 대상을 나타내는 <see cref="T:System.Net.EndPoint" />입니다.</param>
        <param name="requestCallback">작업이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="state">보내기 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <paramref name="requestCallback" /> 대리자에게 전달됩니다.</param>
        <summary>데이터그램을 대상에 비동기적으로 보냅니다. 대상은 <see cref="T:System.Net.EndPoint" />에 지정됩니다.</summary>
        <returns>비동기 보내기를 참조하는 <see cref="T:System.IAsyncResult" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 <xref:System.Net.Sockets.UdpClient.BeginSend%2A> 를 호출 하 여 작업을 완료 해야 합니다 <xref:System.Net.Sockets.UdpClient.EndSend%2A> 메서드. 메서드는 일반적으로 `requestCallback` 위임 합니다.  
  
 이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다. 작업이 완료 될 때까지 차단, 중 하나를 사용 합니다 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드 오버 로드 합니다.  
  
 비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.UdpClient.BeginSend%2A> 서버 요청을 비동기적으로 보내야 합니다.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#4)]
 [!code-csharp[System.Net.Sockets.UdpClient1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, string hostname, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, hostname As String, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::String ^ hostname, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * string * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, hostname, port, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hostname" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="datagram">보낼 데이터가 들어 있는 <see cref="T:System.Byte" /> 배열입니다.</param>
        <param name="bytes">보낼 바이트 수입니다.</param>
        <param name="hostname">대상 호스트입니다.</param>
        <param name="port">대상 포트 번호입니다.</param>
        <param name="requestCallback">작업이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="state">보내기 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다. 이 개체는 작업이 완료되면 <paramref name="requestCallback" /> 대리자에게 전달됩니다.</param>
        <summary>데이터그램을 대상에 비동기적으로 보냅니다. 대상은 호스트 이름과 포트 번호를 사용하여 지정합니다.</summary>
        <returns>비동기 보내기를 참조하는 <see cref="T:System.IAsyncResult" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 <xref:System.Net.Sockets.UdpClient.BeginSend%2A> 를 호출 하 여 작업을 완료 해야 합니다 <xref:System.Net.Sockets.UdpClient.EndSend%2A> 메서드. 메서드는 일반적으로 `requestCallback` 위임 합니다.  
  
 이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다. 작업이 완료 될 때까지 차단, 중 하나를 사용 합니다 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드 오버 로드 합니다.  
  
 비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.UdpClient.BeginSend%2A> 서버 요청을 비동기적으로 보내야 합니다.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Client">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Client { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Client" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Client" />
      <MemberSignature Language="VB.NET" Value="Public Property Client As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Client { System::Net::Sockets::Socket ^ get(); void set(System::Net::Sockets::Socket ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Client : System.Net.Sockets.Socket with get, set" Usage="System.Net.Sockets.UdpClient.Client" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>내부 네트워크 <see cref="T:System.Net.Sockets.Socket" />을 가져오거나 설정합니다.</summary>
        <value>내부 네트워크 <see cref="T:System.Net.Sockets.Socket" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpClient> 만듭니다는 <xref:System.Net.Sockets.Socket> 네트워크를 통해 데이터를 송수신 하는 데 사용 합니다. 파생 된 클래스 <xref:System.Net.Sockets.UdpClient> 이 속성을 사용 하 여이 설정할 수 있습니다 <xref:System.Net.Sockets.Socket>합니다. 기본 사용 <xref:System.Net.Sockets.Socket> 에서 반환 된 <xref:System.Net.Sockets.UdpClient.Client%2A> 필요한 경우 액세스 하는 것 이상의 <xref:System.Net.Sockets.UdpClient> 제공 합니다. 사용할 수도 있습니다 <xref:System.Net.Sockets.UdpClient.Client%2A> 기본 설정 <xref:System.Net.Sockets.Socket> 기존 <xref:System.Net.Sockets.Socket>합니다. 간단 하 게 활용 하려는 경우에 유용 <xref:System.Net.Sockets.UdpClient> 기존의 <xref:System.Net.Sockets.Socket>합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 된 <xref:System.Net.Sockets.UdpClient.Client%2A> 속성입니다. 이 예제에서는 브로드캐스트를 기본 활성화 <xref:System.Net.Sockets.Socket>합니다.  
  
 [!code-cpp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="udpClient.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>UDP 연결을 닫습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Net.Sockets.UdpClient.Close%2A> 기본을 사용 하지 않도록 설정 <xref:System.Net.Sockets.Socket> 와 연결 된 모든 관리 및 비관리 리소스를 해제 하 고는 <xref:System.Net.Sockets.UdpClient>합니다.  
  
> [!NOTE]
>  표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
   
  
## Examples  
 다음 예제에는 닫는 방법을 보여 줍니다.는 <xref:System.Net.Sockets.UdpClient> 를 호출 하 여는 <xref:System.Net.Sockets.UdpClient.Close%2A> 메서드.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#15)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#15)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Connect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>기본 원격 호스트를 설정합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (endPoint As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPEndPoint -&gt; unit" Usage="udpClient.Connect endPoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="endPoint">데이터를 보낼 네트워크 엔드포인트를 지정하는 <see cref="T:System.Net.IPEndPoint" />입니다.</param>
        <summary>지정된 네트워크 엔드포인트를 사용하여 기본 원격 호스트를 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드 설정에 지정 된 값을 사용 하 여 기본 원격 호스트는 `endPoint` 매개 변수입니다. 설정 되 면 각 호출에서 원격 호스트를 지정할 필요가 없습니다를 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드.  
  
 기본 원격 호스트를 설정 하는 것은 선택 사항입니다. 기본 원격 호스트를 지정 하면 해당 호스트에 제한 됩니다. 다른 원격 호스트에 데이터 그램을 보내려는 경우에 다른 호출을 확인 해야 합니다 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드를 만들거나 다른 <xref:System.Net.Sockets.UdpClient> 기본 원격 호스트 하지 않고 합니다. 기본 원격을 사용 하도록 설정한 경우 호스트 하는 원격 호스트를 호출 하는 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드를 <xref:System.Net.Sockets.UdpClient.Send%2A> 시킵니다를 <xref:System.Net.Sockets.SocketException>입니다. 표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
 호출 하는 경우는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드를 지정된 된 기본 삭제 됩니다 이외의 주소에서 도착 하는 모든 데이터 그램입니다. 기본 원격 호스트에서 상속 하는 경우가 아니면이 메서드를 사용 하 여 브로드캐스트 주소를 설정할 수 없습니다 <xref:System.Net.Sockets.UdpClient>, 클라이언트 메서드를 사용 하 여 기본 가져올 <xref:System.Net.Sockets.Socket>, 소켓 옵션을 설정 하 고 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>입니다.  
  
 그러나 수, 기본 브로드캐스트 데이터 브로드캐스트 주소, 255.255.255.255를 지정 하는 경우 <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> 를 호출 하는 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드. 사용 하도록 되돌릴 수 응용 프로그램에 브로드캐스트 주소 보다 정교가 필요한 경우는 <xref:System.Net.Sockets.Socket> 클래스입니다.  
  
> [!NOTE]
>  UDP 프로토콜은 연결 없는 프로토콜의 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드를 차단 하지 않습니다. 호출 하지 마십시오는 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드 멀티 캐스팅 된 데이터 그램을 수신 하려는 경우.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Net.IPEndPoint> 기본 원격 호스트를 설정 합니다.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#7)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#7)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="endPoint" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpClient" />가 닫혔습니다.</exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress addr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress addr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (addr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPAddress ^ addr, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.Connect (addr, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addr" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="addr">데이터를 보낼 원격 호스트의 <see cref="T:System.Net.IPAddress" />입니다.</param>
        <param name="port">데이터를 보낼 포트 번호입니다.</param>
        <summary>지정된 IP 주소와 포트 번호를 사용하여 기본 원격 호스트를 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpClient.Connect%2A> 에 지정 된 값을 사용 하 여 기본 원격 호스트를 설정 하는 메서드를 `addr` 및 `port` 매개 변수입니다. 설정 되 면 각 호출에서 원격 호스트를 지정할 필요가 없습니다를 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드.  
  
 기본 원격 호스트를 설정 하는 것은 선택 사항입니다. 기본 원격 호스트를 지정 하면 해당 호스트에 제한 됩니다. 다른 원격 호스트에 데이터 그램을 보내려는 경우에 다른 호출을 확인 해야 합니다 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드를 만들거나 다른 <xref:System.Net.Sockets.UdpClient> 기본 원격 호스트 하지 않고 합니다. 기본 원격을 사용 하도록 설정한 경우 호스트 하는 원격 호스트를 호출 하는 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드를 <xref:System.Net.Sockets.UdpClient.Send%2A> 시킵니다를 <xref:System.Net.Sockets.SocketException>입니다. 표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
 호출 하는 경우는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드를 지정된 된 기본 삭제 됩니다 이외의 주소에서 도착 하는 모든 데이터 그램입니다. 기본 원격 호스트에서 상속 하는 경우가 아니면이 메서드를 사용 하 여 브로드캐스트 주소를 설정할 수 없습니다 <xref:System.Net.Sockets.UdpClient>, 클라이언트 메서드를 사용 하 여 기본 가져올 <xref:System.Net.Sockets.Socket>, 소켓 옵션을 설정 하 고 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>입니다.  
  
 그러나 수, 기본 브로드캐스트 데이터 브로드캐스트 주소, 255.255.255.255를 지정 하는 경우 <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> 를 호출 하는 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드. 사용 하도록 되돌릴 수 응용 프로그램에 브로드캐스트 주소 보다 정교가 필요한 경우는 <xref:System.Net.Sockets.Socket> 클래스입니다.  
  
> [!NOTE]
>  UDP 프로토콜은 연결 없는 프로토콜의 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드를 차단 하지 않습니다. 호출 하지 마십시오는 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드 멀티 캐스팅 된 데이터 그램을 수신 하려는 경우.  
  
   
  
## Examples  
 다음 예에서는 원격 호스트와 연결 된 IP 주소와 포트 번호를 사용 합니다.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#6)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#6)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpClient" />가 닫혀 있습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="addr" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" />가 <see cref="F:System.Net.IPEndPoint.MinPort" />와 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 사이에 없는 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : string * int -&gt; unit" Usage="udpClient.Connect (hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostname">데이터를 보낼 원격 호스트의 DNS 이름입니다.</param>
        <param name="port">데이터를 보낼 원격 호스트의 포트 번호입니다.</param>
        <summary>지정된 호스트 이름과 포트 번호를 사용하여 기본 원격 호스트를 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpClient.Connect%2A> 에 지정 된 값을 사용 하 여 기본 원격 호스트를 설정 하는 메서드를 `port` 및 `hostname` 매개 변수입니다. 설정 되 면 각 호출에서 원격 호스트를 지정할 필요가 없습니다를 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드.  
  
 기본 원격 호스트를 설정 하는 것은 선택 사항입니다. 기본 원격 호스트를 지정 하면 해당 호스트에 제한 됩니다. 다른 원격 호스트에 데이터 그램을 보내려는 경우에 다른 호출을 확인 해야 합니다 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드를 만들거나 다른 <xref:System.Net.Sockets.UdpClient> 기본 원격 호스트 하지 않고 합니다.  
  
 기본 원격을 사용 하도록 설정한 경우 호스트 하는 원격 호스트를 호출 하는 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드를 <xref:System.Net.Sockets.UdpClient.Send%2A> 시킵니다를 <xref:System.Net.Sockets.SocketException>입니다. 표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
 호출 하는 경우는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드를 지정된 된 기본 삭제 됩니다 이외의 주소에서 도착 하는 모든 데이터 그램입니다. 기본 원격 호스트에서 상속 하는 경우가 아니면이 메서드를 사용 하 여 브로드캐스트 주소를 설정할 수 없습니다 <xref:System.Net.Sockets.UdpClient>, 클라이언트 메서드를 사용 하 여 기본 가져올 <xref:System.Net.Sockets.Socket>, 소켓 옵션을 설정 하 고 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>입니다.  
  
 그러나 수, 기본 브로드캐스트 데이터 브로드캐스트 주소, 255.255.255.255를 지정 하는 경우 <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> 를 호출 하는 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드. 사용 하도록 되돌릴 수 응용 프로그램에 브로드캐스트 주소 보다 정교가 필요한 경우는 <xref:System.Net.Sockets.Socket> 클래스입니다.  
  
> [!NOTE]
>  UDP 프로토콜은 연결 없는 프로토콜의 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드를 차단 하지 않습니다. 호출 하지 마십시오는 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드 멀티 캐스팅 된 데이터 그램을 수신 하려는 경우.  
  
   
  
## Examples  
 다음 예제에서는 원격 호스트에 연결할 호스트 이름과 포트 번호입니다.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#5)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#5)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpClient" />가 닫혔습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" />가 <see cref="F:System.Net.IPEndPoint.MinPort" />와 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 사이에 없는 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="udpClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Net.Sockets.UdpClient" />에서 사용하는 관리되는 리소스 및 관리되지 않는 리소스를 해제합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="udpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
        <summary><see cref="T:System.Net.Sockets.UdpClient" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 공용 `Dispose()` 메서드 및 <xref:System.Object.Finalize%2A> 메서드. `Dispose()` 보호 된 호출 `Dispose(Boolean)` 메서드를 `disposing` 매개 변수 설정 `true`합니다. <xref:System.Object.Finalize%2A> 호출 `Dispose` 사용 하 여 `disposing` 로 `false`합니다.  
  
 경우는 `disposing` 매개 변수가 true 이면이 메서드는 관리 되는 개체가 보유 한 모든 리소스를 해제이 <xref:System.Net.Sockets.UdpClient> 참조 합니다. 이 메서드는 참조되는 각 개체의 `Dispose()` 메서드를 호출합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다. 재정의 하는 경우 <see langword="Dispose(Boolean)" /> 대 한 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 해야 <see langword="Dispose" />합니다. 구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose(Boolean)" />를 참조 하세요 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.  
  
에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see cref="M:System.Object.Finalize" />를 참조 하십시오 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Finalize 메서드 재정의](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))합니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="DontFragment">
      <MemberSignature Language="C#" Value="public bool DontFragment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DontFragment" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.DontFragment" />
      <MemberSignature Language="VB.NET" Value="Public Property DontFragment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DontFragment { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DontFragment : bool with get, set" Usage="System.Net.Sockets.UdpClient.DontFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Boolean" />에서 IP(인터넷 프로토콜) 데이터그램의 조각화를 허용하는지 여부를 나타내는 <see cref="T:System.Net.Sockets.UdpClient" /> 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Net.Sockets.UdpClient" />에서 데이터그램 조각화를 허용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터 그램 크기는 최대 전송 단위 (MTU) 전송 매체의 초과 하는 경우 조각화가 필요 합니다. 송신 호스트 하거나 중간 라우터 하 여 데이터 그램을 조각화 될 수 있습니다. 데이터 그램을 조각화 수 해야 하는 경우 및 <xref:System.Net.Sockets.Socket.DontFragment%2A> 옵션 설정, 데이터 그램 무시 되 고 데이터 그램의 보낸 사람에 게 제어 메시지 ICMP (Internet Protocol) 오류 메시지가 보내집니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.DontFragment%2A> 속성입니다.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">이 속성은 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 플래그나 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 플래그를 사용하는 소켓에만 설정할 수 있습니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DropMulticastGroup">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>멀티캐스트 그룹을 나갑니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DropMulticastGroup">
      <MemberSignature Language="C#" Value="public void DropMulticastGroup (System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DropMulticastGroup(class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DropMulticastGroup (multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DropMulticastGroup(System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.DropMulticastGroup : System.Net.IPAddress -&gt; unit" Usage="udpClient.DropMulticastGroup multicastAddr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">나갈 멀티캐스트 그룹의 <see cref="T:System.Net.IPAddress" />입니다.</param>
        <summary>멀티캐스트 그룹을 나갑니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> 메서드를 삭제 합니다 <xref:System.Net.Sockets.UdpClient> 로 식별 된 멀티 캐스트 그룹에서 <xref:System.Net.IPAddress>합니다. 호출 후의 <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> 메서드를 기본 <xref:System.Net.Sockets.Socket> 라우터에서 멀티 캐스트 그룹에서 제거 하면 라우터는 그룹 관리 IGMP (Internet Protocol) 패킷을 보냅니다. 이후에 <xref:System.Net.Sockets.UdpClient> 작고 인출 그룹에서 더 이상 됩니다 해당 그룹에 전송 된 데이터 그램을 받을 수 없습니다.  
  
> [!NOTE]
>  표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
   
  
## Examples  
 다음 예제에서는 멀티 캐스트 주소를 제공 하 여 멀티 캐스트 그룹을 삭제 하는 방법에 설명 합니다.  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#2)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">내부 <see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
        <exception cref="T:System.ArgumentException">IP 주소가 소켓의 주소 지정 체계를 정의하는 <see cref="T:System.Net.Sockets.AddressFamily" /> 값과 호환되지 않는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="multicastAddr" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="DropMulticastGroup">
      <MemberSignature Language="C#" Value="public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DropMulticastGroup(class System.Net.IPAddress multicastAddr, int32 ifindex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DropMulticastGroup (multicastAddr As IPAddress, ifindex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DropMulticastGroup(System::Net::IPAddress ^ multicastAddr, int ifindex);" />
      <MemberSignature Language="F#" Value="member this.DropMulticastGroup : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.DropMulticastGroup (multicastAddr, ifindex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
        <Parameter Name="ifindex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">나갈 멀티캐스트 그룹의 <see cref="T:System.Net.IPAddress" />입니다.</param>
        <param name="ifindex">나갈 멀티캐스트 그룹의 로컬 주소입니다.</param>
        <summary>멀티캐스트 그룹을 나갑니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> 메서드를 삭제 합니다 <xref:System.Net.Sockets.UdpClient> 로 식별 된 멀티 캐스트 그룹에서 <xref:System.Net.IPAddress>합니다. 호출 후의 <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> 메서드를 기본 <xref:System.Net.Sockets.Socket> 라우터에서 멀티 캐스트 그룹에서 제거 하면 라우터는 그룹 관리 IGMP (Internet Protocol) 패킷을 보냅니다. 이후에 <xref:System.Net.Sockets.UdpClient> 작고 인출 그룹에서 더 이상 됩니다 해당 그룹에 전송 된 데이터 그램을 받을 수 없습니다.  
  
> [!NOTE]
>  수신 되 면를 <xref:System.Net.Sockets.SocketException>를 사용 하 여를 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 멀티 캐스트 주소를 제공 하 여 멀티 캐스트 그룹을 삭제 하는 방법에 설명 합니다.  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#2)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">내부 <see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
        <exception cref="T:System.ArgumentException">IP 주소가 소켓의 주소 지정 체계를 정의하는 <see cref="T:System.Net.Sockets.AddressFamily" /> 값과 호환되지 않는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="multicastAddr" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="EnableBroadcast">
      <MemberSignature Language="C#" Value="public bool EnableBroadcast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableBroadcast" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.EnableBroadcast" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableBroadcast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableBroadcast { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableBroadcast : bool with get, set" Usage="System.Net.Sockets.UdpClient.EnableBroadcast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Boolean" />가 브로드캐스트 패킷을 보내거나 받을 수 있는지 여부를 지정하는 <see cref="T:System.Net.Sockets.UdpClient" /> 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Net.Sockets.UdpClient" />이 브로드캐스트 패킷을 허용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 브로드캐스트는 특정 서브넷으로 제한 됩니다. 255.255.255.255;로 패킷을 전송 하 여 로컬 서브넷에 브로드캐스트할 수 있습니다. 또는 네트워크의 호스트 부분에 설정 된 모든 비트를 사용 하 여 IP (인터넷 프로토콜) 주소 부분은 지정 된 브로드캐스트 주소로 사용할 수 있습니다. 예를 들어, 사용자의 IP 주소는 처음 세 옥텟은 네트워크 부분이와 호스트 부분 클래스 C 주소를 이어서 마지막 8 진수 192.168.1.40 인 경우에 지정 된 브로드캐스트 주소로 192.168.1.255입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.UdpClient.EnableBroadcast%2A> 속성입니다.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] EndReceive(class System.IAsyncResult asyncResult, class System.Net.IPEndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (asyncResult As IAsyncResult, ByRef remoteEP As IPEndPoint) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ EndReceive(IAsyncResult ^ asyncResult, System::Net::IPEndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.EndReceive : IAsyncResult *  -&gt; byte[]" Usage="udpClient.EndReceive (asyncResult, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint" RefType="ref" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><see cref="T:System.IAsyncResult" />를 호출할 때 반환되는 <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" /> 개체입니다.</param>
        <param name="remoteEP">지정된 원격 엔드포인트입니다.</param>
        <summary>보류 중인 비동기 수신을 끝냅니다.</summary>
        <returns>성공하면 데이터그램 데이터가 포함된 바이트 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드 차단 작업이 때까지 완료 합니다.  
  
 이 작업을 동기적으로 수행 하려면 사용 된 <xref:System.Net.Sockets.UdpClient.Receive%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.UdpClient.BeginSend%2A> 서버 응답의 비동기적으로 받는 완료 합니다.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" /> 메서드를 호출했지만 <paramref name="asyncResult" />가 반환되지 않은 경우</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" />가 비동기 읽기를 위해 이미 호출된 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">내부 <see cref="T:System.Net.Sockets.Socket" />에 액세스하려고 시도하는 동안 오류가 발생한 경우.</exception>
        <exception cref="T:System.ObjectDisposedException">내부 <see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="EndSend">
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndSend : IAsyncResult -&gt; int" Usage="udpClient.EndSend asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><see cref="T:System.IAsyncResult" />를 호출할 때 반환되는 <see cref="Overload:System.Net.Sockets.UdpClient.BeginSend" /> 개체입니다.</param>
        <summary>보류 중인 비동기 보내기를 끝냅니다.</summary>
        <returns>메서드가 성공할 경우 <see cref="T:System.Net.Sockets.UdpClient" />에 보낸 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드 차단 작업이 때까지 완료 합니다.  
  
 이 작업을 동기적으로 수행 하려면 사용 된 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.UdpClient.BeginSend%2A> 서버 요청의 비동기 보내기 작업을 완료 합니다.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 메서드를 호출했지만 <paramref name="asyncResult" />가 반환되지 않은 경우</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />가 비동기 읽기를 위해 이미 호출된 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">내부 소켓에 액세스하려고 시도하는 동안 오류가 발생한 경우.</exception>
        <exception cref="T:System.ObjectDisposedException">내부 <see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.UdpClient.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Boolean" />가 하나의 포트를 하나의 클라이언트에서만 사용하도록 허용하는지 여부를 지정하는 <see cref="T:System.Net.Sockets.UdpClient" /> 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Net.Sockets.UdpClient" />에서 특정 포트를 하나의 클라이언트에서만 사용하도록 허용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. Windows Server 2003 및 Windows XP 서비스 팩 2 이상에서는 기본값이 <see langword="true" />이고, 다른 모든 버전에서는 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 여러 클라이언트가 특정 포트를 사용할 수 있습니다. 그러나 클라이언트 중 하나만 포트로 전송 되는 네트워크 트래픽에 대 한 작업을 수행할 수 있습니다. 사용할 수는 <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> 여러 클라이언트가 특정 포트를 사용 하지 않도록 설정 하는 속성입니다.  
  
 기본 소켓 클라이언트 포트에 바인딩된이 속성을 설정 해야 합니다. 호출 하는 경우 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=nameWithType>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=nameWithType>를 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType>, 또는 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>, 클라이언트 포트 생성자의 부작용으로 바인딩되어 있고 설정할 수 없습니다는 <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> 속성  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.UdpClient>를 가져오고 설정 하 고는 <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> 속성입니다.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#4)]
 [!code-csharp[System.Net.Sockets.UdpClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">내부 소켓에 액세스하려고 시도하는 동안 오류가 발생한 경우.</exception>
        <exception cref="T:System.ObjectDisposedException">내부 <see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~UdpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!UdpClient ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="udpClient.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="JoinMulticastGroup">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>멀티캐스트 그룹에 <see cref="T:System.Net.Sockets.UdpClient" />를 추가합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup multicastAddr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">가입할 그룹의 멀티캐스트 <see cref="T:System.Net.IPAddress" />입니다.</param>
        <summary>멀티캐스트 그룹에 <see cref="T:System.Net.Sockets.UdpClient" />를 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> 메서드를 구독 합니다 <xref:System.Net.Sockets.UdpClient> 사용 하 여 지정 된 멀티 캐스트 그룹에 <xref:System.Net.IPAddress>합니다. 호출 후의 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> 메서드를 기본 <xref:System.Net.Sockets.Socket> 라우터에서 멀티 캐스트 그룹 멤버 자격을 요청 하는 그룹 관리 IGMP (Internet Protocol) 패킷을 보냅니다. 멀티 캐스트 주소 범위가 224.0.0.0에서 239.255.255.255 하 합니다. 이 범위를 벗어나는 주소를 지정 하는 경우 또는 요청이 수행 됩니다 라우터가 없는 경우 멀티 캐스트 사용 하도록 설정 <xref:System.Net.Sockets.UdpClient> 시킵니다는 <xref:System.Net.Sockets.SocketException>합니다. 표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다. 한 번 합니다 <xref:System.Net.Sockets.UdpClient> 포함 된 멀티 캐스트 그룹의 구성원으로 라우터를 사용 하 여 지정 된 전송 멀티 데이터 그램을 받을 수 있게 됩니다 <xref:System.Net.IPAddress>합니다.  
  
> [!NOTE]
>  만들어야 합니다를 <xref:System.Net.Sockets.UdpClient> , 멀티 캐스트 포트 번호를 사용 하 여이 고, 그렇지 됩니다 멀티 데이터 그램을 받을 수 있습니다. 호출 하지 마십시오는 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드 호출 하기 전에 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> 메서드 또는 <xref:System.Net.Sockets.UdpClient.Receive%2A> 방법이 작동 하지 것입니다. 데이터 그램을 보내려면 멀티 캐스트 IP 주소에 멀티 캐스트 그룹에 속한 필요가 없습니다.  
  
 멀티 캐스트 그룹에 합류 하기 전에 소켓 끝점 포트에 바인딩되어 있는지 확인 합니다. 이렇게 하려면 포트 또는 끝점 매개 변수로 수락 하는 생성자 중 하나를 호출 합니다.  
  
 멀티 캐스팅 된 데이터 그램을 수신를 중지 하려면 호출을 <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> 메서드 제공를 <xref:System.Net.IPAddress> 올 인출 하려는 그룹의 합니다.  
  
> [!NOTE]
>  IPv6의 경우 여러 멀티 캐스트 주소 범위에서 선택할 수 있습니다. IETF RFC 2375를 참조 하십시오.  
  
> [!NOTE]
>  호출할 수 없습니다 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> 에 <xref:System.Net.Sockets.UdpClient> 특정 로컬 포트 없이 생성 된 (즉, 합니다 <xref:System.Net.Sockets.UdpClient.%23ctor> 또는 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> 생성자).  
  
   
  
## Examples  
 다음 코드 예제에는 멀티 캐스트 주소를 제공 하 여 멀티 캐스트 그룹을 조인 하는 방법을 보여 줍니다.  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#1)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">내부 <see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
        <exception cref="T:System.ArgumentException">IP 주소가 소켓의 주소 지정 체계를 정의하는 <see cref="T:System.Net.Sockets.AddressFamily" /> 값과 호환되지 않는 경우</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(int32 ifindex, class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (ifindex As Integer, multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(int ifindex, System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : int * System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup (ifindex, multicastAddr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifindex" Type="System.Int32" />
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="ifindex">멀티캐스트 그룹을 연결할 로컬 IP 주소에 연결된 인터페이스 인덱스입니다.</param>
        <param name="multicastAddr">가입할 그룹의 멀티캐스트 <see cref="T:System.Net.IPAddress" />입니다.</param>
        <summary>멀티캐스트 그룹에 <see cref="T:System.Net.Sockets.UdpClient" />를 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 멀티 캐스트 그룹에 합류 하기 전에 소켓 포트 또는 끝점에 바인딩되어 있어야 합니다. 포트 또는 끝점을 매개 변수로 허용 하는 생성자 중 하나를 호출 하 여이 수행할 수 있습니다.  
  
 `infindex` 매개 변수를 사용 하는 동일한 링크에 있는 하드웨어 인터페이스를 식별 합니다.  
  
> [!NOTE]
>  여러 멀티 캐스트 주소 범위에서 선택할 수 있습니다. IETF RFC 2375 참조 하십시오.  
  
> [!NOTE]
>  호출할 수 없습니다 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> 에 <xref:System.Net.Sockets.UdpClient> 특정 로컬 포트 없이 생성 된 (즉, 합니다 <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=nameWithType> 또는 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType> 생성자).  
  
   
  
## Examples  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#5)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">내부 <see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr, int32 timeToLive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress, timeToLive As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr, int timeToLive);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.JoinMulticastGroup (multicastAddr, timeToLive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
        <Parameter Name="timeToLive" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">가입할 멀티캐스트 그룹의 <see cref="T:System.Net.IPAddress" />입니다.</param>
        <param name="timeToLive">라우터 홉 수 단위로 측정된 TTL(Time to Live)입니다.</param>
        <summary>지정된 TTL(Time to Live)을 사용하여 멀티캐스트 그룹에 <see cref="T:System.Net.Sockets.UdpClient" />를 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> 메서드를 구독 합니다 <xref:System.Net.Sockets.UdpClient> 사용 하 여 지정 된 멀티 캐스트 그룹에 <xref:System.Net.IPAddress>합니다. 호출 후의 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> 메서드를 기본 <xref:System.Net.Sockets.Socket> 라우터에서 멀티 캐스트 그룹 멤버 자격을 요청 하는 그룹 관리 IGMP (Internet Protocol) 패킷을 보냅니다. 멀티 캐스트 주소 범위가 224.0.0.0에서 239.255.255.255 하 합니다. 이 범위를 벗어나는 주소를 지정 하는 경우 또는 요청이 수행 됩니다 라우터가 없는 경우 멀티 캐스트 사용 하도록 설정 <xref:System.Net.Sockets.UdpClient> 시킵니다는 <xref:System.Net.Sockets.SocketException>합니다. 표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다. `timeToLive` 라우터 홉 수 멀티 캐스팅 된 데이터 그램에 삭제 되기 전에 매개 변수를 지정 합니다. 한 번 합니다 <xref:System.Net.Sockets.UdpClient> 포함 된 멀티 캐스트 그룹의 구성원으로 라우터를 사용 하 여 지정 된 전송 멀티 데이터 그램을 받을 수 있게 됩니다 <xref:System.Net.IPAddress>합니다.  
  
> [!NOTE]
>  만들어야 합니다를 <xref:System.Net.Sockets.UdpClient> 캐스트 포트 번호를 사용 하 여 그렇지 않으면 됩니다 멀티 수입니다. 호출 하지 마십시오 합니다 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드를 호출 하기 전에 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> 메서드 또는 receive 메서드가 작동 하지 것입니다. 데이터 그램을 보내려면 멀티 캐스트 IP 주소에 멀티 캐스트 그룹에 속한 필요가 없습니다.  
  
 멀티 캐스트 그룹에 가입 하기 전에 소켓 끝점 포트에 바인딩되어 있는지 확인 합니다. 이렇게 하려면 끝점 또는 포트를 매개 변수로 수락 하는 생성자 중 하나를 호출 합니다.  
  
 멀티 캐스팅 된 데이터 그램을 수신를 중지 하려면 호출을 <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> 메서드 제공를 <xref:System.Net.IPAddress> 올 인출 하려는 그룹의 합니다.  
  
> [!NOTE]
>  호출할 수 없습니다 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> 에 <xref:System.Net.Sockets.UdpClient> 특정 로컬 포트 없이 생성 된 (즉, 합니다 <xref:System.Net.Sockets.UdpClient.%23ctor> 또는 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> 생성자).  
  
   
  
## Examples  
 다음 예제에서는 두 개의 매개 변수, 멀티 캐스트 주소를 TTL을 나타내는 숫자를 제공 하 여 멀티 캐스트 그룹을 조인 하는 방법을 보여 줍니다.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#13)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#13)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">제공된 TTL이 0에서 255 사이에 없는 경우</exception>
        <exception cref="T:System.ObjectDisposedException">내부 <see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="multicastAddr" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException">IP 주소가 소켓의 주소 지정 체계를 정의하는 <see cref="T:System.Net.Sockets.AddressFamily" /> 값과 호환되지 않는 경우</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr, class System.Net.IPAddress localAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress, localAddress As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr, System::Net::IPAddress ^ localAddress);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress * System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup (multicastAddr, localAddress)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="localAddress" Type="System.Net.IPAddress" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">가입할 그룹의 멀티캐스트 <see cref="T:System.Net.IPAddress" />입니다.</param>
        <param name="localAddress">로컬 <see cref="T:System.Net.IPAddress" />입니다.</param>
        <summary>멀티캐스트 그룹에 <see cref="T:System.Net.Sockets.UdpClient" />를 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 멀티 캐스트 그룹에 조인 하기 전에 소켓 포트 또는 끝점에 바인딩되어 있음을 해야 합니다. 포트 또는 끝점을 매개 변수로 허용 하는 생성자 중 하나를 호출 하 여이 수행할 수 있습니다.  
  
> [!NOTE]
>  여러 멀티 캐스트 주소 범위에서 선택할 수 있습니다. IETF RFC 2375에서 찾을 수 있습니다.  
  
> [!NOTE]
>  호출할 수 없습니다 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> 에 <xref:System.Net.Sockets.UdpClient> 특정 로컬 포트 없이 생성 된 (즉, 합니다 <xref:System.Net.Sockets.UdpClient.%23ctor> 또는 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> 생성자).  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> 메서드.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#6)]
 [!code-csharp[System.Net.Sockets.UdpClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">내부 <see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="MulticastLoopback">
      <MemberSignature Language="C#" Value="public bool MulticastLoopback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MulticastLoopback" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.MulticastLoopback" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastLoopback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MulticastLoopback { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastLoopback : bool with get, set" Usage="System.Net.Sockets.UdpClient.MulticastLoopback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>나가는 멀티캐스트 패킷을 보내는 응용 프로그램에 전달할지 여부를 지정하는 <see cref="T:System.Boolean" /> 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Net.Sockets.UdpClient" />이 나가는 멀티캐스트 패킷을 받으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 멀티 캐스트는 인터넷에서 다 대 다 통신을 위한 확장 가능한 메서드입니다. 프로세스 멀티 캐스트 주소를 구독 하는 경우 모든 패킷을 전송한 프로세스 멀티 캐스트 주소에 등록 된 다른 모든 프로세스에 의해 수신 된 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.UdpClient.MulticastLoopback%2A> 속성입니다.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#7)]
 [!code-csharp[System.Net.Sockets.UdpClient#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public byte[] Receive (ref System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Receive(class System.Net.IPEndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (ByRef remoteEP As IPEndPoint) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Receive(System::Net::IPEndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.Receive :  -&gt; byte[]" Usage="udpClient.Receive remoteEP" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint" RefType="ref" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="remoteEP">데이터를 보낸 원격 호스트를 나타내는 <see cref="T:System.Net.IPEndPoint" />입니다.</param>
        <summary>원격 호스트가 보낸 UDP 데이터그램을 반환합니다.</summary>
        <returns>데이터그램 데이터를 포함하는 <see cref="T:System.Byte" /> 형식의 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpClient.Receive%2A> 메서드는 데이터 그램을 원격 호스트에서 도착할 때까지 차단 됩니다. 데이터를 사용할 수 있으면는 <xref:System.Net.Sockets.UdpClient.Receive%2A> 메서드는 첫 번째 큐에 넣은 데이터 그램을 읽고 데이터 부분을 바이트 배열로 반환 합니다. 이 메서드는 `remoteEP` 매개 변수는 <xref:System.Net.IPAddress> 및 보낸 사람의 포트 번호입니다.  
  
 기본 원격 호스트를 지정 하는 경우는 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드는 <xref:System.Net.Sockets.UdpClient.Receive%2A> 메서드 데이터 그램만 해당 호스트에서 허용 됩니다. 다른 모든 데이터 그램 무시 됩니다.  
  
 표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
> [!NOTE]
>  멀티 캐스팅 된 데이터 그램을 수신 하려는 경우를 호출 하지 마십시오 합니다 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드를 호출 하기 전에 <xref:System.Net.Sockets.UdpClient.Receive%2A> 메서드. <xref:System.Net.Sockets.UdpClient> 수신 하는 데 캐스트 포트 번호를 사용 하 여 데이터 그램을 만들어야 합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.Net.Sockets.UdpClient.Receive%2A> 메서드. <xref:System.Net.Sockets.UdpClient.Receive%2A> 메서드는 메시지를 받을 때까지 실행을 차단 합니다. 사용 하 여 합니다 <xref:System.Net.IPEndPoint> 전달할 <xref:System.Net.Sockets.UdpClient.Receive%2A>, 응답 호스트의 id가 노출 합니다.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#11)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#11)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">내부 <see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.IPAddress" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt; ReceiveAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;valuetype System.Net.Sockets.UdpReceiveResult&gt; ReceiveAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.ReceiveAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveAsync () As Task(Of UdpReceiveResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::UdpReceiveResult&gt; ^ ReceiveAsync();" />
      <MemberSignature Language="F#" Value="member this.ReceiveAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt;" Usage="udpClient.ReceiveAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>원격 호스트가 보낸 UDP 데이터그램을 비동기적으로 반환합니다.</summary>
        <returns>비동기 작업(operation)을 나타내는 작업(task) 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 작업을 차단 하지 않습니다. 반환 된 <xref:System.Threading.Tasks.Task%601>> 개체는 UDP 패킷에 수신한 후 완료 됩니다.  
  
 기본 원격 호스트를 지정 하는 경우는 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드를이 메서드는 데이터 그램만 해당 호스트에서 수락 합니다. 다른 모든 데이터 그램 무시 됩니다.  
  
 표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
> [!WARNING]
>  멀티 캐스팅 된 데이터 그램을 수신 하려는 경우를 호출 하지 마십시오는 <xref:System.Net.Sockets.UdpClient.Connect%2A> 이 메서드를 호출 하기 전에 메서드. <xref:System.Net.Sockets.UdpClient> 수신 하는 데 캐스트 포트 번호를 사용 하 여 데이터 그램을 만들어야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">내부 <see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>원격 호스트에 UDP 데이터그램을 보냅니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int -&gt; int" Usage="udpClient.Send (dgram, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dgram">보내려는 UDP 데이터그램을 바이트 배열로 나타내는 <see cref="T:System.Byte" /> 형식의 배열입니다.</param>
        <param name="bytes">데이터그램 내의 바이트 수입니다.</param>
        <summary>원격 호스트에 UDP 데이터그램을 보냅니다.</summary>
        <returns>보낸 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 오버 로드에 설정 된 원격 호스트에 데이터 그램을 보냅니다는 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드와 보낸 바이트 수를 반환 합니다. 호출 하지 마십시오 <xref:System.Net.Sockets.UdpClient.Connect%2A> 이 오버 로드를 호출 하기 전에 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드는 throw를 <xref:System.Net.Sockets.SocketException>합니다. 표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
 다른 원격 호스트에 데이터 그램을 보내려는 경우 호출 해야 합니다 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드 원하는 원격 호스트를 지정 합니다. 다른 중 하나를 사용 하 여 <xref:System.Net.Sockets.UdpClient.Send%2A> 브로드캐스트 주소에 데이터 그램을 보낼 메서드 오버 로드 합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드. 이 오버 로드를 사용 하기 전에 기본 원격 호스트를 설정 해야 합니다.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#10)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#10)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dgram" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.UdpClient" />가 이미 기본 원격 호스트를 설정한 경우</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpClient" />가 닫혔습니다.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes, class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer, endPoint As IPEndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes, System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * System.Net.IPEndPoint -&gt; int" Usage="udpClient.Send (dgram, bytes, endPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dgram">보내려는 UDP 데이터그램을 바이트 배열로 나타내는 <see cref="T:System.Byte" /> 형식의 배열입니다.</param>
        <param name="bytes">데이터그램 내의 바이트 수입니다.</param>
        <param name="endPoint">데이터그램을 보낼 호스트와 포트를 나타내는 <see cref="T:System.Net.IPEndPoint" />입니다.</param>
        <summary>지정된 원격 엔드포인트에서 호스트에 UDP 데이터그램을 보냅니다.</summary>
        <returns>보낸 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드는 지정된 된 끝점에 데이터 그램을 보냅니다 및 성공적으로 보낸 바이트 수를 반환 합니다. 이 오버 로드를 호출 하기 전에 먼저 만들어야 합니다를 <xref:System.Net.IPEndPoint> 데이터 그램이 배달할 수 원격 호스트의 IP 주소와 포트 번호를 사용 하 여 합니다. 기본 브로드캐스트를 데이터 그램을 보낼 수 있습니다 주소, 255.255.255.255를 지정 하 여 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> 에 대 한는 <xref:System.Net.IPAddress.Address%2A> 의 속성을 <xref:System.Net.IPEndPoint>입니다. 이 만든 후 <xref:System.Net.IPEndPoint>에 전달 합니다 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드를 `endPoint` 매개 변수입니다.  
  
 사용 하 여 다른 모든 브로드캐스트 주소 데이터 그램을 보내려는 경우는 <xref:System.Net.Sockets.UdpClient.Client%2A> 메서드 내부 <xref:System.Net.Sockets.Socket>, 소켓 옵션을 설정 하 고 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>. 사용 하 여 되돌릴 수 있습니다는 <xref:System.Net.Sockets.Socket> 클래스입니다.  
  
> [!NOTE]
>  제공 하지는 `endPoint` 매개 변수를 사용 하 여 원격 호스트를 이미 설정한 경우이 메서드는 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드. 그럴 경우 합니다 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드는 throw를 <xref:System.Net.Sockets.SocketException>입니다. 표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드. 이 예제에서는 <xref:System.Net.IPEndPoint> 대상 호스트를 지정 합니다.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#8)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#8)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dgram" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.UdpClient" />가 이미 기본 원격 호스트를 설정한 경우</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpClient" />가 닫혀 있습니다.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
        <altmember cref="F:System.Net.Sockets.SocketOptionName.Broadcast" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.IPEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes, string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes, string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer, hostname As String, port As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes, System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * string * int -&gt; int" Usage="udpClient.Send (dgram, bytes, hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="hostname" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dgram">보내려는 UDP 데이터그램을 바이트 배열로 나타내는 <see cref="T:System.Byte" /> 형식의 배열입니다.</param>
        <param name="bytes">데이터그램 내의 바이트 수입니다.</param>
        <param name="hostname">데이터그램을 보낼 원격 호스트의 이름입니다.</param>
        <param name="port">통신할 원격 포트 번호입니다.</param>
        <summary>지정된 원격 호스트의 지정된 포트에 UDP 데이터그램을 보냅니다.</summary>
        <returns>보낸 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드는 지정 되는 값을 데이터 그램을 보냅니다 합니다 `hostname` 및 `port` 매개 변수 및 반환 성공적으로 보낸 바이트 수입니다. 기본 브로드캐스트 주소에 대 한 "255.255.255.255"를 지정 하 여 데이터 그램을 보낼 수 있습니다는 `hostname` 매개 변수 값입니다.  
  
 사용 하 여 다른 모든 브로드캐스트 주소 데이터 그램을 보내려는 경우는 <xref:System.Net.Sockets.UdpClient.Client%2A> 메서드 내부 <xref:System.Net.Sockets.Socket>, 소켓 옵션을 설정 하 고 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>. 사용 하 여 되돌릴 수 있습니다는 <xref:System.Net.Sockets.Socket> 클래스입니다.  
  
> [!NOTE]
>  호스트 이름을 지정 하지 않거나 포트 번호가이 메서드를 사용 하 여 원격 호스트를 이미 설정한 경우는 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드. 그럴 경우 합니다 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드는 throw를 <xref:System.Net.Sockets.SocketException>입니다. 표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.Net.Sockets.UdpClient.Send%2A> 메서드. 이 예제에서는 대상 호스트를 식별 하는 호스트 이름과 포트 번호를 사용 합니다.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#9)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#9)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dgram" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.UdpClient" />가 이미 기본 원격 호스트를 설정한 경우</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpClient" />가 닫혔습니다.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
        <altmember cref="F:System.Net.Sockets.SocketOptionName.Broadcast" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>UDP 데이터그램을 원격 호스트에 비동기적으로 보냅니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="datagram">보내려는 UDP 데이터그램을 바이트 배열로 나타내는 <see cref="T:System.Byte" /> 형식의 배열입니다.</param>
        <param name="bytes">데이터그램 내의 바이트 수입니다.</param>
        <summary>UDP 데이터그램을 원격 호스트에 비동기적으로 보냅니다.</summary>
        <returns><see cref="T:System.Threading.Tasks.Task`1" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 오버 로드에 설정 된 원격 호스트에 데이터 그램을 보냅니다는 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드. 호출 하지 마십시오 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드를이 오버 로드를 호출 하기 전에 throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다. 표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
 다른 원격 호스트에 데이터 그램을 보내려는 경우 호출 해야 합니다 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드 원하는 원격 호스트를 지정 합니다. 다른 중 하나를 사용 하 여 <xref:System.Net.Sockets.UdpClient.SendAsync%2A> 브로드캐스트 주소에 데이터 그램을 보낼 메서드 오버 로드 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dgram" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.UdpClient" />가 이미 기본 원격 호스트를 설정한 경우</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpClient" />가 닫혔습니다.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes, class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer, endPoint As IPEndPoint) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int * System.Net.IPEndPoint -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes, endPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="datagram">보내려는 UDP 데이터그램을 바이트 배열로 나타내는 <see cref="T:System.Byte" /> 형식의 배열입니다.</param>
        <param name="bytes">데이터그램 내의 바이트 수입니다.</param>
        <param name="endPoint">데이터그램을 보낼 호스트와 포트를 나타내는 <see cref="T:System.Net.IPEndPoint" />입니다.</param>
        <summary>UDP 데이터그램을 원격 호스트에 비동기적으로 보냅니다.</summary>
        <returns><see cref="T:System.Threading.Tasks.Task`1" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정된 된 끝점에 데이터 그램을 보냅니다. 이 오버 로드를 호출 하기 전에 먼저 만들어야 합니다를 <xref:System.Net.IPEndPoint> 데이터 그램이 배달할 수 원격 호스트의 IP 주소와 포트 번호를 사용 하 여 합니다. 기본 브로드캐스트를 데이터 그램을 보낼 수 있습니다 주소, 255.255.255.255를 지정 하 여 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> 에 대 한는 <xref:System.Net.IPAddress.Address%2A> 의 속성을 <xref:System.Net.IPEndPoint>입니다. 이 만든 후 <xref:System.Net.IPEndPoint>,이 메서드로 전달 된 `endPoint` 매개 변수입니다.  
  
 사용 하 여 다른 모든 브로드캐스트 주소 데이터 그램을 보내려는 경우는 <xref:System.Net.Sockets.UdpClient.Client%2A> 메서드 내부 <xref:System.Net.Sockets.Socket>, 소켓 옵션을 설정 하 고 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>. 사용 하 여 되돌릴 수 있습니다는 <xref:System.Net.Sockets.Socket> 클래스입니다.  
  
> [!WARNING]
>  제공 하지는 `endPoint` 매개 변수를 사용 하 여 원격 호스트를 이미 설정한 경우이 메서드는 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드. 이 메서드는 throw 하는 경우는 <xref:System.Net.Sockets.SocketException>합니다. 표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dgram" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.UdpClient" />가 이미 기본 원격 호스트를 설정한 경우</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpClient" />가 닫혀 있습니다.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes, string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes, string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer, hostname As String, port As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int * string * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes, hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hostname" Type="System.String" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="datagram">보내려는 UDP 데이터그램을 바이트 배열로 나타내는 <see cref="T:System.Byte" /> 형식의 배열입니다.</param>
        <param name="bytes">데이터그램 내의 바이트 수입니다.</param>
        <param name="hostname">데이터그램을 보낼 원격 호스트의 이름입니다.</param>
        <param name="port">통신할 원격 포트 번호입니다.</param>
        <summary>UDP 데이터그램을 원격 호스트에 비동기적으로 보냅니다.</summary>
        <returns><see cref="T:System.Threading.Tasks.Task`1" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 되는 값을 데이터 그램을 전송 합니다 `hostname` 및 `port` 매개 변수입니다. 기본 브로드캐스트 주소에 대 한 "255.255.255.255"를 지정 하 여 데이터 그램을 보낼 수 있습니다는 `hostname` 매개 변수 값입니다.  
  
 사용 하 여 다른 모든 브로드캐스트 주소 데이터 그램을 보내려는 경우는 <xref:System.Net.Sockets.UdpClient.Client%2A> 메서드 내부 <xref:System.Net.Sockets.Socket>, 소켓 옵션을 설정 하 고 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>. 사용 하 여 되돌릴 수 있습니다는 <xref:System.Net.Sockets.Socket> 클래스입니다.  
  
> [!WARNING]
>  호스트 이름을 지정 하지 않거나 포트 번호가이 메서드를 사용 하 여 원격 호스트를 이미 설정한 경우는 <xref:System.Net.Sockets.UdpClient.Connect%2A> 메서드. 이 메서드는 throw 하는 경우는 <xref:System.Net.Sockets.SocketException>합니다. 표시 되 면을 <xref:System.Net.Sockets.SocketException>를 사용 하 여 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 가져오는 합니다. 이 코드를 가져온 후를 참조할 수 있습니다 합니다 [Windows 소켓 버전 2 API 오류 코드](/windows/desktop/winsock/windows-sockets-error-codes-2) 오류의 자세한 설명에 대 한 설명서입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dgram" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Net.Sockets.UdpClient" />가 이미 기본 원격 호스트를 설정한 경우</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.Sockets.UdpClient" />가 닫혔습니다.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">소켓에 액세스할 때 오류가 발생했습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Net.Sockets.UdpClient" />에서 사용하는 모든 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
완료 했으면 IDisposable.Dispose 호출를 사용 하 여는 <xref:System.Net.Sockets.UdpClient>합니다. IDisposable.Dispose 메서드는 <xref:System.Net.Sockets.UdpClient> 불안정 한 상태가 됩니다. IDisposable.Dispose를 호출한 후에 대 한 모든 참조를 해제 해야 합니다 <xref:System.Net.Sockets.UdpClient> 가비지 수집기에서 메모리를 회수할 수 있도록 하는 <xref:System.Net.Sockets.UdpClient> 차지한 합니다. 자세한 내용은 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 하 고 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.

> [!NOTE] 
> 에 대 한 마지막 참조를 해제 하기 전에 항상 IDisposable.Dispose를 호출 합니다 <xref:System.Net.Sockets.UdpClient>합니다. 이렇게 하지 않으면 가비지 컬렉션이 <xref:System.Net.Sockets.UdpClient> 개체의 `Finalize` 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Ttl">
      <MemberSignature Language="C#" Value="public short Ttl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 Ttl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Ttl" />
      <MemberSignature Language="VB.NET" Value="Public Property Ttl As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short Ttl { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.Ttl : int16 with get, set" Usage="System.Net.Sockets.UdpClient.Ttl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Net.Sockets.UdpClient" />에서 보낸 IP(인터넷 프로토콜) 패킷의 TTL(Time to Live) 값을 지정하는 값을 가져오거나 설정합니다.</summary>
        <value>TTL 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 TTL 값은 라우터 라우터 패킷 및는 제어 메시지 ICMP (Internet Protocol) "TTL 초과"를 삭제 하기 전에 패킷이 이동할 수의 최대 수를 나타내는 오류 메시지가 보낸 사람에 게 반환 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Net.Sockets.UdpClient.Ttl%2A> 속성입니다.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>