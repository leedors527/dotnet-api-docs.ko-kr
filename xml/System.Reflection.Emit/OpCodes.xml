<Type Name="OpCodes" FullName="System.Reflection.Emit.OpCodes">
  <Metadata><Meta Name="ms.openlocfilehash" Value="22b85af836552ccbbe3eee4a23c0f8e2510b9978" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65013626" /></Metadata><TypeSignature Language="C#" Value="public class OpCodes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OpCodes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.OpCodes" />
  <TypeSignature Language="VB.NET" Value="Public Class OpCodes" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpCodes" />
  <TypeSignature Language="F#" Value="type OpCodes = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>하 여 내보내기에 대 한 Microsoft MSIL (Intermediate Language) 명령의 필드 표현을 제공 합니다 <see cref="T:System.Reflection.Emit.ILGenerator" /> 클래스 멤버 (같은 <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 자세한 설명은 멤버 opcode 공용 언어 인프라 (CLI) 설명서를 특히 참조 "파티션 III: CIL Instruction Set"및" 파티션 II: 메타 데이터 정 및 의미 체계 "입니다. 이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](https://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](https://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 사용 하 여 동적 메서드 생성을 방법을 보여 줍니다 <xref:System.Reflection.Emit.ILGenerator> 내보낼 `OpCodes` 에 <xref:System.Reflection.Emit.MethodBuilder>합니다.  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>두 개 값을 더하여 결과를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|58|추가|새 숫자 값을 반환 하는 두 숫자 값을 추가 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 스택에서 팝 되 고 `value1` 추가할 `value2`합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 정수 연산에 오버플로 인식 되지 않습니다 (적절 한 오버플로 처리를 참조 하세요. <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).  
  
 정수 추가 포화 되지 않고 래핑됩니다. 예를 들어, 8 비트 정수를 가정 하 고 여기서 `value1` 255 자로 설정 됩니다 및 `value2` 설정 되어 1로 래핑된 결과 256이 아닌 0입니다.  
  
 부동 소수점 오버플로 반환 `+inf` (`PositiveInfinity`) 또는 `-inf` (`NegativeInfinity`).  
  
 아래 표에 가능한 피연산자 형식 및 해당 결과 데이터 형식을 나열 됩니다. 특정 형식 조합에 대 한 항목이 없을 경우 (예를 들어 `int32` 고 `float`; `int32` 고 `int64`)에 잘못 된 중간 언어 (MSIL (Microsoft) 이며 오류가 발생 합니다.  
  
|피연산자|value1 형식|value2 형식|결과 형식|  
|-------------|-----------------|-----------------|-----------------|  
|추가|`int32`|`int32`|`int32`|  
|추가|`int32`|`native int`|`native int`|  
|추가|`int32`|`&`|`&`|  
|추가|`int32`|`*`|`*`|  
|추가|`int64`|`int64`|`int64`|  
|추가|`native int`|`int32`|`native int`|  
|추가|`native int`|`native int`|`native int`|  
|추가|`native int`|`&`|`&`|  
|추가|`native int`|`*`|`*`|  
|추가|`F`|`F`|`F`|  
|추가|`&`|`int32`|`&`|  
|추가|`&`|`native int`|`&`|  
|추가|`*`|`int32`|`*`|  
|추가|`*`|`native int`|`*`|  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `add` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>두 정수를 더하고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|D6|add.ovf|오버플로 검사 하는 부호 있는 정수 값을 두 개를 추가합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 스택에서 팝 되 고 `value1` 추가할 `value2` 오버플로 확인 합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 <xref:System.OverflowException> 결과 결과 형식에 표시 되지 않는 경우 throw 됩니다.  
  
 부호 있는 정수에 대 한이 작업을 수행할 수 있습니다. 부동 소수점 값을 사용 하 여 <xref:System.Reflection.Emit.OpCodes.Add>입니다.  
  
 아래 표에 가능한 피연산자 형식 및 해당 결과 데이터 형식을 나열 됩니다. 특정 형식 조합에 대 한 항목이 없을 경우 (예를 들어 `int32` 고 `float`; `int32` 고 `int64`), 잘못 된 Microsoft MSIL (Intermediate Language) 명령이 되 고 오류를 생성 합니다.  
  
|피연산자|value1 형식|value2 형식|결과 형식|  
|-------------|-----------------|-----------------|-----------------|  
|추가|`int32`|`int32`|`int32`|  
|추가|`int32`|`native int`|`native int`|  
|추가|`int32`|`&`|`&`|  
|추가|`int32`|`*`|`*`|  
|추가|`int64`|`int64`|`int64`|  
|추가|`native int`|`int32`|`native int`|  
|추가|`native int`|`native int`|`native int`|  
|추가|`native int`|`&`|`&`|  
|추가|`native int`|`*`|`*`|  
|추가|`F`|`F`|`F`|  
|추가|`&`|`int32`|`&`|  
|추가|`&`|`native int`|`&`|  
|추가|`*`|`int32`|`*`|  
|추가|`*`|`native int`|`*`|  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `add.ovf` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>부호 없는 두 정수 값을 더하고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|D7|add.ovf.un|오버플로 검사 하는 부호 없는 정수 값을 두 개를 추가합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 스택에서 팝 되 고 `value1` 추가할 `value2` 오버플로 확인 합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 <xref:System.OverflowException> 결과 결과 형식에 표시 되지 않는 경우 throw 됩니다.  
  
 부호 있는 정수에 대 한이 작업을 수행할 수 있습니다. 부동 소수점 값을 사용 하 여 <xref:System.Reflection.Emit.OpCodes.Add>입니다.  
  
 아래 표에 가능한 피연산자 형식 및 해당 결과 데이터 형식을 나열 됩니다. 특정 형식 조합에 대 한 항목이 없을 경우 (예를 들어 `int32` 고 `float`; `int32` 고 `int64`), 잘못 된 Microsoft MSIL (Intermediate Language) 명령이 되 고 오류를 생성 합니다.  
  
|피연산자|value1 형식|value2 형식|결과 형식|  
|-------------|-----------------|-----------------|-----------------|  
|추가|`int32`|`int32`|`int32`|  
|추가|`int32`|`native int`|`native int`|  
|추가|`int32`|`&`|`&`|  
|추가|`int32`|`*`|`*`|  
|추가|`int64`|`int64`|`int64`|  
|추가|`native int`|`int32`|`native int`|  
|추가|`native int`|`native int`|`native int`|  
|추가|`native int`|`&`|`&`|  
|추가|`native int`|`*`|`*`|  
|추가|`F`|`F`|`F`|  
|추가|`&`|`int32`|`&`|  
|추가|`&`|`native int`|`&`|  
|추가|`*`|`int32`|`*`|  
|추가|`*`|`native int`|`*`|  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `add.ovf.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode And;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode And" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.And" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly And As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode And;" />
      <MemberSignature Language="F#" Value=" staticval mutable And : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.And" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>두 값의 비트 AND를 계산하여 결과를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|명령|설명|  
|------------|-----------------|-----------------|  
|5F|를 갖는|두 정수 값의 비트 AND를 결정합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value1` 및 `value2` 스택에서 팝 되 고 두 값의 비트 AND를 계산 합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 `and` 명령 스택의 맨 위 두 값의 비트 AND를 계산 하 고 결과 스택에 남겨 둡니다.  
  
 `And` 정수 관련 작업이입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `and` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arglist">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Arglist;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Arglist" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Arglist" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Arglist As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Arglist;" />
      <MemberSignature Language="F#" Value=" staticval mutable Arglist : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Arglist" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 메서드의 인수 목록에 대한 관리되지 않는 포인터를 반환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 00|arglist|현재 메서드의 인수 목록 핸들을 반환합니다.|  
  
 계산 스택 동작이 없습니다이 작업에 의해 수행 됩니다.  
  
 합니다 `arglist` 불투명 핸들을 반환 하는 명령 (형식의 관리 되지 않는 포인터를 `native int`) 나타내는 현재 메서드의 인수 목록입니다. 이 핸들이 현재 메서드의 수명 동안에 유효합니다. 그러나 컨트롤의 스레드에서 현재 메서드는 다른 방법 핸들을 전달할 수에 있습니다. 실행할 수 있습니다는 `arglist` 가변 개수의 인수를 사용 하는 메서드 내에서 명령입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `arglist` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>두 값이 같으면 대상 명령으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|3B < `int32` >|beq `target`|오프셋 대상 명령으로 분기 `target` 두 값이 같으면 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 값과 같음 `value2`, 분기 작업이 수행 됩니다.  
  
 `beq` 명령이 지정한 대상 명령으로 제어 하는 경우 전달 `value1` 값과 같음 `value2`합니다. 효과 수행할 때 동일를 `ceq` 명령 뒤에 `brtrue` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 4 바이트 부호 있는 오프셋으로 표시 됩니다.  
  
 가능한 피연산자 종류는 다음과 같이 캡슐화 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다.  
  
 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다 (이러한 전송을 엄격 하 게 제한 되며 사용 해야 합니다는 <xref:System.Reflection.Emit.OpCodes.Leave> 명령 대신).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `beq` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>두 값이 같으면 대상 명령(약식)으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|2E < `int8` >|beq.s `target`|오프셋 대상 명령으로 분기 `target` 같으면, 약식|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 값과 같음 `value2`, 분기 작업이 수행 됩니다.  
  
 `beq.s` 명령이 지정한 대상 명령으로 제어 하는 경우 전달 `value1` 값과 같음 `value2`합니다. 효과 수행할 때 동일를 `ceq` 명령 뒤에 `brtrue` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.  
  
 가능한 피연산자 종류는 다음과 같이 캡슐화 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다.  
  
 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다 (이러한 전송을 엄격 하 게 제한 되며 사용 해야 합니다는 <xref:System.Reflection.Emit.OpCodes.Leave> 명령 대신).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `beq.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>첫째 값이 둘째 값보다 크거나 같으면 대상 명령으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|3C `<int32>`|bge `target`|첫 번째 값이 둘째 값 보다 크거나 같은 경우 지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 보다 크거나 같음 `value2`, 분기 작업이 수행 됩니다.  
  
 합니다 `bge` 명령이 지정한 대상 명령으로 제어 하는 경우 전달 `value1` 보다 크거나 같음 `value2`합니다. 결과 동일 수행 하는 `clt.un` 명령 뒤에 `brfalse` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 4 바이트 부호 있는 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bge` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>첫째 값이 둘째 값보다 크거나 같으면 대상 명령(약식)으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|2F `<int8>`|bge.s `target`|첫 번째 값 보다 크거나 약식, 두 번째 값과 같은 경우 지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 보다 크거나 같음 `value2`, 분기 작업이 수행 됩니다.  
  
 합니다 `bge.s` 명령이 지정한 대상 명령으로 제어 하는 경우 전달 `value1` 보다 크거나 같음 `value2`합니다. 결과 동일 수행 하는 `clt.un` 명령 뒤에 `brfalse` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bge.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 크면 대상 명령으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|41 `<int32>`|bge.un `target`|첫 번째 값이 둘째 값 (부호 없는 값) 보다 크거나 같은 경우 지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 보다 크거나 같음 `value2`, 분기 작업이 수행 됩니다.  
  
 합니다 `bge.un` 명령이 지정한 대상 명령으로 제어 하는 경우 전달 `value1` 보다 크거나 같음 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때. 결과 동일 수행 하는 `clt` 명령 뒤에 `brfalse` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 4 바이트 부호 있는 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bge.un` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 크면 대상 명령(약식)으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|34 < `int8` >|bge.un.s `target`|첫 번째 값 보다 크거나 같은 약식 두 번째 값 (부호 없는 값) 이면 지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 보다 크거나 같음 `value2`, 분기 작업이 수행 됩니다.  
  
 합니다 `bge.un.s` 명령이 지정한 대상 명령으로 제어 하는 경우 전달 `value1` 보다 크거나 같음 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때. 결과 동일 수행 하는 `clt` 명령 뒤에 `brfalse` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bge.un.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>첫째 값이 둘째 값보다 크면 대상 명령으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|3D < `int32` >|bgt의 경우 `target`|첫 번째 값이 둘째 값 보다 크면 지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 보다 크면 `value2`, 분기 작업이 수행 됩니다.  
  
 합니다 `bgt` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 크면 `value2`합니다. 결과 동일 수행 하는 `cgt` 명령 뒤에 `brtrue` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 4 바이트 부호 있는 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bgt` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>첫째 값이 둘째 값보다 크면 대상 명령(약식)으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|30 < `int8` >|bgt.s `target`|첫째 값이 두 번째 값 (약식) 보다 큰 경우 지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 보다 크면 `value2`, 분기 작업이 수행 됩니다.  
  
 합니다 `bgt.s` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 크면 `value2`합니다. 결과 동일 수행 하는 `cgt` 명령 뒤에 `brtrue` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bgt.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 크면 대상 명령으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|42 < `int32` >|bgt.un `target`|첫 번째 값이 둘째 값 (부호 없는 값) 보다 크면 지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 보다 크면 `value2`, 분기 작업이 수행 됩니다.  
  
 합니다 `bgt.un` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 크면 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때. 결과 동일 수행 하는 `cgt.un` 명령 뒤에 `brtrue` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 4 바이트 부호 있는 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bgt.un` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 크면 대상 명령(약식)으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|35 < `int8` >|bgt.un.s `target`|첫 번째 값 약식 두 번째 값 (부호 없는 값) 보다 큰 경우 지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 보다 크면 `value2`, 분기 작업이 수행 됩니다.  
  
 합니다 `bgt.un.s` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 보다 크면 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때. 결과 동일 수행 하는 `cgt.un` 명령 뒤에 `brtrue` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bgt.un.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>첫째 값이 둘째 값보다 작거나 같으면 대상 명령으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|3E `<int32>`|ble `target`|첫 번째 값이 둘째 값 보다 작거나 지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 보다 작거나 같음 `value2`, 분기 작업이 수행 됩니다.  
  
 합니다 `ble` 명령이 지정한 대상 명령으로 제어 하는 경우 전달 `value1` 보다 작거나 같음 `value2`합니다. 결과 동일 수행 하는 `cgt` 명령 (`cgt.un` 부동 소수점 수에 대 한) 뒤에 `brfalse` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 4 바이트 부호 있는 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ble` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>첫째 값이 둘째 값보다 작거나 같으면 대상 명령(약식)으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|31 `<int8>`|ble.s `target`|첫 번째 값 보다 작거나 약식, 두 번째 값과 같은 경우 지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 보다 작거나 같음 `value2`, 분기 작업이 수행 됩니다.  
  
 합니다 `ble.s` 명령이 지정한 대상 명령으로 제어 하는 경우 전달 `value1` 보다 작거나 같음 `value2`합니다. 결과 동일 수행 하는 `cgt` 명령 (`cgt.un` 부동 소수점 수에 대 한) 명령 뒤에`brfalse` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ble.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 작거나 같으면 대상 명령으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|43 `<int32>`|경우 `target`|첫 번째 값이 둘째 값 (부호 없는 값) 보다 작거나 지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 보다 작거나 같음 `value2`, 분기 작업이 수행 됩니다.  
  
 합니다 `ble.un` 명령이 지정한 대상 명령으로 제어 하는 경우 전달 `value1` 보다 작거나 같음 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때. 결과 동일 수행 하는 `cgt.un` 명령 (`cgt` 부동 소수점 수에 대 한) 뒤에 `brfalse` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 4 바이트 부호 있는 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ble.un` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 작거나 같으면 대상 명령(약식)으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|36 `<int8>`|ble.un.s `target`|첫 번째 값 보다 작거나 약식 두 번째 값 (부호 없는 값)과 같은 경우 지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 보다 작거나 같음 `value2`, 분기 작업이 수행 됩니다.  
  
 합니다 `ble.un.s` 명령이 지정한 대상 명령으로 제어 하는 경우 전달 `value1` 보다 작거나 같음 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때. 결과 동일 수행 하는 `cgt.un` 명령 (`cgt` 부동 소수점 수에 대 한) 뒤에 `brfalse` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ble.un.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>첫째 값이 둘째 값보다 작으면 대상 명령으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|3F < `int32` >|blt `target`|두 번째 값 보다 작으면 첫 번째 값이 지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 는 보다 작은 `value2`, 분기 작업이 수행 됩니다.  
  
 합니다 `blt` 명령이 지정한 대상 명령으로 제어 하는 경우 전달 `value1` 보다 작거나 같음 `value2`합니다. 결과 동일 수행 하는 `clt` 명령 뒤에 `brtrue` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 4 바이트 부호 있는 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `blt` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>첫째 값이 둘째 값보다 작으면 대상 명령(약식)으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|32 < `int8` >|blt.s `target`|약식 두 번째 값 보다 작으면 첫 번째 값이 지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 는 보다 작은 `value2`, 분기 작업이 수행 됩니다.  
  
 `blt.s` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 는 보다 작은 `value2`합니다. 결과 동일 수행 하는 `clt` 명령 뒤에 `brtrue` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `blt.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 작으면 대상 명령으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|44 < `int32` >|blt.un `target`|두 번째 값 (부호 없는 값) 보다 작으면 첫 번째 값이 지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 는 보다 작은 `value2`, 분기 작업이 수행 됩니다.  
  
 합니다 `blt.un` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 는 보다 작은 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때. 결과 동일 수행 하는 `clt.un` 명령 뒤에 `brtrue` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 4 바이트 부호 있는 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `blt.un` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 작으면 대상 명령(약식)으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|37 < `int8` >|blt.un.s `target`|약식 두 번째 값 (부호 없는 값) 보다 작으면 첫 번째 값이 지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 는 보다 작은 `value2`, 분기 작업이 수행 됩니다.  
  
 합니다 `blt.un` 명령이 지정 된 대상 명령으로 제어 하는 경우 전달 `value1` 는 보다 작은 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때. 결과 동일 수행 하는 `clt.un` 명령 뒤에 `brtrue` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 4 바이트 부호 있는 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `blt.un.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>두 개의 부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값이 서로 다르면 대상 명령으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|40 < `int32` >|bne.un `target`|분기 대상 명령에 지정된 된 오프셋 두 개의 부호 없는 정수 값 (부호 없는 값)과 같지 않은 됩니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 와 같지 않은 `value2`, 분기 작업이 수행 됩니다.  
  
 `bne.un` 명령이 지정한 대상 명령으로 제어 하는 경우 전달 `value1` 같지 않은 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때. 결과 동일 수행 하는 `ceq` 명령 뒤에 `brfalse` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 4 바이트 부호 있는 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bne.un` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>두 개의 부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값이 서로 다르면 대상 명령(약식)으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|33 < `int8` >|bne.un.s `target`|분기 대상 명령에 지정된 된 오프셋 두 개의 부호 없는 정수 값은 같은 (부호 없는 값), 약식 없습니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 경우 스택에서 팝 됩니다 `value1` 와 같지 않은 `value2`, 분기 작업이 수행 됩니다.  
  
 `bne.un` 명령이 지정한 대상 명령으로 제어 하는 경우 전달 `value1` 같지 않은 `value2`부호 없는 정수 또는 부동 소수점 값을 사용 하 여 비교 했을 때. 결과 동일 수행 하는 `ceq` 명령 뒤에 `brfalse` 특정 대상 명령으로 분기 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 4 바이트 부호 있는 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `bne.un.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Box">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Box;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Box" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Box" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Box As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Box;" />
      <MemberSignature Language="F#" Value=" staticval mutable Box : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Box" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>값 형식을 개체 참조로 변환 (형식 <see langword="O" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|8C < `T` >|상자 `valTypeToken`|값 형식 변환 (에서 지정 된 형식의 `valTypeToken`)는 true 개체 참조입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값 형식으로 스택에 푸시됩니다.  
  
2.  값 형식은 스택에서 팝 되 `box` 작업이 수행 됩니다.  
  
3.  결과 "boxed" 값 형식에 대 한 개체 참조가 스택에 푸시됩니다.  
  
 값 형식에 별도 두 가지 표현이 공용 언어 인프라 (CLI) 내에 있습니다.  
  
-   스택의 다른 개체 또는 값 형식이 포함 된 경우 사용 된 '원시' 형식입니다.  
  
-   값 형식에서 데이터 줄 바꿈되는 위치 (boxed) 개체에 독립적인 엔터티로 존재할 수 있는 'boxed' 폼입니다.  
  
 합니다 `box` 명령 개체 참조 '원시' unboxed 값 형식 변환 (형식 `O`). 새 개체를 만들고 새로 할당 된 개체에 값 형식에서 데이터를 복사 하면 됩니다. `valTypeToken` 스택에 값 형식의 있음을 나타내는 메타 데이터 토큰입니다.  
  
 <xref:System.OutOfMemoryException> 메모리가 부족 하 여 요청을 충족할 수 없는 경우 throw 됩니다.  
  
 <xref:System.TypeLoadException> 클래스를 찾을 수 없는 경우 throw 됩니다. 이 일반적으로 언어 MSIL (Microsoft Intermediate) 런타임이 아닌 네이티브 코드로 변환 될 때 감지 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `box` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>조건에 상관 없이 대상 명령으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|38 < `int32` >|br `target`|지정된 된 오프셋에서 대상 명령으로 분기 합니다.|  
  
 계산 스택 동작이 없습니다이 작업에 의해 수행 됩니다.  
  
 `br` 명령이 조건에 관계 없이 대상 명령으로 제어를 전달 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 4 바이트 부호 있는 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `br` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>조건에 상관 없이 대상 명령(약식)으로 제어를 전송합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|2B < `int8` >|br.s `target`|지정 된 오프셋 약식 대상 명령으로 분기 합니다.|  
  
 계산 스택 동작이 없습니다이 작업에 의해 수행 됩니다.  
  
 `br.s` 명령이 조건에 관계 없이 대상 명령으로 제어를 전달 합니다. 대상 명령이 현재 명령 다음에 오는 명령의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `br.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Break;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Break" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Break" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Break As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Break;" />
      <MemberSignature Language="F#" Value=" staticval mutable Break : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Break" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>중단점이 설정되었음을 디버거에 알리기 위해 CLI(공용 언어 인프라)에 신호를 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|01|break|중단점에 도달 했음을 디버거에 알립니다.|  
  
 계산 스택 동작이 없습니다이 작업에 의해 수행 됩니다.  
  
 `break` 명령 디버깅 지원입니다. 중단점이 설정 되었음을 디버거에 알리기 위해 CLI 신호를 보냅니다. 있기 인터프리터 상태에 다른 영향을 주지 않습니다.  
  
 `break` 명령에는 가장 작은 크기 사용 하도록 설정 하면 코드 중단점을 사용 하 여 패치를 가능한 주변 코드에 주는 영향을 최소화할 합니다.  
  
 `break` 명령 디버거에 포착, 아무 작업도 수행 하거나, 보안 예외를 발생 시킬 수 있습니다. 정확한 동작은 구현 시 정의 된 것입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `break` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>경우 대상 명령으로 제어를 전송 <paramref name="value" /> 는 <see langword="false" />, null 참조 (<see langword="Nothing" /> Visual basic에서), 또는 0입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|39 < `int32` >|brfalse `target`<br /><br /> brnull `target`<br /><br /> brzero `target`|이면 지정된 된 오프셋된에서 대상 명령으로 분기 `false`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 이 이전 작업으로 스택에 푸시됩니다.  
  
2.  `value` 스택에서 팝 되 하는 경우 `value` 됩니다 `false`, 분기 `target`합니다.  
  
 `brfalse` 명령 (및 해당 별칭 `brnull` 및 `brzero`) 하는 경우 지정된 된 대상 명령으로 제어가 `value` (형식의 `int32`, `int64`, 개체 참조 `O`관리 되는 포인터 `&`, 임시 포인터 `*`를 `native int`)은 0 (`false`). 하는 경우 `value` 0이 아닌 (`true`) 다음 명령을 계속 실행 됩니다.  
  
 대상 명령이 현재 명령 다음에 오는 명령의 4 바이트 부호 있는 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `brfalse` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>하는 경우 대상 명령으로 제어를 전송 <paramref name="value" /> 는 <see langword="false" />, 0 또는 null 참조입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|2C <`int8` >|brfalse.s `target`<br /><br /> brnull.s `target`<br /><br /> brzero.s `target`|이면 지정된 된 오프셋된에서 대상 명령으로 분기 `false`, 약식입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 이 이전 작업으로 스택에 푸시됩니다.  
  
2.  `value` 스택에서 팝 되 하는 경우 `value` 됩니다 `false`, 분기 `target`합니다.  
  
 `brfalse.s` 명령 (및 해당 별칭 `brnull` 및 `brzero`) 하는 경우 지정된 된 대상 명령으로 제어가 `value` (형식의 `int32`, `int64`, 개체 참조 `O`관리 되는 포인터 `&`, 임시 포인터 `*`를 `native int`)은 0 (`false`). 하는 경우 `value` 0이 아닌 (`true`) 다음 명령을 계속 실행 됩니다.  
  
 대상 명령이 현재 명령 다음에 오는 명령의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `brfalse.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>하는 경우 대상 명령으로 제어를 전송 <paramref name="value" /> 는 <see langword="true" />이거나 null이 아니거나 0이 아닌 값입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|3A < `int32` >|brtrue `target`<br /><br /> brinst `target`|0이 아닌 경우 지정된 된 오프셋에서 대상 명령으로 분기 (`true`).|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 이 이전 작업으로 스택에 푸시됩니다.  
  
2.  `value` 스택에서 팝 되 하는 경우 `value` 됩니다 `true`, 분기 `target`합니다.  
  
 `brtrue` 명령이 지정한 대상 명령으로 제어 하는 경우 전달 `value` (형식 `native int`)가 0이 아닌 (`true`). 하는 경우 `value` 가 0 (`false`) 다음 명령을 계속 실행 됩니다.  
  
 경우 `value` 개체 참조 (형식 `O`) 한 다음 `brinst` (별칭 `brtrue`) 개체의 인스턴스를 나타내는 경우 제어를 전송 (없으면 null 개체 참조를 참조 하는 예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldnull>).  
  
 대상 명령이 현재 명령 다음에 오는 명령의 4 바이트 부호 있는 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `brtrue` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>하는 경우 대상 명령 (약식)으로 제어가 <paramref name="value" /> 는 <see langword="true" />이거나 null이 아니거나 0이 아닌 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|2D < `int8` >|brtrue.s `target`<br /><br /> brinst.s `target`|0이 아닌 경우 지정된 된 오프셋에서 대상 명령으로 분기 (`true`), 약식입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 이 이전 작업으로 스택에 푸시됩니다.  
  
2.  `value` 스택에서 팝 되 하는 경우 `value` 됩니다 `true`, 분기 `target`합니다.  
  
 `brtrue.s` 명령이 지정한 대상 명령으로 제어 하는 경우 전달 `value` (형식 `native int`)가 0이 아닌 (`true`). 하는 경우 `value` 가 0 (`false`) 다음 명령을 계속 실행 됩니다.  
  
 경우 `value` 개체 참조 (형식 `O`) 한 다음 `brinst` (별칭 `brtrue`) 개체의 인스턴스를 나타내는 경우 제어를 전송 (없으면 null 개체 참조를 참조 하는 예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldnull>).  
  
 대상 명령이 현재 명령 다음에 오는 명령의 시작 부분에서 부호 있는 1 바이트 오프셋으로 표시 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다. 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `brtrue.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Call;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Call" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Call" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Call As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Call;" />
      <MemberSignature Language="F#" Value=" staticval mutable Call : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Call" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>전송된 메서드 설명자가 나타내는 메서드를 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|28 < `T` >|호출 `methodDesc`|에 설명 된 메서드를 호출 `methodDesc`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  메서드 인수 `arg1` 를 통해 `argN` 스택에 푸시됩니다.  
  
2.  메서드 인수 `arg1` 를 통해 `argN` 스택에서 팝 되 고 이러한 인수를 사용 하는 메서드가 호출 되 고 메서드 설명자가 참조 하는 메서드로 제어가 전달 됩니다. 완료 되 면 반환 값 수신자 메서드입니다에서 생성 되 고 호출자에 게 보냅니다.  
  
3.  반환 값으로 스택에 푸시됩니다.  
  
 `call` 명령 지침을 사용 하 여 전달 된 메서드 설명자가 나타내는 메서드를 호출 합니다. 메서드 설명자는 메서드 호출 및 개수, 형식 및 호출 규칙을 사용할 뿐만 아니라 해당 메서드에 전달할 스택에 배치 된 인수의 순서를 나타내는 메타 데이터 토큰입니다. `call` 명령 바로 앞에 나와야를 `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) 접두사 명령을 제어를 전송 하기 전에 현재 메서드가 상태 해제 되어야 함을 지정 합니다. 원본 방법 보다 신뢰도 높은 방법 제어를 전송 하는 호출을 하는 경우에 스택 프레임 해제 되지 않습니다. 대신 실행이 자동으로 계속 처럼는 `tail` 이 제공 되지 않습니다. 정적 메서드, 인스턴스 메서드, 가상 메서드 또는 전역 함수 호출 되는지 확인 하려면 충분 한 정보를 전달 하는 메타 데이터 토큰입니다. 이러한 모든 경우에 대상 주소 메서드 설명자에서 전적으로 결정 됩니다 (이 <xref:System.Reflection.Emit.OpCodes.Callvirt> 대상 주소가 또한 인스턴스의 런타임 유형에 따라 결정 가상 메서드를 호출 하는 것에 대 한 지침 참조 하기 전에 푸시를 <xref:System.Reflection.Emit.OpCodes.Callvirt>).  
  
 인수는 스택의 왼쪽에서 오른쪽 순서로 배치 됩니다. 즉, 첫 번째 인수 계산 하 고 모든 필요한 인수를 내림차순 스택의 맨 위에 있을 때까지 스택의 두 번째 인수를 차례로 세 번째에 배치 됩니다. 다음 세 가지 중요 한 특별 한 경우:  
  
 1. 호출 (또는 가상) 인스턴스에 메서드 전에 사용자에 게 표시 되는 인수의 참조 하는 인스턴스를 푸시 해야 합니다. 인스턴스 참조를 null 참조일 수 없습니다. 메타 데이터에 전달 되는 시그니처에 대 한 매개 변수 목록에 항목이 없습니다 합니다 `this` 포인터 대신 사용 하 여 잠시 메서드에 전달 해야 하는지 여부를 나타내는 `this` 포인터입니다.  
  
 2. 사용 하 여 가상 메서드를 호출 하는 것이 유효 `call` (대신 `callvirt`); 메서드가 호출 되는 개체에서 동적으로 지정 하는 것이 아니라 메서드를 지정 하는 클래스를 사용 하 여 확인할 임을 나타냅니다.  
  
 3. 대리자의 `Invoke` 메서드를 사용 하 여 호출할 수는 `call` 또는 `callvirt` 명령입니다.  
  
 <xref:System.Security.SecurityException> 시스템 보안 호출 된 메서드에 호출자에 게 액세스를 부여 하지 않습니다 하는 경우에 throw 될 수 있습니다. 중간 언어 (MSIL (Microsoft) 지침 런타임이 아닌 네이티브 코드로 변환 됩니다 보안 검사가 발생할 수 있습니다.  
  
> [!NOTE]
>  값 형식에 System.Object의 메서드를 호출 하는 경우 사용을 고려 합니다 `constrained` 접두사로 사용 하 여 합니다 `callvirt` 명령을 내보내는 대신는 `call` 명령입니다. 이 버전 관리 문제가 방지 값 형식에서 메서드를 재정의 하는 여부에 따라 다른 IL 내보낼 필요가 없습니다. 사용을 고려 합니다 `constrained` 인터페이스 메서드를 구현 하는 값 형식 메서드 값 형식에 대해 인터페이스 메서드를 이후에 호출 하는 경우 접두사를 사용 하 여 변경할 수 있습니다를 `MethodImpl`입니다. 이러한 문제에 자세히 설명 되어는 <xref:System.Reflection.Emit.OpCodes.Constrained> opcode입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `call` opcode:  
  
-   ILGenerator.Emit (OpCode, MethodInfo)  
  
-   ILGenerator.EmitCall(OpCode, MethodInfo, Type[])  
  
> [!NOTE]
>  합니다 <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> 에 대 한 메서드가 제공 됩니다 `varargs` 호출 합니다. 사용 된 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 일반 호출에 대 한 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Calli">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Calli;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Calli" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Calli" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Calli As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Calli;" />
      <MemberSignature Language="F#" Value=" staticval mutable Calli : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Calli" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>호출 규칙에서 설명하는 인수를 사용하여 계산 스택에 표시된 메서드를 진입점에 대한 포인터로 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|29 < `T` >|calli `callSiteDescr`|호출 규칙을 통해 설명 하는 인수를 사용 하 여 가리키는 메서드를 호출 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  메서드 인수 `arg1` 를 통해 `argN` 스택에 푸시됩니다.  
  
2.  메서드 진입점으로 스택에 푸시됩니다.  
  
3.  메서드 인수 `arg1` 를 통해 `argN` 메서드 항목 포인터는 스택에서 팝 하 고 메서드 호출이 수행 됩니다. 완료 되 면 반환 값 수신자 메서드입니다에서 생성 되 고 호출자에 게 보냅니다.  
  
4.  반환 값으로 스택에 푸시됩니다.  
  
 합니다 `calli` 명령 호출 인수를 사용 하 여 메서드 진입점 `arg1` 를 통해 `argN`합니다. 이러한 인수의 형식 특정 호출 규칙을 통해 설명 되어 있습니다 (`callSiteDesc`). 합니다 `calli` 명령에서 바로 뒤를 `tail` 접두사 (<xref:System.Reflection.Emit.OpCodes.Tailcall>) 제어를 전송 하기 전에 현재 메서드가 상태 해제 되어야 함을 지정 합니다. 호출이 전달 스택 프레임 원본 메서드보다 더 높은 신뢰 메서드로 제어를 해제 하지는; 대신 계속 실행 됩니다 자동으로 처럼는 `tail` 이 제공 되지 않습니다.  
  
 메서드 진입점 (대상 컴퓨터)의 호출 규칙 (독립 실행형 서명에 대 한 메타 데이터 토큰)을 통해 설명 하는 인수를 사용 하 여 합법적인 방식으로 호출할 수 있는 네이티브 코드에 특정 대 한 포인터로 간주 됩니다. 이러한 포인터를 사용 하 여 만들 수 있습니다는 <xref:System.Reflection.Emit.OpCodes.Ldftn> 또는 <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> 내용은 네이티브 코드에서 전달 된 또는 합니다.  
  
 호출 규칙을 동적으로 선택 하지 않으면, 따라서 사용 하는 코드는 `calli` 대상 지정된 된 호출 규칙을 실제로 사용 하지 않는 경우 명령이 제대로 작동 하지 않습니다.  
  
 인수는 스택의 왼쪽에서 오른쪽 순서로 배치 됩니다. 즉, 첫 번째 인수 계산 하 고 모든 필요한 인수를 내림차순 스택의 맨 위에 있을 때까지 스택의 두 번째 인수를 차례로 세 번째에 배치 됩니다. 인스턴스 또는 가상 메서드를 인수 빌드 코드 시퀀스 전에 사용자에 게 표시 되는 인수의 (null 참조를 이어야 함)는 해당 인스턴스 참조를 푸시 해야 합니다.  
  
 <xref:System.Security.SecurityException> 시스템 보안 호출 된 메서드에 호출자에 게 액세스를 부여 하지 않습니다 하는 경우에 throw 될 수 있습니다. 보안 검사는 Microsoft 중간 언어 (MSIL) 명령을 런타임이 아닌 네이티브 코드로 변환 될 때 발생할 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> 메서드를 사용 하 여을 수행할 수 있습니다는 `calli` 스택에 명령입니다. 유의 `calli` 를 통해 호출 해야는 메서드를 사용 하지 않고 아래는 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 스택에 직접 명령을 배치 하는 클래스.  
  
-   ILGenerator.EmitCalli (Opcode, CallingConventions, 형식, Type, 관리 되는 호출 규칙을 사용 하 여 호출에 대 한 Type[]) 합니다.  
  
-   ILGenerator.EmitCalli (Opcode는 관리 되지 않는 호출 규칙을 사용 하 여 호출에 대 한 Type[]) CallingConvention, 형식입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callvirt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Callvirt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Callvirt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Callvirt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Callvirt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Callvirt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>개체에서 런타임에 바인딩된 메서드를 호출하고 반환 값을 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|6F < `T` >|callvirt `method`|연결 된 특정 메서드를 호출 `obj`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 `obj` 스택에 푸시됩니다.  
  
2.  메서드 인수 `arg1` 를 통해 `argN` 스택에 푸시됩니다.  
  
3.  메서드 인수 `arg1` 를 통해 `argN` 및 개체 참조 `obj` 스택에서 팝 되 고 이러한 인수를 사용 하는 메서드가 호출 되 고 메서드에 제어가 `obj` 메서드에서 참조 메타 데이터 토큰입니다. 완료 되 면 반환 값 수신자 메서드입니다에서 생성 되 고 호출자에 게 보냅니다.  
  
4.  반환 값으로 스택에 푸시됩니다.  
  
 `callvirt` 명령 개체에 런타임에 바인딩된 메서드를 호출 합니다. 즉, 메서드가의 런타임 형식에 따라 선택 됩니다 `obj` 메서드 포인터에 표시 되는 컴파일 타임 클래스 대신 합니다. `Callvirt` 가상 호출 모두 인스턴스 메서드를 사용할 수 있습니다. 합니다 `callvirt` 명령에서 바로 뒤를 `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) 제어를 전송 하기 전에 현재 스택 프레임 해제 되어야 함을 지정 하는 접두사입니다. 전달 호출 스택 프레임을 원래 메서드보다 더 높은 신뢰 메서드로 제어를 하지 릴리스됩니다.  
  
 메서드 메타 데이터 토큰에는 이름, 클래스 및 서명의 호출할 메서드를 제공 합니다. 관련 된 클래스 `obj` 클래스 인스턴스는 것입니다. 표시 된 메서드 이름 및 서명 일치 하는 비정적 메서드를 정의 하는 클래스,이 메서드가 호출 됩니다. 그렇지 않으면이 클래스의 기본 클래스 체인의 모든 클래스는 순서 대로 검사 됩니다. 메서드가 없는 경우 오류를입니다.  
  
 `Callvirt` 메서드를 호출 하기 전에 개체 및 관련 된 인수를 계산 스택에서 팝 합니다. 메서드 반환 값이 있으면 메서드가 완료 될 때 스택에 푸시됩니다. 호출 수신자 쪽 합니다 `obj` 매개 변수 인수 0으로 액세스할 `arg1` 인수 1 등과 합니다.  
  
 인수는 스택의 왼쪽에서 오른쪽 순서로 배치 됩니다. 즉, 첫 번째 인수 계산 하 고 모든 필요한 인수를 내림차순 스택의 맨 위에 있을 때까지 스택의 두 번째 인수를 차례로 세 번째에 배치 됩니다. 인스턴스 참조 `obj` (항상 필요한 `callvirt`) 전에 사용자에 게 표시 되는 인수의 푸시 해야 합니다. (메타 데이터 토큰에서 수행) 서명이에 대 한 매개 변수 목록의 항목을 포함할 필요가 대 한 포인터입니다.  
  
 가상 메서드를 호출할 수도 있습니다를 사용 하 여 확인 된 <xref:System.Reflection.Emit.OpCodes.Call> 명령입니다.  
  
 <xref:System.MissingMethodException> 관련 된 클래스에 표시 된 이름 및 서명을 사용 하 여 비정적 메서드를 찾을 수 없는 경우 throw 되 `obj` 또는 해당 기본 클래스입니다. 이 일반적으로 언어 MSIL (Microsoft Intermediate) 명령이 런타임이 아닌 네이티브 코드로 변환 될 때 감지 합니다.  
  
 <xref:System.NullReferenceException> obj null 이면 throw 됩니다.  
  
 <xref:System.Security.SecurityException> 시스템 보안 호출 된 메서드에 호출자에 게 액세스를 부여 하지 않는 경우 throw 됩니다. 보안 검사를 CIL이 런타임이 아닌 네이티브 코드로 변환 될 때 발생할 수 있습니다.  
  
> [!NOTE]
>  값 형식에 System.Object의 메서드를 호출 하는 경우 사용을 고려 합니다 `constrained` 접두사로 사용 하 여는 `callvirt` 명령입니다. 이 버전 관리 문제가 방지 값 형식에서 메서드를 재정의 하는 여부에 따라 다른 IL 내보낼 필요가 없습니다. 사용을 고려 합니다 `constrained` 인터페이스 메서드를 구현 하는 값 형식 메서드 값 형식에 대해 인터페이스 메서드를 이후에 호출 하는 경우 접두사를 사용 하 여 변경할 수 있습니다를 `MethodImpl`입니다. 이러한 문제에 자세히 설명 되어는 <xref:System.Reflection.Emit.OpCodes.Constrained> opcode입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `callvirt` opcode:  
  
-   ILGenerator.Emit (OpCode, MethodInfo)  
  
-   ILGenerator.EmitCall(OpCode, MethodInfo, Type[])  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Castclass">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Castclass;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Castclass" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Castclass" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Castclass As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Castclass;" />
      <MemberSignature Language="F#" Value=" staticval mutable Castclass : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Castclass" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>참조로 전송된 개체를 지정된 클래스로 캐스팅하려고 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|74 < `T` >|castclass `class`|형식의 새 개체를 캐스팅 `class`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조가 스택에 푸시됩니다.  
  
2.  개체 참조는 스택에서 팝 되 참조 된 개체 캐스팅 되는 지정 된 대로 `class`입니다.  
  
3.  성공 하면 새 개체 참조가 스택에 푸시됩니다.  
  
 `castclass` 명령 개체 참조를 캐스팅을 시도 하며 (형식 `O`) 지정된 된 클래스를 스택의 맨 위에 있습니다. 새 클래스는 원하는 클래스를 나타내는 메타 데이터 토큰에 의해 지정 됩니다. 스택의 맨 위에 개체의 클래스 (새 클래스는 인터페이스를 가정) 새 클래스를 구현 하지 않습니다 하 고 새 클래스의 파생된 클래스가 없는 경우는 <xref:System.InvalidCastException> throw 됩니다. 개체 참조가 null 참조 이면 `castclass` 성공 하 고 새 개체는 null 참조를 반환 합니다.  
  
 <xref:System.InvalidCastException> obj 클래스 캐스팅할 수 없는 경우 throw 됩니다.  
  
 <xref:System.TypeLoadException> 클래스를 찾을 수 없는 경우 throw 됩니다. 이 상황은 중간 MSIL (Microsoft Language) 명령 런타임이 아닌 네이티브 코드로 변환 될 때 일반적으로 발견 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `castclass` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ceq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ceq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ceq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ceq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ceq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ceq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ceq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>두 값을 비교합니다. 정수 값 1, 같으면 <see langword="(int32" />)를 계산 스택으로 푸시됩니다. 그렇지 않으면 0 (<see langword="int32" />)를 계산 스택으로 푸시됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 01|ceq|하는 경우 1을 푸시합니다 `value1` equals `value2`고, 그렇지 않으면 0을 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 스택에서 팝 되 고 `value1` 비교할 `value2`합니다.  
  
4.  하는 경우 `value1` 값과 같음 `value2`, 1은 스택에; 그렇지 않으면 0이 스택에 푸시됩니다.  
  
 합니다 `ceq` 명령 비교 `value1` 고 `value2`입니다. 하는 경우 `value1` 값과 같음 `value2`, 다음 1 (형식의 `int32`) 스택에 푸시됩니다. 그렇지 않으면 0 (형식의 `int32`) 스택에 푸시됩니다.  
  
 부동 소수점 숫자에 대 한 `ceq` 숫자 순서가 지정 된 경우 0을 반환 합니다 (하나 또는 둘 모두가 NaN). 무한 한 값은 자기 자신과 동일 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ceq` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>두 값을 비교합니다. 첫 번째 값이 두 번째 인스턴스보다 크면 정수 값 1 <see langword="(int32" />)를 계산 스택으로 푸시됩니다. 그렇지 않으면 0 (<see langword="int32" />)를 계산 스택으로 푸시됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 02|cgt|하는 경우 1을 푸시합니다 `value1` 보다 크면 `value2`고, 그렇지 않으면 0을 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 스택에서 팝 되 고 `cgt` 테스트 `value1` 보다 크면 `value2`합니다.  
  
4.  하는 경우 `value1` 보다 크면 `value2`, 1이 스택에 푸시됩니다; 그렇지 않으면 0이 스택에 푸시됩니다.  
  
 합니다 `cgt` 명령 비교 `value1` 고 `value2`입니다. 하는 경우 `value1` 보다 엄격 하 게 크면 `value2`에 `int32` 1의 값이 스택에 푸시됩니다. 그렇지 않은 경우는 `int32` 0의 값이 스택에 푸시됩니다.  
  
-   부동 소수점 숫자에 대 한 `cgt` 경우 (즉, 경우 인수 중 하나 이상이 NaN) 숫자 순서가 없으면 0을 반환 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `cgt` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>부호가 없거나 순서가 지정되지 않은 두 값을 비교합니다. 첫 번째 값이 두 번째 인스턴스보다 크면 정수 값 1 <see langword="(int32" />)를 계산 스택으로 푸시됩니다. 그렇지 않으면 0 (<see langword="int32" />)를 계산 스택으로 푸시됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 03|cgt.un|하는 경우 1을 푸시합니다 `value1` 보다 크면 `value2`고, 그렇지 않으면 0 (부호 없는 값)를 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 스택에서 팝 되 고 `cgt.un` 테스트 `value1` 보다 크면 `value2`합니다.  
  
4.  하는 경우 `value1` 보다 크면 `value2`, 1이 스택에 푸시됩니다; 그렇지 않으면 0이 스택에 푸시됩니다.  
  
 `int32` 1의 값이 다음 중 하나라도 스택에 푸시됩니다 `true` :  
  
 부동 소수점 `value1` 기준으로 정렬 되지 않은 `value2`합니다.  
  
 정수 값에 대 한 `value1` 보다 엄격 하 게 크면 `value2` 부호 없는 숫자로 간주 하는 경우.  
  
 그렇지 않은 경우는 `int32` 0의 값이 스택에 푸시됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `cgt.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ckfinite">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ckfinite;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ckfinite" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ckfinite As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ckfinite;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ckfinite : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Throw <see cref="T:System.ArithmeticException" /> 값이 유한 하지 않습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|C3|ckfinite|throw <xref:System.ArithmeticException> 값이 유한 하지 않습니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다. 
  
2.  `value` 스택에서 팝 되 고 `ckfinite` 명령에 대해 수행 됩니다.  
  
3.  `value` 스택에 다시 경우 예외가 throw 되지 않습니다.  
  
 합니다 `ckfinite instruction` throw <xref:System.ArithmeticException> 하는 경우 `value` (부동 소수점 숫자)입니다는 "숫자가 아님" 값 (NaN) 또는 `+-` 무한대 값입니다. `Ckfinite` 예외가 throw 되 면 스택의 값을 유지 합니다. 실행 지정 되지 경우 `value` 부동 소수점 숫자가 아닙니다.  
  
 <xref:System.ArithmeticException> 이 throw `value` 'normal' 숫자가 아닙니다.  
  
 특별 한 예외 또는 파생된 클래스의 <xref:System.ArithmeticException> 알맞은 예외 처리기에 잘못 된 값을 전달할 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ckfinite` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>두 값을 비교합니다. 첫 번째 값이 작으면 정수 값 1, 두 번째 인스턴스보다 <see langword="(int32" />)를 계산 스택으로 푸시됩니다. 그렇지 않으면 0 (<see langword="int32" />)를 계산 스택으로 푸시됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 04|clt|경우 1을 푸시합니다 `value1` 는 보다 작은 `value2`고, 그렇지 않으면 0을 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다. 

1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 스택에서 팝 되 고 `clt` 테스트 `value1` 는 보다 작은 `value2`합니다.  
  
4.  하는 경우 `value1` 는 보다 작은 `value2`, 1이 스택에 푸시됩니다; 그렇지 않으면 0이 스택에 푸시됩니다.  
  
 합니다 `clt` 명령 비교 `value1` 고 `value2`입니다. 하는 경우 `value1` 는 보다 작아야 `value2`에 `int32` 1의 값이 스택에 푸시됩니다. 그렇지 않은 경우는 `int32` 0의 값이 스택에 푸시됩니다.  
  
-   부동 소수점 숫자에 대 한 `clt` 경우 (즉, 경우 인수 중 하나 이상이 NaN) 숫자 순서가 없으면 0을 반환 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `clt` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>부호가 없거나 순서가 지정 되지 않은 값을 비교 <paramref name="value1" /> 고 <paramref name="value2" />입니다. If <paramref name="value1" /> 는 보다 작은 <paramref name="value2" />, 정수 값 1 <see langword="(int32" />) 평가로 푸시됩니다 스택 그렇지 않으면 0 (<see langword="int32" />)를 계산 스택으로 푸시됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 05|clt.un|하는 경우 1을 푸시합니다 `value1` 는 보다 작은 `value2`고, 그렇지 않으면 0 (부호 없는 값)를 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 스택에서 팝 되 고 `clt.un` 테스트 `value1` 는 보다 작은 `value2`합니다.  
  
4.  하는 경우 `value1` 는 보다 작은 `value2`, 1이 스택에 푸시됩니다; 그렇지 않으면 0이 스택에 푸시됩니다.  
  
 합니다 `clt.un` 명령 비교 `value1` 고 `value2`입니다. `int32` 다음 중 하나라도 true 값이 1 스택으로 푸시됩니다.  
  
-   `value1` 보다 작아야 `value2` (으로 `clt`).  
  
-   부동 소수점 `value1` 기준으로 정렬 되지 않은 `value2`합니다.  
  
-   정수 값에 대 한 `value1` 는 보다 작아야 `value2` 부호 없는 숫자로 간주 하는 경우.  
  
 그렇지 않은 경우는 `int32` 0의 값이 스택에 푸시됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `clt.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constrained">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Constrained;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Constrained" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Constrained" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Constrained As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Constrained;" />
      <MemberSignature Language="F#" Value=" staticval mutable Constrained : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Constrained" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>가상 메서드가 호출되는 형식을 제한합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 Microsoft 중간 언어 (MSIL) 어셈블리 형식으로 나열합니다.  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 16 < `T` >|제한 됩니다. `thisType`|형식으로 제한 된 형식에서 가상 메서드 호출 `T`합니다.|  
  
 `constrained` 접두사의 경우에 허용 되는 `callvirt` 명령입니다.  
  
 이 시점에서 MSIL 스택의 상태는 다음과 같이 해야 합니다.  
  
1.  관리 되는 포인터 `ptr`를 스택으로 푸시됩니다. 유형의 `ptr` 관리 되는 포인터 여야 합니다 (`&`)를 `thisType`입니다. 이 접두사가 없는 경우 다른입니다 `callvirt` 명령에 대 한 참조를 필요한 `thisType`합니다.  
  
2.  메서드 인수 `arg1` 를 통해 `argN` 에서 마찬가지로 접두사가 없는 스택으로 푸시됩니다 `callvirt` 명령입니다.  
  
 합니다 `constrained` 접두사를 허용 하도록 되어 `callvirt` 가능 하도록 일관 된 방식 인지에 관계 없이 지침 `thisType` 값 형식 이거나 참조 형식입니다.  
  
 경우는 `callvirt` `method` 명령에 접두사로 `constrained` `thisType`, 명령을 다음과 같이 실행 됩니다.  
  
-   경우 `thisType` 참조 형식 (달리 값 형식) 이면 `ptr` 역참조 되며 'this'이 포인터를 변수로 전달 합니다 `callvirt` 의 `method`합니다.  
  
-   경우 `thisType` 값 형식인 및 `thisType` 구현 `method` 한 다음 `ptr` 'this' 대이 한 포인터로 수정 되지 않은 상태로 전달 됩니다는 `call` `method` 구현에 대 한 지침 `method` 여`thisType`.  
  
-   경우 `thisType` 값 형식인 및 `thisType` 를 구현 하지 않습니다 `method` 한 다음 `ptr` 역참조, box 및 'this'이 포인터를 변수로 전달 되는 `callvirt` `method` 명령.  
  
 이 마지막 경우 경우에만 `method` 에 정의 된 <xref:System.Object>, <xref:System.ValueType>, 또는 <xref:System.Enum> 으로 재정의 되지 않은 `thisType`합니다. 이 경우 boxing 하면 되도록 원래 개체의 복사본입니다. 그러나 있으므로의 메서드 <xref:System.Object>, <xref:System.ValueType>, 및 <xref:System.Enum> 상태를 수정할 개체의이 팩트를 검색할 수 없습니다.  
  
 `constrained` 접두사 IL 생성기 제네릭 코드 만들기를 지원 합니다. 일반적으로 `callvirt` 명령 값 형식에 대해 올바르지 않습니다. 대신 IL 컴파일러의 형식에 따라 컴파일 타임에 위에서 설명한 'this'이 변환을 효과적으로 수행 하는 `ptr` 및 메서드가 호출 됩니다. 그러나 경우 `ptr` 컴파일 타임에 알 수 없는 제네릭 형식이 컴파일 타임에이 변환을 수행할 수 없는 합니다.  
  
 합니다 `constrained` opcode를 사용 하면 호출을 수행할 수는 가상 함수에 일관 된 방식 인지에 관계 없이 IL 컴파일러 `ptr` 값 형식 이거나 참조 형식입니다. 경우에 대 한 것 이지만 여기서 `thisType` 은 제네릭 형식 변수는 `constrained` 작동 제네릭이 아닌 형식에도 접두사 및 값 형식 간의 차이 숨기는 언어의 가상 호출을 생성 하는 복잡성을 줄일 수 및 참조 형식입니다.  
  
 사용 하 여 `constrained` 접두사 값 형식 버전 관리 문제가 발생할 가능성을 방지 합니다. 경우는 `constrained` 접두사가 사용 되지 않으면, 값 형식이 System.Object의 메서드를 재정의 하는 여부에 따라 다양 한 IL을 내보냅니다. 예를 들어, 값 형식 `V` object.tostring () 메서드를 재정의 하는 `call` `V.ToString()` 명령을 내보냅니다; 하지 않는 경우는 `box` 명령 및 `callvirt` `Object.ToString()` 명령을 내보내지 않습니다. 재정의 나중에 추가 되 면 버전 관리 문제는 후자의 경우 나중에 재정의 제거 하는 경우 전자의 경우에 발생할 수 있습니다.  
  
 합니다 `constrained` 접두사 사용할 수도 있습니다 값 형식에 대해 인터페이스 메서드 호출에 대 한 인터페이스 메서드를 구현 하는 값 형식 메서드를 사용 하 여 변경할 수 있으므로 `MethodImpl`합니다. 경우는 `constrained` 접두사가 사용 되지 않으면, 컴파일러는 값의 컴파일 타임에 바인딩할 형식의 메서드를 선택 해야 합니다. 사용 하는 `constrained` 접두사 MSIL 컴파일 시간이 아닌 런타임에 인터페이스 메서드를 구현 하는 메서드에 바인딩할 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `constrained` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 값으로 변환 <see langword="native int" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|D3|conv.i|변환할 `native int`푸싱, `native int` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.i` opcode 변환는 `value` 스택의 맨 위에 값을 변환 하는 두고 opcode에 지정 된 형식으로 스택 맨 위에 있는 합니다. 4 바이트 보다 작은 정수 값은 확장 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.i` 또는 `conv.u` 를 사용할 경우 결과 또한 `native int`). 부동 소수점 값으로 변환 되는 `F` 형식입니다.  
  
 정수 값으로 변환 부동 소수점 숫자에서 소수점을 자릅니다. 변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다. 경우 `value` 에 맞게 너무 커서를 `float32 (F)`, 양의 무한대 (경우 `value` 양수 이면) 음의 무한대 또는 (경우 `value` 음수인) 반환 됩니다. 오버플로가 변환 정수 형식과 다른 경우 상위 비트가 잘립니다. 결과 보다 작은 경우는 `int32`, 값이 슬롯에 맞게 부호 확장 합니다.  
  
 오버플로가 발생 하는 경우 지정 된로 값을 반환 하는 정수를 부동 소수점 형식을 변환 합니다.  
  
 이 필드를 사용 하는 경우 예외가 throw 되지 않습니다. 참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> 고 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> 결과 형식은 결과 값을 올바르게 나타낼 수 있습니다 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.i` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 값으로 변환 <see langword="int8" />를 확장 합니다 (채웁니다) 하도록 <see langword="int32" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|67|conv.i1|변환할 `int8`푸싱, `int32` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.i1` opcode 변환는 `value` 스택의 맨 위에 값을 변환 하는 두고 opcode에 지정 된 형식으로 스택 맨 위에 있는 합니다. 4 바이트 보다 작은 정수 값은 확장 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.i` 또는 `conv.u` 를 사용할 경우 결과 또한 `native int`). 부동 소수점 값으로 변환 되는 `F` 형식입니다.  
  
 정수 값으로 변환 부동 소수점 숫자에서 소수점을 자릅니다. 변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다. 경우 `value` 에 맞게 너무 커서를 `float32 (F)`, 양의 무한대 (경우 `value` 양수 이면) 음의 무한대 또는 (경우 `value` 음수인) 반환 됩니다. 오버플로가 변환 정수 형식과 다른 경우 상위 비트가 잘립니다. 결과 보다 작은 경우는 `int32`, 값이 슬롯에 맞게 부호 확장 합니다.  
  
 오버플로가 발생 하는 경우 지정 된로 값을 반환 하는 정수를 부동 소수점 형식을 변환 합니다.  
  
 이 필드를 사용 하는 경우 예외가 throw 되지 않습니다. 참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> 고 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> 결과 형식은 결과 값을 올바르게 나타낼 수 있습니다 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.i1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 값으로 변환 <see langword="int16" />를 확장 합니다 (채웁니다) 하도록 <see langword="int32" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|68|conv.i2|변환할 `int16`푸싱, `int32` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.i2` opcode 변환는 `value` 스택의 맨 위에 값을 변환 하는 두고 opcode에 지정 된 형식으로 스택 맨 위에 있는 합니다. 4 바이트 보다 작은 정수 값은 확장 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.i` 또는 `conv.u` 를 사용할 경우 결과 또한 `native int`). 부동 소수점 값으로 변환 되는 `F` 형식입니다.  
  
 정수 값으로 변환 부동 소수점 숫자에서 소수점을 자릅니다. 변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다. 경우 `value` 에 맞게 너무 커서를 `float32 (F)`, 양의 무한대 (경우 `value` 양수 이면) 음의 무한대 또는 (경우 `value` 음수인) 반환 됩니다. 오버플로가 변환 정수 형식과 다른 경우 상위 비트가 잘립니다. 결과 보다 작은 경우는 `int32`, 값이 슬롯에 맞게 부호 확장 합니다.  
  
 오버플로가 발생 하는 경우 지정 된로 값을 반환 하는 정수를 부동 소수점 형식을 변환 합니다.  
  
 이 필드를 사용 하는 경우 예외가 throw 되지 않습니다. 참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> 고 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> 결과 형식은 결과 값을 올바르게 나타낼 수 있습니다 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.i2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 값으로 변환 <see langword="int32" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|69|conv.i4|변환할 `int32`푸싱, `int32` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.i4` opcode 변환는 `value` 스택의 맨 위에 값을 변환 하는 두고 opcode에 지정 된 형식으로 스택 맨 위에 있는 합니다. 4 바이트 보다 작은 정수 값은 확장 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.i` 또는 `conv.u` 를 사용할 경우 결과 또한 `native int`). 부동 소수점 값으로 변환 되는 `F` 형식입니다.  
  
 정수 값으로 변환 부동 소수점 숫자에서 소수점을 자릅니다. 변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다. 경우 `value` 에 맞게 너무 커서를 `float32 (F)`, 양의 무한대 (경우 `value` 양수 이면) 음의 무한대 또는 (경우 `value` 음수인) 반환 됩니다. 오버플로가 변환 정수 형식과 다른 경우 상위 비트가 잘립니다. 결과 보다 작은 경우는 `int32`, 값이 슬롯에 맞게 부호 확장 합니다.  
  
 오버플로가 발생 하는 경우 지정 된로 값을 반환 하는 정수를 부동 소수점 형식을 변환 합니다.  
  
 이 필드를 사용 하는 경우 예외가 throw 되지 않습니다. 참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> 고 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> 결과 형식은 결과 값을 올바르게 나타낼 수 있습니다 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.i4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 값으로 변환 <see langword="int64" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|6A|conv.i8|변환할 `int64`푸싱, `int64` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.i8` opcode 변환는 `value` 스택의 맨 위에 값을 변환 하는 두고 opcode에 지정 된 형식으로 스택 맨 위에 있는 합니다. 4 바이트 보다 작은 정수 값은 확장 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.i` 또는 `conv.u` 를 사용할 경우 결과 또한 `native int`). 부동 소수점 값으로 변환 되는 `F` 형식입니다.  
  
 정수 값으로 변환 부동 소수점 숫자에서 소수점을 자릅니다. 변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다. 경우 `value` 에 맞게 너무 커서를 `float32 (F)`, 양의 무한대 (경우 `value` 양수 이면) 음의 무한대 또는 (경우 `value` 음수인) 반환 됩니다. 오버플로가 변환 정수 형식과 다른 경우 상위 비트가 잘립니다. 결과 보다 작은 경우는 `int32`, 값이 슬롯에 맞게 부호 확장 합니다.  
  
 오버플로가 발생 하는 경우 지정 된로 값을 반환 하는 정수를 부동 소수점 형식을 변환 합니다.  
  
 이 필드를 사용 하는 경우 예외가 throw 되지 않습니다. 참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> 고 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> 결과 형식은 결과 값을 올바르게 나타낼 수 있습니다 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.i8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>서명 계산 스택 맨 위에 있는 부호 있는 값으로 변환 <see langword="native int" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|D4|conv.ovf.i|변환할를 `native int` (스택에 `native int`) 오버플로 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.i` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>서명 계산 스택 맨 위에 있는 부호 없는 값으로 변환 <see langword="native int" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|8A|conv.ovf.i.un|부호 없는 값으로 변환 합니다는 `native int` (스택에 `native int`) 오버플로 대 한 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.i.un` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 부호 있는 값을 부호 있는 <see langword="int8" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|B3|conv.ovf.i1|변환할를 `int8` (스택에 `int32`) 오버플로 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.i1` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>서명 계산 스택 맨 위에 있는 부호 없는 값으로 변환 <see langword="int8" /> 로 확장 하 고 <see langword="int32" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|82|conv.ovf.i1.un|부호 없는 값으로 변환 합니다는 `int8` (스택에 `int32`) 오버플로 대 한 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.i1.un` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i1.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>서명 계산 스택 맨 위에 있는 부호 있는 값으로 변환 <see langword="int16" /> 를 확장 하 고 <see langword="int32" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|B5|conv.ovf.i2|변환할를 `int16` (스택에 `int32`) 오버플로 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.i2` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>서명 계산 스택 맨 위에 있는 부호 없는 값으로 변환 <see langword="int16" /> 로 확장 하 고 <see langword="int32" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|83|conv.ovf.i2.un|부호 없는 값으로 변환 합니다는 `int16` (스택에 `int32`) 오버플로 대 한 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.i2.un` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i2.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>서명 계산 스택 맨 위에 있는 부호 있는 값으로 변환 <see langword="int32" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|B7|conv.ovf.i4|변환할를 `int32` (스택에 `int32`) 오버플로 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.i4` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>서명 계산 스택 맨 위에 있는 부호 없는 값으로 변환 <see langword="int32" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|84|conv.ovf.i4.un|부호 없는 값으로 변환 합니다는 `int32` (스택에 `int32`) 오버플로 대 한 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.i4.un` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i4.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>서명 계산 스택 맨 위에 있는 부호 있는 값으로 변환 <see langword="int64" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|B9|conv.ovf.i8|변환할를 `int64` (스택에 `int64`) 오버플로 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.i8` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>서명 계산 스택 맨 위에 있는 부호 없는 값으로 변환 <see langword="int64" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|85|conv.ovf.i8.un|부호 없는 값으로 변환 합니다는 `int64` (스택에 `int64`) 오버플로 대 한 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.i8.un` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.i8.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 부호 있는 값으로 변환 <see langword="unsigned native int" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|D5|conv.ovf.u|변환할를 `unsigned native int` (스택에 `native int`) 오버플로 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.u` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 부호 없는 값으로 변환 <see langword="unsigned native int" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|8B|conv.ovf.u.un|값을 부호는 `unsigned native int` (스택에 `native int`) 오버플로 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.u.un` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.uvf.u.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 부호 있는 값으로 변환 <see langword="unsigned int8" /> 를 확장 하 고 <see langword="int32" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|B4|conv.ovf.u1|변환할를 `unsigned int8` (스택에 `int32`) 오버플로 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.u1` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 부호 없는 값으로 변환 <see langword="unsigned int8" /> 를 확장 하 고 <see langword="int32" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|86|conv.ovf.u1.un|부호 없는 값으로 변환 합니다는 `unsigned int8` (스택에 `int32`) 오버플로 대 한 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.u1.un` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u1.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 부호 있는 값으로 변환 <see langword="unsigned int16" /> 를 확장 하 고 <see langword="int32" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|B6|conv.ovf.u2|변환할를 `unsigned int16` (스택에 `int32`) 오버플로 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.u2` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 부호 없는 값으로 변환 <see langword="unsigned int16" /> 를 확장 하 고 <see langword="int32" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|87|conv.ovf.u2.un|부호 없는 값으로 변환 합니다는 `unsigned int16` (스택에 `int32`) 오버플로 대 한 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.u2.un` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u2.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 부호 있는 값으로 변환 <see langword="unsigned int32" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|B8|conv.ovf.u4|변환할를 `unsigned int32` (스택에 `int32`) 오버플로 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.u4` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 부호 없는 값으로 변환 <see langword="unsigned int32" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|88|conv.ovf.u4.un|부호 없는 값으로 변환 합니다는 `unsigned int32` (스택에 `int32`) 오버플로 대 한 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.u4.un` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u4.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 부호 있는 값으로 변환 <see langword="unsigned int64" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|BA|conv.ovf.u8|변환할를 `unsigned int64` (스택에 `int64`) 오버플로 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.u8` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 부호 없는 값으로 변환 <see langword="unsigned int64" />을 throw <see cref="T:System.OverflowException" /> 오버플로가 발생 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|89|conv.ovf.u8.un|부호 없는 값으로 변환 합니다는 `unsigned int64` (스택에 `int64`) 오버플로 대 한 예외를 throw 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다. 오버플로가 발생 하면 예외가 throw 됩니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.ovf.u8.un` opcode 변환는 `value` opcode 및 스택의 맨 위에 값을 변환 하는 위치를 지정 된 형식에 대 한 스택 맨 위에 있는 합니다. 값이 너무 크거나 너무 작아서 대상 형식으로 나타낼 수, 하는 경우 예외가 throw 됩니다.  
  
 부동 소수점 숫자에서 정수 값으로의 변환을 소수점을 자릅니다. 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.ovf.i` 또는 `conv.ovf.u` 를 사용 하는 경우 결과 또한 `native int`).  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.ovf.u8.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 부호 없는 정수 값으로 변환 <see langword="float32" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|76|conv.r.un|Convert 부호 없는 정수를 부동 소수점, 푸시 `F` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.r.un` opcode 변환는 `value` 스택의 맨 위에 값을 변환 하는 두고 opcode에 지정 된 형식으로 스택 맨 위에 있는 합니다. 4 바이트 보다 작은 정수 값은 확장 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.i` 또는 `conv.u` 를 사용할 경우 결과 또한 `native int`). 부동 소수점 값으로 변환 되는 `F` 형식입니다.  
  
 정수 값으로 변환 부동 소수점 숫자에서 소수점을 자릅니다. 변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다. 경우 `value` 에 맞게 너무 커서를 `float32 (F)`, 양의 무한대 (경우 `value` 양수 이면) 음의 무한대 또는 (경우 `value` 음수인) 반환 됩니다. 오버플로가 변환 정수 형식과 다른 경우 상위 비트가 잘립니다. 결과 보다 작은 경우는 `int32`, 값이 슬롯에 맞게 부호 확장 합니다.  
  
 오버플로가 발생 하는 정수 부동 소수점 형식으로 변환 하는 경우는 `result` 반환 되는 지정 되지 않습니다. `conv.r.un` 는 정수를 팝 합니다, 서명 되지 않은,으로 해석 및 정수를 나타내는 부동 소수점 숫자를 사용 하 여 대체 작업: 중 하나는 `float32`정밀도의 손실 없이 정수를 나타내는 데 넓게 또는 다른 경우, `float64`합니다.  
  
 이 필드를 사용 하는 경우 예외가 throw 되지 않습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.r.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 값으로 변환 <see langword="float32" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|6B|conv.r4|변환할 `float32`푸싱, `F` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.r4` opcode 변환는 `value` 스택의 맨 위에 값을 변환 하는 두고 opcode에 지정 된 형식으로 스택 맨 위에 있는 합니다. 4 바이트 보다 작은 정수 값은 확장 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.i` 또는 `conv.u` 를 사용할 경우 결과 또한 `native int`). 부동 소수점 값으로 변환 되는 `F` 형식입니다.  
  
 정수 값으로 변환 부동 소수점 숫자에서 소수점을 자릅니다. 변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다. 경우 `value` 에 맞게 너무 커서를 `float32 (F)`, 양의 무한대 (경우 `value` 양수 이면) 음의 무한대 또는 (경우 `value` 음수인) 반환 됩니다. 오버플로가 변환 정수 형식과 다른 경우 상위 비트가 잘립니다. 결과 보다 작은 경우는 `int32`, 값이 슬롯에 맞게 부호 확장 합니다.  
  
 오버플로가 발생 하는 경우 지정 된로 값을 반환 하는 정수를 부동 소수점 형식을 변환 합니다.  
  
 이 필드를 사용 하는 경우 예외가 throw 되지 않습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.r4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 값으로 변환 <see langword="float64" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|6C|conv.r8|변환할 `float64`푸싱, `F` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.r8` opcode 변환는 `value` 스택의 맨 위에 값을 변환 하는 두고 opcode에 지정 된 형식으로 스택 맨 위에 있는 합니다. 4 바이트 보다 작은 정수 값은 확장 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.i` 또는 `conv.u` 를 사용할 경우 결과 또한 `native int`). 부동 소수점 값으로 변환 되는 `F` 형식입니다.  
  
 정수 값으로 변환 부동 소수점 숫자에서 소수점을 자릅니다. 변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다. 경우 `value` 에 맞게 너무 커서를 `float32 (F)`, 양의 무한대 (경우 `value` 양수 이면) 음의 무한대 또는 (경우 `value` 음수인) 반환 됩니다. 오버플로가 변환 정수 형식과 다른 경우 상위 비트가 잘립니다. 결과 보다 작은 경우는 `int32`, 값이 슬롯에 맞게 부호 확장 합니다.  
  
 오버플로가 발생 하는 경우 지정 된로 값을 반환 하는 정수를 부동 소수점 형식을 변환 합니다.  
  
 이 필드를 사용 하는 경우 예외가 throw 되지 않습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.r8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 값으로 변환 <see langword="unsigned native int" />를 확장 하 고 <see langword="native int" />입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|E0|conv.u|변환할 `unsigned native int`푸싱, `native int` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.u` opcode 변환는 `value` 스택의 맨 위에 값을 변환 하는 두고 opcode에 지정 된 형식으로 스택 맨 위에 있는 합니다. 4 바이트 보다 작은 정수 값은 확장 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.i` 또는 `conv.u` 를 사용할 경우 결과 또한 `native int`). 부동 소수점 값으로 변환 되는 `F` 형식입니다.  
  
 정수 값으로 변환 부동 소수점 숫자에서 소수점을 자릅니다. 변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다. 경우 `value` 에 맞게 너무 커서를 `float32 (F)`, 양의 무한대 (경우 `value` 양수 이면) 음의 무한대 또는 (경우 `value` 음수인) 반환 됩니다. 오버플로가 변환 정수 형식과 다른 경우 상위 비트가 잘립니다. 결과 보다 작은 경우는 `int32`, 값이 슬롯에 맞게 부호 확장 합니다.  
  
 오버플로가 발생 하는 경우 지정 된로 값을 반환 하는 정수를 부동 소수점 형식을 변환 합니다.  
  
 이 필드를 사용 하는 경우 예외가 throw 되지 않습니다. 참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> 고 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> 결과 형식은 결과 값을 올바르게 나타낼 수 있습니다 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.u` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 값으로 변환 <see langword="unsigned int8" />를 확장 하 고 <see langword="int32" />입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|D2|conv.u1|변환할 `int8`푸싱, `int32` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.u1` opcode 변환는 `value` 스택의 맨 위에 값을 변환 하는 두고 opcode에 지정 된 형식으로 스택 맨 위에 있는 합니다. 4 바이트 보다 작은 정수 값은 확장 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.i` 또는 `conv.u` 를 사용할 경우 결과 또한 `native int`). 부동 소수점 값으로 변환 되는 `F` 형식입니다.  
  
 정수 값으로 변환 부동 소수점 숫자에서 소수점을 자릅니다. 변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다. 경우 `value` 에 맞게 너무 커서를 `float32 (F)`, 양의 무한대 (경우 `value` 양수 이면) 음의 무한대 또는 (경우 `value` 음수인) 반환 됩니다. 오버플로가 변환 정수 형식과 다른 경우 상위 비트가 잘립니다. 결과 보다 작은 경우는 `int32`, 값이 슬롯에 맞게 부호 확장 합니다.  
  
 오버플로가 발생 하는 경우 지정 된로 값을 반환 하는 정수를 부동 소수점 형식을 변환 합니다.  
  
 이 필드를 사용 하는 경우 예외가 throw 되지 않습니다. 참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> 고 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> 결과 형식은 결과 값을 올바르게 나타낼 수 있습니다 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.u1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 값으로 변환 <see langword="unsigned int16" />를 확장 하 고 <see langword="int32" />입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|D1|conv.u2|변환할 `int16`푸싱, `int32` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.u2` opcode 변환는 `value` 스택의 맨 위에 값을 변환 하는 두고 opcode에 지정 된 형식으로 스택 맨 위에 있는 합니다. 4 바이트 보다 작은 정수 값은 확장 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.i` 또는 `conv.u` 를 사용할 경우 결과 또한 `native int`). 부동 소수점 값으로 변환 되는 `F` 형식입니다.  
  
 정수 값으로 변환 부동 소수점 숫자에서 소수점을 자릅니다. 변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다. 경우 `value` 에 맞게 너무 커서를 `float32 (F)`, 양의 무한대 (경우 `value` 양수 이면) 음의 무한대 또는 (경우 `value` 음수인) 반환 됩니다. 오버플로가 변환 정수 형식과 다른 경우 상위 비트가 잘립니다. 결과 보다 작은 경우는 `int32`, 값이 슬롯에 맞게 부호 확장 합니다.  
  
 오버플로가 발생 하는 경우 지정 된로 값을 반환 하는 정수를 부동 소수점 형식을 변환 합니다.  
  
 이 필드를 사용 하는 경우 예외가 throw 되지 않습니다. 참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> 고 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> 결과 형식은 결과 값을 올바르게 나타낼 수 있습니다 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.u2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 값으로 변환 <see langword="unsigned int32" />를 확장 하 고 <see langword="int32" />입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|6D|conv.u4|변환할 `unsigned int32`푸싱, `int32` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.u4` opcode 변환는 `value` 스택의 맨 위에 값을 변환 하는 두고 opcode에 지정 된 형식으로 스택 맨 위에 있는 합니다. 4 바이트 보다 작은 정수 값은 확장 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.i` 또는 `conv.u` 를 사용할 경우 결과 또한 `native int`). 부동 소수점 값으로 변환 되는 `F` 형식입니다.  
  
 정수 값으로 변환 부동 소수점 숫자에서 소수점을 자릅니다. 변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다. 경우 `value` 에 맞게 너무 커서를 `float32 (F)`, 양의 무한대 (경우 `value` 양수 이면) 음의 무한대 또는 (경우 `value` 음수인) 반환 됩니다. 오버플로가 변환 정수 형식과 다른 경우 상위 비트가 잘립니다. 결과 보다 작은 경우는 `int32`, 값이 슬롯에 맞게 부호 확장 합니다.  
  
 오버플로가 발생 하는 경우 지정 된로 값을 반환 하는 정수를 부동 소수점 형식을 변환 합니다.  
  
 이 필드를 사용 하는 경우 예외가 throw 되지 않습니다. 참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> 고 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> 결과 형식은 결과 값을 올바르게 나타낼 수 있습니다 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.u4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에 있는 값으로 변환 <see langword="unsigned int64" />를 확장 하 고 <see langword="int64" />입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|6E|conv.u8|변환할 `int64`푸싱, `int64` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 팝 되 고 변환 작업을 시도 합니다.  
  
3.  변환이 성공한 경우에 결과 값을 스택에 푸시됩니다.  
  
 합니다 `conv.u8` opcode 변환는 `value` 스택의 맨 위에 값을 변환 하는 두고 opcode에 지정 된 형식으로 스택 맨 위에 있는 합니다. 4 바이트 보다 작은 정수 값은 확장 `int32` 를 계산 스택으로 로드 되 면 (경우가 아니면 `conv.i` 또는 `conv.u` 를 사용할 경우 결과 또한 `native int`). 부동 소수점 값으로 변환 되는 `F` 형식입니다.  
  
 정수 값으로 변환 부동 소수점 숫자에서 소수점을 자릅니다. 변환 하는 경우는 `float64` 에 `float32`, 전체 자릿수 손실 될 수 있습니다. 경우 `value` 에 맞게 너무 커서를 `float32 (F)`, 양의 무한대 (경우 `value` 양수 이면) 음의 무한대 또는 (경우 `value` 음수인) 반환 됩니다. 오버플로가 변환 정수 형식과 다른 경우 상위 비트가 잘립니다. 결과 보다 작은 경우는 `int32`, 값이 슬롯에 맞게 부호 확장 합니다.  
  
 오버플로가 발생 하는 경우 지정 된로 값을 반환 하는 정수를 부동 소수점 형식을 변환 합니다.  
  
 이 필드를 사용 하는 경우 예외가 throw 되지 않습니다. 참조 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> 고 <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> 결과 형식은 결과 값을 올바르게 나타낼 수 있습니다 하는 경우 예외를 throw 하는 동일한 명령에 대 한 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `conv.u8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>지정된 수의 바이트를 소스 주소에서 대상 주소로 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 17|cpblk|다른 메모리 블록에서 데이터를 복사 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  대상 주소를 스택으로 푸시됩니다.  
  
2.  원본 주소를 스택으로 푸시됩니다.  
  
3.  복사할 바이트 수를 스택으로 푸시됩니다.  
  
4.  스택에서 팝 되 고 바이트, 원본 주소 및 대상 주소 수 바이트 수를 지정 된 원본 주소에서 대상 주소로 복사 됩니다.  
  
 합니다 `cpblk` 번호를 복사 하는 명령 (형식 `unsigned int32`) 원본 주소에서 바이트 (형식의 `*`, `native int`, 또는 `&`) 대상 주소에 대 (형식의 `*`를 `native int`, 또는 `&`). 동작 `cpblk` 소스 및 대상 영역이 겹치는 경우에 지정 되지 않습니다.  
  
 `cpblk` 원본 및 해결 하는 대상 컴퓨터의 원래 크기에 정렬 되어 있다고 가정 합니다. 합니다 `cpblk` 명령 바로 앞에 나와야 합니다 `unaligned.<prefix>` 명령 원본 또는 대상 정렬 임을 나타냅니다.  
  
 작업은 `cpblk` 명령 바로 앞에서 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.  
  
 <xref:System.NullReferenceException> 잘못 된 주소 검색 된 경우에 throw 될 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `cpblk` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>개체의 주소에 있는 값 형식을 복사 (유형 <see langword="&amp;" />, <see langword="*" /> 또는 <see langword="native int" />) 대상 개체의 주소 (형식 <see langword="&amp;" />를 <see langword="*" /> 또는 <see langword="native int" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|70 < `T` >|cpobj `classTok`|값 복사 원본 개체에서 대상 개체를 입력합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  대상 개체 참조가 스택에 푸시됩니다.  
  
2.  소스 개체 참조가 스택에 푸시됩니다.  
  
3.  스택에서 팝 되 고 두 개체 참조 원본 개체의 주소 값 형식은 대상 개체의 주소로 복사 됩니다.  
  
 동작 `cpobj` 원본 및 대상 개체 참조 클래스 토큰을 나타내는 클래스의 인스턴스에 대 한 포인터가 아닌 경우에 지정 되지 않습니다 `classTok` (을 `typeref` 또는 `typedef`), 또는 경우 `classTok` 나타내지 않는 값 형식입니다.  
  
 <xref:System.NullReferenceException> 잘못 된 주소 검색 된 경우에 throw 될 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `cpobj` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>두 값을 나누고 결과 부동 소수점 푸시합니다 (유형 <see langword="F" />) 이나 몫 (형식 <see langword="int32" />)를 계산 스택으로 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|5B|div|부동 소수점 결과 몫을 반환 하려면 두 값을 나눕니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 스택에서 팝 되 고 `value1` 나눈 `value2`합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 `result` = `value1` div value2에는 다음 조건을 충족 합니다.  
  
 &#124;`result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, 및:  
  
 기호 (`result`) = +, 로그인 하는 경우 (`value1`) 기호 = (`value2`), 또는 경우 기호 (`value1`) ~ 기호 = (`value2`)  
  
 `div` 명령이 결과 계산 합니다를 스택에 푸시합니다.  
  
 정수 나누기를 자릅니다.  
  
 유한 숫자를 0으로 나누기는 무한 올바르게 지정 된 값을 생성합니다.  
  
 NaN (Not A Number) 값을 0으로 0 또는 무한대에서 무한대 생성을 나눕니다. 무한대로 나눈 수는 0 값을 생성 합니다.  
  
 정수 계열 작업 <xref:System.ArithmeticException> 결과 형식으로 결과 표현할 수 없는 경우. 이 경우에 발생할 수 있습니다 `value1` 최대 음수 값, 및 `value2` 가-1입니다.  
  
 정수 계열 작업 throw <xref:System.DivideByZeroException> 경우 `value2` 0입니다.  
  
 Intel 기반 플랫폼에서 유의 <xref:System.OverflowException> (minint div-1)을 계산 하는 경우에 throw 됩니다. 부동 소수점 연산 (생성 무한대 또는 Nan 대신) 예외를 throw 하지 않습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `div` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>두 개의 부호 없는 정수 값으로 나누고 결과 푸시합니다 (<see langword="int32" />)를 계산 스택으로 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|5C|div.un|두 값을 나눕니다 unsigned, 몫을 반환 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 스택에서 팝 되 고 `value1` 나눈 `value2`합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 `div.un` 명령 계산 `value1` 나눈 `value2`, 부호 없는 정수 및 푸시를 그대로 둘 다를 `result` 스택에 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `div.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dup">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Dup;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Dup" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Dup" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Dup As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Dup;" />
      <MemberSignature Language="F#" Value=" staticval mutable Dup : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Dup" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 계산 스택 맨 위에 있는 값을 복사하여 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|25|dup|스택의 맨 위에 값을 복제합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 복제용 스택에서 팝 됩니다.  
  
3.  `value` 이 스택에 다시 푸시됩니다.  
  
4.  중복 값을 스택에 푸시됩니다.  
  
 `dup` 명령 스택의 맨 위에 있는 요소를 복제 하 고 맨 위에 두 개의 동일한 값을 유지 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `dup` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfilter">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfilter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfilter" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfilter As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfilter;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfilter : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>제어를 전송 합니다 <see langword="filter" /> 예외가 공용 언어 인프라 (CLI) 예외 처리기로 다시 절.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 11|endfilter|SEH 예외 처리의 최종 필터 절입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 스택에서 팝 되 `endfilter` 실행 되 고 예외 처리기로 제어가 전달 됩니다.  
  
 `Value` (형식 이어야 합니다는 `int32` 값의 특정 집합 중 하나입니다) 필터 절에서 반환 됩니다. 하나 여야 함:  
  
-   `exception_continue_search` (`value` = 0) 예외 처리기 검색을 계속 하려면  
  
-   `exception_execute_handler` (`value` = 1)를 두 번째 시작 예외 처리는 finally 블록이 실행 되는 처리기가 필터 절이에 연관 될 때까지 단계의 위치한 합니다. 검색 시 처리기가 실행 됩니다.  
  
 다른 정수 값에는 지정 되지 않은 결과가 생성 됩니다.  
  
 필터의 진입점 메서드의 예외 표에 나와 있는 것 처럼 필터의 코드 블록에 있는 첫 번째 명령 이어야 합니다. 합니다 `endfilter` 명령에는 필터의 코드 블록에 있는 마지막 명령 이어야 합니다 (따라서 하나만 있을 수 있습니다 하나 `endfilter` 단일 필터 블록에 대 한). 실행 한 후의 `endfilter` 명령 컨트롤 CLI 예외 처리 메커니즘으로 논리적으로 이동 합니다.  
  
 예외 메커니즘을 통해 제외 하 고 필터 블록으로 제어를 전송할 수 없습니다. 컨트롤을 사용 하 여 제외 필터 블록 외부로 전송할 수 없습니다는 `throw` 명령 또는 최종을 실행 하 여 `endfilter` 명령입니다. 포함할 수 없습니다는 `try` 내에서 블록을 `filter` 블록입니다. 내부 예외가 발생 하는 경우는 `filter` 블록을 가로채는 0 값 (`exception_continue_search`) 반환 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `endfilter` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfinally">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfinally;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfinally" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfinally As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfinally;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfinally : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>제어를 전송 합니다 <see langword="fault" /> 또는 <see langword="finally" /> 공용 언어 인프라 (CLI) 예외 처리기로 다시 예외 블록의 절.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|DC|가<br /><br /> endfault|종료 합니다 `finally` 또는 `fault` 예외 블록의 절.|  
  
 이 명령에 대 한 전환 동작 없음 스택이 됩니다.  
  
 `Endfinally` 및 `endfault` 의 끝을 표시 합니다 `finally` 또는 `fault` 절 때문 예외 처리기가 호출 될 때까지 계속 진행할 수는 스택 해제 합니다. 합니다 `endfinally` 또는 `endfault` 명령이 CLI 예외 메커니즘으로 제어를 전달 합니다. 메커니즘을 다음에 대 한 검색 `finally` leave 명령을 사용 하 여 보호 된 블록 종료 된 경우 체인의 절. 보호 된 블록을 끝난 경우 예외가 발생 하 여 CLI가 다음을 검색할 `finally` 또는 `fault`, 또는 예외 처리의 첫 번째 단계 동안 선택한 예외 처리기를 입력 합니다.  
  
 `endfinally` 명령 내 어휘만 나타날 수 있습니다는 `finally` 블록입니다. 와 달리 합니다 `endfilter` 명령 블록 끝나는 않아도 `endfinally` 명령과 만큼 있을 수 있는 `endfinally` 필요에 따라 블록 내에서 지침. 이러한도 동일한 제한이 적용 된 `endfault` 명령 및 `fault` 블록입니다.  
  
 컨트롤에 전송할 수 없습니다는 `finally` (또는 `fault`) 예외 메커니즘을 통해 제외 하 고 차단 합니다. 제어를 전송할 수 없습니다는 `finally` (또는 `fault`) 사용 하 여 제외 하 고 차단를 `throw` 명령 또는 실행 합니다 `endfinally` (또는 `endfault`) 명령. 특히 떨어질 수 없습니다"out"의 `finally` (또는 `fault`) 블록 또는 실행 하는 <xref:System.Reflection.Emit.OpCodes.Ret> 또는 <xref:System.Reflection.Emit.OpCodes.Leave> 명령 내에서 `finally` (또는 `fault`) 블록입니다.  
  
 유의 합니다 `endfault` 및 `endfinally` 지침은 별칭-동일한 opcode에 해당 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `endfinally` (`endfault`) opcode 뿐만 `ILGenerator` 메서드 <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>합니다.  
  
-   ILGenerator.Emit(OpCode)  
  
-   ILGenerator.EndExceptionBlock()  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>특정 주소에 지정된 메모리 블록을 주어진 크기와 초기 값으로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 18|initblk|지정된 된 값을 메모리 블록의 각 위치를 설정 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  시작 주소를 스택에 푸시됩니다.  
  
2.  초기화 값을 스택에 푸시됩니다.  
  
3.  초기화할 바이트 수를 스택으로 푸시됩니다.  
  
4.  스택에서 팝 되 고 바이트, 초기화 값 및 시작 주소 수 및 해당 값에 따라 초기화가 수행 됩니다.  
  
 합니다 `initblk` 수를 설정 하는 명령 (`unsigned int32`) 지정된 된 주소에서 시작 하는 바이트 (형식의 `native int`를 `&`, 또는 `*`) 초기화 값 (형식의 `unsigned int8`). `initblk` 시작 주소를 컴퓨터의 원래 크기에 맞추도록 가정 합니다.  
  
 작업은 `initblk` 바로 앞에서 지침을 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.  
  
 <xref:System.NullReferenceException> 잘못 된 주소 검색 된 경우에 throw 될 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `initblk` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>지정된 주소에서 값 형식의 각 필드를 null 참조 또는 적절한 기본 형식의 0으로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 15 < `T` >|`initobj` `typeTok`|값 형식을 초기화합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  초기화 값 형식의 주소를 스택으로 푸시됩니다.  
  
2.  스택에서 팝 되는 주소 형식으로 지정된 된 주소에서 값 형식이 초기화 되는지 `typeTok`합니다.  
  
 합니다 `initobj` 푸시된 주소로 지정 된 값 형식의 각 필드를 초기화 하는 명령 (형식의 `native int`, `&`, 또는 `*`) null 참조 또는 해당 기본 형식의 0입니다. 이 메서드는 인스턴스 생성자 메서드를 호출할 준비가 된 것입니다. 하는 경우 `typeTok` 참조 형식이 면이 명령은 것과 동일한 효과가 `ldnull` 뒤에 `stind.ref`입니다.  
  
 와 달리 <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` constructor 메서드를 호출 하지 않습니다. `Initobj` 값 형식 초기화를 위한 동안 `newobj` 할당 및 개체를 초기화 하는 데 사용 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `initobj` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Isinst">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Isinst;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Isinst" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Isinst" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Isinst As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Isinst;" />
      <MemberSignature Language="F#" Value=" staticval mutable Isinst : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Isinst" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>개체 참조 하는지 여부를 테스트 (형식 <see langword="O" />) 특정 클래스의 인스턴스입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|75 < `T` >|isinst `class`|개체 참조의 인스턴스인지 여부를 테스트 `class`인터페이스, null 참조 또는 해당 클래스의 인스턴스를 반환 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조가 스택에 푸시됩니다.  
  
2.  개체 참조가 스택에서 팝 하 고 전달 된 클래스의 인스턴스인 경우 확인 하기 위해 테스트 `class`합니다.  
  
3.  (개체 참조 또는 null 참조일) 결과를 스택으로 푸시됩니다.  
  
 `Class` 메타 데이터 토큰은 필요한 클래스를 표시 합니다. 스택의 맨 위에 개체의 클래스를 구현 하는 경우 `class` (경우 `class` 인터페이스)의 파생된 클래스 인지 또는 `class` (경우 `class` 일반 클래스는) 형식으로 캐스팅 되 `class` 고 결과 스택에 푸시됩니다. 정확 하 게 처럼 <xref:System.Reflection.Emit.OpCodes.Castclass> 호출한 되었습니다. 그렇지 않으면 null 참조 스택에 푸시됩니다. 개체 참조 자체가 null 참조 `isinst` 마찬가지로 null 참조를 반환 합니다.  
  
 <xref:System.TypeLoadException> 클래스를 찾을 수 없는 경우 throw 됩니다. 이 일반적으로 언어 MSIL (Microsoft Intermediate) 지침 런타임이 아닌 네이티브 코드로 변환 될 때 감지 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `isinst` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Jmp">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Jmp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Jmp" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Jmp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Jmp As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Jmp;" />
      <MemberSignature Language="F#" Value=" staticval mutable Jmp : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Jmp" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 메서드를 종료하고 지정된 메서드로 점프합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|27 < `T` >|jmp `method`|현재 메서드를 종료 하 고 지정 된 메서드로 점프 합니다.|  
  
 이 명령에 대 한 전환 동작 없음 스택이 됩니다.  
  
 `jmp` (이동) 명령으로 제어를 전송으로 지정한 메서드의 `method`, 메서드 참조에 대 한 메타 데이터 토큰 인 합니다. 현재 인수를 대상 메서드에 전송 됩니다.  
  
 이 명령이 실행 될 때 계산 스택으로 비어 있어야 합니다. 호출 규칙, 수 및 대상 주소에 대 한 인수의 형식에는 현재 메서드에 일치 해야 합니다.  
  
 합니다 `jmp` 밖으로 제어를 전송 하는 명령을 사용할 수 없습니다를 `try`, `filter`, `catch`, 또는 `finally` 블록입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `jmp` opcode:  
  
-   ILGenerator.Emit (OpCode, MethodInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>지정된 인덱스 값이 참조하는 인수를 스택으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 09 < `unsigned int16` >|ldarg `index`|에 있는 인수 로드 `index` 스택으로 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  에 있는 인수 값 `index` 스택에 푸시됩니다.  
  
 합니다 `ldarg` 명령에 인덱싱된 인수에서 푸시하 `index`스택으로 인수 0부터 인덱싱된 위치, 합니다. `ldarg` 명령을 사용 하 여 들어오는 인수에서 복사 하 여 값 형식 또는 스택에 기본 값을 로드할 수 있습니다. 인수 값의 형식이 현재 메서드의 시그니처에 하 여 지정 된 인수의 형식과 동일 합니다.  
  
 가변 길이 인수 목록을 사용 하는 절차는 `ldarg` 명령 고정 인수 서명의 변수 부분에서 초기에 대해서만 사용할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Arglist> 명령에 대 한 자세한).  
  
 4 바이트 보다 작은 정수 값을 갖는 인수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면 합니다. 부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldarg` opcode:  
  
-   ILGenerator.Emit (OpCode, short)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인덱스 0에 있는 인수를 계산 스택으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|02|ldarg.0|0 인수를 스택으로 로드 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  인덱스 0에 있는 인수 값으로 스택에 푸시됩니다.  
  
 `ldarg.0` 명령은 인덱스 0에 있는 인수 값을 로드 하기 위한 효율적인 인코딩할입니다.  
  
 `ldarg.0` 스택으로 0 인덱싱된 인수를 푸시합니다. `ldarg.0` 명령을 사용 하 여 들어오는 인수에서 복사 하 여 값 형식 또는 스택에 기본 값을 로드할 수 있습니다. 인수 값의 형식이 현재 메서드의 시그니처에 하 여 지정 된 인수의 형식과 동일 합니다.  
  
 4 바이트 보다 작은 정수 값을 갖는 인수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면 합니다. 부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldarg.0` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인덱스 1에 있는 인수를 계산 스택으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|03|ldarg.1|1 인수를 스택으로 로드 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  인덱스 1에 있는 인수 값으로 스택에 푸시됩니다.  
  
 `ldarg.1` 명령은 인덱스 1에 있는 인수 값을 로드 하기 위한 효율적인 인코딩할입니다.  
  
 `ldarg.1` 1를 계산 스택으로에 인덱싱된 인수를 푸시합니다. `ldarg.1` 명령을 사용 하 여 들어오는 인수에서 복사 하 여 값 형식 또는 스택에 기본 값을 로드할 수 있습니다. 인수 값의 형식이 현재 메서드의 시그니처에 하 여 지정 된 인수의 형식과 동일 합니다.  
  
 4 바이트 보다 작은 정수 값을 갖는 인수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면 합니다. 부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldarg.1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인덱스 2에 있는 인수를 계산 스택으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|04|ldarg.2|인수 2를 스택으로 로드 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  인덱스 2에 있는 인수 값으로 스택에 푸시됩니다.  
  
 `ldarg.2` 명령은 인덱스 2에 있는 인수 값을 로드 하기 위한 효율적인 인코딩할입니다.  
  
 `ldarg.2` 스택으로 2에 인덱싱된 인수를 푸시합니다. `ldarg.2` 명령을 사용 하 여 들어오는 인수에서 복사 하 여 값 형식 또는 스택에 기본 값을 로드할 수 있습니다. 인수 값의 형식이 현재 메서드의 시그니처에 하 여 지정 된 인수의 형식과 동일 합니다.  
  
 4 바이트 보다 작은 정수 값을 갖는 인수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면 합니다. 부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldarg.2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인덱스 3에 있는 인수를 계산 스택으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|05|ldarg.3|인수 3를 스택으로 로드 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  인덱스 3에 있는 인수 값으로 스택에 푸시됩니다.  
  
 `ldarg.3` 명령은 인덱스 3에 있는 인수 값을 로드 하는 것에 대 한 인코딩입니다.  
  
 `ldarg.3` 스택으로 3에 인덱싱된 인수를 푸시합니다. `ldarg.3` 명령을 사용 하 여 들어오는 인수에서 복사 하 여 값 형식 또는 스택에 기본 값을 로드할 수 있습니다. 인수 값의 형식이 현재 메서드의 시그니처에 하 여 지정 된 인수의 형식과 동일 합니다.  
  
 4 바이트 보다 작은 정수 값을 갖는 인수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면 합니다. 부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldarg.3` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>지정된 약식 인덱스가 참조하는 인수를 계산 스택으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|0E < `unsigned int8` >|ldarg.s `index`|에 있는 인수 로드 `index` 스택에 약식입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  에 있는 인수 값 `index` 스택에 푸시됩니다.  
  
 `ldarg.s` 명령은 4에서 255 사이의 인덱싱된 인수 로드에 대 한 효율적인 인코딩할입니다.  
  
 합니다 `ldarg.s` 명령에 인덱싱된 인수에서 푸시하 `index`스택으로 인수 0부터 인덱싱된 위치, 합니다. `ldarg.s` 명령을 사용 하 여 들어오는 인수에서 복사 하 여 값 형식 또는 스택에 기본 값을 로드할 수 있습니다. 인수 값의 형식이 현재 메서드의 시그니처에 하 여 지정 된 인수의 형식과 동일 합니다.  
  
 가변 길이 인수 목록을 사용 하는 절차는 `ldarg.s` 명령 고정 인수 서명의 변수 부분에서 초기에 대해서만 사용할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Arglist> 명령에 대 한 자세한).  
  
 4 바이트 보다 작은 정수 값을 갖는 인수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면 합니다. 부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldarg.s` opcode:  
  
-   ILGenerator.Emit (OpCode, byte)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인수 주소를 계산 스택으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 0A &LT; `unsigned int16` >|ldarga `index`|인수에 의해 인덱싱된의 주소를 가져올 `index`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소 `addr` 인수에 의해 인덱싱된 `index` 스택에 푸시됩니다.  
  
 `ldarga` 주소를 가져오는 명령 (형식의 `*`)로 인덱싱된 인수의 `index`인수 0 이상에서 인덱싱되는 위치, 합니다. 주소 `addr` 는 항상 대상 컴퓨터에는 자연 경계에 맞춰집니다.  
  
 가변 길이 인수 목록을 사용 하는 절차는 `ldarga` 명령 고정 인수 서명의 변수 부분에서 초기에 대해서만 사용할 수 있습니다.  
  
 `ldarga` 참조로 매개 변수 전달에 사용 됩니다. 다른 경우에 대 한 <xref:System.Reflection.Emit.OpCodes.Ldarg> 고 <xref:System.Reflection.Emit.OpCodes.Starg> 사용 해야 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldarga` opcode:  
  
-   ILGenerator.Emit (OpCode, short)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인수 주소를 계산 스택에 약식으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|0F < `unsigned int8` >|ldarga.s `index`|인수에 의해 인덱싱된의 주소를 가져올 `index`, 약식입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소 `addr` 인수에 의해 인덱싱된 `index` 스택에 푸시됩니다.  
  
 `ldarga.s` (의 약식 형태 `ldarga`) 인수 번호 0에서 255를 사용 해야 하며 보다 효율적인 인코딩입니다.  
  
 `ldarga.s` 주소를 가져오는 명령 (형식의`*`)로 인덱싱된 인수의 `index`인수 0 이상에서 인덱싱되는 위치, 합니다. 주소 `addr` 는 항상 대상 컴퓨터에는 자연 경계에 맞춰집니다.  
  
 가변 길이 인수 목록을 사용 하는 절차는 `ldarga.s` 명령 고정 인수 서명의 변수 부분에서 초기에 대해서만 사용할 수 있습니다.  
  
 `ldarga.s` 참조로 매개 변수 전달에 사용 됩니다. 다른 경우에 대 한 <xref:System.Reflection.Emit.OpCodes.Ldarg_S> 고 <xref:System.Reflection.Emit.OpCodes.Starg_S> 사용 해야 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldarga.s` opcode:  
  
-   ILGenerator.Emit (OpCode, byte)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 주어진된 값을 푸시합니다 <see langword="int32" /> 로 계산 스택에 <see langword="int32" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|20 < `int32` >|ldc.i4 `num`|값을 푸시합니다 `num` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값 `num` 스택에 푸시됩니다.  
  
 -1에서 8에 대 한 특히 짧고 127, 인코딩을 통해-128에서 정수에 대 한 특별 한 짧은 (및 따라서 보다 효율적인) 인코딩을 note 합니다. 모든 짧은 인코딩으로 스택에 4 바이트 정수를 푸시합니다. 8 바이트 정수 4 및 8 바이트 부동 소수점 숫자와 및 짧은 형식으로 표시할 수 없는 4 바이트 값에 대 한 긴 인코딩이 사용 됩니다. 8 바이트 정수 상수를 스택에 푸시하는 방법은 세 가지가 있습니다.  
  
 1. 사용 된 <xref:System.Reflection.Emit.OpCodes.Ldc_I8> 32 비트 이상 나타내야 하는 상수에 대 한 지침입니다.  
  
 2. 사용 합니다 <xref:System.Reflection.Emit.OpCodes.Ldc_I4> 명령 뒤에 <xref:System.Reflection.Emit.OpCodes.Conv_I8> 9 ~ 32 비트를 필요로 하는 상수에 대 한 합니다.  
  
 3. 뒤에 약식 명령 사용을 <xref:System.Reflection.Emit.OpCodes.Conv_I8> 비트 8 이하로 표현할 수 있는 상수에 대 한 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4` opcode:  
  
-   ILGenerator.Emit (OpCode, int)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정수 값을 0으로 계산 스택에 푸시합니다는 <see langword="int32" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|16|ldc.i4.0|0을 스택으로 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값 0으로 스택에 푸시됩니다.  
  
 이 정수 값 0의 푸시에 대 한 특별 한 짧은 인코딩입니다. 모든 특수 한 짧은 인코딩을 스택에 4 바이트 정수를 푸시합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.0` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정수 값 1을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|17|ldc.i4.1|1을 스택으로 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  1이 스택에 푸시됩니다.  
  
 이 정수 값 0의 푸시에 대 한 특별 한 짧은 인코딩입니다. 모든 특수 한 짧은 인코딩을 스택에 4 바이트 정수를 푸시합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정수 값 2를 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|18|ldc.i4.2|2를 스택으로 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값 2를 스택으로 푸시됩니다.  
  
 이 정수 값 0의 푸시에 대 한 특별 한 짧은 인코딩입니다. 모든 특수 한 짧은 인코딩을 스택에 4 바이트 정수를 푸시합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정수 값 3을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|19|ldc.i4.3|3을 스택으로 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값 3으로 스택에 푸시됩니다.  
  
 이 정수 값 0의 푸시에 대 한 특별 한 짧은 인코딩입니다. 모든 특수 한 짧은 인코딩을 스택에 4 바이트 정수를 푸시합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.3` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정수 값 4를 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|1A|ldc.i4.4|4를 스택에 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값 4를 스택으로 푸시됩니다.  
  
 이 정수 값 0의 푸시에 대 한 특별 한 짧은 인코딩입니다. 모든 특수 한 짧은 인코딩을 스택에 4 바이트 정수를 푸시합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정수 값 5를 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|1B|ldc.i4.5|5를 스택에 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값 5를 스택으로 푸시됩니다.  
  
 이 정수 값 0의 푸시에 대 한 특별 한 짧은 인코딩입니다. 모든 특수 한 짧은 인코딩을 스택에 4 바이트 정수를 푸시합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.5` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정수 값 6을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|1C|ldc.i4.6|6을 스택으로 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  6이 스택에 푸시됩니다.  
  
 이 정수 값 0의 푸시에 대 한 특별 한 짧은 인코딩입니다. 모든 특수 한 짧은 인코딩을 스택에 4 바이트 정수를 푸시합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.6` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정수 값 7을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|1D|ldc.i4.7|7 스택에 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  7이 스택에 푸시됩니다.  
  
 이 정수 값 0의 푸시에 대 한 특별 한 짧은 인코딩입니다. 모든 특수 한 짧은 인코딩을 스택에 4 바이트 정수를 푸시합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.7` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정수 값 8을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|1E|ldc.i4.8|8를 스택에 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  8이 스택에 푸시됩니다.  
  
 이 정수 값 0의 푸시에 대 한 특별 한 짧은 인코딩입니다. 모든 특수 한 짧은 인코딩을 스택에 4 바이트 정수를 푸시합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_M1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_M1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_M1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_M1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_M1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_M1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정수 값 -1을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|15|ldc.i4.m1|-1을 스택에 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  -1이 스택에 푸시됩니다.  
  
 이 정수 값 0의 푸시에 대 한 특별 한 짧은 인코딩입니다. 모든 특수 한 짧은 인코딩을 스택에 4 바이트 정수를 푸시합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.m1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>제공 된 푸시합니다 <see langword="int8" /> 값으로 계산 스택에 <see langword="int32" />, 약식입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|1F < `int8` >|ldc.i4.s `num`|푸시합니다 `num` 로 스택에 `int32`, 약식입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값 `num` 스택에 푸시됩니다.  
  
 `ldc.i4.s` 스택으로 정수는-128에서 127 푸시에 대 한 보다 효율적인 인코딩이 사용 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i4.s` opcode:  
  
-   ILGenerator.Emit (OpCode, byte)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 주어진된 값을 푸시합니다 <see langword="int64" /> 로 계산 스택에 <see langword="int64" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|21 < `int64` >|ldc.i8 `num`|푸시합니다 `num` 로 스택에 `int64`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값 `num` 스택에 푸시됩니다.  
  
 이 인코딩은 푸시를 `int64` 스택에 값입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.i8` opcode:  
  
-   ILGenerator.Emit(OpCode, long)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 주어진된 값을 푸시합니다 <see langword="float32" /> 형식으로 계산 스택에 <see langword="F" /> (부동 소수점).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|22 < `float32` >|ldc.r4 `num`|푸시합니다 `num` 로 스택에 `F`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값 `num` 스택에 푸시됩니다.  
  
 이 인코딩은 푸시를 `float32` 스택에 값입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.r4` opcode:  
  
-   ILGenerator.Emit (OpCode 단일)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 주어진된 값을 푸시합니다 <see langword="float64" /> 형식으로 계산 스택에 <see langword="F" /> (부동 소수점).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|23 < `float64` >|ldc.r8 `num`|푸시합니다 `num` 로 스택에 `F`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값 `num` 스택에 푸시됩니다.  
  
 이 인코딩은 푸시를 `float64` 스택에 값입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldc.r8` opcode:  
  
-   ILGenerator.Emit (OpCode, double)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>명령에 지정 된 형식으로 계산 스택 맨 위에 지정 된 배열 인덱스의 요소를 로드 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 Microsoft 중간 언어 (MSIL) 어셈블리 형식으로 나열합니다.  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|A3 < `T` >|ldelem `typeTok`|에 있는 요소를 로드 `index` 형식으로 스택 맨 위에 `typeTok`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 `array` 스택에 푸시됩니다.  
  
2.  인덱스 값을 `index` 스택에 푸시됩니다.  
  
3.  `index` 및 `array` 스택에서 팝 되 고 위치에 저장 된 값 `index` 에서 `array` 조회 됩니다.  
  
4.  값으로 스택에 푸시됩니다.  
  
 합니다 `ldelem` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다. 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다.  
  
 토큰을 변수로 지정 된 반환 값의 형식 `typeTok` 명령에 있습니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 상한 보다 큰 `array`입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식을 사용 하 여 요소를 로드 <see langword="native int" /> 으로 계산 스택 맨 위에 지정 된 배열 인덱스는 <see langword="native int" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|97|ldelem.i|형식을 사용 하 여 요소를 로드 `native int` 시 `index` 으로 스택 맨 위에 `native int`.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 `array` 스택에 푸시됩니다.  
  
2.  인덱스 값을 `index` 스택에 푸시됩니다.  
  
3.  `index` 및 `array` 스택에서 팝 되 고 위치에 저장 된 값 `index` 에서 `array` 조회 됩니다.  
  
4.  값으로 스택에 푸시됩니다.  
  
 합니다 `ldelem.i` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다. 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다.  
  
 반환 값 `ldelem.i` 는 `native int`합니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.i` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식을 사용 하 여 요소를 로드 <see langword="int8" /> 으로 계산 스택 맨 위에 지정 된 배열 인덱스는 <see langword="int32" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|90|ldelem.i1|형식을 사용 하 여 요소를 로드 `int8` 시 `index` 으로 스택 맨 위에 `int32`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 `array` 스택에 푸시됩니다.  
  
2.  인덱스 값을 `index` 스택에 푸시됩니다.  
  
3.  `index` 및 `array` 스택에서 팝 되 고 위치에 저장 된 값 `index` 에서 `array` 조회 됩니다.  
  
4.  값으로 스택에 푸시됩니다.  
  
 합니다 `ldelem.i1` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다. 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다.  
  
 반환 값 `ldelem.i1` 는 `int8`합니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.i1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식을 사용 하 여 요소를 로드 <see langword="int16" /> 으로 계산 스택 맨 위에 지정 된 배열 인덱스는 <see langword="int32" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|92|ldelem.i2|형식을 사용 하 여 요소를 로드 `int16` 시 `index` 으로 스택 맨 위에 `int32`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 `array` 스택에 푸시됩니다.  
  
2.  인덱스 값을 `index` 스택에 푸시됩니다.  
  
3.  `index` 및 `array` 스택에서 팝 되 고 위치에 저장 된 값 `index` 에서 `array` 조회 됩니다.  
  
4.  값으로 스택에 푸시됩니다.  
  
 합니다 `ldelem.i2` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다. 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다.  
  
 반환 값 `ldelem.i2` 는 `int16`합니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.i2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식을 사용 하 여 요소를 로드 <see langword="int32" /> 으로 계산 스택 맨 위에 지정 된 배열 인덱스는 <see langword="int32" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|94|ldelem.i4|형식을 사용 하 여 요소를 로드 `int32` 시 `index` 으로 스택 맨 위에 `int32`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 `array` 스택에 푸시됩니다.  
  
2.  인덱스 값을 `index` 스택에 푸시됩니다.  
  
3.  `index` 및 `array` 스택에서 팝 되 고 위치에 저장 된 값 `index` 에서 `array` 조회 됩니다.  
  
4.  값으로 스택에 푸시됩니다.  
  
 합니다 `ldelem.i4` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다. 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다.  
  
 반환 값 `ldelem.i4` 는 `int32`합니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.i4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식을 사용 하 여 요소를 로드 <see langword="int64" /> 으로 계산 스택 맨 위에 지정 된 배열 인덱스는 <see langword="int64" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|96|ldelem.i8|형식을 사용 하 여 요소를 로드 `int64` 시 `index` 으로 스택 맨 위에 `int64`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 `array` 스택에 푸시됩니다.  
  
2.  인덱스 값을 `index` 스택에 푸시됩니다.  
  
3.  `index` 및 `array` 스택에서 팝 되 고 위치에 저장 된 값 `index` 에서 `array` 조회 됩니다.  
  
4.  값으로 스택에 푸시됩니다.  
  
 합니다 `ldelem.i8` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다. 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다.  
  
 반환 값 `ldelem.i8` 는 `int64`합니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.i8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식을 사용 하 여 요소를 로드 <see langword="float32" /> 형식으로 계산 스택 맨 위에 지정 된 배열 인덱스 <see langword="F" /> (부동 소수점).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|98|ldelem.r4|형식을 사용 하 여 요소를 로드 `float32` 언제 `index` 형식으로 스택의 맨 위에 `F`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 `array` 스택에 푸시됩니다.  
  
2.  인덱스 값을 `index` 스택에 푸시됩니다.  
  
3.  `index` 및 `array` 스택에서 팝 되 고 위치에 저장 된 값 `index` 에서 `array` 조회 됩니다.  
  
4.  값으로 스택에 푸시됩니다.  
  
 합니다 `ldelem.r4` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다. 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다.  
  
 반환 값 `ldelem.r4` 는 `float32`합니다.  
  
 부동 소수점 값 형식으로 변환 됩니다 `F` 를 계산 스택으로 로드 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.r4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식을 사용 하 여 요소를 로드 <see langword="float64" /> 형식으로 계산 스택 맨 위에 지정 된 배열 인덱스 <see langword="F" /> (부동 소수점).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|99|ldelem.r8|형식을 사용 하 여 요소를 로드 `float64` 언제 `index` 형식으로 스택 맨 위에 `F`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 `array` 스택에 푸시됩니다.  
  
2.  인덱스 값을 `index` 스택에 푸시됩니다.  
  
3.  `index` 및 `array` 스택에서 팝 되 고 위치에 저장 된 값 `index` 에서 `array` 조회 됩니다.  
  
4.  값으로 스택에 푸시됩니다.  
  
 합니다 `ldelem.r8` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다. 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다.  
  
 반환 값 `ldelem.r8` 는 `float64`합니다.  
  
 부동 소수점 값 형식으로 변환 됩니다 `F` 를 계산 스택으로 로드 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.r8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식으로 계산 스택 맨 위에 지정 된 배열 인덱스에서 개체 참조를 포함 하는 요소 <see langword="O" /> (개체 참조).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|9A|ldelem.ref|개체 참조를 사용 하 여 요소를 로드 `index` 형식으로 스택 맨 위에 `O`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 `array` 스택에 푸시됩니다.  
  
2.  인덱스 값을 `index` 스택에 푸시됩니다.  
  
3.  `index` 및 `array` 스택에서 팝 되 고 위치에 저장 된 값 `index` 에서 `array` 조회 됩니다.  
  
4.  값으로 스택에 푸시됩니다.  
  
 합니다 `ldelem.ref` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다. 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다.  
  
 반환 값 `ldelem.ref` 형식이 `O` (개체 참조).  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.ref` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식을 사용 하 여 요소를 로드 <see langword="unsigned int8" /> 으로 계산 스택 맨 위에 지정 된 배열 인덱스는 <see langword="int32" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|91|ldelem.u1|형식을 사용 하 여 요소를 로드 `unsigned int8` 시 `index` 으로 스택 맨 위에 `int32`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 `array` 스택에 푸시됩니다.  
  
2.  인덱스 값을 `index` 스택에 푸시됩니다.  
  
3.  `index` 및 `array` 스택에서 팝 되 고 위치에 저장 된 값 `index` 에서 `array` 조회 됩니다.  
  
4.  값으로 스택에 푸시됩니다.  
  
 합니다 `ldelem.u1` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다. 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다.  
  
 반환 값 `ldelem.u1` 는 `int8`합니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.u1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식을 사용 하 여 요소를 로드 <see langword="unsigned int16" /> 으로 계산 스택 맨 위에 지정 된 배열 인덱스는 <see langword="int32" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|93|ldelem.u2|형식을 사용 하 여 요소를 로드 `unsigned int16` 으로 스택 맨 위에 있는 인덱스는 `int32`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 `array` 스택에 푸시됩니다.  
  
2.  인덱스 값을 `index` 스택에 푸시됩니다.  
  
3.  `index` 및 `array` 스택에서 팝 되 고 위치에 저장 된 값 `index` 에서 `array` 조회 됩니다.  
  
4.  값으로 스택에 푸시됩니다.  
  
 합니다 `ldelem.u2` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다. 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다.  
  
 반환 값 `ldelem.u2` 는 `int16`합니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.u2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식을 사용 하 여 요소를 로드 <see langword="unsigned int32" /> 으로 계산 스택 맨 위에 지정 된 배열 인덱스는 <see langword="int32" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|95|ldelem.u4|형식을 사용 하 여 요소를 로드 `unsigned int32` 으로 스택 맨 위에 있는 인덱스는 `int32`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 `array` 스택에 푸시됩니다.  
  
2.  인덱스 값을 `index` 스택에 푸시됩니다.  
  
3.  `index` 및 `array` 스택에서 팝 되 고 위치에 저장 된 값 `index` 에서 `array` 조회 됩니다.  
  
4.  값으로 스택에 푸시됩니다.  
  
 합니다 `ldelem.u4` 인덱스를 사용 하 여 요소의 값을 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다. 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다.  
  
 반환 값 `ldelem.u4` 는 `int32`합니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.ArrayTypeMismatchException> 배열 요소의 필수 형식 보유 하지 않는 경우 throw 됩니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelem.u4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelema">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelema;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelema" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelema As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelema;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelema : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>지정된 된 배열 인덱스 형식으로 계산 스택 맨 위에 있는 배열 요소의 주소를 로드 <see langword="&amp;" /> (관리 되는 포인터).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|8F < `T` >|ldelema `class`|에 있는 배열 요소의 주소를 로드 `index` 형식으로 계산 스택 맨 위에 `&` (관리 되는 포인터).|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 `array` 스택에 푸시됩니다.  
  
2.  인덱스 값을 `index` 스택에 푸시됩니다.  
  
3.  `index` 및 `array` 스택에서 팝 되 고 위치에 저장 된 주소의 `index` 에서 `array` 조회 됩니다.  
  
4.  주소를 스택으로 푸시됩니다.  
  
 합니다 `ldelema` 개체의 배열에서 특정 인덱스에서 개체의 주소를 검색 하는 데 사용 됩니다 (형식의 `class`). 합니다 `ldelema` 인덱스에 있는 값의 주소를 로드 하는 명령 `index` (형식 `native int`) 0부터 시작 하는 1 차원 배열에서 `array` 스택의 맨 위에 배치 합니다. 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다. 값 형식 이어야 합니다 `class` 명령으로 전달 합니다.  
  
 반환 값 `ldelema` 관리 되는 포인터 (형식 `&`).  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldelema` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 계산 스택에 참조가 있는 개체에서 필드의 값을 찾습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|7B < `T` >|ldfld `field`|지정된 된 개체를 스택에 있는 필드의 값을 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 (또는 포인터)를 스택에 푸시됩니다.  
  
2.  개체 참조 (또는 포인터)이 스택에서 팝 합니다. 개체에 지정된 된 필드의 값은 있습니다.  
  
3.  필드에 저장 된 값으로 스택에 푸시됩니다.  
  
 `ldfld` 명령이 스택에 개체에 있는 필드의 값을 푸시합니다. 개체는 개체 참조 스택에 있어야 합니다. (유형 `O`)를 관리 되는 포인터 (형식 `&`), 관리 되지 않는 포인터를 (형식 `native int`), 임시 포인터 (형식 `*`), 또는 값 형식의 인스턴스. 관리 되지 않는 포인터를 사용 검증할 수 있는 코드에서 허용 되지 않습니다. 개체의 필드를 필드 멤버를 참조 하는 메타 데이터 토큰에 의해 지정 됩니다. 반환 형식은 필드와 연결 된 것과 동일 합니다. 인스턴스 필드 (이 경우 개체 아니어야 null 참조) 또는 정적 필드는 필드 수 있습니다.  
  
 합니다 `ldfld` 명령 중 하나 또는 모두 뒤에 올 수 있습니다 합니다 <xref:System.Reflection.Emit.OpCodes.Unaligned> 및 <xref:System.Reflection.Emit.OpCodes.Volatile> 접두사입니다.  
  
 <xref:System.NullReferenceException> 개체가 null 인 고 필드가 static이 아닌 경우 throw 됩니다.  
  
 <xref:System.MissingFieldException> 지정된 된 필드 메타 데이터에 없는 경우 throw 됩니다. 이 값은 런타임에 하지 언어 MSIL (Microsoft Intermediate) 명령이 네이티브 코드로 변환 될 때 일반적으로 검사 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldfld` opcode:  
  
-   ILGenerator.Emit(OpCode, FieldInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 계산 스택에 참조가 있는 개체에서 필드의 주소를 찾습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|7C < `T` >|ldflda `field`|주소의 푸시 `field` 스택에 지정한 개체입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 (또는 포인터)를 스택에 푸시됩니다.  
  
2.  개체 참조 (또는 포인터)이 스택에서 팝 합니다. 개체에 지정된 된 필드의 주소를 찾을 수 있습니다.  
  
3.  지정된 된 필드의 주소를 스택으로 푸시됩니다.  
  
 `ldflda` 스택에 개체에 있는 필드의 주소를 푸시합니다. 개체는 개체 참조 스택에 있어야 합니다. (유형 `O`)를 관리 되는 포인터 (형식 `&`), 관리 되지 않는 포인터를 (형식 `native int`), 임시 포인터 (형식 `*`), 또는 값 형식의 인스턴스. 관리 되지 않는 포인터를 사용 검증할 수 있는 코드에서 허용 되지 않습니다. 개체의 필드를 필드 멤버를 참조 하는 메타 데이터 토큰에 의해 지정 됩니다.  
  
 반환 된 값 `ldflda` 관리 되는 포인터 (형식 `&`)로 관리 되지 않는 포인터를 스택에 밀어넣어 개체, 경우에서 반송 주소 이기도 관리 되지 않는 포인터를 (형식 `native int`).  
  
 합니다 `ldflda` 명령 중 하나 또는 모두 뒤에 올 수 있습니다 합니다 <xref:System.Reflection.Emit.OpCodes.Unaligned> 및 <xref:System.Reflection.Emit.OpCodes.Volatile> 접두사입니다.  
  
 <xref:System.InvalidOperationException> 개체를 액세스 하는 애플리케이션 도메인 내에서 없으면 throw 됩니다. 에 액세스 하는 애플리케이션 도메인 내에서 포함 되지 않는 필드의 주소를 로드할 수 없습니다.  
  
 <xref:System.NullReferenceException> 개체가 null 인 고 필드가 static이 아닌 경우 throw 됩니다.  
  
 <xref:System.MissingFieldException> 지정된 된 필드 메타 데이터에 없는 경우 throw 됩니다. 이 값은 런타임에 하지 언어 MSIL (Microsoft Intermediate) 명령이 네이티브 코드로 변환 될 때 일반적으로 검사 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldflda` opcode:  
  
-   ILGenerator.Emit(OpCode, FieldInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>관리 되지 않는 포인터를 푸시 (형식 <see langword="native int" />)를 계산 스택으로 특정 메서드를 구현 하는 네이티브 코드에 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 06 < `T` >|ldftn `method`|가 참조 하는 메서드에 대 한 포인터를 푸시 `method` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  특정 메서드를 관리 되지 않는 포인터를 스택으로 푸시됩니다.  
  
 특정 메서드 (`method`)를 사용 하 여 호출할 수는 <xref:System.Reflection.Emit.OpCodes.Calli> 관리 되는 메서드 (또는 비관리 코드에 관리 코드에서 전환 하는 스텁을) 참조 하는 경우 명령입니다.  
  
 CLR 호출 규칙을 사용 하 여 네이티브 코드로 반환 되는 값을 가리킵니다. 이 메서드에 대 한 포인터를 콜백 루틴으로 관리 되지 않는 네이티브 코드에 전달 되어야 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldftn` opcode:  
  
-   ILGenerator.Emit (OpCode, MethodInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 로드 <see langword="native int" /> 으로 <see langword="native int" /> 으로 계산 스택에 간접적입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|4D|ldind.i|로드 된 `native int` 주소의 값 `addr` 로 스택에 `native int`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  스택에서 팝 되는 주소 주소에 있는 값이 페치됩니다.  
  
3.  페치된 값으로 스택에 푸시됩니다.  
  
 합니다 `ldind.i` 명령 간접적으로 로드를 `native int` 지정된 된 주소에서 값 (형식의 `native int`, `&`, 또는 *)로 스택에 `native int`합니다.  
  
 모든 합니다 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다. 부동 소수점 값으로 변환 됩니다 `F` 를 계산 스택으로 로드 하는 경우 입력 합니다.  
  
 올바른 형식으로 중간 언어 (MSIL (Microsoft)가 되도록는 `ldind` 지침 포인터의 형식을 사용 하 여 일관 된 방식으로 사용 됩니다.  
  
 처음으로 스택에 푸시됩니다 주소 컴퓨터에 있는 개체의 원래 크기에 맞춰야 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 예방 조치에 대 한 지침을 접두사). 주소를 반환 하는 모든 MSIL 명령의 결과는 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 고 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다. 데이터 형식 1 바이트 보다 큰 경우 바이트 순서는 대상 CPU에 따라 달라 집니다. 모든 플랫폼에서 바이트 순서에 종속 된 코드가 실행 되지 않습니다.  
  
 <xref:System.NullReferenceException> 잘못 된 주소 검색 된 경우에 throw 될 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.i` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 로드 <see langword="int8" /> 으로 <see langword="int32" /> 으로 계산 스택에 간접적입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|46|ldind.i1|로드 된 `int8` 주소의 값 `addr` 로 스택에 `int32`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  스택에서 팝 되는 주소 주소에 있는 값이 페치됩니다.  
  
3.  페치된 값으로 스택에 푸시됩니다. 
  
 합니다 `ldind.i1` 명령 간접적으로 로드를 `int8` 지정된 된 주소에서 값 (형식의 `native int`를 `&`, 또는 *)로 스택에 `int32`합니다.  
  
 모든 합니다 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다. 부동 소수점 값으로 변환 됩니다 `F` 를 계산 스택으로 로드 하는 경우 입력 합니다.  
  
 올바른 형식으로 중간 언어 (MSIL (Microsoft)가 되도록는 `ldind` 지침 포인터의 형식을 사용 하 여 일관 된 방식으로 사용 됩니다.  
  
 처음으로 스택에 푸시됩니다 주소 컴퓨터에 있는 개체의 원래 크기에 맞춰야 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 예방 조치에 대 한 지침을 접두사). 주소를 반환 하는 모든 MSIL 명령의 결과는 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 고 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다. 데이터 형식 1 바이트 보다 큰 경우 바이트 순서는 대상 CPU에 따라 달라 집니다. 모든 플랫폼에서 바이트 순서에 종속 된 코드가 실행 되지 않습니다.  
  
 <xref:System.NullReferenceException> 잘못 된 주소 검색 된 경우에 throw 될 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.i1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 로드 <see langword="int16" /> 으로 <see langword="int32" /> 으로 계산 스택에 간접적입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|48|ldind.i2|로드 된 `int16` 주소의 값 `addr` 로 스택에 `int32`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  스택에서 팝 되는 주소 주소에 있는 값이 페치됩니다.  
  
3.  페치된 값으로 스택에 푸시됩니다.  
  
 합니다 `ldind.i2` 명령 간접적으로 로드를 `int16` 지정된 된 주소에서 값 (형식의 `native int`를 `&`, 또는 *)로 스택에 `int32`합니다.  
  
 모든 합니다 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다. 부동 소수점 값으로 변환 됩니다 `F` 를 계산 스택으로 로드 하는 경우 입력 합니다.  
  
 올바른 형식으로 중간 언어 (MSIL (Microsoft)가 되도록는 `ldind` 지침 포인터의 형식을 사용 하 여 일관 된 방식으로 사용 됩니다.  
  
 처음으로 스택에 푸시됩니다 주소 컴퓨터에 있는 개체의 원래 크기에 맞춰야 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 예방 조치에 대 한 지침을 접두사). 주소를 반환 하는 모든 MSIL 명령의 결과는 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 고 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다. 데이터 형식 1 바이트 보다 큰 경우 바이트 순서는 대상 CPU에 따라 달라 집니다. 모든 플랫폼에서 바이트 순서에 종속 된 코드가 실행 되지 않습니다.  
  
 <xref:System.NullReferenceException> 잘못 된 주소 검색 된 경우에 throw 될 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.i2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 로드 <see langword="int32" /> 으로 <see langword="int32" /> 으로 계산 스택에 간접적입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|4A|ldind.i4|로드 된 `int32` 주소의 값 `addr` 로 스택에 `int32`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  스택에서 팝 되는 주소 주소에 있는 값이 페치됩니다.  
  
3.  페치된 값으로 스택에 푸시됩니다.  
  
 합니다 `ldind.i4` 명령 간접적으로 로드를 `int32` 지정된 된 주소에서 값 (형식의 `native int`를 `&`, 또는 *)로 스택에 `int32`합니다.  
  
 모든 합니다 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다. 부동 소수점 값으로 변환 됩니다 `F` 를 계산 스택으로 로드 하는 경우 입력 합니다.  
  
 올바른 형식으로 중간 언어 (MSIL (Microsoft)가 되도록는 `ldind` 지침 포인터의 형식을 사용 하 여 일관 된 방식으로 사용 됩니다.  
  
 처음으로 스택에 푸시됩니다 주소 컴퓨터에 있는 개체의 원래 크기에 맞춰야 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 예방 조치에 대 한 지침을 접두사). 주소를 반환 하는 모든 MSIL 명령의 결과는 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 고 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다. 데이터 형식 1 바이트 보다 큰 경우 바이트 순서는 대상 CPU에 따라 달라 집니다. 모든 플랫폼에서 바이트 순서에 종속 된 코드가 실행 되지 않습니다.  
  
 <xref:System.NullReferenceException> 잘못 된 주소 검색 된 경우에 throw 될 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.i4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 로드 <see langword="int64" /> 으로 <see langword="int64" /> 으로 계산 스택에 간접적입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|4C|ldind.i8|로드 된 `int64` 주소의 값 `addr` 로 스택에 `int64`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  스택에서 팝 되는 주소 주소에 있는 값이 페치됩니다.  
  
3.  페치된 값으로 스택에 푸시됩니다.  
  
 합니다 `ldind.i8` 명령 간접적으로 로드를 `int64` 지정된 된 주소에서 값 (형식의 `native int`를 `&`, 또는 *)로 스택에 `int64`합니다.  
  
 모든 합니다 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다. 부동 소수점 값으로 변환 됩니다 `F` 를 계산 스택으로 로드 하는 경우 입력 합니다.  
  
 올바른 형식으로 중간 언어 (MSIL (Microsoft)가 되도록는 `ldind` 지침 포인터의 형식을 사용 하 여 일관 된 방식으로 사용 됩니다.  
  
 처음으로 스택에 푸시됩니다 주소 컴퓨터에 있는 개체의 원래 크기에 맞춰야 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 예방 조치에 대 한 지침을 접두사). 주소를 반환 하는 모든 MSIL 명령의 결과는 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 고 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다. 데이터 형식 1 바이트 보다 큰 경우 바이트 순서는 대상 CPU에 따라 달라 집니다. 모든 플랫폼에서 바이트 순서에 종속 된 코드가 실행 되지 않습니다.  
  
 <xref:System.NullReferenceException> 잘못 된 주소 검색 된 경우에 throw 될 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.i8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 로드 <see langword="float32" /> 형식으로 <see langword="F" /> (부동 소수점)으로 계산 스택에 직접.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|4E|ldind.r4|로드 된 `float32` 주소의 값 `addr` 형식으로 스택에 `F`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  스택에서 팝 되는 주소 주소에 있는 값이 페치됩니다.  
  
3.  페치된 값으로 스택에 푸시됩니다.  
  
 합니다 `ldind.r4` 명령 간접적으로 로드를 `float32` 지정된 된 주소에서 값 (형식의 `native int`를 `&`, 또는 *) 형식으로 스택에 `F`합니다.  
  
 모든 합니다 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다. 부동 소수점 값으로 변환 됩니다 `F` 를 계산 스택으로 로드 하는 경우 입력 합니다.  
  
 올바른 형식으로 중간 언어 (MSIL (Microsoft)가 되도록는 `ldind` 지침 포인터의 형식을 사용 하 여 일관 된 방식으로 사용 됩니다.  
  
 처음으로 스택에 푸시됩니다 주소 컴퓨터에 있는 개체의 원래 크기에 맞춰야 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 예방 조치에 대 한 지침을 접두사). 주소를 반환 하는 모든 MSIL 명령의 결과는 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 고 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다. 데이터 형식 1 바이트 보다 큰 경우 바이트 순서는 대상 CPU에 따라 달라 집니다. 모든 플랫폼에서 바이트 순서에 종속 된 코드가 실행 되지 않습니다.  
  
 <xref:System.NullReferenceException> 잘못 된 주소 검색 된 경우에 throw 될 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.r4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 로드 <see langword="float64" /> 형식으로 <see langword="F" /> (부동 소수점)으로 계산 스택에 직접.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|4F|ldind.r8|로드 된 `float64` 주소의 값 `addr` 형식으로 스택에 `F`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  스택에서 팝 되는 주소 주소에 있는 값이 페치됩니다.  
  
3.  페치된 값으로 스택에 푸시됩니다.  
  
 합니다 `ldind.r8` 명령 간접적으로 로드를 `float64` 지정된 된 주소에서 값 (형식의 `native int`, `&`, 또는 *)로 스택에 `float64`합니다.  
  
 모든 합니다 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다. 부동 소수점 값으로 변환 됩니다 `F` 를 계산 스택으로 로드 하는 경우 입력 합니다.  
  
 올바른 형식으로 중간 언어 (MSIL (Microsoft)가 되도록는 `ldind` 지침 포인터의 형식을 사용 하 여 일관 된 방식으로 사용 됩니다.  
  
 처음으로 스택에 푸시됩니다 주소 컴퓨터에 있는 개체의 원래 크기에 맞춰야 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 예방 조치에 대 한 지침을 접두사). 주소를 반환 하는 모든 MSIL 명령의 결과는 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 고 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다. 데이터 형식 1 바이트 보다 큰 경우 바이트 순서는 대상 CPU에 따라 달라 집니다. 모든 플랫폼에서 바이트 순서에 종속 된 코드가 실행 되지 않습니다.  
  
 <xref:System.NullReferenceException> 잘못 된 주소 검색 된 경우에 throw 될 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.r8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>개체 참조 형식으로 로드 <see langword="O" /> (개체 참조)으로 계산 스택에 간접적입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|50|ldind.ref|주소에 있는 개체 참조를 로드 `addr` 형식으로 스택에 `O`|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  스택에서 팝 되는 주소 주소에 있는 개체 참조를 인출 됩니다.  
  
3.  페치된 참조가 스택에 푸시됩니다.  
  
 합니다 `ldind.ref` 명령 간접적으로 로드 한 개체 참조에 지정된 된 주소 (형식의 `native int`를 `&`, 또는 *) 형식으로 스택에 `O`합니다.  
  
 모든 합니다 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다. 부동 소수점 값으로 변환 됩니다 `F` 를 계산 스택으로 로드 하는 경우 입력 합니다.  
  
 올바른 형식으로 중간 언어 (MSIL (Microsoft)가 되도록는 `ldind` 지침 포인터의 형식을 사용 하 여 일관 된 방식으로 사용 됩니다.  
  
 처음으로 스택에 푸시됩니다 주소 컴퓨터에 있는 개체의 원래 크기에 맞춰야 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 예방 조치에 대 한 지침을 접두사). 주소를 반환 하는 모든 MSIL 명령의 결과는 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 고 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다. 데이터 형식 1 바이트 보다 큰 경우 바이트 순서는 대상 CPU에 따라 달라 집니다. 모든 플랫폼에서 바이트 순서에 종속 된 코드가 실행 되지 않습니다.  
  
 <xref:System.NullReferenceException> 잘못 된 주소 검색 된 경우에 throw 될 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.ref` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 로드 <see langword="unsigned int8" /> 으로 <see langword="int32" /> 으로 계산 스택에 간접적입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|47|ldind.u1|로드 된 `unsigned int8` 주소의 값 `addr` 로 스택에 `int32`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  스택에서 팝 되는 주소 주소에 있는 값이 페치됩니다.  
  
3.  페치된 값으로 스택에 푸시됩니다.  
  
 합니다 `ldind.u1` 명령 간접적으로 로드를 `unsigned int8` 지정된 된 주소에서 값 (형식의`native int`를 `&`, 또는 *)로 스택에 `int32`합니다.  
  
 모든 합니다 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다. 부동 소수점 값으로 변환 됩니다 `F` 를 계산 스택으로 로드 하는 경우 입력 합니다.  
  
 올바른 형식으로 중간 언어 (MSIL (Microsoft)가 되도록는 `ldind` 지침 포인터의 형식을 사용 하 여 일관 된 방식으로 사용 됩니다.  
  
 처음으로 스택에 푸시됩니다 주소 컴퓨터에 있는 개체의 원래 크기에 맞춰야 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 예방 조치에 대 한 지침을 접두사). 주소를 반환 하는 모든 MSIL 명령의 결과는 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 고 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다. 데이터 형식 1 바이트 보다 큰 경우 바이트 순서는 대상 CPU에 따라 달라 집니다. 모든 플랫폼에서 바이트 순서에 종속 된 코드가 실행 되지 않습니다.  
  
 <xref:System.NullReferenceException> 잘못 된 주소 검색 된 경우에 throw 될 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.u1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 로드 <see langword="unsigned int16" /> 으로 <see langword="int32" /> 으로 계산 스택에 간접적입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|49|ldind.u2|로드 된 `unsigned int16` 주소의 값 `addr` 로 스택에 `int32`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  스택에서 팝 되는 주소 주소에 있는 값이 페치됩니다.  
  
3.  페치된 값으로 스택에 푸시됩니다.  
  
 합니다 `ldind.u2` 명령 간접적으로 로드를 `unsigned int16` 지정된 된 주소에서 값 (형식의 `native int`를 `&`, 또는 *)로 스택에 `int32`합니다.  
  
 모든 합니다 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다. 부동 소수점 값으로 변환 됩니다 `F` 를 계산 스택으로 로드 하는 경우 입력 합니다.  
  
 올바른 형식으로 중간 언어 (MSIL (Microsoft)가 되도록는 `ldind` 지침 포인터의 형식을 사용 하 여 일관 된 방식으로 사용 됩니다.  
  
 처음으로 스택에 푸시됩니다 주소 컴퓨터에 있는 개체의 원래 크기에 맞춰야 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 예방 조치에 대 한 지침을 접두사). 주소를 반환 하는 모든 MSIL 명령의 결과는 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 고 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다. 데이터 형식 1 바이트 보다 큰 경우 바이트 순서는 대상 CPU에 따라 달라 집니다. 모든 플랫폼에서 바이트 순서에 종속 된 코드가 실행 되지 않습니다.  
  
 <xref:System.NullReferenceException> 잘못 된 주소 검색 된 경우에 throw 될 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.u2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 로드 <see langword="unsigned int32" /> 으로 <see langword="int32" /> 으로 계산 스택에 간접적입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|4B|ldind.u4|로드 된 `unsigned int32` 주소의 값 `addr` 로 스택에 `int32`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  스택에서 팝 되는 주소 주소에 있는 값이 페치됩니다.  
  
3.  페치된 값으로 스택에 푸시됩니다.  
  
 합니다 `ldind.u4` 명령 간접적으로 로드를 `unsigned int32` 지정된 된 주소에서 값 (형식의 `native int`를 `&`, 또는 *)로 스택에 `int32`합니다.  
  
 모든 합니다 `ldind` 지침은 대 한 바로 가기는 <xref:System.Reflection.Emit.OpCodes.Ldobj> 해당 기본 제공 값 클래스를 지정 하는 명령입니다.  
  
 4 바이트 보다 작은 정수 값에 확장 됩니다 `int32` (없습니다 `native int`)를 계산 스택으로 로드 되 면 합니다. 부동 소수점 값으로 변환 됩니다 `F` 를 계산 스택으로 로드 하는 경우 입력 합니다.  
  
 올바른 형식으로 중간 언어 (MSIL (Microsoft)가 되도록는 `ldind` 지침 포인터의 형식을 사용 하 여 일관 된 방식으로 사용 됩니다.  
  
 처음으로 스택에 푸시됩니다 주소 컴퓨터에 있는 개체의 원래 크기에 맞춰야 또는 <xref:System.NullReferenceException> 발생할 수 있습니다 (참조는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 예방 조치에 대 한 지침을 접두사). 주소를 반환 하는 모든 MSIL 명령의 결과는 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloca> 고 <xref:System.Reflection.Emit.OpCodes.Ldarga>) 안전 하 게 정렬 됩니다. 데이터 형식 1 바이트 보다 큰 경우 바이트 순서는 대상 CPU에 따라 달라 집니다. 모든 플랫폼에서 바이트 순서에 종속 된 코드가 실행 되지 않습니다.  
  
 <xref:System.NullReferenceException> 잘못 된 주소 검색 된 경우에 throw 될 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldind.u4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldlen">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldlen;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldlen" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldlen As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldlen;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldlen : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>0부터 시작하는 1차원 배열의 요소 수를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|8E|ldlen|길이 푸시 (형식의 `natural unsigned int`) 스택의 배열입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  배열에 대 한 개체 참조가 스택에 푸시됩니다.  
  
2.  배열 참조는 스택에서 팝 되 고 길이가 계산 됩니다.  
  
3.  길이를 스택으로 푸시됩니다.  
  
 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다. 길이는 `natural unsigned int`합니다.  
  
 <xref:System.NullReferenceException> 배열 참조가 null 참조 인 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldlen` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>특정 인덱스에 있는 지역 변수를 계산 스택으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 0C < `unsigned int16` >|ldloc `index`|인덱스에 있는 지역 변수를 로드 `index` 스택으로 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  지정된 된 인덱스에 있는 지역 변수 값으로 스택에 푸시됩니다.  
  
 `ldloc` 명령 푸시 내용의 로컬 변수 수를 계산 스택으로 전달된 된 인덱스에 있는 로컬 변수가 번호가 0부터. 지역 변수는 메서드는 initialize 플래그가 true 인 경우에 메서드를 입력 하기 전에 0으로 초기화 됩니다. 65,535 가지 (2 ^16-1) 로컬 변수 수 (0-65534)입니다. 인덱스 65,535 구현 하는 2 바이트 정수를 사용 하 여 두 지역의 인덱스를 지정된 된 메서드에 대 한 지역 총 수와 함께 추적 하기 때문에 잘못 되었습니다. 인덱스 65535 되었습니다가 유효한 경우 하는 경우 이러한 메서드의 지역 변수 개수를 추적 하는 광범위 한 정수를 해야 합니다.  
  
 합니다 `ldloc.0`, `ldloc.1`를 `ldloc.2`, 및 `ldloc.3` 지침 제공 처음 네 개의 로컬 변수에 액세스 하는 것에 대 한 인코딩입니다.  
  
 값 형식의 메서드 헤더에 지정 된 로컬 변수의 형식을와 같습니다. 4 바이트 형식으로 확장 됩니다 보다 작은 파티션이 9. 지역 변수를 볼 `int32` 스택에 로드 되 면 합니다. 부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldloc` opcode:  
  
-   ILGenerator.Emit(OpCode, LocalBuilder)  
  
-   ILGenerator.Emit (OpCode, short)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인덱스 0의 지역 변수를 계산 스택으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|06|ldloc.0|인덱스 0의 지역 변수를 계산 스택으로 로드합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  인덱스 0에 있는 지역 변수 값으로 스택에 푸시됩니다.  
  
 `ldloc.0` 에 대 한 효과적인 인코딩이 <xref:System.Reflection.Emit.OpCodes.Ldloc>를 인덱스 0에 있는 지역 변수에 대 한 액세스를 허용 합니다.  
  
 값 형식의 메서드 헤더에 지정 된 로컬 변수의 형식을와 같습니다. 4 바이트 보다 작은 로컬 변수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면 합니다. 부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldloc.0` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인덱스 1의 지역 변수를 계산 스택으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|07|ldloc.1은|인덱스 1의 지역 변수를 계산 스택으로 로드합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  인덱스 1에 있는 지역 변수 값으로 스택에 푸시됩니다.  
  
 `ldloc.1` 에 대 한 효과적인 인코딩이 <xref:System.Reflection.Emit.OpCodes.Ldloc>을 인덱스 1에 있는 지역 변수에 대 한 액세스를 허용 합니다.  
  
 값 형식의 메서드 헤더에 지정 된 로컬 변수의 형식을와 같습니다. 4 바이트 보다 작은 로컬 변수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면 합니다. 부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldloc.1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인덱스 2의 지역 변수를 계산 스택으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|08|ldloc.2|인덱스 2의 지역 변수를 계산 스택으로 로드합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  인덱스 2에 있는 지역 변수 값으로 스택에 푸시됩니다.  
  
 `ldloc.2` 에 대 한 효과적인 인코딩이 <xref:System.Reflection.Emit.OpCodes.Ldloc>를 인덱스 2에 있는 지역 변수에 대 한 액세스를 허용 합니다.  
  
 값 형식의 메서드 헤더에 지정 된 로컬 변수의 형식을와 같습니다. 4 바이트 보다 작은 로컬 변수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면 합니다. 부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldloc.2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인덱스 3의 지역 변수를 계산 스택으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|09|ldloc.3|인덱스 3의 지역 변수를 계산 스택으로 로드합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  인덱스 3에 있는 지역 변수 값으로 스택에 푸시됩니다.  
  
 `ldloc.3` 에 대 한 효과적인 인코딩이 <xref:System.Reflection.Emit.OpCodes.Ldloc>, 인덱스 3에 있는 지역 변수에 대 한 액세스를 허용 합니다.  
  
 값 형식의 메서드 헤더에 지정 된 로컬 변수의 형식을와 같습니다. 4 바이트 보다 작은 로컬 변수 형식으로 확장 됩니다 `int32` 스택에 로드 되 면 합니다. 부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldloc.3` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>특정 인덱스에 있는 지역 변수를 계산 스택에 약식으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|11 < `unsigned int8` >|ldloc.s `index`|인덱스에 있는 지역 변수를 로드 `index` 스택에 약식입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  지정된 된 인덱스에 있는 지역 변수 값으로 스택에 푸시됩니다.  
  
 `ldloc.s` 명령 푸시 내용의 로컬 변수 수를 계산 스택으로 전달된 된 인덱스에 있는 로컬 변수가 번호가 0부터. 지역 변수는 메서드는 initialize 플래그가 true 인 경우 메서드를 입력 하기 전에 0으로 초기화 됩니다. 256 가지 (2 ^8) 사용 가능한 지역 변수 (0-255) 약식으로 보다 더 효율적으로 인코딩 되 `ldloc`합니다.  
  
 값 형식의 메서드 헤더에 지정 된 로컬 변수의 형식을와 같습니다. 4 바이트 형식으로 확장 됩니다 보다 작은 파티션이 9. 지역 변수를 볼 `int32` 스택에 로드 되 면 합니다. 부동 소수점 값은 기본 크기로 확장 됩니다 (형식 `F`).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldloc.s` opcode:  
  
-   ILGenerator.Emit(OpCode, LocalBuilder)  
  
-   ILGenerator.Emit (OpCode, byte)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>특정 인덱스에 있는 지역 변수의 주소를 계산 스택으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE OD &LT; `unsigned int16` >|ldloca `index`|에 있는 로컬 변수의 주소를 로드 `index` 스택으로 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  지정된 된 인덱스에서 지역 변수에 저장 된 주소의 스택에 푸시됩니다.  
  
 `ldloca` 주소를 푸시합니다 로컬 변수 개수를 스택으로 전달된 된 인덱스에 있는 지역 변수는 번호가 매겨진된 0 이상입니다. 스택에 푸시할 값은 이미 올바르게 정렬 용도로 같은 명령 <xref:System.Reflection.Emit.OpCodes.Ldind_I> 고 <xref:System.Reflection.Emit.OpCodes.Stind_I>입니다. 결과 임시 포인터 (형식 `*`).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldloca` opcode:  
  
-   ILGenerator.Emit (OpCode, short)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>특정 인덱스에 있는 지역 변수의 주소를 계산 스택에 약식으로 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|12 < `unsigned int8` >|ldloca.s `index`|에 있는 로컬 변수의 주소를 로드 `index` 계산 스택에 약식입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  지정된 된 인덱스에서 지역 변수에 저장 된 주소의 스택에 푸시됩니다.  
  
 `ldloca.s` 주소를 푸시합니다 로컬 변수 개수를 스택으로 전달된 된 인덱스에 있는 지역 변수는 번호가 매겨진된 0 이상입니다. 스택에 푸시할 값은 이미 올바르게 정렬 용도로 같은 명령 <xref:System.Reflection.Emit.OpCodes.Ldind_I> 고 <xref:System.Reflection.Emit.OpCodes.Stind_I>입니다. 결과 임시 포인터 (형식 `*`).  
  
 `ldloca.s` 명령은 0에서 255 지역 변수 사용에 대 한 효율적인 인코딩을 제공 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldloca.s` opcode:  
  
-   ILGenerator.Emit (OpCode, byte)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldnull">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldnull;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldnull" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldnull As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldnull;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldnull : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Null 참조를 푸시합니다 (형식 <see langword="O" />)를 계산 스택으로 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|14|수|null 참조를 스택으로 푸시|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  Null 개체 참조를 스택으로 푸시됩니다.  
  
 `ldnull` null 참조를 푸시합니다 (형식 `O`) 스택에 합니다. 이 위치를 초기화 데이터로 채워지기 전에 또는 사용 되지 않을 때 사용 됩니다.  
  
 `ldnull` 크기에 관계 없이 null 참조를 제공 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldnull` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>주소가 가리키는 값 형식 개체를 계산 스택 맨 위로 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|71 < `T` >|ldobj `class`|값 형식 복사 인스턴스 `class` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값 형식 개체의 주소를 스택으로 푸시됩니다.  
  
2.  스택에서 팝 되는 주소 및 특정 주소에서 인스턴스는 조회 합니다.  
  
3.  해당 주소에 저장 된 개체의 값으로 스택에 푸시됩니다.  
  
 `ldobj` 명령을 사용 하는 값 형식 매개 변수로 전달 합니다.  
  
 합니다 `ldobj` 가리키는 값을 복사 하는 명령 `addrOfValObj` (형식의 `&`, `*`, 또는 `native int`) 스택의 맨 위로 이동 합니다. 클래스의 크기에 따라 복사 된 바이트 수 (지정 된 대로 `class` 매개 변수). `class` 매개 변수는 값 형식을 나타내는 메타 데이터 토큰입니다.  
  
 작업은 `ldobj` 명령 바로 앞에서 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.  
  
 <xref:System.TypeLoadException> 클래스를 찾을 수 없는 경우 throw 됩니다. 이 상황은 중간 MSIL (Microsoft Language) 명령 런타임이 아닌 네이티브 코드로 변환 될 때 일반적으로 발견 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldobj` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정적 필드의 값을 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|7E < `T` >|ldsfld `field`|값을 푸시 `field` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  특정 필드의 값으로 스택에 푸시됩니다.  
  
 `ldsfld` 푸시합니다 (클래스의 모든 인스턴스 간에 공유 됨) 정적 값 스택에 필드입니다. 반환 형식이 전달 된 메타 데이터 토큰을 사용 하 여 연결 `field`합니다.  
  
 합니다 `ldsfld` 명령 수를 <xref:System.Reflection.Emit.OpCodes.Volatile> 접두사입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldsfld` opcode:  
  
-   ILGenerator.Emit(OpCode, FieldInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정적 필드의 주소를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|7F < `T` >|ldsflda `field`|주소의 푸시 `field` 스택에|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  특정 필드의 주소를 스택으로 푸시됩니다.  
  
 `ldsflda` 푸시합니다 (클래스의 모든 인스턴스 간에 공유 됨) 정적 주소 스택에 필드입니다. 일시적인 포인터 주소를 나타낼 수 있습니다 (유형 `*`) 하는 경우 메타 데이터 토큰 `field` 메모리 관리 되는 형식을 가리킵니다. 그렇지 않은 경우 관리 되지 않는 포인터를 해당 (형식 `native int`). `field` 정적 할당 된 상대 가상 주소 (필드는 오프셋)를 사용 하 여 전역 않을 메모리 관리 되지 합니다.  
  
 합니다 `ldsflda` 명령 수를 <xref:System.Reflection.Emit.OpCodes.Volatile> 접두사입니다.  
  
 <xref:System.MissingFieldException> 필드 메타 데이터에 없는 경우 throw 됩니다. 이 상황은 일반적으로 언어 MSIL (Microsoft Intermediate) 명령이 런타임 시가 아니라 네이티브 코드로 변환 될 때 확인 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldsflda` opcode:  
  
-   ILGenerator.Emit(OpCode, FieldInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldstr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldstr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldstr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldstr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldstr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldstr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>새 개체 참조를 메타데이터에 저장된 문자열 리터럴로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|72 < `T` >|유사 `mdToken`|메타 데이터 문자열 토큰에 대 한 문자열 개체를 푸시 `mdToken`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  문자열에 대 한 개체 참조를 스택으로 푸시됩니다.  
  
 합니다 `ldstr` 명령에서 개체 참조를 푸시하 (형식 `O`) 메타 데이터에 저장 된 특정 문자열 리터럴을 나타내는 새 문자열 개체입니다. `ldstr` 명령은 필요한 메모리 양을 할당 하 고 런타임 시 필요한 문자열 형식 파일에 사용 되는 형식에서 리터럴 문자열을 변환 하는 데 필요한 형식 변환을 수행 합니다.  
  
 공용 언어 인프라 (CLI) 보장 두 `ldstr` 지침은 두 메타 데이터 토큰을 동일한 문자 시퀀스 개체를 반환 동일한 문자열 ("문자열 인터닝"로 알려진 프로세스).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldstr` opcode:  
  
-   ILGenerator.Emit (OpCode 문자열)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldtoken">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldtoken;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldtoken" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldtoken As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldtoken;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldtoken : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>메타데이터 토큰을 런타임 표현으로 변환하여 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|D0 < `T` >|ldtoken `token`|메타 데이터 토큰을 런타임 표현으로 변환합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  전달 된 토큰으로 변환할는 `RuntimeHandle` 스택에 푸시됩니다.  
  
 합니다 `ldtoken` 명령 푸시를 `RuntimeHandle` 지정 된 메타 데이터 토큰에 대 한 합니다. A `RuntimeHandle` 수는 `fieldref/fielddef`, `methodref/methoddef`, 또는 `typeref/typedef`합니다.  
  
 스택에 푸시할 값에 대 한 호출에서 수 `Reflection` 시스템 클래스 라이브러리의 메서드.  
  
 런타임 핸들에 대 한 자세한 내용은 다음 클래스를 참조 하십시오: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, 및 <xref:System.RuntimeMethodHandle>.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldtoken` opcode:  
  
-   ILGenerator.Emit (OpCode, MethodInfo)  
  
-   ILGenerator.Emit(OpCode, FieldInfo)  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldvirtftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldvirtftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldvirtftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldvirtftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldvirtftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldvirtftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>관리 되지 않는 포인터를 푸시 (형식 <see langword="native int" />)를 계산 스택으로 지정된 된 개체와 연결 된 특정 가상 메서드를 구현 하는 네이티브 코드에 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 07 < `T` >|ldvirtftn `method`|개체의 가상 메서드에 대 한 포인터 푸시 `method` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조가 스택에 푸시됩니다.  
  
2.  메서드에 스택 및 진입점의 주소에서 개체 참조를 팝 되 (메타 데이터 토큰이 지정 된 대로 `method`)가 있습니다.  
  
3.  에 대 한 포인터 `method` 스택에 푸시됩니다.  
  
 결과 관리 되지 않는 포인터 스택에 의해 합니다 `ldvirtftn` 명령을 사용 하 여 호출할 수 있습니다를 <xref:System.Reflection.Emit.OpCodes.Calli> 관리 되는 메서드 (또는 비관리 코드에 관리 코드에서 전환 하는 스텁을) 참조 하는 경우 명령입니다.  
  
 관리 되지 않는 포인터 CLR 호출 규칙을 사용 하 여 네이티브 코드를 가리킵니다. 이 메서드에 대 한 포인터를 콜백 루틴으로 관리 되지 않는 네이티브 코드에 전달 되어야 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ldvirtftn` opcode:  
  
-   ILGenerator.Emit (OpCode, MethodInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>조건에 관계없이 특정 대상 명령으로 제어를 전송하여 보호되는 코드 영역을 종료합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|DD < `int32` >|나가기 `target`|보호 된 코드 영역을 종료합니다.|  
  
 이 명령에 지정 된 스택 전환 동작은 없습니다.  
  
 `leave` 명령이 현재 명령 다음의 시작 부분에서 4 바이트 부호 있는 오프셋으로 표시 되는 특정 대상 명령으로를 무조건 제어를 전달 합니다.  
  
 `leave` 비슷하지만 합니다 `br` 명령과 종료 하려면 사용할 수는 `try`, `filter`, 또는 `catch` 일반 분기 지침만 사용할 수 해당 블록 내에서 컨트롤을 전송 하는 반면 블록 있습니다. 합니다 `leave` 명령 계산 스택으로 비워지고 적절 한 주변 되도록 `finally` 블록이 실행 됩니다.  
  
 사용할 수 없습니다는 `leave` 종료 명령을 `finally` 블록입니다. 쉽게 사용 하는 catch 블록 내에서 유효한 예외 처리기에 대 한 코드 생성에는 `leave` 에 있는 연결된 된 명령 제어를 전송 하는 명령 `try` 블록입니다.  
  
 명령에 하나 이상의 접두사 코드가 있으면 컨트롤 수만 전송할 첫 번째 접두사입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `leave` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>조건에 관계없이 대상 명령(약식)으로 제어를 전송하여 보호되는 코드 영역을 종료합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|DE < `int8` >|leave.s `target`|보호 된 영역 코드를 약식을 종료 합니다.|  
  
 이 명령에 지정 된 스택 전환 동작은 없습니다.  
  
 `leave.s` 명령이 현재 명령 다음의 시작 부분에서 1 바이트 부호 있는 오프셋으로 표시 되는 전달 된 대상 명령으로를 무조건 제어를 전달 합니다.  
  
 `leave.s` 비슷하지만 합니다 `br` 명령과 종료 하려면 사용할 수는 `try`, `filter`, 또는 `catch` 일반 분기 지침만 사용할 수 해당 블록 내에서 컨트롤을 전송 하는 반면 블록 있습니다. 합니다 `leave.s` 명령 계산 스택으로 비워지고 적절 한 주변 되도록 `finally` 블록이 실행 됩니다.  
  
 사용할 수 없습니다는 `leave.s` 종료 명령을 `finally` 블록입니다. 쉽게 사용 하는 catch 블록 내에서 유효한 예외 처리기에 대 한 코드 생성에는 `leave.s` 에 있는 연결된 된 명령 제어를 전송 하는 명령 `try` 블록입니다.  
  
 명령에 하나 이상의 접두사 코드가 있으면 컨트롤 수만 전송할 첫 번째 접두사입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `leave.s` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Localloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Localloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Localloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Localloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Localloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Localloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Localloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Localloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>로컬 동적 메모리 풀에서 특정 바이트 수를 할당 하 고 주소 푸시합니다 (임시 포인터, 형식 <see langword="*" />)를 계산 스택으로 처음 할당 된 바이트입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 0F|localloc|로컬 힙에서 공간을 할당 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  할당할 바이트 수를 스택으로 푸시됩니다.  
  
2.  바이트 수를 스택에서 팝 되 크기에 해당 하는 메모리 양은 로컬 힙에서 할당 됩니다.  
  
3.  할당된 된 메모리의 첫 번째 바이트에 대 한 포인터를 스택으로 푸시됩니다.  
  
 합니다 `localloc` 명령 할당 `size` (형식 `natural unsigned int`) 로컬 동적 메모리의 바이트 풀 및 주소를 반환 합니다 (임시 포인터, 형식 `*`) 처음 할당 된 바이트입니다. 메모리 블록에 경우에 메서드 초기화 플래그가 0으로 초기화 됩니다 반환 `true`합니다. 현재 메서드가 실행 하는 경우는 <xref:System.Reflection.Emit.OpCodes.Ret>, 로컬 메모리 풀을 다시 사용할 수 있게 됩니다.  
  
 만들어진 주소는 기본 데이터 형식일 수 저장할 수 있도록 있습니다를 사용 하 여 정렬 되는 `stind` 지침 (같은 <xref:System.Reflection.Emit.OpCodes.Stind_I4>) 사용 하 여 로드 하 고는 `ldind` 지침 (같은 <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).  
  
 합니다 `localloc` 명령 내에서 발생할 수 없습니다는 `filter`를 `catch`, `finally`, 또는 `fault` 블록입니다.  
  
 <xref:System.StackOverflowException> 요청을 서비스에 메모리가 부족 한 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `localloc` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mkrefany">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mkrefany;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mkrefany" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mkrefany As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mkrefany;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mkrefany : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>특정 형식의 인스턴스에 대한 형식화된 참조를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|C6 < `T` >|mkrefany `class`|형식화 된 참조 형식의 푸시 `class` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  에 대 한 포인터 데이터를 스택에 푸시됩니다.  
  
2.  이 포인터 팝 되 고 형식화 된 참조 형식으로 변환할 `class`합니다.  
  
3.  형식화 된 참조를 스택으로 푸시됩니다.  
  
 `mkrefany` 명령에 동적으로 형식화 된 참조를 전달할 수 있습니다. 포인터 형식 이어야 합니다 `&`, `*`, 또는 `native int`, 데이터의 유효한 주소를 보유 하 고 있습니다. `Class` 클래스 토큰 포인터에서 참조 데이터의 형식을 설명 합니다. `Mkrefany` 형식화 된 참조를 포인터 형식과의 불투명 설명자 제공를 스택에 푸시합니다 `class`합니다.  
  
 유효한 형식화 된 참조 시 허용 작업이 매개 변수로 형식화 된 참조를 사용 하는 메서드에 전달 합니다. 호출 수신자가 사용 하 여 수를 <xref:System.Reflection.Emit.OpCodes.Refanytype> 및 <xref:System.Reflection.Emit.OpCodes.Refanyval> 유형 (클래스) 및 주소를 각각 검색 하는 지침입니다.  
  
 <xref:System.TypeLoadException> 이 throw `class` 찾을 수 없습니다. 이 일반적으로 언어 MSIL (Microsoft Intermediate) 명령이 런타임이 아닌 네이티브 코드로 변환 될 때 감지 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `mkrefany` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>두 값을 곱하여 결과를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|5A|mul|스택의 두 값을 곱합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 스택에서 팝 되 고 `value1` 곱하고 `value2`합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 합니다 `mul` 명령 곱합니다 `value1` 여 `value2` 고 결과 스택에 푸시합니다. 정수 연산 오버플로에 상위 비트를 자동으로 자릅니다.  
  
 참조 <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> 곱하기 연산 오버플로 처리에는 정수 관련에 대 한 합니다.  
  
 부동 소수점 형식의 경우 0 * 무한대 = NaN입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `mul` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>두 정수 값을 곱하고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|D8|mul.ovf|오버플로 검사를 사용 하 여 스택의 두 정수 값을 곱합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 스택에서 팝 되 고 `value1` 곱하고 `value2`, 오버플로 검사 합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 합니다 `mul.ovf` 명령 정수를 곱합니다 `value1` 정수로 `value2` 고 결과 스택에 푸시합니다. 결과 결과 형식에 적합 하지 않은 경우 예외가 throw 됩니다.  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `mul.ovf` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>부호 없는 두 정수 값을 곱하고 오버플로를 검사한 후 결과를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|D9|mul.ovf.un|스택 오버플로 검사를 사용 하 여 두 개의 부호 없는 값을 곱합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 스택에서 팝 되 고 `value1` 곱하고 `value2`, 오버플로 검사 합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 합니다 `mul.ovf.un` 명령 부호 없는 정수를 곱합니다 `value1` 부호 없는 정수로 `value2` 고 결과 스택에 푸시합니다. 결과 결과 형식에 적합 하지 않은 경우 예외가 throw 됩니다.  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `mul.ovf.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Neg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Neg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Neg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Neg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Neg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Neg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Neg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Neg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>값을 음수로 만들고 결과를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|65|neg|스택의 맨 위에 있는 현재 값을 부정합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값이 스택에 푸시됩니다.  
  
2.  값이 스택에서 팝 되 고 부정 합니다.  
  
3.  결과를 스택으로 푸시됩니다.  
  
 `neg` 명령 값을 부정 하 고 스택 맨 위에 결과 푸시합니다. 반환 형식은 피연산자 형식과 동일 합니다.  
  
 정수 계열 값의 부정은 표준 2의 보수 부정 합니다. 특히, 부정 (없는 양의 누구) 가장 음수가 가장 음수를 생성 합니다. 이 오버플로 사용을 감지 하 여 <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> 명령 대신 (즉, 0에서 빼기).  
  
 부동 소수점 숫자 부정, 오버플로가 발생 하 고 NaN 부정 NaN을 반환 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `neg` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newarr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newarr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newarr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newarr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newarr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newarr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newarr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newarr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>0부터 시작하고 요소가 특정 형식인 새 1차원 배열에 대한 개체 참조를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|8D < `T` >|newarr `etype`|형식의 요소를 사용 하 여 새 배열을 만듭니다 `etype`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  배열의 요소 수를 스택으로 푸시됩니다.  
  
2.  요소의 수는 스택에서 팝 하 고 배열 생성 됩니다.  
  
3.  새 배열에 개체 참조가 스택에 푸시됩니다.  
  
 합니다 `newarr` 명령에서 개체 참조를 푸시하 (형식 `O`) 형식의 요소가 들어 있는 새 차원 배열에 `etype` (종류를 설명 하는 메타 데이터 토큰). 새 배열의 요소 수로 지정 해야는 `native int`합니다. 유효한 배열 인덱스 범위는 0에서 1을 뺀 요소의 최대 수입니다.  
  
 배열 요소에는 값 형식을 비롯 한 형식일 수 있습니다.  
  
 적절 한 값 형식을 참조 하는 메타 데이터 토큰을 사용 하 여 숫자 차원 배열을 생성 됩니다 (<xref:System.Int32>등). 배열의 요소는 적절 한 형식의 0으로 초기화 됩니다.  
  
 0부터 1 차원 배열과 다차원 배열을 사용 하 여 생성 됩니다 <xref:System.Reflection.Emit.OpCodes.Newobj> 대신 `newarr`합니다. 메서드를 사용 하 여 만들어진 하는 일반적으로 <xref:System.Array> .NET Framework의 클래스입니다.  
  
 <xref:System.OutOfMemoryException> 메모리가 부족 하 여 요청을 충족할 수 없는 경우 throw 됩니다.  
  
 <xref:System.OverflowException> 이 throw `numElems` 0 보다 작습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `newarr` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>새 개체 또는 개체 참조 푸시하여 값 형식의 새 인스턴스를 만듭니다 (형식 <see langword="O" />)를 계산 스택으로 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|73 < `T` >|newobj `ctor`|초기화 되지 않은 개체 또는 값 형식을 할당 하 고 constructor 메서드를 호출 `ctor`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  인수 `arg1` 를 통해 `argn` 순서로 스택에 푸시됩니다.  
  
2.  인수 `argn` 를 통해 `arg1` 스택에서 팝 되며 전달할 `ctor` 개체를 생성 합니다.  
  
3.  새 개체에 대 한 참조를 스택으로 푸시됩니다.  
  
 `newobj` 명령은 새 개체 또는 값 형식의 새 인스턴스를 만듭니다. `Ctor` 메타 데이터 토큰 (을 `methodref` 또는 `methoddef` 생성자로 표시 되어야 합니다) 이름, 클래스 및 생성자 호출의 시그니처를 나타내는입니다.  
  
 합니다 `newobj` 명령에 연결 된 클래스의 새 인스턴스를 할당 `ctor` 모든 필드 (올바른 형식의)는 0 또는 null 참조로 적절 한 새 인스턴스를 초기화 합니다. 그런 다음 생성자를 호출 `ctor` 새로 생성된 된 인스턴스와 함께 지정 된 인수를 사용 합니다. 개체 참조 초기화 된 생성자가 호출 된 후 (형식 `O`) 스택에 푸시됩니다.  
  
 생성자의 관점에서 초기화 되지 않은 개체는 인수 0 및 newobj 전달 되는 다른 인수를 순서 대로 수행 합니다.  
  
 모든 차원 배열을 사용 하 여 만들어집니다 <xref:System.Reflection.Emit.OpCodes.Newarr>이 아니라 `newobj`합니다. 반면에 다른 모든 배열 (자세한 내용은 하나, 또는 않는 차원 하지 0부터 시작)를 사용 하 여 생성 됩니다 `newobj`합니다.  
  
 값 형식은 일반적으로 만들어지지 않습니다를 사용 하 여 `newobj`입니다. 인수 또는 지역 변수를 사용 하 여 일반적으로 할당 된 `newarr` (0부터 시작 하는 1 차원 배열의 경우)을 용 또는 개체의 필드입니다. 할당 된 후 사용 하 여 초기화 된다고 <xref:System.Reflection.Emit.OpCodes.Initobj>합니다. 그러나는 `newobj` 명령에 저장 된 로컬에 인수로 전달 될 수 있는 스택의 값 형식의 새 인스턴스를 만드는 데 사용할 수 있습니다.  
  
 <xref:System.OutOfMemoryException> 메모리가 부족 하 여 요청을 충족할 수 없는 경우 throw 됩니다.  
  
 <xref:System.MissingMethodException> 생성자 메서드에 throw 되 `ctor` 표시 이름을 사용 하 여 클래스 및 서명을 찾을 수 없습니다. 이 일반적으로 언어 MSIL (Microsoft Intermediate) 명령이 런타임이 아닌 네이티브 코드로 변환 될 때 감지 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `newobj` opcode:  
  
-   ILGenerator.Emit (OpCode, ConstructorInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Nop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Nop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Nop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Nop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Nop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Nop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Nop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>opcode가 패치되면 공간을 채웁니다. 처리 주기가 사용되더라도 의미 있는 연산이 수행되지 않습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|00|nop|동작 없이 작업을 수행 합니다.|  
  
 이 명령에 대해 정의 된 스택 전환 동작이 없는 합니다.  
  
 `nop` 연산은 아무 작업도 수행 하지 않습니다. Opcode가 패치 되는 경우 공간에 맞게 것입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `nop` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Not;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Not" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Not" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Not As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Not;" />
      <MemberSignature Language="F#" Value=" staticval mutable Not : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Not" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스택 맨 위에 있는 정수 값의 비트 보수를 계산하고 결과를 같은 형식으로 계산 스택에 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|66|not|값의 비트 보수를 계산 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value` 스택에 푸시됩니다.  
  
2.  `value` 스택 및 해당 비트에서 제공 됩니다 보수를 계산 합니다.  
  
3.  결과를 스택으로 푸시됩니다.  
  
 `not` 명령 정수 값의 비트 보수를 계산 하 고 결과 스택에 푸시합니다. 반환 형식은 피연산자 형식과 동일 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `not` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Or;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Or" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Or" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Or As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Or;" />
      <MemberSignature Language="F#" Value=" staticval mutable Or : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Or" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스택 맨 위에 있는 두 정수 값의 비트 보수를 계산하고 결과를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|60|또는|비트를 계산 하거나 두 정수 값의 정수를 반환 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 팝 되 고 스택 비트 OR를 계산 합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 `or` 명령이 결과를 스택으로 푸시하여 스택의 맨 위에 있는 두 값의 비트 OR를 계산 합니다.  
  
 `Or` 정수 관련 작업이입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `or` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Pop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Pop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Pop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Pop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Pop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 계산 스택 맨 위에 있는 값을 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|26|pop|스택의 맨 위에 있는 값을 팝합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  맨 위에 있는 값은 스택에서 팝 됩니다.  
  
 `pop` 명령 스택에서 맨 위에 있는 요소를 제거 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `pop` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 명령은 예약되어 있습니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 명령은 예약되어 있습니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 명령은 예약되어 있습니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 명령은 예약되어 있습니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 명령은 예약되어 있습니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 명령은 예약되어 있습니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 명령은 예약되어 있습니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefixref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefixref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefixref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefixref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefixref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 명령은 예약되어 있습니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Readonly">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Readonly;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Readonly" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Readonly" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Readonly As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Readonly;" />
      <MemberSignature Language="F#" Value=" staticval mutable Readonly : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Readonly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>후속 배열 주소 연산에서 런타임에 형식 검사를 수행하지 않고 가변성이 제한된 관리되는 포인터를 반환하도록 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 Microsoft 중간 언어 (MSIL) 어셈블리 형식으로 나열합니다.  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 1E|읽기 전용입니다.|후속 배열 주소 연산에서 런타임에 형식 검사를 수행 하 고 가변성이 제한 된 관리 되는 포인터를 반환 하는지 지정 합니다.|  
  
 이 접두사만 바로 앞 나타날 수 있습니다 합니다 `ldelema` 명령 및 특수 호출 `Address` 배열 메서드. 후속 작업에 대 한 효과  
  
1.  런타임 시 형식 검사 작업도 수행 됩니다. 에 대 한 암시적 형식 검사를 일반적으로 있다는 점에 주의 합니다 `ldelema` 및 `stelem` 지침 참조에 사용 될 경우 형식 배열입니다. 되지 않습니다 값 클래스에 대 한 런타임 형식 검사를 따라서 `readonly` 경우 no-op 됩니다.  
  
2.  확인자는 가변성이 제한 된 관리 되는 포인터 주소 연산의 결과 처리합니다.  
  
 포인터를 정의 하는 형식 값을 변경할 수 있는지 여부를 제어 하므로 가변성이 제한 이라고 합니다. 공용 필드 또는 제 위치에서 값을 업데이트 하는 메서드를 노출 하는 값 클래스에 대 한 포인터는 읽기 전용 (따라서 이름 접두사입니다). 특히 기본 형식 (예를 들어, System.Int32)를 나타내는 클래스를 노출 하지 않고 변경자 (mutator) 되므로 읽기 전용입니다.  
  
 이 방식으로 제한 된 관리 되는 포인터는 다음과 같은 방식 으로만 사용할 수 있습니다.  
  
-   로 `object` 에 대 한 매개 변수를 `ldfld`, `ldflda`, `stfld`를 `call`, 또는`constrained callvirt` 지침입니다.  
  
-   으로 `pointer` 매개 변수를 `ldobj` 명령 또는 중 하나에 `ldind` 지침.  
  
-   로 `source` 매개 변수는 `cpobj` 명령입니다.  
  
 기타 허용 되지 않는 비롯 한 모든 작업을 `stobj`, `initobj`, 또는 `mkrefany` 작업 또는 `stind` 지침입니다.  
  
 용도 `readonly` 접두사 제네릭 코드의 배열에서 요소를 인출할 때 형식 검사를 하지 않아도 됩니다. 예를 들어 식 `arr[i].m()`, 여기서 요소는 배열 형식의 `arr` 메서드를 사용 하 여 인터페이스를 제한 된 제네릭 형식인 `m`, 다음 MSIL로 컴파일할 수 있습니다.  
  
```  
ldloc arr  
ldloc i  
readonly.  
ldelema !0    // Loads the pointer to the object.  
…             // Load the arguments to the call.  
constrained. !0  
callvirt m  
```  
  
 없이 합니다 `readonly` 접두사를 `ldelema` 명령에서는 형식 검사를 수행 위치! 0이 참조 형식입니다. 형식 확인이 비효율적 할 뿐만 아니라 의미 체계가 올바르지 않습니다. 에 대 한 형식 검사 `ldelema` 너무 강 되는 정확히 일치 합니다. 배열 형식의 하위 클래스를 보유 하는 경우! 0 위의 코드는 형식 검사를 실패 합니다.  
  
 배열 요소의 주소를 가져올 때 요소 자체 대신에 대 한 핸들을 가지려면 `arr[i]` 모두에 대해 작동 값 형식과 참조 형식을 따라서에 전달할 수는 `constrained callvirt` 명령입니다.  
  
 일반적는 것은 안전 배열 참조 형식의 요소를 보유 하는 경우 런타임 검사를 건너뛰도록 합니다. 안전 하 게 하려면 수정 없이 배열에는이 포인터를 통해 수 있도록 하는 데 필요한 됩니다. 검증 규칙은이 확인 합니다. 있지 엄밀히 말해 값 형식에 대 한 읽기 전용 이지만 값 형식에 대 한 형식 안전 문제가 없습니다 하므로 인스턴스 메서드 호출의 개체로 제한 된 관리 되는 포인터를 전달할 수 있습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `readonly` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanytype">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanytype;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanytype" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanytype As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanytype;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanytype : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식화된 참조에 포함된 형식 토큰을 검색합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 1D|refanytype|형식화 된 참조에 저장 된 형식 토큰을 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값 형식 참조를 스택으로 푸시됩니다.  
  
2.  형식화 된 참조는 스택에서 팝 되 고 해당 형식 토큰이 검색 합니다.  
  
3.  형식 토큰으로 스택에 푸시됩니다.  
  
 형식화 된 참조 형식 토큰 및 주소 개체 인스턴스를 포함합니다.  
  
 `refanytype` 명령 형식화 된 참조에 포함 된 형식 토큰을 검색 합니다. 참조 된 <xref:System.Reflection.Emit.OpCodes.Mkrefany> 명령 만들기에 대 한 정보에 대 한 참조를 입력 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `refanytype` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanyval">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanyval;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanyval" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanyval As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanyval;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanyval : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>주소를 검색 합니다 (형식 <see langword="&amp;" />) 형식화 된 참조에 포함 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|C2 < `T` >|refanyval `type`|형식화 된 참조에 저장 된 주소의 푸시합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값 형식 참조를 스택으로 푸시됩니다.  
  
2.  형식화 된 참조는 스택에서 팝 되 고 해당 주소를 검색 합니다.  
  
3.  주소를 스택으로 푸시됩니다.  
  
 형식화 된 참조 형식 토큰 및 주소 개체 인스턴스를 포함합니다.  
  
 `refanyval` 명령에 포함 된 주소 검색을 형식화 된 참조입니다. 스택에서 제공 하는 형식화 된 참조에 포함 된 형식으로 지정 된 형식과 일치 해야 `type` (메타 데이터 토큰는 `typedef` 또는 `typeref`). 참조 된 <xref:System.Reflection.Emit.OpCodes.Mkrefany> 관련된 내용에 대 한 지침입니다.  
  
 <xref:System.InvalidCastException> 경우 throw 되 `type` 형식 참조를 저장 된 형식에 일치 하지 않습니다 (이 경우 `type` 에 제공 되는 클래스는 <xref:System.Reflection.Emit.OpCodes.Mkrefany> 생성 명령 있다고 형식화 된 참조).  
  
 <xref:System.TypeLoadException> 이 throw `type` 찾을 수 없습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `refanyval` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>두 값을 나누어 나머지를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|5D|rem|나눈 나머지를 푸시 `value1` 여 `value2` 스택에 합니다.|  
  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 팝 되 고 스택 및 나머지 `value1` `div` `value2` 계산 합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 `result` = `value1` `rem` `value2` 다음 조건을 충족 합니다.  
  
 `result` = `value1` - `value2` `×` (`value1` `div` `value2`), 및:  
  
 0 = &#124; `result` &#124; < &#124; `value2` &#124;, 기호 (`result`) 기호 = (`value1`) 여기서 `div` 자르는 나누기 명령 됩니다.  
  
 하는 경우 `value2` 0 또는 `value1` 무한대 결과 NaN이 됩니다. 하는 경우 `value2` 무한대는 결과가 `value1` (에 대 한 부정 `-infinity`).  
  
 정수 계열 작업 throw <xref:System.DivideByZeroException> 경우 `value2` 0입니다.  
  
 Intel 기반 플랫폼에서 확인 하는 <xref:System.OverflowException> 계산할 때 throw 됩니다 (minint `rem` -1).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `rem` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>부호 없는 두 값을 나누어 나머지를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|5E|rem.un|나눈 나머지를 부호 없는 푸시 `value1` 부호 없는 여 `value2` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 팝 되 고 스택 및 나머지 `value1` `div` `value2` 계산 합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 `result` = `value1` `rem.un` `value2` 다음 조건을 충족 합니다.  
  
 `result` = `value1` - `value2` x (`value1` `div.un` `value2`), 및:  
  
 0 = `result`  <  `value2`여기서 `div.un` 부호 없는 나누기 명령입니다.  
  
 합니다 `rem.un` 명령 계산 `result` 를 스택에 푸시합니다. `Rem.un` 부호 없는 정수를 해당 인수를 처리 하는 동안 <xref:System.Reflection.Emit.OpCodes.Rem> 부호 있는 정수로 간주 합니다.  
  
 `Rem.un` 부동 소수점 숫자에 지정 되지 않습니다.  
  
 정수 계열 작업 throw <xref:System.DivideByZeroException> 경우 `value2` 0입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `rem.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ret">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ret;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ret" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ret" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ret As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ret;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ret : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ret" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 메서드에서 제어를 반환하고 반환 값이 있을 경우 호출 수신자의 계산 스택에서 호출자의 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|2A|ret|가능한 값을 반환 하는 메서드의 반환 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  반환 값은 호출 수신자 계산 스택에서 팝 됩니다.  
  
2.  1 단계에서 얻은 반환 값이 호출자에 게 계산 스택으로 푸시됩니다.  
  
 반환 값이 호출 수신자 계산 스택에 없는 경우 값 없음 (호출 수신자 또는 호출자가 메서드에 대 한 없는 스택 전환 동작) 반환 됩니다.  
  
 반환 값 유형의 경우 현재 메서드가 결정 스택의 맨 위 및 현재 메서드를 호출한 메서드의 스택에 복사에서 인출할 값의 형식입니다. 현재 메서드에 대 한 계산 스택으로 반환 될 값을 제외 하 고 비어 있어야 합니다.  
  
 `ret` 밖으로 제어를 전송할 명령을 사용할 수는`try`, `filter`, `catch`, 또는 `finally` 블록. 내에서 `try` 또는 `catch`를 사용 합니다 <xref:System.Reflection.Emit.OpCodes.Leave> 의 대상 사용 하 여 명령을 `ret` 모든 바깥쪽 예외 블록 외부에 있는 명령. 때문에 합니다 `filter` 및 `finally` 올바르게 생성 된 중간 MSIL (Microsoft Language) 명령 내에서 반환 되는 메서드를 수행 하지 않습니다, 블록은 예외 처리 및 해당 코드는 포함 된 메서드가 아닌 논리적으로 `filter` 또는 `finally`합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `ret` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rethrow;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rethrow" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rethrow As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rethrow;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rethrow : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 예외를 다시 throw합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 1A|다시 throw|현재 예외를 다시 throw|  
  
 이 명령에 대 한 스택 전환 동작이 없습니다 정의 됩니다.  
  
 합니다 `rethrow` 명령은 본문 내 에서만 허용 됩니다.는 `catch` 처리기입니다. 이 처리기가 발견 되었습니다는 동일한 예외를 throw 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `rethrow` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shl">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shl;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shl As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shl;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shl : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>결과를 계산 스택으로 푸시하여 지정된 비트 수만큼 정수 값을 0에서 왼쪽으로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|62|shl|정수 (0으로 시프트) 왼쪽으로 이동 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값이 스택에 푸시됩니다.  
  
2.  이동할 비트 양은 스택에 푸시됩니다.  
  
3.  이동할 비트 수와 값을 스택에서 팝 되 고 값을 지정 된 비트 수가 왼쪽 이동 합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 합니다 `shl` 명령 이동 값 (형식 `int32`, `int64` 또는 `native int`) 지정 된 비트 수 만큼 왼쪽으로 합니다. 비트 수가 형식 값인 `int32` 또는 `native int`합니다. 이동할 비트 수 (비트)의 너비는 제공 된 값 보다 크거나 이면 반환 값은 지정 되지 않습니다.  
  
 `Shl` 각 교대조의 가장 낮은 위치에 0 비트를 삽입합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `shl` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>결과를 계산 스택으로 푸시하여 부호 안에 있는 정수 값을 지정된 비트 수만큼 오른쪽으로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|63|shr|정수 (부호 안에서 이동) 오른쪽으로 이동 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값이 스택에 푸시됩니다.  
  
2.  이동할 비트 양은 스택에 푸시됩니다.  
  
3.  이동할 비트 수와 값을 스택에서 팝 되 고 값은 비트의 지정된 된 수 만큼 오른쪽으로 시프트 합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 `shr.un` 명령 이동 값 (형식 `int32`, `int64` 또는 `native int`) 지정 된 비트 수가 오른쪽으로 합니다. 비트 수가 형식 값인 `int32` 또는 `native int`합니다. 이동할 비트 수 (비트)의 너비는 제공 된 값 보다 크거나 이면 반환 값은 지정 되지 않습니다.  
  
 `Shr` 복제의 원래 값의 부호를 보존 하는 각 교대조에에 상위 비트는 `result`합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `shr` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>결과를 계산 스택으로 푸시하여 부호 없는 정수 값을 지정된 비트 수만큼 0에서 오른쪽으로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|64|shr.un|정수 (0에서 이동) 오른쪽으로 이동 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값이 스택에 푸시됩니다.  
  
2.  이동할 비트 양은 스택에 푸시됩니다.  
  
3.  이동할 비트 수와 값을 스택에서 팝 되 고 값은 비트의 지정된 된 수 만큼 오른쪽으로 시프트 합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 `shr.un` 명령 이동 값 (형식 `int32`, `int64` 또는 `native int`) 지정 된 비트 수가 오른쪽으로 합니다. 비트 수가 형식 값인 `int32`, `int64` 또는 `native int`합니다. 이동할 비트 수 (비트)의 너비는 제공 된 값 보다 크거나 이면 반환 값은 지정 되지 않습니다.  
  
 `Shr.un` 각 교대조의 가장 높은 위치에 0 비트를 삽입합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `shr.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sizeof">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sizeof;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sizeof" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sizeof As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sizeof;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sizeof : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>주어진 값 형식의 크기(바이트)를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 1C < `T` >|sizeof `valType`|크기 (바이트)는 값 형식으로 푸시를 `unsigned int32`입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  제공 된 값 형식의 크기 (메가바이트) (`valType`) 스택으로 푸시됩니다.  
  
 `valType` 메타 데이터 토큰 이어야 합니다 (한 `typeref` 또는 `typedef`) 값 형식, 참조 형식 또는 제네릭 형식 매개 변수를 지정 하는 합니다.  
  
 참조 형식에 대 한 반환 되는 크기는 해당 참조 값의 크기 (32 비트 시스템에서 4 바이트)를 참조 값에서 참조 하는 개체에 저장 된 데이터의 크기가 아니라 입력 합니다. 제네릭 형식 매개 변수 형식 또는 메서드 정의 본문에만 사용할 수 있습니다. 해당 형식 또는 메서드를 인스턴스화할 때 제네릭 형식 매개 변수 값 형식 또는 참조 형식으로 바뀝니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `sizeof` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Starg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>지정된 인덱스에 있는 인수 슬롯에 계산 스택 맨 위에 있는 값을 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 0B &LT; `unsigned int16` >|starg `num`|스택의 맨 위에 있는 값을 팝 하 고 인수 슬롯에 저장 `num`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  스택의 맨 위에 있는 현재 값이 팝 되 고 인수 슬롯에 배치 `num`합니다.  
  
 합니다 `starg` 명령은 스택에서 값을 팝 하 고 인수 슬롯에 배치 `num`합니다. 값의 형식을 현재 메서드의 시그니처에 지정 된 인수의 형식과 일치 해야 합니다.  
  
 가변 인수 목록을 사용 하는 절차는 `starg` 명령 고정 인수 서명의 변수 부분에서 초기에 대해서만 사용할 수 있습니다.  
  
 인수는 스택에서 이동할 때 값을 잘립니다 4 바이트 보다 작은 정수 값을 포함 하는 인수는 저장소를 수행 합니다. 부동 소수점 값은 기본 크기에서 반올림 됩니다 (형식 `F`) 크기 인수를 사용 하 여 연결 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `starg` opcode:  
  
-   ILGenerator.Emit (OpCode, short)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Starg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위의 값을 약식인 지정된 인덱스의 인수 슬롯에 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|10 < `unsigned int8` >|starg.s `num`|스택의 맨 위에 있는 값을 팝 하 고 인수 슬롯에 저장 `num`, 약식입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  스택의 맨 위에 있는 현재 값이 팝 되 고 인수 슬롯에 배치 `num`합니다.  
  
 합니다 `starg.s` 명령은 스택에서 값을 팝 하 고 인수 슬롯에 배치 `num`합니다. 값의 형식을 현재 메서드의 시그니처에 지정 된 인수의 형식과 일치 해야 합니다.  
  
 `starg.s` 명령은 제공 처음 256 인수에 사용할 인코딩입니다.  
  
 가변 인수 목록을 사용 하는 절차는 `starg.s` 명령 고정 인수 서명의 변수 부분에서 초기에 대해서만 사용할 수 있습니다.  
  
 인수는 스택에서 이동할 때 값을 잘립니다 4 바이트 보다 작은 정수 값을 포함 하는 인수는 저장소를 수행 합니다. 부동 소수점 값은 기본 크기에서 반올림 됩니다 (형식 `F`) 크기 인수를 사용 하 여 연결 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `starg.s` opcode:  
  
-   ILGenerator.Emit (OpCode, byte)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>지정된 인덱스에 있는 배열 요소를 명령에 지정된 형식을 갖는 계산 스택의 값으로 바꿉니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 Microsoft 중간 언어 (MSIL) 어셈블리 형식으로 나열합니다.  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|A4 < `T` >|stelem `typeTok`|지정된 된 인덱스에 있는 배열 요소 형식의 값을 사용 하 여 대체 `typeTok` 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  배열에 대 한 개체 참조 `array`를 스택으로 푸시됩니다.  
  
2.  인덱스 값을 `index`에 있는 요소를 `array` 스택에 푸시됩니다.  
  
3.  명령에 지정 된 형식의 값이 스택에 푸시됩니다.  
  
4.  스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.  
  
 합니다 `stelem` 명령의 제공 된 인덱스는 1 차원 배열의 요소 값을 바꿉니다 `array` 값입니다. 값이 토큰에 의해 지정 된 형식의 `typeTok` 명령에 있습니다.  
  
 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다. 인덱스 형식이 `native int`합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>주어진된 인덱스에 있는 배열 요소는 <see langword="native int" /> 계산 스택에 있는 값입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|9B|stelem.i|사용 하 여 지정된 된 인덱스에 있는 배열 요소는 `native int` 스택의 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  배열에 대 한 개체 참조 `array`를 스택으로 푸시됩니다.  
  
2.  요소에 유효한 인덱스가 `array` 스택에 푸시됩니다.  
  
3.  값이 스택에 푸시됩니다.  
  
4.  스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.  
  
 `stelem.i` 명령 요소 값을 바꿉니다 `index` 1 차원 배열에서 `array` 사용 하 여는 `native int` 스택에 푸시됩니다.  
  
 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다. 인덱스 형식이 `native int`합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem.i` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>주어진된 인덱스에 있는 배열 요소는 <see langword="int8" /> 계산 스택에 있는 값입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|9C|stelem.i1|사용 하 여 지정된 된 인덱스에 있는 배열 요소는 `int8` 스택의 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  배열에 대 한 개체 참조 `array`를 스택으로 푸시됩니다.  
  
2.  요소에 유효한 인덱스가 `array` 스택에 푸시됩니다.  
  
3.  값이 스택에 푸시됩니다.  
  
4.  스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.  
  
 `stelem.i1` 명령 요소 값을 바꿉니다 `index` 1 차원 배열에서 `array` 사용 하 여는 `int8` 스택에 푸시됩니다.  
  
 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다. 인덱스 형식이 `native int`합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem.i1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>주어진된 인덱스에 있는 배열 요소는 <see langword="int16" /> 계산 스택에 있는 값입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|9D|stelem.i2|사용 하 여 지정된 된 인덱스에 있는 배열 요소는 `int16` 스택의 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  배열에 대 한 개체 참조 `array`를 스택으로 푸시됩니다.  
  
2.  요소에 유효한 인덱스가 `array` 스택에 푸시됩니다.  
  
3.  값이 스택에 푸시됩니다.  
  
4.  스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.  
  
 `stelem.i2` 명령 요소 값을 바꿉니다 `index` 1 차원 배열에서 `array` 사용 하 여는 `int16` 스택에 푸시됩니다.  
  
 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다. 인덱스 형식이 `native int`합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem.i2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>주어진된 인덱스에 있는 배열 요소는 <see langword="int32" /> 계산 스택에 있는 값입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|9E|stelem.i4|사용 하 여 지정된 된 인덱스에 있는 배열 요소는 `int32` 스택의 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  배열에 대 한 개체 참조 `array`를 스택으로 푸시됩니다.  
  
2.  요소에 유효한 인덱스가 `array` 스택에 푸시됩니다.  
  
3.  값이 스택에 푸시됩니다.  
  
4.  스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.  
  
 `stelem.i4` 명령 요소 값을 바꿉니다 `index` 1 차원 배열에서 `array` 사용 하 여는 `int32` 스택에 푸시됩니다.  
  
 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다. 인덱스 형식이 `native int`합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem.i4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>주어진된 인덱스에 있는 배열 요소는 <see langword="int64" /> 계산 스택에 있는 값입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|9F|stelem.i8|사용 하 여 지정된 된 인덱스에 있는 배열 요소는 `int64` 스택의 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  배열에 대 한 개체 참조 `array`를 스택으로 푸시됩니다.  
  
2.  요소에 유효한 인덱스가 `array` 스택에 푸시됩니다.  
  
3.  값이 스택에 푸시됩니다.  
  
4.  스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.  
  
 `stelem.i8` 명령 요소 값을 바꿉니다 `index` 1 차원 배열에서 `array` 사용 하 여는 `int64` 스택에 푸시됩니다.  
  
 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다. 인덱스 형식이 `native int`합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem.i8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>주어진된 인덱스에 있는 배열 요소는 <see langword="float32" /> 계산 스택에 있는 값입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|A0|stelem.r4|사용 하 여 지정된 된 인덱스에 있는 배열 요소는 `float32` 스택의 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  배열에 대 한 개체 참조 `array`를 스택으로 푸시됩니다.  
  
2.  요소에 유효한 인덱스가 `array` 스택에 푸시됩니다.  
  
3.  값이 스택에 푸시됩니다.  
  
4.  스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.  
  
 `stelem.r4` 명령 요소 값을 바꿉니다 `index` 1 차원 배열에서 `array` 사용 하 여는 `float32` 스택에 푸시됩니다.  
  
 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다. 인덱스 형식이 `native int`합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem.r4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>주어진된 인덱스에 있는 배열 요소는 <see langword="float64" /> 계산 스택에 있는 값입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|A1|stelem.r8|사용 하 여 지정된 된 인덱스에 있는 배열 요소는 `float64` 스택의 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  배열에 대 한 개체 참조 `array`를 스택으로 푸시됩니다.  
  
2.  요소에 유효한 인덱스가 `array` 스택에 푸시됩니다.  
  
3.  값이 스택에 푸시됩니다.  
  
4.  스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.  
  
 `stelem.r8` 명령 요소 값을 바꿉니다 `index` 1 차원 배열에서 `array` 사용 하 여는 `float64` 스택에 푸시됩니다.  
  
 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다. 인덱스 형식이 `native int`합니다.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem.r8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>개체 참조 값을 사용 하 여 지정된 된 인덱스에 있는 배열 요소를 바꿉니다 (형식 <see langword="O" />) 계산 스택에 있는 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|A2|stelem.ref|사용 하 여 지정된 된 인덱스에 있는 배열 요소를 `ref` 값 (형식 `O`) 스택에 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  배열에 대 한 개체 참조 `array`를 스택으로 푸시됩니다.  
  
2.  요소에 유효한 인덱스가 `array` 스택에 푸시됩니다.  
  
3.  값이 스택에 푸시됩니다.  
  
4.  스택에서 팝 되 고 값, 인덱스 및 배열 참조 값은 지정된 된 인덱스에 있는 배열 요소에 배치 됩니다.  
  
 `stelem.ref` 명령 1 차원 배열에 지정된 된 인덱스에 요소 값을 바꿉니다 `array` 사용 하 여 합니다 `ref` (형식 `O`) 스택으로 푸시됩니다.  
  
 배열 개체 및 형식의 값으로 표현 되므로 `O`합니다. 인덱스 형식이 `native int`합니다.  
  
 사실은 `stelem.ref` 제공된 된 값의 요소 형식으로 암시적으로 캐스팅 `array` 배열 요소에 값을 할당 하기 전에 합니다. 이 캐스트 확인 된 코드에 대해서도 실패할 수 있습니다. 따라서 합니다 `stelem.ref` 명령에서 throw 할 수 있습니다 <xref:System.InvalidCastException>합니다. 0부터 시작 하지는 1 차원 배열이 나 다차원 배열에는 <xref:System.Array> 클래스를 제공는 <xref:System.Array.SetValue%2A> 메서드.  
  
 <xref:System.NullReferenceException> 이 throw `array` 가 null 참조입니다.  
  
 <xref:System.IndexOutOfRangeException> 이 throw `index` 가 음수 이거나의 범위 보다 더 큰 `array`입니다.  
  
 <xref:System.ArrayTypeMismatchException> 이 throw `array` 필요한 형식의 요소를 포함 하지 않습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stelem.ref` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>개체 참조나 포인터의 필드에 저장된 값을 새 값으로 바꿉니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|7D < `T` >|stfld `field`|값을 바꿉니다 `field` 새 값을 가진 개체입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 또는 포인터를 스택으로 푸시됩니다.  
  
2.  값이 스택에 푸시됩니다.  
  
3.  값 및 개체 참조 포인터가 스택에서 팝 되 고 변수의 `field` 개체에 제공 된 값으로 대체 됩니다.  
  
 합니다 `stfld` 명령 개체의 필드 값을 바꿉니다 (형식 `O`) 또는 포인터를 통해 (형식 `native int`를 `&`, 또는 `*`) 지정된 된 값으로. `Field` 참조 필드 멤버를 참조 하는 메타 데이터 토큰이입니다. 합니다 `stfld` 명령 중 하나 또는 모두의 접두사를 가질 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Unaligned> 고 <xref:System.Reflection.Emit.OpCodes.Volatile>입니다.  
  
 <xref:System.NullReferenceException> 개체 참조 또는 포인터는 null 참조 및 정적 필드가 없는 경우 throw 됩니다.  
  
 <xref:System.MissingFieldException> 이 throw `field` 메타 데이터에 없습니다. 이 값은 Microsoft MSIL (Intermediate Language) 명령으로 런타임 시가 아니라 네이티브 코드로 변환할 때 일반적으로 검사 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stfld` opcode:  
  
-   ILGenerator.Emit(OpCode, FieldInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 저장 <see langword="native int" /> 주어진된 주소에 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|DF|stind.i|저장소는 `native int` 주어진된 주소에는 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  값이 스택에 푸시됩니다.  
  
3.  스택에서 팝 되 고 값 및 주소 값 주소에 저장 됩니다.  
  
 합니다 `stind.i` 명령 저장소를 `native int` 주어진된 주소에 대 한 값 (형식 `native int`, `*`, 또는 `&`).  
  
 형식 안전 하 게 작업 해야 합니다 `stind.i` 명령 포인터의 형식을 사용 하 여 일관 된 방식으로 사용할 수 있습니다. 작업은 `stind.i` 명령 바로 앞에서 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `addr` 명령 접미사 사용 권한에 포함 된 인수 형식에 대 한 자연스럽 게 정렬 되지 않았습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stind.i` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 저장 <see langword="int8" /> 주어진된 주소에 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|52|stind.i1|저장소는 `int8` 주어진된 주소에는 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  값이 스택에 푸시됩니다.  
  
3.  스택에서 팝 되 고 값 및 주소 값 주소에 저장 됩니다.  
  
 합니다 `stind.i1` 명령 저장소는 `int8` 주어진된 주소에 대 한 값 (형식 `native int`, `*`, 또는 `&`).  
  
 형식 안전 하 게 작업 해야 합니다 `stind.i1` 명령 포인터의 형식을 사용 하 여 일관 된 방식으로 사용할 수 있습니다. 작업은 `stind.i1` 명령 바로 앞에서 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `addr` 명령 접미사 사용 권한에 포함 된 인수 형식에 대 한 자연스럽 게 정렬 되지 않았습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stind.i1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 저장 <see langword="int16" /> 주어진된 주소에 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|53|stind.i2|저장소는 `int16` 주어진된 주소에는 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  값이 스택에 푸시됩니다.  
  
3.  스택에서 팝 되 고 값 및 주소 값 주소에 저장 됩니다.  
  
 합니다 `stind.i2` 명령 저장소는 `int16` 주어진된 주소에 대 한 값 (형식 `native int`, `*`, 또는 `&`).  
  
 형식 안전 하 게 작업 해야 합니다 `stind.2i` 명령 포인터의 형식을 사용 하 여 일관 된 방식으로 사용할 수 있습니다. 작업은 `stind.i2` 명령 바로 앞에서 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `addr` 명령 접미사 사용 권한에 포함 된 인수 형식에 대 한 자연스럽 게 정렬 되지 않았습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stind.i2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 저장 <see langword="int32" /> 주어진된 주소에 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|54|stind.i4|저장소는 `int32` 주어진된 주소에는 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  값이 스택에 푸시됩니다.  
  
3.  스택에서 팝 되 고 값 및 주소 값 주소에 저장 됩니다.  
  
 합니다 `stind.i4` 명령 저장소는 `int32` 주어진된 주소에 대 한 값 (형식 `native int`, `*`, 또는 `&`).  
  
 형식 안전 하 게 작업 해야 합니다 `stind.i4` 명령 포인터의 형식을 사용 하 여 일관 된 방식으로 사용할 수 있습니다. 작업은 `stind.i4` 명령 바로 앞에서 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `addr` 명령 접미사 사용 권한에 포함 된 인수 형식에 대 한 자연스럽 게 정렬 되지 않았습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stind.i4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 저장 <see langword="int64" /> 주어진된 주소에 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|55|stind.i8|저장소는 `int64` 주어진된 주소에는 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  값이 스택에 푸시됩니다.  
  
3.  스택에서 팝 되 고 값 및 주소 값 주소에 저장 됩니다.  
  
 합니다 `stind.i8` 명령 저장소는 `int64` 주어진된 주소에 대 한 값 (형식 `native int`, `*`, 또는 `&`).  
  
 형식 안전 하 게 작업 해야 합니다 `stind.i8` 명령 포인터의 형식을 사용 하 여 일관 된 방식으로 사용할 수 있습니다. 작업은 `stind.i` 명령 바로 앞에서 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `addr` 명령 접미사 사용 권한에 포함 된 인수 형식에 대 한 자연스럽 게 정렬 되지 않았습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stind.i8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 저장 <see langword="float32" /> 주어진된 주소에 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|56|stind.r4|저장소는 `float32` 주어진된 주소에는 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  값이 스택에 푸시됩니다.  
  
3.  스택에서 팝 되 고 값 및 주소 값 주소에 저장 됩니다.  
  
 합니다 `stind.r4` 명령 저장소를 `float32` 주어진된 주소에 대 한 값 (형식 `native int`, `*`, 또는 `&`).  
  
 형식 안전 하 게 작업 해야 합니다 `stind.r4` 명령 포인터의 형식을 사용 하 여 일관 된 방식으로 사용할 수 있습니다. 작업은 `stind.r4` 명령 바로 앞에서 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `addr` 명령 접미사 사용 권한에 포함 된 인수 형식에 대 한 자연스럽 게 정렬 되지 않았습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stind.r4` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 값을 저장 <see langword="float64" /> 주어진된 주소에 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|57|stind.r8|저장소는 `float64` 주어진된 주소에는 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  값이 스택에 푸시됩니다.  
  
3.  스택에서 팝 되 고 값 및 주소 값 주소에 저장 됩니다.  
  
 합니다 `stind.r8` 명령 저장소를 `float64` 주어진된 주소에 대 한 값 (형식 `native int`, `*`, 또는 `&`).  
  
 형식 안전 하 게 작업 해야 합니다 `stind.r8` 명령 포인터의 형식을 사용 하 여 일관 된 방식으로 사용할 수 있습니다. 작업은 `stind.r8` 명령 바로 앞에서 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `addr` 명령 접미사 사용 권한에 포함 된 인수 형식에 대 한 자연스럽 게 정렬 되지 않았습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stind.r8` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>제공된 주소에 개체 참조 값을 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|51|stind.ref|개체 참조를 저장 (형식 `O`) 주어진된 주소에는 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  값이 스택에 푸시됩니다.  
  
3.  스택에서 팝 되 고 값 및 주소 값 주소에 저장 됩니다.  
  
 합니다 `stind.ref` 주어진된 주소에 개체 참조 값을 저장 하는 명령 (형식 `native int`를 `*`, 또는 `&`).  
  
 형식 안전 하 게 작업 해야 합니다 `stind.ref` 명령 포인터의 형식을 사용 하 여 일관 된 방식으로 사용할 수 있습니다. 작업은 `stind.ref` 명령 바로 앞에서 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.  
  
 <xref:System.NullReferenceException> 이 throw `addr` 명령 접미사 사용 권한에 포함 된 인수 형식에 대 한 자연스럽 게 정렬 되지 않았습니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stind.ref` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에서 현재 값을 팝하고 지정된 인덱스에 있는 지역 변수 목록에 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 0E &LT; `unsigned int16` >|stloc `index`|스택에서 값을 팝 하 고 로컬 변수에 저장 `index`합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값이 스택에서 팝 되 고 로컬 변수에 배치 `index`합니다.  
  
 `stloc` 명령 계산 스택에서 상위 값을 팝 하 고 로컬 변수 수로 이동 `index`있는 지역 변수는 번호가 매겨진된 0 이상입니다. 값의 형식에는 현재 메서드의 로컬 시그니처에 지정 된 로컬 변수의 형식이 일치 해야 합니다.  
  
 4 바이트 보다 작은 정수 값을 포함 하는 지역에 저장 지역 변수가 스택에서 이동할 때 값을 잘립니다. 부동 소수점 값은 기본 크기에서 반올림 됩니다 (형식 `F`) 크기 인수를 사용 하 여 연결 합니다.  
  
 올바른 언어 MSIL (Microsoft Intermediate) 지침에서는 `index` 유효한 로컬 인덱스 여야 합니다. 에 대 한 합니다 `stloc` 명령, `index` 포괄 0 ~ 65534 범위 내에서에 있어야 합니다 (특히 65535 잘못 되었습니다.). 65535 제외는 pragmatic: 구현 하는 2 바이트 정수를 사용 하 여으로 지역 변수의 인덱스를 지정된 된 메서드에 대 한 지역의 총 수를 추적 하는 합니다. 인덱스 65535 되었습니다가 유효한 경우 하는 경우 이러한 메서드의 지역 변수 개수를 추적 하는 광범위 한 정수를 해야 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stloc` opcode:  
  
-   ILGenerator.Emit(OpCode, LocalBuilder)  
  
-   ILGenerator.Emit (OpCode, short)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에서 현재 값을 팝하여 인덱스 0에 있는 지역 변수 목록에 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|0A|stloc.0|0 지역 변수로 스택에서 값을 팝합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값이 스택에서 팝 되 고 0으로 인덱싱된 로컬 변수에 배치 합니다.  
  
 `stloc.0` 명령 계산 스택에서 상위 값을 팝 하 고 0으로 인덱싱된 로컬 변수로 이동 합니다. 값의 형식에는 현재 메서드의 로컬 시그니처에 지정 된 로컬 변수의 형식이 일치 해야 합니다.  
  
 `stloc.0` 로컬 변수 0에에서 값을 저장 하기 위한 효과적인 인코딩입니다.  
  
 4 바이트 보다 작은 정수 값을 포함 하는 지역에 저장 지역 변수가 스택에서 이동할 때 값을 잘립니다. 부동 소수점 값은 기본 크기에서 반올림 됩니다 (형식 `F`) 크기 인수를 사용 하 여 연결 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stloc.0` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에서 현재 값을 팝하여 인덱스 1에 있는 지역 변수 목록에 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|0B|stloc.1|지역 변수 1로 스택에서 값을 팝합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값이 스택에서 팝 되 고 1로 인덱싱된 로컬 변수에 배치 합니다.  
  
 `stloc.1` 최고 값을 계산 스택에서 명령과 1만 인덱싱된 로컬 변수로 이동 합니다. 값의 형식에는 현재 메서드의 로컬 시그니처에 지정 된 로컬 변수의 형식이 일치 해야 합니다.  
  
 `stloc.1` 로컬 변수 1에에서 값을 저장 하기 위한 효과적인 인코딩입니다.  
  
 4 바이트 보다 작은 정수 값을 포함 하는 지역에 저장 지역 변수가 스택에서 이동할 때 값을 잘립니다. 부동 소수점 값은 기본 크기에서 반올림 됩니다 (형식 `F`) 크기 인수를 사용 하 여 연결 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stloc.1` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에서 현재 값을 팝하여 인덱스 2에 있는 지역 변수 목록에 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|0C|stloc.2|지역 변수 2로 스택에서 값을 팝합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값이 스택에서 팝 되 고 2로 인덱싱된 로컬 변수에 배치 합니다.  
  
 `stloc.2` 지침 최고 값을 계산 스택 및 2에 의해 인덱싱된 로컬 변수로 이동 합니다. 값의 형식에는 현재 메서드의 로컬 시그니처에 지정 된 로컬 변수의 형식이 일치 해야 합니다.  
  
 `stloc.2` 로컬 변수 2에에서 값을 저장 하기 위한 효과적인 인코딩입니다.  
  
 4 바이트 보다 작은 정수 값을 포함 하는 지역에 저장 지역 변수가 스택에서 이동할 때 값을 잘립니다. 부동 소수점 값은 기본 크기에서 반올림 됩니다 (형식 `F`) 크기 인수를 사용 하 여 연결 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stloc.2` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에서 현재 값을 팝하여 인덱스 3에 있는 지역 변수 목록에 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|0D|stloc.3|로컬 변수 3으로 스택에서 값을 팝합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값이 스택에서 팝 되 고 로컬 변수 3으로 인덱싱된에 배치 합니다.  
  
 `stloc.3` 명령 계산 스택에서 상위 값을 팝 하 고 로컬 변수 3으로 인덱싱된로 이동 합니다. 값의 형식에는 현재 메서드의 로컬 시그니처에 지정 된 로컬 변수의 형식이 일치 해야 합니다.  
  
 `stloc.3` 로컬 변수 3에에서 값을 저장 하기 위한 효과적인 인코딩입니다.  
  
 4 바이트 보다 작은 정수 값을 포함 하는 지역에 저장 지역 변수가 스택에서 이동할 때 값을 잘립니다. 부동 소수점 값은 기본 크기에서 반올림 됩니다 (형식 `F`) 크기 인수를 사용 하 여 연결 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stloc.3` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택 맨 위에서 현재 값을 팝 하 고 저장을에 지역 변수 목록 <paramref name="index" /> (약식).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|13 < `unsigned int8` >|stloc.s `index`|스택에서 값을 팝 하 고 로컬 변수에 저장 `index`, 약식입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값이 스택에서 팝 되 고 로컬 변수에 배치 `index`합니다.  
  
 `stloc.s` 명령 계산 스택에서 상위 값을 팝 하 고 로컬 변수 수로 이동 `index`있는 지역 변수는 번호가 매겨진된 0 이상입니다. 값의 형식에는 현재 메서드의 로컬 시그니처에 지정 된 로컬 변수의 형식이 일치 해야 합니다.  
  
 `stloc.s` 명령은 지역 변수의 0부터 255 효율적인 인코딩을 제공 합니다.  
  
 4 바이트 보다 작은 정수 값을 포함 하는 지역에 저장 지역 변수가 스택에서 이동할 때 값을 잘립니다. 부동 소수점 값은 기본 크기에서 반올림 됩니다 (형식 `F`) 크기 인수를 사용 하 여 연결 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stloc.s` opcode:  
  
-   ILGenerator.Emit(OpCode, LocalBuilder)  
  
-   ILGenerator.Emit (OpCode, byte)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>지정된 형식의 값을 계산 스택에서 주어진 메모리 주소로 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|81 < `T` >|stobj `class`|형식의 값을 저장 `class` 메모리로 스택에서 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
2.  형식의 값 형식 개체 `class` 스택에 푸시됩니다.  
  
3.  스택에서 팝 되 고 개체 및 주소 값 형식 개체의 주소에 저장 됩니다.  
  
 합니다 `stobj` 주소로 지정 된 주소를 값 형식 개체를 복사 하는 명령 (형식의 포인터 `native int`를 `*`, 또는 `&`). 복사 된 바이트 수를 나타내는 클래스의 크기에 따라 달라 집니다 `class`값 형식을 나타내는 메타 데이터 토큰입니다.  
  
 작업은 `stobj` 명령 바로 앞에서 변경할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Volatile> 또는 <xref:System.Reflection.Emit.OpCodes.Unaligned> 접두사 명령을 합니다.  
  
 <xref:System.TypeLoadException> 클래스를 찾을 수 없는 경우 throw 됩니다. 이 일반적으로 언어 MSIL (Microsoft Intermediate) 명령이 런타임이 아닌 네이티브 코드로 변환 될 때 감지 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stobj` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정적 필드의 값을 계산 스택에 있는 값으로 바꿉니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|80 < `T` >|stsfld `field`|값을 대체 `field` 제공 된 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값이 스택에 푸시됩니다.  
  
2.  값이 스택에서 팝 되 고 저장 `field`합니다.  
  
 `stsfld` 명령 스택에서 값을 사용 하 여 정적 필드의 값을 바꿉니다. `field` 정적 필드 멤버를 참조 하는 메타 데이터 토큰이입니다.  
  
 합니다 `stsfld` 명령 접두사로 붙을 수 <xref:System.Reflection.Emit.OpCodes.Volatile>입니다.  
  
 <xref:System.MissingFieldException> 필드 메타 데이터에 없는 경우 throw 됩니다. 이 값은 런타임에 하지 언어 MSIL (Microsoft Intermediate) 명령이 네이티브 코드로 변환 될 때 일반적으로 검사 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `stsfld` opcode:  
  
-   ILGenerator.Emit(OpCode, FieldInfo)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>값에서 다른 값을 빼고 결과를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|59|sub|다른 새 숫자 값을 반환 하는 하나의 값을 뺍니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 스택에서 팝 되 고 `value2` 에서 뺍니다 `value1`합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 정수 연산에 오버플로 인식 되지 않습니다 (적절 한 오버플로 처리를 참조 하세요. <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).  
  
 정수 빼기 포화 되지 않고 래핑됩니다. 예를 들어: 8 비트 정수의 위치 `value1` 0으로 설정 되어 및 `value2` 설정할지 1, "래핑된" 결과 255 됩니다.  
  
 부동 소수점 오버플로 반환 `+inf` (`PositiveInfinity`) 또는 `-inf` (`NegativeInfinity`).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `sub` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정수 값에서 다른 정수 값을 빼고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|DA|sub.ovf|오버플로 검사를 사용 하 여 다른 하나의 정수 값을 뺍니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 스택에서 팝 되 고 `value2` 에서 뺍니다 `value1` 오버플로 확인 합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 부호 있는 정수입니다;이 작업을 수행 부동 소수점 값을 사용 하 여 <xref:System.Reflection.Emit.OpCodes.Sub>입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `sub.ovf` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>부호 없는 정수 값에서 다른 부호 없는 정수 값을 빼고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|DB|sub.ovf.un|오버플로 검사를 사용 하 여 다른 하나의 부호 없는 정수 값을 뺍니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 스택에서 팝 되 고 `value2` 에서 뺍니다 `value1` 오버플로 확인 합니다.  
  
4.  결과를 스택으로 푸시됩니다.  
  
 <xref:System.OverflowException> 결과 형식으로 결과 나타낼 수 있는 경우 throw 됩니다.  
  
 부호 있는 정수입니다;이 작업을 수행 부동 소수점 값을 사용 하 여 <xref:System.Reflection.Emit.OpCodes.Sub>입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `sub.ovf.un` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Switch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Switch" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Switch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Switch As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Switch;" />
      <MemberSignature Language="F#" Value=" staticval mutable Switch : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Switch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>점프 테이블을 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|45 < `unsigned int32` > < `int32` >... < `int32` >|스위치 (`N`하십시오 `t1`, `t2`... `tN`)|이동 중 `N` 값입니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  값이 스택에 푸시됩니다.  
  
2.  값은 스택에서 팝 되 고 실행 값은 값으로 인덱싱된 오프셋에 명령으로 전달 됩니다 보다 작은 `N`합니다.  
  
 `switch` 점프 테이블을 구현 하는 명령입니다. 명령 형식은 `unsigned int32` 대상의 수를 나타내는 `N`차례로 `N` 점프 대상을 지정 하는 int32 값입니다. 이러한 대상은 오프셋 (양수 또는 음수)이 다음에 오는 명령의 `switch` 명령입니다.  
  
 합니다 `switch` 스택에서 값을 팝 명령과 비교, 부호 없는 정수로 `N`합니다. 값이 보다 작거나 `N`, 0에서 대상 위치 번호가 매겨집니다 실행 값으로 인덱싱된 대상으로 전송 됩니다 (예를 들어, 값 0은 첫 번째 대상, 값 1은 두 번째 대상 및 등). 값 보다 크거나 같은 경우 `N`, 다음 명령 (이동) 하 여 계속 실행 됩니다.  
  
 첫 번째에만 컨트롤을 전달 수 대상 명령 하나 이상의 접두사 코드가 있으면 이러한 접두사입니다.  
  
 컨트롤의 내부 및 외부로 전송 `try`, `catch`를 `filter`, 및 `finally` 블록을이 명령에서 수행할 수 없습니다. (이러한 전송을 엄격 하 게 제한 되며 명령을 대신 사용 해야 합니다).  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `switch` opcode입니다. `Label[]` 인수가 레이블 32 비트 오프셋을 나타내는의 배열입니다.  
  
-   ILGenerator.Emit(OpCode, Label[])  
  
   
  
## Examples  
 다음 코드 샘플의 사용법을 보여 줍니다.는 `Switch` 배열을 사용 하 여 점프 테이블을 생성 하는 opcode <xref:System.Reflection.Emit.Label>합니다.  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tailcall">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Tailcall;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Tailcall" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Tailcall As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Tailcall;" />
      <MemberSignature Language="F#" Value=" staticval mutable Tailcall : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>실제 호출 명령이 실행되기 전에 현재 메서드의 스택 프레임이 제거되도록 후위 메서드 호출 명령을 수행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 14|마무리 합니다.|현재 메서드를 종료 하는 후속 호출|  
  
 이 명령에 대해 정의 된 스택 전환 동작은 없습니다.  
  
 합니다 `tail` 접두사 명령 바로 앞에 나와야를 <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, 또는 <xref:System.Reflection.Emit.OpCodes.Callvirt> 명령입니다. 호출 명령이 실행 되기 전에 현재 메서드의 스택 프레임을 제거 해야 한다는 것을 나타냅니다. 다음 호출에서 반환 값은 또한 현재 메서드에 의해 반환 되는 값을 호출 하므로 변환할 수 메서드 간 이동을 의미 하기도 합니다.  
  
 스택의 다음 호출에서 전송 되는 인수를 제외 하 고 비어 있어야 합니다. 호출 명령 다음에 ret 이어야 합니다. 따라서 올바른 코드 시퀀스는 `tail. call` (또는 `calli` 또는 `callvirt`). 올바른 언어 MSIL (Microsoft Intermediate) 지침으로 분기할 해야 합니다 `call` 명령, 있지만 후속으로 분기할 수 있습니다 <xref:System.Reflection.Emit.OpCodes.Ret>합니다.  
  
 컨트롤에서에서 전송 될 때 신뢰할 수 없는 코드가 신뢰할 수 있는 코드를 코드 id의 보안을 위협할 수 있기 때문에 현재 프레임을 취소할 수 없습니다. .NET Framework 보안 검사를 따라서 발생할 수 있습니다 합니다 `tail` 무시 되 표준 두면 <xref:System.Reflection.Emit.OpCodes.Call> 명령입니다. 마찬가지로, 하려면 호출이 반환 된 후 발생 하 여 동기화 된 영역 종료, `tail` 동기화 된 상태로 표시 되는 메서드를 종료 하는 데 사용 하는 경우 접두사는 무시 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `tail` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TakesSingleByteArgument">
      <MemberSignature Language="C#" Value="public static bool TakesSingleByteArgument (System.Reflection.Emit.OpCode inst);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TakesSingleByteArgument(valuetype System.Reflection.Emit.OpCode inst) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TakesSingleByteArgument (inst As OpCode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TakesSingleByteArgument(System::Reflection::Emit::OpCode inst);" />
      <MemberSignature Language="F#" Value="static member TakesSingleByteArgument : System.Reflection.Emit.OpCode -&gt; bool" Usage="System.Reflection.Emit.OpCodes.TakesSingleByteArgument inst" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inst" Type="System.Reflection.Emit.OpCode" />
      </Parameters>
      <Docs>
        <param name="inst">Opcode 개체의 인스턴스입니다.</param>
        <summary>제공된 opcode가 단일 바이트 인수를 사용할 경우 true나 false를 반환합니다.</summary>
        <returns><see langword="true" /> 또는 <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 MSIL opcode 최적화 된 코드에 대 한 "약식"을 사용 하기 위해를 찾는 데 사용할 수 있습니다.  
  
 `TakesSingleByteArgument` 반환 `true` 경우는 <xref:System.Reflection.Emit.OpCode> 인스턴스는 다음 경우에는 단일 바이트 인수를 사용 합니다.  
  
-   바이트 크기의 주소로 분기 명령을 수행 하는 opcode (예를 들어 <xref:System.Reflection.Emit.OpCodes.Br_S> 고 <xref:System.Reflection.Emit.OpCodes.Bgt_S>).  
  
-   Opcode는 바이트 값을 스택으로 푸시합니다 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).  
  
-   Opcode 참조 변수 또는 인수 바이트 크기의 "약식 형태"를 통해 (예를 들어 <xref:System.Reflection.Emit.OpCodes.Ldloc_S> 고 <xref:System.Reflection.Emit.OpCodes.Stloc_S>).  
  
 그 외의 경우 `false`를 반환합니다.  
  
 아래 예제에서는 사용을 보여 줍니다 `TakesSingleByteArgument` 에 반영 하는 `OpCodes` 클래스 및 테스트 하 여부를 각 `OpCode` 필드는 단일 바이트 인수를 사용 합니다.  
  
 [!code-cpp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Throw;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Throw" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Throw" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Throw As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Throw;" />
      <MemberSignature Language="F#" Value=" staticval mutable Throw : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Throw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 계산 스택에 있는 예외 개체를 throw합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|7A|throw|예외를 throw합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  (예외)에 대 한 개체 참조를 스택으로 푸시됩니다.  
  
2.  스택 및 throw 된 예외에서 개체 참조를 팝 됩니다.  
  
 합니다 `throw` 예외 개체를 throw 하는 명령 (형식 `O`) 스택에 현재 합니다.  
  
 <xref:System.NullReferenceException> 개체 참조는 null 참조 하는 경우 throw 됩니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `throw` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unaligned">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unaligned;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unaligned" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unaligned As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unaligned;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unaligned : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 계산 스택 맨 위에 있는 주소가 바로 다음에 원래 크기에 정렬 되지 않을 수 있습니다 나타냅니다 <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />를 <see langword="stobj" />, <see langword="initblk" />, 또는 <see langword="cpblk" /> 명령입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 12 < `unsigned int8` >|정렬 되지 않은 합니다. `alignment`|다음 포인터 명령이 정렬 되지 않는 것을 나타냅니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
 `Unaligned` 지정 하는 주소 (관리 되지 않는 포인터를 `native int`) 스택에 맞춰지지 않을 수 바로 다음에 원래 크기에 `ldind`, `stind`, `ldfld`를 `stfld`를 `ldobj`, `stobj`, `initblk`, 또는 `cpblk` 명령입니다. 즉,에 대 한는 <xref:System.Reflection.Emit.OpCodes.Ldind_I4> 명령 주소 맞춤은 4 바이트 경계에 되지 않을 수 있습니다. 에 대 한 `initblk` 고 `cpblk` 기본 맞춤은 아키텍처 종속 (4 바이트에서 cpu가 32 비트, 64 비트 Cpu에서 8 바이트)입니다. 32 비트 단어 크기에 해당 출력을 제한 하지 않는 코드 생성기를 사용 해야 `unaligned` 맞춤은 알 수 없는 경우 컴파일 타임에 8 바이트 수입니다.  
  
 맞춤 값 1, 2 또는 4 및 생성된 된 코드는 주소는 바이트, 더블 바이트 또는 각각 쿼드 바이트 맞춤을 가정해 야 함을 의미 해야 합니다. 일시적이 지를 확인 합니다. 포인터 (형식 `*`)는 항상 정렬 합니다.  
  
 맞춤을 하는 동안는 `cpblk` 명령 (원본에 대해 하나) 및 대상에 대해 하나씩 두 개의 숫자를 위해서는 논리적으로, 낮은 번호가 지정 된 경우 성능에 거의 영향을 주지 않습니다.  
  
 합니다 `unaligned` 고 `volatile` 어떤 순서로 든 접두사를 결합할 수 있습니다. 바로 앞에 나오기를 `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`를 `stobj`, `initblk`, 또는 `cpblk` 명령입니다. 만 <xref:System.Reflection.Emit.OpCodes.Volatile> 에 대 한 접두사를 사용할 수는 <xref:System.Reflection.Emit.OpCodes.Ldsfld> 고 <xref:System.Reflection.Emit.OpCodes.Stsfld> 지침.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `unaligned` opcode:  
  
-   ILGenerator.Emit(OpCode, Label)  
  
-   ILGenerator.Emit (Opcode, Byte)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>boxed로 표시되는 값 형식을 unboxed 형식으로 변환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|79 < `T` >|unbox `valType`|값 형식 데이터를 추출 `obj`, 해당 boxed로 표시 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조가 스택에 푸시됩니다.  
  
2.  개체 참조는 스택에서 팝 이며 unboxed 값 형식 포인터에 대 한 합니다.  
  
3.  값 형식 포인터가 스택에 푸시됩니다.  
  
 값 형식에 별도 두 가지 표현이 공용 언어 인프라 (CLI) 내에 있습니다.  
  
-   다른 개체 내에서 값 형식이 포함 된 경우 사용을 '원시' 형식입니다.  
  
-   값 형식에서 데이터 줄 바꿈되는 위치 (boxed) 개체에 독립적인 엔터티로 존재할 수 있는 'boxed' 폼입니다.  
  
 합니다 `unbox` 명령에는 개체 참조를 변환 합니다 (형식 `O`), 값 형식 포인터를 값 형식으로 표현한 boxed (관리 되는 포인터 형식 `&`), 해당 unboxed 형식인 합니다. 제공 된 값 형식 (`valType`)은 값 형식의 boxed 개체 내에 포함 된 형식을 나타내는 메타 데이터 토큰입니다.  
  
 와 달리 <xref:System.Reflection.Emit.OpCodes.Box>에 개체에서 사용 하는 값 형식 복사본을 만드는 데 필요한 `unbox` 개체에서 값 형식을 복사할 필요가 없습니다. 일반적으로 간단히 이미 boxed 개체 안에 있는 값 형식의 주소를 계산 합니다.  
  
 <xref:System.InvalidCastException> 개체와 boxed 하지 하는 경우 발생 하는 `valType`합니다.  
  
 <xref:System.NullReferenceException> 개체 참조는 null 참조 하는 경우 throw 됩니다.  
  
 <xref:System.TypeLoadException> 값을 입력 하는 경우 발생 하는 `valType` 찾을 수 없습니다. 이 일반적으로 언어 MSIL (Microsoft Intermediate) 명령이 런타임이 아닌 네이티브 코드로 변환 될 때 감지 합니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `unbox` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox_Any">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox_Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox_Any" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox_Any As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox_Any;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox_Any : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Unboxed 형식 명령에 지정 된 형식의 boxed 표현을 변환 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 Microsoft 중간 언어 (MSIL) 어셈블리 형식으로 나열합니다.  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|A5 < `T` >|unbox.any `typeTok`|데이터를 추출할 `obj`, 해당 boxed로 표시 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  개체 참조 `obj` 스택에 푸시됩니다.  
  
2.  개체 참조는 스택에서 팝 하 고 명령에 지정 된 형식과 unboxed.  
  
3.  결과 개체 참조 또는 값 형식으로 스택에 푸시됩니다.  
  
 값 형식의 boxed 형식을 적용할 때를 `unbox.any` 명령에 포함 된 값을 추출 `obj` (형식의 `O`), 같음 되므로 `unbox` 뒤에 `ldobj`합니다.  
  
 참조 형식에 적용 하는 경우는 `unbox.any` 명령 것과 동일한 효과가 `castclass` `typeTok`합니다.  
  
 경우 피연산자 `typeTok` 제네릭 형식 매개 변수를이 런타임 동작은 해당 제네릭 형식 매개 변수에 지정 된 형식에 의해 결정 됩니다.  
  
 <xref:System.InvalidCastException> 이 throw `obj` boxed 형식이 아닙니다.  
  
 <xref:System.NullReferenceException> 이 throw `obj` 가 null 참조입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `unbox.any` opcode:  
  
-   ILGenerator.Emit(OpCode, Type)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volatile">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Volatile;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Volatile" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Volatile" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Volatile As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Volatile;" />
      <MemberSignature Language="F#" Value=" staticval mutable Volatile : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Volatile" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 계산 스택 맨 위에 있는 주소가 휘발성이고, 해당 위치를 읽은 결과가 캐시되지 않으며 이 위치에 여러 번 저장할 수 있음을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|FE 13|휘발성입니다.|후속 포인터가 참조 일시적 임을 나타냅니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  주소를 스택으로 푸시됩니다.  
  
 `volatile`. 주소 volatile 주소를 지정 (즉, 참조 될 수 외부에서 실행의 현재 스레드에서) 및 결과가 읽기 위치를 캐시할 수 없는 또는 해당 위치에 여러 저장소는 표시 하지 않을 수 없습니다. 표시로 액세스 `volatile` single 액세스는 영향을 줍니다 동일한 위치에 대 한 다른 액세스를 개별적으로 표시 되어야 합니다. 원자 단위로 volatile 위치에 대 한 액세스 필요 수행할 수 없습니다.  
  
 합니다 <xref:System.Reflection.Emit.OpCodes.Unaligned> 고 `volatile` 어떤 순서로 든 접두사를 결합할 수 있습니다. 바로 앞에 나오기를 `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`를 `stobj`, `initblk`, 또는 `cpblk` 명령입니다. 만 `volatile` 에 대 한 접두사를 사용할 수는 <xref:System.Reflection.Emit.OpCodes.Ldsfld> 고 <xref:System.Reflection.Emit.OpCodes.Stsfld> 지침.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `volatile` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Xor;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Xor" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Xor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Xor As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Xor;" />
      <MemberSignature Language="F#" Value=" staticval mutable Xor : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Xor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>계산 스택의 맨 위에 있는 두 값의 배타적 비트 OR을 계산하고 결과를 스택으로 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 명령의 16 진수 및 간략 한 참조 요약 정보와 함께 언어 MSIL (Microsoft Intermediate) 어셈블리 형식:  
  
|형식|어셈블리 형식|설명|  
|------------|---------------------|-----------------|  
|61|xor|두 정수 값의 비트 배타적 or를 계산 하 고 정수를 반환 합니다.|  
  
 스택 전환 동작에 순차적으로 다음과 같습니다.  
  
1.  `value1` 스택에 푸시됩니다.  
  
2.  `value2` 스택에 푸시됩니다.  
  
3.  `value2` 및 `value1` 팝 되 고 스택 및 해당 비트 XOR 계산 합니다.  
  
4.  비트 XOR `value2` 고 `value1` 스택에 푸시됩니다.  
  
 `xor` 명령 계산의 두 가지 비트 XOR 스택에 값 및 결과 스택에 남겨 둡니다.  
  
 `Xor` 정수 관련 작업이입니다.  
  
 다음 <xref:System.Reflection.Emit.ILGenerator.Emit%2A> 메서드 오버 로드를 사용할 수는 `xor` opcode:  
  
-   ILGenerator.Emit(OpCode)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>