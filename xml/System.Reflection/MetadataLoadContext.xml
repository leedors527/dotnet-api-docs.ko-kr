<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9aaf43973195666dd08ebb47e5dd2fc7f8617f14" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996693" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>검사 전용으로 로드 하는 Type 개체의 닫힌된 universe를 나타냅니다. 각 MetadataLoadContext 자체 바인딩 규칙을 지정할 수 있고 다른 모든 MetadataLoadContexts 격리 합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

A `MetadataLoadContext` 어셈블리 이름에 바인딩하는 사전으로 역할 <xref:System.Reflection.Assembly> 컨텍스트 또는 로드할 필요가에 이전에 로드 된 인스턴스.

어셈블리는 메타 데이터로 엄격 하 게 처리 됩니다. 대상 플랫폼, CPU 아키텍처 또는 포인터 크기에 따라 어셈블리 로드에 제한은 없습니다. 핵심 어셈블리와 지정 된 어셈블리에 대 한 제한은 없습니다 (**mscorlib**).

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver"><see cref="T:System.Reflection.MetadataAssemblyResolver" /> 인스턴스입니다.</param>
        <param name="coreAssemblyName">와 같은 핵심 형식이 포함 된 어셈블리의 이름을 <see cref="T:System.Object" />입니다. 일반적으로 "mscorlib"가 됩니다.</param>
        <summary>새 <see cref="T:System.Reflection.MetadataLoadContext" /> 개체를 만듭니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>어셈블리와 같은 잘 알려진 형식을 포함 하는 "시스템 어셈블리"를 나타내는 가져오거나 설정 합니다. <see cref="T:System.Int32" />합니다.</summary>
        <value><see cref="T:System.Reflection.Assembly" /> 인스턴스입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

핵심 어셈블리에는 이러한 잘 알려진 형식에 대 한 참조 기본 형식과 달리 어셈블리 참조를 포함 하지 않으므로 다른 어셈블리와 다르게 처리 됩니다.
            
일반적으로이 어셈블리 "mscorlib" 또는 "netstandard" 이라고 합니다. 값이 됩니다 핵심 어셈블리를 찾을 수 없는 경우 `null`, 다른 많은 리플렉션 메서드와 메서드 시그니처를 구문 분석을 포함 하는 예외가 throw 됩니다.
            
`CoreAssembly` 전달 하 여 결정 됩니다 합니다 `coreAssemblyName` 매개 변수가 전달 되는 <xref:System.Reflection.MetadataAssemblyResolver> 생성자는 <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> 메서드.

없으면 `coreAssemblyName` 의 생성자에 인수가 지정 되었습니다 <xref:System.Reflection.MetadataLoadContext>, "mscorlib", "System.Runtime" 및 "netstandard"를 포함 한 기본값으로 사용 됩니다.
            
지정 된 핵심 어셈블리를 직접 핵심 형식이 포함 될 필요가 없습니다. 입력할 수 있는 다른 어셈블리에 전달 합니다. 따라서 mscorlib 외관을 사용 하 여 지정 된 핵심 어셈블리와 완벽 하 게 허용 됩니다.
            
사실은 <xref:System.Runtime> interop 관련 의사 (pseudo) 사용자 지정 특성 유형 중 일부와 같은 제외 하기 때문에 이상적인 core 어셈블리가 아니므로 <xref:System.Runtime.InteropServices.DllImportAttribute>합니다. 그러나 이러한 특성에 관심이 없고 경우 제공할 수 있습니다. CustomAttributes API는 핵심 어셈블리에 필요한 형식을 포함 되어 있지 않으면 해당 특성을 건너뜁니다.
            
핵심 어셈블리에 필요할 때까지 로드 되지 않습니다. 다음 Api는 핵심 어셈블리에 대 한 검색을 트리거하지 않음:

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.FullName?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>
            
핵심 어셈블리를 찾을 수 없거나 핵심 어셈블리에 형식이 없으면이 영향을 하는 경우는 <xref:System.Reflection.MetadataLoadContext> 다음과 같습니다.
            
* 서명이 나 typespecs를 구문 분석 하 고 결과 반환 해야 하는 Api <xref:System.Type> 개체는 예외가 throw 됩니다. 예를 들어:

 * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
 * System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>
 * <xref:System.Type.BaseType?displayProperty-nameWithType>
 * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>
            
* 잘 알려진 core 형식으로 형식을 비교 해야 하는 Api는 예외가 발생 하 고 비교로 평가 됩니다 `false`합니다. 예를 들어 핵심 어셈블리를 지정 하지 않으면 <xref:System.Type.IsPrimitive> 돌아갑니다 `false` 명명 된 형식에도 모든 것에 대 한 <xref:System.Int32>합니다. 마찬가지로 <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> 돌아갑니다 <xref:System.TypeCode.Object> 모든 항목에 대 한 합니다.
            
* 메타 데이터 엔터티를 설정 하는 플래그 노출할 의사 (pseudo) 사용자 지정 특성으로 의사 (pseudo) 사용자 지정 특성 유형, 필요한 생성자 또는 생성자의 매개 변수 형식의 핵심 어셈블리에 없는 경우는 <xref:System.Reflection.MetadataLoadContext> throw 하지 것입니다. 반환 된 특성 목록에서 사용자 지정 의사 (pseudo) 특성을 생략 됩니다.
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>(예: 어셈블리 파일의 파일 잠금) 네이티브 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

삭제 후 것은 안전 하지 않습니다 모든 사용할 수 <xref:System.Reflection.Assembly> 분배 하 여 개체를 <xref:System.Reflection.MetadataLoadContext> 리플렉션 개체 분배 된 또는 <xref:System.Reflection.Assembly> 개체입니다.

개체에서 제공 합니다 <xref:System.Reflection.MetadataLoadContext> throw 하도록는 <xref:System.ObjectDisposedException>, 보장 되지 않습니다.

일부 Api는 고정 또는 이전에 캐시 된 데이터를 반환할 수 있습니다. 개체에 액세스 *하는 동안* 는 <xref:System.Reflection.MetadataLoadContext.Dispose%2A> 메서드 호출 failfast 및 관리 되지 않는 액세스 위반이 발생할 수 있습니다.
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>에 로드 된 어셈블리는 원자성 스냅숏을 반환 된 <see cref="T:System.Reflection.MetadataLoadContext" />합니다.</summary>
        <returns>열거 가능한 컬렉션을 <see xref="T:System.Reflection.Assembly" /> 개체입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><see cref="T:System.Reflection.AssemblyName" /> 인스턴스입니다.</param>
        <summary>어셈블리에 제공 된 어셈블리 이름을 확인합니다. 에 이전 어셈블리이 이름에 바인딩된, 해당 어셈블리 반환 됩니다. 그렇지 않은 경우는 <see cref="T:System.Reflection.MetadataLoadContext" /> 지정 된 호출 <see cref="T:System.Reflection.MetadataAssemblyResolver" />합니다.</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> 인스턴스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
이 메서드의 동작의 동작에 일치 하는지 확인 합니다 <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> 이벤트를 해결 하지만의 동작을 일치 하지 않습니다 <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>합니다. (후자는 해당 해결 이벤트를 발생 하지 않고.)
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">확인자 반환 <see langword="null" />합니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><see cref="T:System.String" /> 어셈블리 이름을 나타내는입니다.</param>
        <summary>어셈블리에 제공 된 어셈블리 이름을 확인합니다. 에 이전 어셈블리이 이름에 바인딩된, 해당 어셈블리 반환 됩니다. 그렇지 않은 경우는 <see cref="T:System.Reflection.MetadataLoadContext" /> 지정 된 호출 <see cref="T:System.Reflection.MetadataAssemblyResolver" />합니다.</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> 인스턴스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
이 메서드의 동작의 동작 일치 <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> 이벤트를 해결 하지만 < xxref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType >의 동작을 일치 하지 않습니다. (후자는 해당 해결 이벤트를 발생 하지 않고.)
]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">확인자 반환 <see langword="null" />합니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath"><see cref="T:System.String" /> 어셈블리에 경로 나타내는입니다.</param>
        <summary>디스크의 특정 경로에서 어셈블리를 로드 하 고 어셈블리 이름에 바인딩하는 <see cref="T:System.Reflection.MetadataLoadContext" />합니다. 동일한 이름의 이전 어셈블리를 로드 이미 되었으면는 <see cref="T:System.Reflection.MetadataLoadContext" />, 이전 어셈블리 반환 됩니다.</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> 인스턴스입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">두 어셈블리 Mvid 동일한 필요는 없습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly"><see cref="T:System.Byte[]" /> 어셈블리를 보유 합니다.</param>
        <summary>바이트 배열에서 어셈블리를 로드 하 고 어셈블리 이름에 바인딩하는 <see cref="T:System.Reflection.MetadataLoadContext" />합니다. 동일한 이름의 이전 어셈블리를 로드 이미 되었으면는 <see cref="T:System.Reflection.MetadataLoadContext" />, 이전 어셈블리 반환 됩니다.</summary>
        <returns><see cref="T:System.Reflection.Assembly" /> 인스턴스입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">두 어셈블리 Mvid 동일한 필요는 없습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly"><see cref="T:System.IO.Stream" /> 어셈블리를 보유 합니다.</param>
        <summary>스트림에서 어셈블리를 로드 하 고 해당 어셈블리 이름에 바인딩하는 <see cref="T:System.Reflection.MetadataLoadContext" />합니다. 동일한 이름의 이전 어셈블리를 로드 이미 되었으면는 <see cref="T:System.Reflection.MetadataLoadContext" />, 이전 어셈블리 반환 됩니다.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <xref:System.Reflection.MetadataLoadContext> 의 소유권을 <xref:System.IO.Stream> 이 메서드로 전달 합니다. 원래 소유자 해야 하지 해당 위치를 변경, 삭제 된 <xref:System.IO.Stream>, 또는 해당 위치를 변경 되지 않은 상태로 유지 됩니다.

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException">두 어셈블리 Mvid 동일한 필요는 없습니다.</exception>
      </Docs>
    </Member>
  </Members>
</Type>