<Type Name="ObfuscateAssemblyAttribute" FullName="System.Reflection.ObfuscateAssemblyAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="afa15f6c584baa5ce93ff39ed3dd20a707c99de5" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58744093" /></Metadata><TypeSignature Language="C#" Value="public sealed class ObfuscateAssemblyAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ObfuscateAssemblyAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.ObfuscateAssemblyAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ObfuscateAssemblyAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObfuscateAssemblyAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ObfuscateAssemblyAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>적합한 어셈블리 형식에 표준 난독 처리 규칙을 사용하도록 난독 처리 도구를 지정합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Reflection.ObfuscationAttribute> 고 <xref:System.Reflection.ObfuscateAssemblyAttribute> 특성 어셈블리 작성자가 난독 처리 도구 외부 최소 구성으로 올바르게 처리할 수 있도록 해당 이진 파일에 주석을 추가 하는 방법을 제공 합니다.  
  
 어셈블리에이 특성을 적용 난독 처리 도구가 어셈블리 형식에 대 한 기본 규칙을 사용 하도록 지시 합니다.  
  
> [!IMPORTANT]
>  이 특성을 적용 해도 어셈블리가 자동으로 난독 처리 하지 않습니다. 특성을 적용 하는 대신 난독 처리 도구에 대 한 구성 파일을 만듭니다. 즉, 난독 처리 하는 도구에 대 한 지침만 제공 합니다. 난독 처리 도구 공급 업체에 따라 여기에 설명 된 의미 체계는 것이 좋습니다. 그러나 특정 도구 Microsoft 권장 사항을 따르는지 하지 않을 수도가 있습니다.  
  
 적용할 수 있습니다 <xref:System.Reflection.ObfuscationAttribute> 및 이러한 형식에서 멤버 형식 어셈블리 내에 있습니다. 가장 안쪽 특성 컨트롤 방식으로 난독 처리 도구가 특정 코드 엔터티를 처리 합니다.  
  
   
  
## Examples  
 다음 코드 예제에 표시 되어 있는 전용 어셈블리를 보여 줍니다는 <xref:System.Reflection.ObfuscateAssemblyAttribute>합니다. 합니다 <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> 속성은 `false`, 난독 처리 도구가 처리 후 특성을 제거 하지 못하도록 합니다.  
  
 사용을 보여 주는 코드 예제 <xref:System.Reflection.ObfuscateAssemblyAttribute> 사용 하 여 <xref:System.Reflection.ObfuscationAttribute>를 참조 합니다 <xref:System.Reflection.ObfuscationAttribute> 클래스입니다.  
  
 [!code-csharp[ObfuscateAssemblyAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscateAssemblyAttribute/cs/source.cs#1)]
 [!code-vb[ObfuscateAssemblyAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscateAssemblyAttribute/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Reflection.ObfuscationAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObfuscateAssemblyAttribute (bool assemblyIsPrivate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool assemblyIsPrivate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyIsPrivate As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObfuscateAssemblyAttribute(bool assemblyIsPrivate);" />
      <MemberSignature Language="F#" Value="new System.Reflection.ObfuscateAssemblyAttribute : bool -&gt; System.Reflection.ObfuscateAssemblyAttribute" Usage="new System.Reflection.ObfuscateAssemblyAttribute assemblyIsPrivate" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyIsPrivate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="assemblyIsPrivate">단일 응용 프로그램의 범위 내에서 어셈블리를 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>난독 처리할 어셈블리가 공용 또는 전용인지 지정하여 <see cref="T:System.Reflection.ObfuscateAssemblyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 응용 프로그램 에서만 사용 되는 라이브러리를 다른 소프트웨어로 사용할 수 없는 경우 어셈블리를 전용으로 표시 합니다. 일반적으로 어셈블리를 전용으로 표시는 응용 프로그램을 난독 처리의 일부로 공용 메서드를 포함 하는 모든 메서드의 이름을 난독 처리할 수 obfuscator을 지시 합니다. 어셈블리 공개 이면 obfuscator public 멤버의 이름을 난독 처리 하지 해야 합니다.  
  
> [!IMPORTANT]
>  이 특성을 적용 해도 어셈블리가 자동으로 난독 처리 하지 않습니다. 특성을 적용 하는 대신 난독 처리 도구에 대 한 구성 파일을 만듭니다. 즉, 난독 처리 하는 도구에 대 한 지침만 제공 합니다. 난독 처리 도구 공급 업체에 따라 여기에 설명 된 의미 체계는 것이 좋습니다. 그러나 특정 도구 Microsoft 권장 사항을 따르는지 하지 않을 수도가 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 개인 어셈블리는 특성 생성자를 지정 하는 방법을 보여 줍니다. 합니다 <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> 속성은 `false`, 난독 처리 도구가 처리 후 특성을 제거 하지 못하도록 합니다.  
  
 [!code-csharp[ObfuscateAssemblyAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscateAssemblyAttribute/cs/source.cs#1)]
 [!code-vb[ObfuscateAssemblyAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscateAssemblyAttribute/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyIsPrivate">
      <MemberSignature Language="C#" Value="public bool AssemblyIsPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AssemblyIsPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyIsPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AssemblyIsPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyIsPrivate : bool" Usage="System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>어셈블리가 전용으로 표시되었는지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져옵니다.</summary>
        <value>어셈블리가 전용으로 표시되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 전용 어셈블리를 다른 소프트웨어로 포함 하는, 응용 프로그램에 의해서만 사용 됩니다.  
  
> [!IMPORTANT]
>  이 특성을 적용 해도 어셈블리가 자동으로 난독 처리 하지 않습니다. 특성을 적용 하는 대신 난독 처리 도구에 대 한 구성 파일을 만듭니다. 즉, 난독 처리 하는 도구에 대 한 지침만 제공 합니다. 난독 처리 도구 공급 업체에 따라 여기에 설명 된 의미 체계는 것이 좋습니다. 그러나 특정 도구 Microsoft 권장 사항을 따르는지 하지 않을 수도가 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 특성 생성자를 설정 하는 방법을 보여 줍니다. 합니다 <xref:System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate%2A> 속성을 `true`어셈블리로 개인 인지를 지정 합니다. 합니다 <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> 속성은 `false`, 난독 처리 도구가 처리 후 특성을 제거 하지 못하도록 합니다.  
  
 [!code-csharp[ObfuscateAssemblyAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscateAssemblyAttribute/cs/source.cs#1)]
 [!code-vb[ObfuscateAssemblyAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscateAssemblyAttribute/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StripAfterObfuscation">
      <MemberSignature Language="C#" Value="public bool StripAfterObfuscation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StripAfterObfuscation" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation" />
      <MemberSignature Language="VB.NET" Value="Public Property StripAfterObfuscation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StripAfterObfuscation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StripAfterObfuscation : bool with get, set" Usage="System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>난독 처리 도구가 처리 후 특성을 제거하는지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져오거나 설정합니다.</summary>
        <value>난독 처리 도구가 처리 후 특성을 제거하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 속성의 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라이브러리는 다른 응용 프로그램의 일부분으로 포함 되며 해당 응용 프로그램의 일부분으로 난독 처리 하는 경우 특성을 제거 해야 합니다.  
  
 난독 처리 도구를 제거 하도록 지정 하는 <xref:System.Reflection.ObfuscateAssemblyAttribute> 의 인스턴스는 영향을 주지 않습니다 <xref:System.Reflection.ObfuscationAttribute> 형식 및 멤버는 어셈블리 내에 이미 적용 된 합니다.  
  
> [!IMPORTANT]
>  이 특성을 적용 해도 어셈블리가 자동으로 난독 처리 하지 않습니다. 특성을 적용 하는 대신 난독 처리 도구에 대 한 구성 파일을 만듭니다. 즉, 난독 처리 하는 도구에 대 한 지침만 제공 합니다. 난독 처리 도구 공급 업체에 따라 여기에 설명 된 의미 체계는 것이 좋습니다. 그러나 특정 도구 Microsoft 권장 사항을 따르는지 하지 않을 수도가 있습니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Reflection.ObfuscateAssemblyAttribute> 특성과 <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> 속성이로 설정 `false`, 난독 처리 도구가 처리 후 특성을 제거 하지 못하도록 합니다.  
  
 [!code-csharp[ObfuscateAssemblyAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscateAssemblyAttribute/cs/source.cs#1)]
 [!code-vb[ObfuscateAssemblyAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscateAssemblyAttribute/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>