<Type Name="ObfuscationAttribute" FullName="System.Reflection.ObfuscationAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4b8f520d1c8b898cd4a2989c7bbaf58903679850" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58719554" /></Metadata><TypeSignature Language="C#" Value="public sealed class ObfuscationAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ObfuscationAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.ObfuscationAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ObfuscationAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObfuscationAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ObfuscationAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Parameter | System.AttributeTargets.Delegate, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.1;netstandard-2.0;netcore-2.2;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Delegate | System.AttributeTargets.Enum | System.AttributeTargets.Event | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Method | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.Struct, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>어셈블리, 형식 또는 멤버에 대해 지정된 동작을 수행하도록 난독 처리 도구를 설정합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Reflection.ObfuscationAttribute> 및 <xref:System.Reflection.ObfuscateAssemblyAttribute> 어셈블리 작성자 난독 처리 도구 외부 최소 구성으로 올바르게 처리할 수 있도록 해당 이진 파일에 주석을 추가할 특성을 사용 합니다.  
  
> [!IMPORTANT]
>  이 특성을 적용 해도 적용 하는 코드 엔터티 자동으로 난독 처리 하지 않습니다. 특성을 적용 하는 대신 난독 처리 도구에 대 한 구성 파일을 만듭니다. 즉, 난독 처리 하는 도구에 대 한 지침만 제공 합니다. 난독 처리 도구 공급 업체에 따라 여기에 설명 된 의미 체계는 것이 좋습니다. 그러나 특정 도구 Microsoft 권장 사항을 따르는지 하지 않을 수도가 있습니다.  
  
 합니다 <xref:System.Reflection.ObfuscationAttribute> 특성에는 문자열 <xref:System.Reflection.ObfuscationAttribute.Feature%2A> 속성입니다. 난독 처리 도구 구현 된 기능, 가급적 이면 사용자가 액세스할 수 있는 XML 구성 파일을 사용 하 여이 속성의 문자열 값을 매핑할 수 있습니다. <xref:System.Reflection.ObfuscationAttribute> 두 기능 문자열, "default" 및 "all"을 정의 합니다. "Default" 문자열을 도구의 기본 난독 처리 기능에 매핑해야 합니다. 및 "all" 도구에서 지원 되는 난독 처리 기능의 전체 집합에 매핑해야 합니다. 기본값은 <xref:System.Reflection.ObfuscationAttribute.Feature%2A> 속성은 "all", 난독 처리 기능의 전체 집합을 사용 하도록 설정 합니다.  
  
 어셈블리에 적용 될 때 <xref:System.Reflection.ObfuscationAttribute> 어셈블리 내의 모든 형식에도 적용 됩니다. 경우는 <xref:System.Reflection.ObfuscationAttribute.ApplyToMembers%2A> 속성을 지정 하지 않으면 또는로 설정 된 `true`를 특성으로 모든 멤버에 적용 됩니다. <xref:System.Reflection.ObfuscationAttribute> 공용 또는 개인 어셈블리 인지 여부를 지정 하지 않습니다. 공용 또는 개인 어셈블리 인지 여부를 지정 하려면 사용 된 <xref:System.Reflection.ObfuscateAssemblyAttribute> 특성입니다.  
  
 클래스와 구조체를 적용할 때 <xref:System.Reflection.ObfuscationAttribute> 경우 형식의 모든 멤버에도 적용 합니다 <xref:System.Reflection.ObfuscationAttribute.ApplyToMembers%2A> 속성을 지정 하지 않으면 또는로 설정 된 `true`합니다.  
  
 메서드, 매개 변수, 필드 및 속성에 적용 되 면 특성이 적용 되는 엔터티를만 영향을 줍니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 두 가지 유형이 공용 어셈블리를 보여 줍니다. `Type1` 고 `Type2`입니다. 사용 하 여 난독 처리에 대 한 어셈블리가 표시 됩니다는 <xref:System.Reflection.ObfuscateAssemblyAttribute>, 공용으로 처리 될 어셈블리를 표시 하는입니다 (즉, 합니다 <xref:System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate%2A> 속성은 `false`).  
  
 `Type1` 어셈블리를 난독 처리에 대 한 표시 되어 있으므로 난독 처리에 대 한 표시 됩니다. 멤버 중 하나 `Type1` 난독 처리 대상에서 제외 됩니다 사용 하는 <xref:System.Reflection.ObfuscationAttribute.Exclude%2A> 속성입니다.  
  
 `Type2` 난독 처리 대상에서 제외 됩니다 때문에 해당 멤버 난독 처리에 대 한 표시는 <xref:System.Reflection.ObfuscationAttribute.ApplyToMembers%2A> 속성은 `false`합니다.  
  
 합니다 `MethodA` 메서드의 `Type2` 값으로 표시 됩니다 `"default"` 에 대 한는 <xref:System.Reflection.ObfuscationAttribute.Feature%2A> 속성입니다. 지정 하는 데 필요한 것 `false` 에 대 한는 <xref:System.Reflection.ObfuscationAttribute.Exclude%2A> 속성을 제외 하지 않으려면 `MethodA` 를 난독 처리 대상에서 때문에 대 한 기본을 <xref:System.Reflection.ObfuscationAttribute.Exclude%2A> 속성은 `true`합니다. 난독 처리 도구가 해야 특성을 제거 하지 난독 처리 후 때문에 합니다 <xref:System.Reflection.ObfuscationAttribute.StripAfterObfuscation%2A> 속성은 `false`합니다. 이 코드 예제에 있는 모든 특성 때문에 난독 처리 후 제거 됩니다는 <xref:System.Reflection.ObfuscationAttribute.StripAfterObfuscation%2A> 속성을 지정 하지 않으면 이며 따라서 기본값 `true`합니다.  
  
 코드 예제에서는 특성 및 해당 속성을 표시 하는 코드를 포함 합니다. 사용 하 여 DLL을 열어 특성을 검사할 수도 있습니다는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)합니다.  
  
 [!code-csharp[ObfuscationAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscationAttribute/cs/source.cs#1)]
 [!code-vb[ObfuscationAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscationAttribute/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Reflection.ObfuscateAssemblyAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObfuscationAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.ObfuscationAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObfuscationAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Reflection.ObfuscationAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Reflection.ObfuscationAttribute> 공용 또는 개인 어셈블리 인지 여부를 지정 하지 않습니다. 어셈블리 공개 또는 개인 인지를 지정 하려면 사용 하 여 <xref:System.Reflection.ObfuscateAssemblyAttribute>입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyToMembers">
      <MemberSignature Language="C#" Value="public bool ApplyToMembers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ApplyToMembers" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ObfuscationAttribute.ApplyToMembers" />
      <MemberSignature Language="VB.NET" Value="Public Property ApplyToMembers As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ApplyToMembers { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ApplyToMembers : bool with get, set" Usage="System.Reflection.ObfuscationAttribute.ApplyToMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>형식의 특성이 형식의 모든 멤버에 적용되는지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져오거나 설정합니다.</summary>
        <value>특성이 형식의 모든 멤버에 적용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 값은 특성 멤버에 적용 될 때 무시 됩니다.  
  
> [!IMPORTANT]
>  이 특성을 적용 해도 적용 하는 코드 엔터티 자동으로 난독 처리 하지 않습니다. 특성을 적용 하는 대신 난독 처리 도구에 대 한 구성 파일을 만듭니다. 즉, 난독 처리 하는 도구에 대 한 지침만 제공 합니다. 난독 처리 도구 공급 업체에 따라 여기에 설명 된 의미 체계는 것이 좋습니다. 그러나 특정 도구 Microsoft 권장 사항을 따르는지 하지 않을 수도가 있습니다.  
  
   
  
## Examples  
 다음 코드 예제를 난독 처리 대상에서 제외 되는 형식을 보여 줍니다. 하지만 제외 되므로 해당 멤버에 적용 되지 않습니다 합니다 <xref:System.Reflection.ObfuscationAttribute.ApplyToMembers%2A> 속성은 `false`합니다.  
  
 이 코드는 컴파일 및 실행할 수 있는 더 큰 예제의 일부입니다. <xref:System.Reflection.ObfuscationAttribute> 클래스를 참조하세요.  
  
 [!code-csharp[ObfuscationAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscationAttribute/cs/source.cs#2)]
 [!code-vb[ObfuscationAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscationAttribute/vb/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exclude">
      <MemberSignature Language="C#" Value="public bool Exclude { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Exclude" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ObfuscationAttribute.Exclude" />
      <MemberSignature Language="VB.NET" Value="Public Property Exclude As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Exclude { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Exclude : bool with get, set" Usage="System.Reflection.ObfuscationAttribute.Exclude" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>난독 처리 도구가 형식 또는 멤버를 난독 처리 대상에서 제외할지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져오거나 설정합니다.</summary>
        <value>이 특성이 적용된 형식 또는 멤버를 난독 처리 대상에서 제외하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  이 특성을 적용 해도 적용 하는 코드 엔터티 자동으로 난독 처리 하지 않습니다. 특성을 적용 하는 대신 난독 처리 도구에 대 한 구성 파일을 만듭니다. 즉, 난독 처리 하는 도구에 대 한 지침만 제공 합니다. 난독 처리 도구 공급 업체에 따라 여기에 설명 된 의미 체계는 것이 좋습니다. 그러나 특정 도구 Microsoft 권장 사항을 따르는지 하지 않을 수도가 있습니다.  
  
   
  
## Examples  
 다음 코드 예제를 난독 처리 대상에서 제외 하도록 표시 되는 형식을 보여 줍니다. 지정할 필요는 없습니다는 <xref:System.Reflection.ObfuscationAttribute.Exclude%2A> 속성을 기본값으로 하기 때문에 `true`, 명시적으로 지정 하지만 사용자 의도 선택을 취소 합니다. 합니다 <xref:System.Reflection.ObfuscationAttribute.ApplyToMembers%2A> 로 설정 된 `false`를 난독 처리 대상에서 제외 된 클래스의 멤버에 적용 되지 않습니다. 즉, 클래스 이름이 표시 되지만 멤버는 난독 처리 합니다.  
  
 합니다 `MethodA` 메서드는 값으로 표시 됩니다 `"default"` 에 대 한는 <xref:System.Reflection.ObfuscationAttribute.Feature%2A> 속성입니다. 지정 하는 데 필요한 것 `false` 에 대 한는 <xref:System.Reflection.ObfuscationAttribute.Exclude%2A> 제외 하 고 방지 하기 위해 속성 `MethodA` 난독 처리 대상에서 때문에 대 한 기본을 <xref:System.Reflection.ObfuscationAttribute.Exclude%2A> 속성이 `true`. 합니다 <xref:System.Reflection.ObfuscationAttribute.StripAfterObfuscation%2A> 속성은 `false` 난독 처리 도구가 난독 처리 후 특성을 제거 하지는 않도록 합니다.  
  
 이 코드는 컴파일 및 실행할 수 있는 더 큰 예제의 일부입니다. <xref:System.Reflection.ObfuscationAttribute> 클래스를 참조하세요.  
  
 [!code-csharp[ObfuscationAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscationAttribute/cs/source.cs#4)]
 [!code-vb[ObfuscationAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscationAttribute/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Feature">
      <MemberSignature Language="C#" Value="public string Feature { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Feature" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ObfuscationAttribute.Feature" />
      <MemberSignature Language="VB.NET" Value="Public Property Feature As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Feature { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Feature : string with get, set" Usage="System.Reflection.ObfuscationAttribute.Feature" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>난독 처리 도구에서 인식한 후 처리 옵션을 지정하는 문자열 값을 가져오거나 설정합니다.</summary>
        <value>난독 처리 도구에서 인식한 후 처리 옵션을 지정하는 문자열 값입니다. 기본값은 "all"입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 되는 난독 처리 도구에서이 속성에 전달 된 값에 따라 달라 집니다. 해당 공급 업체 난독 처리 도구는 최소 지원의 "기본" 및 "모든" 것이 좋습니다. 공급 업체 함께 이러한 설정을 XML 구성 파일을 사용 하 여 사용할 수 있습니다.  
  
> [!IMPORTANT]
>  이 특성을 적용 해도 적용 하는 코드 엔터티 자동으로 난독 처리 하지 않습니다. 특성을 적용 하는 대신 난독 처리 도구에 대 한 구성 파일을 만듭니다. 즉, 난독 처리 하는 도구에 대 한 지침만 제공 합니다. 난독 처리 도구 공급 업체에 따라 여기에 설명 된 의미 체계는 것이 좋습니다. 그러나 특정 도구 Microsoft 권장 사항을 따르는지 하지 않을 수도가 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 값을 사용 하 여 표시 된 메서드를 보여 줍니다 `"default"` 에 대 한는 <xref:System.Reflection.ObfuscationAttribute.Feature%2A> 속성입니다. 지정 하는 데 필요한 것 `false` 에 대 한는 <xref:System.Reflection.ObfuscationAttribute.Exclude%2A> 속성을 제외 하지 않으려면 `MethodA` 를 난독 처리 대상에서 때문에 대 한 기본을 <xref:System.Reflection.ObfuscationAttribute.Exclude%2A> 속성은 `true`합니다. 합니다 <xref:System.Reflection.ObfuscationAttribute.StripAfterObfuscation%2A> 속성은 `false` 난독 처리 도구가 난독 처리 후 특성을 제거 하지는 않도록 합니다.  
  
 이 코드는 컴파일 및 실행할 수 있는 더 큰 예제의 일부입니다. <xref:System.Reflection.ObfuscationAttribute> 클래스를 참조하세요.  
  
 [!code-csharp[ObfuscationAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscationAttribute/cs/source.cs#3)]
 [!code-vb[ObfuscationAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscationAttribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StripAfterObfuscation">
      <MemberSignature Language="C#" Value="public bool StripAfterObfuscation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StripAfterObfuscation" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.ObfuscationAttribute.StripAfterObfuscation" />
      <MemberSignature Language="VB.NET" Value="Public Property StripAfterObfuscation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StripAfterObfuscation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StripAfterObfuscation : bool with get, set" Usage="System.Reflection.ObfuscationAttribute.StripAfterObfuscation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>난독 처리 도구가 처리 후 이 특성을 제거하는지 여부를 나타내는 <see cref="T:System.Boolean" /> 값을 가져오거나 설정합니다.</summary>
        <value>난독 처리 도구가 처리 후 특성을 제거하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라이브러리는 다른 응용 프로그램의 일부분으로 포함 되며 해당 응용 프로그램의 일부분으로 난독 처리 하는 경우 특성을 제거 해야 합니다.  
  
> [!IMPORTANT]
>  이 특성을 적용 해도 적용 하는 코드 엔터티 자동으로 난독 처리 하지 않습니다. 특성을 적용 하는 대신 난독 처리 도구에 대 한 구성 파일을 만듭니다. 즉, 난독 처리 하는 도구에 대 한 지침만 제공 합니다. 난독 처리 도구 공급 업체에 따라 여기에 설명 된 의미 체계는 것이 좋습니다. 그러나 특정 도구 Microsoft 권장 사항을 따르는지 하지 않을 수도가 있습니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Reflection.ObfuscationAttribute> 해당 <xref:System.Reflection.ObfuscationAttribute.StripAfterObfuscation%2A> 속성은 `false` 난독 처리 도구가 난독 처리 후 특성을 제거 하지는 않도록 합니다. 지정 하는 데 필요한 것 `false` 에 대 한는 <xref:System.Reflection.ObfuscationAttribute.Exclude%2A> 속성을 제외 하지 않으려면 `MethodA` 를 난독 처리 대상에서 때문에 대 한 기본을 <xref:System.Reflection.ObfuscationAttribute.Exclude%2A> 속성은 `true`합니다.  
  
 이 코드는 컴파일 및 실행할 수 있는 더 큰 예제의 일부입니다. <xref:System.Reflection.ObfuscationAttribute> 클래스를 참조하세요.  
  
 [!code-csharp[ObfuscationAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR/ObfuscationAttribute/cs/source.cs#4)]
 [!code-vb[ObfuscationAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObfuscationAttribute/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>