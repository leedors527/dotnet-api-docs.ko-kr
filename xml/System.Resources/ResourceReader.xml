<Type Name="ResourceReader" FullName="System.Resources.ResourceReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cf7a67a258c9d35bde90d29a438b1379dff2335c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58691134" /></Metadata><TypeSignature Language="C#" Value="public sealed class ResourceReader : System.Resources.IResourceReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable, class System.Resources.IResourceReader" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IResourceReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : System::Resources::IResourceReader" />
  <TypeSignature Language="F#" Value="type ResourceReader = class&#xA;    interface IResourceReader&#xA;    interface IEnumerable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Reader</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Resources.IResourceReader</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>순차 리소스 이름/값 쌍을 읽어 이진 리소스 파일(.resources)의 리소스를 열거합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-class-note](~/includes/untrusted-data-class-note.md)]

 합니다 <xref:System.Resources.ResourceReader> 클래스의 표준 구현을 제공 합니다 <xref:System.Resources.IResourceReader> 인터페이스입니다. <xref:System.Resources.ResourceReader> 인스턴스 독립 실행형.resources 파일 또는 어셈블리에 포함 된.resources 파일을 나타냅니다. .Resources 파일의 리소스를 열거 하 고 해당 이름/값 쌍을 검색 하는 것이 됩니다. 다른는 <xref:System.Resources.ResourceManager> 어셈블리에 포함 된.resources 파일에서 지정 된 명명 된 리소스를 검색 하는 데 사용 되는 클래스입니다. 합니다 <xref:System.Resources.ResourceManager> 클래스 반면 이름이 사전에 알고 있는 리소스를 검색 하는 데 사용 됩니다는 <xref:System.Resources.ResourceReader> 클래스는 해당 번호 또는 정확한 이름을 알 수 없는 컴파일 타임에 리소스를 검색할 때 유용 합니다. 예를 들어, 응용 프로그램 섹션과 섹션으로, 여기서는 섹션의 항목 섹션에 알 수 없는 사전에 항목으로 구성 되어 있는 구성 정보를 저장할 리소스 파일을 사용할 수 있습니다. 리소스 일반적으로 다음 이름을 지정할 수 있습니다 (같은 `Section1`, `Section1Item1`를 `Section1Item2`등) 사용 하 여 검색을 <xref:System.Resources.ResourceReader> 개체입니다.  
  
> [!IMPORTANT]
>  이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다. 형식을 사용 하 여 마쳤으면 직접 또는 간접적으로의 삭제 해야 있습니다. 직접 형식의 dispose 호출 해당 <xref:System.IDisposable.Dispose%2A> 의 메서드를 `try` / `catch` 블록입니다. 삭제 하지 직접, 언어 구문 같은 사용 `using` (C#에서) 또는 `Using` (Visual Basic에서는). 자세한 내용은 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하세요.를 <xref:System.IDisposable> 인터페이스 항목입니다.  
  
 사용에 대 한 자세한 내용은 <xref:System.Resources.ResourceReader> 클래스에 다음 섹션을 참조 하세요.  
  
-   [ResourceReader 개체 인스턴스화](#instantiate)  
  
-   [ResourceReader 개체의 리소스를 열거합니다.](#enumerate)  
  
    -   [IDictionaryEnumerator 속성을 사용 하 여 리소스를 검색 합니다.](#idictionaryenumerator)  
  
    -   [GetResourceData 사용 하 여 이름으로 리소스를 검색합니다.](#getresourcedata)  
  
<a name="instantiate"></a>   
## <a name="instantiating-a-resourcereader-object"></a>ResourceReader 개체 인스턴스화  
 .Resources 파일은 텍스트 파일 또는 XML.resx 파일에서 컴파일된 이진 파일 [Resgen.exe (리소스 파일 생성기)](~/docs/framework/tools/resgen-exe-resource-file-generator.md)합니다. <xref:System.Resources.ResourceReader> 개체는 독립 실행형.resources 파일 또는 어셈블리에 포함 된.resources 파일에 나타낼 수 있습니다.  
  
 인스턴스화하는 <xref:System.Resources.ResourceReader> 독립 실행형.resources 파일에서 읽기에 사용 하는 개체는 <xref:System.Resources.ResourceReader> 입력된 스트림을 또는.resources 파일 이름이 포함 된 문자열을 사용 하 여 클래스 생성자입니다. 다음 예제에서는 두 가지 방법을 보여 줍니다. 첫 번째 인스턴스화하는 <xref:System.Resources.ResourceReader> 라는 이름의.resources 파일을 나타내는 개체 `Resources1.resources` 해당 파일 이름을 사용 하 여 합니다. 두 번째 인스턴스화하는 <xref:System.Resources.ResourceReader> 라는 이름의.resources 파일을 나타내는 개체 `Resources2.resources` 파일에서 생성 하는 스트림을 사용 하 여 합니다.  
  
 [!code-csharp[System.Resources.ResourceReader.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#2)]  
  
 만들려면를 <xref:System.Resources.ResourceReader> 포함 된.resources 파일을 나타내는 개체를 인스턴스화하는 <xref:System.Reflection.Assembly> .resources 파일은 포함 된 어셈블리의 개체입니다. 해당 <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> 메서드가 반환 되는 <xref:System.IO.Stream> 에 전달 될 수 있는 개체는 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> 생성자. 다음 예제에서는 <xref:System.Resources.ResourceReader> 포함 된.resources 파일을 나타내는 개체입니다.  
  
 [!code-csharp[System.Resources.ResourceReader.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#3)]
 [!code-vb[System.Resources.ResourceReader.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#3)]  
  
<a name="enumerate"></a>   
## <a name="enumerating-a-resourcereader-objects-resources"></a>ResourceReader 개체의 리소스를 열거합니다.  
 .Resources 파일의 리소스를 열거 하려면 호출을 <xref:System.Resources.ResourceReader.GetEnumerator%2A> 반환 하는 메서드는 <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> 개체입니다. 호출 된 `IDictionaryEnumerator.MoveNext` 다음 리소스를 이동 하는 메서드. 메서드는 반환 `false` .resources 파일에 있는 모든 리소스 열거 된 경우.  
  
> [!NOTE]
>  하지만 <xref:System.Resources.ResourceReader> 구현 클래스를 <xref:System.Collections.IEnumerable> 인터페이스 및 <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> 메서드를를 <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> 메서드를 제공 하지 않습니다는 <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> 구현 합니다. 대신 합니다 <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> 메서드가 반환 되는 <xref:System.Collections.IDictionaryEnumerator> 각 리소스의 이름/값 쌍에 대 한 액세스를 제공 하는 인터페이스 개체입니다.  
  
 두 가지 방법으로 컬렉션의 개별 리소스를 검색할 수 있습니다.  
  
-   각 리소스를 반복할 수는 <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> 수집 및 사용 <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> 리소스 이름 및 값을 검색할 속성입니다. 모든 리소스는 동일한 형식 또는 각 리소스의 데이터 형식을 알고 있는 경우이 방법을 권장 합니다.  
  
-   반복 하는 경우 각 리소스의 이름을 검색할 수 있습니다 합니다 <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> 컬렉션과 호출을 <xref:System.Resources.ResourceReader.GetResourceData%2A> 리소스의 데이터를 검색 하는 방법입니다. 각 리소스의 데이터 형식을 확인할 수 없는 경우 또는 이전 접근 방식 예외를 throw 하는 경우이 방법을 권장 합니다.  
  
<a name="idictionaryenumerator"></a>   
### <a name="retrieving-resources-by-using-idictionaryenumerator-properties"></a>IDictionaryEnumerator 속성을 사용 하 여 리소스를 검색 합니다.  
 .Resources 파일의 리소스를 열거 하는 첫 번째 방법은 직접 각 리소스의 이름/값 쌍을 검색을 포함 합니다. 호출한 후는 `IDictionaryEnumerator.MoveNext` 에서 리소스를 검색할 수는 컬렉션의 각 리소스를 이동 하는 방법의 이름을 합니다 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> 속성 및 리소스 데이터를를 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 속성입니다.  
  
 다음 예제에서는 이름과.resources 파일의 각 리소스의 값을 사용 하 여 검색 하는 방법을 보여 줍니다 합니다 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> 고 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 속성입니다. 예제를 실행 하려면 문자열 리소스를 정의 하는 ApplicationResources.txt 라는 텍스트 파일을 만듭니다.  
  
```  
Title="Contact Information"  
Label1="First Name:"  
Label2="Middle Name:"  
Label3="Last Name:"  
Label4="SSN:"  
Label5="Street Address:"  
Label6="City:"  
Label7="State:"  
Label8="Zip Code:"  
Label9="Home Phone:"  
Label10="Business Phone:"  
Label11="Mobile Phone:"  
Label12="Other Phone:"  
Label13="Fax:"  
Label14="Email Address:"  
Label15="Alternate Email Address:"  
```  
  
 다음 명령을 사용 하 여 ApplicationResources.resources 이라는 이진 파일에 텍스트 리소스 파일을 변환할 수 있습니다.  
  
 **resgen ApplicationResources.txt**  
  
 다음 예제에서는 다음 사용 하 여는 <xref:System.Resources.ResourceReader> 독립 실행형 이진.resources 파일의 각 리소스를 열거 하 고 해당 키 이름 및 해당 값을 표시 하는 클래스입니다.  
  
 [!code-csharp[System.Resources.ResourceReader.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/class1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/class1.vb#1)]  
  
 리소스 데이터를 검색 하려는 시도 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 속성에는 다음 예외를 throw 할 수 있습니다.  
  
-   <xref:System.FormatException> 데이터 형식에 없는 경우.  
  
-   <xref:System.IO.FileNotFoundException> 데이터 속해 있는 형식을 포함 하는 어셈블리를 찾을 수 없는 경우.  
  
-   <xref:System.TypeLoadException> 찾을 수 없는 경우 데이터 속해 있는 형식일 수 없습니다.  
  
 .Resources 파일을 수정 된 경우 수동으로 형식이 정의 되어 있는 어셈블리는 응용 프로그램과 함께 포함 되어 있지 않습니다 또는 실수로 삭제 된 경우 또는 이전에 실행 되는 이전 버전 어셈블리가 있는 경우 이러한 예외가 throw 되는 일반적으로 형식입니다. 이러한 예외 중 하나가 throw 되 면 각 리소스를 열거 하 고 호출 하 여 리소스를 검색할 수 있습니다는 <xref:System.Resources.ResourceReader.GetResourceData%2A> 메서드를 다음 섹션에 표시 합니다. 이 접근 방식을 제공 하는 입력 데이터에 대 한 일부 정보는 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 속성을 반환 하려고 합니다.  
  
<a name="getresourcedata"></a>   
### <a name="retrieving-resources-by-name-with-getresourcedata"></a>GetResourceData 사용 하 여 이름별 리소스 검색  
 .Resources 파일의 리소스를 열거 하는 두 번째 방법은 작업도 호출 하 여 파일의 리소스를 탐색 합니다 `IDictionaryEnumerator.MoveNext` 메서드. 각 리소스의 리소스의 이름을 검색 합니다 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> 속성에 전달 되는 <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> 리소스의 데이터를 검색 하는 방법입니다. 바이트 배열로 반환 됩니다는 `resourceData` 인수입니다.  
  
 이 방법은 리소스 이름 및 값을 검색할 때 보다 더 불편 합니다 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> 및 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 속성인 리소스 값을 구성 하는 실제 바이트 수를 반환 하기 때문에 합니다. 그러나 리소스를 검색 하려고 예외를 throw 하는 경우는 <xref:System.Resources.ResourceReader.GetResourceData%2A> 메서드 쉽게 리소스의 데이터 형식에 대 한 정보를 제공 하 여 예외의 원인을 파악할 수 있습니다. 리소스의 데이터 형식을 나타내는 문자열에 대 한 자세한 내용은 참조 하세요. <xref:System.Resources.ResourceReader.GetResourceData%2A>합니다.  
  
 다음 예제에서는 리소스를 검색 하 고 throw 된 예외를 처리 하도록이 접근 방식을 사용 하는 방법을 보여 줍니다. 4 개의 문자열, 하나의 부울, 정수, 하나의 비트맵 및 하나는 사용자 지정을 포함 하는 이진.resources 파일을 프로그래밍 방식으로 만들면 `DateTimeTZI` 개체입니다. 예제를 실행 하려면 다음을 수행 합니다.  
  
1.  포함 된 Library.dll 이라는 어셈블리를 만들는 `DateTimeTZI` 구조입니다. 다음은 어셈블리에 대 한 소스 코드입니다.  
  
     [!code-csharp[System.Resources.ResourceReader.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/library.cs#4)]
     [!code-vb[System.Resources.ResourceReader.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/library.vb#4)]  
  
     다음 명령을 사용 하 여 C# 소스 코드를 컴파일하십시오.  
  
    ```  
    csc /t:library library.cs  
    ```  
  
     또는 다음 명령을 사용 하 여 Visual Basic에서 컴파일할 수 있습니다.  
  
    ```  
    vbc library.vb /t:library  
    ```  
  
2.  컴파일 및 ContactResources.resources 라는.resources 파일을 만드는 다음 소스 코드를 실행 합니다.  
  
     [!code-csharp[System.Resources.ResourceReader.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/createresourceex1.cs#5)]
     [!code-vb[System.Resources.ResourceReader.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/createresourceex1.vb#5)]  
  
     소스 코드 파일에는 CreateResources.cs 라고 합니다. 다음 명령을 사용 하 여 C#에서 컴파일할 수 있습니다.  
  
    ```  
    csc CreateResources.cs /r:library.dll  
    ```  
  
     또는 다음 명령을 사용 하 여 Visual Basic에서 컴파일할 수 있습니다.  
  
    ```  
    vbc CreateResources.vb /r:library.dll  
    ```  
  
3.  컴파일 및 ContactResources.resources 파일의 리소스를 열거 하려면 다음 코드를 실행 합니다.  
  
     [!code-csharp[System.Resources.ResourceReader.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/readresourceex1.cs#6)]
     [!code-vb[System.Resources.ResourceReader.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/readresourceex1.vb#6)]  
  
     소스 코드를 수정한 후 (예를 들어 시켜 의도적으로 <xref:System.FormatException> 끝에 `try` 블록) 하거나 런타임에 사용할 수 있도록 Library.dll 어셈블리의 이름을 바꾸는 등 보려면이 예제를 실행할 수 있습니다 하는 방법에 대 한 호출 <xref:System.Resources.ResourceReader.GetResourceData%2A> 검색 하거나 일부 리소스 정보를 다시 만들 수 있습니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Resources.ResourceReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)].
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : System.IO.Stream -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">리소스 읽기에 사용되는 입력 스트림입니다.</param>
        <summary>지정된 스트림에 대한 <see cref="T:System.Resources.ResourceReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> 생성자를 인스턴스화하는 <xref:System.Resources.ResourceReader> 어셈블리에 포함 된 리소스 또는 독립 실행형.resources 파일에서.resources 파일을 검색 하는 개체입니다. 독립 실행형.resources 파일에서 읽기를 인스턴스화하는 <xref:System.IO.Stream> 개체를 전달 하는 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> 생성자입니다. 포함 된.resources 파일에서 읽기를 호출 합니다 <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> pass 반환 되 고.resources 파일 이름의 대/소문자 구분 메서드 <xref:System.IO.Stream> 개체는 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> 생성자입니다.  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
## Examples  
 이 섹션의 예제에서는 명명 된.txt 파일 `PatientForm.txt` 응용 프로그램에서 사용 하는 리소스를 정의 합니다.  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 다음 명령을 실행 하 여.txt 파일을.resources 파일로 컴파일할 수 있습니다.  
  
 **resgen PatientForm.txt**  
  
 다음 예제에서는 리소스 파일을 응용 프로그램의 실행 코드를 포함 하는 어셈블리에 포함 되어 있음을 가정 합니다. 라는 리소스 파일을 얻어냅니다 `PatientForm.resources` 현재 실행 중인 어셈블리의 이름 및 해당 리소스의 각 값을 표시 합니다.  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream1.vb#1)]  
  
 C# 예제에서는 이름이 `Example.cs`, 다음 명령을 사용 하 여 컴파일할 수 있습니다.  
  
 **csc Example.cs /res:PatientForm.resources**  
  
 Visual Basic 예제에서는 이름이 `Example.vb`, 다음 명령을 사용 하 여 컴파일할 수 있습니다.  
  
 **vbc example.vb 라고 가정 /res:PatientForm.resources**  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="stream" /> 매개 변수를 읽을 수 없는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.IOException"><paramref name="stream" />에 액세스하는 동안 I/O 오류가 발생한 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">serialization 서비스를 제공 합니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : string -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader fileName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="fileName">읽을 리소스 파일의 경로와 이름입니다. <c>파일 이름</c>은 대/소문자를 구분하지 않습니다.</param>
        <summary>지정된 명명 리소스 파일에 대한 <see cref="T:System.Resources.ResourceReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Resources.ResourceReader.%23ctor%28System.String%29> 생성자를 인스턴스화하는 <xref:System.Resources.ResourceReader> 독립 실행형.resources 파일에서 리소스를 검색 하는 개체입니다. 포함 된.resources 파일에서 리소스를 검색 하려면 사용 된 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> 생성자입니다.  

[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]

## Examples  
 이 섹션의 예제에서는 명명 된.txt 파일 `PatientForm.txt` 응용 프로그램에서 사용 하는 리소스를 정의 합니다.  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 다음 명령을 실행 하 여이.txt 파일을.resources 파일로 컴파일할 수 있습니다.  
  
 **resgen PatientForm.txt**  
  
 다음 예제에서는 리소스 열거 `PatientForm.resources` 이름 및 각 값을 표시 합니다.  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="fileName" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">파일을 찾을 수 없는 경우</exception>
        <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
        <exception cref="T:System.BadImageFormatException">리소스 파일에 잘못된 형식이 있는 경우 예를 들어 파일 길이가 0일 수 있는 경우가 해당됩니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="resourceReader.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Resources.ResourceReader" /> 개체에 연결된 모든 운영 체제 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.Close%2A> 호출할 수 있습니다 안전 하 게 여러 번.  
  
   
  
## Examples  
 다음 예제에서는 파일의 리소스를 통해 이동 하 고 발견 되는 모든 키/값 쌍을 표시 합니다. 코드를 사용 하 여는 <xref:System.Resources.ResourceReader.Close%2A> 종료 하는 방법의 <xref:System.Resources.ResourceReader> 및 사용 하는 모든 리소스를 해제 합니다.  
  
 [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="resourceReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Resources.ResourceReader" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 인스턴스를 사용 하 여 작업을 마쳤으면 <xref:System.Resources.ResourceReader>, 호출 <xref:System.Resources.ResourceReader.Dispose%2A> 이 인스턴스에서 사용 하는 모든 리소스를 해제 합니다. 이에 대 한 추가 참조를 제거 해야 <xref:System.Resources.ResourceReader> 종료에 대 한 활성 상태로 유지 하는 대신 인스턴스의 메모리를 가비지 수집기가 회수할 수 있도록 인스턴스입니다.  
  
 <xref:System.Resources.ResourceReader.Dispose%2A> 관리 및 관리 되지 않는 리소스를 해제 하는 코드를 포함 하는 전용 dispose (boolean) 메서드를 호출 합니다. 자세한 내용은 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="resourceReader.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Resources.ResourceReader" /> 개체에 대한 열거자를 반환합니다.</summary>
        <returns>이 <see cref="T:System.Resources.ResourceReader" /> 개체에 대한 열거자입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 하 여 리소스를 열거 하는 일반적으로 <xref:System.Resources.ResourceReader.GetEnumerator%2A> 메서드를 반복적으로 호출한 다음 합니다 <xref:System.Collections.IEnumerator.MoveNext%2A> 메서드는 반환 된 <xref:System.Collections.IDictionaryEnumerator> 메서드가 반환 될 때까지 개체 `false`합니다. 리소스 이름은에서 사용할 수는 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> 속성;에서 해당 값을 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 속성입니다. 이 예제에서는 이러한 방식으로 리소스를 열거 하는 방법을 보여 줍니다.  
  
 구현의 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> 속성을 <xref:System.Resources.ResourceReader> 클래스에는 다음 예외를 throw 할 수 있습니다.  
  
-   <xref:System.IO.FileNotFoundException>  
  
     데이터가 속한 형식을 포함 하는 어셈블리를 찾을 수 없습니다.  
  
-   <xref:System.FormatException>  
  
     데이터 형식이 아닙니다.  
  
-   <xref:System.TypeLoadException>  
  
     데이터가 속한 형식을 찾을 수 없습니다.  
  
 호출 하 여 예외를 처리할 수는 <xref:System.Resources.ResourceReader.GetResourceData%2A> 데이터 형식 및 명명된 된 리소스에 할당 된 바이트 배열에 대 한 정보를 검색할 메서드입니다. 자세한 내용은 "검색 리소스에서 이름을 사용 하 여 GetResourceData" 섹션을 참조 하세요.를 <xref:System.Resources.ResourceReader> 클래스 항목입니다.  
  
> [!IMPORTANT]
>  <xref:System.Resources.ResourceReader> 클래스 열거자를 반환 하는 두 가지 메서드가 포함 됩니다. 합니다 <xref:System.Resources.ResourceReader.GetEnumerator%2A> 메서드가 반환 되는 <xref:System.Collections.IDictionaryEnumerator> 인터페이스 개체 및 리소스 열거 될 때 호출 하는 것이 좋습니다.  
  
   
  
## Examples  
 이 섹션의 예제에서는 명명 된.txt 파일 `PatientForm.txt` 응용 프로그램에서 사용 하는 리소스를 정의 합니다.  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 다음 명령을 실행 하 여.txt 파일을.resources 파일로 컴파일할 수 있습니다.  
  
 **resgen PatientForm.txt**  
  
 다음 예제에서는 리소스 열거 `PatientForm.resources` 이름 및 각 값을 표시 합니다.  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">판독기가 닫혔거나 삭제되었으므로 액세스할 수 없는 경우</exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceData">
      <MemberSignature Language="C#" Value="public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetResourceData(string resourceName, [out] string&amp; resourceType, [out] unsigned int8[]&amp; resourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetResourceData (resourceName As String, ByRef resourceType As String, ByRef resourceData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetResourceData(System::String ^ resourceName, [Runtime::InteropServices::Out] System::String ^ % resourceType, [Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % resourceData);" />
      <MemberSignature Language="F#" Value="member this.GetResourceData : string *  *  -&gt; unit" Usage="resourceReader.GetResourceData (resourceName, resourceType, resourceData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="resourceType" Type="System.String" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="resourceData" Type="System.Byte[]" RefType="out" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="resourceName">리소스의 이름입니다.</param>
        <param name="resourceType">이 메서드는 반환될 때 검색된 리소스의 형식 이름을 나타내는 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <param name="resourceData">이 메서드가 반환될 때 검색된 형식의 이진 표현인 바이트 배열이 포함됩니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>열린 리소스 파일이나 스트림에서 명명된 리소스의 데이터와 형식 이름을 검색합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.GetResourceData%2A> 메서드 명명된 된 리소스를 바이트 배열로 값을 검색 합니다. 일반적으로 때 사용 되는 여 <xref:System.Collections.IDictionaryEnumerator.Value%2A> 속성 리소스의 값을 검색 하려고 할 때 예외를 throw 합니다.  
  
 `resourceType` 리소스의 데이터 형식을 나타내는 문자열입니다. 다음 값 중 하나일 수 있습니다.  
  
-   문자열 표현을 `ResourceTypeCode` 리소스의 데이터 형식을 나타내는 열거형 멤버입니다. `ResourceTypeCode` 하려면에서 사용 되는 전용 열거형을 19 일반적인 데이터 형식 중 하나를 저장 하는 특수 이진 형식을 사용 함을 나타내는입니다. 여기에.NET Framework 기본 데이터 형식 (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>를 <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>), 뿐만 <xref:System.String>를 <xref:System.DateTime>, 및 <xref:System.TimeSpan>, 또한를 `ResourceTypeCode` 열거형에는 다음 표에 나와 있는 값이 포함 됩니다.  
  
    |ResourceTypeCode 값|설명|  
    |----------------------------|-----------------|  
    |`ResourceTypeCode.ByteArray`|데이터는 바이트 배열입니다. 이 데이터 형식에 대 한 호출의 결과 일반적으로 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType> 메서드.|  
    |`ResourceTypeCode.Null`|데이터는 null 참조입니다. 이 데이터 형식에 대 한 호출의 결과 일반적으로 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType> 값인 개체를 사용 하 여 메서드 `null`합니다.|  
    |`ResourceTypeCode.Stream`|데이터 스트림으로 저장 됩니다. 이 데이터 형식에 대 한 호출의 결과 일반적으로 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> 또는 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> 메서드.|  
  
     가정 `resourceData` 되지 않은 손상이 일반적으로 변환할 수는 바이트 배열에서 원래 값으로 다시 호출 하 여는 <xref:System.BitConverter> 또는 <xref:System.IO.BinaryReader> 메서드.  
  
-   에 할당 된 serialize 된 데이터가 해당 형식의 정규화 된 이름을 포함 하는 문자열을 `resourceData` 인수 (예를 들어 `System.String`). 또한.NET Framework 클래스 라이브러리의 일부분이 아닌 형식 이름, 버전, 문화권 및 형식을 포함 하는 어셈블리의 공개 키 포함 문자열입니다. 예를 들어 다음 문자열 임을 나타내는 serialize 된 데이터의 인스턴스를 `Person` 입력을 `Extensions` 없습니다 공개 키와 지정 된 문화권이 있는 유틸리티를 명명 된 어셈블리의 버전 1.0에서에서 발견 되는 네임 스페이스에 합니다.  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
     가정 `resourceData` 손상 된 이며 원본 유형을 사용할 수 `resourceData` 수 변환할 바이트 배열에서 원래 값으로 다시 변환 된 바이트 배열의 <xref:System.IO.Stream> 개체와는 스트림을전달할<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType>메서드.  
  
-   데이터 형식에 설명 하는 데 사용 하는 문자열을 <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> 메서드를 호출 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="resourceName" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="resourceName" />가 없는 경우</exception>
        <exception cref="T:System.BadImageFormatException"><paramref name="resourceName" />의 값이 잘못되었습니다.</exception>
        <exception cref="T:System.FormatException">검색된 리소스 데이터가 손상되었습니다.</exception>
        <exception cref="T:System.InvalidOperationException">현재 <see cref="T:System.Resources.ResourceReader" /> 개체가 초기화되어 있지 않습니다. 이 개체가 닫혀 있는 것 같습니다.</exception>
        <altmember cref="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Resources.ResourceReader" /> 개체에 대한 열거자를 반환합니다.</summary>
        <returns>이 <see cref="T:System.Resources.ResourceReader" /> 개체에 대한 열거자입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> 명시적 인터페이스 구현이입니다. <xref:System.Resources.ResourceReader> 인스턴스가 <xref:System.Collections.IEnumerable> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다. .Resources 파일의 리소스를 열거 하는 권장된 방법은 호출 하는 것을 <xref:System.Collections.IEnumerator.MoveNext%2A> 메서드를 <xref:System.Collections.IDictionaryEnumerator> 에서 반환 된 개체는 <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">판독기가 이미 닫혀 있고 액세스할 수 없습니다.</exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Resources.ResourceReader" />에서 사용하는 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
사용 하는 리소스를 사용 하면 Dispose를 호출 합니다 <xref:System.Resources.ResourceReader> 다른 용도로 다시 할당 될 수 있습니다. Dispose에 대 한 자세한 내용은 참조 하세요. [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.

## Examples  
다음 코드 예제에서는 파일의 리소스를 통해 이동 하 고 발견 되는 모든 키/값 쌍을 출력 합니다. 코드를 사용 하 여 theIDisposable.Dispose 메서드 종료는 <xref:System.Resources.ResourceReader> 및 사용 하는 모든 리소스를 해제 합니다.

```vb
Imports System
Imports System.Resources
Imports System.Collections

Public Class ReadResources

    Public Shared Sub Main(args() As String)
        ' Create a resource reader for items.resources 
        ' and get an enumerator to iterate through the file. 
        Dim reader As IResourceReader = New ResourceReader("items.resources")
        Dim en As IDictionaryEnumerator = reader.GetEnumerator()

        ' Iterate through the file, printing the key and value pairs. 
        While en.MoveNext()
            Console.WriteLine()
            Console.WriteLine("Name: {0}", en.Key)
            Console.WriteLine("Value: {0}", en.Value)
        End While 

        ' Clean up all resources associated with the reader. 
        ' Calling Dispose is equivalent to calling Close.
        reader.Dispose()
    End Sub 

End Class
```

```csharp
using System;
using System.Resources;
using System.Collections;

public class ReadResources 
{
    public static void Main(string[] args) 
    {
        // Create a resource reader for items.resources 
        // and get an enumerator to iterate through the file.
        IResourceReader reader = new ResourceReader("items.resources");
        IDictionaryEnumerator en = reader.GetEnumerator();

        // Iterate through the file, printing the key/value pairs. 
        while (en.MoveNext()) 
        {
            Console.WriteLine();
            Console.WriteLine("Name: {0}", en.Key);
            Console.WriteLine("Value: {0}", en.Value);
        }

        // Clean up all resources associated with the reader. 
        // Calling Dispose is equivalent to calling Close.
        reader.Dispose();
    }
}
```

```cpp
using namespace System;
using namespace System::Resources;
using namespace System::Collections;
int main()
{
   array<String^>^args = Environment::GetCommandLineArgs();

   // Create a resource reader for items.resources 
   // and get an enumerator to iterate through the file.
   IResourceReader^ reader = gcnew ResourceReader( "items.resources" );
   IDictionaryEnumerator^ en = reader->GetEnumerator();

   // Iterate through the file, printing the key/value pairs. 
   while ( en->MoveNext() )
   {
      Console::WriteLine();
      Console::WriteLine( "Name: {0}", en->Key );
      Console::WriteLine( "Value: {0}", en->Value );
   }

   // Clean up all resources associated with the reader. 
   // Calling the destructor is equivalent to calling Close.
   reader->~IResourceReader();
}
```

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>