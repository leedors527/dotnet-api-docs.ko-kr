<Type Name="ICustomMarshaler" FullName="System.Runtime.InteropServices.ICustomMarshaler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="03ef26878dc74066eb80a36c6aa1a51c27cec8e3" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58711415" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomMarshaler" />
  <TypeSignature Language="F#" Value="type ICustomMarshaler = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>메서드 호출 처리를 위한 사용자 지정 래퍼를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 마샬러는 새 인터페이스와 이전 기능 간에 브리지를 제공합니다. 사용자 지정 마샬링 다음과 같은 이점이 있습니다.  
  
-   또한 새 인터페이스를 구현 하는 서버로 작업 하도록 이전 인터페이스와 함께 작동 하도록 설계 된 클라이언트 응용 프로그램 수 있습니다.  
  
-   클라이언트 응용 프로그램을 새 인터페이스를 사용 하 여 작동 하도록 빌드된 이전 인터페이스를 구현 하는 서버를 작업할 수 있습니다.  
  
 구성 요소 개체 모델 (COM)를 다른 방식으로 노출 되는 다양 한 마샬링 동작을 제공 하는 인터페이스에 있는 경우 interop 마샬러를 사용 하는 대신 사용자 지정 마샬러를 디자인할 수 있습니다. 사용자 지정 마샬러를 사용 하 여 새.NET Framework 구성 요소와 기존 COM 구성 요소 간 구분을 최소화할 수 있습니다.  
  
 예를 들어, 호출 하는 관리 되는 인터페이스를 개발 하는 경우 `INew`합니다. COM에는 표준 COM 호출 가능 래퍼 (CCW)를 통해이 인터페이스를 노출 하는 경우 관리 되는 인터페이스와 동일한 메서드를 포함 하 고 interop 마샬러가에 기본 제공 마샬링 규칙을 사용 합니다. 이제는 잘 알려진 COM 인터페이스를 호출 한다고 가정 `IOld` 이미와 동일한 기능을 제공 합니다 `INew` 인터페이스입니다. 사용자 지정 마샬러를 디자인 하 여 관리 되지 않는 구현의 제공할 수 있습니다 `IOld` 의 관리 되는 구현에 호출을 위임 하는 `INew` 인터페이스입니다. 따라서 사용자 지정 마샬러는 관리 및 관리 되지 않는 인터페이스 간의 다리 역할입니다.  
  
> [!NOTE]
>  디스패치 전용 인터페이스에서 관리 코드에서 비관리 코드를 호출 하는 경우에 사용자 지정 마샬러 호출 되지 않습니다.  
  
## <a name="defining-the-marshaling-type"></a>마샬링 형식 정의  
 사용자 지정 마샬러를 작성 하기 전에 마샬링할 수는 관리 및 관리 되지 않는 인터페이스를 정의 해야 합니다. 이러한 인터페이스는 일반적으로 동일한 기능을 수행 하지만 관리 및 관리 되지 않는 개체에 다르게 노출 됩니다.  
  
 관리 되는 컴파일러에서 메타 데이터에서 관리 되는 인터페이스 및 결과 인터페이스는 다른 관리 되는 인터페이스와 같습니다. 다음 예제에서는 일반적인 인터페이스를 보여 줍니다.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)]  
  
 관리 되지 않는 형식에서 IDL Interface Definition Language ()를 정의 하 고 인터페이스 정의 언어 (MIDL (Microsoft) 컴파일러를 사용 하 여 컴파일. 라이브러리 문 내에서 인터페이스를 정의 하 고 다음 예제 에서처럼 범용 고유 식별자 (UUID) 특성을 사용 하 여 인터페이스 ID를 할당 합니다.  
  
```  
 [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library OldLib {  
     [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]  
     interface IOld : IUnknown  
         HRESULT OldMethod();  
}  
```  
  
 MIDL 컴파일러 여러 출력 파일을 생성합니다. 를 Old.idl에서 인터페이스를 정의 하는 경우 출력 파일은 Old_i.c 정의 `const` 다음 예제는 IID (인터페이스 식별자) 인터페이스를 사용 하 여 변수입니다.  
  
```  
const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};  
```  
  
 Old.h 파일은 또한 MIDL에서 생성 됩니다. C + + 소스 코드에 포함 될 수 있는 인터페이스의 c + + 정의 포함 합니다.  
  
## <a name="implementing-the-icustommarshaler-interface"></a>ICustomMarshaler 인터페이스 구현  
 사용자 지정 마샬러에서 구현 해야 합니다는 <xref:System.Runtime.InteropServices.ICustomMarshaler> 런타임에 적절 한 래퍼를 제공 하는 인터페이스입니다.  
  
 다음 C# 코드는 모든 사용자 지정 마샬러 구현 해야 하는 기본 인터페이스를 표시 합니다.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)]  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler> 인터페이스 변환 지원, 정리 지원 및 데이터를 마샬링할 수에 대 한 정보를 제공 하는 메서드를 포함 합니다.  
  
|작업의 형식|ICustomMarshaler 메서드|설명|  
|-----------------------|-----------------------------|-----------------|  
|(관리 코드에 네이티브) 코드에서 변환|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|관리 되는 개체에 네이티브 데이터에 대 한 포인터를 마샬링합니다. 이 메서드는 사용자 지정 런타임 호출 가능 래퍼 (RCW)는 인수로 전달 되는 관리 되지 않는 인터페이스를 마샬링할 수를 반환 합니다. 마샬러는 해당 형식에 대 한 사용자 지정 RCW의 인스턴스를 반환 해야 합니다.|  
|변환 (에서 네이티브 코드)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|네이티브 데이터에 대 한 관리 되는 개체를 마샬링합니다. 이 메서드는 사용자 지정 COM 호출 가능 래퍼 (CCW) 인수로 전달 되는 관리 되는 인터페이스를 마샬링할 수 있는 반환 합니다. 마샬러는 해당 형식에 대 한 사용자 지정 CCW의 인스턴스를 반환 해야 합니다.|  
|네이티브 코드 정리|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|사용 하 여 반환 되는 기본 데이터 (CCW)를 정리 하면 마샬러가 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> 메서드.|  
|관리 되는 코드 정리|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|사용 하 여 반환 되는 관리 되는 데이터 (RCW)를 정리 하면 마샬러가 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> 메서드.|  
|(네이티브 코드용)에 대 한 정보|<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|마샬링될 관리 되지 않는 데이터의 크기를 반환 합니다.|  
  
### <a name="conversion"></a>변환  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=nameWithType>  
  
 관리 되는 개체에 네이티브 데이터에 대 한 포인터를 마샬링합니다. 이 메서드는 사용자 지정 런타임 호출 가능 래퍼 (RCW)는 인수로 전달 되는 관리 되지 않는 인터페이스를 마샬링할 수를 반환 합니다. 마샬러는 해당 형식에 대 한 사용자 지정 RCW의 인스턴스를 반환 해야 합니다.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=nameWithType>  
  
 네이티브 데이터에 대 한 관리 되는 개체를 마샬링합니다. 이 메서드는 사용자 지정 COM 호출 가능 래퍼 (CCW) 인수로 전달 되는 관리 되는 인터페이스를 마샬링할 수 있는 반환 합니다. 마샬러는 해당 형식에 대 한 사용자 지정 CCW의 인스턴스를 반환 해야 합니다.  
  
### <a name="cleanup"></a>정리  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=nameWithType>  
  
 사용 하 여 반환 되는 기본 데이터 (CCW)를 정리 하면 마샬러가 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> 메서드.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=nameWithType>  
  
 사용 하 여 반환 되는 관리 되는 데이터 (RCW)를 정리 하면 마샬러가 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> 메서드.  
  
### <a name="size-information"></a>크기 정보  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=nameWithType>  
  
 마샬링될 관리 되지 않는 데이터의 크기를 반환 합니다.  
  
## <a name="implementing-the-getinstance-method"></a>GetInstance 메서드를 구현합니다.  
 구현 하는 것 외에도 <xref:System.Runtime.InteropServices.ICustomMarshaler> 인터페이스를 사용자 지정 마샬러 구현 해야 합니다는 `static` 라는 메서드 `GetInstance` 받아들이는 <xref:System.String> 매개 변수로 반환 형식을 갖습니다 <xref:System.Runtime.InteropServices.ICustomMarshaler>합니다. 이 `static` 사용자 지정 마샬러의 인스턴스를 인스턴스화하는 공용 언어 런타임의 COM interop 계층 메서드를 호출 합니다. 에 전달 되는 문자열 `GetInstance` 메서드는 반환된 된 사용자 지정 마샬러를 사용자 지정 하는 데 사용할 수 있는 쿠키입니다.  
  
```  
static ICustomMarshaler *GetInstance(String *pstrCookie);  
```  
  
## <a name="applying-marshalasattribute"></a>MarshalAsAttribute를 적용합니다.  
 적용 해야 하는 사용자 지정 마샬러를 사용 하려면를 <xref:System.Runtime.InteropServices.MarshalAsAttribute> 마샬링할 필드 또는 매개 변수 특성입니다.  
  
 전달 해야 합니다 <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> 열거형 값의 <xref:System.Runtime.InteropServices.MarshalAsAttribute> 생성자입니다. 또한 지정 해야 합니다는 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> 명명 된 매개 변수 중 하나를 사용 하 여 필드:  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> (필수): 사용자 지정 마샬러의 정규화 된 어셈블리 이름입니다. 네임 스페이스 및 사용자 지정 마샬러 클래스 이름이 포함 해야 합니다. 사용자 지정 마샬러는 해당 어셈블리에 정의 되어 있지 않으면, 이전에 정의 된 어셈블리의 이름을 지정 해야 합니다.  
  
    > [!NOTE]
    >  사용할 수는 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> 대신 필드를 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> 필드입니다. <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> 쉽게 지정할 수 있는 형식을 사용 합니다.  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> (선택 사항): 사용자 지정 마샬러에서에 전달 되는 쿠키입니다. 마샬러에 추가 정보를 제공 하는 쿠키를 사용할 수 있습니다. 예를 들어 동일한 마샬러 다양 한 래퍼를 제공 하는, 쿠키는 특정 래퍼를 식별 합니다. 쿠키에 전달 되는 `GetInstance` 마샬러의 메서드.  
  
 <xref:System.Runtime.InteropServices.MarshalAsAttribute> 특성은 적절 한 래퍼를 활성화할 수 있도록 사용자 지정 마샬러를 식별 합니다. 공용 언어 런타임의 interop 서비스는 다음 특성을 조사 하 고 사용자 지정 마샬러 첫 번째 시간 마샬링될 인수 (매개 변수 또는 필드) 요구를 만듭니다.  
  
 런타임은 다음 호출을 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> 및 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> 올바른 래퍼는 호출을 처리 하기를 활성화 하는 사용자 지정 마샬러에 메서드.  
  
## <a name="using-a-custom-marshaler"></a>사용자 지정 마샬러를 사용 하 여  
 사용자 지정 마샬러에서 완료 되 면 특정 형식에 대 한 사용자 지정 래퍼로 사용할 수 있습니다. 다음 예제에서는 정의 된 `IUserData` 관리 되는 인터페이스:  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)]  
  
 다음 예에서 합니다 `IUserData` 사용 하 여 인터페이스를 `NewOldMarshaler` 전달할 비관리 클라이언트 응용 프로그램을 사용 하도록 설정 하려면 사용자 지정 마샬러는 `IOld` 인터페이스를 `DoSomeStuff` 메서드. 에 대 한 관리 되는 설명을 `DoSomeStuff` 메서드는 `INew` 인터페이스를 반면 이전 예제에 표시 된 대로 관리 되지 않는 버전의 `DoSomeStuff` 는 `IOld` 인터페이스 포인터를 다음 예제에서와 같이 합니다.  
  
```  
[uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library UserLib {  
     [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]  
     interface IUserData : IUnknown  
         HRESULT DoSomeStuff(IUnknown* pIOld);  
}  
```  
  
 관리 되는 정의에서 생성 되는 형식 라이브러리 `IUserData` 표준 정의 하는 대신 다음 예와에서 같이 관리 되지 않는 정의 만듭니다. 합니다 <xref:System.Runtime.InteropServices.MarshalAsAttribute> 에 적용 된 특성을 `INew` 관리 되는 정의 인수는 `DoSomeStuff` 메서드 인수는 다음 예제와 같이 사용자 지정 마샬러를 나타냅니다.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)]  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)]  
  
 이전 예제에서 첫 번째 매개 변수를 제공 합니다 <xref:System.Runtime.InteropServices.MarshalAsAttribute> 특성은는 <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> 열거형 값 `UnmanagedType.CustomMarshaler`합니다.  
  
 두 번째 매개 변수는 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> 사용자 지정 마샬러의 정규화 된 어셈블리 이름을 제공 하는 필드입니다. 이 이름은 네임 스페이스 및 클래스 사용자 지정 마샬러의 이루어져 있습니다 (`MarshalType="MyCompany.NewOldMarshaler"`).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public void CleanUpManagedData (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpManagedData (ManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpManagedData(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpManagedData : obj -&gt; unit" Usage="iCustomMarshaler.CleanUpManagedData ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">소멸될 관리되는 개체입니다.</param>
        <summary>관리되는 데이터가 필요 없는 경우 이 데이터의 필요한 정리 작업을 수행합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpNativeData : nativeint -&gt; unit" Usage="iCustomMarshaler.CleanUpNativeData pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">소멸될 관리되지 않는 데이터에 대한 포인터입니다.</param>
        <summary>관리되지 않는 데이터가 필요 없는 경우 이 데이터의 필요한 정리 작업을 수행합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNativeDataSize();" />
      <MemberSignature Language="F#" Value="abstract member GetNativeDataSize : unit -&gt; int" Usage="iCustomMarshaler.GetNativeDataSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>마샬링될 네이티브 데이터의 크기를 반환합니다.</summary>
        <returns>네이티브 데이터의 크기(바이트)입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public IntPtr MarshalManagedToNative (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalManagedToNative (ManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr MarshalManagedToNative(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member MarshalManagedToNative : obj -&gt; nativeint" Usage="iCustomMarshaler.MarshalManagedToNative ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">변환될 관리되는 개체입니다.</param>
        <summary>관리되는 데이터를 관리되지 않는 데이터로 변환합니다.</summary>
        <returns>관리되는 개체의 COM 뷰에 대한 포인터입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member MarshalNativeToManaged : nativeint -&gt; obj" Usage="iCustomMarshaler.MarshalNativeToManaged pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">래핑될 관리되지 않는 형식에 대한 포인터입니다.</param>
        <summary>관리되지 않는 데이터를 관리되는 데이터로 변환합니다.</summary>
        <returns>COM 데이터의 관리되는 뷰를 나타내는 개체입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>