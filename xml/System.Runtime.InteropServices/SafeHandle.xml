<Type Name="SafeHandle" FullName="System.Runtime.InteropServices.SafeHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d2b9e9ff0e52b9e5a2e934301d96f816c0615296" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/17/2019" /><Meta Name="ms.locfileid" Value="59676522" /></Metadata><TypeSignature Language="C#" Value="public abstract class SafeHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit SafeHandle extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.SafeHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SafeHandle&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SafeHandle abstract : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type SafeHandle = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Handles</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-1.5;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>운영 체제 핸들의 래퍼 클래스를 나타냅니다. 이 클래스는 상속되어야 합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.InteropServices.SafeHandle> 클래스는 리소스 핸들 중간 가비지 수집에 의해 회수에서 의도 하지 않은 관리 되지 않는 개체를 참조 하는 Windows에서 재생 되 고 처리를 방지의 중요 한 종료를 제공 합니다.  
  
 이 항목에는 다음 단원이 포함되어 있습니다.  
  
 [이유는 SafeHandle?](#Why)   
 [SafeHandle의 용도](#Does)   
 [SafeHandle에서 파생 된 클래스](#Derived)  
  
<a name="Why"></a>   
## <a name="why-safehandle"></a>이유는 SafeHandle?  
 .NET Framework 버전 2.0에서는 모든 운영 체제 핸들의 캡슐화 할 수 있었습니다 하기 전에 <xref:System.IntPtr> 관리 되는 래퍼 개체입니다. 네이티브 코드와 상호 운용 하는 편리한 방법을 었지만, 핸들 스레드 예기치 않게 중단 또는 스택 오버플로와 같은 비동기 예외에 의해 누수 될 수 있습니다. 이러한 비동기 예외는 운영 체제 리소스를 정리 하는 데 방해가 되며 응용 프로그램에서 거의 모든 곳에서 발생할 수 있습니다.  
  
 하지만에 대 한 재정의 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드는 개체가 가비지 수집에 따라서는 될 때 관리 되지 않는 리소스 정리를 허용, 플랫폼 내에서 메서드를 실행 하는 동안 가비지 수집에 의해 종료 가능한 개체를 회수할 수 있습니다 호출 호출 합니다. 종료자에는 해당 플랫폼에 전달 된 핸들을 해제 하는 경우 호출, 손상 처리 될 수 있습니다. 플랫폼을 하는 동안 메서드가 차단 된 동안 핸들을 회수할 수도 파일을 읽을 때와 같은 호출을 호출 합니다.  
  
 보다 Windows 핸들을 적극적으로 재활용 하기 때문에 대 한 핸들 수 재활용 될 되 고 중요 한 데이터를 포함할 수 있는 다른 리소스를 가리킵니다. 이 재생 공격으로 알려져 있습니다 잠재적으로 데이터를 손상 및 보안 위협이 될 합니다.  
  
<a name="Does"></a>   
## <a name="what-safehandle-does"></a>SafeHandle의 용도  
 <xref:System.Runtime.InteropServices.SafeHandle> 클래스는 다양 한 이러한 개체 수명 문제를 단순화 하 고는 플랫폼과 통합 되어 운영 체제 리소스가 누수 되지 않도록 호출 합니다. <xref:System.Runtime.InteropServices.SafeHandle> 클래스 할당 및 중단 없이 핸들을 해제 하 여 개체 수명 문제를 해결 합니다. 중요 종료자는 핸들이 닫히고 하는 동안 예기치 않은 실행이 보장 되도록 포함 <xref:System.AppDomain> 언로드의 경우에 플랫폼 호출을 호출 하는 경우에도 손상된 된 상태에서 것으로 간주 됩니다.  
  
 때문에 <xref:System.Runtime.InteropServices.SafeHandle> 에서 상속 <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject>, 중요 종료자 하기 전에 중요 하지 않은 모든 종료 자가 호출 됩니다. 종료 자가 동일한 가비지 컬렉션 중 라이브 더 이상 없는 개체에서 호출 됩니다. 예를 들어, 한 <xref:System.IO.FileStream> 개체 핸들이 누출 되거나 재생 될 위험 없이 기존 버퍼링 된 데이터를 찾아내기 위해 일반 종료자를 실행할 수 있습니다. 일반 사용에 대 한 위험 및 중요 하지 않은 종료자 간에 매우 약하게 만드는이 순서가 없습니다. 사용 하 여 해당 라이브러리를 허용 하 여 기존 라이브러리의 마이그레이션을 지원 하기 위해 주로 존재 <xref:System.Runtime.InteropServices.SafeHandle> 해당 의미 체계를 변경 하지 않고 있습니다. 또한 중요 종료자 및 작업 호출, 같은 <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=nameWithType> 메서드에 제약이 있는 실행 영역에 있어야 합니다. 이 인해 제약 조건에는 종료 자가 호출 그래프 내에서 코드를 작성할 수 있습니다.  
  
 플랫폼 작업을 자동으로 호출에 의해 캡슐화 되는 핸들의 참조 횟수를 증가 <xref:System.Runtime.InteropServices.SafeHandle> 및 완료 되 면 감소 합니다. 이렇게 하면 핸들 됩니다 하지 수 재활용 되거나 예기치 않게 닫았습니다.  
  
 생성할 때 기본 핸들의 소유권을 지정할 수 있습니다 <xref:System.Runtime.InteropServices.SafeHandle> 값을 제공 하 여 개체를 `ownsHandle` 인수에는 <xref:System.Runtime.InteropServices.SafeHandle> 클래스 생성자입니다. 이 제어 하는지 여부를 <xref:System.Runtime.InteropServices.SafeHandle> 개체가 삭제 된 후 개체 핸들을 해제 합니다.  특이 한 수명 요구 사항을 핸들 또는 수명이 다른 사용자에 의해 제어 되는 핸들을 사용 하는 것에 대 한 유용 합니다.  
  
<a name="Derived"></a>   
## <a name="classes-derived-from-safehandle"></a>SafeHandle에서 파생 된 클래스  
 <xref:System.Runtime.InteropServices.SafeHandle> 운영 체제 핸들에 대 한 추상 래퍼 클래스가입니다. 이 클래스로부터 파생은 어렵습니다. 대신 <xref:Microsoft.Win32.SafeHandles> 네임스페이스에서 다음에 대해 SafeHandle을 제공하는 파생된 클래스를 사용하십시오.  
  
-   파일 (의 <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> 클래스).  
  
-   메모리 매핑된 파일 (의 <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> 클래스).  
  
-   파이프 (의 <xref:Microsoft.Win32.SafeHandles.SafePipeHandle> 클래스).  
  
-   메모리 뷰 (의 <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> 클래스).  
  
-   암호화 구문 (합니다 <xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>를 <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>, 및 <xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle> 클래스).  
  
-   프로세스 (의 <xref:Microsoft.Win32.SafeHandles.SafeProcessHandle> 클래스).  
  
-   레지스트리 키 (의 <xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> 클래스).  
  
-   대기 핸들 (의 <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> 클래스).  
  
   
  
## Examples  
 다음 코드 예제에서는 safehandle에서 파생 되는 운영 체제 파일 핸들에 대 한 사용자 지정 <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>합니다. 파일에서 바이트를 읽고 해당 16 진수 값을 표시 합니다. 테스트 도구도 오류가 포함 된 스레드를 중단 되도록 하지만 핸들 값이 해제 됩니다.  사용 하는 경우는 <xref:System.IntPtr> 핸들을 나타내기 위해 핸들 비동기 스레드 중단으로 인해 손실 가끔 됩니다.  
  
 컴파일된 응용 프로그램과 동일한 폴더에 있는 텍스트 파일을 해야 합니다. "HexViewer" 응용 프로그램에 이름을 지정할 가정 명령줄 사용법은:  
  
 `HexViewer <filename> -Fault`  
  
 필요에 따라 지정 `-Fault` 의도적으로 특정 창에서 스레드를 중단 하 여 핸들이 누출 되도록 하려고 합니다. Windows Perfmon.exe 도구를 사용 하 여 오류를 삽입 하는 동안 핸들 수를 모니터링 합니다.  
  
 [!code-csharp[SafeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">상속자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 상속할 수 없습니다.</permission>
    <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
    <block subset="none" type="overrides"><para>파생 된 클래스를 만들려면 <see cref="T:System.Runtime.InteropServices.SafeHandle" />를 만들고 운영 체제 핸들을 해제 하는 방법을 알고 있어야 합니다. 이 프로세스는 몇 가지 사용 하기 때문에 다른 핸들 형식에 대 한 다른 합니다 [CloseHandle](https://msdn.microsoft.com/library/windows/desktop/ms724211.aspx) 함수를 같은 보다 구체적인 함수를 사용 하기도 [unmapviewoffile이](https://msdn.microsoft.com/library/windows/desktop/aa366882.aspx) 또는 [FindClose](https://msdn.microsoft.com/library/windows/desktop/aa364413.aspx). 파생된 클래스의 이러한 이유로 만들어야 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 래핑할 안전한 핸들을 원하는 각 운영 체제 핸들 형식에 대 한 합니다.  
  
<see cref="T:System.Runtime.InteropServices.SafeHandle" />에서 상속하는 경우 <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> 및 <see cref="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" /> 멤버를 재정의해야 합니다.  
  
또한 잘못 된 핸들 값을 나타내는 값을 사용 하 여 기본 생성자를 호출 하는 기본 생성자를 제공 해야 및 <see cref="T:System.Boolean" /> 네이티브 핸들은 소유 하는지 여부를 나타내는 값을 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 하 고 결과적으로 해제 해야 경우 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 삭제 되었습니다.</para></block>
    <altmember cref="N:Microsoft.Win32.SafeHandles" />
    <altmember cref="T:System.Runtime.InteropServices.CriticalHandle" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SafeHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SafeHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SafeHandle (IntPtr invalidHandleValue, bool ownsHandle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int invalidHandleValue, bool ownsHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (invalidHandleValue As IntPtr, ownsHandle As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SafeHandle(IntPtr invalidHandleValue, bool ownsHandle);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.SafeHandle : nativeint * bool -&gt; System.Runtime.InteropServices.SafeHandle" Usage="new System.Runtime.InteropServices.SafeHandle (invalidHandleValue, ownsHandle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="invalidHandleValue" Type="System.IntPtr" />
        <Parameter Name="ownsHandle" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="invalidHandleValue">잘못된 핸들의 값(일반적으로 0 또는 -1)입니다.  구현한 <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" />는 이 값에 대해 <see langword="true" />를 반환해야 합니다.</param>
        <param name="ownsHandle">종료 단계에 <see cref="T:System.Runtime.InteropServices.SafeHandle" />에서 핸들을 안정적으로 해제할 수 있게 하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />(권장되지 않음)입니다.</param>
        <summary>지정된 잘못된 핸들 값을 사용하여 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 `ownsHandle` 매개 변수가 `false`, <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> 호출 되지 않습니다; 따라서 좋지 않습니다 코드 리소스가 누출 될 수 있습니다 하는 대로이 매개 변수 값을 사용 하 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException">파생 클래스가 비관리 코드 액세스 권한이 없는 어셈블리에 상주합니다.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">상속자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 상속할 수 없습니다.</permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="safeHandle.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;netstandard-1.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>핸들의 리소스를 해제하도록 표시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 된 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> 메서드를 사용 하면 리소스를 해제 합니다. 이 다른 스레드가 동일한 safehandle 개체를 사용 하는 경우 즉시 발생 하지 않을 수 있지만 없는 경우 즉시 수행 됩니다. 대부분의 클래스를 사용 하지만 <xref:System.Runtime.InteropServices.SafeHandle> 클래스 때때로이 작업이 필요, 종료자를 제공할 필요가 없습니다 (예를 들어 파일 버퍼를 플러시 하거나 쓸 일부 데이터를 다시 메모리에). 이 경우 클래스 보다 먼저 실행 되도록 보장 되는 종료자를 제공할 수는 <xref:System.Runtime.InteropServices.SafeHandle> 중요 종료자 실행 합니다.  
  
 호출을 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> 마쳤으면 메서드를 사용 하 여는 <xref:System.Runtime.InteropServices.SafeHandle> 개체입니다.  
  
> [!NOTE]
>  항상 호출 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 나 <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> 에 대 한 마지막 참조를 해제 하기 전에 <xref:System.Runtime.InteropServices.SafeHandle> 개체입니다. 이렇게 하지 않으면 가비지 컬렉션이 <xref:System.Runtime.InteropServices.SafeHandle> 개체의 <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DangerousAddRef">
      <MemberSignature Language="C#" Value="public void DangerousAddRef (ref bool success);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DangerousAddRef(bool&amp; success) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DangerousAddRef (ByRef success As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DangerousAddRef(bool % success);" />
      <MemberSignature Language="F#" Value="member this.DangerousAddRef :  -&gt; unit" Usage="safeHandle.DangerousAddRef success" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-1.5;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="success" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="success">참조 카운터 값이 성공적으로 증가하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary><see cref="T:System.Runtime.InteropServices.SafeHandle" /> 인스턴스의 참조 카운터의 값을 수동으로 증가시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> 메서드 핸들을 사용 하는 메모리를 회수에서 공용 언어 런타임 않도록 (런타임에서 호출 하는 경우에 발생 합니다 <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> 메서드). 이 방법의 참조 횟수를 증가 수동으로 사용할 수는 <xref:System.Runtime.InteropServices.SafeHandle> 인스턴스. <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> 사용 하 여 부울 값을 반환 합니다는 `ref` 매개 변수 (`success`) 참조 횟수를 성공적으로 증가 하는지 여부를 나타냅니다. 따라서 프로그램 논리를 오류 발생 시 돌아갈 수 있습니다. 설정 해야 `success` 하 `false` 호출 하기 전에 <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>입니다. 하는 경우 `success` 됩니다 `true`에 대 한 호출을 일치 시켜 리소스 누수를 방지 <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> 해당 호출을 사용 하 여 <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>입니다.  
  
> [!CAUTION]
>  이 메서드는 고급 사용자를 대상으로 하며 항상 신중 하 게 사용 해야 합니다. 핸들 리소스 누수를 방지 하려면 항상 스레드 중단 처리를 중단할 수 없도록 여기서 제약이 있는 실행 지역 (CER) 내에서이 메서드를 호출 합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease" />
      </Docs>
    </Member>
    <Member MemberName="DangerousGetHandle">
      <MemberSignature Language="C#" Value="public IntPtr DangerousGetHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int DangerousGetHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function DangerousGetHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr DangerousGetHandle();" />
      <MemberSignature Language="F#" Value="member this.DangerousGetHandle : unit -&gt; nativeint" Usage="safeHandle.DangerousGetHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> 필드의 값을 반환합니다.</summary>
        <returns><see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> 필드의 값을 나타내는 <see langword="IntPtr" />입니다. <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />를 사용하여 핸들을 잘못된 핸들로 표시했으면 이 메서드는 오래된 값일 수 있는 원래 핸들 값을 그대로 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하 여 인스턴스의 실제 핸들 값을 검색 하는 <xref:System.Runtime.InteropServices.SafeHandle> 클래스를 파생 합니다. 이 메서드는 이전 버전과 호환성 때문에에 필요한.NET Framework의 많은 속성을 반환할 `IntPtr` 형식을 처리 합니다. `IntPtr` 핸들 형식은 포인터 또는 핸들을 나타내는 데 사용 하는 플랫폼별 형식입니다.  
  
> [!CAUTION]
>  사용 하는 <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> 메서드 때문에 보안 문제가 발생할 수 있습니다 핸들을 사용 하 여 잘못 된 데이터로 표시 된 경우 <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>, <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> 여전히 원래, 잠재적으로 부실 핸들 값을 반환 합니다. 반환 된 핸들의 모든 지점에서 재활용 될 수도 있습니다. 기껏해야 즉, 핸들 작업을 갑자기 중지 될 수 있습니다. 최악의 경우 핸들 또는 핸들을 나타내는 리소스는 신뢰할 수 없는 코드에 노출 되,이 재사용 되거나 반환 된 핸들 재활용 보안 공격에 발생할 수 있습니다. 예를 들어, 신뢰할 수 없는 호출자를 반환 되는 단순히 핸들에 대해 데이터를 쿼리 하 고는 완전히 관련이 없는 리소스에 대 한 정보를 받을 수 있습니다. 참조를 <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> 하며 <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> 메서드를 사용 하는 방법에 대 한 자세한 내용은 <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> 메서드를 참조 하십시오.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DangerousRelease">
      <MemberSignature Language="C#" Value="public void DangerousRelease ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DangerousRelease() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease" />
      <MemberSignature Language="VB.NET" Value="Public Sub DangerousRelease ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DangerousRelease();" />
      <MemberSignature Language="F#" Value="member this.DangerousRelease : unit -&gt; unit" Usage="safeHandle.DangerousRelease " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-1.5;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Runtime.InteropServices.SafeHandle" /> 인스턴스의 참조 카운터의 값을 수동으로 감소시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> 상응 하는 방법은 <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>합니다. 에 대 한 호출을 항상 일치 해야 합니다 <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> 메서드 호출에 성공한 <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>합니다.  
  
> [!CAUTION]
>  이 메서드는 고급 사용자를 대상으로 하며 항상 신중 하 게 사용 해야 합니다. 핸들 리소스 누수를 방지 하려면 항상 스레드 중단 처리를 중단할 수 없도록 여기서 제약이 있는 실행 지역 (CER) 내에서이 메서드를 호출 합니다. 동일한 방식으로 일치 하지 않는 <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> 호출에는 일치 하지 않는 리소스 누수 될 수 있습니다 <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> 호출에는 다른 스레드에 표시 되려면 잘못 된 핸들 상태가 발생할 수 있습니다. 노출 하지 마십시오 <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> 또는 <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> 신뢰할 수 없는 코드를 호출 합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Runtime.InteropServices.SafeHandle" /> 클래스에서 사용하는 리소스를 해제합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="safeHandle.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-1.5;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Runtime.InteropServices.SafeHandle" /> 클래스에서 사용하는 모든 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 된 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> 메서드를 사용 하면 리소스를 해제 합니다. 이 다른 스레드가 동일한 인스턴스의 safehandle 사용 하는 경우 즉시 발생 하지 않을 수 있지만 없는 경우 즉시 수행 됩니다. 하지만 대부분의 클래스를 사용 하 여 <xref:System.Runtime.InteropServices.SafeHandle> 때때로이 작업이 필요 (예: 파일 버퍼를 플러시 하거나 메모리에 일부 데이터를 다시 쓸), 종료자를 제공할 필요가 없습니다. 이 경우 보다 먼저 실행 되도록 보장 되는 종료자를 제공할 수 있습니다는 <xref:System.Runtime.InteropServices.SafeHandle> 중요 종료자 실행 합니다.  
  
 호출을 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> 마쳤으면 메서드를 사용 하 여는 <xref:System.Runtime.InteropServices.SafeHandle> 개체입니다. 합니다 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 메서드를 사용 하면은 <xref:System.Runtime.InteropServices.SafeHandle> 불안정 한 상태가 개체입니다.  
  
> [!NOTE]
>  항상 호출 합니다 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> 에 대 한 마지막 참조를 해제 하기 전에 메서드를 <xref:System.Runtime.InteropServices.SafeHandle> 개체입니다. 이렇게 하지 않으면 가비지 컬렉션이 <xref:System.Runtime.InteropServices.SafeHandle> 개체의 <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="safeHandle.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-1.5;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">일반적인 삭제 작업을 수행하려면 <see langword="true" />로 설정하고, 핸들을 종료하려면 <see langword="false" />로 설정합니다.</param>
        <summary>일반적인 삭제 작업을 수행할지 여부를 지정하여 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 클래스에서 사용하는 관리되지 않는 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 명시적으로 호출 해야 합니다 <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> 메서드를 `disposing` 매개 변수 설정 `false`합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SafeHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SafeHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="safeHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>핸들에 연결된 모든 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> 메서드는 소멸자를 <xref:System.Runtime.InteropServices.SafeHandle> 클래스입니다. 응용 프로그램 코드는이 메서드를 직접 호출할 수 없습니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="handle">
      <MemberSignature Language="C#" Value="protected IntPtr handle;" />
      <MemberSignature Language="ILAsm" Value=".field family native int handle" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.SafeHandle.handle" />
      <MemberSignature Language="VB.NET" Value="Protected handle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: IntPtr handle;" />
      <MemberSignature Language="F#" Value="val mutable handle : nativeint" Usage="System.Runtime.InteropServices.SafeHandle.handle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>래핑할 핸들을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 핸들을 공개적으로 노출 하지 않습니다 (즉, 파생된 클래스 외부에서).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.SafeHandle.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClosed : bool" Usage="System.Runtime.InteropServices.SafeHandle.IsClosed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>핸들이 닫혔는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>핸들이 닫혔으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> 메서드를 나타내는 값을 반환 하는지 여부를 <xref:System.Runtime.InteropServices.SafeHandle> 개체의 핸들 네이티브 리소스를 사용 하 여 연결 되어 있지 않습니다. 정의에서이 반해는 <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> 있는지 여부를 지정 된 핸들은 항상 잘못 된 것으로 계산 하는 속성입니다. 합니다 <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> 메서드가 반환 되는 `true` 다음과 같은 경우에는 값:  
  
-   <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> 메서드가 호출 되었습니다.  
  
-   <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> 메서드 또는 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 메서드를 호출한 되며에 대 한 참조를 <xref:System.Runtime.InteropServices.SafeHandle> 다른 스레드에서 개체입니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="IsInvalid">
      <MemberSignature Language="C#" Value="public abstract bool IsInvalid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInvalid" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsInvalid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsInvalid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInvalid : bool" Usage="System.Runtime.InteropServices.SafeHandle.IsInvalid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>파생 클래스에서 재정의된 경우 핸들 값이 잘못되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>핸들 값이 잘못되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생된 클래스에서 구현 해야 합니다는 <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> 속성 공용 언어 런타임에서 중요 한 종료 필요한 지 여부를 확인할 수 있도록 합니다. 파생된 클래스에는 지원 되는 핸들의 일반적인 유형에 적합 한 구현을 제공 해야 합니다 (0 또는-1 잘못 되었습니다.). 이러한 클래스 특정 안전한 핸들 형식에 대 한 추가 파생 한 후 수 있습니다.  
  
 달리 합니다 <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> 속성을 보고 하는 여부를 <xref:System.Runtime.InteropServices.SafeHandle> 개체 내부 핸들을 사용 하 여 완료를 <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> 속성 계산 하는지 여부를 지정 된 핸들 값을 항상 것으로 잘못 된. 따라서는 <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> 속성은 항상 하나의 핸들 값에 동일한 값을 반환 합니다.  
  
   
  
## Examples  
 다음 예제에서는 파일을 성공적으로 열린 경우를 확인 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Runtime.InteropServices.SafeHandle> 클래스입니다.  
  
 [!code-csharp[SafeHandle#2](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="protected abstract bool ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ReleaseHandle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; bool" Usage="safeHandle.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 재정의된 경우 핸들을 해제하는 데 필요한 코드를 실행합니다.</summary>
        <returns>핸들이 성공적으로 해제되면 <see langword="true" />이고, 심각한 오류가 발생하면 <see langword="false" />입니다. 이러한 경우 <see href="https://docs.microsoft.com/dotnet/framework/debug-trace-profile/releasehandlefailed-mda">releaseHandleFailed</see> 관리 디버깅 도우미가 생성됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> 핸들이 정의 된 대로 유효한 경우에만 한 번만 호출 될 메서드가 보장을 <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> 속성입니다. 이 메서드를 구현 하면 <xref:System.Runtime.InteropServices.SafeHandle> 핸들을 해제 하는 데 필요한 모든 코드를 실행 하는 클래스를 파생 합니다. 때문에 함수 중 하나 <xref:System.Runtime.InteropServices.SafeHandle> 구현에서 코드가 리소스 누수 방지를 보장 하는 것 <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> 실패 하지 해야 합니다. 가비지 수집기를 호출 하 여 <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> 일반 종료자 동시에 가비지 수집 된 개체에 대해 실행 한 후입니다. 가비지 수집기는이 메서드를 호출 하는 리소스를 보장 하 고 진행 되는 메서드 동안 중단 되지 것입니다. 이 메서드는 모든 메서드는 정적으로 결정할 수 있는 호출 그래프에서) (함께 인스턴스 생성 시 제약이 있는 실행 지역 (CER)으로 준비 됩니다. 하지만이 인해 스레드 중단, 계속 해야에서 재정의 된 모든 오류 경로 적용 하지 않도록 <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> 메서드. 특히 적용 된 <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> 메서드를 호출 하는 특성 <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>합니다. 대부분의 경우에서이 코드 여야 합니다.  
  
 `ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)`  
  
 또한 간단한 정리를 위한 (예를 들어 Windows API를 호출 `CloseHandle` 파일 핸들의) 단일 플랫폼 호출에 대 한 반환 값을 확인할 수 있습니다. 복잡 한 정리를 위한 많은 프로그램 논리 및 실패할 수 있는 여러 메서드 호출을 할 수 있습니다. 프로그램 논리는 이러한 각 경우에 대 한 대체 (fallback) 코드에 있는지 확인 해야 합니다.  
  
 하는 경우 <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> 반환 `false` 생성 어떤 이유로 [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) 관리 디버깅 도우미입니다.  이 기능을 사용 하면 리소스를 해제 하려고 하면 실패 하는 경우를 감지할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 핸들을 해제 하 고에 대해 제공 된 큰 예제의 일부는 <xref:System.Runtime.InteropServices.SafeHandle> 클래스입니다.  
  
 [!code-csharp[SafeHandle#3](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/76994ee6-9fa9-4059-b813-26578d24427c">관리 디버깅 도우미를 사용 하 여 런타임 오류 진단</related>
        <related type="Article" href="https://msdn.microsoft.com/library/44cd98ba-95e5-40a1-874d-e8e163612c51">releaseHandleFailed</related>
      </Docs>
    </Member>
    <Member MemberName="SetHandle">
      <MemberSignature Language="C#" Value="protected void SetHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.SetHandle : nativeint -&gt; unit" Usage="safeHandle.SetHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">사용할 기존 핸들입니다.</param>
        <summary>지정된 기존 핸들에 대한 핸들을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> 메서드는.NET Framework의 COM interop 인프라 마샬링을 지원 하지 않으므로 (예를 들어 구조에서 핸들을 반환 됨) 기존 핸들을 지원 해야 하는 경우에 구조에 대 한 핸들을 출력 합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetHandleAsInvalid">
      <MemberSignature Language="C#" Value="public void SetHandleAsInvalid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetHandleAsInvalid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetHandleAsInvalid ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetHandleAsInvalid();" />
      <MemberSignature Language="F#" Value="member this.SetHandleAsInvalid : unit -&gt; unit" Usage="safeHandle.SetHandleAsInvalid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-1.5;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>더 이상 사용되지 않는 핸들로 표시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 된 <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> 메서드는 사용자를 더 이상 참조 리소스를 알고 있는 경우에 합니다. 이렇게의 값을 변경 하지 않습니다는 <xref:System.Runtime.InteropServices.SafeHandle.handle> 필드; 핸들을 닫힘으로 표시만 합니다. 핸들 수 오래 된 값을 포함 합니다. 이 호출의 효과 하지는 리소스를 확보 하려고 합니다.  
  
 와 마찬가지로 합니다 <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> 메서드를 사용 하 여 <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> 기존 핸들을 지원 해야 하는 경우에 합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>