<Type Name="StructLayoutAttribute" FullName="System.Runtime.InteropServices.StructLayoutAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0500a6c0b16519278b21516985c9641cfd8c5ba4" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58701386" /></Metadata><TypeSignature Language="C#" Value="public sealed class StructLayoutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StructLayoutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.StructLayoutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StructLayoutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class StructLayoutAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type StructLayoutAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>메모리에 있는 클래스 또는 구조체의 데이터 필드에 대한 실제 레이아웃을 제어할 수 있습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 특성은 클래스 또는 구조체에 적용할 수 있습니다.  
  
 공용 언어 런타임 클래스 또는 구조체의 관리 되는 메모리의 데이터 필드에 대 한 실제 레이아웃을 제어합니다. 그러나 형식을 관리 되지 않는 코드에 전달 하려는 경우 사용할 수는 <xref:System.Runtime.InteropServices.StructLayoutAttribute> 특성 형식의 관리 되지 않는 레이아웃을 제어 합니다. 특성을 사용 하 여 <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> 멤버가 나타나는 순서 대로 순차적으로 배치 합니다. Blittable 형식에 대 한 <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> 모두 관리 되는 메모리의 레이아웃 및 관리 되지 않는 메모리의 레이아웃을 제어 합니다. 비 blittable 형식에 대 한 경우 클래스 또는 구조체 비관리 코드로 마샬링될 관리 되는 메모리의 레이아웃을 제어 하지는 않습니다 레이아웃을 제어 합니다. 특성을 사용 하 여 <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> 각 데이터 멤버의 정확한 위치를 제어 합니다. 이 모두 blittable 형식 및 비 blittable 형식에 대 한 관리 및 비관리 레이아웃을 영향을 줍니다. 사용 하 여 <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> 사용을 요구 하는 <xref:System.Runtime.InteropServices.FieldOffsetAttribute> 형식 내에서 각 필드의 위치를 나타내는 특성입니다.  
  
 C#, Visual Basic 및 c + + 컴파일러에서 적용 된 <xref:System.Runtime.InteropServices.LayoutKind.Sequential> 기본적으로 구조 레이아웃 값입니다. 클래스를 적용 해야 합니다는 <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> 값을 명시적으로 합니다. [Tlbimp.exe (형식 라이브러리 가져오기)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) 도 적용 됩니다는 <xref:System.Runtime.InteropServices.StructLayoutAttribute> 특성; 항상 적용 됩니다는 <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> 형식 라이브러리를 가져올 때 값입니다.  
  
   
  
## Examples  
 다음 예제에서는 관리 되는 선언 된 `GetSystemTime` 함수를 정의 `MySystemTime` 클래스와 <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> 레이아웃 합니다. `GetSystemTime` 콘솔 출력 및 시스템 시간을 가져옵니다.  
  
 [!code-cpp[StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/StructLayoutAttribute/CPP/structlayoutattribute.cpp#1)]
 [!code-csharp[StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/StructLayoutAttribute/CS/structlayoutattribute.cs#1)]
 [!code-vb[StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StructLayoutAttribute/VB/structlayoutattribute.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">Tlbimp.exe(형식 라이브러리 가져오기)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (short layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (layoutKind As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(short layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : int16 -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Int16" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="layoutKind">클래스나 구조체의 정렬 방법을 지정하는 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 값 중 하나를 나타내는 16비트 정수입니다.</param>
        <summary>지정된 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 열거형 멤버를 사용하여 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 기본 16 비트 정수를 각각 나타내는 <xref:System.Runtime.InteropServices.LayoutKind> 열거형 멤버입니다. 합니다 [Tlbimp.exe (형식 라이브러리 가져오기)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) 이 생성자를 사용 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
        <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">Tlbimp.exe(형식 라이브러리 가져오기)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.InteropServices.LayoutKind layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(System::Runtime::InteropServices::LayoutKind layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : System.Runtime.InteropServices.LayoutKind -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Runtime.InteropServices.LayoutKind" />
      </Parameters>
      <Docs>
        <param name="layoutKind">클래스나 구조체의 정렬 방법을 지정하는 열거형 값 중 하나입니다.</param>
        <summary>지정된 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 열거형 멤버를 사용하여 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 오류 발생 우려가 적은 읽을 수 있는 코드의 경우 항상이 생성자를 사용 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>클래스 내의 문자열 데이터 필드가 기본적으로 <see langword="LPWSTR" /> 또는 <see langword="LPSTR" />(으)로 마샬링되어야 하는지 여부를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 `CharSet` 필드 설정 됩니다 <xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType>, 모든 문자열 인수는 유니코드 문자로 변환 되는지 (`LPWSTR`) 관리 되지 않는 구현에 전달 되기 전에 합니다. 필드 설정 된 경우 <xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType>, 문자열을 ANSI 문자열로 변환 됩니다 (`LPSTR`). 경우는 `CharSet` 필드 설정 됩니다 <xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType>, 변환 되는 플랫폼에 따라 다릅니다 (Windows 98 및 Windows Me 및 이상 버전에는 유니코드에서 ANSI)입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="Pack">
      <MemberSignature Language="C#" Value="public int Pack;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Pack" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberSignature Language="VB.NET" Value="Public Pack As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Pack;" />
      <MemberSignature Language="F#" Value="val mutable Pack : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>메모리에 있는 클래스 또는 구조체의 데이터 필드 맞춤을 제어합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> 필드 형식의 필드에 메모리의 맞춤을 제어 합니다.  둘 다 영향을 줍니다 <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> 고 <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>입니다. 기본적으로 값은 0, 기본 압축 현재 플랫폼에 대 한 크기를 나타내는입니다. 변수의 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> 0, 1, 2, 4, 8, 16, 32, 64 또는 128 여야 합니다.  
  
 형식 인스턴스 필드는 다음 규칙을 사용 하 여 정렬 됩니다.  
  
-   형식의 맞춤을 가장 큰 요소의 크기입니다 (1, 2, 4, 8 등, 바이트) 또는 지정 된 압축 크기 중 더 작은 값입니다.  
  
-   각 필드는 자체 크기의 필드를 사용 하 여 정렬 되어야 합니다 (1, 2, 4, 8 등, 바이트) 또는 형식의 맞춤 중 더 작은 값입니다.  형식의 기본 맞춤은 다른 모든 필드 길이 보다 크거나가 가장 큰 요소의 크기 때문에 일반적으로 즉, 해당 크기에 따라 필드 맞추도록입니다. 경우에 가장 큰 필드 형식에는 64 비트 (8 바이트) 정수 또는 팩 필드 8로 설정 하는 예를 들어 <xref:System.Byte> 필드는 1 바이트 경계에 맞추고 <xref:System.Int16> 필드 2 바이트 경계에 맞추고 및 <xref:System.Int32> 4 바이트 경계에 맞추고 필드입니다.  
  
-   맞춤 요구 사항을 충족 하는 필드 사이의 안쪽 여백을 추가 됩니다.  
  
 예를 들어, 다음 구조를 두 개의 구성 되는 것이 좋습니다 <xref:System.Byte> 필드와 한 <xref:System.Int32> 필드를 다양 한 값을 사용 하는 경우는 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> 필드입니다.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex0.cs#1)]  
  
> [!IMPORTANT]
>  C# 예제를 성공적으로 컴파일하려면 지정 해야 합니다는 `/unsafe` 컴파일러 스위치입니다.  
  
 기본 압축 크기를 지정 하는 경우 구조체의 크기는 8 바이트입니다. 2 바이트는 바이트 1 바이트 경계에 정렬 해야 하기 때문에 메모리의 처음 2 바이트를 차지 합니다. 형식의 기본 맞춤은 4 바이트는 최대 필드 크기 때문에 `i3`, 가지 다음 2 바이트 정수 필드 뒤에 안쪽 여백입니다.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex1.cs#2)]  
  
 경우 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> 설정 된 구조체의 크기는 6 바이트를 2로 합니다. 이전에 하는 2 바이트 메모리의 처음 2 바이트를 차지합니다. 필드는 이제 2 바이트 경계에 맞추고, 때문에 두 번째 바이트 사이의 정수 채우지는 않습니다.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex2.cs#3)]  
  
 경우 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> 설정할지 4 인 구조체의 크기와 동일 형식의 맞춤의 가장 큰 필드의 크기에 따라 정의 된 위치를 기본 환경 `i3`, 4는 합니다.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex3.cs#4)]  
  
 하는 경우 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> 설정 된 구조체의 크기는 여전히 8로 기본 동일 경우 때문에 `i3` 필드 팩 필드로 지정 된 8 바이트 경계 보다 작은 4 바이트 경계에 맞춥니다.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex4.cs#5)]  
  
 또 다른 예로, 다음 구조를 2 바이트 필드, 하나의 32 비트 부호 있는 정수 필드, 하나의 단일 요소 바이트 배열 및 10 진수 값으로 구성 하는 것이 좋습니다. 기본 압축 크기를 사용 하 여 구조체의 크기는 28 바이트입니다. 2 바이트의 메모리를 2 바이트의 패딩이, 정수 뒤에 오는 첫 번째 2 바이트를 차지 합니다. 다음은 세 가지 바이트의 패딩이 뒤에 1 바이트 배열입니다. 마지막으로 <xref:System.Decimal> 10 진수 값 4의 구성 때문에 필드를 d5에 4 바이트 경계에 맞춥니다 <xref:System.Int32> 필드를 해당 맞춤은 크기를 기준으로 가장 하도록 아닌의 크기에 해당 필드의는 <xref:System.Decimal> 전체 구조입니다.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex5.cs#6)]  
  
 경우 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> 설정 된 구조체의 크기는 24 바이트 2로 합니다. 기본 맞춤을 비교 하 여 형식의 맞춤은 2가 아닌 4 이제 때문에 2 바이트 정수 사이의 안쪽 여백 2 바이트 없어졌습니다. 및 안쪽 여백 후 3 바이트 `a4` 이후 1 바이트의 안쪽 여백으로 대체 되었습니다 `d5` 이제 4 바이트 경계 보다는 2 바이트 경계에 맞춥니다.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex6.cs#7)]  
  
 경우 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> 설정할지 8 구조체의 크기와 동일 기본적이이 구조체의 맞춤 요구 사항 8 보다 작으면 되므로 합니다.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex7.cs#8)]  
  
 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> 필드는 및 네트워크 쓰기 작업을 하는 동안 디스크에 구조체를 내보낼 때 자주 사용 됩니다. 필드도 자주 사용 하는 동안 플랫폼 호출 및 interop 작업 합니다.  
  
 경우에 따라 필드를 보다 긴밀 하 게 압축 크기를 생성 하 여 메모리 요구 사항을 줄이기 위해 사용 됩니다. 그러나이 실제 하드웨어 제약 조건을 신중히 사용량과 실제로 성능이 저하 될 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Size" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberSignature Language="VB.NET" Value="Public Size As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Size;" />
      <MemberSignature Language="F#" Value="val mutable Size : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>클래스나 구조체의 절대적인 크기를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 필드는 클래스 또는 구조체의 멤버 중 바이트의 총 크기 보다 크거나 같은 이어야 합니다. 이 필드는 컴파일러 작성자가 직접 관리 되지 않는 액세스에 대 한 구조에서 사용한 메모리를 확장할 주로입니다. 예를 들어, 직접 메타 데이터에 표현 되지 않는 공용 구조체를 사용 하 여 작업 하는 경우이 필드를 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.LayoutKind Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.InteropServices.LayoutKind Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As LayoutKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::LayoutKind Value { System::Runtime::InteropServices::LayoutKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : System.Runtime.InteropServices.LayoutKind" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.LayoutKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>클래스나 구조의 배열 방법을 지정하는 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 값을 가져옵니다.</summary>
        <value>클래스나 구조체의 정렬 방법을 지정하는 열거형 값 중 하나입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>