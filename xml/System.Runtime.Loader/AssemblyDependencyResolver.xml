<Type Name="AssemblyDependencyResolver" FullName="System.Runtime.Loader.AssemblyDependencyResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="51c36a2494ae273e5a140ba5c5a0d093148c1ddf" /><Meta Name="ms.sourcegitcommit" Value="95e24aee1283af2f120fc5da4b0bdc0712ab698f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/06/2019" /><Meta Name="ms.locfileid" Value="65156090" /></Metadata><TypeSignature Language="C#" Value="public sealed class AssemblyDependencyResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AssemblyDependencyResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Loader.AssemblyDependencyResolver" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AssemblyDependencyResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class AssemblyDependencyResolver sealed" />
  <TypeSignature Language="F#" Value="type AssemblyDependencyResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Loader</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>지정된 된 어셈블리의 종속성을 기반으로 하는 경로에 어셈블리 및 네이티브 라이브러리를 해결 하는 프로그램을 수 있습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 합니다 `AssemblyDependencyResolver` 클래스를 사용 하면 응용 프로그램 개발자가 함께 사용자 지정 플러그 인 아키텍처를 더 간단히 개발할 <xref:System.Runtime.Loader.AssemblyLoadContext?displayProperty=nameWithType> 인스턴스를 플러그 인을 격리 및 종속성 로드 플러그 인을 사용 하도록 설정할 수도 있습니다.

 [플러그 인을 사용 하 여.NET Core 응용 프로그램을 만들기에 대 한 자습서](https://docs.microsoft.com/dotnet/core/tutorials/creating-app-with-plugin-support) 사용자 지정을 만드는 방법을 설명 합니다 <xref:System.Runtime.Loader.AssemblyLoadContext> 를 사용 하는 `AssemblyDependencyResolver` 플러그 인의 종속성을 해결 하 고 올바르게 플러그 인의 종속성을 격리 하려면 호스팅 응용 프로그램입니다.
 
    ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AssemblyDependencyResolver (string componentAssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string componentAssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Loader.AssemblyDependencyResolver.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (componentAssemblyPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AssemblyDependencyResolver(System::String ^ componentAssemblyPath);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Loader.AssemblyDependencyResolver : string -&gt; System.Runtime.Loader.AssemblyDependencyResolver" Usage="new System.Runtime.Loader.AssemblyDependencyResolver componentAssemblyPath" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Loader</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="componentAssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="componentAssemblyPath">경로 구성 요소 또는 관리 되는 플러그 인의 진입점입니다.</param>
        <summary>새 인스턴스를 초기화 합니다 <see cref="T:System.Runtime.Loader.AssemblyDependencyResolver" /> 구성 요소의 어셈블리에 대 한 경로 사용 하 여 클래스입니다.</summary>
        <remarks>`componentAssemblyPath` 상대 또는 절대 경로일 수 있습니다. 어셈블리에는 해당 deps.json 파일 어셈블리의 종속성을 설명 하는 동일한 디렉터리에 있어야 합니다. 이 파일은 빌드 프로세스 중 출력입니다.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveAssemblyToPath">
      <MemberSignature Language="C#" Value="public string ResolveAssemblyToPath (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ResolveAssemblyToPath(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Loader.AssemblyDependencyResolver.ResolveAssemblyToPath(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ResolveAssemblyToPath(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.ResolveAssemblyToPath : System.Reflection.AssemblyName -&gt; string" Usage="assemblyDependencyResolver.ResolveAssemblyToPath assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Loader</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName">해결 하려면 어셈블리 이름입니다.</param>
        <summary>구성 요소의 종속성을 기반으로 지정 된 어셈블리 이름을 사용 하 여 어셈블리에 경로 확인 합니다.</summary>
        <returns>구성 요소의 deps.json 파일에서 지정 된 이름의 어셈블리에 경로 또는 <c>null</c> 어셈블리 deps.json 파일에 존재 하지 않거나 deps.json 파일에 지정 된 위치에는 디스크에 없는 경우.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveUnmanagedDllToPath">
      <MemberSignature Language="C#" Value="public string ResolveUnmanagedDllToPath (string unmanagedDllName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ResolveUnmanagedDllToPath(string unmanagedDllName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Loader.AssemblyDependencyResolver.ResolveUnmanagedDllToPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ResolveUnmanagedDllToPath (unmanagedDllName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ResolveUnmanagedDllToPath(System::String ^ unmanagedDllName);" />
      <MemberSignature Language="F#" Value="member this.ResolveUnmanagedDllToPath : string -&gt; string" Usage="assemblyDependencyResolver.ResolveUnmanagedDllToPath unmanagedDllName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Loader</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unmanagedDllName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unmanagedDllName">해결 하려면 네이티브 라이브러리의 이름입니다.</param>
        <summary>지정 된 이름의 구성 요소의 종속성을 기반으로 네이티브 라이브러리 경로 확인 합니다.</summary>
        <returns>구성 요소의 deps.json 파일 및 현재 런타임 식별자에서 지정한 이름을 가진 네이티브 라이브러리에 경로 또는 <c>null</c> 어셈블리 deps.json 파일에 존재 하지 않거나 지정 된 위치에서 디스크에 없는 경우는 deps.json 파일입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>