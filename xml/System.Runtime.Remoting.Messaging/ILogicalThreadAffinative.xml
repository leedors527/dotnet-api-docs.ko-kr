<Type Name="ILogicalThreadAffinative" FullName="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bb7d87b2642cb63692bb7f07edc3f1b55dbf2b8b" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48614414" /></Metadata><TypeSignature Language="C#" Value="public interface ILogicalThreadAffinative" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILogicalThreadAffinative" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />
  <TypeSignature Language="VB.NET" Value="Public Interface ILogicalThreadAffinative" />
  <TypeSignature Language="C++ CLI" Value="public interface class ILogicalThreadAffinative" />
  <TypeSignature Language="F#" Value="type ILogicalThreadAffinative = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:System.AppDomain" />의 <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" />에서 전파되는 개체를 표시합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때 원격 메서드 호출에서 다른 개체에 <xref:System.AppDomain>, 현재 <xref:System.Runtime.Remoting.Messaging.CallContext> 클래스 생성을 <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> 원격 위치에 대 한 호출과 함께 전송 되는 합니다. 개체만 해당 노출 합니다 <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> 인터페이스와 저장 됩니다 합니다 <xref:System.Runtime.Remoting.Messaging.CallContext> 전파 됩니다는 <xref:System.AppDomain>. 이 인터페이스를 지원 하지 않는 개체에 전송 되지 않은 <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> 원격 메서드 호출을 사용 하 여 인스턴스.  
  
   
  
## Examples  
 다음 코드 예제에서는 합니다 <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> 전송할 인터페이스 [Principal 개체 및 Identity 개체](~/docs/standard/security/principal-and-identity-objects.md) id에 대 한 원격 위치에. 에 대 한 코드를 보려면 합니다 `HelloServiceClass` 샘플에서 사용 되는 클래스에 대 한 예제를 참조 하십시오는 <xref:System.Runtime.Remoting.Messaging.CallContext.GetData%2A> 메서드. 이 샘플에서 사용 하는 서버 클래스에 대 한 코드를 보려면 예제를 참조 하세요.를 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> 클래스입니다. 샘플에 사용 되는 클라이언트 클래스에 대 한 코드를 보려면 참조에 대 한 예제는 <xref:System.Runtime.Remoting.Messaging.CallContext> 클래스입니다.  
  
 [!code-cpp[CallContext#2](~/samples/snippets/cpp/VS_Snippets_Remoting/CallContext/CPP/service.cpp#2)]
 [!code-csharp[CallContext#2](~/samples/snippets/csharp/VS_Snippets_Remoting/CallContext/CS/service.cs#2)]
 [!code-vb[CallContext#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CallContext/VB/service.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>