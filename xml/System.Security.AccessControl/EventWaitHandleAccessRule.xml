<Type Name="EventWaitHandleAccessRule" FullName="System.Security.AccessControl.EventWaitHandleAccessRule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1823bfe35d79bce296f98b040b9556abb3ba60a5" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56768373" /></Metadata><TypeSignature Language="C#" Value="public sealed class EventWaitHandleAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventWaitHandleAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.EventWaitHandleAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventWaitHandleAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventWaitHandleAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type EventWaitHandleAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>사용자 또는 그룹에 대해 허용 또는 거부된 액세스 권한 집합을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 클래스는 명명 된 시스템 이벤트에 Windows 액세스 제어 보안을 관리 하기 위한.NET Framework에서 제공 하는 클래스 집합 중 하나입니다. 이러한 클래스와 기본 Windows 액세스 제어 구조 간의 관계가 개요를 참조 하세요. <xref:System.Security.AccessControl.EventWaitHandleSecurity>합니다.  
  
> [!NOTE]
>  Windows 액세스 제어 보안은 명명 된 시스템 이벤트에 대해서만 의미가 있습니다. 경우는 <xref:System.Threading.EventWaitHandle> 개체는 로컬 이벤트를 나타내는, 액세스 제어는 관련이 없습니다.  
  
 명명된 된 이벤트에 현재 적용 된 규칙의 목록의 사용 합니다 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 메서드를를 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체를 사용 하 여 해당 <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> 컬렉션을 가져오는 방법 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 개체입니다.  
  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 개체는 기본 임의 액세스 제어 목록 (DACL)에 대 한 액세스 제어 항목을 사용 하 여 한 일 매핑되지 않습니다. 이벤트에 대 한 모든 액세스 규칙의 집합을 가져오면 집합은 현재 모든 액세스 제어 항목을 나타내는 데 필요한 규칙의 최소 수를 포함 합니다.  
  
> [!NOTE]
>  기본 액세스 제어 항목에 적용 하 고 규칙을 제거 하는 대로 변경 합니다. 규칙의 정보는 액세스 제어 항목의 최소 수를 유지 하기 위해 가능한 경우 병합 됩니다. 따라서 규칙의 현재 목록을 가져올 때 사용자가 추가한 모든 규칙 목록을 똑같이 하지 보일 수 있습니다.  
  
 사용 하 여 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 개체를 허용 하거나 거부할 사용자 또는 그룹에 대 한 액세스 권한을 지정 합니다. <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 나타냅니다 액세스를 허용 하거나 거부 된 액세스 되지 둘 다 항상 개체입니다.  
  
 명명된 된 시스템 이벤트에 규칙을 적용 하려면 사용 합니다 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 메서드를를 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체입니다. 수정 된 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 규칙 추가를 사용 하 여 해당 메서드를 사용 하 여 개체를 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> 보안 개체를 다시 연결 하는 방법입니다.  
  
> [!IMPORTANT]
>  변경 하는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체를 호출 하기 전에 명명된 된 이벤트의 액세스 수준을 영향을 주지 않습니다는 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> 명명된 된 이벤트에 변경 된 보안 개체를 할당 하는 방법입니다.  
  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 개체는 변경할 수 없습니다. 메서드를 사용 하 여 이벤트에 대 한 보안 수정 되는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 클래스 추가 하거나 제거 하려면 규칙, 이렇게 하면 기본 액세스 제어 항목 수정 됩니다.  
  
> [!NOTE]
>  Windows 98 또는 Windows Millennium Edition에 대 한 동기화 개체에 대 한 보안 지원 되지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 생성 및 사용 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 개체입니다. 이 예에서는 만듭니다는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체를 허용 하 고 현재 사용자에 대 한 다양 한 권한을 거부 하는 규칙을 추가 하 고 결과 쌍 규칙을 표시 합니다. 이 예제에서는 그런 다음 현재 사용자에 대 한 새 권한을 허용 하 고 새 권한이 기존 병합 되는 표시 하 고 결과 표시 <xref:System.Security.AccessControl.AccessControlType.Allow> 규칙입니다.  
  
> [!NOTE]
>  이 예제에서는 보안 개체를 연결 하지 않습니다는 <xref:System.Threading.EventWaitHandle> 개체입니다. 보안 개체를 연결 하는 예제를 찾을 수 있습니다 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 고 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>입니다.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.EventWaitHandleSecurity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.EventWaitHandleRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, eventRights As EventWaitHandleRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::EventWaitHandleRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.EventWaitHandleAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.EventWaitHandleRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.EventWaitHandleAccessRule" Usage="new System.Security.AccessControl.EventWaitHandleAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">규칙을 적용할 사용자나 그룹입니다. 이 값은 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 형식이거나 <see cref="T:System.Security.Principal.NTAccount" />와 같이 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 형식으로 변환할 수 있는 형식이어야 합니다.</param>
        <param name="eventRights">허용 또는 거부 권한을 지정하는 <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> 값의 비트 조합입니다.</param>
        <param name="type">권한 허용 여부를 지정하는 <see cref="T:System.Security.AccessControl.AccessControlType" /> 값 중 하나입니다.</param>
        <summary><see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> 클래스의 새 인스턴스를 초기화하여 규칙을 적용할 사용자 또는 그룹, 액세스 권한 및 지정된 액세스 권한의 허용 또는 거부를 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대기할를 <xref:System.Threading.EventWaitHandle> (호출 하 여 합니다 <xref:System.Threading.WaitHandle.WaitOne%2A>를 <xref:System.Threading.WaitHandle.WaitAny%2A> 또는 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드), 사용자에 게 있어야 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> 액세스 합니다. 호출 하 여 이벤트를 알리기 위해를 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드를 호출 하 여 알림에서 신호 알림 해제 상태로 다시 설정 하려면 합니다 <xref:System.Threading.EventWaitHandle.Reset%2A> 메서드를 사용자에 게 있어야 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> 액세스 합니다. 신호를 <xref:System.Threading.EventWaitHandle> 개체를 호출 하 여 다음에서 대기 합니다 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 메서드를 사용자에 게 있어야 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> 및 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> 액세스.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights" />가 잘못된 값을 지정하는 경우  
  
또는 
 <paramref name="type" />가 잘못된 값을 지정하는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="eventRights" />가 0입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" />의 형식이 <see cref="T:System.Security.Principal.SecurityIdentifier" />도 아니고 <see cref="T:System.Security.Principal.NTAccount" />와 같이 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 형식으로 변환할 수 있는 형식도 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleAccessRule (string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.EventWaitHandleRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, eventRights As EventWaitHandleRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleAccessRule(System::String ^ identity, System::Security::AccessControl::EventWaitHandleRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.EventWaitHandleAccessRule : string * System.Security.AccessControl.EventWaitHandleRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.EventWaitHandleAccessRule" Usage="new System.Security.AccessControl.EventWaitHandleAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">규칙을 적용할 사용자나 그룹의 이름입니다.</param>
        <param name="eventRights">허용 또는 거부 권한을 지정하는 <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> 값의 비트 조합입니다.</param>
        <param name="type">권한 허용 여부를 지정하는 <see cref="T:System.Security.AccessControl.AccessControlType" /> 값 중 하나입니다.</param>
        <summary><see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> 클래스의 새 인스턴스를 초기화하여 규칙을 적용할 사용자 또는 그룹의 이름, 액세스 권한 및 지정된 액세스 권한의 허용 또는 거부 여부를 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대기할를 <xref:System.Threading.EventWaitHandle> (호출 하 여 합니다 <xref:System.Threading.WaitHandle.WaitOne%2A>를 <xref:System.Threading.WaitHandle.WaitAny%2A> 또는 <xref:System.Threading.WaitHandle.WaitAll%2A> 메서드), 사용자에 게 있어야 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> 액세스 합니다. 호출 하 여 이벤트를 알리기 위해를 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드를 호출 하 여 알림에서 신호 알림 해제 상태로 다시 설정 하려면 합니다 <xref:System.Threading.EventWaitHandle.Reset%2A> 메서드를 사용자에 게 있어야 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> 액세스 합니다. 신호를 <xref:System.Threading.EventWaitHandle> 개체를 호출 하 여 다음에서 대기 합니다 <xref:System.Threading.WaitHandle.SignalAndWait%2A> 메서드를 사용자에 게 있어야 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> 및 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> 액세스.  
  
 이 생성자는 만드는 것과 같습니다는 <xref:System.Security.Principal.NTAccount> 개체를 전달 하 여 `identity` 에 <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> 생성자 및 새로 만든 전달 <xref:System.Security.Principal.NTAccount> 개체를 <xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29> 생성자입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 만들려면이 생성자를 사용 하는 방법을 보여 줍니다 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 개체입니다. 이 예에서는 만듭니다는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체를 허용 하 고 현재 사용자에 대 한 다양 한 권한을 거부 하는 규칙을 추가 하 고 결과 쌍 규칙을 표시 합니다. 이 예제에서는 그런 다음 현재 사용자에 대 한 새 권한을 허용 하 고 새 권한이 기존 병합 되는 표시 하 고 결과 표시 <xref:System.Security.AccessControl.AccessControlType.Allow> 규칙입니다.  
  
> [!NOTE]
>  이 예제에서는 보안 개체를 연결 하지 않습니다는 <xref:System.Threading.EventWaitHandle> 개체입니다. 보안 개체를 연결 하는 예제를 찾을 수 있습니다 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 고 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>입니다.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights" />가 잘못된 값을 지정하는 경우  
  
또는 
 <paramref name="type" />가 잘못된 값을 지정하는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="eventRights" />가 0입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="identity" />이 빈 문자열인 경우  
  
또는 
 <paramref name="identity" />이 512자보다 깁니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="EventWaitHandleRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventWaitHandleRights As EventWaitHandleRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::EventWaitHandleRights EventWaitHandleRights { System::Security::AccessControl::EventWaitHandleRights get(); };" />
      <MemberSignature Language="F#" Value="member this.EventWaitHandleRights : System.Security.AccessControl.EventWaitHandleRights" Usage="System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.EventWaitHandleRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>액세스 규칙에 의해 허용 또는 거부된 권한을 가져옵니다.</summary>
        <value>액세스 규칙에 의해 허용되거나 거부된 권한을 나타내는 <see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> 값의 비트 조합입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 개체는 변경할 수 없습니다. 다른 사용자, 다른 권한 또는 다른을 나타내는 새 액세스 규칙을 만들 수 있습니다 <xref:System.Security.AccessControl.AccessControlType>, 있지만 기존 액세스 규칙을 수정할 수 없습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 합니다 <xref:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights%2A> 속성에 포함 된 규칙 집합에는 권한을 표시 하는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체입니다. 이 예에서는 만듭니다는 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 개체를 허용 하 고 현재 사용자에 대 한 다양 한 권한을 거부 하는 규칙을 추가 하 고 결과 쌍 규칙을 표시 합니다. 이 예제에서는 그런 다음 현재 사용자에 대 한 새 권한을 허용 하 고 새 권한이 기존 병합 되는 표시 하 고 결과 표시 <xref:System.Security.AccessControl.AccessControlType.Allow> 규칙입니다.  
  
> [!NOTE]
>  이 예제에서는 보안 개체를 연결 하지 않습니다는 <xref:System.Threading.EventWaitHandle> 개체입니다. 보안 개체를 연결 하는 예제를 찾을 수 있습니다 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 고 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType>입니다.  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>