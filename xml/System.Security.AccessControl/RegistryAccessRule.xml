<Type Name="RegistryAccessRule" FullName="System.Security.AccessControl.RegistryAccessRule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="05092fb102436072a910f45f35b944062528182b" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56760833" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistryAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistryAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistryAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type RegistryAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>사용자 또는 그룹에 대해 허용 또는 거부된 액세스 권한 집합을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAccessRule> 클래스는 레지스트리 키에 대해 Windows 액세스 제어 보안을 관리 하기 위한.NET Framework에서 제공 하는 클래스 집합 중 하나입니다. 이러한 클래스와 기본 Windows 액세스 제어 구조 간의 관계가 개요를 참조 하세요. <xref:System.Security.AccessControl.RegistrySecurity>합니다.  
  
> [!NOTE]
>  Windows 액세스 제어 보안 레지스트리 키에만 적용할 수 있습니다. 키에 저장 하는 개별 키/값 쌍에 적용할 수 없습니다.  
  
 레지스트리 키에 현재 적용 된 규칙의 목록의 사용 합니다 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> 메서드를를 <xref:System.Security.AccessControl.RegistrySecurity> 개체를 사용 하 여 해당 <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> 컬렉션을 가져오는 방법 <xref:System.Security.AccessControl.RegistryAccessRule> 개체입니다.  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> 개체는 기본 임의 제어 액세스 목록 (DACL)에 대 한 액세스 제어 항목을 사용 하 여 한 일 매핑되지 않습니다. 레지스트리 키에 대 한 모든 액세스 규칙의 집합을 가져오면 집합은 현재 모든 액세스 제어 항목을 나타내는 데 필요한 규칙의 최소 수를 포함 합니다.  
  
> [!NOTE]
>  기본 액세스 제어 항목에 적용 하 고 규칙을 제거 하는 대로 변경 합니다. 규칙의 정보는 액세스 제어 항목의 최소 수를 유지 하기 위해 가능한 경우 병합 됩니다. 따라서 규칙의 현재 목록을 읽을 때 추가한 모든 규칙의 목록을 똑같이 하지 보일 수 있습니다.  
  
 사용 하 여 <xref:System.Security.AccessControl.RegistryAccessRule> 개체를 허용 하거나 거부할 사용자 또는 그룹에 대 한 액세스 권한을 지정 합니다. <xref:System.Security.AccessControl.RegistryAccessRule> 나타냅니다 액세스를 허용 하거나 거부 된 액세스 되지 둘 다 항상 개체입니다.  
  
 레지스트리 키에 규칙을 적용 하려면 사용 합니다 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> 메서드를를 <xref:System.Security.AccessControl.RegistrySecurity> 개체입니다. 수정 된 <xref:System.Security.AccessControl.RegistrySecurity> 규칙 추가를 사용 하 여 해당 메서드를 사용 하 여 개체를 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> 보안 개체를 다시 연결 하는 방법입니다.  
  
> [!IMPORTANT]
>  변경한을 <xref:System.Security.AccessControl.RegistrySecurity> 호출할 때까지 개체에서는 레지스트리 키의 액세스 수준을 주지 않습니다는 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> 레지스트리 키 변경 된 보안 개체를 할당 하는 방법입니다.  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> 개체는 변경할 수 없습니다. 메서드를 사용 하 여 레지스트리 키에 대 한 보안 수정 되는 <xref:System.Security.AccessControl.RegistrySecurity> 클래스 추가 하거나 제거 하려면 규칙, 이렇게 하면 기본 액세스 제어 항목 수정 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 상속 및 전파를 사용 하 여 액세스 규칙을 보여 줍니다. 이 예에서는 만듭니다는 <xref:System.Security.AccessControl.RegistrySecurity> 개체, 한 다음를 만들고 있는 두 개의 규칙을 추가 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> 플래그입니다. 첫 번째 규칙에 전파 플래그가 없으므로 두 번째 <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> 고 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>입니다.  
  
 프로그램에 규칙을 표시 합니다 <xref:System.Security.AccessControl.RegistrySecurity> 개체를 다음 개체를 사용 하 여 하위 키를 만듭니다. 프로그램 자식 하위 키 및 손자 하위 키를 만들고 각 하위 키에 대 한 보안을 표시 합니다. 마지막으로 프로그램은 테스트 키를 삭제 합니다.  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">규칙을 적용할 사용자나 그룹입니다. 이 값은 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 형식이거나 <see cref="T:System.Security.Principal.NTAccount" />와 같이 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 형식으로 변환할 수 있는 형식이어야 합니다.</param>
        <param name="registryRights">허용 또는 거부 권한을 나타내는 <see cref="T:System.Security.AccessControl.RegistryRights" /> 값의 비트 조합입니다.</param>
        <param name="type">권한 허용 여부를 나타내는 <see cref="T:System.Security.AccessControl.AccessControlType" /> 값 중 하나입니다.</param>
        <summary><see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 클래스의 새 인스턴스를 초기화하여 규칙을 적용할 사용자 또는 그룹, 액세스 권한 및 지정된 액세스 권한의 허용 또는 거부를 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 기본 전파 및 상속을 지정합니다. 즉, <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> 고 <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" />가 잘못된 값을 지정하는 경우  
  
또는 
 <paramref name="type" />가 잘못된 값을 지정하는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="eventRights" />가 0입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" />의 형식이 <see cref="T:System.Security.Principal.SecurityIdentifier" />도 아니고 <see cref="T:System.Security.Principal.NTAccount" />와 같이 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 형식으로 변환할 수 있는 형식도 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">규칙을 적용할 사용자나 그룹의 이름입니다.</param>
        <param name="registryRights">허용 또는 거부 권한을 나타내는 <see cref="T:System.Security.AccessControl.RegistryRights" /> 값의 비트 조합입니다.</param>
        <param name="type">권한 허용 여부를 나타내는 <see cref="T:System.Security.AccessControl.AccessControlType" /> 값 중 하나입니다.</param>
        <summary><see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 클래스의 새 인스턴스를 초기화하여 규칙을 적용할 사용자 또는 그룹의 이름, 액세스 권한 및 지정된 액세스 권한의 허용 또는 거부 여부를 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 기본 전파 및 상속을 지정합니다. 즉, <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> 고 <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>입니다.  
  
 이 생성자는 만드는 것과 같습니다는 <xref:System.Security.Principal.NTAccount> 개체를 전달 하 여 `identity` 에 <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> 생성자 및 새로 만든 전달 <xref:System.Security.Principal.NTAccount> 개체를 <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> 생성자입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 레지스트리 액세스 규칙을 만들고 추가 합니다는 <xref:System.Security.AccessControl.RegistrySecurity> 을 보여 주는 개체 권한을 허용 및 거부 하는 규칙의 호환 규칙 하는 동안 별도로 유지 하는 방법 종류 병합 됩니다.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" />가 잘못된 값을 지정하는 경우  
  
또는 
 <paramref name="type" />가 잘못된 값을 지정하는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="registryRights" />가 0입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="identity" />이 빈 문자열인 경우  
  
또는 
 <paramref name="identity" />이 512자보다 깁니다.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">규칙을 적용할 사용자나 그룹입니다. 이 값은 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 형식이거나 <see cref="T:System.Security.Principal.NTAccount" />와 같이 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 형식으로 변환할 수 있는 형식이어야 합니다.</param>
        <param name="registryRights">허용 또는 거부 권한을 지정하는 <see cref="T:System.Security.AccessControl.RegistryRights" /> 값의 비트 조합입니다.</param>
        <param name="inheritanceFlags">액세스 권한이 다른 개체에서 상속되는 방식을 지정하는 <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 플래그의 비트 조합입니다.</param>
        <param name="propagationFlags">액세스 권한이 다른 개체로 전파되는 방식을 지정하는 <see cref="T:System.Security.AccessControl.PropagationFlags" /> 플래그의 비트 조합입니다.</param>
        <param name="type">권한 허용 여부를 지정하는 <see cref="T:System.Security.AccessControl.AccessControlType" /> 값 중 하나입니다.</param>
        <summary>규칙을 적용할 사용자 또는 그룹, 액세스 권한, 상속 플래그, 전파 플래그 및 지정된 액세스 권한의 허용 여부를 지정하여 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 레지스트리 키에 대 한 의미 있는 유일한 상속 플래그 이므로 모든 레지스트리 키가 컨테이너를 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> 플래그입니다. 이 플래그를 지정 하지 않으면 전파 플래그는 무시 되 고 즉시 키만 영향을 받습니다. 플래그가 있는 경우 규칙은 다음 표에 나와 있는 것 처럼 전파 됩니다. 테이블 S 자식 하위 키 CS와 GS 손자 하위 키를 사용 하 여 하위 키가 있는 것을 가정 합니다. 즉, 최하위 하위 키에 대 한 경로가 S\CS\GS 합니다.  
  
|전파 플래그|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 손자 하위 키에 대 한 패턴에 포함 된 모든 하위 키를 제어 합니다.  
  
 예를 들어 경우는 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> 에 대 한 플래그가 지정 된 `inheritanceFlags` 하며 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> 전파 플래그를 지정 `propagationFlags`,이 규칙을 직접 하위 키에 적용 되지 않습니다 하지만 모든 하위 키 및 모든 직계 자식 하위 키에 적용 하는 포함 됩니다.  
  
> [!NOTE]
>  지정할 수는 있지만 합니다 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> 플래그 `inheritanceFlags`, 이렇게 지점이 없습니다. 액세스 제어를 위해 하위 키에서 이름/값 쌍을 없는 별도 개체입니다. 이름/값 쌍에 액세스 권한은 하위 키의 사용 권한에 따라 제어 됩니다. 또한 모든 하위 컨테이너 이므로 (즉, 이러한 포함할 수 있습니다 다른 하위 키), 영향을 받지 않습니다는 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 플래그입니다. 마지막으로, 지정 된 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 플래그 규칙 유지 관리를 호환 되는 규칙의 조합은 방해가 되기 때문에 불필요 하 게 복잡해 집니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" />가 잘못된 값을 지정하는 경우  
  
또는 
 <paramref name="type" />가 잘못된 값을 지정하는 경우  
  
또는 
 <paramref name="inheritanceFlags" />가 잘못된 값을 지정하는 경우  
  
또는 
 <paramref name="propagationFlags" />가 잘못된 값을 지정하는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="registryRights" />가 0입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" />의 형식이 <see cref="T:System.Security.Principal.SecurityIdentifier" />도 아니고 <see cref="T:System.Security.Principal.NTAccount" />와 같이 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 형식으로 변환할 수 있는 형식도 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">규칙을 적용할 사용자나 그룹의 이름입니다.</param>
        <param name="registryRights">허용 또는 거부 권한을 나타내는 <see cref="T:System.Security.AccessControl.RegistryRights" /> 값의 비트 조합입니다.</param>
        <param name="inheritanceFlags">액세스 권한이 다른 개체에서 상속되는 방식을 지정하는 <see cref="T:System.Security.AccessControl.InheritanceFlags" /> 플래그의 비트 조합입니다.</param>
        <param name="propagationFlags">액세스 권한이 다른 개체로 전파되는 방식을 지정하는 <see cref="T:System.Security.AccessControl.PropagationFlags" /> 플래그의 비트 조합입니다.</param>
        <param name="type">권한 허용 여부를 지정하는 <see cref="T:System.Security.AccessControl.AccessControlType" /> 값 중 하나입니다.</param>
        <summary><see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 클래스의 새 인스턴스를 초기화하여 규칙을 적용할 사용자 또는 그룹의 이름, 액세스 권한, 상속 플래그, 전파 플래그 및 지정된 액세스 권한의 허용 또는 거부 여부를 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 레지스트리 키에 대 한 의미 있는 유일한 상속 플래그 이므로 모든 레지스트리 키가 컨테이너를 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> 플래그입니다. 이 플래그를 지정 하지 않으면 전파 플래그는 무시 되 고 즉시 키만 영향을 받습니다. 플래그가 있는 경우 규칙은 다음 표에 나와 있는 것 처럼 전파 됩니다. 테이블 S 자식 하위 키 CS와 GS 손자 하위 키를 사용 하 여 하위 키가 있는 것을 가정 합니다. 즉, 최하위 하위 키에 대 한 경로가 S\CS\GS 합니다.  
  
|전파 플래그|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 손자 하위 키에 대 한 패턴에 포함 된 모든 하위 키를 제어 합니다.  
  
 예를 들어 경우는 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> 에 대 한 플래그가 지정 된 `inheritanceFlags` 하며 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> 전파 플래그를 지정 `propagationFlags`,이 규칙을 직접 하위 키에 적용 되지 않습니다 하지만 모든 하위 키 및 모든 직계 자식 하위 키에 적용 하는 포함 됩니다.  
  
> [!NOTE]
>  지정할 수는 있지만 합니다 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> 플래그 `inheritanceFlags`, 이렇게 지점이 없습니다. 액세스 제어를 위해 하위 키에서 이름/값 쌍을 없는 별도 개체입니다. 이름/값 쌍에 액세스 권한은 하위 키의 사용 권한에 따라 제어 됩니다. 또한 모든 하위 컨테이너 이므로 (즉, 이러한 포함할 수 있습니다 다른 하위 키), 영향을 받지 않습니다는 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 플래그입니다. 마지막으로, 지정 된 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 플래그 규칙 유지 관리를 호환 되는 규칙의 조합은 방해가 되기 때문에 불필요 하 게 복잡해 집니다.  
  
 이 생성자는 만드는 것과 같습니다는 <xref:System.Security.Principal.NTAccount> 개체를 전달 하 여 `identity` 에 <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> 생성자 및 새로 만든 전달 <xref:System.Security.Principal.NTAccount> 개체를 <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> 생성자입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 상속 및 전파를 사용 하 여 액세스 규칙을 보여 줍니다. 이 예에서는 만듭니다는 <xref:System.Security.AccessControl.RegistrySecurity> 개체를 로컬 폴더를 만들고 있는 두 개의 규칙을 추가 합니다 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> 플래그. 첫 번째 규칙에 전파 플래그가 없으므로 두 번째 <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> 고 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>입니다.  
  
 프로그램에 규칙을 표시 합니다 <xref:System.Security.AccessControl.RegistrySecurity> 개체를 사용 하 여 다음을 <xref:System.Security.AccessControl.RegistrySecurity> 하위 키를 만들 개체입니다. 프로그램 자식 하위 키 및 손자 하위 키를 만들고 각 하위 키에 대 한 규칙을 표시 합니다. 마지막으로 프로그램은 테스트 키를 삭제 합니다.  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="registryRights" />가 잘못된 값을 지정하는 경우  
  
또는 
 <paramref name="type" />가 잘못된 값을 지정하는 경우  
  
또는 
 <paramref name="inheritanceFlags" />가 잘못된 값을 지정하는 경우  
  
또는 
 <paramref name="propagationFlags" />가 잘못된 값을 지정하는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="eventRights" />가 0입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="identity" />이 빈 문자열인 경우  
  
또는 
 <paramref name="identity" />이 512자보다 깁니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegistryRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.RegistryRights RegistryRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegistryRights As RegistryRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::RegistryRights RegistryRights { System::Security::AccessControl::RegistryRights get(); };" />
      <MemberSignature Language="F#" Value="member this.RegistryRights : System.Security.AccessControl.RegistryRights" Usage="System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.RegistryRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>액세스 규칙에 의해 허용 또는 거부된 권한을 가져옵니다.</summary>
        <value>액세스 규칙에 의해 허용되거나 거부된 권한을 나타내는 <see cref="T:System.Security.AccessControl.RegistryRights" /> 값의 비트 조합입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAccessRule> 개체는 변경할 수 없습니다. 다른 사용자, 다른 권한 또는 다른을 나타내는 새 액세스 규칙을 만들 수 있습니다 <xref:System.Security.AccessControl.AccessControlType>, 있지만 기존 액세스 규칙을 수정할 수 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>