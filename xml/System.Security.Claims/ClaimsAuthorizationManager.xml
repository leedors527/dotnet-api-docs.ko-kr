<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c72b41e033ca5ca7fbd9a2ecd7b933ad2ce249f2" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58719799" /></Metadata><TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthorizationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>클레임 권한 부여 관리자에 대한 기본 구현을 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthorizationManager> 클래스는 클레임 권한 부여 관리자에 대 한 기본 구현을 제공 합니다. 클레임 권한 부여 관리자는 다음 두 가지 시나리오에서 사용할 수 있습니다.  
  
-   웹 기반 응용 프로그램 및 서비스에서 클레임 권한 부여 관리자는 응용 프로그램 코드 보다 먼저 들어오는 클레임 값에 따라 리소스에 대 한 액세스를 권한을 부여할 수는 확장성 지점을 제공 하기 위해 처리 파이프라인에 추가할 수 있습니다. 실제로 구현 요청된 된 리소스 라고 합니다.  
  
-   사용 하는 경우는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 클래스 또는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> 명령적 또는 선언적 클레임 기반 액세스를 수행 하는 클래스 코드에서 확인 하는 데 시스템에서 응용 프로그램에 대해 구성 된 클레임 인증 관리자 라고 합니다 확인 합니다. 웹 기반 응용 프로그램과 데스크톱 응용 프로그램에서 클레임 기반 액세스 검사를 수행할 수 있습니다.  
  
 하지만 제공 하는 기본 구현을 합니다 <xref:System.Security.Claims.ClaimsAuthorizationManager> 클래스에 제공 된 각 클레임에 대 한 액세스 권한을 부여,이 클래스에서 파생 하 고 재정의할 수 있습니다는 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> 고유한 권한 부여 논리를 제공 하는 방법입니다.  
  
 클레임 권한 부여 관리자를 사용 하는 선택 사항입니다. 클레임 권한 부여 관리자를 사용 하 여 프로그래밍 방식으로 사용 하도록 응용 프로그램을 구성할 수 있습니다 합니다 <xref:System.IdentityModel.Configuration.IdentityConfiguration> 클래스 또는 선언적으로 지정 하는 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)자식 요소는 요소를의 합니다 [ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) 응용 프로그램 구성 파일의 요소입니다. 경우에 응용 프로그램을 웹 사이트 또는 인터넷 정보 서비스 (IIS)에서 호스팅되는 웹 응용 프로그램을 추가 해야 합니다 <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> ASP.NET HTTP 모듈이 컬렉션에 있습니다.  
  
> [!IMPORTANT]
>  사용 하는 경우는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 클래스 또는 <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> 클래스 액세스 검사를 수행 하는 데 사용 되는 클레임 권한 부여 관리자는 아래에 있는 id 구성에 지정 된 것을 <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> 속성입니다. 에서는 구성 파일을 `<identityConfiguration>` 기본값에서 참조 되는 섹션 `<federationConfiguration>` 요소입니다. 이 Windows Communication Foundation (WCF) 서비스 및 데스크톱 응용 프로그램에도 마찬가지입니다.  
  
 <xref:System.Security.Claims.ClaimsAuthorizationManager> 기본 클래스의 추가 구성을 사용 하지 않으면 재정의할 수 있습니다 합니다 <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> 파생 클래스의 자식 요소에서 클레임 권한 부여 관리자의 초기화를 제공 하는 `<claimsAuthorizationElement>`합니다. 일반적인 시나리오는 리소스에 액세스 하기 위해 필요한 클레임 형식 및 값을 결정 하는 권한 부여 정책을 지정 하려면 이러한 자식 요소를 사용 하는 것입니다. 그러나 모든 사용량 및 구문에 적합 한 구현 정의 하는 하드 요구 사항이 아닙니다.  
  
   
  
## Examples  
 에 사용 되는 코드 예제는 <xref:System.Security.Claims.ClaimsAuthorizationManager> 항목에서 수행 되는 `Claims Based Authorization` 샘플. 이 샘플 구성에 지정 된 정책에 따라 주체 권한을 부여할 수 있는 사용자 지정 클레임 권한 부여 관리자를 제공 합니다. 사용자 지정 클레임 권한 부여 관리자를 사용 하는 세 가지 기본 구성 요소로 이루어져:에서 파생 된 클래스 <xref:System.Security.Claims.ClaimsAuthorizationManager> 관리자를 구현 하는 `ResourceAction` 리소스 및 작업을 하는 클래스 및 정책 판독기를 읽고 컴파일하는 정책을 구성 파일에 지정 합니다. 이 정책 수를 컴파일된 다음 리소스에 대 한 액세스 권한을 부여 하기 위해 보안 주체를 평가 하기 위해 클레임 인증 관리자에서 사용할 수 있습니다. 일부 요소는 간단히 하기 위해 표시 됩니다. 이 샘플 및 사용할 수 있는 다른 샘플에 대 한 WIF에 대 한 다운로드 위치에 대 한, 참조 [WIF 코드 샘플 인덱스](~/docs/framework/security/wif-code-sample-index.md)합니다.  
  
 다음 코드에는 사용자 지정 클레임 권한 부여 관리자의 구현을 보여 줍니다. <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> 메서드를 읽고 구성에서 정책 (표시 되지 않음) 정책 판독기 도우미 클래스를 사용 하 여 컴파일 및 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> 메서드를 허용 하거나이 정책에 따라 액세스를 거부 합니다.  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 다음 코드에서는 `ResourceAction` 사용자 지정 클레임 관리자 사용 되는 클래스입니다.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 다음 XML는 IIS 7.5에서 호스팅되는 웹 응용 프로그램에 대 한 위의 권한 부여 관리자 클레임을 구성 하는 방법을 보여 줍니다. 클레임 인증 관리자의 구성에 특정 요소만 표시 됩니다. 에 대 한 참조를 <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> 아래에서 파이프라인에 클래스를 추가 해야 합니다는 `<system.Webserver>` 요소입니다. 사이트 및 IIS 7 이전의 IIS 버전에서 호스팅되는 응용 프로그램에 대 한 모듈에서 파이프라인에 추가할 있습니다를 `<system.Web>` 요소입니다. 이 구성은 표시 하지만 주석으로 처리 합니다.  
  
 클레임 권한 부여 관리자에서 사용 된 정책 사용자 지정 된 `<policy>` 아래에 요소를 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) 요소입니다. 첫 번째 정책에서 하나 지정된 된 리소스에서 지정 된 작업을 수행 하기 위해 지정된 된 클레임 보안 주체가 있어야 합니다. 두 번째 정책에서 보안 주체 모두 클레임을 지정된 된 리소스에서 지정 된 작업을 수행할 수 있어야 합니다. 나머지 모든 보안 주체가 소유 하는 클레임에 관계 없이 액세스를 자동으로 부여 됩니다.  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthorizationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool&#xA;override this.CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool" Usage="claimsAuthorizationManager.CheckAccess context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context">권한 부여를 확인할 주체, 리소스 및 작업이 포함된 권한 부여 컨텍스트입니다.</param>
        <summary>파생된 클래스에서 구현된 경우 지정된 컨텍스트의 주제에 대한 권한 부여를 확인하여 지정된 리소스에 대해 지정된 작업을 수행합니다.</summary>
        <returns>지정된 리소스에 대한 지정된 작업을 수행할 수 있는 권한이 주제에 부여되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 구현에서는 항상 반환 `true`에 대 한 액세스 권한을 부여 하는 합니다. RP 응용 프로그램의 요구 사항에 따라 액세스 권한을 부여 하는 파생된 클래스에서이 메서드를 재정의할 수 있습니다. 이 메서드가 반환 하는 경우 `false`, Windows Identity Foundation (WIF) 호출자에 게 권한이 없음된 오류가 반환; 그렇지 않으면, 실행 RP 응용 프로그램에 전달 됩니다.  
  
   
  
## Examples  
 에 사용 되는 코드 예제는 <xref:System.Security.Claims.ClaimsAuthorizationManager> 항목에서 수행 되는 `Claims Based Authorization` 샘플. 이 샘플 구성에 지정 된 정책에 따라 주체 권한을 부여할 수 있는 사용자 지정 클레임 권한 부여 관리자를 제공 합니다. 사용자 지정 클레임 권한 부여 관리자를 사용 하는 세 가지 기본 구성 요소로 이루어져:에서 파생 된 클래스 <xref:System.Security.Claims.ClaimsAuthorizationManager> 관리자를 구현 하는 `ResourceAction` 리소스 및 작업을 하는 클래스 및 정책 판독기를 읽고 컴파일하는 정책을 구성 파일에 지정 합니다. 이 정책 수를 컴파일된 다음 리소스에 대 한 액세스 권한을 부여 하기 위해 보안 주체를 평가 하기 위해 클레임 인증 관리자에서 사용할 수 있습니다. 일부 요소는 간단히 하기 위해 표시 됩니다. 이 샘플 및 사용할 수 있는 다른 샘플에 대 한 WIF에 대 한 다운로드 위치에 대 한, 참조 [WIF 코드 샘플 인덱스](~/docs/framework/security/wif-code-sample-index.md)합니다.  
  
 다음 코드에서는 재정의 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> 메서드. 이 메서드를 부여 하거나 읽고 구성 파일에서 컴파일된 정책에 따라 액세스를 거부 합니다.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 다음 코드에서는 `ResourceAction` 사용자 지정 클레임 관리자 사용 되는 클래스입니다.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 클레임 권한 부여 관리자에서 사용 된 정책 사용자 지정 된 `<policy>` 아래에 요소를 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) 요소입니다. 이 정책을 읽고 여 컴파일되는 <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> 메서드. 첫 번째 정책에서 하나 지정된 된 리소스에서 지정 된 작업을 수행 하기 위해 지정된 된 클레임 보안 주체가 있어야 합니다. 두 번째 정책에서 보안 주체 모두 클레임을 지정된 된 리소스에서 지정 된 작업을 수행할 수 있어야 합니다. 나머지 모든 보안 주체가 소유 하는 클레임에 관계 없이 액세스를 자동으로 부여 됩니다.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthorizationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">사용자 지정 구성 요소입니다. 형식 <see cref="T:System.Xml.XmlElement" />의 목록에 있는 각 노드입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 XML에서 사용자 지정 구성을 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> 구성 인프라에서 호출 됩니다. 이 메서드를 호출 하는 경우는 `nodelist` 최상위 자식 요소를 포함 하는 합니다 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) 구성 파일에서 요소입니다. 차례로 특성 또는 파생된 클래스에 대해 정의한 구성 스키마에 따라 자식 요소를 포함할 수 있습니다, 이러한 각 요소. 아래에 자식 요소가 표시 하는 경우는 `<claimsAuthorizationManager>` 구성 파일의 요소를이 메서드가 호출 되지 않습니다.  
  
 기본 구현은 throw를 <xref:System.NotImplementedException>입니다. 구성 파일에서 클레임 권한 부여 관리자의 초기화를 사용 하도록 설정 하려면 파생된 클래스에서이 메서드를 재정의 합니다. 권한 부여 정책; express에 구성 요소를 일반적으로 사용 됩니다. 그러나 요소를 정의할 수 있으며 응용 프로그램의 요구 사항에 따라 의미가 있는 어떤 방식으로 사용할 수 있습니다.  
  
   
  
## Examples  
 에 사용 되는 코드 예제는 <xref:System.Security.Claims.ClaimsAuthorizationManager> 항목에서 수행 되는 `Claims Based Authorization` 샘플. 이 샘플 구성에 지정 된 정책에 따라 주체 권한을 부여할 수 있는 사용자 지정 클레임 권한 부여 관리자를 제공 합니다. 사용자 지정 클레임 권한 부여 관리자를 사용 하는 세 가지 기본 구성 요소로 이루어져:에서 파생 된 클래스 <xref:System.Security.Claims.ClaimsAuthorizationManager> 관리자를 구현 하는 `ResourceAction` 리소스 및 작업을 하는 클래스 및 정책 판독기를 읽고 컴파일하는 정책을 구성 파일에 지정 합니다. 이 정책 수를 컴파일된 다음 리소스에 대 한 액세스 권한을 부여 하기 위해 보안 주체를 평가 하기 위해 클레임 인증 관리자에서 사용할 수 있습니다. 일부 요소는 간단히 하기 위해 표시 됩니다. 이 샘플 및 사용할 수 있는 다른 샘플에 대 한 WIF에 대 한 다운로드 위치에 대 한, 참조 [WIF 코드 샘플 인덱스](~/docs/framework/security/wif-code-sample-index.md)합니다.  
  
 다음 코드에서는 재정의 <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> 메서드. 이 메서드는 도우미 정책 판독기 클래스 (표시 되지 않음)를 읽고 권한 부여 정책 구성 파일에 지정 된 컴파일입니다. 정책 사전에 추가 되 고 액세스 하는 한 `ResourceAction` 를 위한 리소스 및 작업에서 생성 되는 키 개체입니다.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 다음 코드에서는 `ResourceAction` 사용자 지정 클레임 관리자 사용 되는 클래스입니다.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 클레임 권한 부여 관리자에서 사용 된 정책 사용자 지정 된 `<policy>` 아래에 요소를 [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) 요소입니다. 이 정책을 읽고 여 컴파일되는 <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> 메서드. 첫 번째 정책에서 하나 지정된 된 리소스에서 지정 된 작업을 수행 하기 위해 지정된 된 클레임 보안 주체가 있어야 합니다. 두 번째 정책에서 보안 주체 모두 클레임을 지정된 된 리소스에서 지정 된 작업을 수행할 수 있어야 합니다. 나머지 모든 보안 주체가 소유 하는 클레임에 관계 없이 액세스를 자동으로 부여 됩니다.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>