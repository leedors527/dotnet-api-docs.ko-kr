<Type Name="IChannelListener&lt;TChannel&gt;" FullName="System.ServiceModel.Channels.IChannelListener&lt;TChannel&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1b982e54be0a673e40ba3a05b9c3ebb11f713a9c" /><Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/09/2018" /><Meta Name="ms.locfileid" Value="51310861" /></Metadata><TypeSignature Language="C#" Value="public interface IChannelListener&lt;TChannel&gt; : System.ServiceModel.Channels.IChannelListener where TChannel : class, IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IChannelListener`1&lt;class (class System.ServiceModel.Channels.IChannel) TChannel&gt; implements class System.ServiceModel.Channels.IChannelListener, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IChannelListener`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IChannelListener(Of TChannel)&#xA;Implements IChannelListener" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TChannel&gt;&#xA; where TChannel : class, IChannelpublic interface class IChannelListener : System::ServiceModel::Channels::IChannelListener" />
  <TypeSignature Language="F#" Value="type IChannelListener&lt;'Channel (requires 'Channel : null and 'Channel :&gt; IChannel)&gt; = interface&#xA;    interface IChannelListener&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TChannel">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
        <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannelListener</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TChannel">채널 수신기에서 수락되는 채널 형식입니다.</typeparam>
    <summary>채널 수신기에서 형식별 채널을 수락하기 위해 구현해야 하는 인터페이스를 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Channels.IChannelListener> 또는 <xref:System.ServiceModel.Channels.IChannelListener%601> 인터페이스를 구현하는 수신기 팩터리는 서비스와 통신을 시작하고 활성화하는 클라이언트에서 생성된 채널을 수락하기 위해 사용되는 메커니즘을 서비스에 제공합니다.  
  
 <xref:System.ServiceModel.Channels.IChannelListener%601> 계약을 구현하면 사용자는 매번 채널 형식을 지정할 필요 없이 특정 형식의 여러 채널을 수락할 수 있습니다. 즉, 채널 형식을 <xref:System.ServiceModel.Channels.IChannelListener%601> 인터페이스에 대한 제네릭 매개 변수로 정의하면 형식을 <xref:System.ServiceModel.Channels.IChannelListener%601.AcceptChannel%2A> 메서드에 전달할 필요가 없습니다. 사용자가 다양한 채널 형식을 수락하려는 경우 필요한 각 채널 형식에 대한 추가 채널 수신기를 만들 수 있습니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="AcceptChannel">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>클라이언트와 통신하기 위해 지정된 형식의 채널을 수락합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 명시적인 시간 제한이 있는 <xref:System.ServiceModel.Channels.IChannelListener%601.AcceptChannel%28System.TimeSpan%29> 오버로드를 사용하는 것이 좋습니다. 해당 메서드에 지정된 `timeout`은 서비스에 대해 시스템에서 설정한 기본 시간 제한을 재정의합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AcceptChannel">
      <MemberSignature Language="C#" Value="public TChannel AcceptChannel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TChannel AcceptChannel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelListener`1.AcceptChannel" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptChannel () As TChannel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TChannel AcceptChannel();" />
      <MemberSignature Language="F#" Value="abstract member AcceptChannel : unit -&gt; 'Channel" Usage="iChannelListener.AcceptChannel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TChannel</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>클라이언트와 통신하기 위해 지정된 형식의 채널을 수락합니다.</summary>
        <returns>수신기에서 수락되는 채널 형식 <paramref name="TChannel" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 명시적인 시간 제한이 있는 <xref:System.ServiceModel.Channels.IChannelListener%601.AcceptChannel%28System.TimeSpan%29> 오버로드를 사용하는 것이 좋습니다. 해당 메서드에 지정된 `timeout`은 서비스에 대해 시스템에서 설정한 기본 시간 제한을 재정의합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChannel">
      <MemberSignature Language="C#" Value="public TChannel AcceptChannel (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TChannel AcceptChannel(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelListener`1.AcceptChannel(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptChannel (timeout As TimeSpan) As TChannel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TChannel AcceptChannel(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member AcceptChannel : TimeSpan -&gt; 'Channel" Usage="iChannelListener.AcceptChannel timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">제한 시간이 초과되기 전에 채널 대기 작업이 완료되어야 하는 기간을 지정하는 <see cref="T:System.TimeSpan" />입니다.</param>
        <summary>지정된 시간 간격 내에 클라이언트와 통신하기 위해 지정된 형식의 채널을 수락합니다.</summary>
        <returns>수신기에서 수락되는 채널 형식 <paramref name="TChannel" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Channels.IChannelListener%601.AcceptChannel>보다 명시적인 시간 제한이 있는 이 오버로드를 사용하는 것이 좋습니다. 이 메서드에 지정된 `timeout`은 서비스에 대해 시스템에서 설정한 기본 시간 제한을 재정의합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAcceptChannel">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 또는 기본 시간 간격 내에 채널을 수락하기 위한 비동기 작업을 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 명시적인 시간 제한이 있는 <xref:System.ServiceModel.Channels.IChannelListener%601.BeginAcceptChannel%2A> 오버로드를 사용하는 것이 좋습니다. 해당 메서드에 지정된 `timeout`은 서비스에 대해 시스템에서 설정한 기본 시간 제한을 재정의합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAcceptChannel">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptChannel (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAcceptChannel(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelListener`1.BeginAcceptChannel(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptChannel (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptChannel(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAcceptChannel : AsyncCallback * obj -&gt; IAsyncResult" Usage="iChannelListener.BeginAcceptChannel (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">채널 수락 작업의 비동기 완료에 대한 알림을 수신하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="state">애플리케이션에 의해 지정되는 개체로, 비동기 채널 수락 작업과 관련된 상태 정보를 포함합니다.</param>
        <summary>채널을 수락하기 위한 비동기 작업을 시작합니다.</summary>
        <returns>비동기 채널 수락 작업을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 명시적인 시간 제한이 있는 <xref:System.ServiceModel.Channels.IChannelListener%601.BeginAcceptChannel%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> 오버로드를 사용하는 것이 좋습니다. 해당 메서드에 지정된 `timeout`은 서비스에 대해 시스템에서 설정한 기본 시간 제한을 재정의합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptChannel">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptChannel (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAcceptChannel(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelListener`1.BeginAcceptChannel(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptChannel (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptChannel(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginAcceptChannel : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iChannelListener.BeginAcceptChannel (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">제한 시간이 초과되기 전에 채널 대기 작업이 완료되어야 하는 기간을 지정하는 <see cref="T:System.TimeSpan" />입니다.</param>
        <param name="callback">채널 수락 작업의 비동기 완료에 대한 알림을 수신하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</param>
        <param name="state">애플리케이션에 의해 지정되는 개체로, 비동기 채널 수락 작업과 관련된 상태 정보를 포함합니다.</param>
        <summary>지정된 시간 간격 내에 채널을 수락하기 위한 비동기 작업을 시작합니다.</summary>
        <returns>비동기 채널 수락 작업을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Channels.IChannelListener%601.BeginAcceptChannel%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>보다 명시적인 시간 제한이 있는 이 오버로드를 사용하는 것이 좋습니다. 이 메서드에 지정된 `timeout`은 서비스에 대해 시스템에서 설정한 기본 시간 제한을 재정의합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptChannel">
      <MemberSignature Language="C#" Value="public TChannel EndAcceptChannel (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TChannel EndAcceptChannel(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelListener`1.EndAcceptChannel(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptChannel (result As IAsyncResult) As TChannel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TChannel EndAcceptChannel(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndAcceptChannel : IAsyncResult -&gt; 'Channel" Usage="iChannelListener.EndAcceptChannel result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><see cref="T:System.IAsyncResult" /> 메서드를 호출하여 반환된 <see cref="Overload:System.ServiceModel.Channels.IChannelListener`1.BeginAcceptChannel" />입니다.</param>
        <summary>채널을 수락하기 위한 비동기 작업을 완료합니다.</summary>
        <returns>수신기에서 수락되는 채널 형식 <paramref name="TChannel" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>