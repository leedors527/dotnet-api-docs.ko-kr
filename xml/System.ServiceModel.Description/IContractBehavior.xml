<Type Name="IContractBehavior" FullName="System.ServiceModel.Description.IContractBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9c6953d3c3d9dce09aa4d9d4757540b2026e10e3" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58554076" /></Metadata><TypeSignature Language="C#" Value="public interface IContractBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContractBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IContractBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContractBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContractBehavior" />
  <TypeSignature Language="F#" Value="type IContractBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>서비스 또는 클라이언트 응용 프로그램에서 계약에 대한 런타임 동작을 확장하는 데 사용할 수 있는 메서드를 구현합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 응용 프로그램 수준에서 계약 차원 실행의 일부 측면을 수정, 검사 또는 확장하기 위한 <xref:System.ServiceModel.Description.IContractBehavior> 인터페이스를 구현합니다. <xref:System.ServiceModel.Description.IServiceBehavior> 및 <xref:System.ServiceModel.Description.IEndpointBehavior> 개체와 달리 <xref:System.ServiceModel.Description.IContractBehavior> 개체는 응용 프로그램 구성 파일을 사용하여 런타임에 추가할 수 없으며 속성을 사용하거나 프로그래밍 방식으로만 추가할 수 있습니다.  
  
 서비스, 끝점 및 계약 동작 중에서 선택 하는 방법에 대 한 자세한 내용은 참조 하세요. [구성 및 동작을 사용 하 여 런타임 확장](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)합니다.  
  
-   바인딩 요소에 사용자 지정 데이터를 제공하여 동작을 지원하려면 <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> 메서드를 사용합니다.  
  
-   클라이언트 응용 프로그램에서 계약에 대한 확장을 수정, 검사 또는 삽입하려면 <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> 메서드를 사용합니다.  
  
-   서비스 응용 프로그램에서 계약에 대한 확장을 수정, 검사 또는 삽입하려면 <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> 메서드를 사용합니다.  
  
-   계약에서 특정 기능을 지원하는지 확인하려면 <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> 메서드를 사용합니다.  
  
 <xref:System.ServiceModel.Description.IContractBehavior> 개체는 이러한 메서드 중 아무 메서드나 사용할 수 있지만 그 중 하나만 사용되는 경우가 많으며 사용되지 않은 나머지 메서드는 값 없이 반환될 수 있습니다.  
  
> [!NOTE]
>  모든 <xref:System.ServiceModel.Description.IContractBehavior> 메서드는 <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> 및 <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>를 매개 변수로 전달합니다. 이러한 매개 변수는 검사용이므로 개체를 수정할 경우의 실행 동작은 정의되지 않습니다.  
  
 <xref:System.ServiceModel.Description.IContractBehavior> 형식은 서비스나 클라이언트 또는 둘 모두에서 사용할 수 있습니다. 서비스에 대한 사용자 지정 작업을 수행하려면 <xref:System.ServiceModel.Description.IContractBehavior> 개체에서 <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> 메서드를 호출할 때 발생하는 서비스 런타임 생성이 이루어지기 전에 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 개체를 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 속성에 추가해야 합니다. 이렇게 하는 데는 두 가지 방법이 있습니다.  
  
 첫 번째 방법은, <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> 개체에서 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 메서드가 호출되기 전에 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 속성에 사용자 지정 계약 동작을 프로그래밍 방식으로 추가하는 것입니다. 이 방법을 사용할 경우 모든 엔드포인트에서 해당 계약을 통해 전달되는 모든 메시지에 동작이 적용됩니다.  
  
> [!NOTE]
>  동작은 동일한 형식의 모든 계약에 적용됩니다. 예를 들어, 동일한 계약 형식을 여러 엔드포인트에 프로그래밍 방식으로 추가할 경우 동일한 계약 개체를 참조하는 모든 엔드포인트를 수정하는 동작이 적용됩니다.  
  
 두 번째 방법은 <xref:System.ServiceModel.Description.IContractBehavior>를 구현하는 사용자 지정 특성을 만든 후 이 특성을 다음에 적용하는 것입니다.  
  
-   계약 인터페이스. 이 경우 모든 엔드포인트에서 해당 형식의 모든 계약에 동작이 적용됩니다.  
  
-   서비스 클래스.  이 경우 계약과 상관없이 모든 엔드포인트에 동작이 적용됩니다.  
  
-   콜백 클래스.  이 경우 이중 클라이언트의 엔드포인트에 동작이 적용됩니다.  
  
 사용자 지정 특성이 <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=nameWithType>도 구현하는 경우 두 번째 방법의 동작이 다소 다릅니다. 이 경우 동작은 다음과 같습니다.  
  
-   계약 인터페이스. 이 경우 모든 끝점에서 해당 형식의 모든 계약에 동작이 적용 되 고 Windows Communication Foundation (WCF)의 값을 무시 합니다 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> 속성입니다.  
  
-   서비스 클래스.  이 경우 해당 계약이 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> 속성 값인 엔드포인트에만 동작이 적용됩니다.  
  
-   콜백 클래스.  이 경우 이중 클라이언트의 끝점에 동작이 적용 되 고 WCF의 값을 무시 합니다 <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> 속성입니다.  
  
 원하는 클라이언트에 사용자 지정 작업을 수행하려면 <xref:System.ServiceModel.Description.IContractBehavior>이 호출될 때 발생하는 클라이언트 런타임 생성이 이루어지기 전에 <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> 개체를 <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> 속성에 추가해야 합니다. 여기에는 두 가지 방법이 있습니다.  
  
-   <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A>이 호출되기 전에 <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> 속성에 사용자 지정 계약 동작을 프로그래밍 방식으로 추가합니다.  
  
-   <xref:System.ServiceModel.Description.IContractBehavior>도 구현하는 사용자 지정 특성을 만듭니다.  
  
 프로그래밍 방식으로 추가 하는 방법은 <xref:System.ServiceModel.Description.IContractBehavior> 클라이언트 또는 서비스 응용 프로그램에 대 한 형식 참조 [구성 하 고 동작을 사용 하 여 런타임 확장](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용자 지정 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 구현이 항상 동일한 서비스 인스턴스를 반환하고 이 인스턴스를 재사용하지 않는 "단일" 동작을 제공하는 `ObjectProviderBehavior`를 호출했다고 가정합니다.  
  
 인스턴스 공급자 사용자 지정을 삽입하기 위해 이 예제에서는 `SingletonBehaviorAttribute`를 구현하여 사용자 지정 서비스 인스턴스 공급자를 삽입하는 사용자 지정 특성(<xref:System.ServiceModel.Description.IContractBehavior>)을 구현하는 방법을 보여 줍니다. 또한 <xref:System.ServiceModel.Description.IContractBehaviorAttribute> 계약에 해당 사용을 바인딩하는 `ISampleService`를 구현합니다.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iContractBehavior.AddBindingParameters (contractDescription, endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="contractDescription">수정할 계약 설명입니다.</param>
        <param name="endpoint">수정할 엔드포인트입니다.</param>
        <param name="bindingParameters">바인딩 요소에서 동작을 지원하기 위해 필요한 개체입니다.</param>
        <summary>계약 동작을 지원하도록 바인딩 요소를 구성합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 계약 동작을 지원하는 데 필요한 추가 개체를 바인딩 요소에 제공하려면 <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> 메서드를 구현합니다.  
  
 이 메서드는 지정된 서비스 계약을 사용하는 엔드포인트마다 한 번씩 호출됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iContractBehavior.ApplyClientBehavior (contractDescription, endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">확장할 대상에 대한 계약 설명입니다.</param>
        <param name="endpoint">엔드포인트입니다.</param>
        <param name="clientRuntime">클라이언트 런타임입니다.</param>
        <summary>계약에 대해 클라이언트의 수정이나 확장을 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 메시지에 대해 또는 특정 작업에 대해 클라이언트 런타임에 대한 사용자 지정 확장을 보거나 수정 또는 추가하려면 <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> 메서드를 구현합니다. 클라이언트 런타임 개체로 수행할 수 있는 사용자 지정에 대한 자세한 내용은 <xref:System.ServiceModel.Dispatcher.ClientRuntime> 및 <xref:System.ServiceModel.Dispatcher.ClientOperation>을 참조하십시오.  
  
 <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> 메서드는 동작이 서비스 응용 프로그램에서만 사용되도록 지정된 경우 <xref:System.NotImplementedException> 예외를 throw할 수 있습니다.  
  
 이 메서드는 지정된 서비스 계약을 사용하는 엔드포인트마다 한 번씩 호출됩니다.  
  
 설명에 이름이 동일한 두 개의 작업이 존재할 수 있으므로(각 방향에 하나씩) 계약이 이중 계약인 작업에서 반복을 수행해야 하는 경우 <xref:System.ServiceModel.Dispatcher.ClientRuntime> 엔드포인트와 <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A> 속성에서 반환하는 엔드포인트 간에 메시지 방향을 연결해야 합니다.  
  
 다른 동작에서 런타임에 대해 일부 작업을 이미 추가하거나 제거했을 수 있으므로 설명의 작업 수가 <xref:System.ServiceModel.Dispatcher.ClientOperation> 속성의 <xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A> 개체 수와 다를 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용자 지정 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 구현이 항상 동일한 서비스 인스턴스를 반환하고 이 인스턴스를 재사용하지 않는 "단일" 동작을 제공하는 `ObjectProviderBehavior`를 호출했다고 가정합니다.  
  
 인스턴스 공급자 사용자 지정을 삽입하기 위해 이 예제에서는 `SingletonBehaviorAttribute`를 구현하여 사용자 지정 서비스 인스턴스 공급자를 삽입하는 사용자 지정 특성(<xref:System.ServiceModel.Description.IContractBehavior>)을 구현하는 방법을 보여 줍니다. 또한 <xref:System.ServiceModel.Description.IContractBehaviorAttribute> 계약에 해당 사용을 바인딩하는 `ISampleService`를 구현합니다.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::DispatchRuntime ^ dispatchRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.DispatchRuntime -&gt; unit" Usage="iContractBehavior.ApplyDispatchBehavior (contractDescription, endpoint, dispatchRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="dispatchRuntime" Type="System.ServiceModel.Dispatcher.DispatchRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">수정할 계약 설명입니다.</param>
        <param name="endpoint">계약을 공개하는 엔드포인트입니다.</param>
        <param name="dispatchRuntime">서비스 실행을 제어하는 디스패치 런타임입니다.</param>
        <summary>계약에 대해 클라이언트의 수정이나 확장을 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특정 계약의 모든 메시지에 대해 또는 해당 계약의 특정 작업에 대해 서비스 런타임에 대한 사용자 지정 확장을 보거나 수정 또는 추가하려면 <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A>를 구현합니다. 서비스 응용 프로그램에서 수행할 수 있는 사용자 지정에 대한 자세한 내용은 <xref:System.ServiceModel.Dispatcher.DispatchRuntime> 및 <xref:System.ServiceModel.Dispatcher.DispatchOperation>을 참조하십시오.  
  
 <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> 메서드는 동작이 클라이언트 응용 프로그램에서만 사용되도록 지정된 경우 <xref:System.NotImplementedException> 예외를 throw할 수 있습니다.  
  
 이 메서드는 지정된 서비스 계약을 사용하는 엔드포인트마다 한 번씩 호출됩니다.  
  
 설명에 이름이 동일한 두 개의 작업이 존재할 수 있으므로(각 방향에 하나씩) 계약이 이중 계약인 작업에서 반복을 수행해야 하는 경우 <xref:System.ServiceModel.Dispatcher.DispatchRuntime> 엔드포인트와 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A> 속성에서 반환하는 엔드포인트 간에 메시지 방향을 연결해야 합니다.  
  
 또한 다른 동작에서 런타임에 대해 일부 작업을 이미 추가 또는 제거했을 수 있으므로 설명의 작업 수가 <xref:System.ServiceModel.Dispatcher.DispatchOperation> 속성의 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> 개체 수와 다를 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용자 지정 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 구현이 항상 동일한 서비스 인스턴스를 반환하고 이 인스턴스를 재사용하지 않는 "단일" 동작을 제공하는 `ObjectProviderBehavior`를 호출했다고 가정합니다.  
  
 인스턴스 공급자 사용자 지정을 삽입하기 위해 이 예제에서는 `SingletonBehaviorAttribute`를 구현하여 사용자 지정 서비스 인스턴스 공급자를 삽입하는 사용자 지정 특성(<xref:System.ServiceModel.Description.IContractBehavior>)을 구현하는 방법을 보여 줍니다. 또한 <xref:System.ServiceModel.Description.IContractBehaviorAttribute> 계약에 해당 사용을 바인딩하는 `ISampleService`를 구현합니다.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iContractBehavior.Validate (contractDescription, endpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="contractDescription">유효성을 검사할 계약입니다.</param>
        <param name="endpoint">유효성을 검사할 엔드포인트입니다.</param>
        <summary>계약 및 엔드포인트에서 계약 동작을 지원할 수 있는지 확인하려면 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 계약 설명이 사용자 지정 계약 동작을 지원하는 데 충분한지 확인하려면 <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> 메서드를 구현합니다. 구현에서 설명을 검사한 후 값을 throw하거나 아무 값도 반환하지 않을 수 있습니다.  
  
 이 메서드는 지정된 서비스 계약을 사용하는 엔드포인트마다 한 번씩 호출됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>