<Type Name="IEndpointBehavior" FullName="System.ServiceModel.Description.IEndpointBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="56717b15a48dcbf3c245a67f6ee66d0ccf41e8bb" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58548161" /></Metadata><TypeSignature Language="C#" Value="public interface IEndpointBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEndpointBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IEndpointBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEndpointBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEndpointBehavior" />
  <TypeSignature Language="F#" Value="type IEndpointBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>서비스 또는 클라이언트 응용 프로그램에서 엔드포인트에 대한 런타임 동작을 확장하는 데 사용할 수 있는 메서드를 구현합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클라이언트 또는 서버 응용 프로그램에 대해 응용 프로그램 수준에서 엔드포인트 차원 실행의 일부 측면을 수정, 검사 또는 확장하기 위한 <xref:System.ServiceModel.Description.IEndpointBehavior> 인터페이스를 구현합니다.  
  
-   바인딩에서 사용자 지정 동작을 지원할 수 있도록 런타임에 사용자 지정 데이터를 전달하려면 <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> 메서드를 사용합니다.  
  
-   클라이언트 응용 프로그램에서 엔드포인트에 대한 확장을 수정, 검사 또는 삽입하려면 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> 메서드를 사용합니다.  
  
-   클라이언트 응용 프로그램에서 엔드포인트 차원의 실행에 대한 확장을 수정, 검사 또는 삽입하려면 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 메서드를 사용합니다.  
  
-   <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A>가 특정 요구 사항을 충족하는지 확인하려면 <xref:System.ServiceModel.Description.ServiceEndpoint> 메서드를 사용합니다. 이 메서드는 엔드포인트에서 특정 구성 설정을 사용하고 특정 기능과 기타 요구 사항을 지원하는지를 확인하기 위해 사용할 수 있습니다.  
  
 <xref:System.ServiceModel.Description.IEndpointBehavior> 개체는 이러한 메서드 중 아무 메서드나 사용할 수 있지만 그 중 하나만 사용되는 경우가 많으며 사용되지 않은 메서드는 아무 동작도 수행하지 않고 반환될 수 있습니다.  
  
> [!NOTE]
>  모든 <xref:System.ServiceModel.Description.IEndpointBehavior> 메서드는 <xref:System.ServiceModel.Description.ServiceEndpoint> 개체를 매개 변수로 전달합니다. 이 매개 변수는 검사 전용이므로 <xref:System.ServiceModel.Description.ServiceEndpoint> 개체를 수정할 경우 실행 동작은 정의되지 않습니다.  
  
 <xref:System.ServiceModel.Description.IEndpointBehavior> 개체는 일반적으로 서비스 응용 프로그램의 <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType> 및 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> 개체의 다양한 속성과 클라이언트 응용 프로그램의 <xref:System.ServiceModel.Dispatcher.ClientRuntime?displayProperty=nameWithType> 및 <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType>의 다양한 속성을 액세스하는 데 사용됩니다. 또한 <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A?displayProperty=nameWithType> 및 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> 속성을 사용하여 각각 이중 클라이언트와 서비스의 속성을 액세스할 수 있습니다.  
  
 다양 한 속성 및 사용자 지정을 사용에 대 한 참조 [Extending ServiceHost 및 서비스 모델 계층](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)합니다.  
  
 사용자 지정 시 결정 된 (및 필요한 경우 사용자 지정 인터페이스가 구현) 되 면 및 <xref:System.ServiceModel.Description.IEndpointBehavior> 되었습니다가 적절 한 사용자 지정 범위 결정, 사용자 지정 Windows 통신에 삽입 되어야 합니다 구현 하 여 foundation (WCF) 런타임 <xref:System.ServiceModel.Description.IEndpointBehavior> 런타임에 끝점 동작을 추가 합니다.  
  
 다음과 같은 두 가지 방법으로 런타임에 동작을 추가할 수 있습니다.  
  
-   서비스 응용 프로그램의 서비스 호스트 또는 클라이언트 응용 프로그램의 채널 팩터리를 열기 전에 <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> 속성에 사용자 지정 엔드포인트 동작을 프로그래밍 방식으로 추가합니다.  
  
-   응용 프로그램 구성 파일을 사용하여 동작을 구성합니다. 자세한 내용은 참조 하세요 [ &lt;behaviorExtensions&gt;](~/docs/framework/configure-apps/file-schema/wcf/behaviorextensions.md)합니다.  
  
 원하는 대상에 서비스 사용자 지정 작업을 수행하려면 <xref:System.ServiceModel.Description.IEndpointBehavior>에서 <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> 메서드를 호출할 때 발생하는 서비스 런타임 생성이 이루어지기 전에 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 개체를 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 속성에 추가해야 합니다. 클라이언트 사용자 지정 작업을 수행하려면 <xref:System.ServiceModel.Description.IEndpointBehavior>에서 <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> 메서드 또는 <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> 메서드를 호출하기 전에 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 개체를 <xref:System.ServiceModel.ChannelFactory%601> 속성에 추가해야 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 서비스 응용 프로그램에서 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> 개체를 추가하는 엔드포인트 동작의 구현을 보여 줍니다. 이 경우 `EndpointBehaviorMessageInspector` 클래스는 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType>를 구현하여 인바운드 및 아웃바운드 메시지를 검사하고, <xref:System.ServiceModel.Description.IEndpointBehavior> 인터페이스를 구현하여 동작이 적용되는 모든 엔드포인트에 대한 검사 시스템에 inspector 클래스를 삽입하며, <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>를 구현함으로써 응용 프로그램 구성 파일을 사용하여 메시지 검사자 동작을 활성화합니다.  
  
 첫 번째 단계는 메시지 검사자를 구현하는 것입니다.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 다음 코드 예제에서는 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 메서드를 사용하여 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 속성에 메시지 검사자를 추가하는 방법을 보여 줍니다.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 다음 코드 예제에서는 구성 파일에서 메시지 검사자를 사용할 수 있도록 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>를 구현하는 방법을 보여 줍니다.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 마지막으로 다음 구성 파일에서는 구성에서 위의 예제를 사용하는 방법을 보여 줍니다.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBindingParameters (endpoint As ServiceEndpoint, bindingParameters As BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iEndpointBehavior.AddBindingParameters (endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="endpoint">수정할 엔드포인트입니다.</param>
        <param name="bindingParameters">바인딩 요소에서 동작을 지원하기 위해 필요한 개체입니다.</param>
        <summary>런타임에 바인딩에 데이터를 전달하여 사용자 지정 동작을 지원하려면 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 엔드포인트 동작을 지원하는 데 필요한 추가 개체를 바인딩 요소에 제공하려면 <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> 메서드를 구현합니다. 바인딩 매개 변수가 여기에 추가되면 채널 수신기 또는 채널 팩터리를 생성할 때 바인딩이 이러한 개체를 찾을 수 있습니다. 일반적으로 <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> 메서드를 구현하여 사용자 지정 바인딩 요소에 엔드포인트에 대한 정보를 전달함으로써 지원 채널을 올바르게 작성할 수 있습니다. 수정이 필요하지 않은 경우 값을 반환하지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iEndpointBehavior.ApplyClientBehavior (endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="endpoint">사용자 지정할 엔드포인트입니다.</param>
        <param name="clientRuntime">사용자 지정할 클라이언트 런타임입니다.</param>
        <summary>엔드포인트에 대해 클라이언트의 수정이나 확장을 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 엔드포인트와 함께 사용되는 모든 메시지에 대해 또는 특정 작업에 대해 클라이언트 런타임에 대한 사용자 지정 확장을 보거나 수정 또는 추가하려면 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> 메서드를 구현합니다. 클라이언트 런타임 개체로 수행할 수 있는 사용자 지정에 대한 자세한 내용은 <xref:System.ServiceModel.Dispatcher.ClientRuntime> 및 <xref:System.ServiceModel.Dispatcher.ClientOperation>을 참조하십시오.  
  
 동작이 서비스 응용 프로그램에서만 사용하도록 지정된 경우 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> 메서드가 <xref:System.NotImplementedException>을 throw하는 것이 좋습니다.  
  
 다른 동작에서 런타임에 대해 일부 작업을 이미 추가 또는 제거했을 수 있으므로 설명의 작업 수가 <xref:System.ServiceModel.Dispatcher.DispatchOperation> 속성의 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> 개체 수와 다를 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::EndpointDispatcher ^ endpointDispatcher);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.EndpointDispatcher -&gt; unit" Usage="iEndpointBehavior.ApplyDispatchBehavior (endpoint, endpointDispatcher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="endpointDispatcher" Type="System.ServiceModel.Dispatcher.EndpointDispatcher" />
      </Parameters>
      <Docs>
        <param name="endpoint">계약을 공개하는 엔드포인트입니다.</param>
        <param name="endpointDispatcher">수정하거나 확장할 엔드포인트 디스패처입니다.</param>
        <summary>엔드포인트에 대해 서비스의 수정이나 확장을 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 메시지에 대해 또는 엔드포인트의 특정 작업에 대해 서비스 런타임을 보거나 수정 또는 확장하려면 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 메서드를 구현합니다. 서비스 응용 프로그램에서 수행할 수 있는 사용자 지정에 대한 자세한 내용은 <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> 및 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>을 참조하십시오.  
  
 동작이 클라이언트 응용 프로그램에서만 사용되도록 지정된 경우 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 메서드가 <xref:System.NotImplementedException> 예외를 throw하는 것이 좋습니다.  
  
 콜백 계약을 사용할 경우 이름이 동일한 두 개의 작업(방향별로 하나씩)이 설명에 있을 수 있습니다. 작업에서 반복을 수행하려면 엔드포인트 <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>과 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> 속성이 반환하는 요소 간에 메시지 방향을 연결해야 합니다.  
  
 또한 다른 동작에서 런타임에 대해 일부 작업을 이미 추가 또는 제거했을 수 있으므로 설명의 작업 수가 <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> 속성의 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A?displayProperty=nameWithType> 개체 수와 다를 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 서비스 응용 프로그램에서 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> 개체를 추가하는 엔드포인트 동작의 구현을 보여 줍니다. 이 경우 `EndpointBehaviorMessageInspector` 클래스는 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType>를 구현하여 인바운드 및 아웃바운드 메시지를 검사하고, <xref:System.ServiceModel.Description.IEndpointBehavior> 인터페이스를 구현하여 동작이 적용되는 모든 엔드포인트에 대한 검사 시스템에 inspector 클래스를 삽입하며, <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>를 구현함으로써 응용 프로그램 구성 파일을 사용하여 메시지 검사자 동작을 활성화합니다.  
  
 첫 번째 단계는 메시지 검사자를 구현하는 것입니다.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 다음 코드 예제에서는 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> 메서드를 사용하여 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 속성에 메시지 검사자를 추가하는 방법을 보여 줍니다.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 다음 코드 예제에서는 구성 파일에서 메시지 검사자를 사용할 수 있도록 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>를 구현하는 방법을 보여 줍니다.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 마지막으로 다음 구성 파일에서는 구성에서 위의 예제를 사용하는 방법을 보여 줍니다.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate (endpoint As ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iEndpointBehavior.Validate endpoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">유효성을 검사할 엔드포인트입니다.</param>
        <summary>엔드포인트가 특정 용도의 기준을 충족하는지 확인하려면 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 구조체가 기준 집합을 충족하는지 검사하려면 <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> 메서드를 구현합니다. 이 메서드를 사용하기 위해 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> 또는 <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A>에서 사용자 지정을 수행해야 할 필요는 없습니다. 엔드포인트가 유효성 검사를 통과하면 반환되고, 그렇지 않으면 예외가 throw됩니다.  
  
 예를 들어, <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> 메서드를 사용하여 모든 엔드포인트가 승인된 회사 바인딩을 사용하는지 확인할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>