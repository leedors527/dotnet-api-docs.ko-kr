<Type Name="IServiceBehavior" FullName="System.ServiceModel.Description.IServiceBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8f26cbbfb79ab6e7cd4db524dfccbb6a72e11474" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37617245" /></Metadata><TypeSignature Language="C#" Value="public interface IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceBehavior" />
  <TypeSignature Language="F#" Value="type IServiceBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.ServiceModel.ServiceHostBase" />를 포함하여 전체 서비스에 사용자 지정 확장을 수정 또는 삽입하기 위한 메커니즘을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 애플리케이션 수준에서 서비스 차원 실행의 일부 측면을 수정, 검사 또는 확장하기 위한 <xref:System.ServiceModel.Description.IServiceBehavior> 인터페이스를 구현합니다.  
  
-   런타임 속성 값을 변경하거나 사용자 지정 확장명 개체(예: 오류 처리기, 메시지, 매개 변수 인터셉터 등), 보안 확장명 및 기타 사용자 지정 확장명 개체를 삽입하려면 <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> 메서드를 사용합니다.  
  
-   사용 된 <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> Windows Communication Foundation (WCF) 올바르게 실행할 수 있는지 확인 하려면 실행 서비스를 생성 하기 전에 설명을 검사 하는 방법입니다.  
  
-   바인딩 요소에 서비스에 대한 사용자 지정 정보를 전달하여 서비스를 정확하게 지원할 수 있도록 하려면 <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> 메서드를 사용합니다.  
  
 <xref:System.ServiceModel.Description.IServiceBehavior> 개체는 이러한 메서드 중 아무 메서드나 사용할 수 있지만 그 중 하나만 사용되는 경우가 많으며 사용되지 않은 나머지 메서드는 값 없이 반환될 수 있습니다.  
  
> [!NOTE]
>  모든 <xref:System.ServiceModel.Description.IServiceBehavior> 메서드는 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> 및 <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> 개체를 매개 변수로 전달합니다. <xref:System.ServiceModel.Description.ServiceDescription> 매개 변수는 검사 전용이므로 개체를 수정할 경우 실행 동작이 정의되지 않습니다.  
  
 원하는 대상에 서비스 사용자 지정 작업을 수행하려면 서비스 런타임을 생성하기 전에 <xref:System.ServiceModel.Description.IServiceBehavior> 속성에 <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> 개체를 추가해야 합니다. 이렇게 하는 데는 다음과 같은 세 가지 방법이 있습니다.  
  
-   <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> 메서드가 <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> 개체에서 호출되는 시점에 앞서 <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> 속성에 사용자 지정 서비스 동작을 프로그래밍 방식으로 추가합니다.  
  
-   <xref:System.ServiceModel.Description.IServiceBehavior>를 구현하는 사용자 지정 특성을 만든 다음 이 특성을 사용하여 수정할 서비스 클래스를 표시합니다. 경우는 <xref:System.ServiceModel.ServiceHost> 개체가 생성 되 면 WCF 리플렉션을 사용 하 여 서비스 형식에 특성을 검색 합니다. <xref:System.ServiceModel.Description.IServiceBehavior>를 구현하는 특성이 있는 경우 <xref:System.ServiceModel.Description.ServiceDescription>의 동작 컬렉션에 해당 특성이 추가됩니다.  
  
-   애플리케이션 또는 시스템 구성 파일에서 동작 사양을 지원하도록 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> 클래스를 확장합니다. 자세한 내용은 예제 부분을 참조하십시오.  
  
 WCF의 서비스 동작의 예로 <xref:System.ServiceModel.ServiceBehaviorAttribute> 특성인을 <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> 및 <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> 동작 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 구성 파일에 지정된 서비스 동작을 사용하여 서비스 애플리케이션에 사용자 지정 오류 처리기를 삽입하는 방법을 보여 줍니다. 이 예제에서 오류 처리기는 모든 예외를 catch한 후 사용자 지정 `GreetingFault` SOAP 오류로 변환하여 클라이언트에 반환합니다.  
  
 다음 <xref:System.ServiceModel.Description.IServiceBehavior> 구현에서는 바인딩 매개 변수 개체를 추가하지 않고 각 <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> 속성에 사용자 지정 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> 개체를 추가한 후 서비스 동작이 적용되는 각 서비스 작업에 <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> 형식의 `GreetingFault`가 있는지 확인합니다.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 또한 이 예제에서 동작 클래스는 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>를 구현한 후 이를 사용하여 다음 코드 예제에서처럼 애플리케이션 구성 파일에 서비스 동작을 삽입할 수 있도록 합니다.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase, System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ServiceEndpoint ^&gt; ^ endpoints, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase * System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iServiceBehavior.AddBindingParameters (serviceDescription, serviceHostBase, endpoints, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">서비스에 대한 설명입니다.</param>
        <param name="serviceHostBase">서비스의 호스트입니다.</param>
        <param name="endpoints">서비스 엔드포인트입니다.</param>
        <param name="bindingParameters">바인딩 요소에서 액세스할 수 있는 사용자 지정 개체입니다.</param>
        <summary>계약 구현을 지원하는 사용자 지정 데이터를 바인딩 요소에 전달하는 기능을 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 바인딩 요소가 계약을 지원하기 위한 추가 정보를 수집하는 데 사용할 수 있는 사용자 지정 데이터 개체를 <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> 컬렉션에 추가하려면 `parameters` 메서드를 사용합니다.  
  
 이 메서드는 수신 URI마다 한 번씩 호출됩니다. 예를 들어, 서비스에 네 개의 엔드포인트가 있고 그 중 두 엔드포인트의 수신 URI가 동일한 경우 이 메서드는 세 번 호출됩니다. 그 이유는 `bindingParameters`는 각 채널 스택을 대상으로 하며 채널 스택은 수신 URI마다 하나씩 있기 때문입니다. 호출할 때마다 수신 URI에서 해당 엔드포인트를 수신하기 때문에 두 번의 호출에서는 단일 <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>를 가져오고 한 번의 호출에서는 두 <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> 개체의 컬렉션을 가져옵니다.  
  
> [!NOTE]
>  모든 <xref:System.ServiceModel.Description.IServiceBehavior> 메서드는 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> 및 <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> 개체를 매개 변수로 전달합니다. <xref:System.ServiceModel.Description.ServiceDescription> 매개 변수는 사용자 지정 검사 및 삽입 전용이므로 개체를 수정할 경우 실행 동작이 정의되지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.ApplyDispatchBehavior (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">서비스 설명입니다.</param>
        <param name="serviceHostBase">현재 구축 중인 호스트입니다.</param>
        <summary>런타임 속성 값을 변경하거나 사용자 지정 확장명 개체(예: 오류 처리기, 메시지, 매개 변수 인터셉터 등), 보안 확장명 및 기타 사용자 지정 확장명 개체를 삽입하는 기능을 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일부 사용자 지정 실행 시나리오를 지원하기 위해 생성되는 <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> 개체를 검사하거나 수정하려면 <xref:System.ServiceModel.ServiceHostBase> 메서드를 구현합니다.  
  
> [!NOTE]
>  모든 <xref:System.ServiceModel.Description.IServiceBehavior> 메서드는 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> 및 <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> 개체를 매개 변수로 전달합니다. <xref:System.ServiceModel.Description.ServiceDescription> 매개 변수는 사용자 지정 검사 및 삽입 전용이므로 개체를 수정할 경우 실행 동작이 정의되지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 구성 파일에 지정된 서비스 동작을 사용하여 서비스 애플리케이션에 사용자 지정 오류 처리기를 삽입하는 방법을 보여 줍니다. 이 예제에서 오류 처리기는 모든 예외를 catch한 후 사용자 지정 `GreetingFault` SOAP 오류로 변환하여 클라이언트에 반환합니다.  
  
 다음 <xref:System.ServiceModel.Description.IServiceBehavior> 구현에서는 바인딩 매개 변수 개체를 추가하지 않고 각 <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> 속성에 사용자 지정 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> 개체를 추가한 후 서비스 동작이 적용되는 각 서비스 작업에 <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> 형식의 `GreetingFault`가 있는지 확인합니다.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 또한 이 예제에서 동작 클래스는 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>를 구현한 후 이를 사용하여 다음 코드 예제에서처럼 애플리케이션 구성 파일에 서비스 동작을 삽입할 수 있도록 합니다.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.Validate (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">서비스 설명입니다.</param>
        <param name="serviceHostBase">현재 생성 중인 서비스 호스트입니다.</param>
        <summary>서비스 호스트와 서비스 설명을 검사하여 서비스가 성공적으로 실행될 수 있는지 확인하는 기능을 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 서비스가 시나리오에 따라 제대로 실행될 수 있는지 여부를 확인하려면 <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> 메서드를 사용합니다.  
  
> [!NOTE]
>  모든 <xref:System.ServiceModel.Description.IServiceBehavior> 메서드는 <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> 및 <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> 개체를 매개 변수로 전달합니다. <xref:System.ServiceModel.Description.ServiceDescription> 매개 변수는 사용자 지정 검사 및 삽입 전용이므로 개체를 수정할 경우 실행 동작이 정의되지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 구성 파일에 지정된 서비스 동작을 사용하여 서비스 애플리케이션에 사용자 지정 오류 처리기를 삽입하는 방법을 보여 줍니다. 이 예제에서 오류 처리기는 모든 예외를 catch한 후 사용자 지정 `GreetingFault` SOAP 오류로 변환하여 클라이언트에 반환합니다.  
  
 다음 <xref:System.ServiceModel.Description.IServiceBehavior> 구현에서는 바인딩 매개 변수 개체를 추가하지 않고 각 <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> 속성에 사용자 지정 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> 개체를 추가한 후 서비스 동작이 적용되는 각 서비스 작업에 <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> 형식의 `GreetingFault`가 있는지 확인합니다.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 또한 이 예제에서 동작 클래스는 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>를 구현한 후 이를 사용하여 다음 코드 예제에서처럼 애플리케이션 구성 파일에 서비스 동작을 삽입할 수 있도록 합니다.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>