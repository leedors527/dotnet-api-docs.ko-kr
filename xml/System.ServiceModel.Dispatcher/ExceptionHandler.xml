<Type Name="ExceptionHandler" FullName="System.ServiceModel.Dispatcher.ExceptionHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="81cae302b043c2c5b7ae7da44a0923e222599f47" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55394588" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExceptionHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExceptionHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ExceptionHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExceptionHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandler abstract" />
  <TypeSignature Language="F#" Value="type ExceptionHandler = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>WCF(Windows Communication Foundation) 런타임에 발생하는 처리되지 않은 예외에 대한 예외 처리기를 만들려면 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 클래스를 확장합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.ExceptionHandler> 클래스를 확장하고 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 메서드를 재정의하여 예외가 발생할 경우 애플리케이션을 종료할지 여부를 결정합니다. 다음 사용자의 새 인스턴스를 만듭니다 <xref:System.ServiceModel.Dispatcher.ExceptionHandler> 클래스 및 정적으로 할당할 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> 또는 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> WCF 클라이언트 또는 서비스를 만들기 전에 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.ServiceModel.Dispatcher.ExceptionHandler> 메서드를 재정의하는 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 추상 클래스를 구현하는 방법을 보여 줍니다.  
  
 [!code-csharp[S_UEExceptionHandler#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#0)]
 [!code-vb[S_UEExceptionHandler#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#0)]  
  
 다음 코드 예제에서는 사용자 지정을 사용 하도록 설정 하는 방법을 보여 줍니다. `MyExceptionHandler` WCF 런타임 내에서 발생 하는 처리 되지 않은 예외에 대 한 합니다.  
  
 [!code-csharp[S_UEExceptionHandler#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#1)]
 [!code-vb[S_UEExceptionHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExceptionHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlwaysHandle">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlwaysHandle As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AlwaysHandle { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlwaysHandle : System.ServiceModel.Dispatcher.ExceptionHandler" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>모든 예외를 처리하는 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 인스턴스를 가져옵니다.</summary>
        <value>모든 예외에 대해 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />를 반환하는 <see langword="true" /> 개체입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsynchronousThreadExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AsynchronousThreadExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AsynchronousThreadExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsynchronousThreadExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>get: System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>애플리케이션 도메인에 대한 현재 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 구현을 가져오거나 설정합니다.</summary>
        <value>사용자 지정 할당 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 받는 개체 처리 되지 않은 비동기 Windows Communication Foundation (WCF) 스레드에서 발생 하는 예외입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> 속성은 `null`, 비동기 WCF 스레드에서 처리 되지 않은 예외는 애플리케이션을 종료 합니다.  이러한 예외를 수신하여 상호 작용하게 하려면 이 속성을 <xref:System.ServiceModel.Dispatcher.ExceptionHandler> 개체로 설정합니다.  
  
 처리 되지 않은 예외가 비동기 WCF 스레드에서 발생 하이 처리기에 도달 하는 경우 애플리케이션 도메인의 상태가 손상 될 수 있습니다.  <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 반환 되어서는 안 `true` 이러한 예외에 대 한 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleException">
      <MemberSignature Language="C#" Value="public abstract bool HandleException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool HandleException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="abstract member HandleException : Exception -&gt; bool" Usage="exceptionHandler.HandleException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">WCF(Windows Communication Foundation) 런타임에서 발생한 예외이며 애플리케이션을 종료할 수 있습니다.</param>
        <summary>파생 클래스에서 재정의된 경우 예외가 처리되었으면 <see langword="true" />를 반환하고, 예외가 다시 throw되면 <see langword="false" />를 반환한 후 애플리케이션이 종료됩니다.</summary>
        <returns>예외가 처리되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 속성은 예외가 처리되었을 경우 `true`를 반환합니다. `false`가 반환되거나 다른 예외가 throw되면 원래의 예외가 다시 throw됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.ServiceModel.Dispatcher.ExceptionHandler> 메서드를 재정의하는 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 추상 클래스를 구현하는 방법을 보여 줍니다.  
  
  
  
 다음 코드 예제에서는 사용자 지정을 사용 하도록 설정 하는 방법을 보여 줍니다. `MyExceptionHandler` WCF 런타임 내에서 발생 하는 처리 되지 않은 예외에 대 한 합니다.  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransportExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TransportExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ TransportExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransportExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>애플리케이션 도메인에 대한 현재 전송 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 구현을 가져오거나 설정합니다.</summary>
        <value>사용자 지정 <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> 받는 개체 처리 되지 않은 전역 Windows Communication Foundation (WCF) 전송에서 발생 하는 예외입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> 속성의 값으로 설정 됩니다 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, 무시할 WCF 전송에서 처리 되지 않은 예외 발생을 막습니다.  이러한 예외를 수신하여 상호 작용하게 하려면 이 속성을 <xref:System.ServiceModel.Dispatcher.ExceptionHandler>의 인스턴스로 설정합니다.  
  
 처리 되지 않은 예외가 전역 WCF 전송에서 발생 하이 처리기에 도달 하는 경우 애플리케이션 도메인의 상태가 손상 된 가능성이 있습니다. <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 반환할 수 있습니다 `false` 이러한 예외는 애플리케이션을 종료할 수에 대 한 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>