<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="338473ae149afc3abbbba5fe33991b0f472b9e6d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39855100" /></Metadata><TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <TypeSignature Language="F#" Value="type IDispatchMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>서비스 애플리케이션에서 인바운드 및 아웃바운드 애플리케이션 메시지를 사용자 지정 검사하거나 수정할 수 있게 해주는 메서드를 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요청 메시지를 작업에 디스패치하기 전에 또는 회신 메시지를 호출자에게 반환하기 전에 인바운드/아웃바운드 애플리케이션 메시지를 검사하거나 수정하려면 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>를 구현합니다. 대상 작업을 호출하기 전에 메시지를 가로채야 하는 많은 시나리오가 있습니다. 예를 들어, 들어오는 애플리케이션 메시지를 기록하거나 메시지 헤더를 기반으로 몇 가지 기능을 수행할 수 있습니다.  
  
 일반적으로 메시지 검사자는 서비스 동작(<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), 엔드포인트 동작(<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>) 또는 계약 동작(<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>)에 의해 삽입됩니다. 그런 다음 해당 동작에 따라 메시지 검사자가 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 컬렉션에 추가됩니다. 런타임 동작을 사용 하 여 확장 하는 방법에 대 한 자세한 내용은 참조 하세요. [Extending ServiceHost 및 서비스 모델 계층](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md)합니다.  
  
-   <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> 메서드는 메시지를 수신한 후 의도된 작업에 디스패치하기 전에 사용자 지정 동작을 활성화합니다.  
  
-   <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> 메서드는 작업이 반환된 후 회신이 전송되기 전에 사용자 지정 동작을 활성화합니다.  
  
> [!NOTE]
>  <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> 개체는 작업이 단방향 작업인지 아니면 요청-회신 작업인지에 상관없이 메시지를 디스패치하는 중에 항상 같은 지점에서 호출됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 콘솔이 호출될 때 해당 콘솔에 문자열을 쓰는 기본 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>를 보여 줍니다.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 다음 코드 예제에서는 <xref:System.ServiceModel.Description.IServiceBehavior>를 구현하여 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>를 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 컬렉션에 추가하는 방법을 보여 줍니다.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 다음 코드 예제에서는 애플리케이션 구성 파일을 사용하여 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>를 삽입하는 서비스 동작을 로드하는 방법을 보여 줍니다.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveRequest :  * System.ServiceModel.IClientChannel * System.ServiceModel.InstanceContext -&gt; obj" Usage="iDispatchMessageInspector.AfterReceiveRequest (request, channel, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request">요청 메시지입니다.</param>
        <param name="channel">들어오는 채널입니다.</param>
        <param name="instanceContext">현재 서비스 인스턴스입니다.</param>
        <summary>인바운드 메시지가 수신된 후 메시지가 의도된 작업에 디스패치되기 전에 호출됩니다.</summary>
        <returns>상태를 상호 연결하는 데 사용되는 개체입니다. 이 개체는 <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> 메서드에 다시 전달됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 들어오는 메시지, 메시지를 제공한 클라이언트 채널 및 현재 서비스 인스턴스를 검사하거나 수정하려면 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> 메서드를 사용합니다. 상호 연결을 위해 사용하려는 모든 개체가 반환 값이 될 수 있으며, 이 값은 `correlationState` 메서드의 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> 매개 변수로 반환됩니다.  
  
> [!IMPORTANT]
>  전체 메시지를 버퍼링하고 복사하지 않을 경우 메시지 본문을 사용할 수 없습니다. 이 경우 두 개의 메시지 복사본을 만들어야 하며, 한 복사본은 검사 작업에 사용되고 다른 복사본은 `request` 매개 변수 덮어쓰기 작업에 사용됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 콘솔이 호출될 때 해당 콘솔에 문자열을 쓰는 기본 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>를 보여 줍니다.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 다음 코드 예제에서는 <xref:System.ServiceModel.Description.IServiceBehavior>를 구현하여 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>를 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 컬렉션에 추가하는 방법을 보여 줍니다.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 다음 코드 예제에서는 애플리케이션 구성 파일을 사용하여 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>를 삽입하는 서비스 동작을 로드하는 방법을 보여 줍니다.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendReply :  * obj -&gt; unit" Usage="iDispatchMessageInspector.BeforeSendReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">회신 메시지입니다. 작업이 단방향일 경우 이 값은 null입니다.</param>
        <param name="correlationState"><see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> 메서드에서 반환된 상관 관계 개체입니다.</param>
        <summary>작업이 반환된 후 회신 메시지를 보내기 전에 호출됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 메시지를 보내기 전에 사용자 지정 동작을 수행하려면 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> 메서드를 사용합니다. `correlationState`는 인바운드 호출과 아웃바운드 호출 간에 상호 연결을 수행하여 사용자 동작을 지원하는 데 사용할 수 있는 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> 메서드에서 반환된 개체입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 콘솔이 호출될 때 해당 콘솔에 문자열을 쓰는 기본 <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>를 보여 줍니다.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 다음 코드 예제에서는 <xref:System.ServiceModel.Description.IServiceBehavior>를 구현하여 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>를 <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> 컬렉션에 추가하는 방법을 보여 줍니다.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 다음 코드 예제에서는 애플리케이션 구성 파일을 사용하여 `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>를 삽입하는 서비스 동작을 로드하는 방법을 보여 줍니다.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>