<Type Name="IErrorHandler" FullName="System.ServiceModel.Dispatcher.IErrorHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d53fc1231bdab962563031c79a792172f80d8035" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58454639" /></Metadata><TypeSignature Language="C#" Value="public interface IErrorHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IErrorHandler" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IErrorHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IErrorHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IErrorHandler" />
  <TypeSignature Language="F#" Value="type IErrorHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>구현자가 호출자에게 반환되는 오류 메시지를 제어하고, 로깅 등의 사용자 지정 오류 처리를 선택적으로 수행할 수 있도록 합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 예외가 throw 되 면 응용 프로그램의 동작을 명시적으로 제어를 구현 합니다 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 인터페이스에 추가 하는 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>의 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 속성입니다. <xref:System.ServiceModel.Dispatcher.IErrorHandler>를 사용하면 발생되는 SOAP 오류를 명시적으로 제어하고, 오류를 클라이언트에게 다시 보낼지 여부를 결정하며, 로깅과 같은 관련 작업을 수행할 수 있습니다. 오류 처리기는 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 속성에 추가된 순서대로 호출됩니다.  
  
 클라이언트에게 반환되는 오류 메시지를 제어하려면 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 메서드를 구현합니다.  
  
 오류 로깅, fail-fast 보장, 응용 프로그램 종료 등과 같은 오류 관련 동작을 확인하려면 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 메서드를 구현합니다.  
  
> [!NOTE]
>  <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 메서드는 여러 다른 위치에서 호출될 수 있기 때문에 이 메서드가 특정 스레드에서 호출된다고 보장할 수 없습니다. <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 메서드가 작업 스레드에서 호출된다고 단정하지 마십시오.  
  
 모든 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 구현은 응답 메시지를 보내기 전에 처음으로 호출됩니다. 모든 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 구현이 호출되어 반환될 경우 `fault`가 `null`이 아니면 작업 계약에 따라 클라이언트에게 다시 전송됩니다. 모든 구현이 호출된 후에 `fault`가 `null`이면 응답 메시지는 <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> 속성 값에 의해 제어됩니다.  
  
> [!NOTE]
>  모든 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 구현이 호출되고 응답 메시지가 채널로 전달된 후 예외가 발생할 수 있습니다. (예: 메시지를 직렬화 하는 어려움) 채널 예외가 발생 하는 경우 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 개체 알림이 표시 됩니다. 이 경우 여전히 확인 해야 catch 하 고 이러한 예외를 표시 하는 개발 환경 또는 사용 하 여 추적 하는 문제를 검색 합니다. 추적에 대 한 자세한 내용은 참조 하세요. [응용 프로그램 문제 해결을 사용 하 여 추적](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md)합니다.  
  
 응답 메시지가 전송된 후 모든 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 구현이 동일한 순서로 호출됩니다.  
  
 일반적으로 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 구현은 서비스 및 클라이언트(양방향 통신의 경우)의 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 속성에 추가됩니다.  
  
 동작(<xref:System.ServiceModel.Dispatcher.IErrorHandler>, <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> 또는 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> 개체)을 구현하여 런타임에 <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>를 추가하고, 구성 파일이나 사용자 지정 속성을 통해 이 동작을 프로그래밍 방식으로 사용함으로써 <xref:System.ServiceModel.Dispatcher.IErrorHandler>를 연결할 수 있습니다.  
  
 동작을 사용 하 여 런타임을 수정 하는 방법에 대 한 자세한 내용은 참조 하세요. [구성 및 동작을 사용 하 여 런타임 확장](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 서비스 메서드가 관리 예외를 throw할 때 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 형식의 <xref:System.ServiceModel.FaultException%601>만 반환하는 `GreetingFault`를 구현하는 서비스에 대해 설명합니다.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 다음 코드 예제에서는 서비스 동작을 사용하여 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 구현을 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 속성에 추가하는 방법을 보여 줍니다.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 다음 코드 예제에서는 응용 프로그램 구성 파일을 사용하여 서비스 동작을 로드하도록 서비스를 구성하는 방법을 보여 줍니다. 구성 파일에서 서비스 동작을 공개하는 방법에 대한 자세한 내용은 <xref:System.ServiceModel.Description.IServiceBehavior>를 참조하십시오.  

 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="HandleError">
      <MemberSignature Language="C#" Value="public bool HandleError (Exception error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception error) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function HandleError (error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="public bool HandleError (Exception exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception exception) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member HandleError : Exception -&gt; bool" Usage="iErrorHandler.HandleError exception" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member HandleError : Exception -&gt; bool" Usage="iErrorHandler.HandleError exception" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="error">처리 중에 throw되는 예외입니다.</param>
        <param name="exception">처리 중에 throw되는 예외입니다.</param>
        <summary>오류 관련 처리를 사용하고 디스패처가 특정 상황에서 세션 및 인스턴스 컨텍스트를 중단하는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>WCF(Windows Communication Foundation)가 세션(있는 경우)을 중단하지 않는 경우 <see langword="true" />이고 인스턴스 컨텍스트가 <see cref="F:System.ServiceModel.InstanceContextMode.Single" />이 아닌 경우 인스턴스 컨텍스트이며, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 오류 로깅, 시스템 알림, 응용 프로그램 종료 등의 오류 관련 동작을 구현하고 예외가 적절하게 처리되었는지 여부를 지정하는 값을 반환하려면 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 메서드를 사용하십시오.  
  
> [!NOTE]
>  <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 메서드는 여러 다른 위치에서 호출될 수 있기 때문에 이 메서드가 특정 스레드에서 호출된다고 보장할 수 없습니다. <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 메서드가 작업 스레드에서 호출된다고 단정하지 마십시오.  
  
 모든 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 구현이 호출됩니다. 기본적으로 (반환 값이 `false`), 예외가 있으면 디스패처가 모든 세션을 중단 하 고 중단 합니다 <xref:System.ServiceModel.InstanceContext> 경우는 <xref:System.ServiceModel.InstanceContextMode> 가 아닌 <xref:System.ServiceModel.InstanceContextMode.Single>합니다.  그러면 예외가 처리되지 않은 것으로 간주되어 모든 상태가 손상된 것으로 간주됩니다.  
  
 이 기본 동작이 수행되지 않게 하려면 `true`에서 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>를 반환하십시오. 오류 처리기를 반환 하는 경우 `true` 것이 안전 실패 한 요청과 관련 된 상태를 계속 사용 하는 WCF에 지시 합니다.  
  
 오류 처리기가 `true` 메서드에서 <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>를 반환하면 예외가 처리되지 않은 것으로 간주되고 기본 응답이 사용됩니다. 이 경우 세션 채널에서 통신하거나 <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> 속성이 <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType>로 설정되지 않은 경우 <xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType>와 채널이 중단될 수 있습니다.  
  
 `error` 매개 변수는 `null`이 될 수 없으며 throw된 예외 개체를 포함합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 서비스 메서드가 관리 예외를 throw할 때 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 형식의 <xref:System.ServiceModel.FaultException%601>만 반환하는 `GreetingFault`를 구현하는 서비스에 대해 설명합니다.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 다음 코드 예제에서는 서비스 동작을 사용하여 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 구현을 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 속성에 추가하는 방법을 보여 줍니다.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 다음 코드 예제에서는 응용 프로그램 구성 파일을 사용하여 서비스 동작을 로드하도록 서비스를 구성하는 방법을 보여 줍니다. 구성 파일에서 서비스 동작을 공개하는 방법에 대한 자세한 내용은 <xref:System.ServiceModel.Description.IServiceBehavior>를 참조하십시오.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvideFault">
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception error, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProvideFault (error As Exception, version As MessageVersion, ByRef fault As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ error, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8" />
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception exception, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception exception, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ exception, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member ProvideFault : Exception * System.ServiceModel.Channels.MessageVersion *  -&gt; unit" Usage="iErrorHandler.ProvideFault (exception, version, fault)" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member ProvideFault : Exception * System.ServiceModel.Channels.MessageVersion *  -&gt; unit" Usage="iErrorHandler.ProvideFault (exception, version, fault)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="version" Type="System.ServiceModel.Channels.MessageVersion" Index="1" />
        <Parameter Name="fault" Type="System.ServiceModel.Channels.Message" RefType="ref" Index="2" />
      </Parameters>
      <Docs>
        <param name="error">서비스 작업 중에 throw되는 <see cref="T:System.Exception" /> 개체입니다.</param>
        <param name="exception">서비스 작업 중에 throw되는 <see cref="T:System.Exception" /> 개체입니다.</param>
        <param name="version">메시지의 SOAP 버전입니다.</param>
        <param name="fault">클라이언트 또는 서비스(양방향인 경우)에 반환되는 <see cref="T:System.ServiceModel.Channels.Message" /> 개체입니다.</param>
        <summary>서비스 메서드 중에 발생한 예외로부터 반환되는 사용자 지정 <see cref="T:System.ServiceModel.FaultException`1" />을 만들 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클라이언트에 반환되는 사용자 지정 오류 메시지를 만들려면 <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 메서드를 구현합니다.  <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 메서드는 항상 WCF 런타임은 같은 특히 심각한 예외를 인식 하 고 자체 예외를 다시 throw 하는 경우를 제외 하 고 작업을 유지 하는 예외에 대 한 호출 수입니다. <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>가 `fault`이 아닌 경우 모든 `null` 구현이 호출되면 오류 메시지가 클라이언트에 다시 전송됩니다. 경우는 `fault` 매개 변수는 `null` 기본 오류가 클라이언트에 전송 됩니다.  
  
> [!NOTE]
>  처리 오류의 원인인 인바운드 메시지는 이 메서드의 <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType> 속성에서 사용할 수 있습니다.  
  
> [!NOTE]
>  <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 메서드는 여러 다른 위치에서 호출될 수 있기 때문에 이 메서드가 특정 스레드에서 호출된다고 보장할 수 없습니다. <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 메서드가 작업 스레드에서 호출된다고 단정하지 마십시오.  
  
   
  
## Examples  
 다음 코드 예제에서는 서비스 메서드가 관리 예외를 throw할 때 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 형식의 <xref:System.ServiceModel.FaultException%601>만 반환하는 `GreetingFault`를 구현하는 서비스에 대해 설명합니다.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 다음 코드 예제에서는 서비스 동작을 사용하여 <xref:System.ServiceModel.Dispatcher.IErrorHandler> 구현을 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> 속성에 추가하는 방법을 보여 줍니다.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 다음 코드 예제에서는 응용 프로그램 구성 파일을 사용하여 서비스 동작을 로드하도록 서비스를 구성하는 방법을 보여 줍니다. 구성 파일에서 서비스 동작을 공개하는 방법에 대한 자세한 내용은 <xref:System.ServiceModel.Description.IServiceBehavior>를 참조하십시오.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>