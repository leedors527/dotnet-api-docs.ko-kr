<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d99445906f7000f567c08da21e17ff96cb11451f" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37615919" /></Metadata><TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <TypeSignature Language="F#" Value="type IInstanceProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>서비스 개체를 제공하거나 WCF(Windows Communication Foundation) 서비스에 대한 서비스 개체를 재활용하는 메서드를 선언합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 개체에 의해 요청 또는 삭제된 서비스 개체를 생성하고 재활용하도록 제어하려면 <xref:System.ServiceModel.InstanceContext> 인터페이스를 구현합니다.  
  
 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 인터페이스를 구현한 후에 엔드포인트 동작(<xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> 개체) 또는 계약 동작(<xref:System.ServiceModel.Description.IEndpointBehavior> 개체)을 사용하여 사용자 지정 인스턴스 공급자 개체를 <xref:System.ServiceModel.Description.IContractBehavior> 속성에 할당해야 합니다.  
  
 삽입 메커니즘이 엔드포인트 동작인 경우, 구성 파일을 사용하여 사용자 지정 동작을 삽입할 수 있는 <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> 개체를 구현할 수도 있습니다. 삽입 메커니즘이 계약 동작인 경우에는 서비스 호스트를 열기 전에 동작을 프로그래밍 방식으로 삽입할 수 있으며, 아니면 사용자 지정 특성을 구현할 수 있습니다. 계약 동작 방법의 예제는 아래의 예제 단원을 참조하십시오.  
  
 <xref:System.ServiceModel.Dispatcher.IInstanceProvider>에는 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> 및 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>의 두 메서드가 있습니다. 이러한 메서드는 일반적으로 기본값이 아닌 생성자를 사용하여 서비스 개체를 만들거나 개체 수명 관련 상태를 초기화 또는 삭제하기 위해 구현됩니다. 서비스 개체 풀링은 사용자 지정 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> 기능의 한 예입니다.  
  
 일반적으로 <xref:System.ServiceModel.InstanceContext>는 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>가 처음 생성될 때 <xref:System.ServiceModel.InstanceContext>를 호출하고 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>가 닫힐 때 <xref:System.ServiceModel.InstanceContext> 메서드를 호출합니다.  
  
 <xref:System.ServiceModel.InstanceContext>가 닫히기 전에 <xref:System.ServiceModel.InstanceContext> 개체가 서비스 개체를 해제하도록 하는 데는 두 가지 방법이 있습니다. 첫 번째 방법은 <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A>를 <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> 또는 <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>로 설정하는 것이고, 두 번째 방법은 <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> 메서드를 호출하는 것입니다. 그런 다음 <xref:System.ServiceModel.InstanceContext>는 디스패처의 인스턴스 공급자에서 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> 메서드를 호출합니다. WCF를 사용 하 여 새 인스턴스를 만듭니다 인스턴스가 해제 된 이후에 새 메시지가 도착 하는 경우는 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> 메서드.  
  
> [!NOTE]
>  서비스의 <xref:System.ServiceModel.InstanceContextMode>가 <xref:System.ServiceModel.InstanceContextMode.Single>인 경우에는 사용자가 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>와 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>를 직접 차례로 호출하지 않는 한, 사용자가 잘 알려진 서비스 개체를 제공하지 않았더라도 시스템에서 <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> 또는 <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A> 메서드를 호출하지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 항상 동일한 서비스 인스턴스를 반환하고 이 인스턴스를 재활용하지 않는 "singleton" 동작을 제공하는 <xref:System.ServiceModel.Dispatcher.IInstanceProvider>를 구현하는 방법을 보여 줍니다.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 다음 코드 예제에서는 <xref:System.ServiceModel.Description.IContractBehavior>를 구현하는 사용자 지정 특성을 구현하여 사용자 지정 서비스 인스턴스 공급자를 삽입하는 방법을 보여 줍니다. 또한 특정 계약에 사용하도록 바인딩하는 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>를 구현합니다.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>서비스 개체를 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext -&gt; obj" Usage="iInstanceProvider.GetInstance instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">현재 <see cref="T:System.ServiceModel.InstanceContext" /> 개체입니다.</param>
        <summary>지정된 <see cref="T:System.ServiceModel.InstanceContext" /> 개체에 부여된 서비스 개체를 반환합니다.</summary>
        <returns>사용자 정의 서비스 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> 새로 만들 하려고 할 때 WCF 서비스에서 수신 하는 서비스 개체를 제어 하는 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 항상 동일한 서비스 인스턴스를 반환하고 이 인스턴스를 재활용하지 않는 "singleton" 동작을 제공하는 <xref:System.ServiceModel.Dispatcher.IInstanceProvider>를 구현하는 방법을 보여 줍니다.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 다음 코드 예제에서는 <xref:System.ServiceModel.Description.IContractBehavior>를 구현하는 사용자 지정 특성을 구현하여 사용자 지정 서비스 인스턴스 공급자를 삽입하는 방법을 보여 줍니다. 또한 특정 계약에 사용하도록 바인딩하는 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>를 구현합니다.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message -&gt; obj" Usage="iInstanceProvider.GetInstance (instanceContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext">현재 <see cref="T:System.ServiceModel.InstanceContext" /> 개체입니다.</param>
        <param name="message">서비스 개체를 만들도록 트리거한 메시지입니다.</param>
        <summary>지정된 <see cref="T:System.ServiceModel.InstanceContext" /> 개체에 부여된 서비스 개체를 반환합니다.</summary>
        <returns>서비스 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> 새로 만들 하려고 할 때 WCF 서비스에서 수신 하는 서비스 개체를 제어 하는 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 항상 동일한 서비스 인스턴스를 반환하고 이 인스턴스를 재활용하지 않는 "singleton" 동작을 제공하는 <xref:System.ServiceModel.Dispatcher.IInstanceProvider>를 구현하는 방법을 보여 줍니다.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 다음 코드 예제에서는 <xref:System.ServiceModel.Description.IContractBehavior>를 구현하는 사용자 지정 특성을 구현하여 사용자 지정 서비스 인스턴스 공급자를 삽입하는 방법을 보여 줍니다. 또한 특정 계약에 사용하도록 바인딩하는 <xref:System.ServiceModel.Description.IContractBehaviorAttribute>를 구현합니다.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseInstance : System.ServiceModel.InstanceContext * obj -&gt; unit" Usage="iInstanceProvider.ReleaseInstance (instanceContext, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext">서비스의 인스턴스 컨텍스트입니다.</param>
        <param name="instance">재활용할 서비스 개체입니다.</param>
        <summary><see cref="T:System.ServiceModel.InstanceContext" /> 개체가 서비스 개체를 재활용할 때 호출됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 서비스에서 서비스 개체를 재활용할 때 일부 사용자 지정 리소스 삭제 또는 기타 재활용 사용자 지정을 수행하려면 <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> 메서드를 사용합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>