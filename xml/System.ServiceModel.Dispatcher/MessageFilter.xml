<Type Name="MessageFilter" FullName="System.ServiceModel.Dispatcher.MessageFilter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="89562be342087ef3e8abf6bf27ffdb95d6201cc6" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48761821" /></Metadata><TypeSignature Language="C#" Value="public abstract class MessageFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageFilter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageFilter abstract" />
  <TypeSignature Language="F#" Value="type MessageFilter = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchNoneMessageFilter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.ActionMessageFilter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchAllMessageFilter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.XPathMessageFilter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>메시지를 쿼리하는 데 사용되는 다양한 필터 클래스에 대한 <see langword="abstract" /> 기본 클래스입니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.MessageFilter>는 메시지 검사에 사용할 기준을 지정하기 위해 개발자가 구현하는 `abstract` 클래스입니다. 일반적으로 필터는 엔드포인트 애플리케이션에서 일부 메시지 부분에 대한 검사를 기반으로 메시지에 대해 수행할 작업을 결정하는 데 사용됩니다. 예를 들어, 큐 프로세스에서는 XPath 1.0 쿼리를 사용하여 알려진 헤더의 우선 순위 요소를 검사함으로써 메시지를 큐의 앞으로 이동할지 여부를 결정할 수 있습니다.  
  
 필터는 <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601>을 구현하는 필터 테이블에 저장됩니다. 테이블의 각 필터는 메시지가 필터와 일치할 경우에 수행할 작업을 나타내는 데 사용할 수 있는 지정된 필터 데이터에 연결됩니다. <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> 메서드는 메시지가 필터를 충족하는지 확인하는 데 사용됩니다.  
  
 필터 테이블에서는 변경 여부를 확인할 수 없으므로 필터를 만든 후에는 필터에 사용되는 조건을 변경할 수 없습니다. 필터 조건을 수정하려면 새 필터를 만든 다음 기존 필터를 삭제해야 합니다.  
  
 다음 클래스는 `abstract`<xref:System.ServiceModel.Dispatcher.MessageFilter> 클래스를 구현합니다.  
  
-   <xref:System.ServiceModel.Dispatcher.XPathMessageFilter> - XPath 1.0 식을 사용하여 일치 조건을 지정합니다.  
  
-   <xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter> - 모든 메시지와 일치합니다.  
  
-   <xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter> - 어떤 메시지와도 일치하지 않습니다.  
  
-   <xref:System.ServiceModel.Dispatcher.ActionMessageFilter> - 메시지 동작이 지정된 동작 집합 중 하나인지 여부를 테스트합니다.  
  
-   <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter> - 메시지가 지정된 엔드포인트 주소를 충족하는지 여부를 테스트합니다.  
  
 <xref:System.ServiceModel.Channels.ChannelListenerBase%601> - 큐에 없는 수신기를 작성하는 데 사용할 수 있는 `abstract` 기본 클래스입니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 호출되는 경우 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 <xref:System.ServiceModel.Dispatcher.MessageFilter>에서 파생된 필터만 인스턴스화될 수 있도록 보호됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterTable&lt;FilterData&gt;">
      <MemberSignature Language="C#" Value="protected internal virtual System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt; CreateFilterTable&lt;FilterData&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ServiceModel.Dispatcher.IMessageFilterTable`1&lt;!!FilterData&gt; CreateFilterTable&lt;FilterData&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CreateFilterTable(Of FilterData) () As IMessageFilterTable(Of FilterData)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename FilterData&gt;&#xA; virtual System::ServiceModel::Dispatcher::IMessageFilterTable&lt;FilterData&gt; ^ CreateFilterTable();" />
      <MemberSignature Language="F#" Value="abstract member CreateFilterTable : unit -&gt; System.ServiceModel.Dispatcher.IMessageFilterTable&lt;'FilterData&gt;&#xA;override this.CreateFilterTable : unit -&gt; System.ServiceModel.Dispatcher.IMessageFilterTable&lt;'FilterData&gt;" Usage="messageFilter.CreateFilterTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="FilterData" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="FilterData">테이블에서 필터와 연결된 데이터입니다.</typeparam>
        <summary>지정된 유형의 데이터가 연결된 필터에 대한 필터 테이블을 만듭니다.</summary>
        <returns><see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" />에 연결된 필터를 추가할 수 있는 <paramref name="FilterData" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601>에서 호출할 수 있습니다. 사용자는 필터 테이블에 대한 생성자를 호출하여 필터 테이블을 만들어야 합니다. 이 메서드의 기본 구현에서는 각 필터의 <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> 메서드를 순차적으로 호출하는 필터 테이블을 반환합니다. 필터를 구현할 때 사용자 지정 필터 테이블을 연결하도록 이 메서드를 재정의합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>파생 클래스에서 재정의된 경우 메시지 또는 버퍼링된 메시지가 필터 기준을 충족하는지 여부를 테스트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 오버로드 간의 차이점은 하나는 <xref:System.ServiceModel.Channels.Message> 매개 변수를 사용하고 본문을 검사할 수 없으며, 다른 하나는 <xref:System.ServiceModel.Channels.MessageBuffer> 매개 변수를 사용하고 메시지의 모든 부분을 검사할 수 있다는 점입니다. 메시지 헤더는 자동으로 버퍼링되므로 별도의 사용 없이도 필터를 통해 검사할 수 있습니다. 그러나 버퍼링되지 않은 메시지 본문이 쿼리에 사용되면 그 내용이 제거되므로 필터를 사용하여 본문을 검사하려면 전체 메시지를 버퍼링해야 합니다.  
  
 본문을 검사할 필요가 없으면 <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A>를 사용합니다. 메시지 본문을 검사해야 하면 <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A>를 사용합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Null" /> 메시지는 유효하지 않으므로 <see cref="T:System.ArgumentNullException" />이 throw됩니다.</para></block>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public abstract bool Match (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Match(System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Match : System.ServiceModel.Channels.Message -&gt; bool" Usage="messageFilter.Match message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message">테스트할 <see cref="T:System.ServiceModel.Channels.Message" /> 개체입니다.</param>
        <summary>파생 클래스에서 재정의된 경우 메시지가 필터 기준을 충족하는지 여부를 테스트합니다. 본문은 검사할 수 없습니다.</summary>
        <returns><see langword="true" /> 개체가 필터 조건을 충족하면 <see cref="T:System.ServiceModel.Channels.Message" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 메시지 본문의 내용을 검사할 수 없습니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>이 필터가 버퍼링되지 않은 메시지의 본문을 검사하려 할 경우 <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" />가 throw되며, <see langword="false" />가 반환되지 않습니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public abstract bool Match (System.ServiceModel.Channels.MessageBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.ServiceModel.Channels.MessageBuffer buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Match (buffer As MessageBuffer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Match(System::ServiceModel::Channels::MessageBuffer ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member Match : System.ServiceModel.Channels.MessageBuffer -&gt; bool" Usage="messageFilter.Match buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <param name="buffer">테스트할 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 개체입니다.</param>
        <summary>파생 클래스에서 재정의된 경우 버퍼링된 메시지가 필터 기준을 충족하는지 여부를 테스트합니다.</summary>
        <returns><see langword="true" /> 개체가 필터 조건을 충족하면 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 필터에서 본문을 검사하려면 메시지 전체를 버퍼링해야 합니다. <xref:System.ServiceModel.Channels.MessageBuffer>의 본문은 전체적으로 버퍼링되므로 필터를 통해 검사할 수 있습니다. 전체적으로 버퍼링되지 않은 <xref:System.ServiceModel.Channels.Message> 본문은 필터 검사에 사용될 수 있습니다. <xref:System.ServiceModel.Channels.Message>의 헤더 요소는 자동으로 버퍼링되므로 별도의 사용 없이도 검사할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>