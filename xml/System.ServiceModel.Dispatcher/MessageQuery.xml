<Type Name="MessageQuery" FullName="System.ServiceModel.Dispatcher.MessageQuery">
  <Metadata><Meta Name="ms.openlocfilehash" Value="398692b5704baefe2ac60469d9fe0ceee2d1e493" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39936415" /></Metadata><TypeSignature Language="C#" Value="public abstract class MessageQuery" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageQuery extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.MessageQuery" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageQuery" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQuery abstract" />
  <TypeSignature Language="F#" Value="type MessageQuery = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>메시지에서 특정 상호 관련 데이터를 검색하는 데 사용되는 클래스의 핵심 동작을 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.MessageQuery> 클래스는 <xref:System.ServiceModel.Dispatcher.MessageFilter> 클래스와 유사합니다.  그러나 <xref:System.ServiceModel.Dispatcher.MessageQuery.Evaluate%2A> 메서드는 일치 항목을 반환하는 대신 메시지에 대해 쿼리를 실행한 결과를 반환합니다. 쿼리 결과는 메시지에 있는 값입니다. 이 값을 키로 사용하여 메시지를 다른 메시지와 상호 연결할 수 있습니다. 데이터에 대한 새 속성을 추가하려면 <xref:System.ServiceModel.Channels.CorrelationDataMessageProperty.Add%2A> 클래스의 <xref:System.ServiceModel.Channels.CorrelationDataMessageProperty> 메서드를 사용합니다.  
  
> [!NOTE]
>  <xref:System.ServiceModel.Dispatcher.MessageQuery>의 구체적 구현은 <xref:System.ServiceModel.XPathMessageQuery> 클래스를 참조하십시오.  
  
## <a name="using-the-xpathmessagequery-and-messagequerycollection-classes"></a>XPathMessageQuery 및 MessageQueryCollection 클래스 사용  
 쿼리 개체 집합을 만든 후 <xref:System.ServiceModel.Dispatcher.MessageQueryCollection> 클래스의 인스턴스에 삽입하여 쿼리 프로세스를 최적화할 수 있습니다.  
  
> [!NOTE]
>  <xref:System.ServiceModel.Dispatcher.MessageQueryCollection>의 구체적 구현은 <xref:System.ServiceModel.Dispatcher.XPathMessageQueryCollection> 클래스를 참조하십시오.  
  
 일반적으로는 XPath 조건자가 같고 마지막 리프 값만 다른 쿼리로 컬렉션을 채우는 방법을 사용합니다. 예를 들어 다음 XPath 쿼리는 마지막 절만 제외하고는 모두 동일합니다. 첫 번째 XPath 쿼리는 수량 특성이 1로 설정된 모든 요소를 쿼리하고, 두 번째 XPath 쿼리는 제품 특성이 'Contoso'로 설정된 요소를 쿼리합니다.  
  
```  
"/s12:Envelope/s12:Body/PurchaseOrder/Items/Item[@quantity = 1]"  
"/s12:Envelope/s12:Body/PurchaseOrder/Items/Item[@product = 'Contoso']"  
```  
  
 <xref:System.ServiceModel.Dispatcher.MessageQueryCollection> 클래스를 사용하면 조금씩만 다른 쿼리 테이블을 만들어 보다 효율적인 처리가 가능합니다.  
  
 또는 <xref:System.ServiceModel.Dispatcher.MessageQueryTable%601> 클래스를 사용하여 메시지 쿼리를 저장하고 실행할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 메시지와 XPath 메시지 쿼리를 만듭니다. 쿼리는 <xref:System.ServiceModel.XPathMessageQuery> 개체에 포함된 <xref:System.ServiceModel.Dispatcher.XPathMessageQueryCollection> 개체를 통해 실행됩니다. 각 쿼리의 결과는 <xref:System.ServiceModel.Dispatcher.XPathResult.ResultType%2A> 클래스의 <xref:System.ServiceModel.Dispatcher.XPathResult> 속성을 사용하여 테스트됩니다.  
  
 [!code-csharp[XPathMessageQuery#0](~/samples/snippets/csharp/VS_Snippets_CFX/xpathmessagequery/cs/source.cs#0)]
 [!code-vb[XPathMessageQuery#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xpathmessagequery/vb/source.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.XPathMessageQuery" />
    <altmember cref="T:System.ServiceModel.Channels.CorrelationDataMessageProperty" />
    <altmember cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" />
    <altmember cref="T:System.ServiceModel.Dispatcher.XPathResult" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageQuery();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.ServiceModel.Dispatcher.MessageQuery" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageQueryCollection">
      <MemberSignature Language="C#" Value="public virtual System.ServiceModel.Dispatcher.MessageQueryCollection CreateMessageQueryCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Dispatcher.MessageQueryCollection CreateMessageQueryCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.CreateMessageQueryCollection" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessageQueryCollection () As MessageQueryCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ServiceModel::Dispatcher::MessageQueryCollection ^ CreateMessageQueryCollection();" />
      <MemberSignature Language="F#" Value="abstract member CreateMessageQueryCollection : unit -&gt; System.ServiceModel.Dispatcher.MessageQueryCollection&#xA;override this.CreateMessageQueryCollection : unit -&gt; System.ServiceModel.Dispatcher.MessageQueryCollection" Usage="messageQuery.CreateMessageQueryCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.MessageQueryCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>연결된 특정 형식의 데이터를 반환하는 쿼리 컬렉션을 만듭니다.</summary>
        <returns><see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" /> 데이터 형식과 연결된 쿼리 컬렉션입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 <xref:System.ServiceModel.Dispatcher.MessageQueryCollection> 클래스에서 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Evaluate&lt;TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>파생 클래스에서 재정의된 경우 메시지에 대해 쿼리를 실행한 후 쿼리를 충족하는 값을 반환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 오버로드 간의 차이점은 하나는 <xref:System.ServiceModel.Channels.Message> 매개 변수를 사용하고 본문을 검사할 수 없으며, 다른 하나는 <xref:System.ServiceModel.Channels.MessageBuffer> 매개 변수를 사용하고 메시지의 모든 부분을 검사할 수 있다는 점입니다. 메시지 헤더는 자동으로 버퍼링되므로 별도의 사용 없이도 쿼리할 수 있습니다. 그러나 버퍼링되지 않은 메시지 본문은 쿼리에 사용될 수 있으므로 본문을 쿼리하려면 전체 메시지를 버퍼링해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Evaluate&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract TResult Evaluate&lt;TResult&gt; (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Evaluate&lt;TResult&gt;(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.Evaluate``1(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; abstract TResult Evaluate(System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : System.ServiceModel.Channels.Message -&gt; 'Result" Usage="messageQuery.Evaluate message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">반환할 값의 형식입니다.</typeparam>
        <param name="message">쿼리할 메시지입니다.</param>
        <summary>파생 클래스에서 재정의된 경우 메시지에 대해 쿼리를 실행한 후 결과를 반환합니다. 본문은 쿼리할 수 없습니다.</summary>
        <returns><see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />  
  
쿼리를 충족하는 결과의 열거 가능한 컬렉션입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract TResult Evaluate&lt;TResult&gt; (System.ServiceModel.Channels.MessageBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Evaluate&lt;TResult&gt;(class System.ServiceModel.Channels.MessageBuffer buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Evaluate(Of TResult) (buffer As MessageBuffer) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; abstract TResult Evaluate(System::ServiceModel::Channels::MessageBuffer ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : System.ServiceModel.Channels.MessageBuffer -&gt; 'Result" Usage="messageQuery.Evaluate buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="buffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">반환할 개체의 형식입니다.</typeparam>
        <param name="buffer">쿼리할 메시지입니다.</param>
        <summary>파생 클래스에서 재정의된 경우 메시지에 대해 쿼리를 실행한 후 결과를 반환합니다.</summary>
        <returns><see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />  
  
쿼리를 충족하는 결과의 열거 가능한 컬렉션입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 메시지와 XPath 메시지 쿼리를 만듭니다. 쿼리는 <xref:System.ServiceModel.XPathMessageQuery> 개체에 포함된 <xref:System.ServiceModel.Dispatcher.XPathMessageQueryCollection> 개체를 통해 실행됩니다. 각 쿼리의 결과는 <xref:System.ServiceModel.Dispatcher.XPathResult.ResultType%2A> 클래스의 <xref:System.ServiceModel.Dispatcher.XPathResult> 속성을 사용하여 테스트됩니다.  
  
 [!code-csharp[XPathMessageQuery#0](~/samples/snippets/csharp/VS_Snippets_CFX/xpathmessagequery/cs/source.cs#0)]
 [!code-vb[XPathMessageQuery#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xpathmessagequery/vb/source.vb#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>