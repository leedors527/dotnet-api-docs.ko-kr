<Type Name="PersistenceProvider" FullName="System.ServiceModel.Persistence.PersistenceProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ebe9bdbc77c412be76a9af2ba4f3d529de11c781" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48740319" /></Metadata><TypeSignature Language="C#" Value="public abstract class PersistenceProvider : System.ServiceModel.Channels.CommunicationObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PersistenceProvider extends System.ServiceModel.Channels.CommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Persistence.PersistenceProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PersistenceProvider&#xA;Inherits CommunicationObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class PersistenceProvider abstract : System::ServiceModel::Channels::CommunicationObject" />
  <TypeSignature Language="F#" Value="type PersistenceProvider = class&#xA;    inherit CommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Channels.CommunicationObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>모든 영속 서비스 지속성 공급자가 파생되는 추상 기본 클래스입니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자는 이 형식에서 파생된 클래스를 만들어 타사 데이터베이스, 파일 시스템과 같은 사용자 지정 지속성 스토리지를 사용하는 영속 서비스 지속성 제공자를 만들 수 있습니다. Microsoft SQL Server를 지속성 저장소로 사용하는 이 형식의 시스템 제공 구현을 만들려면 <xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory>를 참조하십시오.  
  
> [!NOTE]
>  지속성 공급자 구현을 만들 때는 <xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A>와 같은 새 공급자의 메서드에서 스레드의 원래 ID를 유지하는 것이 중요합니다. 그렇지 않으면 작업이 잘못된 ID로 실행되어 보안 루프홀이 생성될 수 있습니다.  
  
   
  
## Examples  
 파일 시스템을 지속성 저장소로 사용하는 이 형식의 구현에 대해서는 DurableServiceFactory SDK 샘플에서 FilePersistenceProviderFactory.cs 파일을 참조하십시오.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PersistenceProvider (Guid id);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Guid id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (id As Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PersistenceProvider(Guid id);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.Persistence.PersistenceProvider : Guid -&gt; System.ServiceModel.Persistence.PersistenceProvider" Usage="new System.ServiceModel.Persistence.PersistenceProvider id" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="id" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="id">저장할 서비스 상태 데이터의 고유 식별자입니다.</param>
        <summary>파생 클래스에서 구현되는 경우에는 <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드에서는 <xref:System.ServiceModel.Persistence.PersistenceProvider> 생성자를 사용하는 방법을 보여 줍니다. 이 코드 예제는 FilePersistenceProviderFactory.cs 파일에 있는 DurableServiceFactory SDK 샘플의 일부입니다. 자세한 내용은 DurableServiceFactory SDK 샘플을 참조하십시오.  
  
 [!code-csharp[PersistenceProvider#0](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginCreate">
      <MemberSignature Language="C#" Value="public abstract IAsyncResult BeginCreate (object instance, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginCreate(object instance, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BeginCreate (instance As Object, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IAsyncResult ^ BeginCreate(System::Object ^ instance, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginCreate : obj * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="persistenceProvider.BeginCreate (instance, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">실제 인스턴스 상태입니다.</param>
        <param name="timeout">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</param>
        <param name="callback">작업이 완료되면 호출될 메서드입니다.</param>
        <param name="state">특정 비동기 작업을 다른 작업과 구별하는 사용자 제공 개체입니다.</param>
        <summary>파생 클래스에서 구현되는 경우 Create 단계의 시작을 나타냅니다. Create 단계는 서비스 인스턴스 레코드가 지속성 저장소에 처음으로 만들어질 때 발생합니다.</summary>
        <returns><see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> 비동기 메서드 호출의 상태입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드에서는 <xref:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate%2A> 메서드를 구현하는 방법을 보여 줍니다.  
  
 [!code-csharp[PersistenceProvider#14](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDelete">
      <MemberSignature Language="C#" Value="public abstract IAsyncResult BeginDelete (object instance, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginDelete(object instance, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BeginDelete (instance As Object, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IAsyncResult ^ BeginDelete(System::Object ^ instance, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginDelete : obj * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="persistenceProvider.BeginDelete (instance, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">실제 인스턴스 상태입니다.</param>
        <param name="timeout">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</param>
        <param name="callback">작업이 완료되면 호출될 메서드입니다.</param>
        <param name="state">특정 비동기 작업을 다른 작업과 구별하는 사용자 제공 개체입니다.</param>
        <summary>파생 클래스에서 구현되는 경우 Delete 단계의 시작을 나타냅니다. Delete 단계는 서비스 상태 데이터가 지속성 저장소에서 영구적으로 삭제될 때 발생합니다.</summary>
        <returns><see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> 비동기 메서드 호출의 상태입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드에서는 `BeginDelete` 메서드를 구현하는 방법을 보여 줍니다. 이 코드 예제는 FilePersistenceProviderFactory.cs 파일에 있는 DurableServiceFactory SDK 샘플의 일부입니다. 자세한 내용은 DurableServiceFactory SDK 샘플을 참조하십시오.  
  
 [!code-csharp[PersistenceProvider#6](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public abstract IAsyncResult BeginLoad (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginLoad(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BeginLoad (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IAsyncResult ^ BeginLoad(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginLoad : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="persistenceProvider.BeginLoad (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</param>
        <param name="callback">작업이 완료되면 호출될 메서드입니다.</param>
        <param name="state">특정 비동기 작업을 다른 작업과 구별하는 사용자 제공 개체입니다.</param>
        <summary>파생 클래스에서 구현되는 경우 Load 단계의 시작을 나타냅니다. Load 단계는 상태 데이터가 지속성 저장소에서 지속성 제공자로 로드될 때 발생합니다.</summary>
        <returns><see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)" /> 비동기 메서드 호출의 상태입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드에서는 `BeginLoad` 메서드를 구현하는 방법을 보여 줍니다. 이 코드 예제는 FilePersistenceProviderFactory.cs 파일에 있는 DurableServiceFactory SDK 샘플의 일부입니다. 자세한 내용은 DurableServiceFactory SDK 샘플을 참조하십시오.  
  
 [!code-csharp[PersistenceProvider#7](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoadIfChanged">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginLoadIfChanged (TimeSpan timeout, object instanceToken, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginLoadIfChanged(valuetype System.TimeSpan timeout, object instanceToken, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginLoadIfChanged (timeout As TimeSpan, instanceToken As Object, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginLoadIfChanged(TimeSpan timeout, System::Object ^ instanceToken, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginLoadIfChanged : TimeSpan * obj * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginLoadIfChanged : TimeSpan * obj * AsyncCallback * obj -&gt; IAsyncResult" Usage="persistenceProvider.BeginLoadIfChanged (timeout, instanceToken, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="instanceToken" Type="System.Object" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</param>
        <param name="instanceToken">이전 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /> 또는 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" />에서 반환된 토큰으로, 호출자가 보유하고 있는 현재 상태를 나타냅니다.</param>
        <param name="callback">작업이 완료되면 호출될 메서드입니다.</param>
        <param name="state">특정 비동기 작업을 다른 작업과 구별하는 사용자 제공 개체입니다.</param>
        <summary>파생 클래스에서 구현되는 경우 LoadIfChanged 단계의 시작을 나타냅니다. LoadIfChanged 단계는 상태 데이터가 지속성 저장소에서 지속성 공급자로 로드되고 지속성 저장소의 상태 데이터가 변경된 경우에 발생합니다.</summary>
        <returns><see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)" /> 비동기 메서드 호출의 상태입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드에서는 <xref:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged%2A> 메서드를 구현하는 방법을 보여 줍니다.  
  
 [!code-csharp[PersistenceProvider#11](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public abstract IAsyncResult BeginUpdate (object instance, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginUpdate(object instance, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BeginUpdate (instance As Object, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IAsyncResult ^ BeginUpdate(System::Object ^ instance, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginUpdate : obj * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="persistenceProvider.BeginUpdate (instance, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">실제 인스턴스 상태입니다.</param>
        <param name="timeout">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</param>
        <param name="callback">작업이 완료되면 호출될 메서드입니다.</param>
        <param name="state">특정 비동기 작업을 다른 작업과 구별하는 사용자 제공 개체입니다.</param>
        <summary>파생 클래스에서 구현되는 경우 Update 단계의 시작을 나타냅니다. Update 단계는 서비스 상태 데이터가 지속성 저장소에서 업데이트될 때 발생합니다.</summary>
        <returns><see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> 비동기 메서드 호출의 상태입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드에서는 <xref:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate%2A> 메서드를 구현하는 방법을 보여 줍니다.  
  
 [!code-csharp[PersistenceProvider#17](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public abstract object Create (object instance, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Create(object instance, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Create (instance As Object, timeout As TimeSpan) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Create(System::Object ^ instance, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Create : obj * TimeSpan -&gt; obj" Usage="persistenceProvider.Create (instance, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instance">실제 인스턴스 상태입니다.</param>
        <param name="timeout">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</param>
        <summary>파생 클래스에서 구현되는 경우 지속성 저장소에 서비스 상태 레코드를 만듭니다.</summary>
        <returns>방금 저장한 상태에 해당하는 인스턴스 토큰입니다. 이 토큰을 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" />에 전달하여 지속성 저장소의 상태가 Create가 호출될 때의 상태와 다른지 확인할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드에서는 <xref:System.ServiceModel.Persistence.PersistenceProvider.Create%2A> 메서드를 구현하는 방법을 보여 줍니다.  
  
 [!code-csharp[PersistenceProvider#15](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public abstract void Delete (object instance, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete(object instance, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Delete (instance As Object, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Delete(System::Object ^ instance, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Delete : obj * TimeSpan -&gt; unit" Usage="persistenceProvider.Delete (instance, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instance">실제 인스턴스 상태입니다.</param>
        <param name="timeout">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</param>
        <summary>파생 클래스에서 구현되는 경우 지속성 저장소에서 서비스 상태 정보를 영구적으로 삭제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드에서는 <xref:System.ServiceModel.Persistence.PersistenceProvider.Delete%2A> 메서드를 구현하는 방법을 보여 줍니다. 이 코드 예제는 FilePersistenceProviderFactory.cs 파일에 있는 DurableServiceFactory SDK 샘플의 일부입니다. 자세한 내용은 DurableServiceFactory SDK 샘플을 참조하십시오.  
  
 [!code-csharp[PersistenceProvider#9](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCreate">
      <MemberSignature Language="C#" Value="public abstract object EndCreate (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndCreate(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EndCreate (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EndCreate(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndCreate : IAsyncResult -&gt; obj" Usage="persistenceProvider.EndCreate result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">작업 결과에 대한 참조입니다.</param>
        <summary>파생 클래스에서 구현되는 경우 Create 단계의 끝을 나타냅니다. Create 단계는 서비스 상태 레코드가 지속성 저장소에 처음으로 만들어질 때 발생합니다.</summary>
        <returns>방금 저장한 상태에 해당하는 인스턴스 토큰입니다. 이 토큰을 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" />에 전달하여 지속성 저장소의 상태가 Create가 호출될 때의 상태와 다른지 확인할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드에서는 <xref:System.ServiceModel.Persistence.PersistenceProvider.EndCreate%2A> 메서드를 구현하는 방법을 보여 줍니다.  
  
 [!code-csharp[PersistenceProvider#16](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndDelete">
      <MemberSignature Language="C#" Value="public abstract void EndDelete (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndDelete(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub EndDelete (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void EndDelete(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndDelete : IAsyncResult -&gt; unit" Usage="persistenceProvider.EndDelete result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">작업 결과에 대한 참조입니다.</param>
        <summary>파생 클래스에서 구현되는 경우 Delete 단계의 끝을 나타냅니다. Delete 단계는 상태 데이터가 지속성 저장소에서 영구적으로 삭제될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드에서는 <xref:System.ServiceModel.Persistence.PersistenceProvider.EndDelete%2A> 메서드를 구현하는 방법을 보여 줍니다. 이 코드 예제는 FilePersistenceProviderFactory.cs 파일에 있는 DurableServiceFactory SDK 샘플의 일부입니다. 자세한 내용은 DurableServiceFactory SDK 샘플을 참조하십시오.  
  
 [!code-csharp[PersistenceProvider#5](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndLoad">
      <MemberSignature Language="C#" Value="public abstract object EndLoad (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndLoad(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EndLoad (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EndLoad(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndLoad : IAsyncResult -&gt; obj" Usage="persistenceProvider.EndLoad result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">작업 결과에 대한 참조입니다.</param>
        <summary>파생 클래스에서 구현되는 경우 Load 단계의 끝을 나타냅니다. Load 단계는 상태 데이터가 지속성 저장소에서 지속성 제공자로 로드될 때 발생합니다.</summary>
        <returns>서비스 상태 정보입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드에서는 `EndLoad` 메서드를 사용하는 방법을 보여 줍니다. 이 코드 예제는 FilePersistenceProviderFactory.cs 파일에 있는 DurableServiceFactory SDK 샘플의 일부입니다. 자세한 내용은 DurableServiceFactory SDK 샘플을 참조하십시오.  
  
 [!code-csharp[PersistenceProvider#1](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndLoadIfChanged">
      <MemberSignature Language="C#" Value="public virtual bool EndLoadIfChanged (IAsyncResult result, out object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndLoadIfChanged(class System.IAsyncResult result, [out] object&amp; instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndLoadIfChanged (result As IAsyncResult, ByRef instance As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool EndLoadIfChanged(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::Object ^ % instance);" />
      <MemberSignature Language="F#" Value="abstract member EndLoadIfChanged : IAsyncResult *  -&gt; bool&#xA;override this.EndLoadIfChanged : IAsyncResult *  -&gt; bool" Usage="persistenceProvider.EndLoadIfChanged (result, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="instance" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">작업 결과에 대한 참조입니다.</param>
        <param name="instance">실제 인스턴스 상태입니다.</param>
        <summary>파생 클래스에서 구현되는 경우 LoadIfChanged 단계의 끝을 나타냅니다. LoadIfChanged 단계는 상태 데이터가 지속성 저장소에서 지속성 공급자로 로드되고 지속성 저장소의 상태 데이터가 변경된 경우에 발생합니다.</summary>
        <returns>인스턴스 <see langword="true" /> 매개 변수가 지속성 저장소의 최신 복사본으로 설정되어 있으면 <see langword="out" />이고, 로컬에 캐시된 상태가 이미 최신 상태이면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드에서는 <xref:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged%2A> 메서드를 구현하는 방법을 보여 줍니다.  
  
 [!code-csharp[PersistenceProvider#12](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public abstract object EndUpdate (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndUpdate(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EndUpdate (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EndUpdate(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndUpdate : IAsyncResult -&gt; obj" Usage="persistenceProvider.EndUpdate result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">작업 결과에 대한 참조입니다.</param>
        <summary>Update 단계의 끝을 나타냅니다. Update 단계는 서비스 상태 레코드가 지속성 저장소에 업데이트될 때 발생합니다.</summary>
        <returns>방금 저장한 상태에 해당하는 인스턴스 토큰입니다. 이 토큰을 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" />에 전달하여 지속성 저장소의 상태가 Create가 호출될 때의 상태와 다른지 확인할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드에서는 <xref:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate%2A> 메서드를 구현하는 방법을 보여 줍니다.  
  
 [!code-csharp[PersistenceProvider#19](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public Guid Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Id" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Persistence.PersistenceProvider.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid Id { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : Guid" Usage="System.ServiceModel.Persistence.PersistenceProvider.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 인스턴스와 연결된 <see cref="T:System.Guid" />를 나타냅니다.</summary>
        <value>이 인스턴스와 연결된 GUID입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드에서는 <xref:System.ServiceModel.Persistence.PersistenceProvider.Id%2A> 속성을 사용하는 방법을 보여 줍니다.  
  
 [!code-csharp[PersistenceProvider#10](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public abstract object Load (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Load(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Load (timeout As TimeSpan) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Load(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Load : TimeSpan -&gt; obj" Usage="persistenceProvider.Load timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</param>
        <summary>파생 클래스에서 구현되는 경우 지속성 저장소에서 서비스 상태 정보를 로드합니다.</summary>
        <returns>로드된 인스턴스 상태입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A> 메서드의 보안 토큰에 대한 변경 내용은 되돌리지 않는 한 메시지 처리의 나머지 부분에 계속 적용됩니다. 즉, 서비스 작업의 사용자 코드, 디스패처를 통한 응답 메시지 경로뿐만 아니라 모든 오류 경로도 변경된 보안 컨텍스트에서 실행됩니다.  
  
   
  
## Examples  
 다음 코드에서는 <xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A> 메서드를 구현하는 방법을 보여 줍니다. 이 코드 예제는 FilePersistenceProviderFactory.cs 파일에 있는 DurableServiceFactory SDK 샘플의 일부입니다. 자세한 내용은 DurableServiceFactory SDK 샘플을 참조하십시오.  
  
 [!code-csharp[PersistenceProvider#3](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadIfChanged">
      <MemberSignature Language="C#" Value="public virtual bool LoadIfChanged (TimeSpan timeout, object instanceToken, out object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool LoadIfChanged(valuetype System.TimeSpan timeout, object instanceToken, [out] object&amp; instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LoadIfChanged (timeout As TimeSpan, instanceToken As Object, ByRef instance As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool LoadIfChanged(TimeSpan timeout, System::Object ^ instanceToken, [Runtime::InteropServices::Out] System::Object ^ % instance);" />
      <MemberSignature Language="F#" Value="abstract member LoadIfChanged : TimeSpan * obj *  -&gt; bool&#xA;override this.LoadIfChanged : TimeSpan * obj *  -&gt; bool" Usage="persistenceProvider.LoadIfChanged (timeout, instanceToken, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="instanceToken" Type="System.Object" />
        <Parameter Name="instance" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</param>
        <param name="instanceToken">호출자가 보유한 현재 상태를 나타내는 이전 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /> 또는 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" />에서 반환하는 토큰입니다.</param>
        <param name="instance">실제 인스턴스 상태입니다.</param>
        <summary>파생 클래스에서 구현되는 경우 해당 데이터가 변경되면 지속성 저장소에서 서비스 상태 정보를 로드합니다.</summary>
        <returns><paramref name="instance" /><see langword="true" /> 매개 변수가 지속성 저장소의 최신 복사본으로 설정되어 있으면 <see langword="out" />이고, 로컬에 캐시된 상태가 이미 최신 상태이면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드에서는 <xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged%2A> 메서드를 구현하는 방법을 보여 줍니다.  
  
 [!code-csharp[PersistenceProvider#13](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public abstract object Update (object instance, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Update(object instance, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Update (instance As Object, timeout As TimeSpan) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Update(System::Object ^ instance, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Update : obj * TimeSpan -&gt; obj" Usage="persistenceProvider.Update (instance, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instance">실제 인스턴스 상태입니다.</param>
        <param name="timeout">시도에 대한 제한 시간으로서 이 시간이 지나면 지속성 제공자가 시도를 중단합니다.</param>
        <summary>파생 클래스에서 구현되는 경우 지속성 저장소에 서비스 상태 레코드를 업데이트합니다.</summary>
        <returns>방금 저장한 상태에 해당하는 인스턴스 토큰입니다. 이 토큰을 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" />에 전달하여 지속성 저장소의 상태가 Create가 호출될 때의 상태와 다른지 확인할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드에서는 <xref:System.ServiceModel.Persistence.PersistenceProvider.Update%2A> 메서드를 구현하는 방법을 보여 줍니다.  
  
 [!code-csharp[PersistenceProvider#18](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>