<Type Name="RoutingExtension" FullName="System.ServiceModel.Routing.RoutingExtension">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fda8f07a871de7addb2e5ccd64cf23202cf3fdd3" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="36613846" /></Metadata><TypeSignature Language="C#" Value="public sealed class RoutingExtension : System.ServiceModel.IExtension&lt;System.ServiceModel.ServiceHostBase&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RoutingExtension extends System.Object implements class System.ServiceModel.IExtension`1&lt;class System.ServiceModel.ServiceHostBase&gt;" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Routing.RoutingExtension" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RoutingExtension&#xA;Implements IExtension(Of ServiceHostBase)" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutingExtension sealed : System::ServiceModel::IExtension&lt;System::ServiceModel::ServiceHostBase ^&gt;" />
  <TypeSignature Language="F#" Value="type RoutingExtension = class&#xA;    interface IExtension&lt;ServiceHostBase&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Routing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.IExtension&lt;System.ServiceModel.ServiceHostBase&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>라우팅 서비스에 대한 런타임 액세스를 제공하여 라우팅 구성의 동적 수정을 허용합니다.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ApplyConfiguration">
      <MemberSignature Language="C#" Value="public void ApplyConfiguration (System.ServiceModel.Routing.RoutingConfiguration routingConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyConfiguration(class System.ServiceModel.Routing.RoutingConfiguration routingConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Routing.RoutingExtension.ApplyConfiguration(System.ServiceModel.Routing.RoutingConfiguration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyConfiguration(System::ServiceModel::Routing::RoutingConfiguration ^ routingConfiguration);" />
      <MemberSignature Language="F#" Value="member this.ApplyConfiguration : System.ServiceModel.Routing.RoutingConfiguration -&gt; unit" Usage="routingExtension.ApplyConfiguration routingConfiguration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routingConfiguration" Type="System.ServiceModel.Routing.RoutingConfiguration" />
      </Parameters>
      <Docs>
        <param name="routingConfiguration">적용할 라우팅 구성입니다.</param>
        <summary>라우팅 서비스의 실행 인스턴스에 새 <see cref="T:System.ServiceModel.Routing.RoutingConfiguration" />을 적용합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Routing.RoutingExtension.ApplyConfiguration%2A>을 호출한 후 새 <xref:System.ServiceModel.Routing.RoutingConfiguration>은 새 세션과 메시지에만 적용됩니다.  
  
> [!WARNING]
>  <xref:System.ServiceModel.Routing.RoutingConfiguration>은 스레드로부터 안전한 업데이트 또는 확장을 제공하지 않기 때문에 <xref:System.ServiceModel.Routing.RoutingExtension.ApplyConfiguration%2A>을 호출한 후에는 <xref:System.ServiceModel.Routing.RoutingConfiguration> 개체를 수정하면 안 됩니다.  
>   
>  나중에 라우팅 구성을 업데이트해야 할 경우에는 <xref:System.ServiceModel.Routing.RoutingConfiguration>의 새 인스턴스를 각 업데이트에 사용하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.IExtension&lt;System.ServiceModel.ServiceHostBase&gt;.Attach">
      <MemberSignature Language="C#" Value="void IExtension&lt;ServiceHostBase&gt;.Attach (System.ServiceModel.ServiceHostBase owner);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.IExtension&lt;System.ServiceModel.ServiceHostBase&gt;.Attach(class System.ServiceModel.ServiceHostBase owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Routing.RoutingExtension.System#ServiceModel#IExtension&lt;System#ServiceModel#ServiceHostBase&gt;#Attach(System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (owner As ServiceHostBase) Implements IExtension(Of ServiceHostBase).Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ServiceModel.IExtension&lt;System.ServiceModel.ServiceHostBase&gt;.Attach(System::ServiceModel::ServiceHostBase ^ owner) = System::ServiceModel::IExtension&lt;System::ServiceModel::ServiceHostBase ^&gt;::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ServiceModel.IExtension`1.Attach(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="owner">서비스 호스트 기준입니다.</param>
        <summary>런타임에 <see cref="T:System.ServiceModel.ServiceHostBase" /> 클래스의 인스턴스에 확장을 연결할 때 호출됩니다.  내부 전용입니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.IExtension&lt;System.ServiceModel.ServiceHostBase&gt;.Detach">
      <MemberSignature Language="C#" Value="void IExtension&lt;ServiceHostBase&gt;.Detach (System.ServiceModel.ServiceHostBase owner);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.IExtension&lt;System.ServiceModel.ServiceHostBase&gt;.Detach(class System.ServiceModel.ServiceHostBase owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Routing.RoutingExtension.System#ServiceModel#IExtension&lt;System#ServiceModel#ServiceHostBase&gt;#Detach(System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="VB.NET" Value="Sub Detach (owner As ServiceHostBase) Implements IExtension(Of ServiceHostBase).Detach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ServiceModel.IExtension&lt;System.ServiceModel.ServiceHostBase&gt;.Detach(System::ServiceModel::ServiceHostBase ^ owner) = System::ServiceModel::IExtension&lt;System::ServiceModel::ServiceHostBase ^&gt;::Detach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ServiceModel.IExtension`1.Detach(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Routing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="owner">서비스 호스트 기준입니다.</param>
        <summary>런타임에 <see cref="T:System.ServiceModel.ServiceHostBase" /> 클래스의 인스턴스에서 확장을 분리할 때 호출됩니다.  내부 전용입니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>