<Type Name="ConcurrencyMode" FullName="System.ServiceModel.ConcurrencyMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b794f216ceaa7c6fce1828d6ee563ec907867be6" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37451375" /></Metadata><TypeSignature Language="C#" Value="public enum ConcurrencyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ConcurrencyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ConcurrencyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum ConcurrencyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class ConcurrencyMode" />
  <TypeSignature Language="F#" Value="type ConcurrencyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>서비스 클래스가 단일 스레드 작업 모드를 지원할지 다중 스레드 작업 모드를 지원할지를 지정합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 서비스 클래스의 단일 스레드 또는 다중 스레드 작업 모드 지원을 지정할 때 <xref:System.ServiceModel.ConcurrencyMode>를 <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> 속성과 함께 사용합니다. 단일 스레드 작업은 재진입이거나 재진입이 아닐 수 있습니다.  
  
 다음 표에서 경우 Windows Communication Foundation (WCF) 허용, 진행 중인 다른 작업에 따라는 <xref:System.ServiceModel.ConcurrencyMode>합니다.  
  
|ConcurrencyMode 값|새 작업 호출 가능 여부|  
|---------------------------|-------------------------------------|  
|Single|불가능|  
|재진입|다른 서비스나 콜백 호출 도중에만 가능|  
|다중|항상|  
  
   
  
## Examples  
 다음 코드 예제에서는 단일, 재진입, 및 여러 사용 간의 차이점을 보여 줍니다. 이 샘플 뒤에 실제 구현이 없어 컴파일되지 않습니다 하지만 보장 WCF 만들고 사용자의 작업 코드에 대 한 의미는 스레딩의 종류를 보여지 않습니다.  
  
 [!code-csharp[C_BestPractices-Concurrency#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_bestpractices-concurrency/cs/reentrantandmultiple.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Multiple">
      <MemberSignature Language="C#" Value="Multiple" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Multiple = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberSignature Language="VB.NET" Value="Multiple" />
      <MemberSignature Language="C++ CLI" Value="Multiple" />
      <MemberSignature Language="F#" Value="Multiple = 2" Usage="System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>서비스 인스턴스가 다중 스레드입니다. 동기화가 보장되지 않습니다. 다른 스레드가 언제든지 서비스 개체를 변경할 수 있으므로 항상 동기화 및 상태 일관성을 처리해야 합니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="Reentrant">
      <MemberSignature Language="C#" Value="Reentrant" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Reentrant = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberSignature Language="VB.NET" Value="Reentrant" />
      <MemberSignature Language="C++ CLI" Value="Reentrant" />
      <MemberSignature Language="F#" Value="Reentrant = 1" Usage="System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>서비스 인스턴스가 단일 스레드이며 재진입 호출을 허용합니다. 재진입 서비스는 사용자가 다른 서비스를 호출할 때 호출을 허용합니다. 따라서 사용자는 호출 전에 개체 상태의 일관성을 유지하고 호출 후에는 작업-로컬 데이터가 유효한지 확인해야 합니다. 서비스 인스턴스는 WCF 채널을 통해 다른 서비스를 호출하는 방법으로만 잠금 해제됩니다. 이런 경우 호출된 서비스는 콜백을 통해 첫 번째 서비스에 재진입할 수 있습니다. 첫 번째 서비스가 재진입이 아닌 경우 호출 시퀀스는 교착 상태에 빠지게 됩니다. 자세한 내용은 <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />를 참조하세요.</summary>
      </Docs>
    </Member>
    <Member MemberName="Single">
      <MemberSignature Language="C#" Value="Single" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Single = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Single" />
      <MemberSignature Language="VB.NET" Value="Single" />
      <MemberSignature Language="C++ CLI" Value="Single" />
      <MemberSignature Language="F#" Value="Single = 0" Usage="System.ServiceModel.ConcurrencyMode.Single" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>서비스 인스턴스가 단일 스레드이며 재진입 호출을 허용하지 않습니다. <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> 속성이 <see cref="F:System.ServiceModel.InstanceContextMode.Single" />이고 인스턴스가 호출을 처리하는 동안 추가 메시지가 도착하는 경우, 이 추가 메시지는 서비스가 사용 가능해지거나 메시지 제한 시간이 초과될 때까지 대기해야 합니다.</summary>
      </Docs>
    </Member>
  </Members>
</Type>