<Type Name="FaultContractAttribute" FullName="System.ServiceModel.FaultContractAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6a1b0b7822ed3e618c35f1a625e351deb4debcc4" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58548980" /></Metadata><TypeSignature Language="C#" Value="public sealed class FaultContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FaultContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.FaultContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FaultContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FaultContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type FaultContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-uwp-10.0;dotnet-plat-ext-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>서비스 작업에서 처리 오류가 발생하는 경우 반환되는 SOAP 오류를 하나 이상 지정합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 서비스 작업의 WSDL(Web Service Description Language) 설명에 추가되는 하나 이상의 특정 예외 조건을 작업에서 반환하는 명시적 SOAP 오류 메시지로 선언하려면 <xref:System.ServiceModel.FaultContractAttribute> 특성을 사용하여 작업을 표시하십시오.  
  
 관리되는 모든 응용 프로그램에서 처리 오류는 <xref:System.Exception> 개체로 표시됩니다. SOAP 기반 응용 프로그램에서 Windows Communication Foundation (WCF) 응용 프로그램과 같은 서비스 메서드에 SOAP 오류 메시지를 사용 하 여 처리 오류 정보를 전달 합니다. WCF 응용 프로그램 두 가지 유형의 오류 시스템에서 실행 되므로 클라이언트로 전송 해야 하는 모든 관리 되는 예외 정보는 예외에서 SOAP 오류로 변환 되어야 합니다. 기본 서비스 예외 동작을 사용하거나, 오류 메시지에 예외 매핑 여부 및 방법을 명시적으로 제어할 수 있습니다. 예외 및 WCF 응용 프로그램에서 SOAP 결함의 개요를 보려면 [지정 및 계약 및 서비스에서 오류 처리](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)합니다.  
  
 서비스 작업에서 <xref:System.ServiceModel.FaultContractAttribute>를 사용하여 클라이언트가 정상적인 작업 중 받을 가능성이 있는 모든 SOAP 오류를 공식적으로 지정하는 것이 좋습니다. 또한 클라이언트가 알아야 하는 정보만 SOAP 오류에 반환하여 정보 노출을 최소화하는 것이 좋습니다.  
  
-   <xref:System.ServiceModel.FaultContractAttribute.Action%2A> 속성은 오류 메시지의 동작을 제어합니다.  
  
-   <xref:System.ServiceModel.FaultContractAttribute.DetailType%2A> 속성은 오류 메시지에서 serialize된 세부 개체 형식을 가져옵니다.  
  
-   <xref:System.ServiceModel.FaultContractAttribute.Name%2A> 및 <xref:System.ServiceModel.FaultContractAttribute.Namespace%2A> 속성은 오류 메시지의 이름과 네임스페이스를 각각 제어합니다.  
  
-   <xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A>은 오류 메시지에 보호 수준이 지정되어 있는지 여부를 나타냅니다. 보호 수준이 지정되어 있으면 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> 속성이 해당 보호 수준을 제어합니다.  
  
> [!CAUTION]
>  오류 메시지는 중요한 정보를 포함하거나 보안 문제를 일으킬 수 있으므로 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> 속성을 설정하는 것이 좋습니다.  
  
-   <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>을 명시적으로 <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType> 또는 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>으로 설정하면 바인딩의 <xref:System.ServiceModel.SecurityMode?displayProperty=nameWithType> 속성을 사용하여 보안이 활성화된 바인딩을 사용해야 합니다. 그렇지 않으면 예외가 throw됩니다.  
  
-   보안이 활성화된 바인딩을 선택하고 계약의 어떤 위치에서도 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> 속성을 설정하지 않으면, 모든 응용 프로그램 데이터가 암호화되거나 서명됩니다.  
  
-   보안이 활성화되지 않은 바인딩(예: <xref:System.ServiceModel.BasicHttpBinding?displayProperty=nameWithType>에서는 기본적으로 보안이 비활성화됨)을 선택하고 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>이 명시적으로 설정되지 않은 경우 응용 프로그램 데이터가 보호되지 않습니다.  
  
 대부분의 시나리오에서 오류 메시지에 대해 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>을 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>으로 설정하면 충분합니다. 자세한 내용은 참조 하세요. [보호 수준을 이해](~/docs/framework/wcf/understanding-protection-level.md)합니다.  
  
 <xref:System.ServiceModel.FaultContractAttribute>로 표시된 작업에서 지정된 오류를 반환하려면 작업 중에 관리되는 예외가 발생할 때 <xref:System.ServiceModel.FaultException%601>을 throw합니다. 여기서 형식 매개 변수는 serialize할 수 있는 오류 정보입니다. 즉, 클라이언트 구현에서 throw 된 동일한 형식으로 SOAP 오류는 WCF 클라이언트 응용 프로그램 화면으로 <xref:System.ServiceModel.FaultException%601> (여기서는 typeparameter은 직렬화 오류 정보). <xref:System.ServiceModel.FaultContractAttribute>는 양방향 서비스 작업과 비동기 작업 쌍에 대한 SOAP 오류를 지정하는 데만 사용할 수 있습니다. 단방향 작업은 SOAP 오류를 지원하지 않으므로 <xref:System.ServiceModel.FaultContractAttribute>를 지원하지 않습니다.  
  
> [!NOTE]
>  serialize할 수 있는 형식을 사용하여 오류 정보를 전달할 수 있습니다. 형식에 지정 된 WCF의이 버전의 유일한 제한 사항은 <xref:System.ServiceModel.FaultContractAttribute> 하 여 직렬화 할 수 있어야 합니다 <xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=nameWithType>. Serialization 지원에는 <xref:System.Runtime.Serialization.DataContractSerializer> 에서는 참조 [데이터 계약 Serializer](~/docs/framework/wcf/feature-details/data-contract-serializer.md)합니다.  
  
 예를 들어 클라이언트가 <xref:System.Int32>가 포함된 SOAP 오류를 예상할 수 있도록 지정하려면 해당 형식 매개 변수를 서비스 메서드의 <xref:System.ServiceModel.FaultContractAttribute>에 배치합니다.  
  
> [!NOTE]
>  다음 코드 예제에서는 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>, <xref:System.ServiceModel.FaultContractAttribute.Name%2A> 또는 <xref:System.ServiceModel.FaultContractAttribute.Namespace%2A> 속성을 설정하지 않습니다.  
  
 [!code-csharp[C_FCA#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_fca/cs/fcademo.cs#1)]
 [!code-vb[C_FCA#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_fca/vb/fcademo.vb#1)]  
  
 그러면 서비스 메서드에서 새 <xref:System.ServiceModel.FaultException%601>을 throw합니다. 여기서 형식 매개 변수는 오류 정보가 포함된 형식(위의 경우 <xref:System.Int32>)입니다. 예:  
  
 [!code-csharp[C_FCA#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_fca/cs/fcademo.cs#2)]
 [!code-vb[C_FCA#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_fca/vb/fcademo.vb#2)]  
  
 앞의 예제는 매우 기본적이지만 <xref:System.Int32?displayProperty=nameWithType> 코드를 사용하면 거의 모든 정보를 전달할 수 있으므로 이 세부 유형보다 유용한 경우가 많습니다. 일반적으로 WCF 응용 프로그램 특정 클라이언트의 오류 정보 요구 사항과 세부 유형과 SOAP 오류를 지정합니다. 자세한 예제는 예제 단원을 참조하십시오.  
  
> [!NOTE]
>  형식 매개 변수가 <xref:System.ServiceModel.FaultException%601>인 <xref:System.String?displayProperty=nameWithType>을 지정하면 문자열 값이 클라이언트 응용 프로그램의 Detail 속성에 할당되므로 클라이언트가 <xref:System.ServiceModel.FaultException%601.ToString%2A?displayProperty=nameWithType> 메서드를 호출하여 해당 문자열을 가져올 수 없습니다. 클라이언트 응용 프로그램이 <xref:System.Exception.ToString%2A?displayProperty=nameWithType>을 호출할 때 문자열 값이 반환되도록 하려면 작업 내에서 <xref:System.ServiceModel.FaultException?displayProperty=nameWithType> 예외를 throw하고 문자열을 생성자에 전달합니다.  
  
 예외 또는 <xref:System.ServiceModel.FaultException%601>이 throw될 때 응용 프로그램의 동작을 명시적으로 제어하려면 <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> 또는 <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>에서 <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> 인터페이스를 구현하고 이 인터페이스를 <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> 속성에 할당합니다. <xref:System.ServiceModel.Dispatcher.IErrorHandler> 클라이언트로 다시 보낼 것인지 및를 명시적으로 생성 되는 SOAP 오류를 제어할 수 있습니다.  
  
 디버깅을 위해 설정 합니다 <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> 에 `true` 코드에 사용할 수는 <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> 응용 프로그램 구성 파일에서. 이 설정을 사용하면 서비스에서 자동으로 예외 정보를 호출자에게 반환합니다. 이러한 오류는 클라이언트에 <xref:System.ServiceModel.FaultException> 예외로 표시됩니다.  
  
> [!IMPORTANT]
>  관리 되는 예외는 내부 응용 프로그램 정보를 노출할 수, 있으므로 설정 <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> 나 <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> 에 `true` WCF 클라이언트에서는 개인적으로 포함 하 여 내부 서비스 작업 예외에 대 한 정보를 허용 하려면 식별할 수 있는 정보나 기타 중요 한 정보입니다.  
>   
>  그러므로 임시로 서비스 애플리케이션을 디버깅하려는 경우 권장되는 유일한 방법은 <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> 또는 <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType>를 `true`로 설정하는 것입니다. 또한 이 방법으로 처리되지 않은 관리되는 예외를 반환하는 메서드의 WSDL에는 <xref:System.ServiceModel.FaultException%601> 형식의 <xref:System.String>에 대한 계약이 포함되지 않습니다. 클라이언트는 알 수 없는 SOAP 오류의 가능성을 예상 해야 합니다 (WCF 클라이언트에 반환 <xref:System.ServiceModel.FaultException?displayProperty=nameWithType> 개체) 디버깅 정보를 제대로 가져올 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.ServiceModel.FaultContractAttribute>를 사용하여 `SampleMethod` 작업이 `GreetingFault`의 세부 유형이 있는 SOAP 오류를 반환할 수 있도록 지정하는 방법을 보여 줍니다.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 다음 코드 예에서는 WCF 클라이언트의 `ISampleService` 으로이 SOAP 오류를 경험을 <xref:System.ServiceModel.FaultException%601> 형식의 `GreetingFault`합니다.  
  
 [!code-csharp[FaultContractAttribute#3](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/client.cs#3)]
 [!code-vb[FaultContractAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FaultContractAttribute (Type detailType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type detailType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (detailType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FaultContractAttribute(Type ^ detailType);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.FaultContractAttribute : Type -&gt; System.ServiceModel.FaultContractAttribute" Usage="new System.ServiceModel.FaultContractAttribute detailType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="detailType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="detailType">호출자에 대한 오류 정보가 포함된 serialize할 수 있는 형식입니다.</param>
        <summary><see cref="T:System.ServiceModel.FaultContractAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 생성자는 서비스 메서드에 특성을 적용하고 형식을 특성의 인수로 지정하여 실행됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.ServiceModel.FaultContractAttribute>를 사용하여 `SampleMethod` 작업이 `GreetingFault`의 세부 유형이 있는 SOAP 오류를 반환할 수 있도록 지정하는 방법을 보여 줍니다.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="detailType" /> 인수가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Action : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>작업 계약의 일부로 지정된 SOAP 오류 메시지의 동작을 가져오거나 설정합니다.</summary>
        <value>SOAP 오류 메시지의 동작 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SOAP 오류 메시지의 동작을 제어하는 데 사용합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetailType">
      <MemberSignature Language="C#" Value="public Type DetailType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DetailType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.DetailType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DetailType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DetailType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DetailType : Type" Usage="System.ServiceModel.FaultContractAttribute.DetailType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>오류 정보가 포함된 serialize할 수 있는 개체의 형식을 가져옵니다.</summary>
        <value>serialize할 수 있는 오류 클래스를 나타내는 형식입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는 <xref:System.ServiceModel.FaultContractAttribute>를 사용하여 `SampleMethod` 작업이 `GreetingFault`의 세부 유형이 있는 SOAP 오류를 반환할 수 있도록 지정하는 방법을 보여 줍니다.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SOAP 오류 메시지에 보호 수준이 할당되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>오류 메시지에 보호 수준이 지정되어 있으면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SOAP 오류 메시지에 대해 암호화, 서명 또는 둘 모두를 수행해야 할지 지정하려면 <xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A> 속성을 사용합니다. 자세한 내용은 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> 속성을 참조하십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>WSDL(웹 서비스 기술 언어)에서 오류 메시지의 이름을 가져오거나 설정합니다.</summary>
        <value>오류 메시지 이름입니다. 기본값은 오류 정보로 사용되는 유형의 이름입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SOAP 오류의 네임스페이스를 가져오거나 설정합니다.</summary>
        <value>SOAP 오류의 네임스페이스입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>바인딩에서 SOAP 오류에 필요한 보호 수준을 지정합니다.</summary>
        <value><see cref="T:System.Net.Security.ProtectionLevel" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Net.Security.ProtectionLevel.None" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SOAP 오류 메시지를 보낼 때 바인딩에 대해 어떤 수준으로 암호화, 서명 또는 둘 모두를 수행해야 할지 지정하려면 <xref:System.ServiceModel.Description.FaultDescription.ProtectionLevel%2A?displayProperty=nameWithType> 속성을 사용합니다. 작업의 오류에서 계약의 보안 보호 수준 요구 사항을 명시적으로 결정하는 것이 좋습니다. 기본 보호 수준은 <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>으로, 사용자가 정의하는 SOAP 오류 메시지에 암호화 또는 디지털 서명이 필요하지 않음을 의미합니다. 단, 바인딩이 암호화 및/또는 서명을 수행하도록 구성되어 있는 경우 이러한 지원이 제공될 수 있습니다. 오류 메시지는 중요한 정보를 포함하거나 보안 문제를 일으킬 수 있으므로 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> 속성을 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>으로 설정하는 것이 좋습니다. 한 보안 문제에 대 한 자세한 내용은 [보호 수준을 이해](~/docs/framework/wcf/understanding-protection-level.md)합니다.  
  
 런타임의 보호 동작은 계층 구조로 된 보호 수준 속성의 조합입니다. 가장 바깥쪽 값을 설정하면 더 좁은 범위에 명시적으로 다른 값을 설정하지 않는 한 모든 더 좁은 범위에 이 값이 기본 설정으로 지정됩니다. 이 경우 특별히 설정된 범위를 제외하고 바깥쪽 값은 모든 더 좁은 범위의 기본값으로 유지됩니다.  
  
 예를 들어 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>을 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>으로 설정한 경우 더 좁은 다른 범위에는 보호 수준 설정이 없다면 오류 메시지를 포함한 작업 계약의 모든 메시지에 대해 암호화 및 서명이 수행됩니다. 이러한 작업 중 하나에 <xref:System.ServiceModel.OperationContractAttribute>으로 설정된 <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>가 있으면 해당 작업의 메시지에 대해서는 서명이 수행되지만, 오류 메시지를 포함한 계약의 다른 모든 메시지의 경우 암호화 및 서명이 수행됩니다.  
  
 이러한 값이 설정된 범위는 다음과 같습니다.  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType>의 <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType> 속성  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType>의 <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType> 속성  
  
 계약에 명시적으로 지정된 보호 수준이 없고 기본 바인딩이 전송 수준이나 메시지 수준에서 보안을 지원하는 경우 전체 계약에서 유효한 보호 수준은 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>입니다. 바인딩에서 보안을 지원하지 않는 경우(예: <xref:System.ServiceModel.BasicHttpBinding>) 전체 계약에서 유효한 <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType>은 <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>입니다. 결과는 엔드포인트 바인딩에 따라 다르며, 계약에서 <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>을 지정하더라도 클라이언트가 다른 메시지 수준이나 전송 수준의 보안 보호를 요청할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>