<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f792f269c705609bda7c858826060ba7cb5bb57" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55364610" /></Metadata><TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.ServiceProcess.ServiceBase" />를 확장하는 클래스를 설치하여 서비스를 구현합니다. 이 클래스는 서비스 애플리케이션을 설치할 때 설치 유틸리티에서 호출됩니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller> 와 연관 된 서비스에 특정 된 작동 합니다. 다음 레지스트리 키 내에서 하위 서비스와 관련 된 레지스트리 값을 쓸 설치 유틸리티에서 사용 됩니다. 서비스는이 하위 키는 내에서 해당 ServiceName로 식별 됩니다. 하위 키에는 실행 파일 또는.dll 서비스가 속한 이름도 포함 됩니다.  
  
 서비스를 설치 하려면에서 상속 되는 프로젝트 설치 관리자 클래스를 만듭니다는 <xref:System.Configuration.Install.Installer> 클래스를 설정 합니다 <xref:System.ComponentModel.RunInstallerAttribute> 클래스를 특성 `true`합니다. 프로젝트 내에서 하나를 만들 <xref:System.ServiceProcess.ServiceProcessInstaller> 서비스 애플리케이션을 이전과 인스턴스당 <xref:System.ServiceProcess.ServiceInstaller> 애플리케이션에서 각 서비스에 대 한 인스턴스. 프로젝트 설치 관리자 클래스 생성자를 사용 하 여 서비스에 대 한 설치 속성을 설정 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 하 고 <xref:System.ServiceProcess.ServiceInstaller> 인스턴스와 인스턴스를 추가할는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션.  
  
> [!NOTE]
>  설치 관리자 인스턴스를 추가 하는 것에 대 한 생성자를 사용 하는 것이 좋습니다. 그러나에 추가 해야 할 경우는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션에는 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 메서드를 컬렉션에 동일한 추가 수행 해야 합니다 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 메서드.  
  
 파생 된 모든 클래스에 대 한 합니다 <xref:System.Configuration.Install.Installer> 클래스의 상태는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션에서 동일 해야 합니다 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 및 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 메서드. 그러나 컬렉션을 유지 관리를 방지할 수 있습니다 합니다 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 및 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 설치 관리자 인스턴스를 추가 하는 경우 메서드는 <xref:System.Configuration.Install.Installer.Installers%2A> 사용자 지정 설치 관리자 클래스 생성자 컬렉션입니다. 설치 유틸리티를 호출 하는 때를 찾습니다는 <xref:System.ComponentModel.RunInstallerAttribute> 특성입니다. 특성이 있으면 `true`, 유틸리티에 추가 된 서비스를 모두 설치 된 <xref:System.Configuration.Install.Installer.Installers%2A> 프로젝트 설치 관리자를 사용 하 여 연결 된 컬렉션입니다. 하는 경우 <xref:System.ComponentModel.RunInstallerAttribute> 는 `false` 또는 존재 하지는 설치 유틸리티 프로젝트 설치 관리자를 무시 합니다.  
  
 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 관련 된 설치 클래스 설치 프로젝트 정보 모두에 공통적으로 적용 <xref:System.ServiceProcess.ServiceInstaller> 프로젝트의 인스턴스. 이 서비스는 설치 프로젝트의 다른 서비스에서 구분 하는 모든 항목에 해당 서비스 관련 정보는이 메서드에 의해 설치 됩니다.  
  
> [!NOTE]
>  것이 중요 하는 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 와 동일할 수는 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 에서 파생 된 클래스의 <xref:System.ServiceProcess.ServiceBase>. 일반적으로 값을 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 서비스 애플리케이션의 실행 파일의 main () 함수 내에서 서비스 속성 설정 됩니다. 서비스 제어 관리자를 사용 하 여 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> 이 실행 파일 내에서 서비스를 찾을 속성입니다.  
  
 다른 속성을 수정할 수 있습니다는 <xref:System.ServiceProcess.ServiceInstaller> 전후에 추가 하는 <xref:System.Configuration.Install.Installer.Installers%2A> 프로젝트 설치 관리자의 컬렉션입니다. 예를 들어, 서비스의 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> 재부팅 시 자동으로 서비스를 시작 하거나 서비스를 수동으로 시작 되도록 사용자로 설정할 수 있습니다.  
  
 메서드를 호출 하는 되는 일반적으로 <xref:System.ServiceProcess.ServiceInstaller> 코드 내에서 일반적으로 라고 설치 유틸리티에서만 합니다. 설치 유틸리티를 자동으로 호출 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> 및 <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> 설치 프로세스 중 메서드. 원하는를 필요한 경우 호출 하 여 <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (또는 <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>)에서 이전에 설치 된 모든 구성 요소입니다.  
  
 설치 유틸리티 호출 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 개체를 제거 합니다.  
  
 프로젝트 설치 관리자를 사용 하 여 구성 요소가 이미 설치 되어 자동으로 정보를 유지 하는 애플리케이션의 설치 루틴 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>합니다. 이 상태 정보는 지속적으로 업데이트 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 인스턴스를 만들고 각 <xref:System.ServiceProcess.ServiceInstaller> 인스턴스가 유틸리티에 의해 설치 된. 상태 정보를 명시적으로 수정 하기 위해 코드에 대 한 일반적으로 필요는 없습니다.  
  
 자동으로 만듭니다 설치를 수행 하는 경우는 <xref:System.Diagnostics.EventLogInstaller> 와 연결 된 이벤트 로그 소스를 설치 하는 <xref:System.ServiceProcess.ServiceBase> 클래스를 파생 합니다. 합니다 <xref:System.Diagnostics.EventLog.Log%2A> 에서이 원본에 대 한 속성을 설정 합니다 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> 컴퓨터의 애플리케이션 로그에는 생성자입니다. 설정한 경우는 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 의 <xref:System.ServiceProcess.ServiceInstaller> (동일 해야 합니다 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 서비스의), <xref:System.Diagnostics.EventLog.Source%2A> 동일한 값으로 자동으로 설정 됩니다. 설치 오류가 소스의 설치에서는 이전에 설치 된 서비스와 함께 롤백된입니다.  
  
 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 메서드를 실행 하는 경우 서비스를 중지 하려고 합니다. 여부에 상관 없이 여부 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 에서 변경한 내용을 실행 취소 <xref:System.ServiceProcess.ServiceInstaller.Install%2A>합니다. 이벤트 로깅에 대 한 새 소스를 만든 경우 원본이 삭제 됩니다.  
  
   
  
## Examples  
 다음 예에서는 이라는 프로젝트 설치 관리자를 만듭니다 `MyProjectInstaller`에서 상속 하는 <xref:System.Configuration.Install.Installer>합니다. 두 가지 서비스를 "Hello World 서비스 1"을 포함 하는 서비스 실행 파일을 가정 하 고 "Hello World 서비스 2". 생성자 내에서 `MyProjectInstaller` (있는 의해 호출 되는 설치 유틸리티)를 <xref:System.ServiceProcess.ServiceInstaller> 개체는 이러한 각 서비스에 한 및 만들어집니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 실행 파일에 대해 생성 됩니다. 설치 유틸리티를 인식 하도록 `MyProjectInstaller` 잘못 된 설치 프로그램으로는 <xref:System.ComponentModel.RunInstallerAttribute> 특성이로 설정 된 `true`합니다.  
  
 선택적 속성은 설치 관리자를 추가 하기 전에 프로세스가 설치 관리자 및 서비스 설치 관리자에서 설정 된 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션입니다. 설치 유틸리티에 액세스 하는 경우 `MyProjectInstaller`에 추가 된 개체를 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션에 대 한 호출을 통해 <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> 차례로 설치 됩니다. 설치 관리자 프로세스 중 각 백업할 수 있습니다. 차례로 설치 오류가 발생 하므로 개체를 설치한를 나타내는 상태 정보를 유지 합니다.  
  
 일반적으로 프로젝트 설치 관리자 클래스의 인스턴스를 명시적으로 만들지 됩니다. 만들 하 고 추가 <xref:System.ComponentModel.RunInstallerAttribute> 특성 구문의을 설치 유틸리티를 실제로 호출 하 여 인스턴스화합니다 따라서 클래스 이지만 합니다.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.ServiceProcess.ServiceInstaller" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 서비스를 설치 하려면에서 상속 되는 프로젝트 설치 관리자 클래스를 만듭니다는 <xref:System.Configuration.Install.Installer> 클래스를 설정 합니다 <xref:System.ComponentModel.RunInstallerAttribute> 클래스를 특성 `true`합니다. 프로젝트 내에서 하나를 만들 <xref:System.ServiceProcess.ServiceProcessInstaller> 서비스 애플리케이션을 이전과 인스턴스당 <xref:System.ServiceProcess.ServiceInstaller> 애플리케이션에서 각 서비스에 대 한 인스턴스. 프로젝트 설치 관리자 클래스 생성자를 사용 하 여 서비스에 대 한 설치 속성을 설정 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 하 고 <xref:System.ServiceProcess.ServiceInstaller> 인스턴스와 인스턴스를 추가할는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션.  
  
 합니다 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> 이벤트 로그를 자동으로 생성 하는 생성자 인 원본 <xref:System.Diagnostics.EventLog.Log%2A> 속성은 컴퓨터의 애플리케이션 로그 및 <xref:System.Diagnostics.EventLogInstaller>합니다. 설정한 경우는 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 의 <xref:System.ServiceProcess.ServiceInstaller>, 동일 해야 합니다 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 서비스를 <xref:System.Diagnostics.EventLog.Source%2A> 이벤트 로그의 속성은 동일한 값으로 자동 설정 됩니다. 원본 설치 하지 못한 경우 자동으로 삭제 됩니다.  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> 생성자 집합 합니다 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> 속성을 `ServiceStartMode.Manual` 사용자는 서비스를 시작 하도록 지정 합니다. 속성을 다시 설정할 수 있습니다 `ServiceStartMode.Automatic` 컴퓨터 다시 부팅 될 때 서비스 시작을 지정 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">복사할 원본 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
        <summary><see cref="T:System.ServiceProcess.ServiceBase" /> 인스턴스의 속성을 이 설치 관리자에 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 코드 내에서 거의 호출 됩니다. <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> 일반적으로 디자이너에 의해서만 호출 됩니다.  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> 서비스 이름을 저장 하는 `component` 매개 변수를 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 의 <xref:System.ServiceProcess.ServiceInstaller> 인스턴스. (매개 변수에서 파생 된 클래스의 인스턴스 수 있어야 하므로 <xref:System.ServiceProcess.ServiceBase>, `component` 하도록 보장 되는 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 속성입니다.)  
  
> [!NOTE]
>  Visual Studio 디자이너를 사용 하는 경우이 메서드는 사용자가 클릭 하면 디자인 타임에 `Add Installer` 해당 설치 프로그램으로이 클래스를 지정 하는 구성 요소에 있습니다. 설치 관리자는 라이브 구성 요소에서를 저장 한 다음 설치 시 사용 하 여 모든 정보를 사용 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">이 설치 관리자와 연결되는 구성 요소가 <see cref="T:System.ServiceProcess.ServiceBase" />에서 상속하지 않는 경우</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>자동으로 시작된 다른 서비스가 실행되는 동안 서비스 시작을 지연할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>서비스의 자동 시작을 지연하는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A> 속성을 서비스에 적용할 수 있지만 서비스의 시작 모드가 아닌 경우 무시 됩니다 <xref:System.ServiceProcess.ServiceStartMode.Automatic>합니다. 다음에 시스템이 시작 하는 설정을 적용 합니다. 서비스 제어 관리자에서 서비스에 대 한 특정 시작 시간을 보장 하지 않습니다.  
  
 지연 된 자동 시작 서비스는 로드 순서 그룹의 구성원 일 수는 없지만 다른 자동 시작 서비스에 따라 달라질 수 있습니다. 로드 하기 전에 지연 된 자동 시작 서비스를 호출 하는 애플리케이션, 호출이 실패 합니다.  
  
 지연 된 자동 시작을 지원 하지 않는 운영 체제에서는이 속성은 효과가 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>서비스에 대한 설명을 가져오거나 설정합니다.</summary>
        <value>서비스에 대한 설명입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.ServiceProcess.ServiceInstaller.Description%2A> 속성을 사용자에 게 설치 된 서비스의 목적을 설명 합니다. 사용자 설치 된 서비스에 대 한 세부 정보를 표시 하는 애플리케이션에서 서비스 설명을 볼 수 있습니다.  
  
 Windows XP를 사용 하는 서비스 제어 명령줄 유틸리티 (Sc.exe)를 사용 하 여 서비스 설명을 볼 수 있습니다 또는 내에서 서비스 설명을 볼 수 있습니다 예를 들어 합니다 **Services** 의 노드는 **컴퓨터 관리**  콘솔.  
  
   
  
## Examples  
 다음 코드 예제에서는 새 Windows 서비스 애플리케이션에 대 한 설치 속성을 설정합니다. 이 예제에서는 서비스 이름, 표시 이름 및 설명 설정합니다. 이 예제에서는 서비스에 대 한 설치 속성에 할당 한 후 추가 합니다 <xref:System.ServiceProcess.ServiceInstaller> 개체는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션.  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 서비스를 식별하는 데 사용되는 이름을 나타냅니다.</summary>
        <value>서비스와 관련된 이름이며 대화형 도구에 주로 사용됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> 예를 들어, 서비스에 대 한 설명이 포함 된 사용자를 읽을 수 있는 이름을 제공 하기 위해 서비스 제어 관리자에서 사용 됩니다. <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> 레지스트리 값을 되었지만 레지스트리 키로 사용 되지 않습니다. 따라서 제한 된 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 속성 값이 적용 되지 않습니다. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 제한 되므로 HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services 레지스트리 키로 사용 됩니다.  
  
 표시 이름에 없기 때문에 이름, 선택에 제한이 되므로 서비스를 식별 하기 설치 유틸리티에서 사용 되지 않습니다는 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">설치와 연관된 컨텍스트 정보를 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</param>
        <summary>서비스 애플리케이션 정보를 레지스트리에 기록하여 서비스를 설치합니다. 이 메서드는 적절한 메서드를 자동으로 처리하는 설치 도구에서 사용됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드를 호출 하는 되는 일반적으로 <xref:System.ServiceProcess.ServiceInstaller> 코드 내에서 일반적으로 라고 설치 유틸리티에서만 합니다. 설치 유틸리티를 자동으로 호출 된 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 설치 하는 동안 메서드. 원하는를 필요한 경우 호출 하 여 <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> 에서 예외를 생성 하는 개체입니다.  
  
 이미 설치 되어 있는, 프로젝트 설치 관리자를 사용 하 여 구성 요소가 자동으로 정보를 유지 하는 애플리케이션의 설치 루틴 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>합니다. 이 상태 정보를 전달할 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 으로 `stateSaver` 매개 변수는 지속적으로 업데이트 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 인스턴스 및 각 <xref:System.ServiceProcess.ServiceInstaller> 인스턴스가 유틸리티에 의해 설치 된. 일반적으로이 상태 정보를 명시적으로 수정 하기 위해 코드에 대 한 필요는 없습니다.  
  
 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 관련 된 설치 클래스 설치 프로젝트 정보 모두에 공통적으로 적용 <xref:System.ServiceProcess.ServiceInstaller> 프로젝트의 인스턴스. 이 서비스는 설치 프로젝트의 다른 서비스에서 구분 하는 모든 항목에 해당 서비스 관련 정보는이 메서드에 의해 설치 됩니다.  
  
 서비스를 설치 하려면에서 상속 되는 프로젝트 설치 관리자 클래스를 만듭니다는 <xref:System.Configuration.Install.Installer> 클래스를 설정 합니다 <xref:System.ComponentModel.RunInstallerAttribute> 클래스를 특성 `true`합니다. 프로젝트 내에서 하나를 만들 <xref:System.ServiceProcess.ServiceProcessInstaller> 서비스 애플리케이션을 이전과 인스턴스당 <xref:System.ServiceProcess.ServiceInstaller> 애플리케이션에서 각 서비스에 대 한 인스턴스. 프로젝트 설치 관리자 클래스 생성자를 사용 하 여 서비스에 대 한 설치 속성을 설정 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 하 고 <xref:System.ServiceProcess.ServiceInstaller> 인스턴스와 인스턴스를 추가할는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션.  
  
> [!NOTE]
>  설치 관리자 인스턴스를 추가 하는 것에 대 한 생성자를 사용 하는 것이 좋습니다. 그러나에 추가 해야 할 경우는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션에는 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 메서드를 컬렉션에 동일한 추가 수행 해야 합니다 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 메서드.  
  
 파생 된 모든 클래스에 대 한 합니다 <xref:System.Configuration.Install.Installer> 클래스의 상태는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션에서 동일 해야 합니다 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 및 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 메서드. 그러나 컬렉션을 유지 관리를 방지할 수 있습니다 합니다 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 및 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 설치 관리자 인스턴스를 추가 하는 경우 메서드는 <xref:System.Configuration.Install.Installer.Installers%2A> 사용자 지정 설치 관리자 클래스 생성자 컬렉션입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">설치에 실행 파일에 대한 <see cref="T:System.ServiceProcess.ServiceProcessInstaller" />가 포함되어 있지 않은 경우  
  
또는 
어셈블리의 파일 이름이 <see langword="null" />이거나 빈 문자열인 경우  
  
또는 
서비스 이름이 잘못된 경우  
  
또는 
서비스 컨트롤 관리자를 열지 못한 경우</exception>
        <exception cref="T:System.ArgumentException">서비스에 대한 표시 이름이 255자보다 긴 경우</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">시스템에서 서비스에 대한 핸들을 생성하지 못한 경우  
  
또는 
해당 이름의 서비스가 이미 설치된 경우</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">현재 설치 관리자와 비교하고 있는 <see cref="T:System.Configuration.Install.ComponentInstaller" />입니다.</param>
        <summary>두 개의 설치 관리자가 동일한 서비스를 설치하는지 여부를 나타냅니다.</summary>
        <returns>두 설치 관리자 모두에 대해 <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />을 호출할 경우 동일한 서비스가 설치되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A> 나타내며, 예를 들어 두 명의 설치 관리자가 동일한 사용자 계정에서 동일한 서비스를 설치 하는지 여부를  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">설치와 연관된 컨텍스트 정보를 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</param>
        <summary>설치 프로시저에서 레지스트리에 쓴 서비스 애플리케이션 정보를 롤백합니다. 이 메서드는 적절한 메서드를 자동으로 처리하는 설치 도구에서 사용됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드를 호출 하는 되는 일반적으로 <xref:System.ServiceProcess.ServiceInstaller> 코드 내에서 일반적으로 라고 설치 유틸리티에서만 합니다. 설치 유틸리티를 자동으로 호출 된 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 설치 프로세스 중 메서드. 원하는를 필요한 경우 호출 하 여 <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> 에서 예외를 생성 하는 개체입니다.  
  
 프로젝트 설치 관리자를 사용 하 여 구성 요소가 이미 설치 되어 자동으로 정보를 유지 하는 애플리케이션의 설치 루틴 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>합니다. 이 상태 정보를 전달할 <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> 으로 `savedState` 매개 변수는 지속적으로 업데이트 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 인스턴스 및 각 <xref:System.ServiceProcess.ServiceInstaller> 인스턴스가 유틸리티에 의해 설치 된. 일반적으로이 상태 정보를 명시적으로 수정 하기 위해 코드에 대 한 필요는 없습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>시스템에서 이 서비스를 식별하는 데 사용되는 이름을 나타냅니다. 이 속성은 설치하려는 서비스의 <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" />과 동일해야 합니다.</summary>
        <value>설치되는 서비스의 이름입니다. 이 값은 설치 유틸리티에서 서비스를 설치하기 전에 설정해야 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 것이 중요 하는 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 와 동일할 수는 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 에서 파생 된 클래스의 <xref:System.ServiceProcess.ServiceBase>. 일반적으로 값을 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> 서비스 애플리케이션의 실행 파일의 main () 함수 내에서 서비스 속성 설정 됩니다. 서비스 제어 관리자를 사용 하 여 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> 이 실행 파일 내에서 서비스를 찾을 속성입니다.  
  
 설정 하는 경우는 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 서비스 설치 관리자의는 <xref:System.Diagnostics.EventLog.Source%2A> 관련된 이벤트 로그의 동일한 값으로 설정 됩니다. 따라서 서비스를 자동으로 컴퓨터의 애플리케이션 로그에 서비스 (예: 시작 및 중지) 명령 호출을 기록 합니다.  
  
> [!NOTE]
>  같은 이름으로 원본 컴퓨터의 하지만 애플리케이션 로그가 아닌 로그에 이미 있는 경우 예외가 throw 됩니다. 존재 하 고 애플리케이션 로그를 사용 하 여 연결 하는 소스를 해당 원본 서비스에 대 한 명령 호출을 보고 하는 고 예외가 throw 되지 않습니다.  
  
 합니다 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 일 수 없습니다 `null` 없거나 길이가 0입니다. 최대 크기는 256 자입니다. 또한 슬래시 또는 백슬래시를 포함할 수 없습니다 '/' 또는 '\\', 또는 문자는 ascii에서 문자 10 진수 값 32 보다 작은 값을 사용 하 여 집합입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> 속성이 잘못된 경우</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 서비스를 실행하는 데 필요한 서비스를 나타냅니다.</summary>
        <value>이 설치 관리자와 관련된 서비스를 실행하기 전에 실행해야 하는 서비스의 배열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 서비스를 시작 하기 전에 실행 되 고 다른 서비스를 요구할 수 있습니다. 이 속성의 정보는 레지스트리에서 키에 기록 됩니다. 사용자 (또는 시스템에 자동으로 시작 하는 경우)가 서비스를 실행 하려는 경우, 서비스 제어 관리자 (SCM)는 각 배열에 있는 서비스 이미 시작 된 것을 확인 합니다.  
  
 모든 서비스 배열의 다음를 실행 하지 않는 경우 SCM 시작 하려고 시도 합니다. 여기에 사용 하 여 서비스 `Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>합니다.  
  
 이 서비스가 종속 된 모든 서비스를 시작 하지 못하면이 서비스가 시작 되지 않습니다. 이 문제를 감지할 시스템 수준에서 처리 하는 예외가 없으면 때문에 시스템 시작 되지 않으면 예외가 throw 되지 않습니다. 서비스 시작 실패를 처리 하 고 코드에서이 구현 하는 방법을 결정 합니다. 일반적으로 서비스를 시작 하지 못한 경우에 시작 시 사용자에 게 대화 상자가 나타납니다.  
  
 서비스가 시작 되지 않으면 항목이 애플리케이션 이벤트 로그에 쓰여집니다.  
  
 이 서비스가 종속 된 서비스는 동일한 실행 파일에 포함 되도록 필요가 없습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 서비스를 시작하는 방법 및 시기를 나타냅니다.</summary>
        <value>서비스의 시작 방법을 나타내는 <see cref="T:System.ServiceProcess.ServiceStartMode" />이며, 기본값은 <see langword="Manual" />입니다. 수동 모드에서는 다시 부팅한 후에 서비스가 자동으로 시작되지 않도록 지정합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 된 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> 지정 서비스를 자동으로 다시 부팅 한 후 시작할 수 있는지 또는 사용자를 수동으로 시작 해야 합니다. 서비스도 비활성화 될 수는 시작할 수 없습니다, 수동으로 또는 프로그래밍 방식으로 사용 될 때까지 지정 합니다.  
  
 변경할 수 없습니다 <xref:System.ServiceProcess.ServiceInstaller> 설치가 속성 값입니다. 변경 하는 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>, 중 하나를 제거 하 고 서비스를 다시 설치 하거나 서비스 제어 관리자를 사용 하 여 설정을 수동으로 변경 해야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">시작 모드는 <see cref="T:System.ServiceProcess.ServiceStartMode" /> 열거형의 값이 아닙니다.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">설치와 연관된 컨텍스트 정보를 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</param>
        <summary>레지스트리에서 서비스에 대한 정보를 제거하여 해당 서비스를 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 제거 하기 전에 서비스를 중지 하려면 첫 번째 시도 제거 합니다. 서비스를 중지할 수 없으면, 예외가 포착 되 하 고 메서드가 서비스 제거를 사용 하 여 계속 합니다.  
  
 메서드를 호출 하는 되는 일반적으로 <xref:System.ServiceProcess.ServiceInstaller> 코드 내에서 일반적으로 라고 설치 유틸리티에서만 합니다. 서비스를 제거할 수 있을 뿐만 아니라 설치할지; InstallUtil는 제거 명령줄 호출에서 스위치를 사용합니다.  
  
 루틴을 제거 하는 애플리케이션의 구성 요소에 대 한 자동으로 정보를 유지 관리, 프로젝트 설치 관리자를 사용 하 여 제거 하 고 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>입니다. 이 상태 정보를 전달할 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 으로 `savedState` 매개 변수는 지속적으로 업데이트 합니다 <xref:System.ServiceProcess.ServiceProcessInstaller> 인스턴스 및 각 <xref:System.ServiceProcess.ServiceInstaller> 인스턴스가 유틸리티에 의해 설치 된. 일반적으로이 상태 정보를 명시적으로 수정 하기 위해 코드에 대 한 필요는 없습니다.  
  
 파생 된 모든 클래스에 대 한 합니다 <xref:System.Configuration.Install.Installer> 클래스의 상태는 <xref:System.Configuration.Install.Installer.Installers%2A> 컬렉션에서 동일 해야 합니다 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 및 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 메서드. 그러나 컬렉션을 유지 관리를 방지할 수 있습니다 합니다 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> 및 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> 설치 관리자 인스턴스를 추가 하는 경우 메서드는 <xref:System.Configuration.Install.Installer.Installers%2A> 사용자 지정 설치 관리자 클래스 생성자 컬렉션입니다.  
  
 하나의 서비스를 제거 하지 못하면이 영향을 주지 않습니다 내의 다른 서비스 (일반적으로 동일한 설치 프로젝트를) 제거 하 고 있으므로 제거에 대 한 롤백 메커니즘이 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">서비스 컨트롤 관리자를 열지 못한 경우  
  
또는 
시스템에서 서비스에 대한 핸들을 가져오지 못한 경우</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>