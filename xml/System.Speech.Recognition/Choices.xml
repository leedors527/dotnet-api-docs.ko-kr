<Type Name="Choices" FullName="System.Speech.Recognition.Choices">
  <Metadata><Meta Name="ms.openlocfilehash" Value="451bf9dafb2e50595cabe66bb83ee0cb52efc4c5" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="59743326" /></Metadata><TypeSignature Language="C#" Value="public class Choices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Choices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Choices" />
  <TypeSignature Language="VB.NET" Value="Public Class Choices" />
  <TypeSignature Language="C++ CLI" Value="public ref class Choices" />
  <TypeSignature Language="F#" Value="type Choices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_oneOf.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>스피치 인식 그래머의 제약사항에서 대안을 표현한다</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.Choices> 개체는 여러 값 중 하나를 가질 수 있는 구 구성 요소를 나타냅니다. 음성 인식 문법을 만들 때이 클래스를 사용 하 여를 <xref:System.Speech.Recognition.GrammarBuilder> 개체입니다.  
  
 예를 들어를 <xref:System.Speech.Recognition.Choices> 개체는 구성 요소를 나타낼 수 있습니다 *colorChoice* 구의에서 "색을 변경 *colorChoice*"에서 허용 되는 값에 대 한 *colorChoice* "red" 또는 "녹색" 또는 "blue" 됩니다.  
  
> [!NOTE]
>  사용 하는 <xref:System.Speech.Recognition.Choices> 라는 선택적 구성 요소로 개체를 만듭니다 합니다 <xref:System.Speech.Recognition.Choices> 개체에 추가 하는 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 개체 `minRepeat` 및 `maxRepeat` 각각 0과 1로 설정 합니다. 선택적 구성 요소에서 사용 되는 여부 또는 선택적 구성 요소를 포함 하는 문구를 인식할 수 있습니다.  
  
 <xref:System.Speech.Recognition.Choices> 클래스와 동일한 기능을 제공 합니다 `one-of` 정의한 XML 요소를 [음성 인식 문법 Specification (SRGS) 버전 1.0](https://www.w3.org/TR/speech-grammar/) 와 비슷합니다는 <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> 클래스는 <xref:System.Speech.Recognition.SrgsGrammar> 네임 스페이스입니다.  
  
 스피치 인식 그래 머를 정의 하는 방법에 대 한 자세한 내용은 참조 하세요. [음성 인식](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)) 하 고 [GrammarBuilder 문법을 만드는](https://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)합니다.  
  
   
  
## Examples  
 다음 예에서는 구문을 음성 인식 문법을 "백그라운드로 *colorChoice*", 여기서 *colorChoice* 정의 된 색 중 하나일 수 있습니다. <xref:System.Speech.Recognition.GrammarBuilder> 문법에 대 한 제약 조건을 정의 하는 데 사용 됩니다.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  colorChoice.Add(new string[] {"cyan", "yellow", "magenta"});  
  
  // Construct the phrase.  
  GrammarBuilder builder = new GrammarBuilder("Set background to");  
  builder.Append(colorChoice);  
  
  // Create a grammar for the phrase.  
  Grammar colorGrammar = new Grammar(builder);  
  colorGrammar.Name = "SetBackground";  
  
  return colorGrammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">음성 인식 문법 사양 (SRGS)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.Choices" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 생성할 수 있습니다는 <xref:System.Speech.Recognition.Choices> 되는 기본 생성자 (빈 개체를 반환), 그룹에서 사용 하 여 개체 <xref:System.String> 개체 또는 집합과에서 <xref:System.Speech.Recognition.GrammarBuilder> 개체입니다.  
  
 때문에 <xref:System.Speech.Recognition.GrammarBuilder> 개체에는의 암시적 변환을 지 원하는 <xref:System.Speech.Recognition.SemanticResultValue> 하 고 <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices> 캐스트를 사용 하 여 이러한 개체의 배열에서 생성할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Speech.Recognition.Choices> 개체 대안의 두 개의 목록을 만듭니다.  
  
 첫 번째 <xref:System.Speech.Recognition.Choices> 개체의 배열에서 생성 되 <xref:System.String> 개체입니다. 다른 <xref:System.Speech.Recognition.Choices> 개체의 배열에서 생성 되 <xref:System.Speech.Recognition.GrammarBuilder> 캐스트 하 여 암시적으로 변환 된 개체입니다.  
  
 예제에서는 <xref:System.Speech.Recognition.GrammarBuilder> 구에 조합 하는 개체를 사용 하 여는 <xref:System.Speech.Recognition.Choices> 개체 및 음성 인식에 사용할 수 있는 두 개의 추가 문자열 입력 "호출 [contactlList] [phoneType] 휴대폰에서" 형식의 예를 들어 "휴대폰에서 호출 Jane"입니다.  
  
```csharp
public GrammarBuilder ChoicesConstructor2 ()  
{  
    GrammarBuilder gb = new GrammarBuilder ();  
    Choices phoneType = new Choices (new string[] {"cell", "home", "work"});  
    Choices contactList = new Choices (new GrammarBuilder[] {(GrammarBuilder) "Mark", (GrammarBuilder) "Jane", (GrammarBuilder) "Frank"});  
    gb.Append ("Call");  
    gb.Append (contactList);  
    gb.Append ("on");  
    gb.Append (phoneType);  
    gb.Append ("phone");  
    return gb;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>대체의 빈 집합을 포함하는 <see cref="T:System.Speech.Recognition.Choices" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자 대안 유효한, 빈 집합을 반환합니다. 대체 방법 중 하나를 사용 하 여 추가할 수 있습니다는 <xref:System.Speech.Recognition.Choices.Add%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Speech.Recognition.Choices> 고 <xref:System.Speech.Recognition.GrammarBuilder> "자신의 셀 호출 Anne" 및 "자신의 업무용 전화에서 호출 James"와 같은 음성 입력을 인식 하는 구를 만드는 개체입니다. 이 예제에서는 사용으로의 암시적 캐스팅 <xref:System.Speech.Recognition.Choices> 및 <xref:System.String> 에 <xref:System.Speech.Recognition.GrammarBuilder>입니다.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices alternateChoices" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">대체 집합을 포함하는 배열</param>
        <summary>하나 이상의 <see cref="T:System.Speech.Recognition.Choices" /> 개체를 포함하는 배열에서 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 각 <xref:System.Speech.Recognition.GrammarBuilder> 에서 `alternateChoices` 선택할 대안 중 하나를 정의 합니다. 경우 `alternateChoices` 빈 배열인 생성자 대안의 빈 집합을 반환 합니다. 대체 방법 중 하나를 사용 하 여 추가할 수 있습니다는 <xref:System.Speech.Recognition.Choices.Add%2A> 메서드.  
  
 생성자가 throw를 <xref:System.ArgumentNullException> 때 `alternateChoices` 됩니다 `null` 는 배열 요소 중 하나 또는 `null`.  
  
 때문에 합니다 <xref:System.Speech.Recognition.GrammarBuilder> 클래스의 암시적 변환에 대 한 지원을 제공 <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultValue>, 및 <xref:System.Speech.Recognition.SemanticResultKey> 개체를 <xref:System.Speech.Recognition.GrammarBuilder> 인스턴스를 캐스트를 올바르게 사용 하 여이 생성자도 수 만들기는 <xref:System.Speech.Recognition.Choices> 이러한 개체의 임의 조합 목록의 개체입니다.  
  
   
  
## Examples  
 다음 예제에서는 `Choices` 및 <xref:System.Speech.Recognition.GrammarBuilder> 만들려는 개체를 <xref:System.Speech.Recognition.Grammar> "자신의 셀 호출 Anne" 및 "자신의 업무용 전화에서 호출 James" 같은 구입니다. 이 예제에서는 사용으로의 암시적 캐스팅 `Choices` 및 <xref:System.String> 에 <xref:System.Speech.Recognition.GrammarBuilder>입니다.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : string[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices phrases" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">대체 집합을 포함하는 배열</param>
        <summary>하나 이상의 <see cref="T:System.Speech.Recognition.Choices" /> 개체를 포함하는 배열에서 <see cref="T:System.String" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 각 <xref:System.String> 에서 `phrases` 선택할 대안 중 하나를 정의 합니다. 음성 인식 엔진 음성 입력와 일치 하도록 문자열 배열에 항목 중 하나를 사용할 수 있습니다. 경우 `phrases` 빈 배열인 생성자 대안의 빈 집합을 반환 합니다. 대체 방법 중 하나를 사용 하 여 추가할 수 있습니다는 <xref:System.Speech.Recognition.Choices.Add%2A> 메서드.  
  
 생성자가 throw를 <xref:System.ArgumentNullException> 때 `phrases` 됩니다 `null` 배열 요소 중 하나 또는 `null`합니다. 생성자는 throw는 <xref:System.ArgumentException> 배열의 모든 요소 빈 문자열인 경우 ("").  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Speech.Recognition.Choices> 및 <xref:System.Speech.Recognition.GrammarBuilder> 만들려는 개체는 <xref:System.Speech.Recognition.Grammar> "자신의 셀 호출 Anne" 및 "자신의 업무용 전화에서 호출 James" 같은 구입니다. 이 예제에서는 사용으로의 암시적 캐스팅 `Choices` 및 <xref:System.String> 에 <xref:System.Speech.Recognition.GrammarBuilder>입니다.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>대체 집합에 항목을 추가합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Speech.Recognition.GrammarBuilder[] -&gt; unit" Usage="choices.Add alternateChoices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">이 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 개체에 추가할 <see cref="T:System.Speech.Recognition.Choices" /> 개체입니다.</param>
        <summary>하나 이상의 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 개체를 포함하는 배열을 대체 집합에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 암시적으로 변환에 대 한 지원으로 인해 <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, 및 <xref:System.Speech.Recognition.SemanticResultValue> 개체를 <xref:System.Speech.Recognition.GrammarBuilder>, 이러한 세 가지 클래스에 추가할 수 있습니다는 <xref:System.Speech.Recognition.Choices> 인스턴스.  
  
 경우 `alternateChoices` 빈 배열,이 대체 집합에 업데이트 되지 않습니다.  
  
 응용 프로그램 모두를 사용할 수 있습니다 <xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> 하 고 <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> 에 대 한 대안을 추가 하는 <xref:System.Speech.Recognition.Choices> 개체입니다.  
  
 이 메서드가 throw를 <xref:System.ArgumentNullException> 때 `alternateChoices` 됩니다 `null` 배열 요소 중 하나 또는 `null`합니다.  
  
   
  
## Examples  
 다음 예제에서는 "자신의 셀 호출 Anne" 및 "자신의 업무용 전화에서 호출 James"와 같은 구를 스피치 인식 그래 머를 만듭니다. 예제에서는 두 오버 로드는 <xref:System.Speech.Recognition.Choices.Add%2A> 문법을 작성 하는 방법입니다.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="member this.Add : string[] -&gt; unit" Usage="choices.Add phrases" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">이 <see cref="T:System.Speech.Recognition.Choices" /> 개체에 추가할 문자열입니다.</param>
        <summary>하나 이상의 <see cref="T:System.String" /> 개체를 포함하는 배열을 대체 집합에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 응용 프로그램 모두를 사용할 수 있습니다 <xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> 하 고 <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> 에 대 한 대안을 추가 하는 <xref:System.Speech.Recognition.Choices> 개체입니다.  
  
 경우 `phrases` 빈 배열,이 메서드는 대체 항목의 집합을 업데이트 하지 않습니다.  
  
 이 메서드가 throw를 <xref:System.ArgumentNullException> 때 `phrases` 됩니다 `null` 배열 요소 중 하나 또는 `null`합니다. 이 메서드가 throw는 <xref:System.ArgumentException> 배열의 모든 요소 빈 문자열인 경우 ("").  
  
   
  
## Examples  
 다음 예제에서는 "자신의 셀 호출 Anne" 및 "자신의 업무용 전화에서 호출 James"와 유사한 구 스피치 인식 그래 머를 만듭니다. 예제에서는 두 오버 로드는 <xref:System.Speech.Recognition.Choices.Add%2A> 문법을 작성 하는 방법입니다.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="choices.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 개체에서 <see cref="T:System.Speech.Recognition.Choices" /> 개체를 반환합니다.</summary>
        <returns>이 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 개체와 일치하는 <see cref="T:System.Speech.Recognition.Choices" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> 이 메서드에서 하나에 해당 반환한 다음 중 하나를 반환 합니다.  
  
-   호출 된 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> 이 개체를 매개 변수로 사용 하 여 생성자입니다.  
  
-   이 개체의 캐스팅은 암시적 또는 명시적를 사용 하 여를 <xref:System.Speech.Recognition.GrammarBuilder>입니다.  
  
   
  
## Examples  
 다음 예제에서는 배경색을 변경 하는 것에 대 한 음성 인식 문법을 만듭니다.  
  
```csharp  
  
private Grammar CreateColorChoice()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append(new Choices(new string[] {"Set", "Change"}));  
  gb.Append("background to");  
  gb.Append(colorChoice.ToGrammarBuilder());  
  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "modify background color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
  </Members>
</Type>