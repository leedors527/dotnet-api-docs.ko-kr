<Type Name="RecognizedPhrase" FullName="System.Speech.Recognition.RecognizedPhrase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b8792b13fae37da4786691e3bbb396d7c057b2ff" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55374477" /></Metadata><TypeSignature Language="C#" Value="public class RecognizedPhrase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedPhrase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedPhrase" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedPhrase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedPhrase" />
  <TypeSignature Language="F#" Value="type RecognizedPhrase = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{Text}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>음성 인식기에서 생성된, 인식된 입력에 대한 자세한 정보를 포함합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 클래스는 단어와 구에 적용 하는 동안 다음과 같은 음성 인식 작업을 처리 하는 방법에 대 한 자세한 정보를 포함 합니다.  
  
-   합니다 <xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A> 속성 참조는 <xref:System.Speech.Recognition.Grammar> 인식기에서 입력을 식별 하는 데 사용 합니다.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> 속성 구에 대 한 정규화 된 텍스트를 포함 합니다.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> 결과에 포함 된 의미 체계 정보를 참조 하는 속성입니다. 의미 체계 정보에는 키 이름 및 연결 된 의미 체계 데이터의 사전입니다.  
  
-   합니다 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 속성의 정렬된 된 컬렉션이 포함 <xref:System.Speech.Recognition.RecognizedWordUnit> 각각 나타내는 개체를 입력의 단어를 인식 합니다. 각 단어 단위 표시 형식, 어휘 형식 및 해당 단어의 발음 정보를 포함합니다.  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A> 특별 한 단어 대체 하는 방법에 대 한 정보를 포함 하는 속성입니다.  
  
-   합니다 <xref:System.Speech.Recognition.RecognizedPhrase.Homophones%2A> 및 <xref:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId%2A> 속성 동일 하거나 유사한 발음을 가진 인식 대체 항목에 대 한 정보를 포함 합니다.  
  
-   값을 <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> 속성 확신도를 음성 인식기에서 할당 된 인식 된 구와 입력과 일치 하는 수준을 나타냅니다.  
  
 음성 인식기에서 인식 결과 반환 합니다.는 <xref:System.Speech.Recognition.RecognitionResult> 개체에서 상속 되는 <xref:System.Speech.Recognition.RecognizedPhrase>합니다. 인식 결과 <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> 속성의 정렬된 된 컬렉션이 포함 <xref:System.Speech.Recognition.RecognizedPhrase> 된 인식기에 대 한 입력에 대 한 가능한 일치 하는 개체입니다.  
  
   
  
## Examples  
 다음 예제에 대 한 처리기를 보여 줍니다.는 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, 또는 <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> 이벤트와 관련 된 정보 중 일부는 <xref:System.Speech.Recognition.RecognitionResult> 개체입니다. <xref:System.Speech.Recognition.RecognitionResult> 클래스는 <xref:System.Speech.Recognition.RecognizedPhrase> 클래스에서 파생됩니다.  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
    <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
  </Docs>
  <Members>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedPhrase.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.RecognizedPhrase" />가 지정된 입력과 일치할 가능성을 나타내는 값(인식자가 할당)을 가져옵니다.</summary>
        <value>구에 대한 올바른 인식 확신도의 상대 측정값입니다. 값 범위는 각각 낮음에서 높음 신뢰도가 0.0에서 1.0 사이입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 신뢰성 점수는 구가 올바르게 인식 절대 가능성을 나타내지 않습니다. 대신 신뢰성 점수는 지정된 된 입력에 대 한 여러 인식 대체 항목의 상대 정확도 비교 하는 메커니즘을 제공 합니다. 이로써 가장 정확 하 게 인식 결과 반환 합니다. 예를 들어, 인식 된 구와 0.8의 신뢰성 점수는에 있는 경우이 아닙니다 라는 문구에는 80 %0이 될 가능성 입력에 대해 정확 하 게 일치 합니다.  이 구를 안심 하는 다른 결과 보다 입력에 대 한 올바른 일치 점수 0.8 보다 작은 일 가능성이 임을 의미 합니다.  
  
 신뢰성 점수는 자체적으로 대체 결과 동일한 인식 작업에서 또는 동일한 입력의 이전 개 인식 비교를 경우가 아니라면 의미가 없습니다. 값이 반환한 구 대체 후보 순위에 사용 됩니다 합니다 <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> 속성을 <xref:System.Speech.Recognition.RecognitionResult> 개체입니다.  
  
 신뢰도 값은 상대 및 고유한 각 인식 엔진에 사용 합니다. 두 개의 다른 인식 엔진에서 반환 된 신뢰도 값 의미에 따라 비교할 수 없습니다.  
  
 음성 인식 엔진 백그라운드 간섭, inarticulate 음성 또는 예기치 않은 단어나 단어 시퀀스를 포함 하 여 여러 가지 이유로 음성된 입력에 신뢰성 점수는 낮습니다를 할당할 수 있습니다. 애플리케이션을 사용 하는 경우는 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 인스턴스는 음성 입력을 수락 또는 거부할 중 하나를 사용 하 여 신뢰 수준을 수정할 수 있습니다는 <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> 메서드. 관리 하는 공유 인식기에 대 한 신뢰도 임계값 <xref:System.Speech.Recognition.SpeechRecognizer>, 사용자 프로필과 연결 되며 Windows 레지스트리에 저장 합니다. 애플리케이션 공유 된 인식기의 속성에 대 한 레지스트리 변경을 작성 해야 합니다.  
  
 <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> 의 속성을 <xref:System.Speech.Recognition.RecognitionResult> 개체의 정렬된 된 컬렉션이 포함 <xref:System.Speech.Recognition.RecognizedPhrase> 인식기에 대 한 입력에 대 한 가능한 조건과 일치 하는 각 개체입니다. 대체 항목은 가장 낮은 신뢰도에 위에서 정렬 됩니다.  
  
   
  
## Examples  
 다음 예제에 대 한 처리기를 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, 또는 <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> 이벤트입니다. 와 관련 된 정보를 표시 하는 예제는 <xref:System.Speech.Recognition.RecognitionResult> 개체에서 파생 되는 일부 <xref:System.Speech.Recognition.RecognizedPhrase>합니다. 처리기는 인식 된 구와 인식 대체 항목의 경우에 대 한 신뢰도 점수를 표시합니다.  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="ConstructSmlFromSemantics">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics" />
      <MemberSignature Language="VB.NET" Value="Public Function ConstructSmlFromSemantics () As IXPathNavigable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XPath::IXPathNavigable ^ ConstructSmlFromSemantics();" />
      <MemberSignature Language="F#" Value="member this.ConstructSmlFromSemantics : unit -&gt; System.Xml.XPath.IXPathNavigable" Usage="recognizedPhrase.ConstructSmlFromSemantics " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.IXPathNavigable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.RecognizedPhrase" /> 개체를 통해 의미 체계 정보에 대한 SML(Semantic Markup Language) 문서를 반환합니다.</summary>
        <returns><see cref="T:System.Speech.Recognition.RecognizedPhrase" />의 의미 체계에 대한 SML 설명을 <see href="https://msdn.microsoft.com/library/ms256115.aspx">XPath</see> 탐색 가능 개체로 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 의미 체계 태그 언어 SML ()에 대 한 자세한 내용은 참조는 [의미 체계 태그 언어 참조](https://msdn.microsoft.com/library/f9d83443-2cac-49bc-a447-210feda62f5d)합니다.  
  
   
  
## Examples  
 다음 예제에서는 메서드는 인식 된 구의 의미 체계에 대 한 SML을 포함 하는 문자열을 반환 합니다.  
  
```  
private string GetSemanticsSML(RecognizedPhrase result)  
{  
  if (result.Semantics.Count > 0)  
  {  
    return result.ConstructSmlFromSemantics().CreateNavigator().OuterXml;  
  }  
  else  
  {  
    return null;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Grammar">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.Grammar Grammar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.Grammar Grammar" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Grammar" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammar As Grammar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::Grammar ^ Grammar { System::Speech::Recognition::Grammar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Grammar : System.Speech.Recognition.Grammar" Usage="System.Speech.Recognition.RecognizedPhrase.Grammar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>음성 인식기에서 <see cref="T:System.Speech.Recognition.RecognizedPhrase" />를 반환하는 데 사용한 <see cref="T:System.Speech.Recognition.Grammar" />을 가져옵니다.</summary>
        <value>음성 인식기에서 입력을 식별하는 데 사용한 문법 개체입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="HomophoneGroupId">
      <MemberSignature Language="C#" Value="public int HomophoneGroupId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HomophoneGroupId" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HomophoneGroupId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HomophoneGroupId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HomophoneGroupId : int" Usage="System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>구에 대한 동음이의어 그룹의 식별자를 가져옵니다.</summary>
        <value>구에 대한 동음이의어 그룹의 식별자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 음성 인식기 동일한 발음을 가진 인식 대체 항목을 모든 그룹 식별자를 할당 합니다. 인식기 고유 발음에 있는 각 대체에 대 한 동음이의어 그룹을 만듭니다. 음성 인식기가 새 그룹의 각 인식 작업에 대 한 식별자를 생성 하 고 별도 인식 작업에서 생성 된 대체에서 비교할 식별자를 사용할 수 없습니다.  
  
 예를 들어, "이야기", "비상" 및 "ale" 하는 대체 항목을 포함 한 인식 결과 대해 처음 두 명의 대체 한 동음이의어 그룹에 속하는 및 마지막 대체에는 두 번째 동음이의어 그룹의 단일 멤버 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      </Docs>
    </Member>
    <Member MemberName="Homophones">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt; Homophones { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedPhrase&gt; Homophones" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Homophones As ReadOnlyCollection(Of RecognizedPhrase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ Homophones { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Homophones : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.Homophones" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 인식된 구와 동일한 발음을 가진 인식 대체 항목의 컬렉션을 가져옵니다.</summary>
        <value>이 인식된 구와 동일한 발음을 가진 인식 대체 항목의 읽기 전용 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에는이 인식 된 구와 동일한 발음을 가진 다른 모든 인식 대체 반환 합니다.  
  
 예를 들어, 인식 결과 포함 하는 대체 항목, "이야기" 및 "비상"에 대 한 첫 번째 대체 "이야기"에 대 한 동음이의어 컬렉션에는 "비상" 고 두 번째 구문을 포함 됩니다. 두 번째 대체 "비상"에 대 한 동음이의어 컬렉션 "이야기" 첫 번째 구의 포함 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      </Docs>
    </Member>
    <Member MemberName="ReplacementWordUnits">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReplacementWordUnits As Collection(Of ReplacementText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ ReplacementWordUnits { System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReplacementWordUnits : System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>음성 인식기에서 음성-텍스트 정규화의 일부로 변경된 텍스트에 대한 정보를 가져옵니다.</summary>
        <value>음성 인식기에서 인식된 입력을 정규화할 때 교체한 텍스트 부분을 설명하는 <see cref="T:System.Speech.Recognition.ReplacementText" /> 개체의 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 음성 인식기가 음성 인식 프로세스의 일부로, 표시 형식으로 인식 된 입력을 정규화합니다.  
  
 음성된 입력을 "25 달러" 인식 결과 생성 하는 예를 들어 여기서는 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 단어, "20", "5" 및 "달러" 속성에 포함 되어 있습니다 및 <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> 속성 "$25.00" 라는 문구를 포함 합니다. 텍스트 정규화에 대 한 자세한 내용은 참조는 <xref:System.Speech.Recognition.ReplacementText> 클래스입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="T:System.Speech.Recognition.ReplacementText" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Semantics">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SemanticValue Semantics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SemanticValue Semantics" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Semantics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Semantics As SemanticValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SemanticValue ^ Semantics { System::Speech::Recognition::SemanticValue ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Semantics : System.Speech.Recognition.SemanticValue" Usage="System.Speech.Recognition.RecognizedPhrase.Semantics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SemanticValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>인식된 구와 관련된 의미 체계 정보를 가져옵니다.</summary>
        <value>인식된 구와 관련된 의미 체계 정보입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 음성 인식 문법을 의미 체계 정보를 포함할 수 있습니다. 음성 인식기를 이러한 문법에 대 한 인식 결과 생성할 때 의미 체계 정보 인식 결과에 포함 하 여 규칙을 문법 및 인식기에 대 한 입력에 따라 수 있습니다. 의미 체계 정보에 대 한 자세한 내용은 참조 하세요. [의미 체계 결과 이해](https://msdn.microsoft.com/library/2a9dbd8b-cf6d-42cd-bbb9-ca0b3e534005) 하며 <xref:System.Speech.Recognition.SemanticResultKey> 고 <xref:System.Speech.Recognition.SemanticResultValue> 클래스입니다.  
  
   
  
## Examples  
 다음 예제에서는 인식 된 구와에서 특정 의미 체계 정보를 가져오는 메서드를 정의 합니다. 이 메서드는 반환 값을 검색 하지 못했습니다 경우 의미 체계 키 또는 null 값을 포함 합니다. 이 메서드는 최상위 키만 확인합니다. 의미 체계 정보 트리 값에 포함 되어 있으므로 반환 되는 값 의미 체계를 통해 하위 수준의 키에 액세스할 수 있어야 합니다.  
  
```  
static bool TryGetSemanticValue(  
      RecognizedPhrase phrase, string key, out SemanticValue value)  
{  
  value = null;  
  bool found = phrase.Semantics.ContainsKey(key);  
  if (found)  
  {  
    value = phrase.Semantics[key];  
  }  
  
  return found;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
        <altmember cref="T:System.Speech.Recognition.SemanticValue" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedPhrase.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>음성 인식기에서 인식된 입력으로 생성한 정규화된 텍스트를 가져옵니다.</summary>
        <value>음성 인식기에서 인식된 입력으로 생성한 정규화된 텍스트입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 음성 인식기가 음성 인식 프로세스의 일부로, 표시 형식으로 인식 된 입력의 음성-텍스트 정규화를 수행합니다.  
  
 음성된 입력을 "25 달러" 인식 결과 생성 하는 예를 들어 여기서는 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 단어, "20", "5" 및 "달러" 속성에 포함 되어 있습니다 및 <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> 속성 "$25.00" 라는 문구를 포함 합니다. 텍스트 정규화에 대 한 자세한 내용은 참조 하세요. <xref:System.Speech.Recognition.ReplacementText>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Words">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt; Words { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedWordUnit&gt; Words" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Words As ReadOnlyCollection(Of RecognizedWordUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ Words { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Words : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt;" Usage="System.Speech.Recognition.RecognizedPhrase.Words" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>음성 인식기에서 인식된 입력으로 생성한 단어를 가져옵니다.</summary>
        <value>음성 인식기에서 인식된 입력에 대해 생성한 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 개체의 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에는 결과의 인식기의 음성-텍스트 정규화 하기 전에 음성 인식기에서 입력에서 생성 된 단어를 포함 합니다.  
  
 음성된 입력을 "25 달러" 인식 결과 생성 하는 예를 들어 여기서는 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 단어, "20", "5" 및 "달러" 속성에 포함 되어 있습니다 및 <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> 속성 "$25.00" 라는 문구를 포함 합니다. 텍스트 정규화에 대 한 자세한 내용은 참조 하세요. <xref:System.Speech.Recognition.ReplacementText>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      </Docs>
    </Member>
  </Members>
</Type>