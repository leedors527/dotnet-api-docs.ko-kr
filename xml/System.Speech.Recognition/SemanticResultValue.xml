<Type Name="SemanticResultValue" FullName="System.Speech.Recognition.SemanticResultValue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="907b483bc1be02cb41e948c494d9e811209c0ba1" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55374620" /></Metadata><TypeSignature Language="C#" Value="public class SemanticResultValue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultValue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultValue" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultValue" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultValue" />
  <TypeSignature Language="F#" Value="type SemanticResultValue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>의미값을 표현하며 선택적으로 스피치 인식 그래머의 콤포넌트와 값을 관련짓는다</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 <xref:System.Speech.Recognition.SemanticResultValue> 하 고 <xref:System.Speech.Recognition.SemanticResultKey> 개체와 함께에서 <xref:System.Speech.Recognition.GrammarBuilder> 및 <xref:System.Speech.Recognition.Choices>, 의미 체계 구조를 디자인 하는 가장 쉬운 방법은 <xref:System.Speech.Recognition.Grammar>입니다. 인스턴스를 가져와서 구문을 의미 체계 정보에 액세스할 <xref:System.Speech.Recognition.SemanticValue>을 통해 합니다 <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> 속성을 <xref:System.Speech.Recognition.RecognizedPhrase>입니다.  
  
> [!NOTE]
>  관리 하는 값 <xref:System.Speech.Recognition.SemanticResultValue> 개체는 정의한 <xref:System.Object> 인스턴스가 해당 생성자에 전달 합니다. 이 기본 유형은 <xref:System.Object> 있어야 `bool`, `int`, `float`, 또는 `string`. 다른 형식 생성 되지 것입니다는 <xref:System.Speech.Recognition.Grammar> 인스턴스는 <xref:System.Speech.Recognition.SemanticResultValue>합니다.  
  
 사용 하는 일반적인를 <xref:System.Speech.Recognition.SemanticResultValue> 의 인식할 수 있는 구성 요소를 사용 하 여 인스턴스를 연결 하는 인스턴스를 <xref:System.Speech.Recognition.Grammar>, 구, 규칙, 같은 또는 <xref:System.Speech.Recognition.Choices> 개체입니다. 연결된 된 구성 요소를 인식 작업의 일부로 사용 되는 경우는 <xref:System.Speech.Recognition.SemanticResultValue> 반환 된 구의 의미 체계에서 값을 정의 하는 데 사용 됩니다.  
  
 두 가지가 있습니다 기본 연결을 <xref:System.Speech.Recognition.SemanticResultValue> 문법 요소를 만드는 데 사용 된 생성자에 따라 사용 하 여 인스턴스를 <xref:System.Speech.Recognition.SemanticResultValue>입니다.  
  
-   만 값 (인스턴스의 지정 된 <xref:System.Object>) 생성 하는 데 사용 되는 <xref:System.Speech.Recognition.SemanticResultValue> 개체를 <xref:System.Speech.Recognition.SemanticResultValue> 외에, 앞에 오는 문법 구성 요소와 연결 된를 <xref:System.Speech.Recognition.GrammarBuilder> 개체.  
  
     예를 들어 경우 아래 코드 조각에에서는 <xref:System.Speech.Recognition.Grammar> 이 사용 하 여 생성 <xref:System.Speech.Recognition.GrammarBuilder> 인스턴스 값을 "백그라운드" 단어를 인식 `true` 인식 된 구와 의미 체계에 설정 됩니다.  
  
    ```csharp  
    GrammarBuilder backgroundGB=new GrammarBuilder("background");  
    backgroundGB.Append(new SemanticResultValue(true));  
    ```  
  
     자세한 내용은 <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>의 설명을 참조하세요.  
  
-   문자열 값 구 또는 특정 <xref:System.Speech.Recognition.GrammarBuilder> 인스턴스가 사용 되는 함께 <xref:System.Object> 지정 하는 <xref:System.Speech.Recognition.SemanticResultValue> 값을 값의 문자열 값 구문으로 자동으로 연결 되었는지 또는 <xref:System.Speech.Recognition.GrammarBuilder> 인스턴스.  경우는 구 또는 <xref:System.Speech.Recognition.GrammarBuilder> 인식된 된 구와의 의미 체계에 할당할 값, 개체 인식 프로세스에 사용 됩니다.  
  
     다음 예제에서는이 보여 줍니다 이며를 명시적으로 호출 하는 이전 예제와 기능적 <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> 고 <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>입니다. 인식 논리 단어 "백그라운드" 값을 사용 하는 경우 `true` 인식할 수 있는 의미 체계에 추가 됩니다.  
  
    ```csharp  
    fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background", true));  
    ```  
  
     자세한 내용은 참조에 대 한 설명을 <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29> 고 <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>입니다.  
  
 사용할를 <xref:System.Speech.Recognition.Grammar> 인식에서 모든 <xref:System.Speech.Recognition.SemanticResultValue> 인스턴스 중 하나를 사용 하 여 연결 해야 합니다 <xref:System.Speech.Recognition.SemanticValue> 에서 사용 되는 개체 <xref:System.Speech.Recognition.Grammar>. 사용 하 여 의미 체계 키를 연결 하 여 이렇게는 <xref:System.Speech.Recognition.SemanticResultValue>합니다.  
  
 의미 체계 키를 명시적으로 연결할 수는 <xref:System.Speech.Recognition.SemanticResultValue>를 사용 하 여를 <xref:System.Speech.Recognition.SemanticResultKey> 개체입니다.  <xref:System.Speech.Recognition.SemanticResultValue> 인스턴스 키를 명시적으로 연결 된 기본 루트 키에 연결 된 <xref:System.Speech.Recognition.SemanticValue>합니다.  
  
 후는 <xref:System.Speech.Recognition.SemanticResultValue> 설정 하는 데 사용 된 합니다 <xref:System.Speech.Recognition.SemanticValue.Value%2A>기본 루트 키를 사용 하 여 또는 특정 태그가 지정 됩니다 여부와 관계 없이 <xref:System.Speech.Recognition.SemanticResultKey>, 해당 값을 수정 하지 않아야 또는 인식 작업 하는 동안 예외가 발생 합니다.  
  
 다음 예제에서는 설정 하 고 루트를 수정 하기 때문에 예외가 발생 되는지 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 의 <xref:System.Speech.Recognition.Grammar>합니다.  
  
```csharp  
GrammarBuilder gb=new GrammarBuilder();  
gb.Append(new SemanticResultValue("One"));  
gb.Append(new SemanticResultValue("Two"));  
```  
  
 반면에 다음 예제 코드에서는 허용 됩니다. 여러 인스턴스를 정의 하지만 <xref:System.Speech.Recognition.SemanticResultValue>에 포함 된를 <xref:System.Speech.Recognition.Choices> 개체 및 키의 값을 설정 하려면 사용한 적이 하나만 `bgOrfgText`합니다.  
  
```csharp  
Choices fgOrbgChoice = new Choices();  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background"));  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground"));  
SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgText", fgOrbgChoice);  
```
  
## Examples  
 다음 예제에서는 반환 된 <xref:System.Speech.Recognition.Grammar> 명령 집합/변경/Alter 전경/배경... "를 인식 하는 [색 목록] "입니다.  <xref:System.Speech.Recognition.SemanticResultValue> 및 <xref:System.Speech.Recognition.SemanticResultKey> 인스턴스 (함께에서 <xref:System.Speech.Recognition.Choices> 고 <xref:System.Speech.Recognition.GrammarBuilder> 개체) 인식을 구문 분석할 수 있는 의미 체계를 정의 하는 데 사용 됩니다.  구문 분석 된 의미 체계는 색 요청한 및 포그라운드 또는 백그라운드 인지 수정할 결정 됩니다.  
  
```  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(new SemanticResultValue(introGB, String.Format("Command: {0}", introString)));  
  }    
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                       cmdIntro,  
                       new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)">SemanticResultKey를 사용 하 여는 SemanticResultValue 추출</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.SemanticResultValue" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `SemanticResultValue` 생성자 지정을 지원를 <xref:System.Object> 을 기본 데이터 형식 인스턴스와 `bool`, `int`를 `float`, 또는 `string`합니다.  
  
 생성자를 만들 수는 `SemanticResultValue` 두 상황 중 인스턴스:  
  
-   합니다 `SemanticResultValue` 사용 하는 경우 인스턴스 문법 요소를 사용 하 여 명시적으로 연결 되어야 합니다는 <xref:System.Speech.Recognition.GrammarBuilder> 생성 하는 <xref:System.Speech.Recognition.Grammar>합니다.  
  
-   합니다 `SemanticResultValue` 이미 연결 된 문자열 값 구 또는 <xref:System.Speech.Recognition.GrammarBuilder> 개체입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><see cref="T:System.Speech.Recognition.SemanticResultValue" />에 의해 관리된 값입니다. 형식 <see langword="bool" />, <see langword="int" />, <see langword="float" /> 또는 <see langword="string" />이어야 합니다.</param>
        <summary><see cref="T:System.Speech.Recognition.SemanticResultValue" /> 클래스의 새 인스턴스를 초기화하고 의미 값을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SemanticResultValue` 이 반환한 생성자 특정 문법 요소와 연결 되어 있지 않습니다. 인스턴스를 사용 하 여 명시적 연결을 만들 수 있어야 합니다 `SemanticResultValue` 와 함께에서 <xref:System.Speech.Recognition.GrammarBuilder>입니다.  
  
 예를 들어 경우 아래 코드 조각에에서는 <xref:System.Speech.Recognition.Grammar> 이 사용 하 여 생성 <xref:System.Speech.Recognition.GrammarBuilder> 인스턴스 값을 "백그라운드" 단어를 인식 `true` 인식 된 구와 의미 체계에 설정 됩니다.  
  
```csharp  
GrammarBuilder backgroundGB=new GrammarBuilder("background");  
backgroundGB.Append(new SemanticResultValue(true));  
```  
  
   
  
## Examples  
 다음 예제에서는 반환 된 <xref:System.Speech.Recognition.Grammar> 명령 집합/변경/Alter 전경/배경... "를 인식 하는 [색 목록] "입니다. <xref:System.Speech.Recognition.SemanticResultValue> 및 <xref:System.Speech.Recognition.SemanticResultKey> 인스턴스 (함께에서 <xref:System.Speech.Recognition.Choices> 고 <xref:System.Speech.Recognition.GrammarBuilder> 개체) 인식을 구문 분석할 수 있는 의미 체계를 정의 하는 데 사용 됩니다.  구문 분석 된 의미 체계는 색 요청한 및 포그라운드 또는 백그라운드 인지 수정할 결정 됩니다.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
        cmdIntro,   
        new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Speech::Recognition::GrammarBuilder ^ builder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : System.Speech.Recognition.GrammarBuilder * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (builder, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="builder">인식에 사용할 수 있는 문법 구성 요소</param>
        <param name="value"><see cref="T:System.Speech.Recognition.SemanticResultValue" />에 의해 관리된 값입니다. 형식 <see langword="bool" />, <see langword="int" />, <see langword="float" /> 또는 <see langword="string" />이어야 합니다.</param>
        <summary><see cref="T:System.Speech.Recognition.SemanticResultValue" /> 클래스의 새 인스턴스를 초기화하고 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 개체를 사용하여 의미 값을 연결합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 문법 요소를 지정 하면 <xref:System.Speech.Recognition.GrammarBuilder> 인식 논리는 `value` 인식할 수 있는 출력의 의미 체계에 설정 됩니다.  
  
 경우 아래 코드 조각에서 인식 논리를 사용 하 여 생성 합니다 <xref:System.Speech.Recognition.GrammarBuilder> 인스턴스 (`myGb`) 사용 합니다 <xref:System.Speech.Recognition.Choices> 개체 (`myChoice`) 식별 값을 입력 합니다 `true` 인식할 수 있는 의미 체계에 추가 됩니다.  
  
```csharp  
myGb.Append(new SemanticResultValue(myChoice, true);  
```  
  
 로 <xref:System.Speech.Recognition.GrammarBuilder> 에 대 한 암시적 변환을 지 원하는 <xref:System.Speech.Recognition.Choices>, `SemanticResultValue`, 및 <xref:System.Speech.Recognition.SemanticResultKey>,이 생성자는 해당 개체도 사용할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 반환 된 <xref:System.Speech.Recognition.Grammar> 명령 집합/변경/Alter 전경/배경... "를 인식 하는 [색 목록] "입니다. <xref:System.Speech.Recognition.SemanticResultValue> 및 <xref:System.Speech.Recognition.SemanticResultKey> 인스턴스 (함께에서 <xref:System.Speech.Recognition.Choices> 고 <xref:System.Speech.Recognition.GrammarBuilder> 개체) 인식을 구문 분석할 수 있는 의미 체계를 정의 하는 데 사용 됩니다.  구문 분석 된 의미 체계는 색 요청한 및 포그라운드 또는 백그라운드 인지 수정할 결정 됩니다.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
    }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                      cmdIntro,  
                      new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (string phrase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::String ^ phrase, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : string * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (phrase, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="phrase">인식에 사용할 수 있는 구</param>
        <param name="value"><see cref="T:System.Speech.Recognition.SemanticResultValue" />에 의해 관리된 값입니다. 형식 <see langword="bool" />, <see langword="int" />, <see langword="float" /> 또는 <see langword="string" />이어야 합니다.</param>
        <summary><see cref="T:System.Speech.Recognition.SemanticResultValue" /> 클래스의 새 인스턴스를 초기화하고 <see cref="T:System.String" /> 개체를 사용하여 의미 값을 연결합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 문자열을 지정 하 여 `phrase` 인식 논리는 `value` 인식할 수 있는 출력의 의미 체계에 설정 됩니다.  
  
 인식 논리를 사용 하 여 생성 하는 경우 다음 코드 조각에는 <xref:System.Speech.Recognition.GrammarBuilder> 인스턴스 (`myGb`) "담보 대출 내" 문자열을 사용 하 여 식별 값을 입력 합니다 `true` 인식할 수 있는 의미 체계에 추가 됩니다.  
  
```csharp  
myGb.Append(new SemanticResultValue("my mortgage", true);  
```  
  
   
  
## Examples  
 다음 예제에서는 반환 된 <xref:System.Speech.Recognition.Grammar> 명령 집합/변경/Alter 전경/배경... "를 인식 하는 [색 목록] "입니다. <xref:System.Speech.Recognition.SemanticResultValue> 및 <xref:System.Speech.Recognition.SemanticResultKey> 인스턴스 (함께에서 <xref:System.Speech.Recognition.Choices> 고 <xref:System.Speech.Recognition.GrammarBuilder> 개체) 인식을 구문 분석할 수 있는 의미 체계를 정의 하는 데 사용 됩니다.  구문 분석 된 의미 체계는 색 요청한 및 포그라운드 또는 백그라운드 인지 수정할 결정 됩니다.  
  
```  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }  
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(cmdIntro,  
                         new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultValue.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 인스턴스에서 생성된 <see cref="T:System.Speech.Recognition.SemanticResultValue" />의 인스턴스를 반환합니다.</summary>
        <returns>현재 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 인스턴스에서 생성된 <see cref="T:System.Speech.Recognition.SemanticResultValue" />의 인스턴스를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> 사용 하는 합니다 <xref:System.Speech.Recognition.GrammarBuilder> 사용 하는 생성자를 <xref:System.Speech.Recognition.SemanticResultValue> 인수로 (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>).  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Speech.Recognition.Grammar> 배경색을 변경 하는 명령은 지 원하는 개체입니다.  
  
 <xref:System.Speech.Recognition.Choices> 개체 (`colorChoice`)를 사용 하 여 채워집니다 배경색에 대 한 옵션 목록을 포함 하는 <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> 메서드 <xref:System.Speech.Recognition.GrammarBuilder> 에서 가져온 인스턴스를 <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> 메서드를 `SemanticResultValue` 생성 된 개체 색 문자열입니다.  
  
 A <xref:System.Speech.Recognition.GrammarBuilder> 를 호출 하 여 가져옵니다 <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> 에 <xref:System.Speech.Recognition.SemanticResultKey> 의미 체계 선택 항목을 키로 사용 되는 인스턴스를 `colorChoice` 인스턴스.  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RBG.  
  // Choices constructors do not take a SemanticResultValue parameter, so  
  // cast SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    SemanticResultValue colorValue =   
        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
    colorChoice.Add(colorValue.ToGrammarBuilder());  
  }  
  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with an introductory phrase and the  
  // color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the final grammar, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  
  grammar.Name = "Set Background Color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>