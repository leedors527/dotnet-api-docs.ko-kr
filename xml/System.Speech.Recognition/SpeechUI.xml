<Type Name="SpeechUI" FullName="System.Speech.Recognition.SpeechUI">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e1f02302a0595556843ce02485a48eb3b3665db7" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52225937" /></Metadata><TypeSignature Language="C#" Value="public class SpeechUI" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechUI extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechUI" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechUI" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechUI" />
  <TypeSignature Language="F#" Value="type SpeechUI = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>음성 플랫폼 사용자 인터페이스에 표시되는 인식 작업에 대한 텍스트 및 상태 정보를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 멤버는 <xref:System.Speech.Recognition.SpeechUI> 클래스 음성 인식 사용자 인터페이스를 통해 최종 사용자에 게 정확한 피드백을 나타내는 데 사용할 수 있습니다. 애플리케이션 임의의 텍스트와이 클래스를 사용 하 여 성공/실패 정보를 반환할 수 있습니다.  
  
   
  
## Examples  
 다음 예제는에 대 한 처리기를 <xref:System.Speech.Recognition.Grammar.SpeechRecognized> 이벤트입니다. 이 이벤트에서 사용 되는 <xref:System.Speech.Recognition.Grammar> "암호를..." 형태로 암호 입력을 처리 하도록 디자인 된 합니다.  
  
 암호가 없거나 유효 하지 않은 경우 <xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> 음성 플랫폼 사용자 인터페이스에 오류 정보를 보냅니다.  
  
```  
  
grammar.SpeechRecognized +=   
delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
{  
  SemanticValue semantics = eventArgs.Result.Semantics;  
  RecognitionResult result=eventArgs.Result;  
  
  if (!semantics.ContainsKey("Password"))   
  {  
    SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
  }  
  else   
  {  
    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
    MemoryStream pwdMemoryStream = new MemoryStream();  
    pwdAudio.WriteToAudioStream(pwdMemoryStream);  
    if (!IsValidPwd(pwdMemoryStream))   
    {  
      string badPwd = System.IO.Path.GetTempPath() +   
              "BadPwd" + (new Random()).Next().ToString() + ".wav";  
      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
      pwdAudio.WriteToWaveStream(waveStream);  
      waveStream.Flush();  
      waveStream.Close();  
      SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
    }  
  }  
};  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SendTextFeedback">
      <MemberSignature Language="C#" Value="public static bool SendTextFeedback (System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SendTextFeedback(class System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SendTextFeedback (result As RecognitionResult, feedback As String, isSuccessfulAction As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SendTextFeedback(System::Speech::Recognition::RecognitionResult ^ result, System::String ^ feedback, bool isSuccessfulAction);" />
      <MemberSignature Language="F#" Value="static member SendTextFeedback : System.Speech.Recognition.RecognitionResult * string * bool -&gt; bool" Usage="System.Speech.Recognition.SpeechUI.SendTextFeedback (result, feedback, isSuccessfulAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.Speech.Recognition.RecognitionResult" />
        <Parameter Name="feedback" Type="System.String" />
        <Parameter Name="isSuccessfulAction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="result">유효한 <see cref="T:System.Speech.Recognition.RecognitionResult" /> 인스턴스입니다.</param>
        <param name="feedback"><see cref="T:System.String" /><paramref name="result" />을 생성한 인식 작업에 대한 주석을 포함하는 <see cref="T:System.Speech.Recognition.RecognitionResult" /></param>
        <param name="isSuccessfulAction">애플리케이션이 인식 작업을 성공으로 간주하는지 여부를 나타내는 <see langword="bool" />입니다.</param>
        <summary>인식 작업 상태에 대해 음성 플랫폼 사용자 인터페이스로 상태 및 설명 텍스트를 보냅니다.</summary>
        <returns>메서드(<paramref name="Feedback" /> 및 <paramref name="isSuccessfulAction" />)에 제공된 정보가 음성 플랫폼 사용자 인터페이스에서 사용 가능하도록 설정된 경우 <see langword="true" />이고, 설정에 실패한 경우 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> 인식 작업에 실패 했음을 나타내는 특정 조건에 맞게 입력이 인식 하는 경우에 사용할 수 있습니다.  
  
 예로 인증 정보의 보안 코드는 입력 된 완벽 하 게 사용할 수 있지만 확인 정보가 잘못 되었습니다.  
  
   
  
## Examples  
 다음 예제는에 대 한 처리기를 <xref:System.Speech.Recognition.Grammar.SpeechRecognized> 이벤트입니다. 이 이벤트에서 사용 되는 <xref:System.Speech.Recognition.Grammar> 폼의 암호 입력을 처리 하도록 디자인 된, "암호를..."입니다.  
  
 암호가 없거나 유효 하지 않은 경우 **SendTextFeedback** 음성 플랫폼 사용자 인터페이스에 오류 정보를 보내는 데 사용 됩니다.  
  
```  
  
grammar.SpeechRecognized +=  
delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
{  
  SemanticValue semantics = eventArgs.Result.Semantics;  
  RecognitionResult result=eventArgs.Result;  
  
  if (!semantics.ContainsKey("Password"))   
  {  
    SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
  }  
  else  
  {  
    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
              result.Words[3],  
              result.Words[result.Words.Count - 1]);  
    MemoryStream pwdMemoryStream = new MemoryStream();  
    pwdAudio.WriteToAudioStream(pwdMemoryStream);  
    if (!IsValidPwd(pwdMemoryStream))   
    {  
      string badPwd = System.IO.Path.GetTempPath() + "BadPwd" +   
               (new Random()).Next().ToString() + ".wav";  
      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
      pwdAudio.WriteToWaveStream(waveStream);  
      waveStream.Flush();  
      waveStream.Close();  
      SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
    }  
  }  
};  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>