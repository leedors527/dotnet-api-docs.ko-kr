<Type Name="JsonWriterOptions" FullName="System.Text.Json.JsonWriterOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cdf62fb82c2065e506a1cdde9519dcfdd4051504" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65006683" /></Metadata><TypeSignature Language="C#" Value="public struct JsonWriterOptions" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit JsonWriterOptions extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonWriterOptions" />
  <TypeSignature Language="VB.NET" Value="Public Structure JsonWriterOptions" />
  <TypeSignature Language="C++ CLI" Value="public value class JsonWriterOptions" />
  <TypeSignature Language="F#" Value="type JsonWriterOptions = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>사용자가 <see cref="T:System.Text.Json.Utf8JsonWriter" />를 사용하여 JSON을 작성할 때 사용자 지정 동작을 정의할 수 있습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

기본적으로 JSON는 들여쓰기 또는 추가 공백 없이 기록 됩니다. 또한 <xref:System.Text.Json.Utf8JsonWriter> 사용자 구조적으로 잘못 된 JSON에 쓰려고 시도 하는 경우 예외를 throw 합니다.

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Indented">
      <MemberSignature Language="C#" Value="public bool Indented { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indented" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.Indented" />
      <MemberSignature Language="VB.NET" Value="Public Property Indented As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indented { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indented : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.Indented" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Text.Json.Utf8JsonWriter" />가 출력 JSON의 형식을 지정해야 하는지를 나타내는 값을 가져오거나 설정합니다. 여기에는 중첩된 JSON 토큰 들여쓰기, 새 줄 추가 및 속성 이름과 값 사이 공백 추가가 포함됩니다.</summary>
        <value><see langword="true" /> JSON 출력; 서식을 지정 하려면 <see langword="false" /> 추가 공백 없이 작성 합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipValidation">
      <MemberSignature Language="C#" Value="public bool SkipValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipValidation" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SkipValidation : bool with get, set" Usage="System.Text.Json.JsonWriterOptions.SkipValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Text.Json.Utf8JsonWriter" />가 구조 유효성 검사를 건너뛰고 사용자가 잘못된 JSON을 작성하도록 허용해야 하는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see langword="true" /> 구조 유효성 검사를 건너뛰고; 잘못 된 JSON을 허용 하려면 <see langword="false" /> throw 하는 <see cref="T:System.InvalidOperationException" /> 에 잘못 된 JSON을 작성 하려고 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

쓸 JSON 올바른 것으로 알려져 있는 경우 유효성 검사를 건너뛰고 다음 (이 속성을 설정 하 여 `true`) 성능을 개선할 수 있습니다.
기록기는 throw 되는 잘못 된 JSON의 예 (때 `SkipValidation` 로 설정 되어 `false`) 경우 속성 이름이 없는 JSON 개체 내에서 값을 씁니다. 

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>