<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6bf8bd7fdfd80ccc415cee28e69de81768b96942" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541647" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonWriter" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonWriter extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonWriter" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonWriter" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>캐시되지 않은 정방향 전용 UTF-8 인코딩 JSON 텍스트를 작성할 수 있는 고성능 API를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

`Utf8JsonWriter` 쓰기 캐싱 없음 및 기본적으로 순차적으로 텍스트를 준수 하는 [JSON RFC](https://tools.ietf.org/html/rfc8259)를 제외 하 고 메모를 작성 합니다.

유효성 검사 되 면 잘못 된 JSON에 쓰려고 시도 하는 메서드를 사용 throw를 <xref:System.InvalidOperationException> 상황에 맞는 오류 메시지를 사용 합니다.
이 형식은 ref struct 이므로 직접 없으므로 비동기 합니다. 그러나 일부 데이터를 작성 하 고 청크에서 쓰기를 계속할 수 재입력에 대 한 지원을 제공지 않습니다.
공백 및 들여쓰기를 사용 하 여 출력 형식을 지정 하거나 유효성 검사를 건너뛸 수 일의 인스턴스를 만듭니다 <xref:System.Text.Json.JsonWriterState> 작성기에 전달 합니다.

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterState state = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional state As JsonWriterState = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterState -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="state" Type="System.Text.Json.JsonWriterState" />
      </Parameters>
      <Docs>
        <param name="bufferWriter">JSON 텍스트를 작성하기 위한 대상으로 사용된 <see cref="T:System.Buffers.IBufferWriter`1" />의 인스턴스입니다.</param>
        <param name="state">판독기 상태를 포함하는 구조체입니다. 생성자를 첫 번째로 호출하면 기본 상태를 반영해야 합니다. 그렇지 않으면, <see cref="T:System.Text.Json.Utf8JsonWriter" />의 이전 인스턴스로부터 상태를 캡처하고 다시 전달해야 합니다.</param>
        <summary>지정된 <see cref="T:System.Text.Json.Utf8JsonWriter" />를 사용하여 <paramref name="bufferWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

이 형식은 ref struct 이므로 스택 전용 형식이, 및 ref 구조체의 모든 제한 사항에 적용 합니다.
이 생성자를 허용 하는 이유는 이유는 <xref:System.Text.Json.JsonWriterState>합니다.

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="bufferWriter" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Text.Json.Utf8JsonWriter" />라는 현재 인스턴스의 경우 지금까지 <see cref="T:System.Text.Json.Utf8JsonWriter" />에 의해 출력에 커밋된 바이트의 총 수를 가져옵니다.
<see cref="T:System.Buffers.IBufferWriter`1" />이 얼마나 발전했는지 나타냅니다.</summary>
        <value>출력에 커밋된 총 바이트 수를 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 지금 합니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesWritten">
      <MemberSignature Language="C#" Value="public long BytesWritten { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesWritten" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesWritten As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesWritten { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesWritten : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Text.Json.Utf8JsonWriter" />라는 현재 인스턴스의 경우 지금까지 <see cref="T:System.Text.Json.Utf8JsonWriter" />에 의해 작성된 바이트의 총 수를 가져옵니다.
따라서 이미 커밋된 내용 외에도 작성된 데이터가 포함됩니다.</summary>
        <value>총 쓴 바이트는 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 지금 합니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 토큰의 깊이를 가져옵니다.</summary>
        <value>현재 토큰의 깊이입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

`CurrentDepth` 속성 재귀 깊이 중첩 된 개체를 추적 / 지금까지 작성 된 JSON 텍스트 내에서 배열입니다.

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (Optional isFinalBlock As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.Flush : bool -&gt; unit" Usage="utf8JsonWriter.Flush isFinalBlock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isFinalBlock">더 이상 데이터를 작성하지 않음을 나타내려면 <see langword="true" />입니다. 그렇지 않으면, <see langword="false" />입니다. 더 이상 수행할 데이터가 없는 경우 지금까지 작성된 JSON이 구조적으로 유효한지 유효성을 검사하는 데 사용됩니다.</param>
        <summary>지금까지 작성된 내용에 따라 기본 <see cref="T:System.Buffers.IBufferWriter`1" />로 이동합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">불완전한 JSON을 작성하면 <paramref name="isFinalBlock" />이 <see langword="true" />입니다. 예를 들어 열기 개체 또는 배열을 종료하는 경우입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterState GetCurrentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonWriterState GetCurrentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.GetCurrentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState () As JsonWriterState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonWriterState GetCurrentState();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : unit -&gt; System.Text.Json.JsonWriterState" Usage="utf8JsonWriter.GetCurrentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>호출자에 의해 캡처되고 추가 데이터로 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 생성자에 다시 전달되어야 하는 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 상태의 현재 스냅숏을 반환합니다.</summary>
        <returns><see cref="T:System.Text.Json.Utf8JsonWriter" /> 상태의 현재 스냅숏입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

와 달리 합니다 <xref:System.Text.Json.Utf8JsonWriter>, ref 구조체는, 상태 async/await 경계를 넘어 감당할 수 있습니다 및의 새 인스턴스를 계속 하기 전에 비동기식으로 더 많은 데이터의 읽기를 지원 하기 위해이 형식 필요 하므로 <xref:System.Text.Json.Utf8JsonWriter>합니다.

새로 만들기에 대 한 상태를 가져오는 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 첫 번째 작성 된 데이터 일관성 없는 상태로 인해 커밋하지 않고 구조체입니다. 호출 <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> 현재 상태를 가져오기 전에 합니다.  

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">JSON 데이터가 작성되고 버퍼링되었지만 아직 <see cref="T:System.Buffers.IBufferWriter`1" />에 플러시되지 않았습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 리터럴 "true" 또는 "false"로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Boolean" /> 값(JSON 리터럴 "true" 또는 "false")을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 리터럴 "true" 또는 "false"로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Boolean" /> 값(JSON 리터럴 "true" 또는 "false")을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 리터럴 "true" 또는 "false"로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Boolean" /> 값(JSON 리터럴 "true" 또는 "false")을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">JSON 배열의 요소인 JSON 리터럴 "true" 또는 "false"로 작성될 값입니다.</param>
        <summary>JSON 배열의 요소로 <see cref="T:System.Boolean" /> 값(JSON 리터럴 "true" 또는 "false")을 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value">JSON 주석으로 작성될 UTF-8 인코딩 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며 기본값은 <see langword="true" />입니다.</param>
        <summary><c>/*..*/</c> 내에서 JSON 주석으로 UTF-8 텍스트 값을 씁니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8Value" />이 너무 큰 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">UTF-8 트랜스코딩 JSON 주석으로 작성될 UTF-16 인코딩 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며 기본값은 <see langword="true" />입니다.</param>
        <summary><c>/*..*/</c> 내에서 JSON 주석으로 UTF-16 텍스트 값을 씁니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" />이 너무 큰 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">UTF-8 트랜스코딩 JSON 주석으로 작성될 UTF-16 인코딩 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며 기본값은 <see langword="true" />입니다.</param>
        <summary><c>/*..*/</c> 내에서 JSON 주석으로 문자열 텍스트 값을 씁니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" />이 너무 큰 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>JSON 배열의 끝 부분을 씁니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>JSON 개체의 끝을 씁니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 JSON 리터럴 "null"을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성할 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 JSON 리터럴 "null"을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 JSON 리터럴 "null"을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>JSON 배열의 요소로서 JSON 리터럴 "null"을 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Decimal" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Decimal" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Double" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Double" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Int32" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Int32" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G'). 예를 들어 32767입니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Int64" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Int64" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G'). 예를 들어 32767입니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Single" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Single" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.UInt32" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.UInt32" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G'). 예를 들어 32767입니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.UInt64" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.UInt64" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G'). 예를 들어 32767입니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Decimal" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Decimal" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Double" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Double" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Int32" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Int32" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G'). 예를 들어 32767입니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Int64" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Int64" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G'). 예를 들어 32767입니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Single" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Single" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.UInt32" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.UInt32" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G'). 예를 들어 32767입니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.UInt64" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.UInt64" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G'). 예를 들어 32767입니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Decimal" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Decimal" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Double" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Double" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Int32" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Int32" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G'). 예를 들어 32767입니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Int64" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Int64" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G'). 예를 들어 32767입니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Single" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Single" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.UInt32" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.UInt32" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G'). 예를 들어 32767입니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 숫자로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.UInt64" /> 값(JSON 숫자)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.UInt64" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G'). 예를 들어 32767입니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
        <summary>JSON 배열의 요소로 <see cref="T:System.Decimal" /> 값(JSON 숫자)을 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Decimal" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</remarks>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
        <summary>JSON 배열의 요소로 <see cref="T:System.Double" /> 값(JSON 숫자)을 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Double" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</remarks>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
        <summary>JSON 배열의 요소로 <see cref="T:System.Int32" /> 값(JSON 숫자)을 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Int32" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G'). 예를 들어 32767입니다.</remarks>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
        <summary>JSON 배열의 요소로 <see cref="T:System.Int64" /> 값(JSON 숫자)을 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Int64" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G'). 예를 들어 32767입니다.</remarks>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
        <summary>JSON 배열의 요소로 <see cref="T:System.Single" /> 값(JSON 숫자)을 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.Single" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G').</remarks>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
        <summary>JSON 배열의 요소로 <see cref="T:System.UInt32" /> 값(JSON 숫자)을 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.UInt32" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G'). 예를 들어 32767입니다.</remarks>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">JSON 배열의 요소인 JSON 숫자로 작성될 값입니다.</param>
        <summary>JSON 배열의 요소로 <see cref="T:System.UInt64" /> 값(JSON 숫자)을 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.UInt64" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, ' G'). 예를 들어 32767입니다.</remarks>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>JSON 배열의 시작 부분을 씁니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1000을 초과한 경우

또는

잘못된 JSON이 작성되는 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 배열의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름을 포함한 JSON 배열의 시작 부분을 키로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1000을 초과한 경우

또는

작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 배열의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름을 포함한 JSON 배열의 시작 부분을 키로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1000을 초과한 경우

또는

작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 배열의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름을 포함한 JSON 배열의 시작 부분을 키로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1000을 초과한 경우

또는

작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>JSON 개체의 시작 부분을 씁니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1000을 초과한 경우

또는

작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름을 포함한 JSON 개체의 시작 부분을 키로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1000을 초과한 경우

또는

작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름을 포함한 JSON 개체의 시작 부분을 키로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1000을 초과한 경우

또는

작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름을 포함한 JSON 개체의 시작 부분을 키로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">JSON의 깊이가 최대 깊이인 1000을 초과한 경우

또는

작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.DateTime" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.DateTime" /> 는 왕복을 사용 하 여 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 합니다. 예를 들어, 2017-06-12T05:30:45.7680000 합니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.DateTimeOffset" /> 는 왕복을 사용 하 여 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 합니다. 예를 들어, 2017-06-12T05:30:45.7680000-07시입니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Guid" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>씁니다 합니다 <see cref="T:System.Guid" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, 했습니다 ')를 폼으로: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn 합니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8PropertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="utf8Value">이름/값 쌍의 일부인 JSON 문자열로 작성될 UTF-8 인코딩 값입니다.</param>
        <param name="escape">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.
값은 항상 이스케이프됩니다.</param>
        <summary>UTF-8 속성 이름 및 UTF-8 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
        <param name="escape">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.
값은 항상 이스케이프됩니다.</param>
        <summary>UTF-8 속성 이름 및 UTF-16 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName">작성될 JSON 개체의 UTF-8 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
        <param name="escape">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.
값은 항상 이스케이프됩니다.</param>
        <summary>UTF-8 속성 이름 및 문자열 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.DateTime" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.DateTime" /> 는 왕복을 사용 하 여 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 합니다. 예를 들어, 2017-06-12T05:30:45.7680000 합니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.DateTimeOffset" /> 는 왕복을 사용 하 여 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 합니다. 예를 들어, 2017-06-12T05:30:45.7680000-07시입니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Guid" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>씁니다 합니다 <see cref="T:System.Guid" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, 했습니다 ')를 폼으로: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn 합니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="utf8Value">이름/값 쌍의 일부인 JSON 문자열로 작성될 UTF-8 인코딩 값입니다.</param>
        <param name="escape">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.
값은 항상 이스케이프됩니다.</param>
        <summary>UTF-16 속성 이름 및 UTF-8 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
        <param name="escape">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.
값은 항상 이스케이프됩니다.</param>
        <summary>UTF-16 속성 이름 및 UTF-16 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
        <param name="escape">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.
값은 항상 이스케이프됩니다.</param>
        <summary>UTF-16 속성 이름 및 문자열 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.DateTime" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.DateTime" /> 는 왕복을 사용 하 여 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 합니다. 예를 들어, 2017-06-12T05:30:45.7680000 합니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.DateTimeOffset" /> 는 왕복을 사용 하 여 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 합니다. 예를 들어, 2017-06-12T05:30:45.7680000-07시입니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 JSON 문자열로 작성될 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며, 기본값은 <see langword="true" />입니다.</param>
        <summary>속성 이름 및 <see cref="T:System.Guid" /> 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>씁니다 합니다 <see cref="T:System.Guid" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, 했습니다 ')를 폼으로: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn 합니다.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="propertyName" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="utf8Value">이름/값 쌍의 일부인 JSON 문자열로 작성될 UTF-8 인코딩 값입니다.</param>
        <param name="escape">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.
값은 항상 이스케이프됩니다.</param>
        <summary>속성 이름 및 UTF-8 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
        <param name="escape">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.
값은 항상 이스케이프됩니다.</param>
        <summary>속성 이름 및 UTF-16 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">UTF-8으로 트랜스코딩되고 작성될 JSON 개체의 UTF-16 인코딩 속성 이름입니다.</param>
        <param name="value">이름/값 쌍의 일부인 UTF-8 인코딩 JSON 문자열로 작성될 UTF-16 인코딩 값입니다.</param>
        <param name="escape">false로 설정되면 작성기는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정합니다.
값은 항상 이스케이프됩니다.</param>
        <summary>속성 이름 및 문자열 텍스트 값(JSON 문자열)을 JSON 개체 이름/값 쌍의 일부로 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">지정된 속성 이름 또는 값이 너무 큰 경우 throw됩니다.</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">JSON 배열의 요소인 JSON 문자열로 작성될 값입니다.</param>
        <summary>JSON 배열의 요소로 <see cref="T:System.DateTime" /> 값(JSON 문자열)을 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.DateTime" /> 는 왕복을 사용 하 여 (' o ') <see cref="T:System.Buffers.StandardFormat" /> 합니다. 예를 들어, 2017-06-12T05:30:45.7680000 합니다.</remarks>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">JSON 배열의 요소인 JSON 문자열로 작성될 값입니다.</param>
        <summary>JSON 배열의 요소로 <see cref="T:System.DateTimeOffset" /> 값(JSON 문자열)을 작성합니다.</summary>
        <remarks>기록 된 <see cref="T:System.DateTimeOffset" /> 는 왕복을 사용 하 여 (' o ') <see cref="T:System.Buffers.StandardFormat" />합니다. 예를 들어, 2017-06-12T05:30:45.7680000-07시입니다.</remarks>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value">JSON 배열의 요소인 JSON 문자열로 작성될 값입니다.</param>
        <summary>JSON 배열의 요소로 <see cref="T:System.Guid" /> 값(JSON 문자열)을 작성합니다.</summary>
        <remarks>씁니다 합니다 <see cref="T:System.Guid" /> 기본값을 사용 하 여 <see cref="T:System.Buffers.StandardFormat" /> (즉, 했습니다 ')를 폼으로: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn 합니다.</remarks>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value">JSON 배열의 JSON 문자열 요소로 작성될 UTF-8 인코딩 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며 기본값은 <see langword="true" />입니다.</param>
        <summary>JSON 배열의 요소로 UTF-8 텍스트 값(JSON 문자열)을 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="utf8Value" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">JSON 배열의 UTF-8 트랜스코딩 JSON 문자열 요소로 작성될 UTF-16 인코딩 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며 기본값은 <see langword="true" />입니다.</param>
        <summary>JSON 배열의 요소로 UTF-16 텍스트 값(JSON 문자열)을 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">JSON 배열의 UTF-8 트랜스코딩 JSON 문자열 요소로 작성될 UTF-16 인코딩 값입니다.</param>
        <param name="escape">작성기를 나타내는 <see langword="false" />는 속성 이름이 적절히 이스케이프되고 이스케이프 단계를 건너뛴다고 가정해야 합니다. 그렇지 않으면, <see langword="true" />입니다. 선택적 매개 변수이며 기본값은 <see langword="true" />입니다.</param>
        <summary>JSON 배열의 요소로 문자열 텍스트 값(JSON 문자열)을 작성합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" />이 너무 큰 경우</exception>
        <exception cref="T:System.InvalidOperationException">작성될 JSON 데이터가 잘못된 JSON인 경우(유효성 검사를 사용하는 동안)</exception>
      </Docs>
    </Member>
  </Members>
</Type>
