<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4d31d5a034bdb7a78a6dd9e2a78cda160deb9089" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58700228" /></Metadata><TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <TypeSignature Language="F#" Value="type Match = class&#xA;    inherit Group" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>정규식으로 찾은 단일 일치 항목의 결과를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Match> 개체는 변경할 수 없습니다 및 공용 생성자가 없습니다. 인스턴스를 <xref:System.Text.RegularExpressions.Match> 클래스에서 반환 되는 <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> 메서드와 문자열에서 첫 번째 패턴 일치를 나타냅니다. 후속 일치 항목으로 표시 됩니다 <xref:System.Text.RegularExpressions.Match> 반환한 개체는 <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> 메서드. 또한를 <xref:System.Text.RegularExpressions.MatchCollection> 0 개 이상의 구성 된 개체 <xref:System.Text.RegularExpressions.Match> 개체에서 반환 되는 <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> 메서드.  
  
 경우는 <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> 메서드는 입력된 문자열에서 정규식 패턴과 일치에 실패, 빈 반환 <xref:System.Text.RegularExpressions.MatchCollection> 개체입니다. 사용할 수는 `foreach` C#의 구문 또는 `For Each` 컬렉션을 반복 하는 Visual Basic에서 생성 합니다.  
  
 경우는 <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> 메서드는 정규식 패턴 일치를 반환을 <xref:System.Text.RegularExpressions.Match> 과 같은 개체 <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>합니다. 사용할 수는 <xref:System.Text.RegularExpressions.Group.Success%2A> 일치에 성공 했는지 여부를 결정 하는 속성입니다. 다음 예제에서 이에 대해 설명합니다.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 패턴 일치에 성공 하면 합니다 <xref:System.Text.RegularExpressions.Capture.Value%2A> 속성에 일치 하는 부분 문자열을 포함 합니다 <xref:System.Text.RegularExpressions.Capture.Index%2A> 속성은 입력된 문자열에서 일치 하는 부분 문자열의 0부터 시작 위치를 나타냅니다 및 <xref:System.Text.RegularExpressions.Capture.Length%2A> 속성을 나타냅니다는 입력된 문자열에서 일치 하는 부분 문자열의 길이입니다.  
  
 단일 일치 항목에는 캡처링 그룹이 여러 개인 경우 포함 될 수 있으므로 <xref:System.Text.RegularExpressions.Match> 에 <xref:System.Text.RegularExpressions.Match.Groups%2A> 반환 하는 속성을 <xref:System.Text.RegularExpressions.GroupCollection>입니다. <xref:System.Text.RegularExpressions.Match> 인스턴스 자체는 컬렉션의 첫 번째 개체에서 `Match.Groups[0]` (`Match.Groups(0)` Visual Basic에서), 일치 하는 전체를 나타내는입니다. 다음과 같은 방법으로 일치 항목에서 캡처된 그룹에 액세스할 수 있습니다.  
  
-   멤버를 반복할 수는 <xref:System.Text.RegularExpressions.GroupCollection> 사용 하 여 개체를 `foreach` (C#) 또는 `For Each` 구문 (Visual Basic).  
  
-   사용할 수는 <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> 캡처링 그룹 수로 그룹을 검색 하는 속성입니다. 번호가 매겨진된 그룹에에서 있는 정규식의 인스턴스를 호출 하 여 결정할 수 있도록 하는 참고 <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> 메서드.  
  
-   사용할 수는 <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> 캡처링 그룹의 이름으로 그룹을 검색할 속성입니다. 명명 된 그룹에에서 있는 정규식의 인스턴스를 호출 하 여 결정할 수 있도록 하는 참고 <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 정규식 `Console\.Write(Line)?`합니다. 정규식은 다음과 같이 해석됩니다.  
  
|||  
|-|-|  
|콘솔\\합니다. 쓰기|"Console.Write"라는 문자열을 찾습니다. "." 문자와 일치 하는 와일드 카드로 하는 것이 아니라 리터럴 마침표로 해석 됩니다 있도록 문자는 이스케이프 됩니다.|  
|(줄)?|"Line"이라는 0개 또는 1개의 문자열을 찾습니다.|  
  
 **예제 1**  
  
 다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> 입력된 문자열에서 모든 패턴 일치를 검색 하는 방법입니다. 그런 다음 반복 합니다 <xref:System.Text.RegularExpressions.Match> 반환 된 개체 <xref:System.Text.RegularExpressions.MatchCollection> 각 일치 항목에 대 한 정보를 표시 하는 개체입니다.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 **예제 2**  
  
 다음 예제에서는 합니다 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> 및 <xref:System.Text.RegularExpressions.Match.NextMatch%2A> 메서드를 한 번에 하나의 일치 항목을 검색 합니다.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>빈 그룹을 가져옵니다. 일치 항목을 찾지 못하는 모든 경우에는 이 빈 일치 항목이 반환됩니다.</summary>
        <value>빈 일치 항목입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성 일치 하는 성공한 경우 확인 하려면 쓰일 수 없습니다. 대신 사용 합니다 `Match.Success` 속성 (에서 상속 되는 <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Text.RegularExpressions.GroupCollection" Usage="System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>정규식으로 일치시킨 그룹의 컬렉션을 가져옵니다.</summary>
        <value>해당 패턴으로 일치시킨 문자 그룹입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 정규식 패턴은 정규식 패턴의 일부를 괄호로 묶어 정의 되는 하위 식을 포함할 수 있습니다. 이러한 모든 하위 그룹을 형성합니다. <xref:System.Text.RegularExpressions.Match.Groups%2A> 속성은 해당 하위 식이 일치에 대 한 정보에 대 한 액세스를 제공 합니다. 예를 들어, 정규식 패턴 `(\d{3})-(\d{3}-\d{4})`, 두 개의 하위 식에 North American 전화 번호와 일치 하는 합니다. 첫 번째 전화 번호의 처음 세 자리를 작성 하는 영역 코드를 이루어져 있습니다. 이 그룹은 정규식의 첫 번째 부분에 의해 캡처되지 `(\d{3})`합니다. 전화 번호의 마지막 7 자리를 작성 하는 개별 전화 번호의 두 번째 구성 됩니다. 이 그룹은 정규식의 두 번째 부분에 의해 캡처되지 `(\d{3}-\d{4})`합니다. 이 두 그룹에서 검색할 수 있습니다 합니다 <xref:System.Text.RegularExpressions.GroupCollection> 에서 반환 되는 개체는 <xref:System.Text.RegularExpressions.Match.Groups%2A> 속성을 다음 예제와 같이 합니다.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  
  
 합니다 <xref:System.Text.RegularExpressions.GroupCollection> 에서 반환 된 개체는 <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> 속성은 항상 하나 이상의 구성원이 있는 0부터 시작 하는 컬렉션 개체입니다. 정규식 엔진이 특정 입력된 문자열에서 일치 항목을 찾을 수 없는 경우는 <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> 단일 속성 <xref:System.Text.RegularExpressions.Group> 개체 (인덱스 0에 있는 개체)로 설정 되어 `false` 고 <xref:System.Text.RegularExpressions.Group> 개체의 <xref:System.Text.RegularExpressions.Capture.Value%2A>속성이 <xref:System.String.Empty?displayProperty=nameWithType>합니다. 정규식 엔진이 일치의 첫 번째 요소를 찾을 수 합니다 <xref:System.Text.RegularExpressions.GroupCollection> 에서 반환 된 개체 (인덱스 0에 있는 요소)는 <xref:System.Text.RegularExpressions.Match.Groups%2A> 속성 전체 정규식 패턴과 일치 하는 문자열을 포함 합니다. 각 후속 요소 인덱스 하나에서 상향식으로 나타냅니다는 캡처된 그룹을 정규식 캡처링 그룹을 포함 하는 경우. 자세한 내용은 "그룹화 구문 및 정규식 개체" 섹션을 참조 합니다 [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) 문서.  
  
   
  
## Examples  
 다음 예제에서는 샘플 문자열을 정규식 패턴과 일치 시 키 려 합니다. 이 예제에서는 사용 된 <xref:System.Text.RegularExpressions.Match.Groups%2A> 콘솔에 표시 하기 위해 일치 항목으로 검색 되는 정보를 저장 하는 속성.  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberSignature Language="F#" Value="member this.NextMatch : unit -&gt; System.Text.RegularExpressions.Match" Usage="match.NextMatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>마지막 일치 항목이 끝나는 위치(마지막으로 일치한 문자 다음 문자)에서 시작하여 다음 일치 항목에 대한 결과와 함께 새로운 <see cref="T:System.Text.RegularExpressions.Match" /> 개체를 반환합니다.</summary>
        <returns>다음 정규식 일치 항목입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 호출 비슷합니다 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> 다시 전달 (`Index+Length`)로 새 위치를 시작 합니다.  
  
> [!NOTE]
>  이 메서드는 현재 인스턴스를 수정 하지 않습니다. 대신에 새 반환 <xref:System.Text.RegularExpressions.Match> 다음 일치 항목에 대 한 정보를 포함 하는 개체입니다.  
  
 Throw 할 수 있습니다 다음 일치 항목을 검색 하는 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 경우 일치 작업에 대 한 제한 시간 값을 적용 하 고 해당 시간 제한 간격을 초과 하는 다음 일치 항목을 찾으려고 시도 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Text.RegularExpressions.Match.NextMatch%2A> 정규식을 캡처하려면 메서드가 첫 번째 일치 외 일치 합니다.  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">시간이 초과되었습니다.</exception>
        <block subset="none" type="usage"><para>일치 시도 호출 하 여 반복 되는 경우는 <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> 메서드를 정규식 엔진이 제공 빈 일치 항목 특별 하 게 처리 합니다. 일반적으로 <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> 이전 일치 하는 중단 될를 정확 하 게 하 여 다음 일치 항목에 대 한 검색을 시작 합니다. 그러나 빈 일치 항목 후는 <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> 메서드 한 글자씩 일치 하는 다음을 시도 하기 전에 합니다. 이 동작은 문자열을 통해 정규식 엔진은 진행 되는 것을 보장 합니다. 이 고, 그렇지 빈 일치 항목 앞으로 모든 이동 발생 하지 않은, 때문에 일치 하는 다음 이전 일치 항목을 정확히 동일한 위치에서 시작 및 찾게 동일한 빈 문자열입니다.  
  
다음 예제에서 이에 대해 설명합니다. 정규식 패턴 <c>는 *</c> 문자의 0 개 이상의 항목에 대 한 검색 "abaabb" 문자열에 "a"입니다. 예제의 출력에서 볼 수 있듯이 검색 6 명의 일치 항목을 찾습니다. 첫 번째 일치 시도 찾은 첫 번째 "a"입니다. 첫 번째는 첫 번째 b 전에 종료를 일치 하는 위치에 정확 하 게 하는 두 번째 일치 시작 0 개 "a"을 찾아 빈 문자열을 반환 합니다. 두 번째 일치 하는 빈 문자열을 반환 하기 때문에 세 번째 일치는 정확 하 게 일치 하는 두 번째 끝난 지점에서 시작 되지 않습니다. 대신 문자 "b" 첫 번째 후 나중에 시작 합니다. 세 번째 일치 하는 "a"의 두 항목을 찾아 "aa"를 반환 합니다. 네 번째 일치 시도 앞의 두 번째 "b", 세 번째 일치 하는 종료를 시작 하 고 빈 문자열을 반환 합니다. 다섯 번째 일치 시도 다시 진행 한 문자 "b" 세 번째 전에 시작 되 고 빈 문자열을 반환 합니다. 여섯 번째 일치 하는 마지막 "b" 다음에 시작 하 고 빈 문자열을 다시 반환 합니다.  
  
[! 코드 csharp[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)] [! 코드 vb[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="abstract member Result : string -&gt; string&#xA;override this.Result : string -&gt; string" Usage="match.Result replacement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement">사용할 바꾸기 패턴입니다.</param>
        <summary>지정된 바꾸기 패턴의 확장을 반환합니다.</summary>
        <returns><paramref name="replacement" /> 매개 변수의 확장 버전입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반면 합니다 <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> 메서드는 지정 된 바꾸기 패턴에서 입력된 문자열에 일치 하는 모든 바꿉니다는 <xref:System.Text.RegularExpressions.Match.Result%2A> 메서드는 지정 된 바꾸기 패턴을 사용 하 여 단일 일치 항목을 바꿉니다. 개별 일치에서 작동 하기 때문에 것도 가능 호출 하기 전에 일치 하는 문자열의 처리를 수행 하는 <xref:System.Text.RegularExpressions.Match.Result%2A> 메서드.  
  
 `replacement` 매개 변수는 표준 정규식 바꾸기 패턴입니다. 리터럴 문자 및 정규식 대체를 구성할 수 있습니다. 자세한 내용은 [대체](~/docs/standard/base-types/substitutions-in-regular-expressions.md)를 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 시작 하 고 괄호를 사용 하 여 괄호 식 종료는 하이픈을 대체 합니다.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  
  
 정규식 패턴 `--(.+?)--` 는 다음 테이블과 같이 해석됩니다.  
  
|무늬|설명|  
|-------------|-----------------|  
|`--`|하이픈을 두 개를 찾습니다.|  
|`(.+?)`|모든 문자를 하나 이상 가능한 한 적은 개수로 찾습니다. 이 그룹은 첫 번째 캡처링 그룹입니다.|  
|`--`|하이픈을 두 개를 찾습니다.|  
  
 정규식 패턴과 `--(.+?)--` 게으른 수량자를 사용 하 여 `+?`입니다. 경우 탐욕 적 수량자 `+` 사용한 대신 정규식 엔진은 단일 일치만에서 찾이 입력된 문자열입니다.  
  
 대체 문자열 `($1)` 괄호로 묶인 첫 번째 캡처된 그룹을 사용 하 여 일치 항목을 대체 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="replacement" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.NotSupportedException">이 패턴에 대해 확장이 허용되지 않는 경우</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">대체</related>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Match -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="inner">예상된 일치 항목과 동등한 정규식 일치 항목입니다.</param>
        <summary>여러 스레드 간에 공유하기에 적합하고 제공된 인스턴스와 동등한 <see cref="T:System.Text.RegularExpressions.Match" /> 인스턴스를 반환합니다.</summary>
        <returns>여러 스레드 간에 공유하기에 적합한 정규식 일치 항목입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inner" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
  </Members>
</Type>