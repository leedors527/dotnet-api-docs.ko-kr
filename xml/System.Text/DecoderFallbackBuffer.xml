<Type Name="DecoderFallbackBuffer" FullName="System.Text.DecoderFallbackBuffer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c266f2f408a7bd93db4c1d26db2170aad8f773d6" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58686703" /></Metadata><TypeSignature Language="C#" Value="public abstract class DecoderFallbackBuffer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DecoderFallbackBuffer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.DecoderFallbackBuffer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DecoderFallbackBuffer" />
  <TypeSignature Language="C++ CLI" Value="public ref class DecoderFallbackBuffer abstract" />
  <TypeSignature Language="F#" Value="type DecoderFallbackBuffer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>입력 바이트 시퀀스를 디코드할 수 없을 경우 fallback 처리기가 디코더로 대체 문자열을 반환할 수 있는 버퍼를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인코딩을 유니코드 문자를 인코딩된 바이트 시퀀스로 사이 매핑을 정의합니다. 입력된 바이트 시퀀스를 출력 문자로 변환, 디코딩 작업을 특정 바이트 시퀀스에 대 한 정의 된 매핑이 없는 경우 실패 합니다.  
  
 .NET Framework에는 오류 처리는 변환을 수행할 수 없는 경우 대체 (fallback) 라는 메커니즘을 제공 합니다. 모든 디코더 대체 (fallback) 처리기를 다음 구현 해야 합니다.  
  
-   파생 된 클래스로 표현 되는 디코더 대체 (fallback), 여 <xref:System.Text.DecoderFallback> 클래스입니다.  
  
-   파생 된 형식으로 표현 되는 디코더 대체 (fallback) 버퍼는 <xref:System.Text.DecoderFallbackBuffer> 변환 작업에는 문자열을 반환할 수 있는 클래스입니다.  
  
 대체 변환 오류를 처리 하도록 세 가지 전략을 따르면 됩니다.  
  
-   가장 적합된 한 매핑입니다. 디코더 대체 (fallback) 버퍼는 입력된 바이트 시퀀스에 대 한 근사치를 나타내는 문자열을 반환할 수 있습니다. .NET Framework에 가장 적합된 한 공용 하지 <xref:System.Text.DecoderFallbackBuffer> 구현 합니다.  
  
-   대체 합니다. 디코더 대체 (fallback) 버퍼는 물음표 등의 문자열을 반환할 수 있습니다 ("?")를 나타내는 바이트 시퀀스를 디코딩할 수 없습니다. .NET Framework에는 <xref:System.Text.DecoderReplacementFallback> 및 <xref:System.Text.DecoderReplacementFallbackBuffer> 클래스는 공용 교체 대체 (fallback) 버퍼 구현을 제공 합니다. 생성자는 <xref:System.Text.DecoderReplacementFallback> 클래스 대체 문자열을 정의할 수 있습니다.  
  
-   예외입니다. <xref:System.Text.DecoderFallbackBuffer> 구현을 나타내는 바이트 시퀀스를 디코딩할 수 없는, 디코딩 작업은 종료 예외를 throw 합니다. 이 경우 대체 (fallback) 처리기를 제공 해야 합니다는 <xref:System.Text.DecoderFallbackBuffer> 구현 디코더에 문자열로 반환 하지 않더라도 합니다. .NET Framework에는 <xref:System.Text.DecoderExceptionFallback> 및 <xref:System.Text.DecoderExceptionFallbackBuffer> 클래스를 throw 하는 공용 예외 대체 (fallback) 구현을 제공을 <xref:System.Text.DecoderFallbackException> 바이트 시퀀스를 디코딩할 수 없는 경우.  
  
 버퍼는 <xref:System.Text.DecoderFallbackBuffer> 구현을 반환할 디코더에 대 한 응답으로 디코더 대체 (fallback) 전체 문자열을 나타냅니다. 일반적으로 구현 반환할 디코더가 남은 문자 수를 반환할 다음 문자의 인덱스와 같은 상태 정보를 포함 합니다. 때문에 <xref:System.Text.DecoderFallbackBuffer> 추상 클래스는 최소한 다음 멤버를 구현 하는 파생된 클래스가 필요 합니다.  
  
-   <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> 바이트 시퀀스를 디코딩할 수 없는 때 디코더에 의해 호출 되는 메서드. 디코더 대체 (fallback) 버퍼 구현에 두 가지 정보를 전달 합니다: 디코딩할 수 없는 바이트를 포함 하는 배열 및 첫 번째 입력된 바이트 배열의 바이트의 인덱스입니다. 디코더 대체 (fallback) 예외 처리기에서 예외는이 메서드에서 throw 됩니다. 메서드가 반환 하는 고, 그렇지 `true` 대체 (fallback)를 제공 하는 경우 또는 `false` 그렇지 않은 경우.  
  
-   합니다 <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> 경우 디코더에 의해 반복적으로 호출 되는 메서드를 <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> 메서드가 반환 되는 `true`합니다. 연속 호출에서 처리기는 해당 버퍼의 각 문자를 반환 해야 합니다. 모든 문자를 반환 하면 u+0000을 반환 합니다. 예외 대체 (fallback) 처리기는 항상 u+0000을 반환합니다.  
  
-   <xref:System.Text.DecoderFallbackBuffer.MovePrevious%2A> 메서드를 버퍼에서 이전 위치로 마우스 포인터를 이동 하려고 하 고 이동의 성공 여부를 나타냅니다. 예외 처리기를 항상 반환 `false`합니다.  
  
-   <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> 속성 디코더의 반환할 남은 문자 수를 나타냅니다. 예외 대체 (fallback) 처리기는 항상 0을 반환합니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.DecoderFallback" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md">.NET Framework의 문자 인코딩</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DecoderFallbackBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.DecoderFallbackBuffer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DecoderFallbackBuffer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Text.DecoderFallbackBuffer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (byte[] bytesUnknown, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(unsigned int8[] bytesUnknown, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.DecoderFallbackBuffer.Fallback(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (bytesUnknown As Byte(), index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(cli::array &lt;System::Byte&gt; ^ bytesUnknown, int index);" />
      <MemberSignature Language="F#" Value="abstract member Fallback : byte[] * int -&gt; bool" Usage="decoderFallbackBuffer.Fallback (bytesUnknown, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesUnknown" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytesUnknown">입력 바이트 배열입니다.</param>
        <param name="index"><paramref name="bytesUnknown" />에 있는 바이트의 인덱스 위치입니다.</param>
        <summary>파생 클래스에서 재정의될 때 지정된 입력 바이트 시퀀스를 처리하도록 대체 버퍼를 준비합니다.</summary>
        <returns>대체 버퍼에서 <paramref name="bytesUnknown" />을 처리할 수 있으면 <see langword="true" />이고, 대체 버퍼에서 <paramref name="bytesUnknown" />을 무시하면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Text.Encoding.GetChars%2A?displayProperty=nameWithType>, <xref:System.Text.Encoding.GetString%2A?displayProperty=nameWithType>, 및 <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType> 메서드를 호출 <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> 디코딩할 수 없는 알 수 없는 입력된 바이트 시퀀스를 발생 하는 경우. 반환 값 `true` 대체 (fallback) 버퍼 호출 메서드를 호출 하면 입력된 바이트 시퀀스를 처리할 수 있는지 나타냅니다는 <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> 대체 (fallback) 버퍼의 각 문자를 가져오는 방법입니다. 개별 바이트를 처리 하지 않으므로 <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> 메서드 예외 대체 (fallback) 처리기에서 예외를 throw 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextChar">
      <MemberSignature Language="C#" Value="public abstract char GetNextChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char GetNextChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.DecoderFallbackBuffer.GetNextChar" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNextChar () As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract char GetNextChar();" />
      <MemberSignature Language="F#" Value="abstract member GetNextChar : unit -&gt; char" Usage="decoderFallbackBuffer.GetNextChar " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 재정의될 때 대체 버퍼에서 다음 문자를 검색합니다.</summary>
        <returns>대체 버퍼에 있는 다음 문자입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 디코딩 작업을 호출 합니다 <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> 메서드 입력에 알 수 없는 바이트 시퀀스를 발견 하면 합니다. 경우는 <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> 메서드가 반환 되는 `true`에 있는 대체 문자열을 알 수 없는 입력을 디코딩하는 대신 출력에 삽입할 수 있습니다. 디코딩 작업 호출을 <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> 메서드 반복적으로 한 번에 한 문자씩 대체 문자열을 가져옵니다. 디코더에 대체 (fallback) 버퍼의 모든 문자가 반환 되는 경우 메서드가 u+0000을 반환 해야 합니다.  
  
 예외 대체 (fallback) 처리기는 <xref:System.Text.DecoderFallbackBuffer.GetNextChar%2A> 메서드에서 u+0000을 반환 해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MovePrevious">
      <MemberSignature Language="C#" Value="public abstract bool MovePrevious ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MovePrevious() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.DecoderFallbackBuffer.MovePrevious" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MovePrevious () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool MovePrevious();" />
      <MemberSignature Language="F#" Value="abstract member MovePrevious : unit -&gt; bool" Usage="decoderFallbackBuffer.MovePrevious " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 재정의될 때 <see cref="M:System.Text.DecoderFallbackBuffer.GetNextChar" /> 메서드에 대한 다음 호출에서 데이터 버퍼의 현재 문자 위치 이전의 문자 위치에 액세스하도록 합니다.</summary>
        <returns><see cref="M:System.Text.DecoderFallbackBuffer.MovePrevious" /> 작업이 성공적으로 수행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 예외 대체 (fallback) 처리기 반환할지 `false`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remaining">
      <MemberSignature Language="C#" Value="public abstract int Remaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Remaining" />
      <MemberSignature Language="DocId" Value="P:System.Text.DecoderFallbackBuffer.Remaining" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Remaining As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Remaining { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Remaining : int" Usage="System.Text.DecoderFallbackBuffer.Remaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>파생 클래스에서 재정의될 때 처리되기 위해 남아 있는 현재 <see cref="T:System.Text.DecoderFallbackBuffer" /> 개체의 문자 수를 가져옵니다.</summary>
        <value>아직 처리되지 않은 현재 대체 버퍼의 문자 수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Text.DecoderFallbackBuffer.Fallback%2A> 메서드가 반환 `true` 경우 <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> 0이 아닌 값입니다.  
  
 예외 대체 (fallback) 처리기는 <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> 메서드에서 0을 반환 해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.DecoderFallbackBuffer.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="decoderFallbackBuffer.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 대체 버퍼와 관련된 모든 데이터 및 상태 정보를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>호출한 후 합니다 <see cref="M:System.Text.DecoderFallbackBuffer.Reset" /> 메서드를를 <see cref="P:System.Text.DecoderFallbackBuffer.Remaining" /> 속성에 0을 반환 해야 합니다 <see cref="M:System.Text.DecoderFallbackBuffer.GetNextChar" /> 메서드에서 u+0000을 반환 해야 및 <see cref="M:System.Text.DecoderFallbackBuffer.MovePrevious" /> 메서드는 반환 해야 <see langword="false" />.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>