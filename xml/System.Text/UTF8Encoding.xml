<Type Name="UTF8Encoding" FullName="System.Text.UTF8Encoding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="87ae98fadc1f8592e7150c4b3b79ec7c1c01921c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58686968" /></Metadata><TypeSignature Language="C#" Value="public class UTF8Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UTF8Encoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF8Encoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UTF8Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF8Encoding : System::Text::Encoding" />
  <TypeSignature Language="F#" Value="type UTF8Encoding = class&#xA;    inherit Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>유니코드 문자의 UTF-8 인코딩을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인코딩은 유니코드 문자 집합을 바이트 시퀀스로 변환하는 프로세스입니다. 디코딩은 유니코드 문자 집합으로 인코딩된 바이트 시퀀스로 변환 하는 프로세스입니다.  
  
 U t F-8은 유니코드 인코딩인는 1 ~ 4 바이트의 시퀀스로 각 코드 포인트를 나타냅니다. 달리 utf-16 및 UTF-32 인코딩을 u t F-8 인코딩 필요 하지 않습니다 "엔디언"; 인코딩 체계 프로세서 big endian 또는 little endian 인지에 관계 없이 동일 합니다. <xref:System.Text.UTF8Encoding> Windows 코드 페이지 65001에 해당합니다. Utf 및에서 지 원하는 다른 인코딩에 대 한 자세한 내용은 <xref:System.Text>를 참조 하세요 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md)합니다.  
  
 인스턴스화할 수 있습니다는 <xref:System.Text.UTF8Encoding> 다양 한 것인지에 바이트 순서 표시 (BOM)를 제공 하 고 오류 검색을 사용 하도록 설정 하려는 여부에 따라 다음 방법으로에서는 개체입니다. 다음 표에 생성자와 <xref:System.Text.Encoding> 반환 하는 속성을 <xref:System.Text.UTF8Encoding> 개체입니다.  
  
|멤버|BOM|오류 검색|  
|------------|---------|---------------------|  
|<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>|예|없음 (Replacement fallback)|  
|<xref:System.Text.UTF8Encoding.%23ctor?displayProperty=nameWithType>|아니요|없음 (Replacement fallback)|  
|<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType>|구성 가능|없음 (Replacement fallback)|  
|<xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|구성 가능|구성 가능|  
  
 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드는 유니코드 문자 집합 인코딩의 바이트 수 결과 확인 및 <xref:System.Text.UTF8Encoding.GetBytes%2A> 메서드에서는 실제 인코딩을 수행 합니다.  
  
 마찬가지로 합니다 <xref:System.Text.UTF8Encoding.GetCharCount%2A> 메서드는 바이트 시퀀스를 디코딩할에서 디코딩될 문자 확인 및 <xref:System.Text.UTF8Encoding.GetChars%2A> 및 <xref:System.Text.UTF8Encoding.GetString%2A> 메서드는 실제 디코딩을 수행 합니다.  
  
 인코더 또는 디코더는 인코딩 또는 디코딩 데이터 (예: 100,000 자 세그먼트로 인코딩된 1 백만 자 문자열) 여러 블록에 걸쳐 있는 경우에 상태 정보를 저장, 사용할 수 있는 합니다 <xref:System.Text.UTF8Encoding.GetEncoder%2A> 고 <xref:System.Text.UTF8Encoding.GetDecoder%2A> 속성 각각.  
  
 필요에 따라는 <xref:System.Text.UTF8Encoding> 개체 인코딩 프로세스에서 발생 하는 바이트 스트림 시작 부분에 접두사를 붙일 수 있습니다 하는 바이트 배열인 바이트 순서 표시 (BOM)를 제공 합니다. U t F-8로 인코딩된 바이트 스트림 바이트 순서 표시 (BOM)를 앞에 디코더에서 바이트 순서와 변환 형식 또는 u t F를 결정 하는 데 도움이 됩니다. 그러나는 유니코드 표준 모두 필요 하거나 권장 BOM을 u t F-8에서 인코딩 스트림을 note 합니다. 바이트 순서에서 바이트 순서 표시에 대 한 자세한 내용은 유니코드 표준을 참조 합니다 [유니코드 홈페이지](https://go.microsoft.com/fwlink/?LinkId=37123)합니다.  
  
 인코더는 BOM을 제공 하도록 구성 됩니다, 경우 호출 하 여 검색할 수 있습니다는 <xref:System.Text.UTF8Encoding.GetPreamble%2A> 메서드; 메서드는 빈 배열을 반환 하는 고, 그렇지 합니다. 인 경우에을 <xref:System.Text.UTF8Encoding> BOM 지원에 대 한 개체를 구성 하 고 적절 한;로 인코딩된 바이트 스트림의 시작 부분에 BOM을 포함 해야의 인코딩 메서드를 <xref:System.Text.UTF8Encoding> 클래스 이렇게 하지 않으면 자동으로 합니다.  
  
> [!CAUTION]
>  오류 검색이 사용 하도록 설정 하는 데 클래스 인스턴스를 더욱 안전 하 게를 호출 해야 합니다 <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> 집합과 생성자는 `throwOnInvalidBytes` 매개 변수를 `true`입니다. 사용 하도록 설정 하는 오류 검색을 사용 하 여에 잘못 된 문자 또는 바이트 시퀀스를 검색 하는 메서드가 throw는 <xref:System.ArgumentException> 예외입니다. 오류 검색 예외가 throw 되지 않고 잘못 된 시퀀스는 일반적으로 무시 됩니다.  
  
> [!NOTE]
>  개체 직렬화 되 고 다른.NET Framework 버전을 사용 하 여 역직렬화 하는 경우에 u t F-8로 인코딩된 개체의 상태가 유지 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Text.UTF8Encoding> 유니코드 문자의 문자열을 인코딩하고 바이트 배열에 저장할 개체입니다. 유니코드 문자열에는 Pi (U + 03A0) 및 시그마 (U + 03A3), ASCII 문자 범위 외부에 있는 두 문자를 포함 합니다. 인코딩된 바이트 배열을 문자열로으로 디코딩되 Pi와 시그마 문자는 여전히 존재 합니다.  
  
 [!code-cpp[System.Text.UTF8Encoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UTF8Encoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/VB/snippet.vb#1)]  
  
 다음 예제에서는 인코딩된 바이트를 파일에 기록 하는 바이트 순서 표시 (BOM)를 사용 하 여 바이트 스트림을 접두사 점을 제외 하 고 이전 예제와 같은 문자열을 사용 합니다. 두 가지 방법으로 파일을 읽고 다음:를 사용 하 여 텍스트 파일로 <xref:System.IO.StreamReader> 개체 및 이진 파일. 짐작할 수 모두 새로 읽기 문자열 BOM을 포함 합니다.  
  
 [!code-csharp[System.Text.UTF8Encoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UTF8Encoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.Encoder" />
    <related type="Article" href="~/docs/standard/base-types/character-encoding.md">인코딩 이해</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Text.UTF8Encoding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Text.UTF8Encoding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 유니코드 바이트 순서 표시를 제공 하지 않으며 잘못 된 인코딩이 검색 되었을 때 예외를 throw 하지 않습니다는 인스턴스를 만듭니다.  
  
> [!CAUTION]
>  보안상의 이유로 사용 하는 생성자를 호출 하 여 오류 감지를 사용 하는 권장 된 `throwOnInvalidBytes` 매개 변수 및 해당 값을 설정 `true`합니다.  
  
   
  
## Examples  
 다음 예제에서는 새 <xref:System.Text.UTF8Encoding> 인스턴스 및 해당 이름이 표시 됩니다.  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor1 Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool encoderShouldEmitUTF8Identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoderShouldEmitUTF8Identifier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding(bool encoderShouldEmitUTF8Identifier);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF8Encoding : bool -&gt; System.Text.UTF8Encoding" Usage="new System.Text.UTF8Encoding encoderShouldEmitUTF8Identifier" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoderShouldEmitUTF8Identifier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoderShouldEmitUTF8Identifier"><see cref="M:System.Text.UTF8Encoding.GetPreamble" /> 메서드를 통해 유니코드 바이트 순서 표시를 반환하도록 지정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary><see cref="T:System.Text.UTF8Encoding" /> 클래스의 새 인스턴스를 초기화합니다. 매개 변수는 유니코드 바이트 순서 표시를 제공할지 여부를 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 잘못 된 인코딩이 검색 되었을 때 예외를 throw 하지 않는 인스턴스를 만듭니다.  
  
> [!CAUTION]
>  보안상의 이유로 포함 하는 생성자를 호출 하 여 오류 감지를 사용 해야는 `throwOnInvalidBytes` 매개 변수 및 해당 값을 설정 `true`합니다.  
  
 합니다 `encoderShouldEmitUTF8Identifier` 의 작업을 제어 하는 매개 변수는 <xref:System.Text.UTF8Encoding.GetPreamble%2A> 메서드. 경우 `true`, utf-8 형식으로 유니코드 바이트 순서 표시 (BOM)를 포함 하는 바이트 배열을 반환 합니다.  경우 `false`, 길이가 0 인 바이트 배열을 반환 합니다. 그러나 설정 `encoderShouldEmitUTF8Identifier` 하 `true` 발생 하지 않습니다는 <xref:System.Text.UTF8Encoding.GetBytes%2A> 바이트 배열의 시작 부분에 BOM을 접두사를 지정 하는 메서드도 않습니다는 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 바이트 수의 BOM에 바이트 수를 포함 하는 방법.  
  
   
  
## Examples  
 다음 예제에서는 새 <xref:System.Text.UTF8Encoding> 인스턴스를 지정 하 여 유니코드 바이트 순서 표시가 접두사를 내보내야 하는 <xref:System.Text.UTF8Encoding.GetPreamble%2A> 메서드. <xref:System.Text.UTF8Encoding.GetPreamble%2A> 메서드 다음 유니코드 바이트 순서 표시 접두사를 반환 합니다.  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/CPP/ctor-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/CS/ctor-boolean.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor2 Example/VB/ctor-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (encoderShouldEmitUTF8Identifier As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
      <MemberSignature Language="F#" Value="new System.Text.UTF8Encoding : bool * bool -&gt; System.Text.UTF8Encoding" Usage="new System.Text.UTF8Encoding (encoderShouldEmitUTF8Identifier, throwOnInvalidBytes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="encoderShouldEmitUTF8Identifier" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="encoderShouldEmitUTF8Identifier"><see cref="M:System.Text.UTF8Encoding.GetPreamble" /> 메서드를 통해 유니코드 바이트 순서 표시를 반환하도록 지정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <param name="throwOnInvalidBytes">잘못된 인코딩이 검색되었을 때 예외를 throw하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
        <summary><see cref="T:System.Text.UTF8Encoding" /> 클래스의 새 인스턴스를 초기화합니다. 매개 변수를 사용하여 유니코드 바이트 순서 표시를 제공할지 여부와 잘못된 인코딩이 검색되었을 때 예외를 발생시킬지 여부를 지정할 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `encoderShouldEmitUTF8Identifier` 의 작업을 제어 하는 매개 변수는 <xref:System.Text.UTF8Encoding.GetPreamble%2A> 메서드. 경우 `true`, utf-8 형식으로 유니코드 바이트 순서 표시 (BOM)를 포함 하는 바이트 배열을 반환 합니다.  경우 `false`, 길이가 0 인 바이트 배열을 반환 합니다. 그러나 설정 `encoderShouldEmitUTF8Identifier` 하 `true` 발생 하지 않습니다는 <xref:System.Text.UTF8Encoding.GetBytes%2A> 바이트 배열의 시작 부분에 BOM을 접두사를 지정 하는 메서드도 않습니다는 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 바이트 수의 BOM에 바이트 수를 포함 하는 방법.  
  
 하는 경우 `throwOnInvalidBytes` 됩니다 `true`, 잘못 된 바이트 시퀀스를 검색 하는 메서드가 throw는 <xref:System.ArgumentException?displayProperty=nameWithType> 예외입니다. 이 고, 그렇지는 메서드는 예외를 throw 하지 않습니다 하 고 잘못 된 시퀀스가 무시 됩니다.  
  
> [!CAUTION]
>  보안상의 이유로 포함 하는 생성자를 호출 하 여 오류 감지를 사용 해야는 `throwOnInvalidBytes` 매개 변수 및 해당 매개 변수를 설정 `true`합니다.  
  
   
  
## Examples  
 다음 예제에서는 새 <xref:System.Text.UTF8Encoding> 인스턴스를 지정 하는 <xref:System.Text.UTF8Encoding.GetPreamble%2A> 메서드는 유니코드 바이트 순서 표시 접두사를 내보내지 않아야 하 고 잘못 된 인코딩이 검색 되었을 때 예외가 throw 됩니다. 이 생성자의 동작을 기본 비교할 <xref:System.Text.UTF8Encoding.%23ctor> 생성자는 잘못 된 인코딩이 검색 되었을 때 예외를 throw 하지 않습니다. 두 <xref:System.Text.UTF8Encoding> 인스턴스는 잘못 된 문자 시퀀스는 행에 두 명의 상위 서로게이트 (U + D801 및 U + D802)를 포함 하는 문자 배열 인코딩; high surrogate 항상 뒤에 야 surrogate입니다.  
  
 [!code-cpp[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.ctor3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.ctor3 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="uTF8Encoding.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">현재 인스턴스와 비교할 개체입니다.</param>
        <summary>지정한 개체와 현재 <see cref="T:System.Text.UTF8Encoding" /> 개체가 같은지 여부를 확인합니다.</summary>
        <returns><paramref name="value" />가 <see cref="T:System.Text.UTF8Encoding" /> 인스턴스이고 현재 개체와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 <xref:System.Text.UTF8Encoding> 개체는 다음 조건이 모두 참인 경우 같은 것으로 간주 됩니다.  
  
-   바이트 순서 표시를 제공 하는 개체를 모두 또는 둘 다 하지 않습니다.  
  
-   두 개체가 동일한 인코더 대체 (fallback)를 사용합니다.  
  
-   두 개체가 동일한 디코더가 대체 (fallback)를 사용합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Text.UTF8Encoding.Equals%2A> 메서드를 테스트 하는지 여부를 현재 <xref:System.Text.UTF8Encoding> 다른 개체가 같은지 <xref:System.Text.UTF8Encoding> 개체입니다. 4 개의 <xref:System.Text.UTF8Encoding> 개체가 만들어지고 비교 하 고 비교의 결과가 표시 됩니다.  
  
 [!code-cpp[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/CPP/equals-object.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/CS/equals-object.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.Equals Example/VB/equals-object.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF8Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ chars);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : string -&gt; int" Usage="uTF8Encoding.GetByteCount chars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="chars">인코딩할 문자 집합이 포함된 <see cref="T:System.String" />입니다.</param>
        <summary>지정된 <see cref="T:System.String" />의 문자를 인코딩하여 생성된 바이트 수를 계산합니다.</summary>
        <returns>지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF8Encoding.GetBytes%2A> 결과 바이트를 저장 하려면 호출을 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 메서드. 합니다 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw는 <xref:System.ArgumentException> 예외입니다. 오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.  
  
 스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩 하도록 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 붙일 수 있습니다. 머리말 바이트 스트림 시작 부분에 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분)은 개발자의 책임이 며, 머리말의 바이트 수를 반환 하는 값에 반영 되지 않습니다는 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 고 <xref:System.Text.UTF8Encoding.GetByteCount%28System.String%29> 최대값과 실제 문자열을 인코딩하는 데 필요한 바이트 수를 계산 하는 방법입니다. 또한 실제 바이트 순서 표시를 사용 하 여 바이트 스트림을 저장 하는 데 필요한 바이트 수를 표시 합니다.  
  
 [!code-csharp[System.Text.UTF8Encoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="chars" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="chars" />에 잘못된 문자 시퀀스를 포함합니다.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조). 
및 
 <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF8Encoding.GetByteCount (chars, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="chars">인코딩할 첫 번째 문자를 가리키는 포인터입니다.</param>
        <param name="count">인코딩할 문자 수입니다.</param>
        <summary>지정한 문자 포인터에서 시작되는 문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</summary>
        <returns>지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 필요한 정확한 배열 크기를 계산 하는 <xref:System.Text.UTF8Encoding.GetBytes%2A> 결과 바이트를 저장 하는 방법 호출을 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 메서드. 합니다 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw는 <xref:System.ArgumentException> 예외입니다. 오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.  
  
 스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩 하도록 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 붙일 수 있습니다. 머리말 바이트 스트림 시작 부분에 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분)은 개발자의 책임이 며, 머리말의 바이트 수를 반환 하는 값에 반영 되지 않습니다는 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="chars" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count" />가 0보다 작은 경우  
  
또는 
결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="chars" />에 잘못된 문자 시퀀스를 포함합니다.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조). 
및 
 <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetByteCount : char[] * int * int -&gt; int" Usage="uTF8Encoding.GetByteCount (chars, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">인코딩할 문자 집합이 포함된 문자 배열입니다.</param>
        <param name="index">인코딩할 첫 번째 문자의 인덱스입니다.</param>
        <param name="count">인코딩할 문자 수입니다.</param>
        <summary>지정한 문자 배열의 문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</summary>
        <returns>지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF8Encoding.GetBytes%2A> 를 사용 하 여 결과 바이트를 저장 하려면 호출 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 메서드. 합니다 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw는 <xref:System.ArgumentException> 예외입니다. 오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.  
  
 스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩 하도록 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 붙일 수 있습니다. 머리말 바이트 스트림 시작 부분에 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분)은 개발자의 책임이 며, 머리말의 바이트 수를 반환 하는 값에 반영 되지 않습니다는 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 소문자가 라틴 문자는 대문자를 사용 하 여 배열 및 호출 된 <xref:System.Text.UTF8Encoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 라틴어 소문자 문자를 인코딩하는 데 필요한 바이트 수를 결정 하는 방법입니다. 바이트 순서 표시가 추가 되 면 필요한 바이트의 총 수와 함께이 정보를 표시 합니다. 반환 된 값이 숫자를 비교 하는 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 메서드 라틴어 소문자 문자를 인코딩하는 데 필요한 바이트의 최대 수를 나타냅니다.  
  
 [!code-csharp[System.Text.UTF8Encoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UTF8Encoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="chars" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.  
  
또는 
 <paramref name="index" /> 및 <paramref name="count" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.  
  
또는 
결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="chars" />에 잘못된 문자 시퀀스를 포함합니다.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조). 
및 
<see cref="P:System.Text.Encoding.EncoderFallback" /> 속성은 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>문자 집합을 바이트 시퀀스로 인코딩합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string -&gt; byte[]" Usage="uTF8Encoding.GetBytes s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="s">인코딩할 문자열입니다.</param>
        <summary>지정한 <see cref="T:System.String" /> 개체의 문자를 바이트 시퀀스로 인코딩합니다.</summary>
        <returns>s 매개 변수에 지정된 문자열에 인코딩된 문자를 포함하는 바이트 배열입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : nativeptr&lt;char&gt; * int * nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF8Encoding.GetBytes (chars, charCount, bytes, byteCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="bytes" Type="System.Byte*" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="chars">인코딩할 첫 번째 문자를 가리키는 포인터입니다.</param>
        <param name="charCount">인코딩할 문자 수입니다.</param>
        <param name="bytes">결과 바이트 시퀀스를 쓰기 시작할 위치를 가리키는 포인터입니다.</param>
        <param name="byteCount">쓸 최대 바이트 수입니다.</param>
        <summary>지정한 문자 포인터에서 시작하는 문자 집합을 지정한 바이트 포인터에서 시작하여 저장되는 바이트 시퀀스로 인코딩합니다.</summary>
        <returns><paramref name="bytes" />가 가리키는 위치에 써지는 실제 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF8Encoding.GetBytes%2A> 결과 바이트를 저장 하려면 호출을 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 메서드. 합니다 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw는 <xref:System.ArgumentException> 예외입니다. 오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.  
  
 같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다. 이 경우 또는 사용 하 여 데이터의 양이 너무 커서 작은 블록으로 나눌 경우 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 반환한 합니다 <xref:System.Text.UTF8Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF8Encoding.GetEncoder%2A> 메서드를 각각.  
  
 스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩 하도록 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 붙일 수 있습니다. 머리말 바이트 스트림 시작 부분에 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분)은 개발자의 책임입니다. <xref:System.Text.UTF8Encoding.GetBytes%2A> 메서드 인코딩된 바이트 시퀀스의 시작 부분에 대 한 프리앰블 앞에 추가 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="chars" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="bytes" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charCount" /> 또는 <paramref name="byteCount" />가 0보다 작습니다.</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="chars" />에 잘못된 문자 시퀀스를 포함합니다.  
  
또는 
 <paramref name="byteCount" />가 결과 바이트 수보다 작은 경우</exception>
        <exception cref="T:System.Text.EncoderFallbackException">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조). 
및 
 <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : char[] * int * int * byte[] * int -&gt; int" Usage="uTF8Encoding.GetBytes (chars, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">인코딩할 문자 집합이 포함된 문자 배열입니다.</param>
        <param name="charIndex">인코딩할 첫 번째 문자의 인덱스입니다.</param>
        <param name="charCount">인코딩할 문자 수입니다.</param>
        <param name="bytes">결과 바이트 시퀀스를 포함할 바이트 배열입니다.</param>
        <param name="byteIndex">결과 바이트 시퀀스를 쓰기 시작할 인덱스입니다.</param>
        <summary>지정한 문자 배열의 문자 집합을 지정한 바이트 배열로 인코딩합니다.</summary>
        <returns><paramref name="bytes" />에 쓴 실제 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF8Encoding.GetBytes%2A> 결과 바이트를 저장 하려면 호출을 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 메서드. 합니다 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw는 <xref:System.ArgumentException> 예외입니다. 오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.  
  
 같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다. 이 경우 또는 사용 하 여 데이터의 양이 너무 커서 작은 블록으로 나눌 경우 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 제공한 합니다 <xref:System.Text.UTF8Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF8Encoding.GetEncoder%2A> 메서드를 각각.  
  
 스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩 하도록 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 붙일 수 있습니다. 머리말 바이트 스트림 시작 부분에 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분)은 개발자의 책임입니다. <xref:System.Text.UTF8Encoding.GetBytes%2A> 메서드 인코딩된 바이트 시퀀스의 시작 부분에 대 한 프리앰블 앞에 추가 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Text.UTF8Encoding.GetBytes%2A> 문자열 및 저장소를 바이트 배열의 요소 범위에서 인코딩된 바이트에서 문자 범위를 인코딩할 방법입니다.  
  
 [!code-cpp[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="chars" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="bytes" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charIndex" />, <paramref name="charCount" /> 또는 <paramref name="byteIndex" />가 0보다 작은 경우  
  
또는 
 <paramref name="charIndex" /> 및 <paramref name="charCount" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.  
  
또는 
 <paramref name="byteIndex" />가 <paramref name="bytes" />의 유효한 인덱스가 아닌 경우</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="chars" />에 잘못된 문자 시퀀스를 포함합니다.  
  
또는 
 <paramref name="bytes" />의 용량(<paramref name="byteIndex" /> ~ 배열 끝)이 부족해서 결과 바이트를 수용할 수 없는 경우</exception>
        <exception cref="T:System.Text.EncoderFallbackException">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조). 
및 
 <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : string * int * int * byte[] * int -&gt; int" Usage="uTF8Encoding.GetBytes (s, charIndex, charCount, bytes, byteIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">인코딩할 문자 집합이 포함된 <see cref="T:System.String" />입니다.</param>
        <param name="charIndex">인코딩할 첫 번째 문자의 인덱스입니다.</param>
        <param name="charCount">인코딩할 문자 수입니다.</param>
        <param name="bytes">결과 바이트 시퀀스를 포함할 바이트 배열입니다.</param>
        <param name="byteIndex">결과 바이트 시퀀스를 쓰기 시작할 인덱스입니다.</param>
        <summary>지정된 <see cref="T:System.String" />의 문자 집합을 지정된 바이트 배열로 인코딩합니다.</summary>
        <returns><paramref name="bytes" />에 쓴 실제 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF8Encoding.GetBytes%2A> 결과 바이트를 저장 하려면 호출을 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 메서드. 합니다 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw는 <xref:System.ArgumentException> 예외입니다. 오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.  
  
 같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다. 이 경우 또는 사용 하 여 데이터의 양이 너무 커서 작은 블록으로 나눌 경우 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 제공한 합니다 <xref:System.Text.UTF8Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF8Encoding.GetEncoder%2A> 메서드를 각각.  
  
 스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩 하도록 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 붙일 수 있습니다. 머리말 바이트 스트림 시작 부분에 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분)은 개발자의 책임입니다. <xref:System.Text.UTF8Encoding.GetBytes%2A> 메서드 인코딩된 바이트 시퀀스의 시작 부분에 대 한 프리앰블 앞에 추가 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Text.UTF8Encoding.GetBytes%2A> 메서드는 유니코드 문자 배열에서 요소의 범위를 인코딩하고 인코딩된 바이트를 바이트 배열의 요소 범위에 저장 합니다.  
  
 [!code-cpp[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="bytes" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charIndex" />, <paramref name="charCount" /> 또는 <paramref name="byteIndex" />가 0보다 작은 경우  
  
또는 
 <paramref name="charIndex" /> 및 <paramref name="charCount" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.  
  
또는 
 <paramref name="byteIndex" />가 <paramref name="bytes" />의 유효한 인덱스가 아닌 경우</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="s" />에 잘못된 문자 시퀀스를 포함합니다.  
  
또는 
 <paramref name="bytes" />의 용량(<paramref name="byteIndex" /> ~ 배열 끝)이 부족해서 결과 바이트를 수용할 수 없는 경우</exception>
        <exception cref="T:System.Text.EncoderFallbackException">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조). 
및 
 <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : nativeptr&lt;byte&gt; * int -&gt; int" Usage="uTF8Encoding.GetCharCount (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes">디코딩할 첫 번째 바이트를 가리키는 포인터입니다.</param>
        <param name="count">디코딩할 바이트 수입니다.</param>
        <summary>지정한 바이트 포인터에서 시작되는 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</summary>
        <returns>지정한 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF8Encoding.GetChars%2A> 결과 문자를 저장 하려면 호출을 <xref:System.Text.UTF8Encoding.GetCharCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 메서드. 합니다 <xref:System.Text.UTF8Encoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw는 <xref:System.ArgumentException> 예외입니다. 오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count" />가 0보다 작은 경우  
  
또는 
결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.</exception>
        <exception cref="T:System.Text.DecoderFallbackException">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조). 
및 
 <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
        <altmember cref="Overload:System.Text.UTF8Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetCharCount : byte[] * int * int -&gt; int" Usage="uTF8Encoding.GetCharCount (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</param>
        <param name="index">디코딩할 첫 번째 바이트의 인덱스입니다.</param>
        <param name="count">디코딩할 바이트 수입니다.</param>
        <summary>지정한 바이트 배열의 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</summary>
        <returns>지정한 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF8Encoding.GetChars%2A> 결과 문자를 저장 하려면 호출을 <xref:System.Text.UTF8Encoding.GetCharCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 메서드. 합니다 <xref:System.Text.UTF8Encoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw는 <xref:System.ArgumentException> 예외입니다. 오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Text.UTF8Encoding.GetCharCount%2A> 바이트 배열에서 요소의 범위를 디코딩하여 생성 되는 문자 수를 반환 하는 방법입니다.  
  
 [!code-cpp[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.  
  
또는 
 <paramref name="index" /> 및 <paramref name="count" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.  
  
또는 
결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.</exception>
        <exception cref="T:System.Text.DecoderFallbackException">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조). 
및 
 <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="Overload:System.Text.UTF8Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>바이트 시퀀스를 문자 집합으로 디코딩합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetChars : nativeptr&lt;byte&gt; * int * nativeptr&lt;char&gt; * int -&gt; int" Usage="uTF8Encoding.GetChars (bytes, byteCount, chars, charCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="byteCount" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="chars" Type="System.Char*" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="charCount" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes">디코딩할 첫 번째 바이트를 가리키는 포인터입니다.</param>
        <param name="byteCount">디코딩할 바이트 수입니다.</param>
        <param name="chars">결과 문자 집합을 쓰기 시작할 위치를 가리키는 포인터입니다.</param>
        <param name="charCount">쓸 최대 문자 수입니다.</param>
        <summary>지정한 바이트 포인터에서 시작하는 바이트 시퀀스를 지정한 문자 포인터에서 시작하여 저장되는 문자 집합으로 디코딩합니다.</summary>
        <returns><paramref name="chars" />가 가리키는 위치에 써지는 실제 문자 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF8Encoding.GetChars%2A> 결과 문자를 저장 하려면 호출을 <xref:System.Text.UTF8Encoding.GetCharCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 메서드. 합니다 <xref:System.Text.UTF8Encoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw는 <xref:System.ArgumentException> 예외입니다. 오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.  
  
 디코딩할 바이트 범위는 바이트 순서 표시 (BOM)를 포함 하 고 BOM이 아닌 인식 형식의 메서드에 의해 반환 된 바이트 배열 하는 경우이 메서드에서 반환 된 문자 배열의 문자 U + FFFE 포함 됩니다. 호출 하 여 제거할 수 있습니다는 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 메서드.  
  
 같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다. 이 경우 또는 데이터의 양이 너무 커서 작은 블록으로 나눌 필요가 있는 경우 사용 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 하는 개체를 <xref:System.Text.UTF8Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF8Encoding.GetEncoder%2A> 메서드를 각각.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="chars" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="byteCount" /> 또는 <paramref name="charCount" />가 0보다 작습니다.</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.  
  
또는 
 <paramref name="charCount" />가 결과 문자 수보다 작은 경우</exception>
        <exception cref="T:System.Text.DecoderFallbackException">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조). 
및 
 <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberSignature Language="F#" Value="override this.GetChars : byte[] * int * int * char[] * int -&gt; int" Usage="uTF8Encoding.GetChars (bytes, byteIndex, byteCount, chars, charIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</param>
        <param name="byteIndex">디코딩할 첫 번째 바이트의 인덱스입니다.</param>
        <param name="byteCount">디코딩할 바이트 수입니다.</param>
        <param name="chars">결과 문자 집합을 포함할 문자 배열입니다.</param>
        <param name="charIndex">결과 문자 집합을 쓰기 시작할 인덱스입니다.</param>
        <summary>지정한 바이트 배열의 바이트 시퀀스를 지정한 문자 배열로 디코딩합니다.</summary>
        <returns><paramref name="chars" />에 쓴 실제 문자 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF8Encoding.GetChars%2A> 결과 문자를 저장 하려면 호출을 <xref:System.Text.UTF8Encoding.GetCharCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 메서드. 합니다 <xref:System.Text.UTF8Encoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw는 <xref:System.ArgumentException> 예외입니다. 오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.  
  
 디코딩할 바이트 범위는 바이트 순서 표시 (BOM)를 포함 하 고 BOM이 아닌 인식 형식의 메서드에 의해 반환 된 바이트 배열 하는 경우이 메서드에서 반환 된 문자 배열의 문자 U + FFFE 포함 됩니다. 호출 하 여 제거할 수 있습니다는 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 메서드.  
  
 같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다. 이 경우 또는 사용 하 여 데이터의 양이 너무 커서 작은 블록으로 나눌 경우 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 제공한 합니다 <xref:System.Text.UTF8Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF8Encoding.GetEncoder%2A> 메서드를 각각.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Text.UTF8Encoding.GetChars%2A> 메서드는 바이트 배열에서 요소의 범위를 디코딩하고 결과 문자 배열에 저장 합니다.  
  
 [!code-cpp[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="chars" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="byteIndex" />, <paramref name="byteCount" /> 또는 <paramref name="charIndex" />가 0보다 작은 경우  
  
또는 
 <paramref name="byteindex" /> 및 <paramref name="byteCount" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.  
  
또는 
 <paramref name="charIndex" />가 <paramref name="chars" />의 유효한 인덱스가 아닌 경우</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.  
  
또는 
 <paramref name="chars" />의 용량(<paramref name="charIndex" /> ~ 배열 끝)이 부족해서 결과 문자를 수용할 수 없는 경우</exception>
        <exception cref="T:System.Text.DecoderFallbackException">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조). 
및 
 <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberSignature Language="F#" Value="override this.GetDecoder : unit -&gt; System.Text.Decoder" Usage="uTF8Encoding.GetDecoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>UTF-8로 인코딩된 바이트 시퀀스를 유니코드 문자 시퀀스로 변환하는 디코더를 가져옵니다.</summary>
        <returns>UTF-8로 인코딩된 바이트 시퀀스를 유니코드 문자 시퀀스로 변환하는 디코더입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> 메서드를 비슷한 방식으로 문자의 순차 블록 순차 블록 바이트 변환 된 <xref:System.Text.UTF8Encoding.GetChars%2A> 이 클래스의 메서드. 그러나는 <xref:System.Text.Decoder> 블록으로 확장 되는 바이트 시퀀스를 올바르게 디코딩할 수 있도록 호출 간의 상태 정보를 유지 관리 합니다. <xref:System.Text.Decoder> 도 데이터 블록의 끝에 후행 바이트를 유지 하 고 디코딩 작업은 다음에 후행 바이트를 사용 합니다. 따라서 <xref:System.Text.UTF8Encoding.GetDecoder%2A> 고 <xref:System.Text.UTF8Encoding.GetEncoder%2A> 있으므로 아주 유용 네트워크 전송 및 파일 작업에 대 한 전체 데이터 스트림 대신 데이터 블록을 처리 합니다.  
  
 오류 검색 하도록 설정할지 여부, 즉, 합니다 `throwOnInvalidCharacters` 생성자의 매개 변수는 설정 `true`, 오류 감지에도 사용는 <xref:System.Text.Decoder> 이 메서드에서 반환 된 합니다. 오류 검색이 사용 되는 잘못 된 시퀀스가 발생 하는 경우 디코더의 상태 정의 되지 않으며 처리를 중지 해야 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Text.UTF8Encoding.GetDecoder%2A> utf-8 디코더를 가져오는 방법입니다. 디코더가는 바이트 시퀀스를 문자 시퀀스로 변환합니다.  
  
 [!code-cpp[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/CPP/getdecoder-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/CS/getdecoder-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetDecoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetDecoder Example/VB/getdecoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md">인코딩 이해</related>
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberSignature Language="F#" Value="override this.GetEncoder : unit -&gt; System.Text.Encoder" Usage="uTF8Encoding.GetEncoder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>유니코드 문자 시퀀스를 UTF-8로 인코딩된 바이트 시퀀스로 변환하는 인코더를 가져옵니다.</summary>
        <returns>유니코드 문자 시퀀스를 UTF-8로 인코딩된 바이트 시퀀스로 변환하는 <see cref="T:System.Text.Encoder" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> 메서드를 비슷한 방식으로 바이트 순차 블록 문자의 순차 블록 변환는 <xref:System.Text.UTF8Encoding.GetBytes%2A> 메서드. 그러나는 <xref:System.Text.Encoder> 블록으로 확장 되는 문자 시퀀스 올바르게 인코딩할 수 있도록 호출 간에 상태 정보를 유지 관리 합니다. <xref:System.Text.Encoder> 또한 후행 유지 되는 데이터 블록의 끝 문자 하 고 다음 인코딩 작업에서 후행 문자를 사용 합니다. 예를 들어 데이터 블록 수는 일치 하지 않는 상위 서로게이트를 사용 하 여 종료 및 다음 데이터 블록에 일치 하는 하위 서로게이트 있을 수 있습니다. 따라서 <xref:System.Text.UTF8Encoding.GetDecoder%2A> 고 <xref:System.Text.UTF8Encoding.GetEncoder%2A> 있으므로 아주 유용 네트워크 전송 및 파일 작업에 대 한 전체 데이터 스트림 대신 데이터 블록을 처리 합니다.  
  
 오류 검색 하도록 설정할지 여부, 즉, 합니다 `throwOnInvalidCharacters` 생성자의 매개 변수는 설정 `true`, 오류 감지에도 사용는 <xref:System.Text.Encoder> 이 메서드에서 반환 된 합니다. 오류 검색이 사용 되는 잘못 된 시퀀스가 발생 하는 경우 인코더의 상태가 정의 되지 않으며 처리를 중지 해야 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Text.UTF8Encoding.GetEncoder%2A> 로 인코딩된 바이트 시퀀스를 문자 시퀀스를 u t F-8로 변환 하는 인코더를 가져오는 방법입니다.  
  
 [!code-cpp[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/CPP/getencoder-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/CS/getencoder-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetEncoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetEncoder Example/VB/getencoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <related type="Article" href="~/docs/standard/base-types/character-encoding.md">인코딩 이해</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="uTF8Encoding.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 인스턴스의 해시 코드를 반환합니다.</summary>
        <returns>현재 인스턴스에 대한 해시 코드입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 합니다 <xref:System.Text.UTF8Encoding.GetHashCode%2A> 에 대 한 해시 코드를 반환 하는 방법 <xref:System.Text.UTF8Encoding> 인스턴스. 이 메서드에서 반환한 해시 코드를 만드는 데 생성자에 따라 달라 집니다 통지를 <xref:System.Text.UTF8Encoding> 개체입니다.  
  
 [!code-cpp[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/CPP/gethashcode-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/CS/gethashcode-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetHashCode Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetHashCode Example/VB/gethashcode-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxByteCount : int -&gt; int" Usage="uTF8Encoding.GetMaxByteCount charCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">인코딩할 문자 수입니다.</param>
        <summary>지정한 수의 문자를 인코딩할 경우 생성되는 최대 바이트 수를 계산합니다.</summary>
        <returns>지정한 수의 문자를 인코딩할 경우 생성되는 최대 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF8Encoding.GetBytes%2A> 결과 바이트를 저장 하려면 호출을 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 메서드. 합니다 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 현재 선택 된 최악의 경우를 비롯 한 최악의 숫자, <xref:System.Text.EncoderFallback>합니다. 잠재적으로 큰 문자열을 사용 하 여 대체를 선택한 경우 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 큰 값을 반환할 수 있습니다.  
  
 대부분의 경우이 메서드는 작은 문자열에 대해 적합 한 숫자를 반환합니다. 큰 문자열에 대 한 매우 큰 버퍼를 사용 하 고 버퍼를 보다 적절 한 크기를 초과 하는 드문 경우에서 오류를 catch 하는 중 하나를 선택 해야 합니다. 사용 하는 다른 방법을 고려해 야 할 수도 있습니다 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 또는 <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>합니다. 예를 들어 영어 및 다른 많은 언어의 텍스트에는 종종 하나만 u t F-8 바이트, 문자를 나타낼 필요 하지만 수를 반환한 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 는 변환할 문자열은 완전히 문자로 구성 각 가능성을 허용 해야 합니다. 4 바이트가 필요 합니다.  
  
 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 관계가 없으며 <xref:System.Text.UTF8Encoding.GetChars%2A>합니다. 응용 프로그램에 사용 하는 유사한 함수가 필요 하는 경우 <xref:System.Text.UTF8Encoding.GetChars%2A>를 사용 해야 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A>합니다.  
  
> [!NOTE]
>  `GetMaxByteCount(N)` 동일한 값은 반드시 `N* GetMaxByteCount(1)`입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A> 지정한 개수의 문자를 인코딩하는 데 필요한 바이트의 최대 수를 반환 하는 방법입니다.  
  
 [!code-cpp[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.utf8encoding.getmaxbytecount example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="charCount" />가 0보다 작은 경우  
  
또는 
결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조). 
및 
 <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberSignature Language="F#" Value="override this.GetMaxCharCount : int -&gt; int" Usage="uTF8Encoding.GetMaxCharCount byteCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">디코딩할 바이트 수입니다.</param>
        <summary>지정한 수의 바이트를 디코딩할 경우 생성되는 최대 문자 수를 계산합니다.</summary>
        <returns>지정한 수의 바이트를 디코딩할 경우 생성되는 최대 문자 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF8Encoding.GetChars%2A> 결과 문자를 저장 하려면 호출을 <xref:System.Text.UTF8Encoding.GetCharCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출을 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 메서드. 합니다 <xref:System.Text.UTF8Encoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 현재 선택 된 최악의 경우를 비롯 한 최악의 숫자, <xref:System.Text.DecoderFallback>합니다. 잠재적으로 큰 문자열을 사용 하 여 대체를 선택한 경우 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 큰 값을 반환할 수 있습니다.  
  
 대부분의 경우이 메서드는 작은 문자열에 대해 적합 한 숫자를 반환합니다. 큰 문자열에 대 한 매우 큰 버퍼를 사용 하 고 버퍼를 보다 적절 한 크기를 초과 하는 드문 경우에서 오류를 catch 하는 중 하나를 선택 해야 합니다.  사용 하는 다른 방법을 고려해 야 할 수도 있습니다 <xref:System.Text.UTF8Encoding.GetCharCount%2A> 또는 <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>합니다.  
  
 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 관계가 없으며 <xref:System.Text.UTF8Encoding.GetBytes%2A>합니다. 응용 프로그램에 사용 하는 유사한 함수가 필요 하는 경우 <xref:System.Text.UTF8Encoding.GetBytes%2A>를 사용 해야 <xref:System.Text.UTF8Encoding.GetMaxByteCount%2A>합니다.  
  
> [!NOTE]
>  `GetMaxCharCount(N)` 동일한 값은 반드시 `N* GetMaxCharCount(1)`입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Text.UTF8Encoding.GetMaxCharCount%2A> 지정 된 바이트 수를 디코딩하여 생성 되는 최대 문자 수를 반환 하는 방법입니다.  
  
 [!code-cpp[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="byteCount" />가 0보다 작은 경우  
  
또는 
결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</exception>
        <exception cref="T:System.Text.DecoderFallbackException">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조). 
및 
 <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberSignature Language="F#" Value="override this.GetPreamble : unit -&gt; byte[]" Usage="uTF8Encoding.GetPreamble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Text.UTF8Encoding" /> 인코딩 개체가 제공하도록 구성된 경우 UTF-8 형식으로 인코딩된 유니코드 바이트 순서 표시를 반환합니다.</summary>
        <returns><see cref="T:System.Text.UTF8Encoding" /> 인코딩 개체가 제공하도록 구성된 경우 유니코드 바이트 순서 표시가 포함된 바이트 배열입니다. 그렇지 않으면 이 메서드는 길이가 0인 바이트 배열을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.UTF8Encoding> 개체 인코딩 프로세스에서 발생 하는 바이트 시퀀스를 붙일 수 있습니다 하는 바이트 배열에는 머리말을 제공할 수 있습니다. 바이트 순서와 변환 형식, 또는 u t F를 결정 하는 디코더를 통해 바이트 순서 표시 (코드 포인트 U + FEFF)를 사용 하 여 인코딩된 바이트 시퀀스 앞 있습니다. 유니코드 바이트 순서 표시 (BOM) 0xEF로 serialize 됩니다 0xBB 0xBF 합니다. 필요 하지도 u t F-8에 대 한 BOM 사용 하도록 권장 하는 유니코드 표준 인코딩 스트림을 note 합니다.  
  
 인스턴스화할 수 있습니다는 <xref:System.Text.UTF8Encoding> 개체 <xref:System.Text.UTF8Encoding.GetPreamble%2A> 메서드가 다음과 같은 방법으로 유효한 BOM을 반환 합니다.  
  
-   검색 하 여 합니다 <xref:System.Text.UTF8Encoding> 에서 반환 된 개체는 <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> 속성입니다.  
  
-   호출 하 여는 <xref:System.Text.UTF8Encoding> 생성자를 `encoderShouldEmitUTF8Identifier` 매개 변수 및 설정의 값 설정 `true`합니다.  
  
 다른 모든 <xref:System.Text.UTF8Encoding> 개체 유효한 BOM 보다는 빈 배열을 반환 하도록 구성 됩니다.  
  
 태그가 지정 되지 않은 또는 부적절 하 게 태그가 지정 된 웹 같은 데이터 또는 임의의 텍스트 파일 때 비즈니스 저장 하지 않은 국가별 고려 사항, BOM 거의 특정 식별 그렇지 않으면 해당 인코딩에 대 한 참조를 손실 된 파일에 대 한 인코딩을 제공 합니다. 데이터는 일관 되 고 제대로 태그를 지정 하는 경우 종종 사용자 문제를 방지할 수 있는 합니다.  
  
 인코딩 형식을 제공 하는 표준에 대 한 BOM 다소 중복 됩니다. 그러나 올바른 인코딩 헤더를 보내도록 서버를 사용할 수 있습니다. 또는 사용할 수 있습니다 대체 방법으로 인코딩을 분실할 그렇지 않은 경우.  
  
 BOM을 사용 하 여 몇 가지 단점이 있습니다. 예를 들어 BOM을 사용 하는 데이터베이스 필드를 제한 하는 방법을 알면 어려울 수 있습니다. 파일의 연결 문제가 될 수 또한 예를 들어, 파일 등에서 병합 될 때는 데이터 중간에 불필요 한 문자가 포함 될 수 있도록 합니다. 몇 가지 단점에도 불구 하 고 있지만 bom을 사용 하 여 것이 좋습니다.  
  
 바이트 순서에서 바이트 순서 표시에 대 한 자세한 내용은 유니코드 표준을 참조 합니다 [유니코드 홈페이지](https://go.microsoft.com/fwlink/?LinkId=37123)합니다.  
  
> [!IMPORTANT]
>  스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩 하도록 프리앰블을 사용 하 여 인코드된 바이트 스트림 시작 부분을 접두사로 붙일 수 있습니다. <xref:System.Text.UTF8Encoding.GetBytes%2A> 메서드 인코딩된 바이트 시퀀스로 BOM을 앞에 추가 되지 않습니다; 개발자의 책임은 적절 한 바이트 스트림의 시작 부분에 BOM을 제공 합니다.
  
## Examples  
 다음 예제에서는 <xref:System.Text.UTF8Encoding.GetPreamble%2A> 유니코드 바이트를 반환 하는 방법에는 utf-8 형식으로 인코딩된 표시 순서. 기본 생성자를 <xref:System.Text.UTF8Encoding> 프리앰블 제공 하지 않습니다.  
  
 [!code-cpp[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF8Encoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 다음 예제에서는 두 개를 인스턴스화하고 <xref:System.Text.UTF8Encoding> 개체를 매개 변수가 없는 호출 하 여 첫 번째 <xref:System.Text.UTF8Encoding.%23ctor> 생성자를 호출 하 여 BOM을 나타내고 두 번째를 제공 하지 않습니다는 <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%29> 생성자를 사용 하 여 해당 `encoderShouldEmitUTF8Identifier` 인수와 함께 사용 `true`. 그런 다음 호출을 <xref:System.Text.UTF8Encoding.GetPreamble%2A> 메서드를 UF8로 인코드된 문자열을 작성 하기 전에 파일에 BOM을 씁니다. 이 예제에서 콘솔 출력을 볼 수 있듯이 첫 번째 보다 더 많은 바이트를 세는 두 번째 인코더에서 바이트를 저장 하는 파일.  
  
 [!code-csharp[System.Text.UTF8Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getpreamble/cs/getpreamble1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getpreamble/vb/getpreamble1.vb#1)]  
  
 사용 하 여 파일을 비교할 수도 있습니다는 `fc` 콘솔 창에 명령 16 진수 뷰 모드를 포함 하는 텍스트 편집기에서 파일을 검사할 수 있습니다. Note u t F-8을 지 원하는 편집기에서 파일을 열면 BOM 표시 되지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.GetString : byte[] * int * int -&gt; string" Usage="uTF8Encoding.GetString (bytes, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="bytes">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</param>
        <param name="index">디코딩할 첫 번째 바이트의 인덱스입니다.</param>
        <param name="count">디코딩할 바이트 수입니다.</param>
        <summary>바이트 배열의 바이트 범위를 문자열로 디코딩합니다.</summary>
        <returns>지정된 바이트 시퀀스에 대한 디코딩 결과가 포함된 <see cref="T:System.String" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 오류 검색을 사용 하 여 잘못 된 시퀀스를이 메서드가 throw는 <xref:System.ArgumentException> 예외입니다. 오류 검색 없이, 잘못 된 시퀀스 무시 되 고 예외가 throw 되지 않습니다.  
  
 디코딩할 바이트 범위는 바이트 순서 표시 (BOM)를 포함 하 고 BOM이 아닌 인식 형식의 메서드에 의해 반환 된 바이트 배열 하는 경우이 메서드에서 반환 된 문자 배열의 문자 U + FFFE 포함 됩니다. 호출 하 여 제거할 수 있습니다는 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 메서드.  
  
 같은 스트림에서 읽은 데이터를 변환할 데이터를 순차 블록에만 사용할 수 있습니다. 이 경우 또는 사용 하 여 데이터의 양이 너무 커서 작은 블록으로 나눌 경우 합니다 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 제공한 합니다 <xref:System.Text.UTF8Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF8Encoding.GetEncoder%2A> 메서드를 각각.  
  
   
  
## Examples  
 다음 예제에서는 호출 하 여 배열을 초기화는 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 바이트 인코딩된 문자열 및 바이트 순서 표시 (BOM)의 크기를 추가한 다음에 대 한 필요한를 정확 하 게 확인 하는 방법입니다. 다음 호출 하 여는 <xref:System.Text.UTF8Encoding.GetPreamble%2A> 메서드를 호출 하기 전에 배열에 BOM을 저장 합니다 <xref:System.Text.UTF8Encoding.GetBytes%2A> 인코딩된 바이트 배열에 저장 하는 방법입니다. 이 예제에서는 호출 된 <xref:System.Text.UTF8Encoding.GetString%2A> 문자열을 디코드 하는 방법.  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 이 경우 디코딩된 문자열 다른 것 원래 문자열에서 U + FFFD 16 비트 바이트 순서 표시를 시작 하므로 note 합니다. 즉, 두 문자열이 됩니다 것으로 비교 하 고 출력 문자열을 사용 하는 경우 BOM 대체 문자로 표시 됩니다 "?"입니다. 문자열의 시작 부분에 BOM을 제거 하려면 호출할 수 있습니다는 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.  
  
또는 
 <paramref name="index" /> 및 <paramref name="count" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.</exception>
        <exception cref="T:System.Text.DecoderFallbackException">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조). 
및 
 <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>