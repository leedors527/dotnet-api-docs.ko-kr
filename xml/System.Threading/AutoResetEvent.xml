<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e927ca35a51948e93b5e4fbf3c866d7ffcf0d1ab" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58730384" /></Metadata><TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>단일 대기 스레드를 해제한 후에 신호를 받으면 자동으로 재설정되는 스레드 동기화 이벤트를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 `AutoResetEvent`, <xref:System.Threading.ManualResetEvent>, 및 <xref:System.Threading.EventWaitHandle> 스레드 상호 작용 (또는 스레드 신호). 자세한 내용은 참조 하세요. 합니다 [상호 작용 또는 신호 스레드](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) 섹션을 [동기화 기본 형식 개요](~/docs/standard/threading/overview-of-synchronization-primitives.md) 문서.  
  
> [!IMPORTANT]
>  이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다. 형식을 사용 하 여 마쳤으면 직접 또는 간접적으로의 삭제 해야 있습니다. 직접 형식의 dispose 호출 해당 <xref:System.IDisposable.Dispose%2A> 의 메서드를 `try` / `catch` 블록입니다. 삭제 하지 직접, 언어 구문 같은 사용 `using` (C#에서) 또는 `Using` (Visual Basic에서는). 자세한 내용은 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하세요.를 <xref:System.IDisposable> 인터페이스 항목입니다.  
  
 스레드를 호출 하 여 신호를 기다리는 [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A)합니다. 경우는 `AutoResetEvent` 신호 되지 않은 상태가 될 때까지 해당 스레드는 차단 됩니다 [AutoResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) 라고 합니다.  
  
 호출 `Set` 신호 `AutoResetEvent` 대기 스레드를 해제 합니다. `AutoResetEvent` 단일 대기 스레드가 해제 되 고 신호 되지 않은 상태로 자동으로 반환 될 때까지 신호를 그대로 유지 됩니다. 대기 중인 스레드가 없는 경우 상태를 신호 받음 상태로 남아 무기한입니다.  
  
 스레드 호출 하는 경우 <xref:System.Threading.WaitHandle.WaitOne%2A> 하는 동안는 <xref:System.Threading.AutoResetEvent> 는 신호 된 상태로 스레드를 차단 하지 않습니다. <xref:System.Threading.AutoResetEvent> 스레드를 즉시 해제 하 고 신호 되지 않은 상태로 돌아갑니다.  
  
> [!IMPORTANT]
>  보장이를 호출할 때마다는 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드는 스레드를 해제 합니다. 두 번의 호출은 너무 가까이 함께 두 번째 호출 스레드가 해제 되기 전에 발생 하는, 하나의 스레드만 해제 됩니다. 것 처럼 두 번째 호출 발생 하지 않았습니다. 또한 경우 <xref:System.Threading.EventWaitHandle.Set%2A> 대기 중인 스레드가 없는 경우 라고 하며 <xref:System.Threading.AutoResetEvent> 이 이미 신호를 받고 호출에 영향을 주지 않습니다.  
  
 초기 상태를 제어할 수 있습니다.는 `AutoResetEvent` 부울 값을 생성자에 전달 하 여: `true` 초기 상태 신호를 받으면 및 `false` 그렇지 않은 경우.  
  
 `AutoResetEvent` 사용 하 여 사용할 수도 있습니다는 `static` <xref:System.Threading.WaitHandle.WaitAll%2A> 고 <xref:System.Threading.WaitHandle.WaitAny%2A> 메서드.  
  
 .NET Framework 버전 2.0 부터는 <xref:System.Threading.AutoResetEvent> 에서 새 파생 <xref:System.Threading.EventWaitHandle> 클래스입니다. <xref:System.Threading.AutoResetEvent> 기능적으로 <xref:System.Threading.EventWaitHandle> 사용 하 여 만든 <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>합니다.  
  
> [!NOTE]
>  와 달리 합니다 <xref:System.Threading.AutoResetEvent> 클래스는 <xref:System.Threading.EventWaitHandle> 클래스는 명명 된 시스템 동기화 이벤트에 대 한 액세스를 제공 합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다 <xref:System.Threading.AutoResetEvent> 를 호출 하 여 한 번에 하나의 스레드를 해제 하는 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드 (기본 클래스)에서 각 사용자가 시간 합니다 **Enter** 키입니다. 다음 예에서는 세 개의 스레드를 대기는 <xref:System.Threading.AutoResetEvent> 신호를 받은 상태에서 생성 된 합니다. 때문에 첫 번째 스레드가 즉시 해제 될는 <xref:System.Threading.AutoResetEvent> 이미 신호를 받은 상태입니다. 이 다시 설정 된 <xref:System.Threading.AutoResetEvent> 신호 되지 않은 상태로 이후의 스레드는 차단 되도록 합니다. 차단 된 스레드를 하나씩 해제 될 때까지 해제 되지 않은 키를 눌러 한 번에는 **Enter** 키입니다.  
  
 첫 번째에서는 스레드가 해제 되 면 <xref:System.Threading.AutoResetEvent>, 다른 대기할 <xref:System.Threading.AutoResetEvent> 신호 되지 않은 상태에서 생성 된 합니다. 세 개의 스레드를 차단 하므로 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드 모두 해제 하려면 세 번 호출 되어야 합니다.  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>이 클래스는 스레드로부터 안전 합니다.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">관리되는 스레딩</related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">동기화 기본 형식 개요</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">초기 상태를 신호 받음으로 설정하려면 <see langword="true" />를 사용하고 초기 상태를 신호 없음으로 설정하려면 <see langword="false" />를 사용합니다.</param>
        <summary>초기 상태를 신호 받음으로 설정할지 여부를 나타내는 부울 값을 사용하여 <see cref="T:System.Threading.AutoResetEvent" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 <xref:System.Threading.AutoResetEvent> 두 스레드의 활동을 동기화 합니다. 응용 프로그램 스레드에 인 첫 번째 스레드가 실행 `Main`합니다. 값은 보호 된 리소스를 쓸를 `static` (`Shared` Visual basic에서) 라는 필드 `number`합니다. 두 번째 스레드가 실행 하는 정적 `ThreadProc` 메서드를 기록한 값을 읽고 `Main`합니다.  
  
 합니다 `ThreadProc` 메서드가 기다리는 <xref:System.Threading.AutoResetEvent>합니다. 때 `Main` 호출을 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드는 <xref:System.Threading.AutoResetEvent>, `ThreadProc` 메서드는 하나의 값을 읽습니다. 합니다 <xref:System.Threading.AutoResetEvent> 즉시 다시 설정 하므로 `ThreadProc` 메서드가 다시 대기 합니다.  
  
 프로그램 논리에 따르면는 `ThreadProc` 메서드 같은 값을 두 번 읽이 되지 됩니다. 보장 되지 않습니다 합니다 `ThreadProc` 메서드를 기록한 모든 값을 읽을 `Main`합니다. 보장에는 두 번째 해야 <xref:System.Threading.AutoResetEvent> 잠금.  
  
 각 쓰기 작업 후 `Main` 를 호출 하 여 생성 된 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 메서드를 실행 하는 두 번째 스레드가 제공할 수 있도록 합니다. 단일 프로세서 컴퓨터에서이 고, 그렇지 `Main` 여러 값을 기록할 간에 두 읽기 작업입니다.  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">관리되는 스레딩</related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">동기화 기본 형식 개요</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>스레드가 차단되도록 이벤트 상태를 신호 없음으로 설정합니다.</summary>
        <returns>작업이 성공적으로 수행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>대기 중인 스레드 중 하나만 진행되도록 이벤트 상태를 신호 받음으로 설정합니다.</summary>
        <returns>작업이 성공적으로 수행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Set 메서드는 단일 스레드를 해제합니다. 대기 중인 스레드가 없는 경우에 스레드를 대기를 시도할 때까지 또는 해당 Reset 메서드를 호출할 때까지 대기 핸들이 신호를 받은 상태로 유지 됩니다.

> [!IMPORTANT]
> Set 메서드를 호출할 때마다 스레드를 해제 합니다 보장이 없습니다. 두 번의 호출 스레드가 해제 되기 전에 두 번째 호출에서 발생 되도록 너무 가까이 함께 경우 하나의 스레드만 출시-두 번째 호출이 발생 하지 않은 것 처럼 합니다. 또한 대기 중인 스레드가 없는 경우 Set 메서드가 호출 하는 경우 및 <xref:System.Threading.AutoResetEvent> 이미 신호를 받은 호출에 영향을 주지 않습니다.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>