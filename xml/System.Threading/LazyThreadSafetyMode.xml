<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7f00d9d8962d1fd87330f2e8fe2f3cba1aea4aff" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58702233" /></Metadata><TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><see cref="T:System.Lazy`1" /> 인스턴스가 여러 스레드 간 액세스를 동기화하는 방법을 지정합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 열거형을 사용 하 여 지정 된 `mode` 의 매개 변수 <xref:System.Lazy%601> 생성자입니다. 가지고 여부 또는이 열거형 측면에서 스레드 동기화에 대 한 모든 생성자의 효과 설명할 수 있습니다 `mode` 매개 변수입니다.  
  
 A <xref:System.Lazy%601> 인스턴스는 사용자 지정 초기화 메서드에서 또는 대 한 기본 생성자에서 초기화 `T`합니다. 지정 된 초기화 메서드가 합니다 `valueFactory` 의 매개 변수를 <xref:System.Lazy%601> 생성자입니다. 인스턴스를 반환 하는 메서드 `T`, 인스턴스에서 지연 초기화 되는 형식인 <xref:System.Lazy%601>합니다. 생성자가 없는 경우는 `valueFactory` 매개 변수, 기본 생성자 `T` 초기화 하는 데 사용 되는 <xref:System.Lazy%601> 인스턴스. 두 경우 모두 초기화가 처음 호출 하면 발생 합니다 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 속성입니다.  
  
 스레드 보안을 지정 하는 것 외에도 <xref:System.Lazy%601> 예외 캐싱을 하는 경우가이 열거형에 영향을 줍니다. 에 대 한 예외가 캐시 되 면을 <xref:System.Lazy%601> 인스턴스를 표시 한 번만 인스턴스를 초기화 합니다. 처음으로 예외가 발생 하는 경우 호출 하는 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 예외가 캐시 되 고 모든 후속 호출에서 다시 throw 속성인은 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 속성입니다. 예외 캐싱을의 장점은 모든 두 스레드가 오류가 발생 하는 경우에 항상 동일한 결과 얻을 한다는 점입니다.  
  
 PublicationOnly 모드를 지정 하는 경우 예외가 캐시 되지 됩니다. None를 지정 하는 경우 ExecutionAndPublication, 초기화 메서드를 지정 또는 기본 생성자를 허용 하는지 여부에 따라 달라 집니다 캐싱 또는 `T` 사용할 수 있습니다. 초기화 메서드를 지정하면 이 두 모드에 대해 예외 캐싱을 사용합니다. 초기화 메서드는 매우 간단할 수 있습니다. 예를 들어, `T`의 기본 생성자를 호출할 수 있습니다. C#의 경우 `new Lazy<Contents>(() => new Contents(), mode)` 또는 Visual Basic의 경우 `New Lazy(Of Contents)(Function() New Contents())`. 예외에 대 한 기본 생성자가 throw 되는 초기화 메서드를 지정 하지 않는 생성자를 사용 하는 경우 `T` 캐시 되지 않습니다. 다음 표에서 예외 캐싱 동작을 보여 줍니다.  
  
|모드|초기화 메서드를 사용 하 여|에 대 한 기본 생성자를 사용 하 여 `T`|  
|----------|---------------------------------|---------------------------------------|  
|없음|캐시됨|캐시 되지 않습니다.|  
|PublicationOnly|캐시 되지 않습니다.|캐시 되지 않습니다.|  
|ExecutionAndPublication|캐시됨|캐시 되지 않습니다.|  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">초기화 지연</related>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>잠금을 사용하여 단일 스레드만 스레드로부터 안전한 방식으로 <see cref="T:System.Lazy`1" /> 인스턴스를 초기화할 수 있도록 합니다. 초기화 메서드(또는 초기화 메서드를 찾을 수 없습니다. 기본 생성자)에서 내부적으로 잠금을 사용하는 경우 교착 상태가 발생할 수 있습니다. 초기화 메서드(<paramref name="valueFactory" /> 매개 변수)를 지정하는 <see cref="T:System.Lazy`1" /> 생성자를 사용하며 <see cref="P:System.Lazy`1.Value" /> 속성을 처음 호출할 때 해당 초기화 메서드에서 예외가 발생하거나 예외를 처리하지 못하는 경우 예외가 캐시되고 <see cref="P:System.Lazy`1.Value" /> 속성의 후속 호출에서 다시 예외가 발생합니다. 초기화 메서드를 지정하지 않는 <see cref="T:System.Lazy`1" /> 생성자를 사용하는 경우 <paramref name="T" />에 대한 기본 생성자에서 발생한 예외가 캐시되지 않습니다. 이 경우 <see cref="P:System.Lazy`1.Value" /> 속성의 후속 호출에서 <see cref="T:System.Lazy`1" /> 인스턴스를 초기화할 수도 있습니다. 초기화 메서드에서 <see cref="T:System.Lazy`1" /> 인스턴스의 <see cref="P:System.Lazy`1.Value" /> 속성에 재귀적으로 액세스하는 경우 <see cref="T:System.InvalidOperationException" />이 발생합니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><see cref="T:System.Lazy`1" /> 인스턴스는 스레드로부터 안전하지 않습니다. 여러 스레드에서 인스턴스에 액세스하는 경우 해당 동작이 정의되어 있지 않습니다. 고성능이 중요하며 <see cref="T:System.Lazy`1" /> 인스턴스가 둘 이상의 스레드에서 초기화되지 않는 경우에만 이 모드를 사용합니다. 초기화 메서드(<paramref name="valueFactory" /> 매개 변수)를 지정하는 <see cref="T:System.Lazy`1" /> 생성자를 사용하며 <see cref="P:System.Lazy`1.Value" /> 속성을 처음 호출할 때 해당 초기화 메서드에서 예외가 발생하거나 예외를 처리하지 못하는 경우 예외가 캐시되고 <see cref="P:System.Lazy`1.Value" /> 속성의 후속 호출에서 다시 예외가 발생합니다. 초기화 메서드를 지정하지 않는 <see cref="T:System.Lazy`1" /> 생성자를 사용하는 경우 <paramref name="T" />에 대한 기본 생성자에서 발생한 예외가 캐시되지 않습니다. 이 경우 <see cref="P:System.Lazy`1.Value" /> 속성의 후속 호출에서 <see cref="T:System.Lazy`1" /> 인스턴스를 초기화할 수도 있습니다. 초기화 메서드에서 <see cref="T:System.Lazy`1" /> 인스턴스의 <see cref="P:System.Lazy`1.Value" /> 속성에 재귀적으로 액세스하는 경우 <see cref="T:System.InvalidOperationException" />이 발생합니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>여러 스레드에서 <see cref="T:System.Lazy`1" /> 인스턴스를 동시에 초기화하려고 하면 모든 스레드에서 초기화 메서드(또는 초기화 메서드를 찾을 수 없습니다. 기본 생성자)를 실행할 수 있습니다. 초기화를 완료하는 첫 번째 스레드에서 <see cref="T:System.Lazy`1" /> 인스턴스의 값을 설정합니다. 초기화 메서드에서 해당 스레드에 대한 예외가 발생하지 않는 경우 초기화 메서드를 동시에 실행하는 다른 모든 스레드에 해당 값이 반환됩니다. 경쟁하는 스레드에서 만든 모든 <paramref name="T" /> 인스턴스가 삭제됩니다. 초기화 메서드에서 스레드에 대한 예외가 발생하는 경우 해당 스레드의 <see cref="P:System.Lazy`1.Value" /> 속성에서 예외가 전파됩니다. 예외가 캐시되지 않습니다. <see cref="P:System.Lazy`1.IsValueCreated" /> 속성의 값은 <see langword="false" />로 유지되며, 예외가 발생한 스레드나 다른 스레드에 의한 <see cref="P:System.Lazy`1.Value" /> 속성의 후속 호출에서 초기화 메서드를 다시 실행합니다. 초기화 메서드에서 <see cref="T:System.Lazy`1" /> 인스턴스의 <see cref="P:System.Lazy`1.Value" /> 속성에 재귀적으로 액세스하는 경우 예외가 발생하지 않습니다.</summary>
      </Docs>
    </Member>
  </Members>
</Type>