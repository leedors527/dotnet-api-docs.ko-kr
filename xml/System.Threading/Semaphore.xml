<Type Name="Semaphore" FullName="System.Threading.Semaphore">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f09ba51049b785b441b3abb25f341ac68edc837a" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58736394" /></Metadata><TypeSignature Language="C#" Value="public sealed class Semaphore : System.Threading.WaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Semaphore extends System.Threading.WaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Semaphore" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Semaphore&#xA;Inherits WaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class Semaphore sealed : System::Threading::WaitHandle" />
  <TypeSignature Language="F#" Value="type Semaphore = class&#xA;    inherit WaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>리소스 또는 리소스 풀에 동시에 액세스할 수 있는 스레드 수를 제한합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Threading.Semaphore> 리소스 풀에 대 한 액세스를 제어 하는 클래스입니다. 스레드가 세마포를 호출 하 여는 <xref:System.Threading.WaitHandle.WaitOne%2A> 에서 상속 된 메서드를 <xref:System.Threading.WaitHandle> 클래스를 호출 하 여 세마포를 해제 합니다 <xref:System.Threading.Semaphore.Release%2A> 메서드.  
  
 도달한 세마포에 대해 개수가 스레드가 세마포를 입력 하 고는 스레드가 세마포를 해제할 때 증가 될 때마다 감소 됩니다. 횟수가 0 일 경우 후속 요청에 다른 스레드가 세마포를 해제할 때까지 차단 합니다. 모든 스레드가 세마포를 해제 한 경우 개수는 최 댓 값에 만들어질 때 지정 된 세마포 합니다.  
  
 FIFO 등 LIFO, 차단 된 스레드가 세마포를 입력할 수 있는 보장 된 순서 없이 있습니다.  
  
 스레드가 세마포에 들어갈 수를 여러 번 호출 하 여는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드 반복적으로 합니다. 이러한 항목 중 일부나 전부를 해제 하려면 스레드 매개 변수가 없는 호출 수 <xref:System.Threading.Semaphore.Release> 메서드 오버 로드를 여러 번 하거나 호출할 수는 <xref:System.Threading.Semaphore.Release%28System.Int32%29> 해제할 항목 수를 지정 하는 메서드 오버 로드 합니다.  
  
 합니다 <xref:System.Threading.Semaphore> 클래스에 대 한 호출에서 스레드 id를 적용 하지 않습니다 <xref:System.Threading.WaitHandle.WaitOne%2A> 또는 <xref:System.Threading.Semaphore.Release%2A>합니다. 프로그래머는 스레드는 해제 하지 않아 세마포를 너무 여러 번 확인 하는 것입니다. 예를 들어 세마포의 최대 개수가 2개인데 스레드 A와 스레드 B가 모두 세마포를 입력한다고 가정해 보겠습니다. 스레드 B에서에서 프로그래밍 오류를 호출 하면 <xref:System.Threading.Semaphore.Release%2A> 을 두 번 두 호출은 모두 성공 합니다. 그러면 세마포 개수가 다 차서 스레드 A가 <xref:System.Threading.Semaphore.Release%2A>를 호출하면 <xref:System.Threading.SemaphoreFullException>이 throw됩니다.  
  
 세마포는 두 가지 유형입니다: 로컬 세마포 및 명명 된 시스템 세마포 합니다. 만드는 경우는 <xref:System.Threading.Semaphore> 이름을 허용 하는 생성자를 사용 하 여 해당 이름의 운영 체제 세마포를 사용 하 여 연결 됩니다. 명명 된 시스템 세마포 전체 운영 체제에 표시 되 고 사용 하 여 프로세스 작업을 동기화 할 수 있습니다. 여러 개 만들 수 있습니다 <xref:System.Threading.Semaphore> 동일한 나타내는 개체를 명명 된 시스템 세마포를 및 사용할 수는 <xref:System.Threading.Semaphore.OpenExisting%2A> 명명 된 시스템 세마포가 기존 방법입니다.  
  
 로컬 세마포가 프로세스 내에 존재합니다. 로컬 <xref:System.Threading.Semaphore> 개체에 대한 참조가 있는 프로세스의 모든 스레드에서 사용할 수 있습니다. 각 <xref:System.Threading.Semaphore> 개체는 별도 로컬 세마포입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 세 개의 최대 개수를 및 0에 대 한 초기 카운트를 사용 하 여 세마포를 만듭니다. 이 예제에서는 세마포를 기다리는 동안 차단 하는 5 개의 스레드를 시작 합니다. 주 스레드에서 <xref:System.Threading.Semaphore.Release%28System.Int32%29> 세마포를 입력 하려면 3 개의 스레드를 허용 합니다. 최대값으로 세마포 수를 늘리려면 메서드 오버 로드 합니다. 각 스레드가 사용 하는 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 1 초 동안 기다린 후 작업을 시뮬레이션 한 다음 호출 하는 방법의 <xref:System.Threading.Semaphore.Release> 세마포를 해제 메서드 오버 로드 합니다. 세마포를 해제 될 때마다 이전 세마포 카운트가 표시 됩니다. 콘솔 메시지 세마포 사용을 추적 합니다. 시뮬레이션 된 작업 간격 출력을 쉽게 읽을 수 있도록 각 스레드에 대해 약간 증가 합니다.  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>이 형식은 스레드로부터 안전합니다.</threadsafe>
    <related type="Article" href="~/docs/standard/threading/index.md">관리되는 스레딩</related>
    <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Threading.Semaphore" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount">세마포에 동시에 부여할 수 있는 초기 요청 수입니다.</param>
        <param name="maximumCount">세마포에 동시에 부여할 수 있는 최대 요청 수입니다.</param>
        <summary>초기 항목 수와 최대 동시 항목 수를 지정하여 <see cref="T:System.Threading.Semaphore" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 명명 되지 않은 세마포를 초기화합니다. 이러한 세마포의 인스턴스를 사용 하는 모든 스레드는 인스턴스에 대 한 참조가 있어야 합니다.  
  
 하는 경우 `initialCount` 는 보다 작은 `maximumCount`, 현재 스레드의 호출 하는 것 처럼 효과 동일 <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` 빼기 `initialCount`) 시간입니다. 세마포를 만드는 스레드는 엔트리를 예약 하지 않을 경우 같은 값을 사용 하 여 `maximumCount` 고 `initialCount`입니다.  
  
   
  
## Examples  
 다음 예제에서는 최대 개수 3 및 0에 대 한 초기 카운트를 사용 하 여 세마포를 만듭니다. 이 예제에서는 세마포를 기다리는 동안 차단 하는 5 개의 스레드를 시작 합니다. 주 스레드에서 <xref:System.Threading.Semaphore.Release%28System.Int32%29> 세마포를 입력 하려면 3 개의 스레드를 허용 합니다. 최대값으로 세마포 수를 늘리려면 메서드 오버 로드 합니다. 각 스레드가 사용 하는 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 1 초 동안 기다린 후 작업을 시뮬레이션 한 다음 호출 하는 방법의 <xref:System.Threading.Semaphore.Release> 세마포를 해제 메서드 오버 로드 합니다. 세마포를 해제 될 때마다 이전 세마포 카운트가 표시 됩니다. 콘솔 메시지 세마포 사용을 추적 합니다. 시뮬레이션 된 작업 간격 출력을 쉽게 읽을 수 있도록 각 스레드에 대해 약간 증가 합니다.  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="initialCount" />가 <paramref name="maximumCount" />보다 큰 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumCount" />가 1보다 작습니다.  
  
또는 
 <paramref name="initialCount" />가 0보다 작은 경우</exception>
        <related type="Article" href="~/docs/standard/threading/index.md">관리되는 스레딩</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="initialCount">세마포에 동시에 부여할 수 있는 초기 요청 수입니다.</param>
        <param name="maximumCount">세마포에 동시에 부여할 수 있는 최대 요청 수입니다.</param>
        <param name="name">명명된 시스템 세마포 개체의 이름입니다.</param>
        <summary>초기 항목 수와 최대 동시 항목 수를 지정하고, 시스템 세마포 개체 이름을 선택적으로 지정하여 <see cref="T:System.Threading.Semaphore" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 <xref:System.Threading.Semaphore> 명명된 된 시스템 세마포를 나타내는 개체입니다. 여러 개 만들 수 있습니다 <xref:System.Threading.Semaphore> 명명 된 시스템 세마포가 동일한를 나타내는 개체입니다.  
  
 명명 된 시스템 세마포가 존재 하지 않는 경우 초기 개수 및 지정 된 최대 수를 사용 하 여 생성 됩니다 `initialCount` 고 `maximumCount`입니다. 명명 된 시스템 세마포가 이미 있는 경우 `initialCount` 고 `maximumCount` 잘못 된 값에는 예외가 발생 하더라도 있지만 사용 되지 않습니다. 결정 해야 하는 경우 명명된 된 시스템 세마포를 만들지 여부, 사용 된 <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.String%2CSystem.Boolean%40%29> 생성자 오버 로드를 대신 합니다.  
  
> [!IMPORTANT]
>  권장 되는 방식은 같은 값을 지정 하려면이 생성자 오버 로드를 사용 하면 `initialCount` 고 `maximumCount`입니다. 하는 경우 `initialCount` 는 보다 작은 `maximumCount`, 및 명명된 된 시스템 세마포를 현재 스레드에서 호출 하는 것 처럼 효과 동일 <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` 빼기 `initialCount`) 시간입니다. 그러나이 생성자 오버 로드를 사용 하 여 있습니다 명명 된 시스템 세마포가 만들어졌는지 여부를 확인할 수 없습니다.  
  
 지정 하는 경우 `null` 또는 빈 문자열로 `name`를 호출한 것 처럼 로컬 세마포가 만들어진는 <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> 생성자 오버 로드.  
  
 명명 된 세마포 운영 체제 전체에 표시 되므로, 프로세스 경계를 넘어 리소스 사용을 조정 하기 위해 사용할 수 있습니다.  
  
 명명된 된 시스템 세마포가 존재 하는지 여부 확인을 사용 하려는 경우는 <xref:System.Threading.Semaphore.OpenExisting%2A> 메서드. <xref:System.Threading.Semaphore.OpenExisting%2A> 메서드는 기존 명명 된 세마포를 열려고 시도 하 고 시스템 세마포가 존재 하지 않는 경우 예외를 throw 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 명명 된 세마포 프로세스 간 동작을 보여 줍니다. 이 예제에서는 명명된 된 세마포의 최대 개수가 5와 5 명에 대 한 초기 카운트 프로그램을 세 번 호출 하 여 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드. 두 번째 복사본의 세 번째 호출에서 차단 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우에 따라서 <xref:System.Threading.WaitHandle.WaitOne%2A>합니다. 두 번째 차단을 해제 하려면 프로그램의 첫 번째 복사본에 있는 하나 이상의 항목을 해제 합니다.  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="initialCount" />가 <paramref name="maximumCount" />보다 큰 경우  
  
또는 
 <paramref name="name" />이 260자 보다 긴 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumCount" />가 1보다 작습니다.  
  
또는 
 <paramref name="initialCount" />가 0보다 작은 경우</exception>
        <exception cref="T:System.IO.IOException">Win32 오류가 발생한 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">명명된 세마포가 존재하고 이 세마포에 액세스 제어 보안이 있고 사용자에게 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />이 없는 경우</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">아마도 다른 형식의 대기 핸들에 동일한 이름이 있어서 명명된 세마포를 만들 수 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명명 된 시스템 세마포를 만들지 비관리 코드를 호출 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />  
  
보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다.</permission>
        <related type="Article" href="~/docs/standard/threading/index.md">관리되는 스레딩</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maximumCount As Integer, name As String, ByRef createdNew As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string *  -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name, createdNew)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maximumCount" Type="System.Int32" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="initialCount">동시에 충족될 수 있는 세마포의 초기 요청 수입니다.</param>
        <param name="maximumCount">동시에 충족될 수 있는 세마포의 최대 요청 수입니다.</param>
        <param name="name">명명된 시스템 세마포 개체의 이름입니다.</param>
        <param name="createdNew">이 메서드가 반환될 때 로컬 세마포가 만들어진 경우(즉, <paramref name="name" />이 <see langword="null" />이거나 빈 문자열인 경우) 또는 지정한 명명된 시스템 세마포가 만들어진 경우에는 <see langword="true" />가 포함되고, 지정한 명명된 시스템 세마포가 이미 있는 경우에는 <see langword="false" />가 포함됩니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>초기 항목 수 및 최대 동시 항목 수를 지정하고, 선택적으로 시스템 세마포 개체의 이름을 지정하고, 새 시스템 세마포가 만들어졌는지 여부를 나타내는 값을 받을 변수를 지정하여 <see cref="T:System.Threading.Semaphore" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 <xref:System.Threading.Semaphore> 명명된 된 시스템 세마포를 나타내는 개체입니다. 여러 개 만들 수 있습니다 <xref:System.Threading.Semaphore> 명명 된 시스템 세마포가 동일한를 나타내는 개체입니다.  
  
 명명 된 시스템 세마포가 존재 하지 않는 경우 초기 개수 및 지정 된 최대 수를 사용 하 여 생성 됩니다 `initialCount` 고 `maximumCount`입니다. 명명 된 시스템 세마포가 이미 있는 경우 `initialCount` 고 `maximumCount` 잘못 된 값에는 예외가 발생 하더라도 있지만 사용 되지 않습니다. 사용 하 여 `createdNew` 시스템 세마포가 만들어졌는지 여부를 확인 하려면.  
  
 경우 `initialCount` 는 보다 작은 `maximumCount`, 및 `createdNew` 는 `true`를 현재 스레드에서 호출 하는 것 처럼 효과 동일 <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` 빼기 `initialCount`) 시간입니다.  
  
 지정 하는 경우 `null` 또는 빈 문자열로 `name`를 호출한 것 처럼 로컬 세마포가 만들어진는 <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> 생성자 오버 로드. 이 예에서 `createdNew` 항상 `true`합니다.  
  
 명명 된 세마포 운영 체제 전체에 표시 되므로, 프로세스 경계를 넘어 리소스 사용을 조정 하기 위해 사용할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 명명 된 세마포 프로세스 간 동작을 보여 줍니다. 이 예제에서는 명명된 된 세마포의 최대 개수가 5 및 2의 초기 수를 사용 하 여 즉, 세 가지 생성자를 호출 하는 스레드에 엔트리를 예약 합니다. 경우 `createNew` 됩니다 `false`, 프로그램을 세 번 호출 하는 <xref:System.Threading.WaitHandle.WaitOne%2A> 메서드. 두 번째 복사본의 세 번째 호출에서 차단 됩니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우에 따라서 <xref:System.Threading.WaitHandle.WaitOne%2A>합니다. 두 번째 차단을 해제 하려면 프로그램의 첫 번째 복사본에 있는 하나 이상의 항목을 해제 합니다.  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 4/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="initialCount" />가 <paramref name="maximumCount" />보다 큰 경우  
  
또는 
 <paramref name="name" />이 260자 보다 긴 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumCount" />가 1보다 작습니다.  
  
또는 
 <paramref name="initialCount" />가 0보다 작은 경우</exception>
        <exception cref="T:System.IO.IOException">Win32 오류가 발생한 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">명명된 세마포가 존재하고 이 세마포에 액세스 제어 보안이 있고 사용자에게 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />이 없는 경우</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">아마도 다른 형식의 대기 핸들에 동일한 이름이 있어서 명명된 세마포를 만들 수 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명명 된 시스템 세마포를 만들지 비관리 코드를 호출 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />  
  
보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다.</permission>
        <related type="Article" href="~/docs/standard/threading/index.md">관리되는 스레딩</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew, System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maximumCount, string name, [out] bool&amp; createdNew, class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Semaphore(int initialCount, int maximumCount, System::String ^ name, [Runtime::InteropServices::Out] bool % createdNew, System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberSignature Language="F#" Value="new System.Threading.Semaphore : int * int * string *  * System.Security.AccessControl.SemaphoreSecurity -&gt; System.Threading.Semaphore" Usage="new System.Threading.Semaphore (initialCount, maximumCount, name, createdNew, semaphoreSecurity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="maximumCount" Type="System.Int32" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="createdNew" Type="System.Boolean" RefType="out" Index="3" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" Index="4" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="initialCount">동시에 충족될 수 있는 세마포의 초기 요청 수입니다.</param>
        <param name="maximumCount">동시에 충족될 수 있는 세마포의 최대 요청 수입니다.</param>
        <param name="name">명명된 시스템 세마포 개체의 이름입니다.</param>
        <param name="createdNew">이 메서드가 반환될 때 로컬 세마포가 만들어진 경우(즉, <paramref name="name" />이 <see langword="null" />이거나 빈 문자열인 경우) 또는 지정한 명명된 시스템 세마포가 만들어진 경우에는 <see langword="true" />가 포함되고, 지정한 명명된 시스템 세마포가 이미 있는 경우에는 <see langword="false" />가 포함됩니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <param name="semaphoreSecurity">명명된 시스템 세마포에 적용할 액세스 제어 보안을 나타내는 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 개체입니다.</param>
        <summary>초기 항목 수 및 최대 동시 항목 수를 지정하고, 선택적으로 시스템 세마포 개체의 이름을 지정하고, 새 시스템 세마포가 만들어졌는지 여부를 나타내는 값을 받을 변수를 지정하고, 시스템 세마포에 대한 액세스 제어 보안을 지정하여 <see cref="T:System.Threading.Semaphore" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 세마포 제어 인해 다른 코드를 만들 때 명명 된 시스템 세마포에 액세스 제어 보안을 적용 하려면이 생성자를 사용 합니다.  
  
 이 생성자는 <xref:System.Threading.Semaphore> 명명된 된 시스템 세마포를 나타내는 개체입니다. 여러 개 만들 수 있습니다 <xref:System.Threading.Semaphore> 명명 된 시스템 세마포가 동일한를 나타내는 개체입니다.  
  
 명명 된 시스템 세마포가 존재 하지 않는 경우 지정 된 액세스 제어 보안을 사용 하 여 생성 됩니다. 명명 된 세마포가 존재 하는 경우 지정 된 액세스 제어 보안 무시 됩니다.  
  
> [!NOTE]
>  호출자에 게 완전히 제어할 새로 만든된 <xref:System.Threading.Semaphore> 경우에도 개체 `semaphoreSecurity` 거부 하거나 현재 사용자에 게 일부 액세스 권한을 부여 하지 못했습니다. 그러나 현재 사용자가 다른 <xref:System.Threading.Semaphore> 개체를 나타내는 동일한 명명 된 세마포를 사용 하 여 생성자 또는 <xref:System.Threading.Semaphore.OpenExisting%2A> 메서드를 Windows 액세스 제어 보안이 적용 됩니다.  
  
 명명 된 시스템 세마포가 존재 하지 않는 경우 초기 개수 및 지정 된 최대 수를 사용 하 여 생성 됩니다 `initialCount` 고 `maximumCount`입니다. 명명 된 시스템 세마포가 이미 있는 경우 `initialCount` 고 `maximumCount` 잘못 된 값에는 예외가 발생 하더라도 있지만 사용 되지 않습니다. 사용 된 `createdNew` 매개 변수를이 생성자에 의해 시스템 세마포가 만들어졌는지 여부를 확인 합니다.  
  
 경우 `initialCount` 는 보다 작은 `maximumCount`, 및 `createdNew` 는 `true`를 현재 스레드에서 호출 하는 것 처럼 효과 동일 <xref:System.Threading.WaitHandle.WaitOne%2A> (`maximumCount` 빼기 `initialCount`) 시간입니다.  
  
 지정 하는 경우 `null` 또는 빈 문자열로 `name`를 호출한 것 처럼 로컬 세마포가 만들어진는 <xref:System.Threading.Semaphore.%23ctor%28System.Int32%2CSystem.Int32%29> 생성자 오버 로드. 이 예에서 `createdNew` 항상 `true`합니다.  
  
 명명 된 세마포 운영 체제 전체에 표시 되므로, 프로세스 경계를 넘어 리소스 사용을 조정 하기 위해 사용할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 액세스 제어 보안을 사용 하 여 명명 된 세마포 프로세스 간 동작을 보여 줍니다. 이 예제에서는 사용은 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드 오버 로드는 명명 된 세마포의 존재 여부를 테스트 합니다. 세마포가 존재 하지 않는 경우 두 개의 최대 개수와 세마포를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽기 및 세마포에 대 한 권한이 변경 권한 부여는 액세스 제어 보안을 사용 하 여 생성 됩니다. 두 번째 복사본에 대 한 호출에는 액세스 위반 예외를 throw 합니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드. 예외 포착 되 고이 예제에서는 사용 된 <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한을 사용 하 여 세마포를 엽니다.  
  
 권한이 변경 되 면 세마포를 입력 하 고 해제 하는 데 필요한 권한으로 열려 있습니다. 세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 권한을 사용 하 여 실행 됩니다.  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="initialCount" />가 <paramref name="maximumCount" />보다 큰 경우  
  
또는 
 <paramref name="name" />이 260자 보다 긴 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumCount" />가 1보다 작습니다.  
  
또는 
 <paramref name="initialCount" />가 0보다 작은 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">명명된 세마포가 존재하고 이 세마포에 액세스 제어 보안이 있고 사용자에게 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />이 없는 경우</exception>
        <exception cref="T:System.IO.IOException">Win32 오류가 발생한 경우</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">아마도 다른 형식의 대기 핸들에 동일한 이름이 있어서 명명된 세마포를 만들 수 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명명 된 시스템 세마포를 만들지 비관리 코드를 호출 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다.</permission>
        <related type="Article" href="~/docs/standard/threading/index.md">관리되는 스레딩</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.SemaphoreSecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.SemaphoreSecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.GetAccessControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessControl () As SemaphoreSecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::AccessControl::SemaphoreSecurity ^ GetAccessControl();" />
      <MemberSignature Language="F#" Value="member this.GetAccessControl : unit -&gt; System.Security.AccessControl.SemaphoreSecurity" Usage="semaphore.GetAccessControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreSecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>명명된 시스템 세마포에 대한 액세스 제어 보안을 가져옵니다.</summary>
        <returns>명명된 시스템 세마포에 대한 액세스 제어 보안을 나타내는 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Semaphore.GetAccessControl%2A> 메서드는 다음과 같은 조합을 플래그 (비트 OR 연산을 사용 하 여 결합)를 사용 하 여 사용 권한을 검색할: <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=nameWithType>, <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=nameWithType>, 및 <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=nameWithType>합니다.  
  
 사용자에 게 <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> 세마포 및이 메서드를 호출 하는 권한을 사용 하 여 열려 있어야 <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions?displayProperty=nameWithType> 권한.  
  
 로컬 세마포가에서 액세스 제어 보안은 관련이 없습니다. 경우는 <xref:System.Threading.Semaphore> 개체가 명명된 된 시스템 세마포를 나타내지 않는,이 메서드는 반환을 <xref:System.Security.AccessControl.SemaphoreSecurity> 모든 사용자에 게 모든 권한을 부여 하는 개체입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 액세스 제어 보안을 사용 하 여 명명 된 세마포 프로세스 간 동작을 보여 줍니다. 이 예제에서는 사용은 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드 오버 로드는 명명 된 세마포의 존재 여부를 테스트 합니다.  
  
 세마포가 존재 하지 않는 경우 두 개의 최대 개수와 세마포를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽기 및 세마포에 대 한 권한이 변경 권한 부여는 액세스 제어 보안을 사용 하 여 생성 됩니다.  
  
 두 번째 복사본에 대 한 호출에는 액세스 위반 예외를 throw 합니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드. 예외 포착 되 고이 예제에서는 사용 된 <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한을 사용 하 여 세마포를 엽니다. 사용 하 여 가져온 시스템 세마포에 대 한 액세스 제어 보안을 <xref:System.Threading.Semaphore.GetAccessControl%2A> 메서드.  
  
 권한이 변경 되 면 세마포를 입력 하 고 해제 하는 데 필요한 권한으로 열려 있습니다. 세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 권한을 사용 하 여 실행 됩니다.  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">현재 <see cref="T:System.Threading.Semaphore" /> 개체가 명명된 시스템 세마포를 나타내며 사용자에게 <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> 권한이 없는 경우  
  
또는 
현재 <see cref="T:System.Threading.Semaphore" /> 개체가 명명된 시스템 세마포를 나타내며 <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> 권한으로 열리지 않은 경우</exception>
        <exception cref="T:System.NotSupportedException">Windows 98 또는 Windows Millennium Edition에서 지원되지 않는 경우</exception>
        <related type="Article" href="~/docs/standard/threading/index.md">관리되는 스레딩</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이미 있는 경우 지정한 명명된 세마포를 엽니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string -&gt; System.Threading.Semaphore" Usage="System.Threading.Semaphore.OpenExisting name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">열려는 시스템 세마포의 이름입니다.</param>
        <summary>이미 있는 경우 지정한 명명된 세마포를 엽니다.</summary>
        <returns>명명된 시스템 세마포를 나타내는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Semaphore.OpenExisting%2A> 메서드는 지정 된 명명 된 세마포를 열려고 합니다. 시스템 세마포가 존재 하지 않는 경우이 메서드는 시스템 세마포를 만들지 않고 예외가 throw 됩니다. 시스템 세마포를 만들려면 이미 존재 하지 않을 경우 중 하나를 사용 합니다 <xref:System.Threading.Semaphore.%23ctor%2A> 에 생성자를 `name` 매개 변수입니다.  
  
 에 대해 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.Semaphore> 개체를 나타내는 반환 되는 개체가 동일한 명명 된 시스템 세마포가 합니다.  
  
 이 메서드 오버 로드는 호출에 해당 하는 <xref:System.Threading.Semaphore.OpenExisting%2A> 메서드 오버 로드 하 고 지정 <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> 및 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 권한, 비트 OR 연산을 사용 하 여 결합 합니다.  
  
 지정 하는 <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> 플래그는 스레드가 세마포를 입력 될 수 있습니다 지정 하는 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 플래그는 스레드가 호출 될 수 있습니다는 <xref:System.Threading.Semaphore.Release%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 액세스 제어 보안을 사용 하 여 명명 된 세마포 프로세스 간 동작을 보여 줍니다. 이 예제에서는 사용은 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드 오버 로드는 명명 된 세마포의 존재 여부를 테스트 합니다.  
  
 세마포가 존재 하지 않는 경우 두 개의 최대 개수와 세마포를 사용할 수 있는 권한이 현재 사용자 거부는 하지만 읽기 및 세마포에 대 한 권한이 변경 권한 부여는 액세스 제어 보안을 사용 하 여 생성 됩니다.  
  
 두 번째 복사본에 대 한 호출에는 액세스 위반 예외를 throw 합니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드 오버 로드 합니다. 예외 포착 되 고이 예제에서는 사용 된 <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한을 사용 하 여 세마포를 엽니다.  
  
 권한이 변경 되 면 세마포를 입력 하 고 해제 하는 데 필요한 권한으로 열려 있습니다. 세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 권한을 사용 하 여 실행 됩니다.  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" />이 빈 문자열인 경우  
  
또는 
 <paramref name="name" />이 260자 보다 긴 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">명명된 세마포가 없는 경우</exception>
        <exception cref="T:System.IO.IOException">Win32 오류가 발생한 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">명명된 세마포가 있으나 사용자에게 이를 사용하는 데 필요한 보안 액세스 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명명된 된 시스템 세마포를 열려고 비관리 코드를 호출 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />  
  
보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다.</permission>
        <related type="Article" href="~/docs/standard/threading/index.md">관리되는 스레딩</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <Member MemberName="OpenExisting">
      <MemberSignature Language="C#" Value="public static System.Threading.Semaphore OpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Semaphore OpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenExisting (name As String, rights As SemaphoreRights) As Semaphore" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Semaphore ^ OpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights);" />
      <MemberSignature Language="F#" Value="static member OpenExisting : string * System.Security.AccessControl.SemaphoreRights -&gt; System.Threading.Semaphore" Usage="System.Threading.Semaphore.OpenExisting (name, rights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Semaphore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name">열려는 시스템 세마포의 이름입니다.</param>
        <param name="rights">원하는 보안 액세스 권한을 나타내는 열거형 값의 비트 조합입니다.</param>
        <summary>이미 있는 경우 지정한 명명된 세마포를 원하는 보안 액세스로 엽니다.</summary>
        <returns>명명된 시스템 세마포를 나타내는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `rights` 매개 변수에 포함 되어야 합니다 <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> 세마포를 입력 하는 스레드를 허용 하도록 플래그 및 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 호출 스레드를 허용 하도록 플래그를 <xref:System.Threading.Semaphore.Release%2A> 메서드.  
  
 <xref:System.Threading.Semaphore.OpenExisting%2A> 메서드는 기존 명명 된 세마포를 열려고 합니다. 시스템 세마포가 존재 하지 않는 경우이 메서드는 시스템 세마포를 만들지 않고 예외가 throw 됩니다. 시스템 세마포를 만들려면 이미 존재 하지 않을 경우 중 하나를 사용 합니다 <xref:System.Threading.Semaphore.%23ctor%2A> 에 생성자를 `name` 매개 변수입니다.  
  
 에 대해 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.Semaphore> 개체를 나타내는 반환 되는 개체가 동일한 명명 된 시스템 세마포가 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 액세스 제어 보안을 사용 하 여 명명 된 세마포 프로세스 간 동작을 보여 줍니다. 이 예제에서는 사용은 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드 오버 로드는 명명 된 세마포의 존재 여부를 테스트 합니다.  
  
 세마포가 존재 하지 않는 경우 두 개의 최대 개수와 세마포를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽기 및 세마포에 대 한 권한이 변경 권한 부여는 액세스 제어 보안을 사용 하 여 생성 됩니다.  
  
 두 번째 복사본에 대 한 호출에는 액세스 위반 예외를 throw 합니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드. 예외 포착 되 고이 예제에서는 사용 된 <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한을 사용 하 여 세마포를 엽니다.  
  
 권한이 변경 되 면 세마포를 입력 하 고 해제 하는 데 필요한 권한으로 열려 있습니다. 세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 권한을 사용 하 여 실행 됩니다.  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" />이 빈 문자열인 경우  
  
또는 
 <paramref name="name" />이 260자 보다 긴 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">명명된 세마포가 없는 경우</exception>
        <exception cref="T:System.IO.IOException">Win32 오류가 발생한 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">명명된 세마포가 있지만 사용자에게 원하는 보안 액세스 권한이 없는 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">명명 된 시스템 세마포를 만들지 비관리 코드를 호출 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />  
  
보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다.</permission>
        <related type="Article" href="~/docs/standard/threading/index.md">관리되는 스레딩</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>세마포를 종료합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberSignature Language="F#" Value="member this.Release : unit -&gt; int" Usage="semaphore.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ConstrainedExecution.PrePrepareMethod</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>세마포를 종료하고 이전 카운트를 반환합니다.</summary>
        <returns><see cref="Overload:System.Threading.Semaphore.Release" /> 메서드가 호출되기 전의 세마포 카운트입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스레드는 일반적으로 사용 된 <xref:System.Threading.WaitHandle.WaitOne%2A> 세마포 있으며 일반적으로 입력 방법 종료 하려면이 메서드 오버 로드를 사용 합니다.  
  
 경우는 <xref:System.Threading.SemaphoreFullException> 에 의해 throw 되는 <xref:System.Threading.Semaphore.Release%2A> 메서드를 호출 스레드를 사용 하 여 문제가 반드시 나타내지는지 않습니다. 다른 스레드의 프로그래밍 오류 횟수 보다 더 많이 입력 세마포를 종료 하려면 스레드를 했을 수입니다.  
  
 하는 경우 현재 <xref:System.Threading.Semaphore> 개체가 명명된 된 시스템 세마포를 나타내는 사용자에 게 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 권한과 세마포 열려 있어야 사용 하 여 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 권한.  
  
   
  
## Examples  
 다음 코드 예제에서는 세 개의 최대 개수를 및 0에 대 한 초기 카운트를 사용 하 여 세마포를 만듭니다. 이 예제에서는 세마포를 기다리는 동안 차단 하는 5 개의 스레드를 시작 합니다. 주 스레드에서 <xref:System.Threading.Semaphore.Release%28System.Int32%29> 세마포를 입력 하려면 3 개의 스레드를 허용 합니다. 최대값으로 세마포 수를 늘리려면 메서드 오버 로드 합니다. 각 스레드가 사용 하는 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 1 초 동안 기다린 후 작업을 시뮬레이션 한 다음 호출 하는 방법의 <xref:System.Threading.Semaphore.Release> 세마포를 해제 메서드 오버 로드 합니다.  
  
 세마포를 해제 될 때마다 이전 세마포 카운트가 표시 됩니다. 콘솔 메시지 세마포 사용을 추적 합니다. 시뮬레이션 된 작업 간격 출력을 쉽게 읽을 수 있도록 각 스레드에 대해 약간 증가 합니다.  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SemaphoreFullException">세마포 카운트가 이미 최대값인 경우</exception>
        <exception cref="T:System.IO.IOException">명명된 세마포에서 Win32 오류가 발생한 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">현재 세마포가 명명된 시스템 세마포를 나타내지만 사용자에게 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />가 없는 경우  
  
또는 
현재 세마포가 명명된 시스템 세마포를 나타내지만 세마포가 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />를 사용하여 열리지 않은 경우</exception>
        <related type="Article" href="~/docs/standard/threading/index.md">관리되는 스레딩</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberSignature Language="F#" Value="member this.Release : int -&gt; int" Usage="semaphore.Release releaseCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount">세마포를 종료할 횟수입니다.</param>
        <summary>지정된 횟수만큼 세마포를 종료하고 이전 카운트를 반환합니다.</summary>
        <returns><see cref="Overload:System.Threading.Semaphore.Release" /> 메서드가 호출되기 전의 세마포 카운트입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스레드가 세마포를 여러 번 시작 되었으면,이 메서드 오버 로드는 전체 세마포 카운트를를 호출 하 여 복원할 수 있습니다.  
  
 경우는 <xref:System.Threading.SemaphoreFullException> 에 의해 throw 되는 <xref:System.Threading.Semaphore.Release%2A> 메서드를 호출 스레드를 사용 하 여 문제가 반드시 나타내지는지 않습니다. 다른 스레드의 프로그래밍 오류 횟수 보다 더 많이 입력 세마포를 종료 하려면 스레드를 했을 수입니다.  
  
 하는 경우 현재 <xref:System.Threading.Semaphore> 개체가 명명된 된 시스템 세마포를 나타내는 사용자에 게 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 권한과 세마포 열려 있어야 사용 하 여 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 권한.  
  
   
  
## Examples  
 다음 코드 예제에서는 세 개의 최대 개수를 및 0에 대 한 초기 카운트를 사용 하 여 세마포를 만듭니다. 이 예제에서는 세마포를 기다리는 동안 차단 하는 5 개의 스레드를 시작 합니다. 주 스레드에서 <xref:System.Threading.Semaphore.Release%28System.Int32%29> 세마포를 입력 하려면 3 개의 스레드를 허용 합니다. 최대값으로 세마포 수를 늘리려면 메서드 오버 로드 합니다. 각 스레드가 사용 하는 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 1 초 동안 기다린 후 작업을 시뮬레이션 한 다음 호출 하는 방법의 <xref:System.Threading.Semaphore.Release> 세마포를 해제 메서드 오버 로드 합니다.  
  
 세마포를 해제 될 때마다 이전 세마포 카운트가 표시 됩니다. 콘솔 메시지 세마포 사용을 추적 합니다. 시뮬레이션 된 작업 간격 출력을 쉽게 읽을 수 있도록 각 스레드에 대해 약간 증가 합니다.  
  
 [!code-cpp[System.Threading.Semaphore2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore2/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="releaseCount" />가 1보다 작습니다.</exception>
        <exception cref="T:System.Threading.SemaphoreFullException">세마포 카운트가 이미 최대값인 경우</exception>
        <exception cref="T:System.IO.IOException">명명된 세마포에서 Win32 오류가 발생한 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">현재 세마포가 명명된 시스템 세마포를 나타내지만 사용자에게 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 권한이 없는 경우  
  
또는 
현재 세마포가 명명된 시스템 세마포를 나타내지만 세마포가 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 권한을 사용하여 열리지 않은 경우</exception>
        <related type="Article" href="~/docs/standard/threading/index.md">관리되는 스레딩</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAccessControl(System::Security::AccessControl::SemaphoreSecurity ^ semaphoreSecurity);" />
      <MemberSignature Language="F#" Value="member this.SetAccessControl : System.Security.AccessControl.SemaphoreSecurity -&gt; unit" Usage="semaphore.SetAccessControl semaphoreSecurity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semaphoreSecurity" Type="System.Security.AccessControl.SemaphoreSecurity" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="semaphoreSecurity">명명된 시스템 세마포에 적용할 액세스 제어 보안을 나타내는 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 개체입니다.</param>
        <summary>명명된 시스템 세마포에 대한 액세스 제어 보안을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 액세스 제어 보안을 설정할 수 있습니다 <xref:System.Threading.Semaphore> 명명 된 시스템 세마포를 나타내는 개체입니다.  
  
 사용자에 게 <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> 세마포 및이 메서드를 호출 하는 권한을 사용 하 여 열려 있어야 <xref:System.Security.AccessControl.SemaphoreRights.ChangePermissions?displayProperty=nameWithType> 권한.  
  
   
  
## Examples  
 다음 코드 예제에서는 액세스 제어 보안을 사용 하 여 명명 된 세마포 프로세스 간 동작을 보여 줍니다. 이 예제에서는 사용은 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드 오버 로드는 명명 된 세마포의 존재 여부를 테스트 합니다.  
  
 세마포가 존재 하지 않는 경우 두 개의 최대 개수와 세마포를 사용할 수 있는 권한이 현재 사용자를 거부 하지만 읽기 및 세마포에 대 한 권한이 변경 권한 부여는 액세스 제어 보안을 사용 하 여 생성 됩니다.  
  
 두 번째 복사본에 대 한 호출에는 액세스 위반 예외를 throw 합니다 두 개의 명령 창에서 컴파일된 예제를 실행 하는 경우는 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 메서드. 예외 포착 되 고이 예제에서는 사용 된 <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> 메서드 오버 로드를 읽고 사용 권한을 변경 하는 데 필요한 권한을 사용 하 여 세마포를 엽니다.  
  
 사용 권한을 사용 하 여 변경 된 후의 <xref:System.Threading.Semaphore.SetAccessControl%2A> 메서드, 세마포를 입력 하 고 해제 하는 데 필요한 권한을 사용 하 여 열입니다. 세 번째 명령 창에서 컴파일된 예제를 실행 하는 경우 새 권한을 사용 하 여 실행 됩니다.  
  
 [!code-cpp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/CS/source.cs#1)]
 [!code-vb[System.Threading.Semaphore.ctor named 5a#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Semaphore.ctor named 5a/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="semaphoreSecurity" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.UnauthorizedAccessException">사용자에게 <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> 권한이 없는 경우  
  
또는 
세마포가 <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> 권한을 사용하여 열리지 않은 경우</exception>
        <exception cref="T:System.NotSupportedException">현재 <see cref="T:System.Threading.Semaphore" /> 개체가 명명된 시스템 세마포를 나타내지 않는 경우</exception>
        <related type="Article" href="~/docs/standard/threading/index.md">관리되는 스레딩</related>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">Semaphore</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryOpenExisting">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 명명된 semaphore(이미 존재하는 경우)를 열고 작업이 성공적으로 수행되었는지를 나타내는 값을 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string *  -&gt; bool" Usage="System.Threading.Semaphore.TryOpenExisting (name, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Threading.Semaphore" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name">열려는 시스템 세마포의 이름입니다.</param>
        <param name="result">이 메서드가 반환될 때 호출에 성공한 경우에는 명명된 세마포를 나타내는 <see cref="T:System.Threading.Semaphore" /> 개체를 포함하고 호출에 실패한 경우에는 <see langword="null" />을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
        <summary>지정한 명명된 세마포(이미 존재하는 경우)를 열고 작업이 성공했는지를 나타내는 값을 반환합니다.</summary>
        <returns>명명된 세마포를 열었으면 <see langword="true" />이고, 그 열지 않았으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 명명 된 세마포가 존재 하지 않는 경우이 메서드 만들어지지는지 않습니다 것입니다. 시스템 세마포를 만들려면 이미 존재 하지 않을 경우 중 하나를 사용 합니다 <xref:System.Threading.Semaphore.%23ctor%2A> 에 생성자를 `name` 매개 변수입니다.  
  
 명명된 된 세마포 있는지 확실 하지 않은 경우 대신이 메서드 오버 로드를 사용 합니다 <xref:System.Threading.Semaphore.OpenExisting%28System.String%29> 세마포가 존재 하지 않는 경우 예외를 throw 하는 메서드 오버 로드 합니다.  
  
 이 메서드 오버 로드는 호출에 해당 하는 <xref:System.Threading.Semaphore.TryOpenExisting%2A> 메서드 오버 로드 하 고 지정 <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> 및 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 권한, 비트 OR 연산을 사용 하 여 결합 합니다. 지정 하는 <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> 플래그는 스레드가 세마포를 입력 될 수 있습니다 지정 하는 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 플래그는 스레드가 호출 될 수 있습니다는 <xref:System.Threading.Semaphore.Release%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" />이 빈 문자열인 경우  
  
또는 
 <paramref name="name" />이 260자 보다 긴 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.IO.IOException">Win32 오류가 발생한 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">명명된 세마포가 있으나 사용자에게 이를 사용하는 데 필요한 보안 액세스 권한이 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="TryOpenExisting">
      <MemberSignature Language="C#" Value="public static bool TryOpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights, out System.Threading.Semaphore result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryOpenExisting(string name, valuetype System.Security.AccessControl.SemaphoreRights rights, [out] class System.Threading.Semaphore&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Security.AccessControl.SemaphoreRights,System.Threading.Semaphore@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryOpenExisting (name As String, rights As SemaphoreRights, ByRef result As Semaphore) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryOpenExisting(System::String ^ name, System::Security::AccessControl::SemaphoreRights rights, [Runtime::InteropServices::Out] System::Threading::Semaphore ^ % result);" />
      <MemberSignature Language="F#" Value="static member TryOpenExisting : string * System.Security.AccessControl.SemaphoreRights *  -&gt; bool" Usage="System.Threading.Semaphore.TryOpenExisting (name, rights, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rights" Type="System.Security.AccessControl.SemaphoreRights" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Threading.Semaphore" RefType="out" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="name">열려는 시스템 세마포의 이름입니다.</param>
        <param name="rights">원하는 보안 액세스 권한을 나타내는 열거형 값의 비트 조합입니다.</param>
        <param name="result">이 메서드가 반환될 때 호출에 성공한 경우에는 명명된 세마포를 나타내는 <see cref="T:System.Threading.Semaphore" /> 개체를 포함하고 호출에 실패한 경우에는 <see langword="null" />을 포함합니다. 이 매개 변수는 초기화되지 않은 것으로 처리됩니다.</param>
        <summary>지정한 명명된 세마포(이미 존재하는 경우)를 원하는 보안 액세스로 열고 작업이 성공적으로 수행되었는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>명명된 세마포를 열었으면 <see langword="true" />이고, 그 열지 않았으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 명명 된 세마포가 존재 하지 않는 경우이 메서드 만들어지지는지 않습니다 것입니다. 시스템 세마포를 만들려면 이미 존재 하지 않을 경우 중 하나를 사용 합니다 <xref:System.Threading.Semaphore.%23ctor%2A> 에 생성자를 `name` 매개 변수입니다.  
  
 명명된 된 세마포 있는지 확실 하지 않은 경우 대신이 메서드 오버 로드를 사용 합니다 <xref:System.Threading.Semaphore.OpenExisting%28System.String%2CSystem.Security.AccessControl.SemaphoreRights%29> 세마포가 존재 하지 않는 경우 예외를 throw 하는 메서드 오버 로드 합니다.  
  
 `rights` 매개 변수에 포함 되어야 합니다 <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> 세마포를 입력 하는 스레드를 허용 하도록 플래그 및 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> 호출 스레드를 허용 하도록 플래그를 <xref:System.Threading.Semaphore.Release%2A> 메서드.  
  
 에 대해 동일한 값을 사용 하는이 메서드를 여러 번 호출 `name` 동일한 반드시 반환 하지 않는 <xref:System.Threading.Semaphore> 개체를 나타내는 반환 되는 개체가 동일한 명명 된 시스템 세마포가 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" />이 빈 문자열인 경우  
  
또는 
 <paramref name="name" />이 260자 보다 긴 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.IO.IOException">Win32 오류가 발생한 경우</exception>
        <exception cref="T:System.UnauthorizedAccessException">명명된 세마포가 있으나 사용자에게 이를 사용하는 데 필요한 보안 액세스 권한이 없는 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>