<Type Name="SemaphoreSlim" FullName="System.Threading.SemaphoreSlim">
  <Metadata><Meta Name="ms.openlocfilehash" Value="883d144e65efaa726c8b45cf100640d7f3d7a0cd" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58733058" /></Metadata><TypeSignature Language="C#" Value="public class SemaphoreSlim : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemaphoreSlim extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SemaphoreSlim" />
  <TypeSignature Language="VB.NET" Value="Public Class SemaphoreSlim&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemaphoreSlim : IDisposable" />
  <TypeSignature Language="F#" Value="type SemaphoreSlim = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Current Count = {m_currentCount}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>리소스 또는 리소스 풀에 동시에 액세스할 수 있는 스레드 수를 제한하는 <see cref="T:System.Threading.Semaphore" /> 대신 사용할 수 있는 간단한 클래스를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 세마포는 두 가지 유형입니다: 로컬 세마포 및 명명 된 시스템 세마포 합니다. 이전 앱에 로컬입니다. 후자는 운영 체제 전체에서 볼 수 있으며 프로세스 간 동기화에 적합 합니다. 합니다 <xref:System.Threading.SemaphoreSlim> 경량 대체 되는 <xref:System.Threading.Semaphore> Windows 커널 세마포를 사용 하지 않는 클래스. 와 달리 합니다 <xref:System.Threading.Semaphore> 클래스는 <xref:System.Threading.SemaphoreSlim> 클래스 명명 된 시스템 세마포를 지원 하지 않습니다. 만 로컬 세마포가으로 사용할 수 있습니다. <xref:System.Threading.SemaphoreSlim> 클래스는 단일 앱 내에서 동기화에 대 한 권장 되는 세마포 합니다.  
  
 응용 프로그램에 로컬 리소스의 풀에 대 한 액세스를 제어 하는 간단한 세마포입니다. 세마포를 인스턴스화할 때 동시에 세마포를 입력할 수 있는 스레드의 최대 수를 지정할 수 있습니다. 또한 초기 세마포를 동시에 입력할 수 있는 스레드 수를 지정 합니다. 세마포의 카운트가 정의합니다.  
  
 카운트가 감소 될 때마다 스레드가 세마포를 입력 하 고 될 때마다 증가 스레드 세마포를 해제 합니다. 세마포를 입력 하려면 스레드 중 하나를 호출 합니다 <xref:System.Threading.SemaphoreSlim.Wait%2A> 또는 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 오버 로드 합니다. 세마포를 해제 하려면 호출 중 하나는 <xref:System.Threading.SemaphoreSlim.Release%2A> 오버 로드 합니다. 0, 중 하나에 대 한 후속 호출 수에 도달 하는 경우는 `Wait` 메서드는 다른 스레드가 세마포를 해제할 때까지 차단 합니다. 여러 스레드가 차단 되 면 순서가 없습니다 보장, FIFO, LIFO 등을 제어 하는 스레드가 세마포를 입력 하는 경우.  
  
 세마포를 사용 하 여 리소스를 보호 하는 코드에 대 한 기본 구조는 다음과 같습니다.  
  
```vb  
  
' Enter semaphore by calling one of the Wait or WaitAsync methods.  
SemaphoreSlim.Wait()  
'   
' Execute code protected by the semaphore.   
'  
SemaphoreSlim.Release()  
  
```  
  
 모든 스레드가 세마포를 해제 한 경우 개수는 최 댓 값에 만들어질 때 지정 된 세마포 합니다. 세마포의 카운트가에서 사용할 수는 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성입니다.  
  
> [!IMPORTANT]
>  합니다 <xref:System.Threading.SemaphoreSlim> 클래스에 대 한 호출에서 스레드 또는 작업 id를 적용 하지는 <xref:System.Threading.SemaphoreSlim.Wait%2A>, <xref:System.Threading.SemaphoreSlim.WaitAsync%2A>, 및 <xref:System.Threading.SemaphoreSlim.Release%2A> 메서드. 또한 경우는 <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%29> 생성자를 인스턴스화하는 <xref:System.Threading.SemaphoreSlim> 개체는 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성 생성자가 설정한 값 보다 큰 늘릴 수 있습니다. 프로그래머 하도록 호출 하는 것 <xref:System.Threading.SemaphoreSlim.Wait%2A> 하거나 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 메서드를 호출 하 여 적절 하 게 페어링되어 <xref:System.Threading.SemaphoreSlim.Release%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 세 개의 스레드 최대 수 및 0 개 스레드 초기 수를 사용 하 여 세마포를 만듭니다. 이 예제에서는 세마포를 기다리는 동안 차단 하는 모든 5 개의 작업을 시작 합니다. 주 스레드에서 호출을 <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> 세마포를 입력 하려면 세 가지 작업을 허용 하는 최대값으로 세마포 수를 늘리려면 오버 로드 합니다. 세마포를 해제 될 때마다 이전 세마포 카운트가 표시 됩니다. 콘솔 메시지 세마포 사용을 추적 합니다. 시뮬레이션 된 작업 간격 출력을 쉽게 읽을 수 있도록 각 스레드에 대해 약간 증가 합니다.  
  
 [!code-csharp[System.Threading.SemaphoreSlim#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.semaphoreslim/cs/example.cs#1)]
 [!code-vb[System.Threading.SemaphoreSlim#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.semaphoreslim/vb/example.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>모든 public 및 protected 멤버만 <see cref="T:System.Threading.SemaphoreSlim" /> 는 스레드로부터 안전 하 고 제외 여러 스레드에서 동시에 사용할 수 있습니다 <see cref="M:System.Threading.SemaphoreSlim.Dispose" />, 사용 되어야 하는 경우에만 다른 모든 작업에는 <see cref="T:System.Threading.SemaphoreSlim" /> 완료 합니다.</threadsafe>
    <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">세마포 및 SemaphoreSlim</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Threading.SemaphoreSlim" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.SemaphoreSlim : int -&gt; System.Threading.SemaphoreSlim" Usage="new System.Threading.SemaphoreSlim initialCount" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount">세마포에 동시에 부여할 수 있는 초기 요청 수입니다.</param>
        <summary>동시에 부여할 수 있는 초기 요청 수를 지정하여 <see cref="T:System.Threading.SemaphoreSlim" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `initialCount` 부여할 수 있는 세마포를 입력 하기 위한 동시 요청 수를 정의 하는 매개 변수입니다. 그러나이 동시에 부여할 수 있는 요청의 최대 수를 정의 하지 않습니다. <xref:System.Threading.SemaphoreSlim> 이 생성자를 호출 하 여 개체를 throw 하지 않습니다는 <xref:System.Threading.SemaphoreFullException> 호출 하는 경우 예외를 <xref:System.Threading.SemaphoreSlim.Release%2A> 메서드 값을 증가 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 초과 속성 `initialCount`합니다. 더 많은 호출을 경우 이런 <xref:System.Threading.SemaphoreSlim.Release%2A> 보다 적은 방법이 하 <xref:System.Threading.SemaphoreSlim.Wait%2A> 또는 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 메서드. 를 부여할 수 있는 세마포를 입력할 수 있는 동시 요청의 최대 수를 설정 하려면 호출을 <xref:System.Threading.SemaphoreSlim.%23ctor%28System.Int32%2CSystem.Int32%29> 생성자입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="initialCount" />가 0보다 작은 경우</exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">세마포 및 SemaphoreSlim</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSlim (int initialCount, int maxCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCount, int32 maxCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCount As Integer, maxCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreSlim(int initialCount, int maxCount);" />
      <MemberSignature Language="F#" Value="new System.Threading.SemaphoreSlim : int * int -&gt; System.Threading.SemaphoreSlim" Usage="new System.Threading.SemaphoreSlim (initialCount, maxCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCount" Type="System.Int32" />
        <Parameter Name="maxCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCount">세마포에 동시에 부여할 수 있는 초기 요청 수입니다.</param>
        <param name="maxCount">세마포에 동시에 부여할 수 있는 최대 요청 수입니다.</param>
        <summary>동시에 부여할 수 있는 초기 및 최대 요청 수를 지정하여 <see cref="T:System.Threading.SemaphoreSlim" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="initialCount" />가 0보다 작거나 <paramref name="initialCount" />가 <paramref name="maxCount" />보다 크거나 <paramref name="maxCount" />가 0보다 작거나 같은 경우.</exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">세마포 및 SemaphoreSlim</related>
      </Docs>
    </Member>
    <Member MemberName="AvailableWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AvailableWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AvailableWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.AvailableWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AvailableWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AvailableWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AvailableWaitHandle : System.Threading.WaitHandle" Usage="System.Threading.SemaphoreSlim.AvailableWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>세마포에서 대기하는 데 사용할 수 있는 <see cref="T:System.Threading.WaitHandle" />을(를) 반환합니다.</summary>
        <value>세마포에서 대기하는 데 사용할 수 있는 <see cref="T:System.Threading.WaitHandle" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 동일한 대기 핸들을 사용 하 여 다른 커널 기반 동기화 개체와 함께 SemaphoreSlim에서 대기 해야 하는 경우에이 속성을 사용 합니다. 성공적인 대기 합니다 <xref:System.Threading.SemaphoreSlim.AvailableWaitHandle%2A> 에 성공적으로 대기를 의미 하지는 않습니다는 <xref:System.Threading.SemaphoreSlim> 자체 세마포의 카운트가 감소 하거나 합니다. 대기 해야 사용할 수 있는 대기 핸들이 신호를 받을 후는 <xref:System.Threading.SemaphoreSlim> 특히 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.SemaphoreSlim" />가 삭제된 경우</exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">세마포 및 SemaphoreSlim</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentCount">
      <MemberSignature Language="C#" Value="public int CurrentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SemaphoreSlim.CurrentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCount : int" Usage="System.Threading.SemaphoreSlim.CurrentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Threading.SemaphoreSlim" /> 개체에 들어갈 수 있는 남아 있는 스레드의 수를 가져옵니다.</summary>
        <value>세마포에 들어갈 수 있는 남아 있는 스레드의 수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 초기 값을 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 에 대 한 호출에서 속성을 설정 합니다 <xref:System.Threading.SemaphoreSlim.%23ctor%2A> 클래스 생성자입니다. 각 호출 하 여 감소는 <xref:System.Threading.SemaphoreSlim.Wait%2A> 또는 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 메서드를 호출할 때마다 씩 증가 하는 <xref:System.Threading.SemaphoreSlim.Release%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">세마포 및 SemaphoreSlim</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Threading.SemaphoreSlim" /> 클래스의 현재 인스턴스에서 사용하는 리소스를 해제합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="semaphoreSlim.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Threading.SemaphoreSlim" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Dispose` 사용을 마치면 <xref:System.Threading.SemaphoreSlim>를 호출합니다. `Dispose` 메서드를 사용하면 <xref:System.Threading.SemaphoreSlim>를 사용할 수 없게 됩니다. 호출한 후 `Dispose`에 대 한 모든 참조를 해제 해야 합니다 <xref:System.Threading.SemaphoreSlim> 가비지 수집기에서 메모리를 회수할 수 있도록 하는 <xref:System.Threading.SemaphoreSlim> 차지한 합니다.  
  
 자세한 내용은 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 하 고 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.  
  
> [!NOTE]
>  `Dispose`에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.Threading.SemaphoreSlim>를 호출하십시오. 이렇게 하지 않으면 가비지 컬렉션이 <xref:System.Threading.SemaphoreSlim> 개체의 `Finalize` 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">세마포 및 SemaphoreSlim</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="semaphoreSlim.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
        <summary><see cref="T:System.Threading.SemaphoreSlim" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 멤버와 달리 <xref:System.Threading.SemaphoreSlim>, <xref:System.Threading.SemaphoreSlim.Dispose%2A> 스레드로부터 안전한 아니며이 인스턴스의 다른 멤버와 동시에 사용할 수 없습니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">세마포 및 SemaphoreSlim</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Release">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Threading.SemaphoreSlim" /> 개체를 해제합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release" />
      <MemberSignature Language="VB.NET" Value="Public Function Release () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release();" />
      <MemberSignature Language="F#" Value="member this.Release : unit -&gt; int" Usage="semaphoreSlim.Release " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Threading.SemaphoreSlim" /> 개체를 한 번 해제합니다.</summary>
        <returns><see cref="T:System.Threading.SemaphoreSlim" />의 이전 횟수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 호출을 <xref:System.Threading.SemaphoreSlim.Release> 메서드 증가 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성을 1 씩입니다. 경우의 값을 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성은 0이이 메서드가 호출 되기 전에, 메서드 한 스레드 또는 작업에 대 한 호출에 의해 차단 수도 있습니다는 <xref:System.Threading.SemaphoreSlim.Wait%2A> 또는 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 세마포를 입력 하는 방법입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
        <exception cref="T:System.Threading.SemaphoreFullException"><see cref="T:System.Threading.SemaphoreSlim" />이 이미 최대 크기에 도달했습니다.</exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">세마포 및 SemaphoreSlim</related>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public int Release (int releaseCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Release(int32 releaseCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Release(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Release (releaseCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Release(int releaseCount);" />
      <MemberSignature Language="F#" Value="member this.Release : int -&gt; int" Usage="semaphoreSlim.Release releaseCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="releaseCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="releaseCount">세마포를 종료할 횟수입니다.</param>
        <summary><see cref="T:System.Threading.SemaphoreSlim" /> 개체를 지정된 횟수만큼 해제합니다.</summary>
        <returns><see cref="T:System.Threading.SemaphoreSlim" />의 이전 횟수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 호출을 <xref:System.Threading.SemaphoreSlim.Release%28System.Int32%29> 메서드 증가 합니다 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성 `releaseCount`합니다. 경우의 값을 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성이 0 이면이 메서드가 호출 되기 전에 메서드가 있습니다 `releaseCount` 스레드 또는 작업에 대 한 호출에 의해 차단 합니다 <xref:System.Threading.SemaphoreSlim.Wait%2A> 또는 <xref:System.Threading.SemaphoreSlim.WaitAsync%2A> 세마포를 입력 하는 방법입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="releaseCount" />가 1보다 작습니다.</exception>
        <exception cref="T:System.Threading.SemaphoreFullException"><see cref="T:System.Threading.SemaphoreSlim" />이 이미 최대 크기에 도달했습니다.</exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">세마포 및 SemaphoreSlim</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>현재 스레드가 <see cref="T:System.Threading.SemaphoreSlim" />에 진입할 수 있을 때까지 스레드를 차단합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberSignature Language="F#" Value="member this.Wait : unit -&gt; unit" Usage="semaphoreSlim.Wait " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 스레드가 <see cref="T:System.Threading.SemaphoreSlim" />에 진입할 수 있을 때까지 스레드를 차단합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 작업이 나 스레드에 세마포를 입력할 수 있으면이 감소는 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성을 1 씩입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">세마포 및 SemaphoreSlim</related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : int -&gt; bool" Usage="semaphoreSlim.Wait millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">대기하는 시간(밀리초), 무기한 대기하는 <see cref="F:System.Threading.Timeout.Infinite" />(-1) 또는 대기 핸들의 상태를 검사하고 즉시 반환하는 0입니다.</param>
        <summary>시간 제한을 지정하는 부호 있는 32비트 정수를 사용하여 현재 스레드가 <see cref="T:System.Threading.SemaphoreSlim" />에 진입할 수 있을 때까지 스레드를 차단합니다.</summary>
        <returns>현재 스레드가 <see cref="T:System.Threading.SemaphoreSlim" />에 진입했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks 
시간 제한이-1 시간 (밀리초)로 설정 된 경우 메서드는 무기한 대기 합니다.
 
제한 시간이 0 밀리초로 설정 되어 메서드 차단 하지 않습니다. 대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.

작업이 나 스레드에 세마포를 입력할 수 있으면이 감소는 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성을 1 씩입니다.  
  
스레드 또는 작업을 호출 하는 경우 차단 된 경우 <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%29> 으로 지정 된 시간 제한 간격 `millisecondsTimeout` 만료:

- 스레드 또는 작업 세마포를 입력 하지 않습니다.
- <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성은 감소 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout" />이 무기한 시간 제한을 나타내는 -1 이외의 음수이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.SemaphoreSlim" />가 삭제된 경우</exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">세마포 및 SemaphoreSlim</related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : System.Threading.CancellationToken -&gt; unit" Usage="semaphoreSlim.Wait cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">확인할 <see cref="T:System.Threading.CancellationToken" /> 토큰입니다.</param>
        <summary><see cref="T:System.Threading.SemaphoreSlim" />을 확인하면서 현재 스레드가 <see cref="T:System.Threading.CancellationToken" />에 진입할 수 있을 때까지 스레드를 차단합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 작업이 나 스레드에 세마포를 입력할 수 있으면이 감소는 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성을 1 씩입니다.  
  
 하는 경우 `cancellationToken` 는 취소 작업이 나 스레드에 입력 하지 세마포 및 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성은 감소 합니다. 메서드가 throw 하는 대신는 <xref:System.OperationCanceledException> 예외입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken" />이 취소되었습니다.</exception>
        <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우  
  
또는 
<paramref name="cancellationToken" />을 만든 <see cref="T:System.Threading.CancellationTokenSource" />가 이미 삭제되었습니다.</exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">세마포 및 SemaphoreSlim</related>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md">취소</related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan -&gt; bool" Usage="semaphoreSlim.Wait timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">대기하는 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />, 무기한 대기하는 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" /> 또는 대기 핸들을 테스트하고 즉시 반환하는 0밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</param>
        <summary><see cref="T:System.Threading.SemaphoreSlim" />으로 시간 제한을 지정하여 현재 스레드가 <see cref="T:System.TimeSpan" />에 진입할 수 있을 때까지 스레드를 차단합니다.</summary>
        <returns>현재 스레드가 <see cref="T:System.Threading.SemaphoreSlim" />에 진입했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
시간 제한이-1 시간 (밀리초)로 설정 된 경우 메서드는 무기한 대기 합니다.
 
제한 시간이 0 밀리초로 설정 되어 메서드 차단 하지 않습니다. 대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다. 
 
작업이 나 스레드에 세마포를 입력할 수 있으면이 감소는 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성을 1 씩입니다.  
  
스레드 또는 작업을 호출 하는 경우 차단 된 경우 <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%29> 으로 지정 된 시간 제한 간격 `millisecondsTimeout` 만료:

- 스레드 또는 작업 세마포를 입력 하지 않습니다.
- <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성은 감소 합니다.   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />이 무기한 시간 제한을 나타내는 -1 이외의 음수이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
        <exception cref="T:System.ObjectDisposedException">semaphoreSlim 인스턴스가 삭제되었습니다.<paramref name="." /></exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">세마포 및 SemaphoreSlim</related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : int * System.Threading.CancellationToken -&gt; bool" Usage="semaphoreSlim.Wait (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">대기하는 시간(밀리초), 무기한 대기하는 <see cref="F:System.Threading.Timeout.Infinite" />(-1) 또는 대기 핸들의 상태를 검사하고 즉시 반환하는 0입니다.</param>
        <param name="cancellationToken">확인할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
        <summary><see cref="T:System.Threading.SemaphoreSlim" />을 확인하면서 시간 제한을 지정하는 부호 있는 32비트 정수를 사용하여 현재 스레드가 <see cref="T:System.Threading.CancellationToken" />에 진입할 수 있을 때까지 스레드를 차단합니다.</summary>
        <returns>현재 스레드가 <see cref="T:System.Threading.SemaphoreSlim" />에 진입했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
시간 제한이-1 시간 (밀리초)로 설정 된 경우 메서드는 무기한 대기 합니다.
 
제한 시간이 0 밀리초로 설정 되어 메서드 차단 하지 않습니다. 대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다.

작업이 나 스레드에 세마포를 입력할 수 있으면이 감소는 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성을 1 씩입니다.  
  
하는 경우 `cancellationToken` 취소 스레드 또는 작업을 호출 하는 경우 차단 된 경우 또는 <xref:System.Threading.SemaphoreSlim.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> 로 지정 된 시간 제한 간격 `millisecondsTimeout` 만료:

- 스레드 또는 작업 세마포를 입력 하지 않습니다.
- <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성은 감소 합니다.  
 
하는 경우 `cancellationToken` 는 메서드에서 throw 취소는 <xref:System.OperationCanceledException> 예외입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken" />이 취소되었습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout" />이 무기한 시간 제한을 나타내는 -1 이외의 음수이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.SemaphoreSlim" /> 인스턴스가 삭제되었거나 <paramref name="cancellationToken" />을 만든 <see cref="T:System.Threading.CancellationTokenSource" />가 삭제되었습니다.</exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">세마포 및 SemaphoreSlim</related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan * System.Threading.CancellationToken -&gt; bool" Usage="semaphoreSlim.Wait (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout">대기하는 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />, 무기한 대기하는 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" /> 또는 대기 핸들을 테스트하고 즉시 반환하는 0밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</param>
        <param name="cancellationToken">확인할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
        <summary><see cref="T:System.Threading.SemaphoreSlim" />을 확인하면서 시간 제한을 지정하는 <see cref="T:System.TimeSpan" />을 사용하여 현재 스레드가 <see cref="T:System.Threading.CancellationToken" />에 진입할 수 있을 때까지 스레드를 차단합니다.</summary>
        <returns>현재 스레드가 <see cref="T:System.Threading.SemaphoreSlim" />에 진입했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
시간 제한이-1 시간 (밀리초)로 설정 된 경우 메서드는 무기한 대기 합니다.
 
제한 시간이 0 밀리초로 설정 되어 메서드 차단 하지 않습니다. 대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다. 

작업이 나 스레드에 세마포를 입력할 수 있으면이 감소는 <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성을 1 씩입니다.  
  
하는 경우 `cancellationToken` 취소 스레드 또는 작업을 호출 하는 경우 차단 된 경우 또는 <xref:System.Threading.SemaphoreSlim.Wait%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> 로 지정 된 시간 제한 간격 `millisecondsTimeout` 만료:

- 스레드 또는 작업 세마포를 입력 하지 않습니다.
- <xref:System.Threading.SemaphoreSlim.CurrentCount%2A> 속성은 감소 합니다.  

하는 경우 `cancellationToken` 는 메서드에서 throw 취소는 <xref:System.OperationCanceledException> 예외입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken" />이 취소되었습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" />이 무기한 시간 제한을 나타내는 -1 이외의 음수이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
        <exception cref="T:System.ObjectDisposedException">semaphoreSlim 인스턴스가 삭제되었습니다.<paramref name="." /><paramref name="-or-" />  
  
<paramref name="cancellationToken" />을 만든 <see cref="T:System.Threading.CancellationTokenSource" />가 이미 삭제되었습니다.</exception>
        <related type="Article" href="~/docs/standard/threading/semaphore-and-semaphoreslim.md">세마포 및 SemaphoreSlim</related>
        <related type="Article" href="~/docs/standard/threading/cancellation-in-managed-threads.md">취소</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAsync">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Threading.SemaphoreSlim" />으로 전환될 때까지 비동기적으로 기다립니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync();" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : unit -&gt; System.Threading.Tasks.Task" Usage="semaphoreSlim.WaitAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Threading.SemaphoreSlim" />으로 전환될 때까지 비동기적으로 기다립니다.</summary>
        <returns>세마포가 입력되었을 때 완료될 작업입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.SemaphoreSlim" />가 삭제된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (millisecondsTimeout As Integer) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : int -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">대기하는 시간(밀리초), 무기한 대기하는 <see cref="F:System.Threading.Timeout.Infinite" />(-1) 또는 대기 핸들의 상태를 검사하고 즉시 반환하는 0입니다.</param>
        <summary>32비트 부호 있는 정수를 사용하여 시간 간격을 측정하여 <see cref="T:System.Threading.SemaphoreSlim" />으로 전환될 때까지 비동기적으로 기다립니다.</summary>
        <returns>현재 스레드가 성공적으로 <see cref="T:System.Threading.SemaphoreSlim" />에 들어온 경우 <see langword="true" />의 결과로 완료되는 작업이고, 그렇지 않으면 <see langword="false" />의 결과로 완료되는 작업입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 시간 제한이-1 시간 (밀리초)로 설정 된 경우 메서드는 무기한 대기 합니다.
 
 제한 시간이 0 밀리초로 설정 되어 메서드 차단 하지 않습니다. 대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다. 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout" />이 무기한 시간 제한을 나타내는 -1 이외의 음수이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WaitAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WaitAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WaitAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="semaphoreSlim.WaitAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">확인할 <see cref="T:System.Threading.CancellationToken" /> 토큰입니다.</param>
        <summary><see cref="T:System.Threading.SemaphoreSlim" />을 관찰하는 동안 <see cref="T:System.Threading.CancellationToken" />으로 전환될 때까지 비동기적으로 기다립니다.</summary>
        <returns>세마포가 입력되었을 때 완료될 작업입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken" />이 취소되었습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitAsync (timeout As TimeSpan) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : TimeSpan -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="timeout">대기하는 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />, 무기한 대기하는 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" /> 또는 대기 핸들을 테스트하고 즉시 반환하는 0밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</param>
        <summary><see cref="T:System.Threading.SemaphoreSlim" />을 사용하여 시간 간격을 측정하여 <see cref="T:System.TimeSpan" />으로 전환될 때까지 비동기적으로 기다립니다.</summary>
        <returns>현재 스레드가 성공적으로 <see cref="T:System.Threading.SemaphoreSlim" />에 들어온 경우 <see langword="true" />의 결과로 완료되는 작업이고, 그렇지 않으면 <see langword="false" />의 결과로 완료되는 작업입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 시간 제한이-1 시간 (밀리초)로 설정 된 경우 메서드는 무기한 대기 합니다.
 
 제한 시간이 0 밀리초로 설정 되어 메서드 차단 하지 않습니다. 대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다. 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout" />이 무기한 시간 제한을 나타내는 -1 이외의 음수이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">대기하는 시간(밀리초), 무기한 대기하는 <see cref="F:System.Threading.Timeout.Infinite" />(-1) 또는 대기 핸들의 상태를 검사하고 즉시 반환하는 0입니다.</param>
        <param name="cancellationToken">확인할 <see cref="T:System.Threading.CancellationToken" />입니다.</param>
        <summary><see cref="T:System.Threading.SemaphoreSlim" />을 관찰하는 동안 32비트 부호 있는 정수를 사용하여 시간 간격을 측정하여 <see cref="T:System.Threading.CancellationToken" />으로 전환될 때까지 비동기적으로 기다립니다.</summary>
        <returns>현재 스레드가 성공적으로 <see cref="T:System.Threading.SemaphoreSlim" />에 들어온 경우 <see langword="true" />의 결과로 완료되는 작업이고, 그렇지 않으면 <see langword="false" />의 결과로 완료되는 작업입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 시간 제한이-1 시간 (밀리초)로 설정 된 경우 메서드는 무기한 대기 합니다.
 
 제한 시간이 0 밀리초로 설정 되어 메서드 차단 하지 않습니다. 대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다. 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout" />이 무기한 시간 제한을 나타내는 -1 이외의 숫자이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
        <exception cref="T:System.ObjectDisposedException">현재 인스턴스가 이미 삭제된 경우</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken" />이 취소되었습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; WaitAsync (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; WaitAsync(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;bool&gt; ^ WaitAsync(TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WaitAsync : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="semaphoreSlim.WaitAsync (timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="timeout">대기하는 시간(밀리초)을 나타내는 <see cref="T:System.TimeSpan" />, 무기한 대기하는 -1밀리초를 나타내는 <see cref="T:System.TimeSpan" /> 또는 대기 핸들을 테스트하고 즉시 반환하는 0밀리초를 나타내는 <see cref="T:System.TimeSpan" />입니다.</param>
        <param name="cancellationToken">확인할 <see cref="T:System.Threading.CancellationToken" /> 토큰입니다.</param>
        <summary><see cref="T:System.Threading.SemaphoreSlim" />을 관찰하는 동안 <see cref="T:System.TimeSpan" />을 사용하여 시간 간격을 측정하여 <see cref="T:System.Threading.CancellationToken" />으로 전환될 때까지 비동기적으로 기다립니다.</summary>
        <returns>현재 스레드가 성공적으로 <see cref="T:System.Threading.SemaphoreSlim" />에 들어온 경우 <see langword="true" />의 결과로 완료되는 작업이고, 그렇지 않으면 <see langword="false" />의 결과로 완료되는 작업입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 시간 제한이-1 시간 (밀리초)로 설정 된 경우 메서드는 무기한 대기 합니다.

 제한 시간이 0 밀리초로 설정 되어 메서드 차단 하지 않습니다. 대기 핸들의 상태를 테스트 하 고 즉시 반환 합니다. 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="millisecondsTimeout" />이 무기한 시간 제한을 나타내는 -1 이외의 음수이거나 시간 제한이 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
        <exception cref="T:System.OperationCanceledException"><paramref name="cancellationToken" />이 취소되었습니다.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.SemaphoreSlim" />가 삭제된 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>