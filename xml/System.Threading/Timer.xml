<Type Name="Timer" FullName="System.Threading.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="49a9b90c29fb506f13fbc9ad9b14c101b5c74ccf" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65014220" /></Metadata><TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Timer&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-uwp-10.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>지정된 간격으로 스레드 풀 스레드에 대해 메서드를 실행하는 메커니즘을 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Threading.TimerCallback> 메서드를 지정 하는 대리자는 <xref:System.Threading.Timer> 실행 합니다. 시그니처는 <xref:System.Threading.TimerCallback> 대리자는:  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 타이머 대리자는 타이머를 생성 하 고 변경할 수 없습니다 지정 됩니다. 메서드는 타이머;를 만든 스레드에서 실행 되지 않습니다. 실행을 <xref:System.Threading.ThreadPool> 시스템에서 제공 하는 스레드입니다.  
  
> [!TIP]
> 라는 4 개의 클래스를 포함 하는.NET `Timer`각각 서로 다른 기능을 제공 하는 중:  
>
> - <xref:System.Timers.Timer?displayProperty=nameWithType>또는 정기적으로 더 많은 이벤트 싱크 이벤트가 발생 하며 하나에서 코드를 실행 합니다. 클래스는 다중 스레드 환경에서 서비스 구성 요소 또는 서버를 기반으로 사용 하기 위한 것 사용자 인터페이스가 없는 하 고 런타임 시 표시 되지 않습니다.
> - <xref:System.Threading.Timer?displayProperty=nameWithType>를 정기적으로 스레드 풀 스레드에서 단일 콜백 메서드를 실행 하는 합니다. 타이머 인스턴스화되고 변경할 수 없는 경우 콜백 메서드가 정의 됩니다. 같은 <xref:System.Timers.Timer?displayProperty=nameWithType> 클래스는 다중 스레드 환경에서 서버 기반 또는 서비스 구성 요소로 사용 하기 위해이 클래스를 사용 하며 사용자 인터페이스가 없는 런타임에 표시 되지 않습니다.
> - <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET framework만 해당), 이벤트가 발생 하 고 정기적으로 이벤트 싱크를 하나 이상에서 코드를 실행 하는 Windows Forms 구성 요소입니다. 구성 요소 사용자 인터페이스가 없는 및 단일 스레드 환경에 사용 하도록 설계 된 UI 스레드에서 실행합니다.
> - <xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET framework만 해당), 일정 한 간격으로 비동기 또는 동기 웹 페이지 포스트백을 수행 하는 ASP.NET 구성 요소입니다.
  
 타이머를 만들면 메서드의 첫 번째 실행 하기 전에 대기할 시간을 지정할 수 있습니다 (기한) 및 후속 실행 (마침표) 사이 대기할 시간입니다. <xref:System.Threading.Timer> 클래스 시스템 클록으로 동일한 해상도 가진 합니다. 즉, 기간을 사용 하면 시스템 클록의 해상도 보다 작으면는 <xref:System.Threading.TimerCallback> 대리자 약 15 밀리초 Windows 7 및 Windows 8 시스템에서 시스템 클록을 확인 하 여 정의 된 간격으로 실행 됩니다. 지불을 변경할 수 있습니다 시간 및 기간 또는 사용 안 함, 사용 하 여 타이머를 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
> [!NOTE]
>  사용 하는 그대로 <xref:System.Threading.Timer>에 대 한 참조를 유지 해야 합니다. 관리 되는 개체와 마찬가지로 <xref:System.Threading.Timer> 에 대 한 참조가 없는 경우 가비지 수집의 대상이 됩니다. 팩트는는 <xref:System.Threading.Timer> 여전히 활성 해도 수집 됩니다.  
  
 사용 하 여 타이머를 더 이상 필요 하면는 <xref:System.Threading.Timer.Dispose%2A> 타이머에서 메서드는 리소스를 보유 합니다. 콜백 후 발생할 수 있습니다는 <xref:System.Threading.Timer.Dispose> 메서드 오버 로드를 호출한 타이머 스레드 풀 스레드에 의해 실행에 대 한 콜백을 큐 때문입니다. 사용할 수는 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 메서드 오버 로드를 모든 콜백이 완료 될 때까지 기다립니다.  
  
 호출 되므로 타이머가 실행 콜백 메서드를 재진입할 수 있으며, 해야 <xref:System.Threading.ThreadPool> 스레드입니다. 콜백은 타이머 간격이 콜백을 실행 하는 데 필요한 시간 보다 작은 경우 또는 모든 스레드 풀 스레드가 사용 되 고 콜백을 여러 번 큐에 대기는 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.  
  
> [!NOTE]
>  <xref:System.Threading.Timer?displayProperty=nameWithType> 콜백 메서드를 사용 하는 스레드 풀에서 제공 하는 간단한 타이머가입니다. 좋지 않습니다 Windows Forms에서 사용에 대 한 사용자 인터페이스 스레드에서 해당 콜백이 발생 하지 않기 때문입니다. <xref:System.Windows.Forms.Timer?displayProperty=nameWithType> Windows Forms에 사용할 더 유용 합니다. 서버 기반 타이머 기능을 사용해 보십시오 <xref:System.Timers.Timer?displayProperty=nameWithType>, 이벤트를 발생 하며 추가 기능이 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 정의 `StatusChecker` 포함 하는 클래스를 `CheckStatus` 메서드 시그니처가 동일으로 <xref:System.Threading.TimerCallback> 대리자입니다. 합니다 `state` 인수를 `CheckStatus` 메서드는는 <xref:System.Threading.AutoResetEvent> 동기화 하는 애플리케이션 스레드를 스레드 풀 스레드가 콜백 대리자를 실행 하는 데 사용 되는 개체입니다. `StatusChecker` 클래스도 두 개의 상태 변수를 포함 합니다.  
  
 `invokeCount`  
 콜백 메서드가 호출 된 횟수를 나타냅니다.  
  
 `maxCount`  
 콜백 메서드를 호출 해야 하는 최대 횟수를 결정 합니다.  
  
 애플리케이션 스레드에 1 초를 기다린 다음 실행 하는 타이머를 만듭니다는 `CheckStatus` 콜백 메서드 250 밀리초 마다. 될 때까지 애플리케이션 스레드를 차단 합니다 <xref:System.Threading.AutoResetEvent> 개체의 신호를 받습니다. 경우는 `CheckStatus` 콜백 메서드가 실행 될 `maxCount` 번 호출 합니다 `AutoResetEvent.Set` 의 상태를 설정 하는 방법은 <xref:System.Threading.AutoResetEvent> 개체가 신호를. 처음 이런 애플리케이션 스레드 호출을 <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> 메서드 콜백 메서드는 이제 0.5 초 마다 실행 되도록 합니다. 다시 한 번까지 차단는 <xref:System.Threading.AutoResetEvent> 개체의 신호를 받습니다. 이 경우 타이머를 호출 하 여 소멸 됩니다 해당 <xref:System.Threading.Timer.Dispose%2A> 메서드 및 애플리케이션을 종료 합니다.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>이 형식은 스레드로부터 안전합니다.</threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
    <related type="Article" href="~/docs/standard/threading/timers.md">타이머</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">관리되는 스레드 풀</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see langword="Timer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback -&gt; System.Threading.Timer" Usage="new System.Threading.Timer callback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback"><see cref="T:System.Threading.TimerCallback" /> 실행할 메서드를 나타내는 대리자입니다.</param>
        <summary>새 인스턴스를 초기화 합니다 <see cref="T:System.Threading.Timer" /> 고 무한 기간 및 무한 만료 예정 클래스 시간을 사용 하 여 새로 만든 <see cref="T:System.Threading.Timer" /> 상태 개체는 개체입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하려는 경우이 생성자를 호출 합니다 <xref:System.Threading.Timer> 를 상태 개체로 개체 자체입니다. 타이머를 만든 후 사용 하 여는 <xref:System.Threading.Timer.Change%2A> 간격 및 만료 시간을 설정 하는 방법입니다.  
  
 이 생성자 지정 무한 만료 예정 시간 후 첫 번째 콜백 및 첫 번째 콜백 하기 전에 발생 하지 않도록 하기 위해 콜백 간에 무한 간격을 <xref:System.Threading.Timer> 개체 상태 개체에 할당 됩니다.  
  
 에 대 한 지정 된 메서드 `callback` 에서 호출 되므로 재진입 되어야 <xref:System.Threading.ThreadPool> 스레드입니다. 메서드가는 타이머 간격이 메서드를 실행 하는 데 필요한 시간 보다 작은 경우 또는 모든 스레드 풀 스레드가 사용에서 되며 메서드를 여러 번 큐에 대기 하는 경우 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 자체 타이머를 상태 개체로 사용 하 여 새 타이머를 만듭니다. <xref:System.Threading.Timer.Change%2A> 메서드를 사용 하 여 타이머를 시작 하 합니다. 타이머 콜백이 발생 하면 타이머를 해제 하려면 상태 개체 사용 됩니다.  
  
 [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, int dueTime, int period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int * int -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback"><see cref="T:System.Threading.TimerCallback" /> 실행할 메서드를 나타내는 대리자입니다.</param>
        <param name="state">콜백 메서드에서 사용할 정보가 포함 된 개체 또는 <see langword="null" />합니다.</param>
        <param name="dueTime">전에 지연할 시간 <paramref name="callback" /> 시간 (밀리초)에서 호출 됩니다. 지정 <see cref="F:System.Threading.Timeout.Infinite" /> 타이머가 시작 되지 않도록 하려면. 타이머를 즉시 시작하려면 0을 지정합니다.</param>
        <param name="period">호출 사이의 시간 간격 <paramref name="callback" />, 밀리초에서. 지정 <see cref="F:System.Threading.Timeout.Infinite" /> 정기적으로 신호를 사용 하지 않도록 설정 합니다.</param>
        <summary>새 인스턴스를 초기화 합니다 <see langword="Timer" /> 클래스에 32 비트 부호 있는 정수를 사용 하 여 시간 간격을 지정 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정 된 대리자를 `callback` 후 매개 변수를 호출 `dueTime` 경과 되 고, 각 시간 이후에 `period` 시간 간격이 경과할 합니다.  
  
 하는 경우 `dueTime` 영 (0)은 `callback` 즉시 호출 됩니다. 경우 `dueTime` 됩니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 가 호출 되지 않습니다; 타이머 비활성화 되지만 호출 하 여 다시 활성화할 수 있습니다는 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 때문에 합니다 <xref:System.Threading.Timer> 클래스에는 약 15 밀리초 Windows 7 및 Windows 8 시스템에서 시스템 클록으로 동일한 해상도 `callback` 대리자를 실행 하는 경우 시스템 클록을 확인 하 여 정의 된 간격 `period`시스템 클록의 해상도 보다 작습니다. 하는 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 및 `dueTime` 아닙니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 가 호출 됩니다 타이머의 정기적인 동작 비활성화 되지만 사용 하 여 다시 활성화할 수 있습니다은 한 번의 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 에 대 한 지정 된 메서드 `callback` 에서 호출 되므로 재진입 되어야 <xref:System.Threading.ThreadPool> 스레드입니다. 메서드가는 타이머 간격이 메서드를 실행 하는 데 필요한 시간 보다 작은 경우 또는 모든 스레드 풀 스레드가 사용에서 되며 메서드를 여러 번 큐에 대기 하는 경우 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 만드는 방법을 보여 줍니다.는 `TimerCallback` 대리자 및의 새 인스턴스를 초기화 합니다 `Timer` 클래스입니다.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">합니다 <paramref name="dueTime" /> 나 <paramref name="period" /> 매개 변수가 음수이 고 같지 <see cref="F:System.Threading.Timeout.Infinite" />합니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">타이머</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As Long, period As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, long dueTime, long period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * int64 * int64 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="dueTime" Type="System.Int64" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.Int64" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback"><see cref="T:System.Threading.TimerCallback" /> 실행할 메서드를 나타내는 대리자입니다.</param>
        <param name="state">콜백 메서드에서 사용할 정보가 포함 된 개체 또는 <see langword="null" />합니다.</param>
        <param name="dueTime">전에 지연할 시간 <paramref name="callback" /> 시간 (밀리초)에서 호출 됩니다. 지정 <see cref="F:System.Threading.Timeout.Infinite" /> 타이머가 시작 되지 않도록 하려면. 타이머를 즉시 시작하려면 0을 지정합니다.</param>
        <param name="period">호출 사이의 시간 간격 <paramref name="callback" />, 밀리초에서. 지정 <see cref="F:System.Threading.Timeout.Infinite" /> 정기적으로 신호를 사용 하지 않도록 설정 합니다.</param>
        <summary>새 인스턴스를 초기화 합니다 <see langword="Timer" /> 클래스, 64 비트 부호 있는 정수를 사용 하 여 시간 간격을 측정 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정 된 대리자를 `callback` 후 매개 변수를 호출 `dueTime` 경과 되 고, 각 시간 이후에 `period` 시간 간격이 경과할 합니다.  
  
 하는 경우 `dueTime` 영 (0)은 `callback` 즉시 호출 됩니다. 경우 `dueTime` 됩니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 가 호출 되지 않습니다; 타이머 비활성화 되지만 호출 하 여 다시 활성화할 수 있습니다는 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 때문에 합니다 <xref:System.Threading.Timer> 클래스에는 약 15 밀리초 Windows 7 및 Windows 8 시스템에서 시스템 클록으로 동일한 해상도 `callback` 대리자를 실행 하는 경우 시스템 클록을 확인 하 여 정의 된 간격 `period`시스템 클록의 해상도 보다 작습니다. 하는 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 및 `dueTime` 아닙니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 가 호출 됩니다 타이머의 정기적인 동작 비활성화 되지만 사용 하 여 다시 활성화할 수 있습니다은 한 번의 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 에 대 한 지정 된 메서드 `callback` 에서 호출 되므로 재진입 되어야 <xref:System.Threading.ThreadPool> 스레드입니다. 메서드가는 타이머 간격이 메서드를 실행 하는 데 필요한 시간 보다 작은 경우 또는 모든 스레드 풀 스레드가 사용에서 되며 메서드를 여러 번 큐에 대기 하는 경우 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">합니다 <paramref name="dueTime" /> 나 <paramref name="period" /> 매개 변수가 음수이 고 같지 <see cref="F:System.Threading.Timeout.Infinite" />합니다.</exception>
        <exception cref="T:System.NotSupportedException">합니다 <paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수 값이 4294967294 보다 큽니다.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">타이머</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * TimeSpan * TimeSpan -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">실행할 메서드를 나타내는 대리자입니다.</param>
        <param name="state">콜백 메서드에서 사용할 정보가 포함 된 개체 또는 <see langword="null" />합니다.</param>
        <param name="dueTime"><paramref name="callback" /> 매개 변수에서 해당 메서드를 호출하기 전에 지연될 시간입니다. 타이머가 시작되지 않게 하려면 -1밀리초를 지정합니다. 타이머를 즉시 시작하려면 0을 지정합니다.</param>
        <param name="period">참조 하는 메서드 호출 사이의 시간 간격 <paramref name="callback" />합니다. 정기적으로 신호를 보내지 않도록 하려면 -1밀리초를 지정합니다.</param>
        <summary>새 인스턴스를 초기화 합니다 <see langword="Timer" /> 클래스를 사용 하 여 <see cref="T:System.TimeSpan" /> 시간 간격을 측정 하는 값입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정 된 대리자를 `callback` 후 매개 변수를 호출 `dueTime` 경과 되 고, 각 시간 이후에 `period` 시간 간격이 경과할 합니다.  
  
 하는 경우 `dueTime` 영 (0)은 `callback` 즉시 호출 됩니다. 하는 경우 `dueTime` 이-1 밀리초를 `callback` 가 호출 되지 않습니다; 타이머 비활성화 되지만 호출 하 여 다시 활성화할 수 있습니다는 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 때문에 합니다 <xref:System.Threading.Timer> 클래스에는 약 15 밀리초 Windows 7 및 Windows 8 시스템에서 시스템 클록으로 동일한 해상도 `callback` 대리자를 실행 하는 경우 시스템 클록을 확인 하 여 정의 된 간격 `period`시스템 클록의 해상도 보다 작습니다. 경우 `period` 가 영 (0) 또는-1 밀리초 및 `dueTime` 가 양수 이면 `callback` 가 호출 됩니다 타이머의 정기적인 동작 비활성화 되지만 사용 하 여 다시 활성화할 수 있습니다은 한 번의 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 에 대 한 지정 된 메서드 `callback` 에서 호출 되므로 재진입 되어야 <xref:System.Threading.ThreadPool> 스레드입니다. 메서드가는 타이머 간격이 메서드를 실행 하는 데 필요한 시간 보다 작은 경우 또는 모든 스레드 풀 스레드가 사용에서 되며 메서드를 여러 번 큐에 대기 하는 경우 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 만드는 방법을 보여 줍니다.는 `TimerCallback` 대리자 및의 새 인스턴스를 초기화 합니다 `Timer` 클래스입니다.  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">값의 시간을 밀리초 단위로 <paramref name="dueTime" /> 또는 <paramref name="period" /> 가 음수이 고 같지 <see cref="F:System.Threading.Timeout.Infinite" />, 보다 크면 또는 <see cref="F:System.Int32.MaxValue" />합니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">타이머</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callback As TimerCallback, state As Object, dueTime As UInteger, period As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::Threading::TimerCallback ^ callback, System::Object ^ state, System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="new System.Threading.Timer : System.Threading.TimerCallback * obj * uint32 * uint32 -&gt; System.Threading.Timer" Usage="new System.Threading.Timer (callback, state, dueTime, period)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="dueTime" Type="System.UInt32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.UInt32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback">실행할 메서드를 나타내는 대리자입니다.</param>
        <param name="state">콜백 메서드에서 사용할 정보가 포함 된 개체 또는 <see langword="null" />합니다.</param>
        <param name="dueTime">전에 지연할 시간 <paramref name="callback" /> 시간 (밀리초)에서 호출 됩니다. 지정 <see cref="F:System.Threading.Timeout.Infinite" /> 타이머가 시작 되지 않도록 하려면. 타이머를 즉시 시작하려면 0을 지정합니다.</param>
        <param name="period">호출 사이의 시간 간격 <paramref name="callback" />, 밀리초에서. 지정 <see cref="F:System.Threading.Timeout.Infinite" /> 정기적으로 신호를 사용 하지 않도록 설정 합니다.</param>
        <summary>새 인스턴스를 초기화 합니다 <see langword="Timer" /> 클래스, 32 비트 부호 없는 정수를 사용 하 여 시간 간격을 측정 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정 된 대리자를 `callback` 후 매개 변수를 호출 `dueTime` 경과 되 고, 각 시간 이후에 `period` 시간 간격이 경과할 합니다.  
  
 하는 경우 `dueTime` 영 (0)은 `callback` 즉시 호출 됩니다. 경우 `dueTime` 됩니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 가 호출 되지 않습니다; 타이머 비활성화 되지만 호출 하 여 다시 활성화할 수 있습니다는 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 때문에 합니다 <xref:System.Threading.Timer> 클래스에는 약 15 밀리초 Windows 7 및 Windows 8 시스템에서 시스템 클록으로 동일한 해상도 `callback` 대리자를 실행 하는 경우 시스템 클록을 확인 하 여 정의 된 간격 `period`시스템 클록의 해상도 보다 작습니다. 하는 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> 및 `dueTime` 아닙니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, `callback` 가 호출 됩니다 타이머의 정기적인 동작 비활성화 되지만 사용 하 여 다시 활성화할 수 있습니다은 한 번의 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 에 대 한 지정 된 메서드 `callback` 에서 호출 되므로 재진입 되어야 <xref:System.Threading.ThreadPool> 스레드입니다. 메서드가는 타이머 간격이 메서드를 실행 하는 데 필요한 시간 보다 작은 경우 또는 모든 스레드 풀 스레드가 사용에서 되며 메서드를 여러 번 큐에 대기 하는 경우 두 개의 스레드 풀 스레드에서 동시에 실행할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">합니다 <paramref name="dueTime" /> 나 <paramref name="period" /> 매개 변수가 음수이 고 같지 <see cref="F:System.Threading.Timeout.Infinite" />합니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">타이머</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>타이머 시작 시간 및 메서드 호출 사이의 간격을 변경합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Integer, period As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(int dueTime, int period);" />
      <MemberSignature Language="F#" Value="member this.Change : int * int -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime">경우는 지정 된 콜백 메서드를 호출 하기 전의 지연 시간을 <see cref="T:System.Threading.Timer" /> 시간 (밀리초)에서 생성 된 합니다. 지정 <see cref="F:System.Threading.Timeout.Infinite" /> 타이머를 다시 시작 하지 못하도록 합니다. 타이머를 즉시 시작하려면 0을 지정합니다.</param>
        <param name="period">콜백 메서드 호출 사이의 시간 간격을 지정 하는 경우는 <see cref="T:System.Threading.Timer" /> 밀리초에서 만들어졌습니다. 지정 <see cref="F:System.Threading.Timeout.Infinite" /> 정기적으로 신호를 사용 하지 않도록 설정 합니다.</param>
        <summary>부호 있는 32비트 정수로 시간 간격을 측정하여 타이머 시작 시간 및 메서드 호출 사이의 간격을 변경합니다.</summary>
        <returns><see langword="true" /> 타이머가는 성공적으로 업데이트 되었으면; 그렇지 않으면 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 콜백 메서드 후 한 번 `dueTime` 지정 된 시간 간격을 시간 경과 되 고, 그 후 각 `period` 경과 합니다.  
  
 경우 `dueTime` 은 영 (0), 콜백 메서드를 즉시 호출 됩니다. 하는 경우 `dueTime` 됩니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, 콜백 메서드가 호출 되지 않습니다 타이머를 사용 하지 않도록 설정 하지만 수 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `dueTime`입니다.  
  
 하는 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, 및 `dueTime` 되지 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>수는 콜백 메서드는 한 번 호출; 주기적 타이머의 동작을 사용 하지 않도록 설정 되지만 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `period`.  
  
 합니다 <xref:System.Threading.Timer.Change%2A> 에서 메서드를 호출할 수는 <xref:System.Threading.TimerCallback> 위임 합니다.  
  
   
  
## Examples  
 다음 코드 예제에는 시작 하는 방법을 보여 줍니다.는 `Timer` 고 일정 한 개수의 호출을 이후 해당 기간을 변경 합니다.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> 가 이미 삭제 되었습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">합니다 <paramref name="dueTime" /> 나 <paramref name="period" /> 매개 변수가 음수이 고 같지 <see cref="F:System.Threading.Timeout.Infinite" />합니다.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">타이머</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As Long, period As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(long dueTime, long period);" />
      <MemberSignature Language="F#" Value="member this.Change : int64 * int64 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.Int64" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dueTime">경우는 지정 된 콜백 메서드를 호출 하기 전의 지연 시간을 <see cref="T:System.Threading.Timer" /> 시간 (밀리초)에서 생성 된 합니다. 지정 <see cref="F:System.Threading.Timeout.Infinite" /> 타이머를 다시 시작 하지 못하도록 합니다. 타이머를 즉시 시작하려면 0을 지정합니다.</param>
        <param name="period">콜백 메서드 호출 사이의 시간 간격을 지정 하는 경우는 <see cref="T:System.Threading.Timer" /> 밀리초에서 만들어졌습니다. 지정 <see cref="F:System.Threading.Timeout.Infinite" /> 정기적으로 신호를 사용 하지 않도록 설정 합니다.</param>
        <summary>부호 있는 64비트 정수로 시간 간격을 측정하여 타이머 시작 시간 및 메서드 호출 사이의 간격을 변경합니다.</summary>
        <returns><see langword="true" /> 타이머가는 성공적으로 업데이트 되었으면; 그렇지 않으면 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 콜백 메서드 후 한 번 `dueTime` 지정 된 시간 간격을 시간 경과 되 고, 그 후 각 `period` 경과 합니다.  
  
 경우 `dueTime` 은 영 (0), 콜백 메서드를 즉시 호출 됩니다. 하는 경우 `dueTime` 됩니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, 콜백 메서드가 호출 되지 않습니다 타이머를 사용 하지 않도록 설정 하지만 수 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `dueTime`입니다.  
  
 하는 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, 및 `dueTime` 되지 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>수는 콜백 메서드는 한 번 호출; 주기적 타이머의 동작을 사용 하지 않도록 설정 되지만 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `period`.  
  
 합니다 <xref:System.Threading.Timer.Change%2A> 에서 메서드를 호출할 수는 <xref:System.Threading.TimerCallback> 위임 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> 가 이미 삭제 되었습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">합니다 <paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수는-1 보다 작습니다.</exception>
        <exception cref="T:System.NotSupportedException">합니다 <paramref name="dueTime" /> 또는 <paramref name="period" /> 매개 변수 값이 4294967294 보다 큽니다.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">타이머</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As TimeSpan, period As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="F#" Value="member this.Change : TimeSpan * TimeSpan -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">A <see cref="T:System.TimeSpan" /> 때 지정 된 콜백 메서드를 호출 하기 전에 지연 시간을 나타내는 <see cref="T:System.Threading.Timer" /> 만들어졌습니다. 타이머가 다시 시작되지 않게 하려면 -1밀리초를 지정합니다. 타이머를 즉시 시작하려면 0을 지정합니다.</param>
        <param name="period">콜백 메서드 호출 사이의 시간 간격을 지정 하는 경우는 <see cref="T:System.Threading.Timer" /> 만들어졌습니다. 정기적으로 신호를 보내지 않도록 하려면 -1밀리초를 지정합니다.</param>
        <summary>시작 시간 및 사용 하 여 타이머에 대 한 메서드 호출 사이의 간격을 변경 <see cref="T:System.TimeSpan" /> 시간 간격을 측정 하는 값입니다.</summary>
        <returns><see langword="true" /> 타이머가는 성공적으로 업데이트 되었으면; 그렇지 않으면 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 콜백 메서드 후 한 번 `dueTime` 지정 된 시간 간격을 시간 경과 되 고, 그 후 각 `period` 경과 합니다.  
  
 경우 `dueTime` 은 영 (0), 콜백 메서드를 즉시 호출 됩니다. 하는 경우 `dueTime` -1 밀리초, 콜백 메서드가 호출 되지 않습니다 타이머를 사용 하지 않도록 설정 하지만 수를 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `dueTime`입니다.  
  
 하는 경우 `period` 가 영 (0) 또는-1 밀리초, 및 `dueTime` 이 양수인 경우 콜백 메서드는 한 번 호출; 타이머의 정기적인 동작 비활성화 되지만 호출 하 여 다시 활성화할 수 있습니다 <xref:System.Threading.Timer.Change%2A> 보다 큰 값을 지정 하 고 0 `period`합니다.  
  
 합니다 <xref:System.Threading.Timer.Change%2A> 에서 메서드를 호출할 수는 <xref:System.Threading.TimerCallback> 위임 합니다.  
  
   
  
## Examples  
 다음 코드 예제에는 시작 하는 방법을 보여 줍니다.는 `Timer` 고 일정 한 개수의 호출을 이후 해당 기간을 변경 합니다.  
  
 [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> 가 이미 삭제 되었습니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">합니다 <paramref name="dueTime" /> 또는 <paramref name="period" /> 밀리초에서 매개 변수는-1 보다 작습니다.</exception>
        <exception cref="T:System.NotSupportedException">합니다 <paramref name="dueTime" /> 또는 <paramref name="period" /> 밀리초에서의 매개 변수 값이 4294967294 보다 큽니다.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">타이머</related>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Change (dueTime As UInteger, period As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Change(System::UInt32 dueTime, System::UInt32 period);" />
      <MemberSignature Language="F#" Value="member this.Change : uint32 * uint32 -&gt; bool" Usage="timer.Change (dueTime, period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="period" Type="System.UInt32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dueTime">경우는 지정 된 콜백 메서드를 호출 하기 전의 지연 시간을 <see cref="T:System.Threading.Timer" /> 시간 (밀리초)에서 생성 된 합니다. 지정 <see cref="F:System.Threading.Timeout.Infinite" /> 타이머를 다시 시작 하지 못하도록 합니다. 타이머를 즉시 시작하려면 0을 지정합니다.</param>
        <param name="period">콜백 메서드 호출 사이의 시간 간격을 지정 하는 경우는 <see cref="T:System.Threading.Timer" /> 밀리초에서 만들어졌습니다. 지정 <see cref="F:System.Threading.Timeout.Infinite" /> 정기적으로 신호를 사용 하지 않도록 설정 합니다.</param>
        <summary>부호 없는 32비트 정수로 시간 간격을 측정하여 타이머 시작 시간 및 메서드 호출 사이의 간격을 변경합니다.</summary>
        <returns><see langword="true" /> 타이머가는 성공적으로 업데이트 되었으면; 그렇지 않으면 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 콜백 메서드 후 한 번 `dueTime` 지정 된 시간 간격을 시간 경과 되 고, 그 후 각 `period` 경과 합니다.  
  
 경우 `dueTime` 은 영 (0), 콜백 메서드를 즉시 호출 됩니다. 하는 경우 `dueTime` 됩니다 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, 콜백 메서드가 호출 되지 않습니다 타이머를 사용 하지 않도록 설정 하지만 수 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `dueTime`입니다.  
  
 하는 경우 `period` 은 영 (0) 또는 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>, 및 `dueTime` 되지 <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>수는 콜백 메서드는 한 번 호출; 주기적 타이머의 동작을 사용 하지 않도록 설정 되지만 호출 하 여 다시 활성화할 수 <xref:System.Threading.Timer.Change%2A> 양수 값을 지정 하 고 `period`.  
  
 합니다 <xref:System.Threading.Timer.Change%2A> 에서 메서드를 호출할 수는 <xref:System.Threading.TimerCallback> 위임 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Threading.Timer" /> 가 이미 삭제 되었습니다.</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">타이머</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>현재 인스턴스에서 사용 하는 모든 리소스를 해제 <see cref="T:System.Threading.Timer" />합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="timer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 인스턴스에서 사용 하는 모든 리소스를 해제 <see cref="T:System.Threading.Timer" />합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 `Dispose` 에서 사용 하는 리소스는 <xref:System.Threading.Timer> 다른 용도로 다시 할당 될 수 있습니다. 에 대 한 자세한 내용은 `Dispose`를 참조 하세요 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.  
  
> [!NOTE]
>  콜백 후 발생할 수 있습니다는 <xref:System.Threading.Timer.Dispose> 메서드 오버 로드를 호출한 타이머 스레드 풀 스레드에 의해 실행에 대 한 콜백을 큐 때문입니다. 사용할 수는 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 메서드 오버 로드를 모든 콜백이 완료 될 때까지 기다립니다.  
  
   
  
## Examples  
 다음 코드 예제에서 보유 한 리소스를 해제 하는 방법을 보여 줍니다는 `Timer`합니다.  
  
 [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/threading/timers.md">타이머</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dispose (notifyObject As WaitHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Dispose(System::Threading::WaitHandle ^ notifyObject);" />
      <MemberSignature Language="F#" Value="member this.Dispose : System.Threading.WaitHandle -&gt; bool" Usage="timer.Dispose notifyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="notifyObject"><see cref="T:System.Threading.WaitHandle" /> 신호를 받을 때의 <see langword="Timer" /> 삭제 되었습니다.</param>
        <summary>현재 인스턴스에서 사용 하는 모든 리소스를 해제 <see cref="T:System.Threading.Timer" /> 타이머가 삭제 되 면 신호를 보냅니다.</summary>
        <returns><see langword="true" /> 함수가 성공 하면; 그렇지 않으면 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 `Dispose` 에서 사용 하는 리소스는 <xref:System.Threading.Timer> 다른 용도로 다시 할당 될 수 있습니다. 에 대 한 자세한 내용은 `Dispose`를 참조 하세요 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.  
  
 이 메서드가 완료 되 면 신호를 보냅니다.는 <xref:System.Threading.WaitHandle> 에 지정 된 된 `notifyObject` 매개 변수입니다. 이 오버 로드를 사용 합니다 <xref:System.Threading.Timer.Dispose%2A> 메서드 특정 타이머가 삭제 될 때까지 차단 하는 일을 할 수 있도록 하려는 경우. 모든 현재 대기 중인된 콜백이 완료 될 때까지 타이머가 삭제 되지 않습니다.  
  
> [!NOTE]
>  콜백을 사용 하는 경우는 <xref:System.Threading.Timer.Change%2A> 설정 하는 메서드를 `dueTime` 매개 변수를 0로 경합 상태가 발생할 수 있습니다 때를 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 메서드 오버 로드가 호출 됩니다: 타이머 큐 하기 전에 새 콜백 하는 경우는 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 메서드 오버 로드가 없습니다 콜백을 지연 되 고 있는지 검색 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> 계속 해 서 차단; 새 콜백이 큐에 대기 중임을 하는 동안 고 타이머가 삭제 되는 고, 그렇지 <xref:System.ObjectDisposedException> 때 발생 하는 새로운 콜백 호출을 <xref:System.Threading.Timer.Change%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="notifyObject" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <related type="Article" href="~/docs/standard/threading/timers.md">타이머</related>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="timer.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Timer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="timer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>가비지 수집기가 회수하기 전에 개체가 리소스를 해제하고 다른 정리 작업을 수행할 수 있게 합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>