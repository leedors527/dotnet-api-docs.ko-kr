<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0bbfa013120262f762e4cf955271e6d0ee2830e1" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58706394" /></Metadata><TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">콜백 메서드가 실행될 때마다 사용할 정보가 포함된 개체입니다.</param>
    <param name="timedOut"><see cref="T:System.Threading.WaitHandle" /> 시간이 초과되면 <see langword="true" />이고, 신호를 받으면 <see langword="false" />입니다.</param>
    <summary><see cref="T:System.Threading.WaitHandle" />이 신호를 받거나 시간 초과될 때 호출될 메서드를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitOrTimerCallback> 등록된 된 대기 핸들이 신호를 받는 하거나 시간이 초과 될 때 실행 하려는 콜백 메서드를 나타냅니다. 콜백 메서드를 전달 하 여 대리자를 만들는 <xref:System.Threading.WaitOrTimerCallback> 생성자입니다. 메서드에 다음과 같은 시그니처가 있어야 합니다.  
  
 전달 하 여 등록된 된 대기 핸들을 만듭니다는 <xref:System.Threading.WaitOrTimerCallback> 대리자와 <xref:System.Threading.WaitHandle> 에 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>입니다. 콜백 메서드가 실행 될 때마다는 <xref:System.Threading.WaitHandle> 시간이 초과 되거나 신호입니다.  
  
  
> [!NOTE]
>  Visual Basic 사용자를 생략할 수는 <xref:System.Threading.WaitOrTimerCallback> 생성자 및 사용할 합니다 `AddressOf` 콜백 메서드를 전달 하는 경우 연산자 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>합니다. Visual Basic에는 자동으로 올바른 대리자 생성자를 호출합니다.  
  
 콜백 메서드에서 정보를 전달 하려는 경우 필요한 정보를 포함 하는 개체를 만들고에 전달 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 등록된 된 대기 핸들을 만들 때. 콜백 메서드가 실행 될 때마다는 `state` 매개 변수는이 개체를 포함 합니다.  
  
 콜백 메서드를 사용 하 여 스레드 풀 스레드를 동기화 하는 방법에 대 한 자세한 내용은 참조 하세요. [관리 되는 스레드 풀](~/docs/standard/threading/the-managed-thread-pool.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법의 <xref:System.Threading.WaitOrTimerCallback> 대기 핸들이 신호를 받을 때 실행 되는 콜백 메서드를 나타내는 대리자입니다.  
  
 또한이 예제에서는 사용 하는 방법의 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 지정한 대기 핸들이 신호를 받을 때 지정된 된 콜백 메서드를 실행 하는 방법입니다. 이 예제에서는 콜백 메서드는 `WaitProc` 대기 핸들은 및는 <xref:System.Threading.AutoResetEvent>합니다.  
  
 이 예제에서는 정의 `TaskInfo` 실행 될 때 콜백에 전달 되는 정보를 보유 하는 클래스입니다. 이 예에서는 만듭니다는 `TaskInfo` 개체 및 문자열 데이터를 할당 합니다. <xref:System.Threading.RegisteredWaitHandle> 에서 반환 하는 합니다 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 에 메서드가 할당 됩니다는 `Handle` 필드를 `TaskInfo` 콜백 메서드가에 액세스할 수 있도록 개체를 <xref:System.Threading.RegisteredWaitHandle>.  
  
 외에는 `TaskInfo` 개체를 호출은 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 메서드는 지정를 <xref:System.Threading.AutoResetEvent> 작업을 대기를 <xref:System.Threading.WaitOrTimerCallback> 나타내는 대리자입니다는 `WaitProc` 콜백 메서드와 1 초 제한 시간 간격을 여러 콜백을 .  
  
 주 스레드가 신호 하는 경우는 <xref:System.Threading.AutoResetEvent> 호출 하 여 해당 <xref:System.Threading.EventWaitHandle.Set%2A> 메서드를를 <xref:System.Threading.WaitOrTimerCallback> 대리자가 호출 합니다. 합니다 `WaitProc` 메서드를 테스트 <xref:System.Threading.RegisteredWaitHandle> 시간 초과가 발생 한 것인지 확인 합니다. 대기 핸들 신호가 전달 되어 콜백이 호출 되는 경우는 `WaitProc` 메서드를 등록 취소는 <xref:System.Threading.RegisteredWaitHandle>, 콜백을 추가 중지 합니다. 시간 초과 경우 작업이 계속 대기 합니다. `WaitProc` 메서드가 콘솔에 메시지를 인쇄 하 여 종료 합니다.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">스레드 및 스레딩</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">관리되는 스레드 풀</related>
  </Docs>
</Type>