<Type Name="ClientBuildManagerParameter" FullName="System.Web.Compilation.ClientBuildManagerParameter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7a91e7ac36abbb585ffed2bbda1985f28e3345a4" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55343667" /></Metadata><TypeSignature Language="C#" Value="public class ClientBuildManagerParameter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ClientBuildManagerParameter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.ClientBuildManagerParameter" />
  <TypeSignature Language="VB.NET" Value="Public Class ClientBuildManagerParameter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClientBuildManagerParameter" />
  <TypeSignature Language="F#" Value="type ClientBuildManagerParameter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>미리 컴파일하는 동안 ASP.NET 컴파일러에 전달되는 값을 포함합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 코드 파일과 ASP.NET 웹 페이지를 사용자에 대 한 빠른 응답을 용이 하 여 소스 코드를 배포 하지 않고 사이트의 배포에 대 한 허용 미리 컴파일된 수입니다. ASP.NET 웹 사이트를 미리 컴파일에 대 한 자세한 내용은 참조 하세요. [ASP.NET 웹 사이트 프로젝트 미리 컴파일 개요](https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a)합니다.  
  
 <xref:System.Web.Compilation.ClientBuildManagerParameter> 미리 컴파일하는 동안 사용 되는 값을 저장 하는 클래스입니다. <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> 속성 어셈블리 빌드되는 방식을 결정 합니다. 예를 들어, 설정할 수 있습니다 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> 에 <xref:System.Web.Compilation.PrecompilationFlags.Clean> 로 설정 하거나 모든 이전에 컴파일된 구성 요소 다시 컴파일 <xref:System.Web.Compilation.PrecompilationFlags.OverwriteTarget> 대상 디렉터리의 모든 구성 요소를 덮어쓰려면 결과 어셈블리를 허용 하도록 합니다. <xref:System.Web.Compilation.PrecompilationFlags> 열거자는 <xref:System.FlagsAttribute> 해당 멤버 값의 비트 조합을 허용 하는 특성입니다. 합니다 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> 속성에서 둘 이상의 값을 포함할 수는 <xref:System.Web.Compilation.PrecompilationFlags> 미리 컴파일 동작의 조합을 지정 하는 열거형입니다.  
  
 중 하나는 <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A> 속성 또는 <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A> 속성 강력한 이름의 어셈블리를 만드는 값이 할당 됩니다. 값이 모두 강력한 이름의 어셈블리를 만드는 설정할 필요가 없습니다.  
  
 A <xref:System.Web.Compilation.ClientBuildManagerParameter> 개체를 전달 하는 <xref:System.Web.Compilation.ClientBuildManager> 개체를 통해를 <xref:System.Web.Compilation.ClientBuildManager.%23ctor%2A> 생성자입니다.  
  
   
  
## Examples  
 다음 코드 예제는 있는 코드 예제는 <xref:System.Web.Compilation.ClientBuildManager> 클래스 개요입니다. 예에서를 <xref:System.Web.Compilation.ClientBuildManagerParameter> 개체가 만들어지고 해당 값을 설정 합니다. 결과 어셈블리에 제공 된 키 파일을 기반으로 강력한 이름을 가진 및 제공 된에 따라 미리 컴파일합니다 <xref:System.Web.Compilation.PrecompilationFlags> 값입니다.  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
    <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
    <related type="Article" href="https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a">ASP.NET 웹 사이트 미리 컴파일</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClientBuildManagerParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ClientBuildManagerParameter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClientBuildManagerParameter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.Compilation.ClientBuildManagerParameter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 속성 값을 초기화 하지 않습니다. 통해 이러한 값을 설정 해야 합니다 <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>, <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A>, 및 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> 개체를 만든 후 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제는 있는 코드 예제는 <xref:System.Web.Compilation.ClientBuildManager> 클래스 개요입니다. 예에서를 <xref:System.Web.Compilation.ClientBuildManagerParameter> 개체가 만들어지고 해당 값을 설정 합니다. 결과 어셈블리에 제공 된 키 파일을 기반으로 강력한 이름을 가진 및 제공 된에 따라 미리 컴파일합니다 <xref:System.Web.Compilation.PrecompilationFlags> 값입니다.  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludedVirtualPaths">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;string&gt; ExcludedVirtualPaths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;string&gt; ExcludedVirtualPaths" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExcludedVirtualPaths As List(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::List&lt;System::String ^&gt; ^ ExcludedVirtualPaths { System::Collections::Generic::List&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExcludedVirtualPaths : System.Collections.Generic.List&lt;string&gt;" Usage="System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>제외된 가상 경로를 가져오거나 설정합니다.</summary>
        <value>제외 된 가상 경로입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrecompilationFlags">
      <MemberSignature Language="C#" Value="public System.Web.Compilation.PrecompilationFlags PrecompilationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Compilation.PrecompilationFlags PrecompilationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property PrecompilationFlags As PrecompilationFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Compilation::PrecompilationFlags PrecompilationFlags { System::Web::Compilation::PrecompilationFlags get(); void set(System::Web::Compilation::PrecompilationFlags value); };" />
      <MemberSignature Language="F#" Value="member this.PrecompilationFlags : System.Web.Compilation.PrecompilationFlags with get, set" Usage="System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.PrecompilationFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>미리 컴파일 동작을 결정하는 플래그를 가져오거나 설정합니다.</summary>
        <value>클라이언트 빌드를 위한 <see cref="T:System.Web.Compilation.PrecompilationFlags" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> 속성 어셈블리 빌드되는 방식을 결정 합니다. 예를 들어, 설정할 수 있습니다 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> 에 <xref:System.Web.Compilation.PrecompilationFlags.Clean> 로 설정 하거나 모든 이전에 컴파일된 구성 요소 다시 컴파일 <xref:System.Web.Compilation.PrecompilationFlags.OverwriteTarget> 대상 디렉터리의 모든 구성 요소를 덮어쓰려면 결과 어셈블리를 허용 하도록 합니다. <xref:System.Web.Compilation.PrecompilationFlags> 열거자는 <xref:System.FlagsAttribute> 해당 멤버 값의 비트 조합을 허용 하는 특성입니다. 합니다 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> 속성에서 둘 이상의 값을 포함할 수는 <xref:System.Web.Compilation.PrecompilationFlags> 미리 컴파일 동작의 조합을 지정 하는 열거형입니다.  
  
   
  
## Examples  
 다음 코드 예제는 있는 코드 예제는 <xref:System.Web.Compilation.ClientBuildManager> 클래스 개요입니다. 예에서를 <xref:System.Web.Compilation.ClientBuildManagerParameter> 개체가 만들어지고 해당 값을 설정 합니다. 결과 어셈블리에 제공 된 키 파일을 기반으로 강력한 이름을 가진 및 제공 된에 따라 미리 컴파일합니다 <xref:System.Web.Compilation.PrecompilationFlags> 값입니다.  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
        <related type="Article" href="https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a">ASP.NET 웹 사이트 미리 컴파일</related>
      </Docs>
    </Member>
    <Member MemberName="StrongNameKeyContainer">
      <MemberSignature Language="C#" Value="public string StrongNameKeyContainer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StrongNameKeyContainer" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer" />
      <MemberSignature Language="VB.NET" Value="Public Property StrongNameKeyContainer As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StrongNameKeyContainer { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StrongNameKeyContainer : string with get, set" Usage="System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컴파일하는 동안 사용되는 키 컨테이너를 가져오거나 설정합니다.</summary>
        <value>키 컨테이너 값의 <see cref="T:System.String" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 중 하나는 <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A> 속성 또는 <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A> 속성 강력한 이름의 어셈블리를 만드는 값이 할당 됩니다. 값이 모두 강력한 이름의 어셈블리를 만드는 설정할 필요가 없습니다.  
  
   
  
## Examples  
 다음 코드 예제는 있는 코드 예제와 비슷한는 <xref:System.Web.Compilation.ClientBuildManager> 결과 어셈블리에 제공된 된 키 컨테이너에 따라 강력한 이름을 가진 한다는 클래스 개요입니다. 이 따라 제공 된 미리 컴파일합니다 <xref:System.Web.Compilation.PrecompilationFlags> 값입니다.  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager_2/CS/source.cs#1)]
 [!code-vb[System.Web.Compilation.ClientBuildManager_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager_2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
        <related type="Article" href="https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a">ASP.NET 웹 사이트 미리 컴파일</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f3022b39-f17f-48c1-b067-025eab0ce8bc">가져오기 및 내보내기 보호 구성의 RSA 키 컨테이너</related>
      </Docs>
    </Member>
    <Member MemberName="StrongNameKeyFile">
      <MemberSignature Language="C#" Value="public string StrongNameKeyFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StrongNameKeyFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile" />
      <MemberSignature Language="VB.NET" Value="Public Property StrongNameKeyFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StrongNameKeyFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StrongNameKeyFile : string with get, set" Usage="System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컴파일하는 동안 사용되는 키 파일을 가져오거나 설정합니다.</summary>
        <value>키 파일 값의 <see cref="T:System.String" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 중 하나는 <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A> 속성 또는 <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A> 속성 강력한 이름의 어셈블리를 만드는 값이 할당 됩니다. 값이 모두 강력한 이름의 어셈블리를 만드는 설정할 필요가 없습니다.  
  
   
  
## Examples  
 다음 코드 예제는 있는 코드 예제는 <xref:System.Web.Compilation.ClientBuildManager> 클래스 개요입니다. 예에서를 <xref:System.Web.Compilation.ClientBuildManagerParameter> 개체가 만들어지고 해당 값을 설정 합니다. 결과 어셈블리에 제공 된 키 파일을 기반으로 강력한 이름을 가진 및 제공 된에 따라 미리 컴파일합니다 <xref:System.Web.Compilation.PrecompilationFlags> 값입니다.  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
        <related type="Article" href="https://msdn.microsoft.com/library/a88e56f9-b232-47c5-92e0-f9674ed15e5a">ASP.NET 웹 사이트 미리 컴파일</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ffbf6d9e-4a88-4a8a-9645-4ce0ee1ee5f9">강력한 이름의 어셈블리 만들기 및 사용</related>
      </Docs>
    </Member>
  </Members>
</Type>