<Type Name="ExpressionBuilder" FullName="System.Web.Compilation.ExpressionBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a39e97c83d91647815f83d50e83bed7d53113de1" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39738945" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExpressionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.ExpressionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionBuilder abstract" />
  <TypeSignature Language="F#" Value="type ExpressionBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>페이지 구문 분석 중에 식을 계산합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.Compilation.ExpressionBuilder> 클래스는 식 작성기에 대 한 기본 클래스와 같은 <xref:System.Web.Compilation.AppSettingsExpressionBuilder> 페이지 구문 분석 하는 동안 코드 식을 만드는 클래스입니다.  
  
 식 작성기는 선언적 식 구문 분석 하 고 컨트롤 속성에 바인딩된 값을 검색 하는 코드를 만듭니다. 컴파일되지 않은 시나리오에서 컴파일되지 않은 기능을 지 원하는 식 작성기 런타임에 식을 평가 합니다.  
  
 페이지 파서가 구분 된 문자열 식을 발견 하는 경우 `<%$ %>`, 문자열의 접두사를 기반으로 식에 대 한 식 작성기를 만듭니다. 접두사에는 콜론 (:)의 왼쪽에 있는 문자열의 부분입니다. 파서가 문자열을 발견 하는 경우 예를 들어 `<%$ ConnectionStrings:MessageDB %>`을 만듭니다는 <xref:System.Web.Compilation.ConnectionStringsExpressionBuilder> 개체입니다. 접두사는 Web.config 파일에서 식 작성기 연관 된 <xref:System.Web.Configuration.CompilationSection.ExpressionBuilders%2A> 섹션입니다.  
  
 오른쪽에 있는 선언적 식의 평가 대 한 식 작성기에 전달 됩니다. 재정의 <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> 페이지를 사용 하 여 컴파일되는 코드를 생성 하는 방법입니다.  
  
 컴파일되지 않은 페이지에서 활성화 되도록 사용자 지정 식 작성기를 하려는 경우 재정의 해야 합니다 <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> 식의 결과 나타내는 개체를 반환 하는 방법입니다. 도 재정의 해야 합니다는 <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> 속성을 사용자 지정 식 작성기를 컴파일되지 않은 페이지 지원지 않습니다 나타냅니다.  
  
 선택 하 고 식 편집기를 구현 하 여 디자인 타임에 컨트롤 속성과 연결 된 식을 계산 하는 메서드와 속성 집합을 정의할 수 있습니다. 편집기는 클래스 수준의 메타 데이터를 통해 식 작성기에 표시 됩니다. 자세한 내용은 <xref:System.Web.UI.Design.ExpressionEditor>을 참조하세요.  
  
   
  
## Examples  
 다음 코드 예제를 구현 하 여 사용자 지정 식 작성기를 빌드하는 방법을 보여 줍니다는 <xref:System.Web.Compilation.ExpressionBuilder> 추상 클래스입니다. 이 구현의 <xref:System.Web.Compilation.ExpressionBuilder> 식에 전달 되는 계산된 된 문을 반환 합니다. 이 예제를 실행 하려면 먼저 Web.config 파일에서 사용자 지정 식 작성기를 등록 해야 합니다. 첫 번째 코드 예제에서는 Web.config 파일에 사용자 지정 식 작성기를 등록 하는 방법에 설명 합니다.  
  
```  
<configuration>  
    <system.web>  
       <compilation>  
          <expressionBuilders>  
              <add expressionPrefix="MyCustomExpression"  
               type="MyCustomExpressionBuilder"/>  
          </expressionBuilders>  
       </compilation>  
    </system.web>  
</configuration>  
```  
  
 두 번째 코드 예제에서는.aspx 파일에 있는 식을 참조 하는 방법에 설명 합니다.  
  
```  
<asp:Label ID="Label1" runat="server"   
Text="<%$ MyCustomExpression:Hello, world! %>" />  
```  
  
 세 번째 코드 예제에서는 사용자 지정된 식 작성기에서 파생 하 여 개발 하는 방법에 설명 <xref:System.Web.Compilation.ExpressionBuilder>합니다. 이 코드 예제를 실행 하려면 클래스는 App_Code 폴더에 배치 해야 합니다.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#1)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#1)]   
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>상속 하는 경우는 <see cref="T:System.Web.Compilation.ExpressionBuilder" /> 재정의 해야 클래스는 <see cref="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /> 메서드.</para></block>
    <altmember cref="T:System.Web.Compilation.ExpressionBuilderContext" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilderCollection" />
    <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
    <altmember cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.Compilation.ExpressionBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때문에 합니다 <xref:System.Web.Compilation.ExpressionBuilder> 클래스는 추상 클래스, 인스턴스를 만들 수 없습니다 <xref:System.Web.Compilation.ExpressionBuilder> 사용 하 여 직접는 <xref:System.Web.Compilation.ExpressionBuilder.%23ctor%2A> 생성자입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>파생 하는 경우는 <see cref="T:System.Web.Compilation.ExpressionBuilder" /> 클래스에서 재정의 <see cref="M:System.Web.Compilation.ExpressionBuilder.#ctor" /> 생성자에 식 작성기 구현에 대 한 사용자 지정 초기화 작업을 구현 합니다.</para></block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilderContext" />
        <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
        <altmember cref="T:System.Web.Configuration.ExpressionBuilderCollection" />
        <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public virtual object EvaluateExpression (object target, System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(object target, class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EvaluateExpression (target As Object, entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ EvaluateExpression(System::Object ^ target, System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member EvaluateExpression : obj * System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; obj&#xA;override this.EvaluateExpression : obj * System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; obj" Usage="expressionBuilder.EvaluateExpression (target, entry, parsedData, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="target">식이 포함된 개체입니다.</param>
        <param name="entry">식에 의해 바인딩된 속성에 대한 정보를 나타내는 개체입니다.</param>
        <param name="parsedData"><see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />에 의해 반환된 구문 분석된 데이터를 포함하는 개체입니다.</param>
        <param name="context">식을 계산하는 데 필요한 컨텍스트 정보입니다.</param>
        <summary>파생 클래스에서 재정의하면 계산된 식을 나타내는 개체를 반환합니다.</summary>
        <returns>계산된 식을 나타내는 개체이고, 상속자가 <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />을 구현하지 않을 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하려는 경우에 <xref:System.Web.Compilation.ExpressionBuilder> 개체를 비 컴파일 기능을 지 원하는 페이지에서 활성화 재정의할 수 있습니다 합니다 <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> 메서드 및 <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> 속성입니다. <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> 메서드는 현재 식의 계산을 반환 해야 합니다.  
  
   
  
## Examples  
 다음 코드 예제에는 재정의 사용 하는 방법을 보여 줍니다. <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> 평가 된 식을 반환 하는 방법입니다.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#3)]    
 [!code-vb[System.Web.Compilation.ExpressionBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#3)]   
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>재정의 하는 경우는 <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /> 메서드를 재정의 해야 합니다 <see cref="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" /> 속성입니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetCodeExpression">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.CodeExpression GetCodeExpression (System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeExpression GetCodeExpression(class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCodeExpression (entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::CodeExpression ^ GetCodeExpression(System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member GetCodeExpression : System.Web.UI.BoundPropertyEntry * obj * System.Web.Compilation.ExpressionBuilderContext -&gt; System.CodeDom.CodeExpression" Usage="expressionBuilder.GetCodeExpression (entry, parsedData, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="entry">식에 의해 바인딩된 속성에 대한 정보를 나타내는 개체입니다.</param>
        <param name="parsedData"><see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />에 의해 반환된 구문 분석된 데이터를 포함하는 개체입니다.</param>
        <param name="context">식을 계산하는 데 필요한 컨텍스트 정보입니다.</param>
        <summary>파생 클래스에서 재정의되면 계산된 식을 가져오기 위해 페이지 실행 중에 사용되는 코드를 반환합니다.</summary>
        <returns>속성 할당에 사용되는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클래스에서 상속 되는 <xref:System.Web.Compilation.ExpressionBuilder> 클래스를 구현 해야 합니다는 <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> 추상 메서드.  
  
   
  
## Examples  
 다음 코드 예제를 반환 하는 방법에 설명 된 <xref:System.CodeDom.CodeExpression> 재정의 하 여 개체를 <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> 메서드.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#4)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#4)]   
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>컨트롤 속성에 대 한 적절 한 형식 캐스팅을 수행 하 고 캐스트 작업을 반환 해야 하는 사용자 지정 식 작성기를 구현 하는 경우는 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="ParseExpression">
      <MemberSignature Language="C#" Value="public virtual object ParseExpression (string expression, Type propertyType, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ParseExpression(string expression, class System.Type propertyType, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ParseExpression (expression As String, propertyType As Type, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ParseExpression(System::String ^ expression, Type ^ propertyType, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ParseExpression : string * Type * System.Web.Compilation.ExpressionBuilderContext -&gt; obj&#xA;override this.ParseExpression : string * Type * System.Web.Compilation.ExpressionBuilderContext -&gt; obj" Usage="expressionBuilder.ParseExpression (expression, propertyType, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="expression">선언적 식의 값입니다.</param>
        <param name="propertyType">식에 의해 바인딩된 속성의 형식입니다.</param>
        <param name="context">식을 계산하는 데 필요한 컨텍스트 정보입니다.</param>
        <summary>파생 클래스에서 재정의하면 구문 분석된 식을 나타내는 개체를 반환합니다.</summary>
        <returns>식의 구문 분석된 표현을 포함하는 <see cref="T:System.Object" />이고, <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />이 구현되지 않은 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생된 클래스에서 재정의 되 면이 메서드는 식 구문 분석 하 고으로 사용할 수 있는 개체로 반환 합니다 `parsedData` 의 매개 변수를 <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> 또는 <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsEvaluate">
      <MemberSignature Language="C#" Value="public virtual bool SupportsEvaluate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsEvaluate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SupportsEvaluate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SupportsEvaluate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsEvaluate : bool" Usage="System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>파생 클래스에서 재정의하면 현재 <see cref="T:System.Web.Compilation.ExpressionBuilder" /> 개체의 비컴파일 페이지 지원 여부를 나타내는 값을 반환합니다.</summary>
        <value><see cref="T:System.Web.Compilation.ExpressionBuilder" />가 식 계산을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본값은 <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> 속성은 `false`합니다. 컴파일되지 않은 페이지를 지원 하기 위해 모두 재정의 해야 합니다 <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> 메서드 및 <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> 속성입니다.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#2)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#2)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>