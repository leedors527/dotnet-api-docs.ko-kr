<Type Name="DynamicControl" FullName="System.Web.DynamicData.DynamicControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bc3651b3c6be85a8af25ef6e3bdf561c02fe807b" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55410396" /></Metadata><TypeSignature Language="C#" Value="public class DynamicControl : System.Web.UI.Control, System.Web.DynamicData.IFieldFormattingOptions, System.Web.DynamicData.IFieldTemplateHost, System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicControl extends System.Web.UI.Control implements class System.Web.DynamicData.IFieldFormattingOptions, class System.Web.DynamicData.IFieldTemplateHost, class System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicControl" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicControl&#xA;Inherits Control&#xA;Implements IAttributeAccessor, IFieldFormattingOptions, IFieldTemplateHost" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicControl : System::Web::UI::Control, System::Web::DynamicData::IFieldFormattingOptions, System::Web::DynamicData::IFieldTemplateHost, System::Web::UI::IAttributeAccessor" />
  <TypeSignature Language="F#" Value="type DynamicControl = class&#xA;    inherit Control&#xA;    interface IAttributeAccessor&#xA;    interface IFieldTemplateHost&#xA;    interface IFieldFormattingOptions" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFieldFormattingOptions</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFieldTemplateHost</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IAttributeAccessor</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicControl), "DynamicControl.bmp")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicControl), "DynamicControl.ico")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ASP.NET Dynamic Data 기능을 사용하여 템플릿 기반 데이터 바인딩된 컨트롤의 필드에 대해 정의된 내용을 표시합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 항목 내용:  
  
-   [소개](#introduction)  
  
-   [선언 구문](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>소개  
 <xref:System.Web.DynamicData.DynamicControl> 컨트롤 같은 템플릿 데이터 바인딩된 컨트롤에서 사용 됩니다 <xref:System.Web.UI.WebControls.FormView> 또는 <xref:System.Web.UI.WebControls.ListView>을 사용자 지정 페이지에서 ASP.NET Dynamic Data 기능을 사용 하는 데이터 필드를 표시 합니다. 사용할 수도 있습니다는 <xref:System.Web.DynamicData.DynamicControl> 에서 제어를 <xref:System.Web.UI.WebControls.TemplateField> 필드를 <xref:System.Web.UI.WebControls.GridView> 또는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤.  
  
 합니다 <xref:System.Web.DynamicData.DynamicControl> 컨트롤의 유사한 기능을 제공 합니다 <xref:System.Web.DynamicData.DynamicField> 필드입니다. 그러나 때문에 <xref:System.Web.DynamicData.DynamicControl> 컨트롤 템플릿 내 에서만 사용은, 보다 유연 하 게 제어 필드 주위 다른 HTML 요소를 추가할 수 있으므로 데이터는 표시 하는 방법을 제공 합니다. 사용 하는 경우는 <xref:System.Web.DynamicData.DynamicControl> 컨트롤 다음 Dynamic Data 기능 활용을 걸릴 수 있습니다.  
  
-   데이터 형식에 따라 자동으로 필드 템플릿을 사용 하 여 필드에 대 한 적절 한 컨트롤을 렌더링 합니다. 필드 템플릿이 전체 애플리케이션에 대 한 전역적으로 수정할 수 있습니다.  
  
-   데이터베이스 스키마를 기반으로 하는 기본 제공 데이터 유효성 검사를 제공 합니다. 데이터 모델을 사용자 지정 하 여 유효성 검사 형식을 추가할 수도 있습니다.  
  
-   데이터 모델의 특성을 사용 하거나 사용 하 여 개별 필드에 대 한 데이터 렌더링을 사용자 지정을 <xref:System.Web.DynamicData.DynamicField.UIHint%2A> 속성입니다.  
  
 표시할 필드를 지정 하는 <xref:System.Web.DynamicData.DynamicControl> 컨트롤을 <xref:System.Web.DynamicData.DynamicControl.DataField%2A> 필드 이름 속성입니다. 설정 하 여 필드 값을 사용자 지정 서식 문자열을 적용할 수 있습니다는 <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> 속성입니다. 기본적으로 데이터 바인딩된 컨트롤을 읽기 전용 모드에 있을 때만 서식 문자열이 필드 값에 적용 됩니다. 서식 문자열에 데이터 바인딩된 컨트롤이 편집 모드에 있는 동안 표시 되는 값을 적용 하려면 설정 합니다 <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> 속성을 `true`입니다. 필드 값이 `null`를 설정 하 여 사용자 지정 캡션을 표시할 수 있습니다는 <xref:System.Web.DynamicData.DynamicControl.NullDisplayText%2A> 속성입니다. 합니다 <xref:System.Web.DynamicData.DynamicControl> 컨트롤에는 빈 문자열도 자동 변환할 수 있습니다 ("") 값을 null 값으로 설정 하 여 필드를 <xref:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull%2A> 속성을 `true`입니다.  
  
 <xref:System.Web.DynamicData.DynamicControl> 컨트롤이 다른 디스플레이 모드를 지원 합니다. 표시 하는 모드를 지정 하는 <xref:System.Web.DynamicData.DynamicControl> 컨트롤을 <xref:System.Web.DynamicData.DynamicControl.Mode%2A> 속성입니다. 다음 표에서 다양 한 모드를 보여 줍니다.  
  
 <xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>  
 표시 모드입니다. 이 사용자를 레코드 또는 데이터 필드의 값을 수정할 수 없습니다. 템플릿 중 하나에서 사용할 수 있습니다.  
  
 <xref:System.Web.UI.WebControls.DataBoundControlMode.Edit>  
 편집 모드입니다. 따라서 사용자가 기존 레코드의 값을 업데이트할 수 있습니다. 템플릿 편집에에서 사용 됩니다 (일반적으로 이름이 `EditItemTemplate`).  
  
 <xref:System.Web.UI.WebControls.DataBoundControlMode.Insert>  
 삽입 모드입니다. 따라서 사용자가 새 레코드에 대 한 값을 입력할 수 있습니다. Insert 템플릿에서 사용 됩니다 (일반적으로 이름이 `InsertItemTemplate`).  
  
 숨길 수 있습니다는 <xref:System.Web.DynamicData.DynamicControl> 설정 하 여 데이터 바인딩된 컨트롤에서 컨트롤을 <xref:System.Web.UI.Control.Visible%2A> 속성을 `false`입니다.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>선언 구문  
  
```  
<asp:DynamicControl  
    ApplyFormatInEditMode="True|False"  
    ConvertEmptyStringToNull="True|False"  
    CssClass="string"  
    DataField="string"  
    DataFormatString="string"  
    EnableViewState="True|False"  
    HtmlEncode="True|False"  
    ID="string"  
    Mode="Edit|Insert|ReadOnly"  
    NullDisplayText="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    UIHint="string"  
    ValidationGroup="string"  
    Visible="True|False"  
>  
</asp:DynamicControl>  
```  
  
   
  
## Examples  
 이 기능은 런타임에 코드 예제를 보려면: [실행](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicControl)합니다.  
  
 다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Web.DynamicData.DynamicControl> 에서 제어할를 <xref:System.Web.UI.WebControls.ListView> 컨트롤을 표시, 삽입, 삭제 및 데이터베이스 테이블에서 값을 편집 합니다. 하려면 삽입 작업을 확인 하기 위해 다음에 유의 해야 합니다 <xref:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated%2A> 의 속성을 `rowguid` 및 `ModifiedDate` 열으로 설정 `true`.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl/VB/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
    <altmember cref="T:System.Web.UI.WebControls.FormView" />
    <altmember cref="T:System.Web.UI.WebControls.GridView" />
    <altmember cref="T:System.Web.UI.WebControls.ListView" />
    <altmember cref="T:System.Web.UI.WebControls.Repeater" />
    <altmember cref="T:System.Web.DynamicData.DynamicField" />
    <related type="Article" href="https://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512">ASP.NET 동적 데이터 개요</related>
    <related type="Article" href="https://msdn.microsoft.com/library/e0166a58-9178-4660-81a6-175994b11b12">ASP.NET 동적 데이터 스 캐 폴딩</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Web.DynamicData.DynamicControl" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicControl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.DynamicData.DynamicControl" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicControl (System.Web.UI.WebControls.DataBoundControlMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Web.UI.WebControls.DataBoundControlMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.#ctor(System.Web.UI.WebControls.DataBoundControlMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As DataBoundControlMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicControl(System::Web::UI::WebControls::DataBoundControlMode mode);" />
      <MemberSignature Language="F#" Value="new System.Web.DynamicData.DynamicControl : System.Web.UI.WebControls.DataBoundControlMode -&gt; System.Web.DynamicData.DynamicControl" Usage="new System.Web.DynamicData.DynamicControl mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Web.UI.WebControls.DataBoundControlMode" />
      </Parameters>
      <Docs>
        <param name="mode">컨트롤의 모드를 지정하는 열거형 값 중 하나입니다.</param>
        <summary>지정된 모드를 사용하여 <see cref="T:System.Web.DynamicData.DynamicControl" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyFormatInEditMode">
      <MemberSignature Language="C#" Value="public bool ApplyFormatInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ApplyFormatInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ApplyFormatInEditMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ApplyFormatInEditMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ApplyFormatInEditMode : bool with get, set" Usage="System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>필드가 편집 모드에 있는 경우 <see cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" /> 속성에서 지정한 서식 문자열이 필드 값에 적용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>서식 문자열이 적용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.DynamicControl> 컨트롤에 읽기, 편집 또는 필드를 삽입 하는 데 사용할 수 있는 다른 디스플레이 모드입니다. 기본적으로 서식 지정 문자열을 지정 하 여는 <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> 속성 필드 값을 적용할 경우에만 <xref:System.Web.DynamicData.DynamicControl> 컨트롤은 읽기 전용 모드에 합니다. 서식 문자열에 데이터 바인딩된 컨트롤이 편집 모드에 있는 동안 표시 되는 값을 적용 하려면 설정 합니다 <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> 속성을 `true`입니다.  
  
> [!NOTE]
>  <xref:System.Web.DynamicData.DynamicControl> 컨트롤 서식 지정 필드는 데이터 원본에서 업데이트 될 때 자동으로 제거 되지 않습니다. 원하지 않는 저장 된 값의 일부분으로 서식 지정를 사용 하는 경우에 서식을 프로그래밍 방식으로 제거 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Mode" />
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaColumn Column { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Column" />
      <MemberSignature Language="VB.NET" Value="Public Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); void set(System::Web::DynamicData::MetaColumn ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Column : System.Web.DynamicData.MetaColumn with get, set" Usage="System.Web.DynamicData.DynamicControl.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤에 연결된 열 개체를 가져오거나 설정합니다.</summary>
        <value>컨트롤에 연결된 열 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 수는 <xref:System.Web.DynamicData.DynamicControl.Column%2A> 특정 열에 대 한 메타 데이터 정보를 가져올 속성입니다. <xref:System.Web.DynamicData.DynamicControl.Column%2A> 속성은 자동 설정 합니다 <xref:System.Web.DynamicData.DynamicControl> 컨트롤에 대해 제공 된 필드 이름에 따라는 <xref:System.Web.DynamicData.DynamicControl.DataField%2A> 속성.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Table" />
      </Docs>
    </Member>
    <Member MemberName="ConvertEmptyStringToNull">
      <MemberSignature Language="C#" Value="public bool ConvertEmptyStringToNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertEmptyStringToNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      <MemberSignature Language="VB.NET" Value="Public Property ConvertEmptyStringToNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConvertEmptyStringToNull { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ConvertEmptyStringToNull : bool with get, set" Usage="System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 소스에서 데이터 필드가 업데이트되는 경우 빈 문자열 값("")이 자동으로 null 값으로 변환되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>빈 문자열 값이 자동으로 null 값으로 변환되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.Parameter> 데이터 소스 컨트롤의 개체에 라는 속성도 <xref:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull%2A?displayProperty=nameWithType>합니다. 이 속성 같은 기능을 수행 합니다. 속성을 모두 적절 하 게 설정 되어 있는지 확인 합니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/5436e8f6-171a-4361-a9a3-cec826a08c91">Null 데이터베이스 값 처리를 사용 하 여 데이터 소스 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="CssClass">
      <MemberSignature Language="C#" Value="public virtual string CssClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CssClass" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.CssClass" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CssClass As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CssClass { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CssClass : string with get, set" Usage="System.Web.DynamicData.DynamicControl.CssClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.CssClassProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.DynamicData.DynamicControl" /> 컨트롤 내용의 표시 스타일을 지정하는 CSS 스타일시트 클래스를 가져오거나 설정합니다.</summary>
        <value>CSS 클래스의 이름입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataField : string with get, set" Usage="System.Web.DynamicData.DynamicControl.DataField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.DynamicData.DynamicControl" /> 컨트롤이 바인딩되는 데이터 필드의 이름을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.DynamicData.DynamicControl" /> 컨트롤이 바인딩할 데이터 필드의 이름입니다. 기본값은 빈 문자열("")로, 이 속성이 설정되어 있지 않음을 나타냅니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 합니다 <xref:System.Web.DynamicData.DynamicControl.DataField%2A> 속성에 바인딩할 데이터 필드를 지정 하는 <xref:System.Web.DynamicData.DynamicControl> 컨트롤입니다. 데이터 필드 이름 또는 외래 키 열, 관계 이름에 대 한 열 수 있습니다.  
  
 기본적으로 지정된 된 데이터 필드에서 표시 되는 <xref:System.Web.DynamicData.DynamicControl> 필드 데이터 형식과 연결 된 템플릿을 사용 하 여 제어 합니다. 설정 하 여 데이터 필드에 대 한 렌더링 되는 필드 템플릿을 변경할 수 있습니다는 <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> 속성입니다. 설정 하 여 표시 된 텍스트를 형식을 지정할 수도 있습니다는 <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> 속성입니다.  
  
 **참고** 의 특정 인스턴스에서이 설정 하는 대신 데이터 모델에 특성을 적용 해야 전역적으로 표시 및 데이터 필드의 동작을 변경 하려는 경우는 <xref:System.Web.DynamicData.DynamicControl> 제어 합니다. 자세한 내용은 [ASP.NET Dynamic Data](https://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512)합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Web.DynamicData.DynamicControl.DataField%2A> 표시할 필드를 지정 하는 속성을 <xref:System.Web.DynamicData.DynamicControl> 컨트롤입니다.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.DataField#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.DataField/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.DataField#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.DataField/VB/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.NullDisplayText" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.UIHint" />
      </Docs>
    </Member>
    <Member MemberName="DataFormatString">
      <MemberSignature Language="C#" Value="public string DataFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property DataFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFormatString : string with get, set" Usage="System.Web.DynamicData.DynamicControl.DataFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>필드 값의 표시 형식을 지정하는 문자열을 가져오거나 설정합니다.</summary>
        <value>필드 값의 표시 형식을 지정하는 서식 문자열입니다. 기본값은 빈 문자열("")로, 필드 값에 특정 형식이 적용되지 않음을 나타냅니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> 속성에 표시 되는 값에 대 한 사용자 지정 표시 형식을 지정 하는 <xref:System.Web.DynamicData.DynamicControl> 제어 합니다. 경우는 <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> 속성이 설정 되지 않은, 특별 한 서식 없이 필드 값이 표시 됩니다.  
  
 기본적으로 서식 문자열이 필드 값에 적용 됩니다 경우에만 합니다 <xref:System.Web.DynamicData.DynamicControl.Mode%2A> 속성이 <xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>합니다. 서식 문자열이 편집 모드에서 필드 값에 적용할 설정 합니다 <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> 속성을 `true`입니다.  
  
 표시 형식을 사용 하 여 지정한 합니다 <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> 속성이의이 인스턴스와 관련는 <xref:System.Web.DynamicData.DynamicControl> 제어 합니다. 적용 하 여 전체 애플리케이션 데이터 필드의 표시 형식을 변경할 수도 있습니다는 <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute> 데이터 모델 및 설정에는 <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString%2A?displayProperty=nameWithType> 명명 된 생성자에 매개 변수입니다. 자세한 내용은 [ASP.NET Dynamic Data](https://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute" />
        <altmember cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET의 서식 지정 형식</related>
      </Docs>
    </Member>
    <Member MemberName="FieldTemplate">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control FieldTemplate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control FieldTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.FieldTemplate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FieldTemplate As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Control ^ FieldTemplate { System::Web::UI::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FieldTemplate : System.Web.UI.Control" Usage="System.Web.DynamicData.DynamicControl.FieldTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.DynamicData.DynamicControl" /> 컨트롤에 대해 만든 필드 템플릿을 가져옵니다.</summary>
        <value><see cref="T:System.Web.DynamicData.DynamicControl" /> 컨트롤에 대해 만든 필드 템플릿입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public string GetAttribute (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttribute (key As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetAttribute(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member GetAttribute : string -&gt; string&#xA;override this.GetAttribute : string -&gt; string" Usage="dynamicControl.GetAttribute key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IAttributeAccessor.GetAttribute(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">특성 이름입니다.</param>
        <summary>지정된 키를 사용하여 특성 값을 검색합니다.</summary>
        <returns>특성 값</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특성 컬렉션에 있으면 `null`,이 메서드는 빈 문자열을 반환 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public bool HtmlEncode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HtmlEncode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.HtmlEncode" />
      <MemberSignature Language="VB.NET" Value="Public Property HtmlEncode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HtmlEncode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HtmlEncode : bool with get, set" Usage="System.Web.DynamicData.DynamicControl.HtmlEncode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤의 데이터가 렌더링되기 전에 HTML로 인코딩되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>컨트롤의 데이터가 렌더링되기 전에 HTML로 인코딩되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.DynamicData.DynamicControl.HtmlEncode%2A> 필드 값 표시 되기 전에 해당 문자열 표현에 HTML 인코딩 되는지 여부를 지정 하는 속성입니다.  
  
> [!NOTE]
>  HTML 인코딩 필드 값은 사이트 간 스크립팅 공격 및 악의적인 콘텐츠가 표시 되지 않도록 방지 하는 데 도움이 됩니다. 가능 하면이 속성을 설정 되어야 합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.DataBoundControlMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.DataBoundControlMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As DataBoundControlMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::DataBoundControlMode Mode { System::Web::UI::WebControls::DataBoundControlMode get(); void set(System::Web::UI::WebControls::DataBoundControlMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Web.UI.WebControls.DataBoundControlMode with get, set" Usage="System.Web.DynamicData.DynamicControl.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataBoundControlMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>렌더링 모드를 가져오거나 설정합니다.</summary>
        <value>컨트롤의 렌더링 모드를 지정하는 열거형 값 중 하나입니다. 기본값은 <see cref="F:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.DynamicData.DynamicControl.Mode%2A> 속성을 표시 하는 데는 렌더링 모드를 지정 합니다 <xref:System.Web.DynamicData.DynamicControl> 제어 합니다. 다음 표에서 다양 한 모드를 보여 줍니다.  
  
|모드|설명|  
|----------|-----------------|  
|<xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>|표시 모드입니다. 이 사용자를 레코드 또는 데이터 필드의 값을 수정할 수 없습니다. 템플릿 중 하나에서 사용할 수 있습니다. 기본값입니다.|  
|<xref:System.Web.UI.WebControls.DataBoundControlMode.Edit>|편집 모드입니다. 따라서 사용자가 기존 레코드의 값을 업데이트할 수 있습니다. 사용 된 `EditItemTemplate` 템플릿.|  
|<xref:System.Web.UI.WebControls.DataBoundControlMode.Insert>|삽입 모드입니다. 따라서 사용자가 새 레코드에 대 한 값을 입력할 수 있습니다. 사용 된 `InsertItemTemplate` 템플릿.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullDisplayText">
      <MemberSignature Language="C#" Value="public string NullDisplayText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NullDisplayText" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.NullDisplayText" />
      <MemberSignature Language="VB.NET" Value="Public Property NullDisplayText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NullDisplayText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NullDisplayText : string with get, set" Usage="System.Web.DynamicData.DynamicControl.NullDisplayText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>필드 값이 <see langword="null" />인 경우 데이터 필드에 대해 표시되는 캡션을 가져오거나 설정합니다.</summary>
        <value>필드 값이 <see langword="null" />인 경우 데이터 필드에 대해 표시되는 캡션입니다. 기본값은 빈 문자열("")로, 이 속성이 설정되어 있지 않음을 나타냅니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우에 따라 필드 값을 데이터 원본에 null로 저장 됩니다. 사용자 지정 설정 하 여 null 값이 있는 필드에 대해 표시할 캡션을 지정할 수 있습니다는 <xref:System.Web.DynamicData.DynamicControl.NullDisplayText%2A> 속성입니다. Null 필드 값에 빈 문자열로 표시 되는이 속성을 설정 하지 않으면 ("").  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="dynamicControl.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터입니다.</param>
        <summary><see cref="E:System.Web.UI.Control.Init" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Web.DynamicData.DynamicControl.OnInit%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.DynamicData.DynamicControl.DataField" /> 속성이 설정되어 있지 않은 경우</exception>
        <block subset="none" type="overrides"><para>재정의 하는 경우 <see cref="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스 <see cref="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="dynamicControl.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">클라이언트의 브라우저에서 <see cref="T:System.Web.DynamicData.DynamicControl" /> 컨트롤 내용을 렌더링하는 데 사용되는 개체입니다.</param>
        <summary>지정된 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체를 사용하여 <see cref="T:System.Web.DynamicData.DynamicControl" /> 컨트롤 내용을 클라이언트 브라우저에 렌더링합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.DynamicData.DynamicControl.Render%2A> 메서드는 주로 컨트롤 개발자가 확장 하는 <xref:System.Web.DynamicData.DynamicControl> 제어 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttribute">
      <MemberSignature Language="C#" Value="public void SetAttribute (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAttribute(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttribute (key As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetAttribute(System::String ^ key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetAttribute : string * string -&gt; unit&#xA;override this.SetAttribute : string * string -&gt; unit" Usage="dynamicControl.SetAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IAttributeAccessor.SetAttribute(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">설정할 특성의 이름입니다.</param>
        <param name="value">특성에 할당할 값입니다.</param>
        <summary>지정된 특성을 지정된 값으로 설정합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFieldTemplateHost.FormattingOptions">
      <MemberSignature Language="C#" Value="System.Web.DynamicData.IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.FormattingOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.System#Web#DynamicData#IFieldTemplateHost#FormattingOptions" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property FormattingOptions As IFieldFormattingOptions Implements IFieldTemplateHost.FormattingOptions" />
      <MemberSignature Language="C++ CLI" Value="property System::Web::DynamicData::IFieldFormattingOptions ^ System::Web::DynamicData::IFieldTemplateHost::FormattingOptions { System::Web::DynamicData::IFieldFormattingOptions ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IFieldTemplateHost.FormattingOptions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.IFieldFormattingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 멤버에 대한 설명은 <see cref="P:System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />를 참조하세요.</summary>
        <value>필드 템플릿에 적용되는 서식 옵션입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public virtual System.Web.DynamicData.MetaTable Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaTable Table" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Table" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Table As MetaTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::DynamicData::MetaTable ^ Table { System::Web::DynamicData::MetaTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Table : System.Web.DynamicData.MetaTable" Usage="System.Web.DynamicData.DynamicControl.Table" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤에 연결된 테이블 개체를 가져옵니다.</summary>
        <value>컨트롤에 연결된 테이블 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 합니다 <xref:System.Web.DynamicData.DynamicControl.Table%2A> 속성이 포함 된 데이터 바인딩된 컨트롤을 사용 하 여 연결 된 테이블에 대 한 메타 데이터 정보에 액세스할 수는 <xref:System.Web.DynamicData.DynamicControl> 제어 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><see cref="T:System.Web.DynamicData.DynamicControl" /> 컨트롤이 <see cref="T:System.Web.DynamicData.IDynamicDataSource" /> 인터페이스를 구현하는 데이터 소스 컨트롤에 바인딩되지 않은 데이터 바인딩된 컨트롤 내에 있는 경우</exception>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Column" />
      </Docs>
    </Member>
    <Member MemberName="UIHint">
      <MemberSignature Language="C#" Value="public virtual string UIHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UIHint" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.UIHint" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UIHint As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UIHint { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UIHint : string with get, set" Usage="System.Web.DynamicData.DynamicControl.UIHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 필드를 렌더링하는 데 사용되는 필드 템플릿의 이름을 가져오거나 설정합니다.</summary>
        <value>데이터 필드를 렌더링하는 데 사용되는 필드 템플릿의 이름입니다. 기본값은 데이터 필드 형식 또는 데이터 모델에 적용된 메타데이터 정보를 기준으로 렌더링되는 필드 템플릿을 나타내는 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> 데이터 필드에 대 한 UI를 표시 하기 위해 사용할 필드 템플릿을 지정 하는 속성입니다. 기본적으로 필드 템플릿에 사용자 정의 컨트롤 및 해당 이름 및 삽입 작업 편집 작업에 사용 되는 필드 템플릿을 식별 하는 접미사가 포함 합니다. 접미사는 각각 편집 (_e) 및 삽입 (_i) 합니다. 값을 설정 하면는 <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> 접미사 없이 이름을 설정한 속성입니다. 동적 데이터를 평가 하 여 올바른 모드는 식별 된 <xref:System.Web.DynamicData.DynamicControl.Mode%2A> 속성 값 및 올바른 필드 템플릿을 렌더링 합니다.  
  
 경우는 <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> 속성이 설정 되지 않은, 기본적으로 동적 데이터 필드 형식에 따라 템플릿을 렌더링 합니다. 자세한 내용은 [ASP.NET 동적 데이터 스 캐 폴딩](https://msdn.microsoft.com/library/e0166a58-9178-4660-81a6-175994b11b12)합니다.  
  
 사용 하 여 지정 된 필드 템플릿의 합니다 <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> 속성이의이 인스턴스와 관련는 <xref:System.Web.DynamicData.DynamicControl> 컨트롤입니다. 필드 템플릿에 적용 하 여 전체 애플리케이션 데이터 필드에서 사용 하는 변경할 수도 있습니다는 <xref:System.ComponentModel.DataAnnotations.UIHintAttribute> 데이터 모델을 합니다. 설정 된 <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> 속성 데이터 모델에 적용 된 메타 데이터를 재정의 합니다. 메타 데이터 특성에 대 한 자세한 내용은 참조 하세요. [ASP.NET Dynamic Data](https://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512)합니다.  
  
   
  
## Examples  
 이 기능은 런타임에 코드 예제를 보려면: [실행](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicControl.UIHint)합니다.  
  
 다음 예제에서는 다른 필드 템플릿을 사용 하 여 해당 내용을 렌더링 하는 데이터 필드를 지정 하는 방법을 보여 줍니다. 두 번째 예제에서 지정 된 사용자 지정 필드 템플릿을 보여 줍니다는 <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> 속성입니다.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.UIHint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.UIHint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/VB/Default.aspx#1)]  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.UIHint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/CS/Email.ascx#2)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.UIHint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/VB/Email.ascx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <related type="Article" href="https://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512">ASP.NET Dynamic Data 모델 개요</related>
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ValidationGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValidationGroup As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ValidationGroup { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationGroup : string with get, set" Usage="System.Web.DynamicData.DynamicControl.ValidationGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤에 대한 유효성 검사 그룹 이름을 가져오거나 설정합니다.</summary>
        <value>컨트롤에 대한 유효성 검사 그룹 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 유효성 검사 그룹을 사용 하면 페이지에 유효성 검사 컨트롤 특정 범주에 할당할 수 있습니다. 각 유효성 검사 그룹 페이지의 다른 유효성 검사 그룹의 독립적으로 확인할 수 있습니다. 사용 합니다 <xref:System.Web.DynamicData.DynamicControl.ValidationGroup%2A> 는 유효성 검사 그룹의 이름을 지정 하는 속성을 <xref:System.Web.DynamicData.DynamicControl> 컨트롤이 유효성 검사 페이지가 서버에 다시 게시 하는 경우.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>