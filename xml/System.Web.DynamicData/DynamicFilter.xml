<Type Name="DynamicFilter" FullName="System.Web.DynamicData.DynamicFilter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="53ae6018d8ed5fa7277be3d56dc544f15aa2a0aa" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55337076" /></Metadata><TypeSignature Language="C#" Value="public class DynamicFilter : System.Web.UI.Control, System.Web.DynamicData.IFilterExpressionProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicFilter extends System.Web.UI.Control implements class System.Web.DynamicData.IFilterExpressionProvider" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicFilter" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicFilter&#xA;Inherits Control&#xA;Implements IFilterExpressionProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicFilter : System::Web::UI::Control, System::Web::DynamicData::IFilterExpressionProvider" />
  <TypeSignature Language="F#" Value="type DynamicFilter = class&#xA;    inherit Control&#xA;    interface IFilterExpressionProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFilterExpressionProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>지정된 열을 사용하여 테이블 행을 필터링하는 UI를 표시합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 항목 내용:  
  
-   [소개](#introduction)  
  
-   [ClassContext](#ClassContext)  
  
-   [선언 구문](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>소개  
 <xref:System.Web.DynamicData.DynamicFilter> 컨트롤 테이블 행 필터링에 대 한 UI를 생성 하는 페이지 태그에서 사용 됩니다. 동적 데이터 ~\DynamicData\Filters 폴더에 있는 기본 필터 템플릿을 사용 하 여 UI를 만듭니다. 이러한 템플릿은 외래 키, 부울 및 열거형 형식만 지원합니다.  
  
 다음 표에서 일부의 작업을 수행할 수 있습니다.  
  
|시나리오|설명|  
|--------------|-----------------|  
|테이블 행 필터링에 사용할 열을 지정 합니다.|속성을 사용 하 여 <xref:System.Web.DynamicData.DynamicFilter.DataField%2A> 테이블 행 필터링에 사용할 열을 지정 합니다.|  
|UI를 만드는 데 사용할 필터 템플릿의 이름을 지정 합니다.|속성을 사용 하 여 <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> UI를 만드는 데 사용할 필터 템플릿의 이름을 지정 합니다.|  
|UI가 렌더링 되기 전에 사용자 지정 작업을 수행 합니다.|사용 된 <xref:System.Web.DynamicData.DynamicFilter.FilterChanged> UI가 렌더링 되기 전에 사용자 지정 작업을 수행 하 합니다.|  
  
 다음과 같은 방법으로 사용할 필터 템플릿을 지정할 수 있습니다.  
  
-   사용 하 여는 <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> 페이지 태그에는 속성입니다. 이 방법은 프레젠테이션 계층 사용자 지정 스키마 (데이터베이스)를 및 단일 페이지에 적용 합니다.  
  
-   사용 하 여는 <xref:System.ComponentModel.DataAnnotations.FilterUIHintAttribute> 모델의 특성입니다. 이 방법은 데이터 계층 사용자 지정, 특정 스키마 (데이터베이스)에 종속 되 고 전체 애플리케이션에 적용 되는 것입니다.  
  
 두 방법 모두를 사용 하는 경우 태그에서 지정 된 필터 템플릿을 데이터 모델에 지정 된 서식 파일 보다 우선 합니다.  
  
<a name="ClassContext"></a>   
## <a name="class-context"></a>클래스 컨텍스트  
 <xref:System.Web.DynamicData.DynamicFilter> 컨트롤은 사용 하도록 설계를 <xref:System.Web.UI.WebControls.QueryExtender> 제어 합니다. <xref:System.Web.DynamicData.DynamicFilter> 컨트롤에서 참조 되는 <xref:System.Web.DynamicData.DynamicFilterExpression> 내 인스턴스를 <xref:System.Web.UI.WebControls.QueryExtender> 페이지 태그에서 개체.  
  
 다음 그림에는 Dynamic Data 테이블 행 외래 키 열으로 필터링을 구현 하려면 다음 단계를 보여 줍니다.  
  
 ![요소를 쿼리 하는 동적 데이터](~/add/media/dynamic-dataquery.png "동적 데이터 쿼리 요소")  
  
1.  합니다 <xref:System.Web.DynamicData.DynamicFilter> 제어에 선택한 값을 전달 합니다 <xref:System.Web.UI.WebControls.QueryExtender> 컨트롤입니다.  
  
2.  <xref:System.Web.UI.WebControls.QueryExtender> 컨트롤 필터링 정보 쿼리를 만드는 값을 사용 합니다. 그러면 데이터 소스 컨트롤에이 정보를 전달합니다.  
  
3.  데이터 소스 컨트롤에는 데이터 원본 공급자 필터링 쿼리 정보를 전달합니다.  
  
4.  데이터 원본 공급자 데이터베이스에 쿼리를 전달합니다.  
  
5.  데이터베이스에는 필터링 된 테이블 행을 반환합니다.  
  
6.  데이터 원본 공급자는 데이터 소스 컨트롤에 다시이 데이터를 보냅니다.  
  
7.  데이터 소스 컨트롤 표시를 위해 데이터 바인딩된 컨트롤에 필터링 된 테이블 행을 전달합니다.  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>선언 구문  
  
```  
<asp:DynamicFilter  
    ID="Control ID"  
    DataField="Name of the data field to use for filtering"  
    EnableViewState="True|False"   
    FilterUIHint="Name of the filter template to generate the UI"  
    OnFilterChanged="Filter changed event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"   
    Visible="True|False"  
    runat="server"/>  
```  
  
   
  
## Examples  
 이 위치에서 소스 코드를 사용 하 여 Visual Studio 프로젝트를 사용할 수 있습니다: [다운로드](https://go.microsoft.com/fwlink/?LinkId=168914)합니다.  
  
 다음 예제에서는 기본 ForeignKey.ascx 필터 템플릿의 사용 하 여 ProductCategory 외래 키 열을 기준으로 제품 테이블 행 필터링에 대 한 UI를 만듭니다. 사용자가 ProductCategory 값을 선택 하면 값을 포함 하는 행만 표시 됩니다.  
  
 예제에는 다음이 필요합니다.  
  
-   Dynamic Data 웹 사이트 또는 Dynamic Data 웹 애플리케이션을 합니다. 만들 수 있습니다는 `AdventureWorksLTDataContext` 데이터 컨텍스트 데이터베이스와 테이블을 액세스에 대 한 클래스를 만들 수 있습니다. 자세한 내용은 `Walkthrough: Creating a New Dynamic Data Web Site using Scaffolding`을 참조하세요.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicFilter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicFilter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx#1)]  
  
 [!code-csharp[System.Web.DynamicData.DynamicFilter#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx.cs#2)]
 [!code-vb[System.Web.DynamicData.DynamicFilter#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.DynamicData.QueryableFilterRepeater" />
    <related type="Article" href="https://msdn.microsoft.com/library/7c86f5d5-795c-4b28-8733-8ea9c0802d0f">연습: 부모-자식 관계를 테이블의 행을 필터링</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.DynamicData.DynamicFilter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 하지 않으면 일반적으로 <xref:System.Web.DynamicData.DynamicFilter.%23ctor%2A> 직접 생성자입니다. 사용 하는 대신는 <xref:System.Web.DynamicData.DynamicFilter> 페이지 태그에서 클래스 및 클래스는 페이지가 로드 될 때 초기화 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="protected internal System.Web.DynamicData.MetaColumn Column { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.Column" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Column : System.Web.DynamicData.MetaColumn" Usage="System.Web.DynamicData.DynamicFilter.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>필터링에 사용할 테이블 열을 가져오거나 설정합니다.</summary>
        <value>필터링에 사용할 테이블 열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 내부 전용입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataField : string with get, set" Usage="System.Web.DynamicData.DynamicFilter.DataField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>테이블 행 필터링에 사용할 열의 이름을 가져오거나 설정합니다.</summary>
        <value>테이블 행 필터링에 사용할 열의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 태그에서 필터링 하는 테이블 행의 열을 지정 하는 방법을 보여 줍니다.  
  
```  
<asp:DynamicFilter ID="CategoryFilter" runat="server"   
    DataField="ProductCategory" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FilterChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FilterChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.DynamicData.DynamicFilter.FilterChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event FilterChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ FilterChanged;" />
      <MemberSignature Language="F#" Value="member this.FilterChanged : EventHandler " Usage="member this.FilterChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 외래 키의 값을 선택할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.DynamicFilter.FilterChanged> 외래 키 값을 선택할 때 및 새 값을 렌더링 하기 전에 이벤트가 발생 합니다. 이 옵션을 사용 하면 사용자 지정 페이징 등의 사용자 지정 작업을 수행할 수 있는 이벤트 처리 메서드를 제공할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 필터 변경 이벤트를 처리 하는 방법을 보여 줍니다. 필터링된 된 행을 표시 하기 전에 처리기 페이지 인덱스를 다시 설정 합니다.  
  
 [!code-csharp[System.Web.DynamicData.DynamicFilter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx.cs#3)]
 [!code-vb[System.Web.DynamicData.DynamicFilter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTemplate">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control FilterTemplate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control FilterTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.FilterTemplate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterTemplate As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Control ^ FilterTemplate { System::Web::UI::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterTemplate : System.Web.UI.Control" Usage="System.Web.DynamicData.DynamicFilter.FilterTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 컨트롤의 현재 인스턴스와 연결된 필터 템플릿을 가져옵니다.</summary>
        <value>이 컨트롤의 현재 인스턴스와 연결된 필터 템플릿입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 동적 데이터는 지원 되는 열 형식에 대 한 테이블 행 필터링에 대 한 UI를 생성 합니다. ~\DynamicData\Filters 폴더에 있는 기본 필터 템플릿을 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterUIHint">
      <MemberSignature Language="C#" Value="public string FilterUIHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterUIHint" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.FilterUIHint" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterUIHint As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterUIHint { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterUIHint : string with get, set" Usage="System.Web.DynamicData.DynamicFilter.FilterUIHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>UI를 만드는 데 사용되는 필터 템플릿의 이름을 가져오거나 설정합니다.</summary>
        <value>필터 템플릿의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> 속성 테이블 행 필터링에 대 한 UI를 만드는 필터 템플릿을 지정할 수 있습니다. 다음과 같은 방법으로 사용할 필터 템플릿을 지정할 수 있습니다.  
  
-   사용 하 여는 <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> 페이지 태그에는 속성입니다. 이 방법은 프레젠테이션 계층 사용자 지정 스키마 (데이터베이스)를 및 단일 페이지에 적용 합니다.  
  
-   사용 하 여는 <xref:System.ComponentModel.DataAnnotations.FilterUIHintAttribute> 모델의 특성입니다. 이 방법은 특정 스키마 (데이터베이스)에 종속 되 고 전체 애플리케이션에 적용 되는 데이터 계층 사용자 지정 합니다.  
  
 두 방법 모두를 사용 하는 경우 태그에서 지정 된 필터 템플릿을 데이터 모델에서 지정 된 템플릿을 보다 우선 합니다.  
  
   
  
## Examples  
 다음 예제에서는 필터 템플릿을 필터링에 사용할 태그를 지정 하는 방법을 보여 줍니다.  
  
```  
<asp:DynamicFilter ID="CategoryFilter" runat="server"   
    FilterUIHint="ForeignKey" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="dynamicFilter.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">서버 컨트롤 콘텐츠를 받는 개체입니다.</param>
        <summary>지정된 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체에 서버 컨트롤 콘텐츠를 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 작성기에는 콘텐츠 페이지를 렌더링합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFilterExpressionProvider.GetQueryable">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IFilterExpressionProvider.GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Function GetQueryable (source As IQueryable) As IQueryable Implements IFilterExpressionProvider.GetQueryable" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(System::Linq::IQueryable ^ source) = System::Web::DynamicData::IFilterExpressionProvider::GetQueryable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(System.Linq.IQueryable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">데이터 소스 쿼리입니다.</param>
        <summary>현재 필터 값을 사용하여 수정된 쿼리를 가져옵니다.</summary>
        <returns>필터입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Web.DynamicData.DynamicFilter> 인스턴스가 <xref:System.Web.DynamicData.IFilterExpressionProvider> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFilterExpressionProvider.Initialize">
      <MemberSignature Language="C#" Value="void IFilterExpressionProvider.Initialize (System.Web.UI.WebControls.IQueryableDataSource dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.DynamicData.IFilterExpressionProvider.Initialize(class System.Web.UI.WebControls.IQueryableDataSource dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#Initialize(System.Web.UI.WebControls.IQueryableDataSource)" />
      <MemberSignature Language="VB.NET" Value="Sub Initialize (dataSource As IQueryableDataSource) Implements IFilterExpressionProvider.Initialize" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.DynamicData.IFilterExpressionProvider.Initialize(System::Web::UI::WebControls::IQueryableDataSource ^ dataSource) = System::Web::DynamicData::IFilterExpressionProvider::Initialize;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IFilterExpressionProvider.Initialize(System.Web.UI.WebControls.IQueryableDataSource)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Web.UI.WebControls.IQueryableDataSource" />
      </Parameters>
      <Docs>
        <param name="dataSource">데이터 원본입니다.</param>
        <summary><see cref="T:System.Web.DynamicData.DynamicFilter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Web.DynamicData.DynamicFilter> 인스턴스가 <xref:System.Web.DynamicData.IFilterExpressionProvider> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>