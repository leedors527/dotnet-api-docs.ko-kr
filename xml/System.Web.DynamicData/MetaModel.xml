<Type Name="MetaModel" FullName="System.Web.DynamicData.MetaModel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="475c98fed30142c3e2bcba86463536b1f8706d96" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57940032" /></Metadata><TypeSignature Language="C#" Value="public class MetaModel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MetaModel extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.MetaModel" />
  <TypeSignature Language="VB.NET" Value="Public Class MetaModel" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetaModel" />
  <TypeSignature Language="F#" Value="type MetaModel = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ASP.NET Dynamic Data에서 사용하는 하나 또는 여러 데이터베이스를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.MetaModel> Dynamic Data 웹 응용 프로그램 하나 또는 여러 데이터 컨텍스트를 등록할 수 있습니다.  
  
 데이터 컨텍스트는 데이터베이스 연결을 나타내는 개체입니다. 데이터 컨텍스트를 해당 연결을 통해 사용할 수 있는 데이터베이스를 나타내는 데이터 모델에 액세스할 수 있습니다. 데이터 모델은 CLR 형식으로 데이터베이스의 데이터 엔터티를 나타내는 개체입니다. Dynamic Data LINQ to SQL과 ADO.NET Entity Framework를 기반으로 하는 데이터 모델을 지원 합니다.  
  
 Visual Studio에서 데이터 모델 형식을 사용 하 여 생성할 수 있습니다 합니다 **LINQ to SQL 클래스** 템플릿 또는 **ADO.NET Entity Data Model** 템플릿. 이러한 템플릿은 LINQ to SQL 모델 또는 Entity Framework 모델에 대 한 ADO.NET 엔터티 데이터 모델 디자이너 (Entity Designer)에 대 한 개체 관계형 디자이너 (O/R 디자이너)를 사용합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다 <xref:System.Web.DynamicData.MetaModel> ASP.NET 웹 사이트에서 자동 스 캐 폴딩을 사용 하려면 다음 작업을 수행 하는 형식:  
  
-   기본 데이터 컨텍스트에 대 한 데이터 모델을 가져옵니다.  
  
-   지정 된 데이터 컨텍스트에 대 한 데이터 모델을 가져옵니다.  
  
-   라우팅 경로 평가 (URL 확인) 지정된 된 테이블에 대 한 합니다.  
  
 이 예제에서는 페이지와 해당 코드 숨김 파일로 구성 됩니다.  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/PlaceHolder.cs#1)]
 [!code-aspx-csharp[System.Web.DynamicData.MetaModel#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/PathModel.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.MetaModel#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/PathModel.aspx#1)]
 [!code-vb[System.Web.DynamicData.MetaModel#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/PlaceHolder.vb#1)]  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/PathModel.aspx.cs#2)]
 [!code-vb[System.Web.DynamicData.MetaModel#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/PathModel.aspx.vb#2)]  
  
 예제를 컴파일하려면 다음이 필요 합니다.  
  
-   [!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)] 또는 [!INCLUDE[vwd_exp_dev10_long](~/includes/vwd-exp-dev10-long-md.md)]  
  
-   Dynamic Data 웹 사이트입니다. 자세한 내용은 [연습: 스 캐 폴딩을 사용 하 여 새 동적 데이터 웹 사이트 만들기](https://msdn.microsoft.com/library/1564aef2-9103-436a-9806-c8ad7abd616a)합니다.  
  
 이 기능은 런타임에 코드 예제를 보려면: [실행](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.MetaModel)합니다.  
  
 ]]></format>
    </remarks>
    <exception cref="T:System.InvalidOperationException">데이터 컨텍스트 등록 오류가 발생한 경우 메서드에서 throw될 수 있습니다.</exception>
    <related type="Article" href="https://msdn.microsoft.com/library/ee5dd2fb-5bb8-4bd7-a13d-d0a2659c3870">ASP.NET Dynamic Data 모델 사용자 지정</related>
    <related type="Article" href="https://msdn.microsoft.com/library/45e477c0-5c6b-41f9-b2d0-2808fb4f6537">개체 관계형 디자이너(O/R 디자이너)</related>
    <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
    <related type="Article" href="https://msdn.microsoft.com/library/200fe812-d0a6-4531-b9b4-cfc4ee83a678">방법: 경로 정의 합니다.</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Web.DynamicData.MetaModel" /> 클래스의 새 인스턴스를 인스턴스화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetaModel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MetaModel();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.DynamicData.MetaModel" /> 클래스의 새 인스턴스를 인스턴스화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 호출 합니다 <xref:System.Web.DynamicData.MetaModel.%23ctor%2A> 의 생성자는 `Application_Start` Global.asax 파일의 메서드.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법의 <xref:System.Web.DynamicData.MetaModel.%23ctor%2A> 다음 작업을 수행 하는 생성자.  
  
-   인스턴스화하는 <xref:System.Web.DynamicData.MetaModel> 클래스입니다.  
  
-   초기화 하 고 등록 된 <xref:System.Web.DynamicData.MetaModel> 인스턴스.  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#99](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/global.asax.cs#99)]
 [!code-vb[System.Web.DynamicData.MetaModel#99](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/global.asax.vb#99)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetaModel (bool registerGlobally);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool registerGlobally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (registerGlobally As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MetaModel(bool registerGlobally);" />
      <MemberSignature Language="F#" Value="new System.Web.DynamicData.MetaModel : bool -&gt; System.Web.DynamicData.MetaModel" Usage="new System.Web.DynamicData.MetaModel registerGlobally" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="registerGlobally" Type="System.Boolean" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="registerGlobally">모델이 전역적으로 등록된다는 것을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</param>
        <summary><see cref="T:System.Web.DynamicData.MetaModel" /> 클래스의 새 인스턴스를 인스턴스화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자를 사용 하 여 검색할 수 있도록 데이터 모델을 전체적으로 등록 되었는지 여부를 결정 합니다 <xref:System.Web.DynamicData.MetaModel.GetModel%2A> 메서드. 여러 모델을 만들고 동일한 엔터티 형식을 형식 충돌을 방지 하는 동안 사용할 수 있습니다.  
  
 일반적으로 호출 합니다 <xref:System.Web.DynamicData.MetaModel.%23ctor%2A> 의 생성자는 `Application_Start` Global.asax 파일의 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTable">
      <MemberSignature Language="C#" Value="protected virtual System.Web.DynamicData.MetaTable CreateTable (System.Web.DynamicData.ModelProviders.TableProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.DynamicData.MetaTable CreateTable(class System.Web.DynamicData.ModelProviders.TableProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.CreateTable(System.Web.DynamicData.ModelProviders.TableProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateTable (provider As TableProvider) As MetaTable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::DynamicData::MetaTable ^ CreateTable(System::Web::DynamicData::ModelProviders::TableProvider ^ provider);" />
      <MemberSignature Language="F#" Value="abstract member CreateTable : System.Web.DynamicData.ModelProviders.TableProvider -&gt; System.Web.DynamicData.MetaTable&#xA;override this.CreateTable : System.Web.DynamicData.ModelProviders.TableProvider -&gt; System.Web.DynamicData.MetaTable" Usage="metaModel.CreateTable provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.DynamicData.ModelProviders.TableProvider" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="provider">테이블의 공급자입니다.</param>
        <summary><see cref="T:System.Web.DynamicData.MetaTable" /> 개체를 인스턴스화합니다.</summary>
        <returns>테이블의 새 인스턴스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.MetaModel.CreateTable%2A> 메서드를 재정의 하 여 파생된 형식을 인스턴스화할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.DynamicData.MetaTable" />
        <altmember cref="T:System.Web.DynamicData.ModelProviders.TableProvider" />
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.DynamicData.MetaModel Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.DynamicData.MetaModel Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.MetaModel.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As MetaModel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::DynamicData::MetaModel ^ Default { System::Web::DynamicData::MetaModel ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Web.DynamicData.MetaModel" Usage="System.Web.DynamicData.MetaModel.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>응용 프로그램에서 만든 데이터 모델의 첫 번째 인스턴스를 가져옵니다.</summary>
        <value>데이터 모델 인스턴스입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 기본 데이터 모델 인스턴스를 참조 하는 간단한 방법을 제공 합니다. 여러 모델을 사용 하 여 응용 프로그램 추가 데이터 모델에 대 한 참조를 저장할 고유한 방법을 제공 해야 합니다. 특정 데이터 모델을 찾으려면 호출을 <xref:System.Web.DynamicData.MetaModel.GetModel%2A?displayProperty=nameWithType> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Web.DynamicData.MetaModel.Default%2A> 속성에는 <xref:System.Web.DynamicData.MetaModel.GetModel%2A> 메서드를 기본 데이터 모델을 가져옵니다.  
  
 전체 예제를 참조 하세요.를 <xref:System.Web.DynamicData.MetaModel> 클래스 개요입니다.  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#22](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/PathModel.aspx.cs#22)]
 [!code-vb[System.Web.DynamicData.MetaModel#22](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/PathModel.aspx.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DynamicDataFolderVirtualPath">
      <MemberSignature Language="C#" Value="public string DynamicDataFolderVirtualPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DynamicDataFolderVirtualPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.MetaModel.DynamicDataFolderVirtualPath" />
      <MemberSignature Language="VB.NET" Value="Public Property DynamicDataFolderVirtualPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DynamicDataFolderVirtualPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DynamicDataFolderVirtualPath : string with get, set" Usage="System.Web.DynamicData.MetaModel.DynamicDataFolderVirtualPath" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IMetaModel.DynamicDataFolderVirtualPath</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>웹 사이트에 있는 DynamicData 폴더의 가상 경로를 가져오거나 설정합니다.</summary>
        <value>DynamicData 폴더의 가상 경로입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 사용 하면 DynamicData 폴더의 가상 경로 변경할 수 있습니다. 기본값은 "~/DynamicData"입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityTemplateFactory">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.EntityTemplateFactory EntityTemplateFactory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.EntityTemplateFactory EntityTemplateFactory" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.MetaModel.EntityTemplateFactory" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityTemplateFactory As EntityTemplateFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::EntityTemplateFactory ^ EntityTemplateFactory { System::Web::DynamicData::EntityTemplateFactory ^ get(); void set(System::Web::DynamicData::EntityTemplateFactory ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EntityTemplateFactory : System.Web.DynamicData.EntityTemplateFactory with get, set" Usage="System.Web.DynamicData.MetaModel.EntityTemplateFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.EntityTemplateFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>모델과 연결된 <see cref="T:System.Web.DynamicData.EntityTemplateFactory" /> 개체를 가져오거나 설정합니다.</summary>
        <value>모델과 연결된 <see cref="T:System.Web.DynamicData.EntityTemplateFactory" /> 개체의 인스턴스입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FieldTemplateFactory">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.IFieldTemplateFactory FieldTemplateFactory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.IFieldTemplateFactory FieldTemplateFactory" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.MetaModel.FieldTemplateFactory" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldTemplateFactory As IFieldTemplateFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::IFieldTemplateFactory ^ FieldTemplateFactory { System::Web::DynamicData::IFieldTemplateFactory ^ get(); void set(System::Web::DynamicData::IFieldTemplateFactory ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FieldTemplateFactory : System.Web.DynamicData.IFieldTemplateFactory with get, set" Usage="System.Web.DynamicData.MetaModel.FieldTemplateFactory" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IMetaModel.FieldTemplateFactory</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.IFieldTemplateFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자 지정 <see cref="T:System.Web.DynamicData.IFieldTemplateFactory" /> 인터페이스를 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.DynamicData.IFieldTemplateFactory" /> 인터페이스</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.IFieldTemplateFactory> 인터페이스는 필드 템플릿을 테이블 열에 대해 생성 됩니다 지정할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterFactory">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.FilterFactory FilterFactory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.FilterFactory FilterFactory" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.MetaModel.FilterFactory" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterFactory As FilterFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::FilterFactory ^ FilterFactory { System::Web::DynamicData::FilterFactory ^ get(); void set(System::Web::DynamicData::FilterFactory ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterFactory : System.Web.DynamicData.FilterFactory with get, set" Usage="System.Web.DynamicData.MetaModel.FilterFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.FilterFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>모델과 연결된 <see cref="T:System.Web.DynamicData.FilterFactory" /> 개체를 가져오거나 설정합니다.</summary>
        <value>모델과 연결된 <see cref="T:System.Web.DynamicData.FilterFactory" /> 개체의 인스턴스입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionPath">
      <MemberSignature Language="C#" Value="public string GetActionPath (string tableName, string action, object row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetActionPath(string tableName, string action, object row) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.GetActionPath(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetActionPath (tableName As String, action As String, row As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetActionPath(System::String ^ tableName, System::String ^ action, System::Object ^ row);" />
      <MemberSignature Language="F#" Value="abstract member GetActionPath : string * string * obj -&gt; string&#xA;override this.GetActionPath : string * string * obj -&gt; string" Usage="metaModel.GetActionPath (tableName, action, row)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IMetaModel.GetActionPath(System.String,System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableName" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
        <Parameter Name="row" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="tableName">동작이 적용되는 테이블의 이름입니다.</param>
        <param name="action">테이블에 적용할 동작입니다.</param>
        <param name="row">테이블에 있는 단일 데이터 행을 나타내는 개체입니다. <paramref name="row" />를 사용하여 쿼리 문자열 매개 변수의 값을 제공할 수 있습니다.</param>
        <summary>특정 테이블에 연결된 동작 경로를 반환합니다.</summary>
        <returns>경로에 연결된 URL입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경로는 테이블 이름 및 동작의 조합에 의해 결정 됩니다.  
  
 [실행](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.MetaModel&spage=PathModel.aspx) 이 기능의 예로 온라인입니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법의 <xref:System.Web.DynamicData.MetaModel.GetActionPath%28System.String%2CSystem.String%2CSystem.Object%29> 라우팅 경로 평가 하는 방법 (URL 확인) 지정된 된 테이블에 대 한 합니다. 전체 예제는 <xref:System.Web.DynamicData.MetaModel>를 참조하세요.  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#23](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/PathModel.aspx.cs#23)]
 [!code-vb[System.Web.DynamicData.MetaModel#23](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/PathModel.aspx.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModel">
      <MemberSignature Language="C#" Value="public static System.Web.DynamicData.MetaModel GetModel (Type contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.DynamicData.MetaModel GetModel(class System.Type contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.GetModel(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetModel (contextType As Type) As MetaModel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::DynamicData::MetaModel ^ GetModel(Type ^ contextType);" />
      <MemberSignature Language="F#" Value="static member GetModel : Type -&gt; System.Web.DynamicData.MetaModel" Usage="System.Web.DynamicData.MetaModel.GetModel contextType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="contextType">데이터 모델에 정의된 데이터 컨텍스트의 형식입니다.</param>
        <summary>지정된 컨텍스트에 대한 데이터 모델 인스턴스를 반환합니다.</summary>
        <returns>지정된 컨텍스트 형식에 연결된 데이터 모델입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 사용 하는 방법의 <xref:System.Web.DynamicData.MetaModel.GetModel%28System.Type%29> 다음 작업을 수행 하는 방법.  
  
-   기본 데이터 모델을 가져옵니다.  
  
-   전달된 된 컨텍스트 형식으로 지정 된 데이터 모델을 가져옵니다.  
  
 전체 예제를 참조 하세요.를 <xref:System.Web.DynamicData.MetaModel> 클래스 개요입니다.  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#22](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/PathModel.aspx.cs#22)]
 [!code-vb[System.Web.DynamicData.MetaModel#22](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/PathModel.aspx.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTable">
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.ArgumentNullException">테이블을 찾을 수 없는 경우</exception>
        <summary>데이터 모델 테이블을 설명하는 메타데이터를 반환합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.DynamicData.MetaTable> 오버 로드 된 메서드에 의해 반환 되는 개체에 지정된 된 테이블을 사용 하 여 연결 된 메타 데이터 정보를 포함 합니다.  
  
 [실행](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.MetaModel&spage=GetTable.aspx) 이 기능의 예로 온라인입니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법의 <xref:System.Web.DynamicData.MetaModel.GetTable%2A> 오버 로드 된 다음 작업을 수행 하는 메서드:  
  
-   가져오기는 <xref:System.Web.DynamicData.MetaTable> 지정된 된 테이블에 대 한 개체입니다.  
  
-   에 포함 된 메타 데이터 정보에 액세스 합니다 <xref:System.Web.DynamicData.MetaTable> 개체입니다.  
  
 이 예제에서는 페이지와 해당 코드 숨김 파일로 구성 됩니다.  
  
 [!code-aspx-csharp[System.Web.DynamicData.MetaModel#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/GetTable.aspx#3)] -->
 [!code-aspx-vb[System.Web.DynamicData.MetaModel#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/GetTable.aspx#3)] --> 
  
 [!code-csharp[System.Web.DynamicData.MetaModel#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/GetTable.aspx.cs#4)]
 [!code-vb[System.Web.DynamicData.MetaModel#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/gettable.aspx.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.DynamicData.MetaTable" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTable">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaTable GetTable (string uniqueTableName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.DynamicData.MetaTable GetTable(string uniqueTableName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.GetTable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTable (uniqueTableName As String) As MetaTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::DynamicData::MetaTable ^ GetTable(System::String ^ uniqueTableName);" />
      <MemberSignature Language="F#" Value="member this.GetTable : string -&gt; System.Web.DynamicData.MetaTable" Usage="metaModel.GetTable uniqueTableName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueTableName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueTableName">데이터 모델의 테이블을 식별하는 이름입니다.</param>
        <summary>지정된 테이블에 연결된 메타데이터를 반환합니다.</summary>
        <returns>지정된 테이블을 설명하는 메타데이터입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이름을 고유 하 게 데이터 모델에서 테이블을 식별 및 라우팅에 대 한 관련된 URL을 생성 하는 데 사용 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Web.DynamicData.MetaModel.GetTable%28System.String%29> 메서드를 지정된 된 테이블에 대 한 메타 데이터를 가져옵니다. 전체 예제는 <xref:System.Web.DynamicData.MetaModel.GetTable%2A>를 참조하세요.  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#42](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/GetTable.aspx.cs#42)]
 [!code-vb[System.Web.DynamicData.MetaModel#42](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/gettable.aspx.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">데이터 모델에서 이름을 찾을 수 없는 경우</exception>
        <altmember cref="T:System.Web.DynamicData.MetaTable" />
      </Docs>
    </Member>
    <Member MemberName="GetTable">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaTable GetTable (Type entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.DynamicData.MetaTable GetTable(class System.Type entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.GetTable(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTable (entityType As Type) As MetaTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::DynamicData::MetaTable ^ GetTable(Type ^ entityType);" />
      <MemberSignature Language="F#" Value="member this.GetTable : Type -&gt; System.Web.DynamicData.MetaTable" Usage="metaModel.GetTable entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="entityType">데이터 모델의 테이블을 식별하는 형식입니다.</param>
        <summary>지정된 테이블을 설명하는 메타데이터를 반환합니다.</summary>
        <returns>지정된 테이블을 설명하는 메타데이터입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Web.DynamicData.MetaModel.GetTable%28System.Type%29> 메서드를 지정된 된 테이블에 대 한 메타 데이터를 가져옵니다. 전체 예제는 <xref:System.Web.DynamicData.MetaModel.GetTable%2A>를 참조하세요.  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#41](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/GetTable.aspx.cs#41)]
 [!code-vb[System.Web.DynamicData.MetaModel#41](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/gettable.aspx.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">데이터 모델에서 형식을 찾을 수 없는 경우</exception>
        <altmember cref="T:System.Web.DynamicData.MetaTable" />
      </Docs>
    </Member>
    <Member MemberName="GetTable">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaTable GetTable (string tableName, Type contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.DynamicData.MetaTable GetTable(string tableName, class System.Type contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.GetTable(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTable (tableName As String, contextType As Type) As MetaTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::DynamicData::MetaTable ^ GetTable(System::String ^ tableName, Type ^ contextType);" />
      <MemberSignature Language="F#" Value="member this.GetTable : string * Type -&gt; System.Web.DynamicData.MetaTable" Usage="metaModel.GetTable (tableName, contextType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableName" Type="System.String" />
        <Parameter Name="contextType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="tableName">테이블의 이름입니다.</param>
        <param name="contextType">테이블을 검색할 데이터 컨텍스트입니다.</param>
        <summary>지정된 테이블을 설명하는 메타데이터를 반환합니다.</summary>
        <returns>지정된 테이블을 설명하는 메타데이터입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Web.DynamicData.MetaModel.GetTable%28System.String%2CSystem.Type%29> 메서드를 지정된 된 테이블에 대 한 메타 데이터를 가져옵니다. 전체 예제는 <xref:System.Web.DynamicData.MetaModel.GetTable%2A>를 참조하세요.  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#43](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/GetTable.aspx.cs#43)]
 [!code-vb[System.Web.DynamicData.MetaModel#43](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/gettable.aspx.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="tablename" /> 또는 <paramref name="contextType" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">컨텍스트가 등록되어 있지 않거나 데이터 컨텍스트에 테이블이 없는 경우</exception>
        <altmember cref="T:System.Web.DynamicData.MetaTable" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterContext">
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>데이터 컨텍스트를 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 속성을 사용 하 여 데이터 컨텍스트 초기화 정보를 정의할 수는 <xref:System.Web.DynamicData.ContextConfiguration> 클래스입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public void RegisterContext (Func&lt;object&gt; contextFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Func`1&lt;object&gt; contextFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.RegisterContext(System.Func{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterContext (contextFactory As Func(Of Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterContext(Func&lt;System::Object ^&gt; ^ contextFactory);" />
      <MemberSignature Language="F#" Value="abstract member RegisterContext : Func&lt;obj&gt; -&gt; unit&#xA;override this.RegisterContext : Func&lt;obj&gt; -&gt; unit" Usage="metaModel.RegisterContext contextFactory" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IMetaModel.RegisterContext(System.Func{System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextFactory" Type="System.Func&lt;System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="contextFactory">데이터 컨텍스트를 인스턴스화하기 위한 팩터리입니다.</param>
        <summary>컨텍스트 팩터리에서 지정하는 데이터 컨텍스트를 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 정의한 기본 컨텍스트 정보를 사용 하는이 메서드는 <xref:System.Web.DynamicData.ContextConfiguration> 클래스입니다. 고유한 생성자를 사용 하 여 데이터 컨텍스트를 인스턴스화할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public void RegisterContext (Type contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Type contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.RegisterContext(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterContext (contextType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterContext(Type ^ contextType);" />
      <MemberSignature Language="F#" Value="abstract member RegisterContext : Type -&gt; unit&#xA;override this.RegisterContext : Type -&gt; unit" Usage="metaModel.RegisterContext contextType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IMetaModel.RegisterContext(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="contextType">데이터 모델에 정의된 데이터 컨텍스트의 형식입니다.</param>
        <summary>데이터 컨텍스트 인스턴스를 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 정의 된 대로 기본 컨텍스트 정보를 사용 하 여는 <xref:System.Web.DynamicData.ContextConfiguration> 클래스입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public void RegisterContext (System.Web.DynamicData.ModelProviders.DataModelProvider dataModelProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Web.DynamicData.ModelProviders.DataModelProvider dataModelProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.RegisterContext(System.Web.DynamicData.ModelProviders.DataModelProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterContext(System::Web::DynamicData::ModelProviders::DataModelProvider ^ dataModelProvider);" />
      <MemberSignature Language="F#" Value="abstract member RegisterContext : System.Web.DynamicData.ModelProviders.DataModelProvider -&gt; unit&#xA;override this.RegisterContext : System.Web.DynamicData.ModelProviders.DataModelProvider -&gt; unit" Usage="metaModel.RegisterContext dataModelProvider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IMetaModel.RegisterContext(System.Web.DynamicData.ModelProviders.DataModelProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataModelProvider" Type="System.Web.DynamicData.ModelProviders.DataModelProvider" />
      </Parameters>
      <Docs>
        <param name="dataModelProvider">데이터 모델에 대한 공급자입니다.</param>
        <summary>데이터 모델 공급자를 사용하여 데이터 컨텍스트 인스턴스를 등록합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public void RegisterContext (Func&lt;object&gt; contextFactory, System.Web.DynamicData.ContextConfiguration configuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Func`1&lt;object&gt; contextFactory, class System.Web.DynamicData.ContextConfiguration configuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.RegisterContext(System.Func{System.Object},System.Web.DynamicData.ContextConfiguration)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterContext (contextFactory As Func(Of Object), configuration As ContextConfiguration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterContext(Func&lt;System::Object ^&gt; ^ contextFactory, System::Web::DynamicData::ContextConfiguration ^ configuration);" />
      <MemberSignature Language="F#" Value="abstract member RegisterContext : Func&lt;obj&gt; * System.Web.DynamicData.ContextConfiguration -&gt; unit&#xA;override this.RegisterContext : Func&lt;obj&gt; * System.Web.DynamicData.ContextConfiguration -&gt; unit" Usage="metaModel.RegisterContext (contextFactory, configuration)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IMetaModel.RegisterContext(System.Func{System.Object},System.Web.DynamicData.ContextConfiguration)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextFactory" Type="System.Func&lt;System.Object&gt;" />
        <Parameter Name="configuration" Type="System.Web.DynamicData.ContextConfiguration" />
      </Parameters>
      <Docs>
        <param name="contextFactory">데이터 모델 컨텍스트를 인스턴스화하는 데 사용되는 대리자입니다.</param>
        <param name="configuration"><see cref="T:System.Web.DynamicData.ContextConfiguration" /> 클래스에서 정의하는 컨텍스트 정보입니다.</param>
        <summary>지정된 컨텍스트 구성을 사용하고 사용자 지정 생성자를 활성화하여 데이터 컨텍스트 인스턴스를 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드에서 컨텍스트 팩터리를 사용 하면 사용자 지정 생성자를 사용 하 여 데이터 모델 컨텍스트를 인스턴스화할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="contextFactory" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="contextType" />에서 인스턴스화한 <paramref name="contextFactory" />이 잘못된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public void RegisterContext (Type contextType, System.Web.DynamicData.ContextConfiguration configuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Type contextType, class System.Web.DynamicData.ContextConfiguration configuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.RegisterContext(System.Type,System.Web.DynamicData.ContextConfiguration)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterContext (contextType As Type, configuration As ContextConfiguration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterContext(Type ^ contextType, System::Web::DynamicData::ContextConfiguration ^ configuration);" />
      <MemberSignature Language="F#" Value="abstract member RegisterContext : Type * System.Web.DynamicData.ContextConfiguration -&gt; unit&#xA;override this.RegisterContext : Type * System.Web.DynamicData.ContextConfiguration -&gt; unit" Usage="metaModel.RegisterContext (contextType, configuration)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IMetaModel.RegisterContext(System.Type,System.Web.DynamicData.ContextConfiguration)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextType" Type="System.Type" />
        <Parameter Name="configuration" Type="System.Web.DynamicData.ContextConfiguration" />
      </Parameters>
      <Docs>
        <param name="contextType">데이터 모델에 정의된 데이터 컨텍스트의 형식입니다.</param>
        <param name="configuration"><see cref="T:System.Web.DynamicData.ContextConfiguration" /> 클래스에서 정의하는 컨텍스트에 대한 구성 정보입니다.</param>
        <summary>지정된 컨텍스트 구성을 사용하여 데이터 컨텍스트 인스턴스를 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.DynamicData.MetaModel.RegisterContext%28System.Type%2CSystem.Web.DynamicData.ContextConfiguration%29> 스 캐 폴딩이 활성화를 사용 하 여 데이터 컨텍스트를 등록 하는 방법에 지정 된 대로 `configuration` 매개 변수입니다.  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#99](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/global.asax.cs#99)]
 [!code-vb[System.Web.DynamicData.MetaModel#99](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/global.asax.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="contextType" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterContext">
      <MemberSignature Language="C#" Value="public virtual void RegisterContext (System.Web.DynamicData.ModelProviders.DataModelProvider dataModelProvider, System.Web.DynamicData.ContextConfiguration configuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterContext(class System.Web.DynamicData.ModelProviders.DataModelProvider dataModelProvider, class System.Web.DynamicData.ContextConfiguration configuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.RegisterContext(System.Web.DynamicData.ModelProviders.DataModelProvider,System.Web.DynamicData.ContextConfiguration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterContext(System::Web::DynamicData::ModelProviders::DataModelProvider ^ dataModelProvider, System::Web::DynamicData::ContextConfiguration ^ configuration);" />
      <MemberSignature Language="F#" Value="abstract member RegisterContext : System.Web.DynamicData.ModelProviders.DataModelProvider * System.Web.DynamicData.ContextConfiguration -&gt; unit&#xA;override this.RegisterContext : System.Web.DynamicData.ModelProviders.DataModelProvider * System.Web.DynamicData.ContextConfiguration -&gt; unit" Usage="metaModel.RegisterContext (dataModelProvider, configuration)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IMetaModel.RegisterContext(System.Web.DynamicData.ModelProviders.DataModelProvider,System.Web.DynamicData.ContextConfiguration)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataModelProvider" Type="System.Web.DynamicData.ModelProviders.DataModelProvider" />
        <Parameter Name="configuration" Type="System.Web.DynamicData.ContextConfiguration" />
      </Parameters>
      <Docs>
        <param name="dataModelProvider">데이터 모델에 대한 공급자입니다.</param>
        <param name="configuration"><see cref="T:System.Web.DynamicData.ContextConfiguration" /> 클래스에서 정의하는 컨텍스트 정보입니다.</param>
        <summary>지정된 컨텍스트 구성을 사용하고 데이터 모델 공급자를 활성화하여 데이터 컨텍스트 인스턴스를 등록합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dataModelProvider" /> 또는 <paramref name="configuration" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="contextType" />은(는) 이미 등록되어 있습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetRegistrationException">
      <MemberSignature Language="C#" Value="public static void ResetRegistrationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetRegistrationException() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.ResetRegistrationException" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ResetRegistrationException ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ResetRegistrationException();" />
      <MemberSignature Language="F#" Value="static member ResetRegistrationException : unit -&gt; unit" Usage="System.Web.DynamicData.MetaModel.ResetRegistrationException " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>발생했을 수도 있는 모든 이전 컨텍스트 등록 오류를 다시 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터 컨텍스트 등록 하는 동안 오류가 발생 하는 경우 예외가 캐시 되 고 모든 후속 작업에서 예외가 발생 합니다. 예를 들어, 응용 프로그램 시작 시 오류가 발생 하는 경우 모든 요청에서 throw 됩니다. 오류가 해결을 수행할 새 컨텍스트 등록을 사용 하도록 설정 하려면이 메서드를 호출 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tables">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.DynamicData.MetaTable&gt; Tables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.DynamicData.MetaTable&gt; Tables" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.MetaModel.Tables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tables As ReadOnlyCollection(Of MetaTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::DynamicData::MetaTable ^&gt; ^ Tables { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::DynamicData::MetaTable ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Tables : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.DynamicData.MetaTable&gt;" Usage="System.Web.DynamicData.MetaModel.Tables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.DynamicData.MetaTable&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 모델의 일부인 모든 테이블의 컬렉션을 가져옵니다.</summary>
        <value>데이터 모델에 속한 테이블을 포함하는 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 컬렉션에 표시 되지 않는 테이블을 포함 하는 데이터 모델의 모든 테이블 (동적 데이터 스 캐 폴딩의 일부가 아닌).  
  
 [실행](https://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.MetaModel&spage=TablesMenu.aspx) 이 기능의 예로 온라인입니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.DynamicData.MetaModel.Tables%2A> 고 <xref:System.Web.DynamicData.MetaModel.VisibleTables%2A> 다음 작업을 수행 하는 속성:  
  
-   데이터 모델에서 모든 테이블의 컬렉션을 가져오고 표시에 `GridView` 제어 합니다.  
  
-   데이터 모델에서 표시 되는 테이블의 컬렉션을 가져오고 표시에 `GridView` 제어 합니다.  
  
 이 예제에서는 페이지와 해당 코드 숨김 파일로 구성 됩니다.  
  
 [!code-aspx-csharp[System.Web.DynamicData.MetaModel#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/TablesMenu.aspx#5)]
 [!code-aspx-vb[System.Web.DynamicData.MetaModel#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/TablesMenu.aspx#5)]  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/TablesMenu.aspx.cs#6)]
 [!code-vb[System.Web.DynamicData.MetaModel#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/TablesMenu.aspx.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryGetTable">
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 테이블에 연결된 메타데이터를 가져오려고 합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryGetTable">
      <MemberSignature Language="C#" Value="public bool TryGetTable (string uniqueTableName, out System.Web.DynamicData.MetaTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetTable(string uniqueTableName, [out] class System.Web.DynamicData.MetaTable&amp; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.TryGetTable(System.String,System.Web.DynamicData.MetaTable@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetTable (uniqueTableName As String, ByRef table As MetaTable) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetTable(System::String ^ uniqueTableName, [Runtime::InteropServices::Out] System::Web::DynamicData::MetaTable ^ % table);" />
      <MemberSignature Language="F#" Value="member this.TryGetTable : string *  -&gt; bool" Usage="metaModel.TryGetTable (uniqueTableName, table)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueTableName" Type="System.String" />
        <Parameter Name="table" Type="System.Web.DynamicData.MetaTable" RefType="out" />
      </Parameters>
      <Docs>
        <param name="uniqueTableName">테이블을 고유하게 식별하는 이름입니다.</param>
        <param name="table">이 메서드가 반환되고 요청된 테이블을 찾은 경우 해당 테이블에 대한 메타데이터를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>지정된 테이블에 연결된 메타데이터를 가져오려고 합니다.</summary>
        <returns>테이블 메타데이터를 찾으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정된 된 테이블을 사용 하 여 연결 된 메타 데이터를 가져옵니다. 테이블 없는 경우이 메서드는 반환 `false`합니다. 이 반해를 <xref:System.Web.DynamicData.MetaModel.GetTable%2A> 메서드 테이블을 찾을 수 없으면 예외를 throw 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="uniqueTableName" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetTable">
      <MemberSignature Language="C#" Value="public bool TryGetTable (Type entityType, out System.Web.DynamicData.MetaTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetTable(class System.Type entityType, [out] class System.Web.DynamicData.MetaTable&amp; table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.MetaModel.TryGetTable(System.Type,System.Web.DynamicData.MetaTable@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetTable (entityType As Type, ByRef table As MetaTable) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetTable(Type ^ entityType, [Runtime::InteropServices::Out] System::Web::DynamicData::MetaTable ^ % table);" />
      <MemberSignature Language="F#" Value="member this.TryGetTable : Type *  -&gt; bool" Usage="metaModel.TryGetTable (entityType, table)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="table" Type="System.Web.DynamicData.MetaTable" RefType="out" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="entityType">테이블 형식입니다.</param>
        <param name="table">이 메서드가 반환되고 요청된 테이블을 찾은 경우 지정된 테이블에 대한 메타데이터를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>지정된 테이블에 연결된 메타데이터를 가져오려고 합니다.</summary>
        <returns>테이블 메타데이터를 찾으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정된 된 테이블을 사용 하 여 연결 된 메타 데이터를 가져옵니다. 테이블 없는 경우이 메서드는 반환 `false`합니다. 이 반해를 <xref:System.Web.DynamicData.MetaModel.GetTable%2A> 메서드 테이블을 찾을 수 없으면 예외를 throw 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entityType" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="VisibleTables">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;System.Web.DynamicData.MetaTable&gt; VisibleTables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;class System.Web.DynamicData.MetaTable&gt; VisibleTables" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.MetaModel.VisibleTables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisibleTables As List(Of MetaTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::List&lt;System::Web::DynamicData::MetaTable ^&gt; ^ VisibleTables { System::Collections::Generic::List&lt;System::Web::DynamicData::MetaTable ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.VisibleTables : System.Collections.Generic.List&lt;System.Web.DynamicData.MetaTable&gt;" Usage="System.Web.DynamicData.MetaModel.VisibleTables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.Web.DynamicData.MetaTable&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 모델에서 표시되는 테이블의 컬렉션을 가져옵니다.</summary>
        <value>표시되는 테이블은 스캐폴딩이 활성화된 테이블을 가리킵니다. 즉 List.aspx 페이지가 있는 테이블을 지칭합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 사용 하는 방법의 <xref:System.Web.DynamicData.MetaModel.VisibleTables%2A> 데이터 모델에 표시 되는 테이블의 컬렉션을 가져올 속성입니다. 전체 예제를 참조 하세요.를 <xref:System.Web.DynamicData.MetaModel> 클래스 개요입니다.  
  
 [!code-csharp[System.Web.DynamicData.MetaModel#62](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/CS/TablesMenu.aspx.cs#62)]
 [!code-vb[System.Web.DynamicData.MetaModel#62](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.MetaModel/VB/TablesMenu.aspx.vb#62)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>