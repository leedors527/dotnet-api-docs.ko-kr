<Type Name="VirtualFile" FullName="System.Web.Hosting.VirtualFile">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d836ceafaf02295d93210a7a96948628d4d83d27" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="37751682" /></Metadata><TypeSignature Language="C#" Value="public abstract class VirtualFile : System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VirtualFile extends System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.VirtualFile" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VirtualFile&#xA;Inherits VirtualFileBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class VirtualFile abstract : System::Web::Hosting::VirtualFileBase" />
  <TypeSignature Language="F#" Value="type VirtualFile = class&#xA;    inherit VirtualFileBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Hosting.VirtualFileBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>가상 파일 또는 리소스 공간의 파일 개체를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.VirtualFile> 클래스는 기본 클래스 가상 파일 시스템에서 파일을 나타내는 개체입니다. 일반적으로 하위 항목의 구현 하는 합니다 <xref:System.Web.Hosting.VirtualFile> 각각에 대 한 클래스 <xref:System.Web.Hosting.VirtualPathProvider> 웹 애플리케이션에서 하위 개체입니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Web.Hosting.VirtualFile> 에 저장 된 정보를 결합 하는 클래스 구현을 <xref:System.Data.DataSet> HTML 데이터를 반환 하는 템플릿 파일을 사용 하 여 개체입니다. 이 코드 예제에 대 한 코드 예제를 사용 하 여 작동는 <xref:System.Web.Hosting.VirtualPathProvider> 및 <xref:System.Web.Hosting.VirtualDirectory> 되는 데이터에서 가상 리소스 저장소를 제공 하는 클래스에 로드 되는 <xref:System.Data.DataSet> 개체. 컴파일 및 예제를 실행 하는 것에 대 한 전체 지침의 예 섹션을 참조 합니다 <xref:System.Web.Hosting.VirtualPathProvider> 클래스 개요입니다.  
  
 이 예제는 세 부분: 합니다 <xref:System.Web.Hosting.VirtualFile> 클래스 구현에서는 XML 데이터 파일을 채우는 데 사용 합니다 <xref:System.Data.DataSet> 개체 및 페이지 템플릿 파일입니다.  
  
 첫 번째 코드 예제는 구현의 <xref:System.Web.Hosting.VirtualFile> 클래스입니다. 해당 생성자 메서드를 사용 하 여 사용자 지정 <xref:System.Web.Hosting.VirtualPathProvider> 반환할 개체는 <xref:System.Data.DataSet> 개체입니다. 그런 다음 검색을 <xref:System.Data.DataSet> 제공 된 가상 파일 경로와 관련 된 정보를 검색할 개체입니다. 에 <xref:System.Web.Hosting.VirtualFile.Open%2A> 에서 정보를 결합 메서드를 실행 하는 <xref:System.Data.DataSet> 템플릿 파일을 사용 하 여 개체 조합을으로 반환 합니다를 <xref:System.IO.Stream> 개체.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#40)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#40)]  
  
 두 번째 예제는 XML 데이터 파일을 채우는 데 사용 합니다 <xref:System.Data.DataSet> 사용자 지정 하 여 반환 되는 개체 <xref:System.Web.Hosting.VirtualPathProvider> 개체입니다. 이 XML 데이터를 사용 하 여 설명 하기 위해 사용 되는 <xref:System.Web.Hosting.VirtualPathProvider>, <xref:System.Web.Hosting.VirtualFile>, 및 <xref:System.Web.Hosting.VirtualDirectory> 클래스를 외부 데이터에서 데이터를 검색 하며 프로덕션 수준의 데이터 저장소를 나타내는 데 적합 하지 않습니다.  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
<resource type="dir"   
          path="/vrDir"   
          parentPath=""   
          content="">  
  <resource type="file"   
            path="/vrDir/Level1FileA.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileA.">  
  </resource>  
  <resource type="file"   
            path="/vrDir/Level1FileB.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileB.">  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirA"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirB"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
</resource>  
```  
  
 세 번째 예제에 가상 파일에 대 한 템플릿으로 사용 되는 텍스트 파일입니다. 파일에서 자리 표시자 백분율 (%) 표시 사이 텍스트와 같은 표시 됩니다 `%file%` 고 `%content%`입니다. 타임 스탬프는 캐시 된 가상 파일 데이터의 변경 내용을 모니터링 하는 데 사용 됩니다.  
  
```  
<html>  
  <head>  
    <title>File name: %file%</title>  
  </head>  
  
  <body>  
    <h1>%file%</h1>  
    <p>%content%</p>  
    <p>Page timestamp: %pageTimestamp%<br>  
       Data timestamp: %dataTimestamp%<br>  
       Template timestamp: %templateTimestamp%</p>  
  </body>  
</html>  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>상속 하는 경우는 <see cref="T:System.Web.Hosting.VirtualFile" /> 재정의 해야 클래스는 <see cref="M:System.Web.Hosting.VirtualFile.Open" /> 가상 리소스의 콘텐츠를 읽기 전용 스트림을 반환 하는 방법입니다.</para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VirtualFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (virtualPath As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; VirtualFile(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="new System.Web.Hosting.VirtualFile : string -&gt; System.Web.Hosting.VirtualFile" Usage="new System.Web.Hosting.VirtualFile virtualPath" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">이 인스턴스가 나타내는 리소스의 가상 경로입니다.</param>
        <summary><see cref="T:System.Web.Hosting.VirtualFile" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제는의 구현 합니다 <xref:System.Web.Hosting.VirtualFile.%23ctor%2A> 생성자에서 가상 파일 정보를 검색 하는 <xref:System.Data.DataSet> 사용자 지정에서 제공 하는 개체 <xref:System.Web.Hosting.VirtualPathProvider> 개체입니다. 예제를 실행 하는 데 필요한 전체 코드의 예제 섹션을 참조 하세요.를 <xref:System.Web.Hosting.VirtualFile> 클래스 개요입니다.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#41)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirectory">
      <MemberSignature Language="C#" Value="public override bool IsDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.VirtualFile.IsDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDirectory { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirectory : bool" Usage="System.Web.Hosting.VirtualFile.IsDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 항목이 파일로 처리할 가상 디렉터리임을 나타내는 값을 가져옵니다.</summary>
        <value>항상 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public abstract System.IO.Stream Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.Open" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Open () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::IO::Stream ^ Open();" />
      <MemberSignature Language="F#" Value="abstract member Open : unit -&gt; System.IO.Stream" Usage="virtualFile.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 재정의되면 가상 리소스에 대한 읽기 전용 스트림을 반환합니다.</summary>
        <returns>가상 파일에 대한 읽기 전용 스트림입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.Hosting.VirtualFile.Open%2A> 메서드 여 파일로 처리 하는 데이터를 포함 하는 스트림을 반환 합니다 <xref:System.Web.Hosting.VirtualPathProvider> 클래스입니다. 스트림 읽기 전용인 지 및 검색할 수 있는지 (의 <xref:System.IO.Stream.CanSeek%2A> 속성은 true).  
  
   
  
## Examples  
 다음 코드 예제는의 구현 된 <xref:System.Web.Hosting.VirtualFile.Open%2A> 메서드 템플릿 파일을 사용 하 여 가상 파일에 관한 정보를 결합 하 고 다음 조합을 반환 합니다. 템플릿 파일은 템플릿 파일을 검색 하는 파일 시스템을 여러 번 읽기 오버 헤드를 줄이기 위해 캐시 됩니다. 예제를 실행 하는 데 필요한 전체 코드의 예제 섹션을 참조 하세요.를 <xref:System.Web.Hosting.VirtualFile> 클래스 개요입니다.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#42)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#42)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>파생 클래스에서는 <see cref="M:System.Web.Hosting.VirtualFile.Open" /> 메서드를 찾을 수 있는 스트림을 반환 해야 합니다. 메서드 검색을 지원 하지 않는 스트림을 반환 하는 경우는 <see cref="T:System.NotSupportedException" /> 스트림을 전달 될 때 throw 되는 <see cref="T:System.Web.HttpResponse" /> 쓸 데이터 개체입니다. 예외를 읽으려고 시도 응답 때문에 발생 합니다 <see cref="P:System.IO.Stream.Length" /> 속성을 검색할 수 없는 스트림에서 속성에 액세스 하려고 하면 예외가 발생 하 고 합니다. 자세한 내용은 참조는 <see cref="P:System.IO.Stream.CanSeek" /> 속성입니다.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>