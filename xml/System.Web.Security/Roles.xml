<Type Name="Roles" FullName="System.Web.Security.Roles">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c6dc4629aee93ff5f1a9ecefde2c8aa42248a9d1" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="58875010" /></Metadata><TypeSignature Language="C#" Value="public static class Roles" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Roles extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.Roles" />
  <TypeSignature Language="VB.NET" Value="Public Class Roles" />
  <TypeSignature Language="C++ CLI" Value="public ref class Roles abstract sealed" />
  <TypeSignature Language="F#" Value="type Roles = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ASP.NET 응용 프로그램에서 권한 부여를 확인하기 위해 역할에서 사용자 멤버 자격을 관리합니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 역할 관리를 사용 하면 사용자의 역할 이라고 하는 그룹을 기반으로 하는 응용 프로그램에 대 한 권한 부여를 관리할 수 있습니다. 사용자 역할에 할당 하면 대신 또는 외에, 역할에 따라 웹 응용 프로그램의 다른 부분이 나 기능에 대 한 액세스 권한 부여 사용자 이름을 기반으로 지정 제어할 수 있습니다. 예를 들어, 각 역할에 대해 서로 다른 권한을 지정 되어 있는 관리자, 직원, 이사 및 등과 같은 역할이 직원 응용 프로그램 있을 수 있습니다.  
  
 사용자는 둘 이상의 역할에 속할 수 있습니다. 예를 들어, 토론 포럼 사이트의 경우 일부 사용자 역할의 멤버와 중재자 수 있습니다. 사이트에서 서로 다른 권한을 갖도록 각 역할을 정의할 수 있습니다 하 고 두 역할 모두에 있는 사용자는 권한 집합을 모두 갖게 합니다.  
  
 ASP.NET 응용 프로그램에 대 한 역할 관리를 사용 합니다 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 요소의 `system.web` 다음 예와에서 같이 응용 프로그램에 대 한 Web.config 파일의 섹션입니다.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
  
  <roleManager defaultProvider="SqlProvider"   
    enabled="true"  
    cacheRolesInCookie="true"  
    cookieName=".ASPROLES"  
    cookieTimeout="30"  
    cookiePath="/"  
    cookieRequireSSL="false"  
    cookieSlidingExpiration="true"  
    cookieProtection="All" >  
    <providers>  
      <add  
        name="SqlProvider"  
        type="System.Web.Security.SqlRoleProvider"  
        connectionStringName="SqlServices"  
        applicationName="SampleApplication" />  
      </providers>  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 웹 응용 프로그램에 대 한 구성 파일에서 또는 프로그래밍 방식으로 코드에서 권한 부여 규칙을 지정할 수 있습니다. 예를 들어, Web.config 파일에서 다음 섹션 (익명 사용자에 게 거부) 하 여 로그온 할 필요 하 고 액세스할 수 있도록 관리자 역할에 사용자만을 허용 합니다.  
  
```  
<authorization>  
  <deny users="?" />  
  <allow roles="Administrators" />  
  <deny users="*" />  
</authorization>  
```  
  
 사용 하는 경우는 `authorization` 응용 프로그램의 사용자 역할을 기반으로 하는 권한 부여를 지정 하려면 응용 프로그램의 Web.config 파일의 섹션에서 인증된 된 사용자 id를 제공 해야 합니다. Windows 또는 폼 인증을 사용 하 여 사용자를 인증할 수 있습니다. 익명 사용자 역할에 할당할 수 없습니다. 역할 독립적으로 또는 ASP.NET과 함께에서 사용할 수 있습니다 <xref:System.Web.Security.Membership> 클래스입니다.  
  
 역할 멤버 자격을 프로그래밍 방식으로 확인 하려면 사용할 수 있습니다는 <xref:System.Web.Security.Roles> 클래스 또는 <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> 속성을 <xref:System.Web.Security.Roles.IsUserInRole%2A> 메서드를 사용할 수 있습니다를 <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> 속성을를 <xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=nameWithType> 메서드. 프로그래밍 방식으로 역할 멤버 자격을 확인 하는 샘플 코드를이 항목의 예제 섹션을 참조 하세요.  
  
 <xref:System.Web.Security.Roles> 클래스 할 수도 있습니다를 만들고 역할을 삭제 하 고 사용자를 추가 하거나 역할에서 사용자를 제거 합니다.  
  
> [!NOTE]
>  사용 하도록 응용 프로그램을 구성한 경우를 <xref:System.Web.Security.WindowsTokenRoleProvider> 클래스, 역할 또는 역할 멤버 자격을 수정할 수 없습니다. <xref:System.Web.Security.WindowsTokenRoleProvider> 클래스만 Windows 보안 그룹의 구성원 자격을 확인 합니다. 이 경우을 만들어서 그룹을 삭제 하 고 그룹 멤버 자격 관리 ASP.NET 역할 보다는 Windows 사용자 계정 관리를 사용 해야 합니다.  
  
 여러 데이터 원본에서 역할 정보를 저장할 수 있습니다.  
  
-   사용할 수는 <xref:System.Web.Security.WindowsTokenRoleProvider> Windows 그룹 멤버 자격에 따라 역할 정보를 검색 하는 클래스입니다.  
  
-   사용 하 여 SQL Server 데이터베이스의 역할 정보를 저장할 수는 <xref:System.Web.Security.SqlRoleProvider> 클래스입니다.  
  
-   기존 역할 정보를 했거나에서 역할 정보를 저장 하 고 Windows, 권한 부여 저장소 또는 SQL Server 이외의 다른 데이터 원본에서 역할 정보를 검색 하려는 경우는 상속되는클래스를만들어사용자지정역할공급자를구현할수있습니다.<xref:System.Web.Security.RoleProvider> 추상 클래스입니다. 자세한 내용은 [역할 공급자 구현](https://msdn.microsoft.com/library/851671ce-bf9b-43f2-aba4-bc9d28b11c7d)합니다.  
  
 사용자의 브라우저에서 쿠키를 사용 하는 경우에 사용자의 컴퓨터에 쿠키에 해당 사용자에 대 한 역할 정보를 저장할 수 있습니다. 각 페이지 요청에 ASP.NET 쿠키에서 해당 사용자에 대 한 역할 정보를 읽습니다. 데이터 원본과 함께 역할 정보를 검색 하는 데 필요한 통신의 양을 줄여 응용 프로그램 성능이 향상 됩니다. 사용자에 대 한 역할 정보를 쿠키에 저장 하는 데 오랜 인 경우 ASP.NET 쿠키에 가장 최근에 사용된 된 역할 정보를 저장 하 고 필요에 따라 데이터 원본에서 추가 역할 정보를 조회 합니다. 사용자의 브라우저가 쿠키를 지원 하지 않는 경우 쿠키 사용 하지 않는 역할 정보를 쿠키에 캐시 되지 않습니다.  
  
 역할 이름 지정 하 여 쿠키에 캐시의 안정성을 향상 시킬 수 있습니다는 <xref:System.Web.Security.Roles.CookieProtectionValue%2A> ASP.NET 역할을 구성할 때 속성입니다. 기본값 <xref:System.Web.Security.Roles.CookieProtectionValue%2A> 는 `All`, 역할 이름 쿠키에서를 암호화 하 고 쿠키 내용이 변경 되지 않았는지 유효성을 검사 합니다.  
  
   
  
## Examples  
 다음 예제에서는 ASP.NET 멤버 자격 및 ASP.NET 역할 둘 다 사용 하 고 사용 하도록 구성 된 응용 프로그램에 대 한 Web.config 파일을 <xref:System.Web.Security.SqlRoleProvider> SQL Server 데이터베이스에 멤버 자격 및 역할 정보를 저장 합니다. 폼 인증을 사용 하 여 사용자가 인증 하 고 관리자 역할의 사용자만 응용 프로그램에 대 한 액세스를 허용 됩니다.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
  
    <authorization>  
      <deny users="?" />  
      <allow roles="Administrators" />  
      <deny users="*" />  
    </authorization>  
  
    <membership defaultProvider="AspNetSqlProvider" userIsOnlineTimeWindow="15">  
    </membership>  
  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="true"  
      cookieSlidingExpiration="true"  
      cookieProtection="All" >  
  
      <providers>  
        <clear />  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"  
          applicationName="SampleApplication" />  
        </providers>  
  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 다음 코드 예제에서는 프로그래밍 방식으로 다른 사용자에 게 역할을 볼 수 있도록 허용 하기 전에 로그온 한 사용자가 관리자 역할에 있는지 여부를 확인 합니다.  
  
  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
  </Docs>
  <Members>
    <Member MemberName="AddUsersToRole">
      <MemberSignature Language="C#" Value="public static void AddUsersToRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member AddUsersToRole : string[] * string -&gt; unit" Usage="System.Web.Security.Roles.AddUsersToRole (usernames, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">지정된 역할에 추가할 사용자 이름으로 이루어진 문자열 배열입니다.</param>
        <param name="roleName">지정된 사용자 이름을 추가할 역할입니다.</param>
        <summary>지정된 역할에 지정된 사용자를 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUsersToRole%2A> 데이터 소스의 지정된 된 역할을 사용 하 여 지정된 된 사용자를 연결 하는 기본 역할 공급자를 호출 합니다.  
  
 응용 프로그램에서 사용 하는 경우는 <xref:System.Web.Security.SqlRoleProvider> 클래스를 호출 하는 동안 수행 되는 데이터베이스 업데이트는 <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> 메서드는 트랜잭션 내에서 이루어집니다. 오류가 발생 하는 경우 지정된 된 역할에 이미 있는 사용자 이름을 같은 트랜잭션이 롤백되고 업데이트가 수행 되지 않습니다.  
  
> [!NOTE]
>  사용자 이름과 역할 이름에 쉼표를 포함할 수 없습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 역할에 하나 이상의 사용자를 추가 하거나 사용자 입력을 기반으로 하는 역할에서 사용자를 제거 합니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />가 <see langword="null" />입니다.  
  
또는 
<paramref name="usernames" />의 요소 중 하나가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />이 빈 문자열이거나 쉼표(,)를 포함하는 경우  
  
또는 
<paramref name="usernames" />의 요소 중 하나가 빈 문자열이거나 쉼표(,)를 포함하는 경우  
  
또는 
 <paramref name="usernames" />에 중복 요소가 포함된 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public static void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member AddUsersToRoles : string[] * string[] -&gt; unit" Usage="System.Web.Security.Roles.AddUsersToRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">지정된 역할에 추가할 사용자 이름으로 이루어진 문자열 배열입니다.</param>
        <param name="roleNames">지정된 사용자 이름을 추가할 역할 이름으로 이루어진 문자열 배열입니다.</param>
        <summary>지정된 역할에 지정된 사용자를 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUsersToRoles%2A> 데이터 소스의 지정된 된 역할을 사용 하 여 지정된 된 사용자를 연결 하는 기본 역할 공급자를 호출 합니다.  
  
 응용 프로그램에서 사용 하는 경우는 <xref:System.Web.Security.SqlRoleProvider> 클래스를 호출 하는 동안 수행 되는 데이터베이스 업데이트는 <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> 메서드는 트랜잭션 내에서 이루어집니다. 오류가 발생 하는 경우 지정된 된 역할에 이미 있는 사용자 이름을 같은 트랜잭션이 롤백되고 업데이트가 수행 되지 않습니다.  
  
> [!NOTE]
>  사용자 이름과 역할 이름에 쉼표를 포함할 수 없습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 하나 이상의 역할에 하나 이상의 사용자를 추가합니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/adduserstorolescs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.Roles#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/adduserstorolesvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleNames" />의 역할 중 하나가 <see langword="null" />인 경우  
  
또는 
<paramref name="usernames" />의 사용자 중 하나가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleNames" />의 역할 중 하나가 빈 문자열이거나 쉼표(,)를 포함하는 경우  
  
또는 
<paramref name="usernames" />의 사용자 중 하나가 빈 문자열이거나 쉼표(,)를 포함하는 경우  
  
또는 
 <paramref name="roleNames" />에 중복 요소가 포함된 경우  
  
또는 
 <paramref name="usernames" />에 중복 요소가 포함된 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRole">
      <MemberSignature Language="C#" Value="public static void AddUserToRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member AddUserToRole : string * string -&gt; unit" Usage="System.Web.Security.Roles.AddUserToRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">지정된 역할에 추가할 사용자 이름입니다.</param>
        <param name="roleName">지정된 사용자 이름을 추가할 역할입니다.</param>
        <summary>지정된 역할에 지정된 사용자를 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUserToRole%2A> 데이터 소스의 지정된 된 역할을 사용 하 여 지정된 된 사용자를 연결 하는 기본 역할 공급자를 호출 합니다.  
  
> [!NOTE]
>  사용자 이름과 역할 이름에 쉼표를 포함할 수 없습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 역할에 사용자를 추가합니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.Roles#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="username" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />이 빈 문자열이거나 쉼표(,)를 포함하는 경우  
  
또는 
 <paramref name="username" />이 빈 문자열이거나 쉼표(,)를 포함하는 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우  
  
또는 
사용자가 이미 특정 역할에 할당되어 있습니다.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRoles">
      <MemberSignature Language="C#" Value="public static void AddUserToRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member AddUserToRoles : string * string[] -&gt; unit" Usage="System.Web.Security.Roles.AddUserToRoles (username, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">지정된 역할에 추가할 사용자 이름입니다.</param>
        <param name="roleNames">지정된 사용자 이름을 추가할 역할로 이루어진 문자열 배열입니다.</param>
        <summary>지정된 역할에 지정된 사용자를 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.AddUserToRoles%2A> 데이터 소스의 지정된 된 역할을 사용 하 여 지정된 된 사용자를 연결 하는 기본 역할 공급자를 호출 합니다.  
  
 응용 프로그램에서 사용 하는 경우는 <xref:System.Web.Security.SqlRoleProvider> 클래스를 호출 하는 동안 수행 되는 데이터베이스 업데이트는 <xref:System.Web.Security.Roles.AddUserToRoles%2A> 메서드는 트랜잭션 내에서 이루어집니다. 오류가 발생 하는 경우 지정된 된 역할에 이미 있는 사용자 이름을 같은 트랜잭션이 롤백되고 업데이트가 수행 되지 않습니다.  
  
> [!NOTE]
>  사용자 이름과 역할 이름에 쉼표를 포함할 수 없습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 하나 이상의 역할에 사용자를 추가합니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolescs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.Roles#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolesvb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleNames" />의 역할 중 하나가 <see langword="null" />인 경우  
  
또는 
 <paramref name="username" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleNames" />의 역할 중 하나가 빈 문자열이거나 쉼표(,)를 포함하는 경우  
  
또는 
 <paramref name="username" />이 빈 문자열이거나 쉼표(,)를 포함하는 경우  
  
또는 
 <paramref name="roleNames" />에 중복 요소가 포함된 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.Roles.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>역할 정보를 저장하거나 검색할 애플리케이션의 이름을 가져오거나 설정합니다.</summary>
        <value>역할 정보를 저장하거나 검색할 애플리케이션의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.ApplicationName%2A> 속성은 사용을 <xref:System.Web.Security.Roles> 서로 다른 응용 프로그램을 사용 하 여 사용자 및 역할을 연결 하는 클래스입니다. 이 통해 여러 응용 프로그램이 동일한 데이터 소스를 사용 하 여 중복 된 사용자 이름이 나 중복 역할 이름 간의 충돌을 일으키지 않고 사용자 및 역할 정보를 저장할 수 있습니다. 여러 ASP.NET 응용 프로그램에서 동일한 값을 지정 하 여 동일한 데이터 소스를 사용할 수는 <xref:System.Web.Security.Roles.ApplicationName%2A> 속성입니다. 설정할 수 있습니다는 <xref:System.Web.Security.Roles.ApplicationName%2A> 속성을 프로그래밍 방식으로 웹 응용 프로그램 구성 파일 사용 하 여 선언적으로 설정할 수 있습니다는 `applicationName` 특성입니다.  
  
 웹 응용 프로그램을 사용 하는 경우는 <xref:System.Web.Security.SqlRoleProvider> 클래스 및 값에 지정 되지 않은 `applicationName` 구성 파일의 특성을 <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType> 현재 속성 값 <xref:System.Web.HttpContext.Request%2A?displayProperty=nameWithType> 속성을 사용 합니다.  
  
> [!CAUTION]
>  단일 기본 역할 공급자 인스턴스를 모든 제공한 요청에 대 한 사용 되기 때문에 <xref:System.Web.HttpApplication> 개체를 여러 요청이 동시에 실행을 설정 하려고 할 수 있습니다는 <xref:System.Web.Security.Roles.ApplicationName%2A> 속성 값입니다. 합니다 <xref:System.Web.Security.Roles.ApplicationName%2A> 속성은 여러 쓰기 작업에 대해 안전 하 고 변경 하는 스레드는 <xref:System.Web.Security.Roles.ApplicationName%2A> 속성 값은 응용 프로그램의 여러 사용자에 대 한 예기치 않은 동작이 발생할 수 있습니다. 사용자가 설정할 수 있게 해 주는 코드를 작성 하지 말아야 합니다 <xref:System.Web.Security.Roles.ApplicationName%2A> 속성인 필요 하지 않은 경우. 응용 프로그램의 예로 설정 하는 경우는 <xref:System.Web.Security.Roles.ApplicationName%2A> 속성 해야 할 수 있습니다 여러 응용 프로그램에 대 한 역할 데이터를 관리 하는 관리 응용 프로그램입니다. 단일 사용자 응용 프로그램 및 웹 응용 프로그램이 아닙니다. 이러한 응용 프로그램 이어야 합니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 요소에는 `system.web` ASP.NET 응용 프로그램에 대 한 Web.config 파일의 섹션입니다. 응용 프로그램에서는 지정는 <xref:System.Web.Security.SqlRoleProvider> 집합과 인스턴스를 `applicationName` 특성을 `MyApplication`입니다.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="CacheRolesInCookie">
      <MemberSignature Language="C#" Value="public static bool CacheRolesInCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CacheRolesInCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CacheRolesInCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CacheRolesInCookie { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CacheRolesInCookie : bool" Usage="System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 사용자의 역할이 쿠키에 캐시되는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>현재 사용자의 역할이 쿠키에 캐시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> 속성이 `true` Web.config 파일에서 각 사용자에 대 한 역할 정보를 쿠키에 저장 됩니다. 역할 관리 사용자를 특정 역할에 있는지 여부를 확인 하는 경우 역할 쿠키 데이터 소스의 역할 목록을 확인 하는 역할 공급자를 호출 하기 전에 확인 됩니다. 쿠키는 가장 최근에 확인 된 역할 이름이 캐시에 동적으로 업데이트 됩니다.  
  
 역할 이름 지정 하 여 쿠키에 캐시의 안정성을 향상 시킬 수 있습니다는 <xref:System.Web.Security.Roles.CookieProtectionValue%2A> ASP.NET 역할을 구성할 때 속성입니다. 기본값 <xref:System.Web.Security.Roles.CookieProtectionValue%2A> 는 `All`, 역할 이름 쿠키에서를 암호화 하 고 쿠키 내용이 변경 되지 않았는지 유효성을 검사 합니다.  
  
> [!NOTE]
>  있기 때문에 데이터 원본 외에도 역할 이름을 캐시 가능 데이터 소스에서 역할 관리 변경 내용을 캐시 된 값에 반영 되지 않습니다. 이 경우 사용자를 닫은 다시 캐시 된 쿠키 값의 선택을 취소 하려면 브라우저를 엽니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 요소에는 `system.web` ASP.NET 응용 프로그램에 대 한 Web.config 파일의 섹션입니다. 응용 프로그램에서는 지정는 <xref:System.Web.Security.SqlRoleProvider> 집합과 인스턴스를 `cacheRolesInCookie` 특성을 `true`입니다.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
   </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="CookieName">
      <MemberSignature Language="C#" Value="public static string CookieName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookieName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookieName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieName : string" Usage="System.Web.Security.Roles.CookieName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>역할 이름이 캐시되는 쿠키의 이름을 가져옵니다.</summary>
        <value>역할 이름이 캐시되는 쿠키의 이름입니다. 기본값은 .ASPXROLES입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 하 여 응용 프로그램에 대 한 역할 캐시 되는 쿠키의 이름을 지정할 수 있습니다는 `cookieName` ASP.NET 응용 프로그램의 Web.config 파일에는 특성입니다. 고유 하 게 응용 프로그램에 대 한 쿠키를 식별 하려는 경우 또는 쿠키 도메인 쿠키와 같은 여러 응용 프로그램에서 공유 되는 경우에 유용 합니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 요소에는 `system.web` ASP.NET 응용 프로그램에 대 한 Web.config 파일의 섹션입니다. 응용 프로그램에서는 지정는 <xref:System.Web.Security.SqlRoleProvider> 집합과 인스턴스는 `cookieName` 특성을 합니다. ASPROLES 합니다.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="CookiePath">
      <MemberSignature Language="C#" Value="public static string CookiePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookiePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookiePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookiePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookiePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookiePath : string" Usage="System.Web.Security.Roles.CookiePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>캐시된 역할 이름 쿠키에 대한 경로를 가져옵니다.</summary>
        <value>역할 이름이 캐시되는 쿠키의 경로입니다. 기본값은 /입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 역할 캐시 되는 쿠키의 경로 설정 하 여 응용 프로그램에 대해 지정할 수 있습니다는 `cookiePath` ASP.NET 응용 프로그램의 Web.config 파일에는 특성입니다. 쿠키 경로에 대 한 자세한 내용은 참조 하세요. <xref:System.Web.HttpCookie.Path%2A>합니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 요소에는 `system.web` ASP.NET 응용 프로그램에 대 한 Web.config 파일의 섹션입니다. 응용 프로그램에서는 지정는 <xref:System.Web.Security.SqlRoleProvider> 집합과 인스턴스는 `cookiePath` /MyApplication 특성입니다.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="CookieProtectionValue">
      <MemberSignature Language="C#" Value="public static System.Web.Security.CookieProtection CookieProtectionValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.Security.CookieProtection CookieProtectionValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieProtectionValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieProtectionValue As CookieProtection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::CookieProtection CookieProtectionValue { System::Web::Security::CookieProtection get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieProtectionValue : System.Web.Security.CookieProtection" Usage="System.Web.Security.Roles.CookieProtectionValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.CookieProtection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿠키에 캐시된 역할 이름이 보호되는 방법을 나타내는 값을 가져옵니다.</summary>
        <value>쿠키에 캐시된 역할 이름이 보호되는 방법을 나타내는 <see cref="T:System.Web.Security.CookieProtection" /> 열거형 값 중 하나입니다. 기본값은 <see langword="All" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 역할 캐시 되는 쿠키의 보호를 설정 하 여 응용 프로그램에 대 한 지정할 수 있습니다는 `cookieProtection` ASP.NET 응용 프로그램의 Web.config 파일에는 특성입니다. `cookieProtection` 는 특성을 <xref:System.Web.Security.CookieProtection> 둘 다 또는 둘 다에 역할 이름을 암호화 되는지 여부를 나타내는 열거형 값의 유효성이 검사 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 요소에는 `system.web` ASP.NET 응용 프로그램에 대 한 Web.config 파일의 섹션입니다. 응용 프로그램에서는 지정 된 <xref:System.Web.Security.SqlRoleProvider> 인스턴스 집합과 `cookieProtection` 특성을 `Encrypted`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="CookieRequireSSL">
      <MemberSignature Language="C#" Value="public static bool CookieRequireSSL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieRequireSSL" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieRequireSSL" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieRequireSSL As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieRequireSSL { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieRequireSSL : bool" Usage="System.Web.Security.Roles.CookieRequireSSL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>서버에 반환되기 위해 역할 이름 쿠키에 SSL이 필요한지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>SSL이 역할 이름 쿠키를 서버에 반환하는 데 필요하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SSL (Secure Sockets Layer)을 설정 하 여 응용 프로그램에서 서버에 역할 이름 쿠키를 반환 해야 하는지 여부를 지정할 수 있습니다는 `cookieRequireSSL` ASP.NET 응용 프로그램의 Web.config 파일에는 특성입니다. 자세한 내용은 <xref:System.Web.HttpCookie.Secure%2A>를 참조하십시오.  
  
   
  
## Examples  
 다음 예제에서는 합니다 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 요소에는 `system.web` ASP.NET 응용 프로그램에 대 한 Web.config 파일의 섹션입니다. 응용 프로그램 사용 하도록 지정 하는 <xref:System.Web.Security.SqlRoleProvider> 인스턴스 집합과 `cookieRequireSSL` 에 `true`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="CookieSlidingExpiration">
      <MemberSignature Language="C#" Value="public static bool CookieSlidingExpiration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieSlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieSlidingExpiration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieSlidingExpiration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieSlidingExpiration : bool" Usage="System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>역할 이름 쿠키 만료 날짜 및 시간을 정기적으로 다시 설정하는지 여부를 나타냅니다.</summary>
        <value>역할 이름 쿠키 만료 날짜 및 시간을 정기적으로 다시 설정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 역할 이름 쿠키 만료 날짜 및 시간 사용 하 여 각 응답으로 다시 설정할 수는 지 여부를 지정할 수 있습니다는 `cookieSlidingExpiration` ASP.NET 응용 프로그램의 Web.config 파일에는 특성입니다. 하는 경우 `true`, 쿠키 만료를 처음에 현재 날짜 및 시간으로 설정할와 <xref:System.Web.Security.Roles.CookieTimeout%2A> (분)입니다. 사용자를 적극적으로 ASP.NET 응용 프로그램을 사용 하는 동안 쿠키의 시간과 만료 날짜는 자동으로 새로 고쳐집니다의 절반 보다 작은 경우는 <xref:System.Web.Security.Roles.CookieTimeout%2A> 나머지입니다. 자세한 내용은 <xref:System.Web.HttpCookie.Expires%2A> 속성을 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 합니다 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 요소에는 `system.web` ASP.NET 응용 프로그램에 대 한 Web.config 파일의 섹션입니다. 응용 프로그램에서는 지정는 <xref:System.Web.Security.SqlRoleProvider> 집합과 인스턴스를 <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> 속성을 `false`입니다.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="false"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="CookieTimeout">
      <MemberSignature Language="C#" Value="public static int CookieTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CookieTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CookieTimeout { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieTimeout : int" Usage="System.Web.Security.Roles.CookieTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>역할 쿠키가 만료되기까지의 시간(분)을 가져옵니다.</summary>
        <value>역할 쿠키가 만료되기까지의 시간(분)을 지정하는 정수입니다. 기본값은 30분입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.CookieTimeout%2A> 속성은 사용 경우를 <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> 속성은 `true` 역할 쿠키에 대 한 분--활성 시간을 지정 합니다. 설정 하는 <xref:System.Web.Security.Roles.CookieTimeout%2A> 값을 추가 `cookieTimeout` 특성을 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 요소 Web.config에서 ASP.NET 응용 프로그램에 대 한 파일을 정수 값을 지정 합니다.  
  
 하는 경우 <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> 는 `false`,이 속성은 무시 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 요소에는 `system.web` ASP.NET 응용 프로그램에 대 한 Web.config 파일의 섹션입니다. 응용 프로그램에서는 지정는 <xref:System.Web.Security.SqlRoleProvider> 집합과 인스턴스는 <xref:System.Web.Security.Roles.CookieTimeout%2A> 속성 30 분을 합니다.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
  <add  
    name="SqlProvider"  
    type="System.Web.Security.SqlRoleProvider"  
    connectionStringName="SqlServices"  
    applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="CreatePersistentCookie">
      <MemberSignature Language="C#" Value="public static bool CreatePersistentCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CreatePersistentCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CreatePersistentCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CreatePersistentCookie { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CreatePersistentCookie : bool" Usage="System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>역할 이름 쿠키가 세션 기반인지, 아니면 영구적인지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>역할 이름 쿠키가 영구 쿠키이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.CreatePersistentCookie%2A> 속성 값이 사용 하 여 ASP.NET 응용 프로그램에 대 한 구성 설정를 `createPersistentCookie` 특성을 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 구성 요소입니다.  
  
 때 `false`, 역할 이름 쿠키는 세션 쿠키, 즉, 쿠키는 브라우저를 닫을 때 손실 됩니다. 때 `true`, 역할 이름 쿠키는 여러 브라우저 세션에서 사용할 수 있는 영구 쿠키입니다. 영구 쿠키 만료 날짜 및 시간이 현재 날짜 및 시간으로 설정 됩니다와 <xref:System.Web.Security.Roles.CookieTimeout%2A> 분에서 값입니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public static void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member CreateRole : string -&gt; unit" Usage="System.Web.Security.Roles.CreateRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">만들 역할의 이름입니다.</param>
        <summary>데이터 소스에 새 역할을 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.CreateRole%2A> 메서드는 데이터 원본에 역할 이름을 추가 합니다. <xref:System.Web.Security.Roles.CreateRole%2A> 호출 된 <xref:System.Web.Security.RoleProvider.CreateRole%2A> 메서드의 데이터 원본에 지정된 된 역할을 추가 하는 기본 역할 공급자입니다.  
  
> [!NOTE]
>  역할 이름은 쉼표를 포함할 수 없습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 데이터 원본에 새 역할을 만듭니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
> [!IMPORTANT]
>  이 예제에서는 잠재적 보안 위협을 사용자 입력을 허용 하는 텍스트 상자가 포함 되어 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />이 빈 문자열인 경우  
  
또는 
 <paramref name="roleName" />에 쉼표가 포함된 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCookie">
      <MemberSignature Language="C#" Value="public static void DeleteCookie ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteCookie() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteCookie ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteCookie();" />
      <MemberSignature Language="F#" Value="static member DeleteCookie : unit -&gt; unit" Usage="System.Web.Security.Roles.DeleteCookie " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>역할 이름이 캐시된 쿠키를 삭제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.DeleteCookie%2A> 메서드는 역할 이름을 캐시 하는 데 사용 되는 쿠키의 내용을 지웁니다. 역할 이름이 캐시에 대 한 자세한 내용은 참조 하세요. <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서 호출 된 <xref:System.Web.Security.Roles.DeleteCookie%2A> 선택을 취소 하는 방법에 로그인 한 사용자 역할 이름을 캐시 합니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
> [!IMPORTANT]
>  이 예제에서는 잠재적 보안 위협을 사용자 입력을 허용 하는 텍스트 상자가 포함 되어 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/logincs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.Roles#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/loginvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>데이터 소스에서 역할을 제거합니다.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member DeleteRole : string -&gt; bool" Usage="System.Web.Security.Roles.DeleteRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">삭제할 역할의 이름입니다.</param>
        <summary>데이터 소스에서 역할을 제거합니다.</summary>
        <returns><paramref name="roleName" />이 데이터 소스에서 삭제되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.DeleteRole%2A> 메서드는 데이터 원본에서 역할 이름을 제거 합니다. <xref:System.Web.Security.Roles.DeleteRole%2A> 호출 된 <xref:System.Web.Security.RoleProvider.DeleteRole%2A> 메서드의 데이터 소스에서 지정된 된 역할을 제거 하는 기본 역할 공급자입니다.  
  
 역할 구분 하는 경우는 `roleName` 매개 변수는 하나 이상의 멤버 예외가 throw 됩니다 하 고 역할 삭제 되지 것입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 데이터 원본에서 역할을 삭제 합니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />이 빈 문자열이거나 쉼표(,)를 포함하는 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" />에 하나 이상의 멤버가 있는 경우  
  
또는 
역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="F#" Value="static member DeleteRole : string * bool -&gt; bool" Usage="System.Web.Security.Roles.DeleteRole (roleName, throwOnPopulatedRole)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">삭제할 역할의 이름입니다.</param>
        <param name="throwOnPopulatedRole"><see langword="true" />이면 <paramref name="roleName" />에 하나 이상의 멤버가 있을 때 예외를 throw합니다.</param>
        <summary>데이터 소스에서 역할을 제거합니다.</summary>
        <returns><paramref name="roleName" />이 데이터 소스에서 삭제되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.DeleteRole%2A> 메서드는 데이터 원본에서 역할 이름을 제거 합니다. <xref:System.Web.Security.Roles.DeleteRole%2A> 호출 된 <xref:System.Web.Security.RoleProvider.DeleteRole%2A> 메서드의 데이터 소스에서 지정된 된 역할을 제거 하는 기본 역할 공급자입니다.  
  
 하는 경우 `throwOnPopulatedRole` 됩니다 `true`, 예외가 throw 됩니다 및 역할을 구분 하는 경우 역할 삭제 되지 것입니다는 `roleName` 매개 변수는 하나 이상의 멤버입니다. 하는 경우 `throwOnPopulatedRole` 는 `false`, 여부 비어 있는지 여부를 역할 삭제 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 데이터 원본에서 역할을 삭제 합니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />이 빈 문자열인 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" />에 하나 이상의 멤버가 있고 <paramref name="throwOnPopulatedRole" />이 <see langword="true" />인 경우  
  
또는 
역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public static string Domain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Domain { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Domain : string" Usage="System.Web.Security.Roles.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>역할 이름 쿠키의 도메인 값을 가져옵니다.</summary>
        <value>역할 이름 쿠키의 <see cref="P:System.Web.HttpCookie.Domain" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.Domain%2A> 속성 값이 사용 하 여 ASP.NET 응용 프로그램에 대 한 구성 설정를 `domain` 특성을 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 구성 요소입니다.  
  
 값이 없는 도메인 특성에 대 한 구성에 지정 된 경우는 <xref:System.Web.Security.Roles.Domain%2A> 속성에서 반환 `null` 역할 이름 쿠키 도메인의 기본 동작을 <xref:System.Web.HttpCookie> <xref:System.Web.HttpCookie.Domain%2A> 속성.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public static bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Web.Security.Roles.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 웹 응용 프로그램에 역할 관리를 사용하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>역할 관리를 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 합니다 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 요소에는 `system.web` ASP.NET 응용 프로그램에 대 한 Web.config 파일의 섹션입니다. 응용 프로그램에서는 지정는 <xref:System.Web.Security.SqlRoleProvider> 집합과 인스턴스를 `enabled` 특성을 `true`입니다.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="static member FindUsersInRole : string * string -&gt; string[]" Usage="System.Web.Security.Roles.FindUsersInRole (roleName, usernameToMatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">검색할 역할입니다.</param>
        <param name="usernameToMatch">검색할 사용자 이름입니다.</param>
        <summary>지정된 사용자 이름과 일치하는 부분이 사용자 이름에 포함되어 있는 사용자의 목록을 지정된 역할에서 가져옵니다.</summary>
        <returns>지정된 역할의 멤버이면서 사용자 이름이 <paramref name="usernameToMatch" />와 일치하는 모든 사용자의 이름이 포함된 문자열 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.FindUsersInRole%2A> 사용자 이름을 제공 된 일치 하는 항목에 포함 된 역할에 사용자의 목록을 반환 합니다 `usernameToMatch` 구성 된 `applicationName`합니다. 예를 들어 경우는 `usernameToMatch` 매개 변수는 "user", "user3 은" 사용자 "user1", "user2"로 설정 하 고 등 반환 됩니다. 사용자가 사용자 이름별 사전순으로 반환 됩니다.  
  
 합니다 <xref:System.Web.Security.SqlRoleProvider> 에 대해 LIKE 절을 사용 하 여 검색을 수행 합니다 `usernameToMatch` 매개 변수입니다. 절에서 사용할 수 있습니다 하는 등의 SQL Server에서 지원 되는 와일드 카드는 `usernameToMatch` 매개 변수 값입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.Security.Roles.FindUsersInRole%2A> 사용자 입력을 기반으로 하는 역할 멤버 자격을 표시 하는 방법입니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
> [!IMPORTANT]
>  이 예제에서는 잠재적 보안 위협을 사용자 입력을 허용 하는 텍스트 상자가 포함 되어 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/FindUsersInRolecs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.Roles#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/FindUsersInRolevb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />이 <see langword="null" />(Visual Basic의 경우 <see langword="Nothing" />)인 경우  
  
또는 
 <paramref name="usernameToMatch" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />이 빈 문자열이거나 쉼표(,)를 포함하는 경우  
  
또는 
 <paramref name="usernameToMatch" />이 빈 문자열인 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public static string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberSignature Language="F#" Value="static member GetAllRoles : unit -&gt; string[]" Usage="System.Web.Security.Roles.GetAllRoles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>응용 프로그램의 모든 역할 목록을 가져옵니다.</summary>
        <returns>데이터 소스에 저장된 응용 프로그램의 모든 역할 이름이 포함된 문자열 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.Security.Roles.GetAllRoles%2A> 메서드 호출을 <xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=nameWithType> 응용 프로그램에 대 한 데이터 원본에서 모든 역할의 목록을 가져오려면 기본 역할 공급자의 메서드. 에 지정 된 응용 프로그램에 대 한 역할에 대해서만 <xref:System.Web.Security.Roles.ApplicationName%2A> 속성 검색 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 합니다 <xref:System.Web.Security.Roles.GetAllRoles%2A> 응용 프로그램에 대 한 역할 목록을 가져오고 결과를 바인딩하는 메서드를 <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> 제어 합니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
> [!IMPORTANT]
>  이 예제에서는 잠재적 보안 위협을 사용자 입력을 허용 하는 텍스트 상자가 포함 되어 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRolesForUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>사용자가 속한 역할 목록을 가져옵니다.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser();" />
      <MemberSignature Language="F#" Value="static member GetRolesForUser : unit -&gt; string[]" Usage="System.Web.Security.Roles.GetRolesForUser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 로그온한 사용자가 속한 역할 목록을 가져옵니다.</summary>
        <returns>현재 로그온한 사용자가 속한 모든 역할의 이름이 포함된 문자열 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.Security.Roles.GetRolesForUser%2A> 메서드 호출을 <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType> 메서드 데이터에서를 검색 하는 기본 역할 공급자의 원본에 있는 현재 로그인 한 사용자 역할. 현재 로그온 한 사용자로 식별 됩니다 합니다 <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> 속성이 현재 <xref:System.Web.HttpContext?displayProperty=nameWithType>, 또는 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> 비 HTTP에 대 한 호스팅 환경입니다. 사용자가 로그온 하는 경우 예외가 throw 됩니다. 에 지정 된 응용 프로그램에 대 한 역할에 대해서만 <xref:System.Web.Security.Roles.ApplicationName%2A> 속성 검색 됩니다.  
  
 하는 경우 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> 됩니다 `true`, 다음 결과 <xref:System.Web.Security.Roles.GetRolesForUser%2A> 메서드는 지정된 된 역할 공급자를 사용 하지 않고 역할 내 캐시에서 반환 될 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 합니다 <xref:System.Web.Security.Roles.GetRolesForUser%2A> 메서드를 지정 된 사용자 역할의 목록을 검색 하 고 반환 된 역할을 바인딩하는 <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> 제어 합니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">현재 로그온한 사용자가 없는 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="static member GetRolesForUser : string -&gt; string[]" Usage="System.Web.Security.Roles.GetRolesForUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">역할 목록을 반환할 사용자입니다.</param>
        <summary>사용자가 속한 역할 목록을 가져옵니다.</summary>
        <returns>지정된 사용자가 속한 모든 역할의 이름이 포함된 문자열 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.Security.Roles.GetRolesForUser%2A> 메서드 호출을 <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType> 메서드 데이터에서를 검색 하는 기본 역할 공급자의 원본에 있는 사용자 역할. 에 지정 된 응용 프로그램에 대 한 역할에 대해서만 <xref:System.Web.Security.Roles.ApplicationName%2A> 속성 검색 됩니다.  
  
 경우 `username` 현재 로그온 사용자에 게 같은지 및 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> 은 `true`, 결과 <xref:System.Web.Security.Roles.GetRolesForUser%2A> 메서드는 역할 대신 캐시에서 지정 된 반환 될 수 있습니다 <xref:System.Web.Security.Roles.Provider%2A>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 합니다 <xref:System.Web.Security.Roles.GetRolesForUser%2A> 메서드를 지정 된 사용자 역할의 목록을 검색 하 고 반환 된 역할을 바인딩하는 <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> 제어 합니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="username" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="username" />에 쉼표(,)가 포함된 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member GetUsersInRole : string -&gt; string[]" Usage="System.Web.Security.Roles.GetUsersInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">사용자 목록을 가져올 역할입니다.</param>
        <summary>지정된 역할에 있는 사용자 목록을 가져옵니다.</summary>
        <returns>지정된 역할의 멤버에 해당하는 모든 사용자의 이름이 포함된 문자열 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.GetUsersInRole%2A> 메서드 호출을 <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> 메서드의 데이터 소스에서 역할에 연결 된 사용자 이름을 검색 하는 기본 역할 공급자입니다. 에 지정 된 응용 프로그램에 대 한 역할에 대해서만 <xref:System.Web.Security.Roles.ApplicationName%2A> 속성 검색 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 합니다 <xref:System.Web.Security.Roles.GetUsersInRole%2A> 특정 역할에 사용자의 목록을 가져오기 위한 메서드를 하 고 결과를 바인딩합니다는 <xref:System.Web.UI.WebControls.GridView> 제어 합니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />이 빈 문자열이거나 쉼표(,)를 포함하는 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsUserInRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>사용자가 지정된 역할에 속하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member IsUserInRole : string -&gt; bool" Usage="System.Web.Security.Roles.IsUserInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">검색할 역할의 이름입니다.</param>
        <summary>현재 로그온한 사용자가 지정된 역할에 속하는지 여부를 나타내는 값을 가져옵니다. API는 ASP.NET 요청 스레드의 컨텍스트 내에서만 호출되도록 고안된 것으로, 해당 권한이 있는 사용 사례에서는 스레드로부터 안전이 보장됩니다.</summary>
        <returns>현재 로그온한 사용자가 지정된 역할에 속하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.IsUserInRole%2A> 메서드 호출을 <xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=nameWithType> 현재 로그온 한 사용자 지정 된 응용 프로그램에 대 한 데이터 원본에서 역할을 사용 하 여 연결 되는지 여부를 결정 하는 기본 역할 공급자의 메서드는 <xref:System.Web.Security.Roles.ApplicationName%2A> 속성입니다. 현재 로그온 한 사용자로 식별 됩니다 합니다 <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> 속성이 현재 <xref:System.Web.HttpContext?displayProperty=nameWithType>, 또는 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> 비 HTTP에 대 한 호스팅 환경입니다. 사용자가 로그온 하는 경우 예외가 throw 됩니다. 에 지정 된 응용 프로그램에 대 한 역할에 대해서만 <xref:System.Web.Security.Roles.ApplicationName%2A> 속성 검색 됩니다.  
  
 하는 경우 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> 됩니다 `true`, 다음 `roleName` 지정된 된 역할 공급자를 사용 하지 않고 역할 캐시에 대해 검사할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 프로그래밍 방식으로 응용 프로그램의 역할 설정을 볼 수 있도록 허용 하기 전에 현재 로그온 한 사용자가 관리자 역할에 있는지 여부를 확인 합니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />가 <see langword="null" />입니다.  
  
또는 
현재 로그온한 사용자가 없는 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />이 빈 문자열이거나 쉼표(,)를 포함하는 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member IsUserInRole : string * string -&gt; bool" Usage="System.Web.Security.Roles.IsUserInRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">검색할 사용자의 이름입니다.</param>
        <param name="roleName">검색할 역할의 이름입니다.</param>
        <summary>지정된 사용자가 지정된 역할에 속하는지 여부를 나타내는 값을 가져옵니다. API는 ASP.NET 요청 스레드의 컨텍스트 내에서만 호출되도록 고안된 것으로, 해당 권한이 있는 사용 사례에서는 스레드로부터 안전이 보장됩니다.</summary>
        <returns>지정된 사용자가 지정된 역할에 속하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.IsUserInRole%2A> 메서드 호출을 <xref:System.Web.Security.RoleProvider.IsUserInRole%2A> 사용자 이름에 지정 된 응용 프로그램에 대 한 데이터 원본에서 역할을 사용 하 여 연결 되는지 여부를 결정 하는 기본 역할 공급자의 메서드는 <xref:System.Web.Security.Roles.ApplicationName%2A> 속성입니다.  
  
 하는 경우 `username` 현재 로그온 사용자에 게 같은지 및 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> 속성 값이 `true`, `roleName` 는 역할이 아니라 캐시에 대해 지정 된 확인 될 수 <xref:System.Web.Security.Roles.Provider%2A>입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 프로그래밍 방식으로 응용 프로그램의 역할 설정을 볼 수 있도록 허용 하기 전에 사용자가 관리자 역할에 있는지 여부를 확인 합니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="username" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />이 빈 문자열이거나 쉼표(,)를 포함하는 경우  
  
또는 
 <paramref name="username" />에 쉼표(,)가 포함된 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="MaxCachedResults">
      <MemberSignature Language="C#" Value="public static int MaxCachedResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxCachedResults" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.MaxCachedResults" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxCachedResults As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxCachedResults { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxCachedResults : int" Usage="System.Web.Security.Roles.MaxCachedResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자에 대해 캐시할 역할 이름의 최대 개수를 가져옵니다.</summary>
        <value>사용자에 대해 캐시할 역할 이름의 최대 개수입니다. 기본값은 25입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.MaxCachedResults%2A> 속성을 사용 하 여 설정 된 `maxCachedResults` 구성 특성. 값을 `maxCachedResults` 구성 특성을 0 보다 큰 정수 값으로 설정 해야 합니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 요소에는 `system.web` ASP.NET 응용 프로그램에 대 한 Web.config 파일의 섹션입니다. 응용 프로그램에서는 지정는 <xref:System.Web.Security.SqlRoleProvider> 집합과 인스턴스는 `maxCachedResults` 10 특성입니다.  
  
```  
<roleManager  
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All"   
  maxCachedResults="10" />  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProvider Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Provider" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Provider As RoleProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProvider ^ Provider { System::Web::Security::RoleProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.Security.RoleProvider" Usage="System.Web.Security.Roles.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>응용 프로그램의 기본 역할 공급자를 가져옵니다.</summary>
        <value><see cref="T:System.Web.Security.RoleProvider" /> 추상 클래스를 상속하는 클래스로 노출되는 응용 프로그램의 기본 역할 공급자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.Provider%2A> 속성을 사용 하면 응용 프로그램에 대 한 기본 역할 공급자를 직접 참조할 수 있습니다. 이 일반적으로 사용 되지 않는 역할 공급자의 사용자 지정 멤버에 액세스의 일부는 <xref:System.Web.Security.RoleProvider> 추상 클래스입니다.  
  
 예를 들어,를 <xref:System.Web.Security.WindowsTokenRoleProvider> 클래스의 오버 로드를 포함 합니다 <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> 메서드를 사용 하 여 사용자가 일반적인 Windows 역할에 있는지 여부를 결정할 수 있도록를 <xref:System.Security.Principal.WindowsBuiltInRole> 열거형 값입니다. 에 대 한 참조를 <xref:System.Web.Security.WindowsTokenRoleProvider> 를 사용 하 여 응용 프로그램을 가져올 수 있습니다에 대 한 클래스를 <xref:System.Web.Security.Roles.Provider%2A> 속성으로 캐스팅 될 수 있습니다를 <xref:System.Web.Security.WindowsTokenRoleProvider> 참조 하기 위해는 <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> 오버 로드.  
  
 여러 역할 공급자는 응용 프로그램에 대해 구성 된 경우 다른 역할 공급자를 사용 하 여 액세스할 수 있습니다는 <xref:System.Web.Security.Roles.Providers%2A> 컬렉션입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 캐스팅으로 기본 역할 공급자는 <xref:System.Web.Security.WindowsTokenRoleProvider> 응용 프로그램의 역할 설정을 볼 수 있도록 허용 하기 전에 현재 로그온 한 사용자가 관리자 역할에 있는지 여부를 확인 합니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.WindowsTokenRoleProvider>합니다.  
  
 [!code-aspx-csharp[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/CS/ViewRoles2cs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/VB/ViewRoles2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Providers" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Providers As RoleProviderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProviderCollection ^ Providers { System::Web::Security::RoleProviderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Providers : System.Web.Security.RoleProviderCollection" Usage="System.Web.Security.Roles.Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET 응용 프로그램의 역할 공급자 컬렉션을 가져옵니다.</summary>
        <value>ASP.NET 응용 프로그램에 대해 구성된 역할 공급자가 포함된 <see cref="T:System.Web.Security.RoleProviderCollection" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.Providers%2A> Web.config 파일에 추가 모든 공급자를 포함 하 여 응용 프로그램에 사용 되는 모든 역할 공급자를 참조 하는 속성입니다. 역할 공급자를 사용할 수 응용 프로그램에 대 한 사용 하 여 제어할 수 있습니다.는 `providers` 의 요소를 [roleManager](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ms164660(v%3dvs.100)) 응용 프로그램에 대 한 Web.config 파일의 섹션입니다.  
  
 다음 예제에서는 모든 기존 공급자 (예: Machine.config 파일에 지정 된)를 제거 하는 섹션을 보여 줍니다 및 추가 <xref:System.Web.Security.SqlRoleProvider> 인스턴스로 응용 프로그램에 대 한 역할 공급자입니다.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  
  <system.web>  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="false"  
      cookieSlidingExpiration="true"  
      cookieProtection="Encrypted">  
  
      <providers>  
        <clear/>  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"  
          applicationName="MyApplication" />  
         </providers>  
  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 공급자에 대 한 강력한 형식의 참조를 가져올 수는 <xref:System.Web.Security.Roles.Providers%2A> 이름별 역할 공급자를 인덱싱 및 원하는 형식으로 캐스팅 하 여 컬렉션입니다.  
  
 응용 프로그램에 대 한 기본 공급자에 대 한 참조를 가져올 수 있습니다는 <xref:System.Web.Security.Roles.Provider%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 응용 프로그램 및 해당 유형이 사용 되는 공급자를 나열 합니다.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/Providerscs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.Roles#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/Providersvb.aspx#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RemoveUserFromRole : string * string -&gt; unit" Usage="System.Web.Security.Roles.RemoveUserFromRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">지정된 역할에서 제거할 사용자입니다.</param>
        <param name="roleName">지정된 사용자를 제거할 역할입니다.</param>
        <summary>지정된 역할에서 지정된 사용자를 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUserFromRole%2A> 데이터 소스의 지정된 된 역할에서 지정된 된 사용자를 제거 하는 기본 역할 공급자를 호출 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 역할에서 사용자를 제거합니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="username" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />이 빈 문자열이거나 쉼표(,)를 포함하는 경우 
 <paramref name="username" />이 빈 문자열이거나 쉼표(,)를 포함하는 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member RemoveUserFromRoles : string * string[] -&gt; unit" Usage="System.Web.Security.Roles.RemoveUserFromRoles (username, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">지정된 역할에서 제거할 사용자입니다.</param>
        <param name="roleNames">지정된 사용자를 제거할 역할 이름으로 이루어진 문자열 배열입니다.</param>
        <summary>지정된 역할에서 지정된 사용자를 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> 데이터 소스의 지정된 된 역할에서 지정된 된 사용자를 제거 하는 기본 역할 공급자를 호출 합니다.  
  
 응용 프로그램을 사용 하도록 구성 된 경우는 <xref:System.Web.Security.SqlRoleProvider> 클래스를 호출 하는 동안 수행 되는 데이터베이스 업데이트는 <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> 메서드는 트랜잭션 내에서 이루어집니다. 오류가 발생 하는 경우 지정된 된 역할에 없는 사용자 이름, 같은 트랜잭션이 롤백되고 업데이트가 수행 되지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> 하나 이상의 역할에서 사용자를 제거 하는 방법입니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUserFromRolescs.aspx#10)]
 [!code-aspx-vb[System.Web.Security.Roles#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUserFromRolesvb.aspx#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleNames" />의 역할 중 하나가 <see langword="null" />인 경우  
  
또는 
 <paramref name="username" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleNames" />의 역할 중 하나가 빈 문자열이거나 쉼표(,)를 포함하는 경우  
  
또는 
 <paramref name="username" />이 빈 문자열이거나 쉼표(,)를 포함하는 경우  
  
또는 
 <paramref name="roleNames" />에 중복 요소가 포함된 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RemoveUsersFromRole : string[] * string -&gt; unit" Usage="System.Web.Security.Roles.RemoveUsersFromRole (usernames, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">지정된 역할에서 제거할 사용자 이름으로 이루어진 문자열 배열입니다.</param>
        <param name="roleName">지정된 사용자를 제거할 역할의 이름입니다.</param>
        <summary>지정된 역할에서 지정된 사용자를 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> 데이터 소스의 지정된 된 역할에서 지정된 된 사용자를 제거 하는 기본 역할 공급자를 호출 합니다.  
  
 응용 프로그램을 사용 하는 경우는 <xref:System.Web.Security.SqlRoleProvider> 클래스를 호출 하는 동안 수행 되는 데이터베이스 업데이트는 <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> 메서드는 트랜잭션 내에서 이루어집니다. 오류가 발생 하는 경우 지정된 된 역할에 없는 사용자 이름, 같은 트랜잭션이 롤백되고 업데이트가 수행 되지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> 메서드를 한 명 이상의 사용자 역할에서 제거 합니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolecs.aspx#9)]
 [!code-aspx-vb[System.Web.Security.Roles#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolevb.aspx#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />가 <see langword="null" />입니다.  
  
또는 
<paramref name="usernames" />의 사용자 이름 중 하나가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />이 빈 문자열이거나 쉼표(,)를 포함하는 경우  
  
또는 
<paramref name="usernames" />의 사용자 이름 중 하나가 빈 문자열이거나 쉼표(,)를 포함하는 경우  
  
또는 
 <paramref name="usernames" />에 중복 요소가 포함된 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member RemoveUsersFromRoles : string[] * string[] -&gt; unit" Usage="System.Web.Security.Roles.RemoveUsersFromRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">지정된 역할에서 제거할 사용자 이름으로 이루어진 문자열 배열입니다.</param>
        <param name="roleNames">지정된 사용자를 제거할 역할 이름으로 이루어진 문자열 배열입니다.</param>
        <summary>지정된 역할에서 지정된 사용자 이름을 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> 데이터 소스의 지정된 된 역할에서 지정된 된 사용자를 제거 하는 기본 역할 공급자를 호출 합니다.  
  
 응용 프로그램을 사용 하는 경우는 <xref:System.Web.Security.SqlRoleProvider> 클래스를 호출 하는 동안 수행 되는 데이터베이스 업데이트는 <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> 메서드는 트랜잭션 내에서 이루어집니다. 오류가 발생 하는 경우 지정된 된 역할에 없는 사용자 이름, 같은 트랜잭션이 롤백되고 업데이트가 수행 되지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> 사용자 입력을 기반으로 하는 하나 이상의 역할에서 하나 이상의 사용자를 제거 하는 방법입니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolescs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.Roles#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolesvb.aspx#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleNames" />에 지정된 역할 중 하나가 <see langword="null" />인 경우  
  
또는 
<paramref name="usernames" />에 지정된 사용자 중 하나가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleNames" />에 지정된 역할 중 하나가 빈 문자열이거나 쉼표(,)를 포함하는 경우  
  
또는 
<paramref name="usernames" />에 지정된 사용자 중 하나가 빈 문자열이거나 쉼표(,)를 포함하는 경우  
  
또는 
 <paramref name="roleNames" />에 중복 요소가 포함된 경우  
  
또는 
 <paramref name="usernames" />에 중복 요소가 포함된 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public static bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool RoleExists(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RoleExists : string -&gt; bool" Usage="System.Web.Security.Roles.RoleExists roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">데이터 소스에서 검색할 역할의 이름입니다.</param>
        <summary>지정된 역할 이름이 역할 데이터 소스에 이미 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <returns>역할 이름이 데이터 소스에 이미 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.RoleExists%2A> 메서드 호출을 `RoleExists` 역할 이름에 지정 된 응용 프로그램에 대 한 데이터 원본에 있는지 여부를 결정 하는 기본 역할 공급자의 메서드는 <xref:System.Web.Security.Roles.ApplicationName%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.Security.Roles.RoleExists%2A> 역할 이름이 역할을 만들기 전에 이미 있는지 여부를 결정 하는 방법입니다. 역할 관리를 사용 하도록 설정 하는 Web.config 파일의 예제를 참조 하세요. <xref:System.Web.Security.Roles>합니다.  
  
> [!IMPORTANT]
>  이 예제에서는 잠재적 보안 위협을 사용자 입력을 허용 하는 텍스트 상자가 포함 되어 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" />이 <see langword="null" />(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" />이 빈 문자열이거나 쉼표(,)를 포함하는 경우</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">역할 관리가 사용되지 않는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">ASP.NET 역할 관리 이해</related>
      </Docs>
    </Member>
  </Members>
</Type>