<Type Name="SearchExpression" FullName="System.Web.UI.WebControls.Expressions.SearchExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e685f73380227e6219b245378bce97261ca727bd" /><Meta Name="ms.sourcegitcommit" Value="b0551d7828f015124aca601dbb64bd913cc5067d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="12/13/2018" /><Meta Name="ms.locfileid" Value="53333900" /></Metadata><TypeSignature Language="C#" Value="public class SearchExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SearchExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.SearchExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class SearchExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class SearchExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <TypeSignature Language="F#" Value="type SearchExpression = class&#xA;    inherit ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>필드에서 문자열 값을 검색하고 이 값을 지정된 문자열 값과 비교하는 방법을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.QueryExtender> 제어를 사용 하 여 웹 페이지에서 데이터를 필터링 하는 기능을 제공 합니다 <xref:System.Web.UI.WebControls.Expressions.SearchExpression> 클래스입니다. <xref:System.Web.UI.WebControls.Expressions.SearchExpression> 클래스 필드 또는 필드를 제공 하는 값에 지정된 된 문자열을 비교 합니다. 식 "시작", "포함" 또는 "끝 문자" 검색을 수행합니다. 에 대 한 값을 지정 해야 합니다 <xref:System.Web.UI.WebControls.Expressions.SearchExpression.SearchType%2A> 및 <xref:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields%2A> 수행 하려는 검색과 검색 하려는 데이터 필드의 유형을 지정 하려면 속성입니다. 경우에서 사용 하는 LINQ 공급자는 <xref:System.Web.UI.WebControls.QueryExtender> 컨트롤이 지원 대/소문자를 사용할 수 있습니다를 <xref:System.Web.UI.WebControls.Expressions.SearchExpression.ComparisonType%2A> 속성을 사용 하도록 설정 하거나 대/소문자 구분을 무시 합니다.  
  
 검색할 값으로 제공할 수 있습니다는 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 제어 합니다. 설정 하면이 지정 하려면를 <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> 의 속성을 <xref:System.Web.UI.WebControls.ControlParameter> 클래스는 <xref:System.Web.UI.WebControls.Expressions.SearchExpression> 개체의 ID를 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 컨트롤. 예를 들어 입력란에 검색할 값을 입력 합니다 <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> 속성 텍스트 상자 컨트롤의 ID로 설정 해야 합니다. 사용할 수는 <xref:System.Web.UI.WebControls.Expressions.SearchExpression> 다른 식과 조합에서 클래스는를 <xref:System.Web.UI.WebControls.QueryExtender> 와 같은 지원는 <xref:System.Web.UI.WebControls.Expressions.RangeExpression> 필터입니다. 예를 들어, "차의" 문자열 및 가격이 100과 200 사이 포함 하는 제품 이름에 대 한 검색할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 이름 열에 지정 된 문자열로 시작 하는 해당 제품에 대 한 AdventureWorks 데이터베이스의 Products 테이블에서 검색 하는 방법을 보여 줍니다는 `SearchTextBox` 제어 합니다. 반환 되는 결과 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에 표시 되는 <xref:System.Web.UI.WebControls.GridView> 제어 합니다.  
  
 이 코드 예제는에서 제공 하는 보다 큰 예제의 일부 [연습: 웹 페이지를 사용 하 여 선언적 구문으로 데이터 필터링](https://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f)합니다.  
  
  
  
 ]]></format>
    </remarks>
    <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" /> 속성은 <see langword="null" />입니다(Visual Basic의 <see langword="Nothing" />).</exception>
    <altmember cref="T:System.Web.UI.WebControls.QueryExtender" />
    <related type="Article" href="https://msdn.microsoft.com/library/b93e32b9-af41-4539-a009-6cbbe809c702">QueryExtender 웹 서버 컨트롤 개요</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SearchExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.SearchExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SearchExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.Expressions.SearchExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComparisonType">
      <MemberSignature Language="C#" Value="public StringComparison ComparisonType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.StringComparison ComparisonType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.SearchExpression.ComparisonType" />
      <MemberSignature Language="VB.NET" Value="Public Property ComparisonType As StringComparison" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property StringComparison ComparisonType { StringComparison get(); void set(StringComparison value); };" />
      <MemberSignature Language="F#" Value="member this.ComparisonType : StringComparison with get, set" Usage="System.Web.UI.WebControls.Expressions.SearchExpression.ComparisonType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparison</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>수행할 문자열 비교의 형식을 가져오거나 설정합니다.</summary>
        <value>수행할 문자열 비교의 형식입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 사용 하면 사용 하 여 <xref:System.StringComparison> 검색이 수행 되는 방법을 지정 하는 열거형입니다. <xref:System.StringComparison> 열거형 문자열 비교의 현재 문화권 이나 고정 문화권을 사용 하는지 여부 및 텍스트 또는 서 수 정렬 규칙을 사용 하는지 여부를 지정 하는 데 사용 됩니다. 하는 경우 데이터 공급자는는 <xref:System.Web.UI.WebControls.QueryExtender> 사용 지원 대/소문자 구분를 사용 하도록 설정 하거나 대/소문자 구분을 무시 비교 형식 속성 중 하나를 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" /> 속성은 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="DataFields">
      <MemberSignature Language="C#" Value="public string DataFields { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFields" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" />
      <MemberSignature Language="VB.NET" Value="Public Property DataFields As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataFields { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFields : string with get, set" Usage="System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>검색할 단일 필드 또는 쉼표로 구분된 필드 목록을 가져오거나 설정합니다.</summary>
        <value>검색할 단일 필드 또는 여러 필드입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.SearchExpression> 클래스는 지정된 된 테이블의 하나 이상의 데이터 필드에 검색을 수행 합니다. 하나 이상의 데이터 필드를 지정 해야 합니다 <xref:System.Web.UI.WebControls.Expressions.SearchExpression> 인스턴스. 둘 이상의 데이터 필드를 지정 하는 경우 쉼표를 사용 하 여 필드를 구분 합니다.  
  
   
  
## Examples  
 다음 예제에서는 이름이 지정 된 문자열로 시작 하는 제품에 대 한 AdventureWorks 데이터베이스의 Products 테이블의 이름 및 ProductNumber 데이터 필드를 검색 하는 방법을 보여 줍니다. 이 코드 예제는에서 제공 하는 더 큰 예제의 일부입니다 [연습: 웹 페이지를 사용 하 여 선언적 구문으로 데이터 필터링](https://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f)합니다.  
  
```  
<asp:SearchExpression SearchType="StartsWith"   
      DataFields="Name","ProductNumber" >  
  <asp:ControlParameter ControlID="SearchTextBox" />  
</asp:SearchExpression>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" /> 속성은 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.SearchExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="searchExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">사용할 개체입니다.</param>
        <summary><see cref="T:System.Web.UI.WebControls.Expressions.SearchExpression" /> 개체를 기반으로 <see cref="T:System.Linq.IQueryable" /> 개체를 지정된 <see cref="T:System.Web.UI.WebControls.Expressions.SearchType" /> 개체에 적용합니다.</summary>
        <returns><see cref="T:System.Linq.IQueryable" />이 적용된 <see cref="T:System.Web.UI.WebControls.Expressions.SearchExpression" /> 개체의 인스턴스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에 사용 되는 매개 변수의 컬렉션을 평가 합니다 <xref:System.Web.UI.WebControls.Expressions.SearchExpression> 개체 및 식에 적용 됩니다는 <xref:System.Linq.IQueryable> 개체입니다. 여러 데이터 필드를 지정 하는 경우는 `AND` 연산자 데이터 필드에 적용 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" /> 속성은 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="SearchType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Expressions.SearchType SearchType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Expressions.SearchType SearchType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.SearchExpression.SearchType" />
      <MemberSignature Language="VB.NET" Value="Public Property SearchType As SearchType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::Expressions::SearchType SearchType { System::Web::UI::WebControls::Expressions::SearchType get(); void set(System::Web::UI::WebControls::Expressions::SearchType value); };" />
      <MemberSignature Language="F#" Value="member this.SearchType : System.Web.UI.WebControls.Expressions.SearchType with get, set" Usage="System.Web.UI.WebControls.Expressions.SearchExpression.SearchType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Expressions.SearchType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>문자열의 어느 부분에서 검색이 수행되는지 결정하는 <see cref="T:System.Web.UI.WebControls.Expressions.SearchType" /> 값을 가져오거나 설정합니다.</summary>
        <value>수행할 검색의 형식입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.SearchType> 속성에서 사용 하는 <xref:System.Web.UI.WebControls.Expressions.SearchType> 인스턴스에 사용할 검색 유형을 포함 하는 열거형은 <xref:System.Web.UI.WebControls.Expressions.SearchExpression> 클래스.  
  
 다음 표에서 가능한 열거형 값을 나열합니다.  
  
|열거형|설명|  
|-----------------|-----------------|  
|<xref:System.Web.UI.WebControls.Expressions.SearchType.StartsWith>|필드의 아무 곳 이나 시작 하는 검색을 나타냅니다.|  
|<xref:System.Web.UI.WebControls.Expressions.SearchType.Contains>|필드의 시작 부분에서 시작 하는 검색을 나타냅니다.|  
|<xref:System.Web.UI.WebControls.Expressions.SearchType.EndsWith>|검색을 나타내는 필드의 끝입니다.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>