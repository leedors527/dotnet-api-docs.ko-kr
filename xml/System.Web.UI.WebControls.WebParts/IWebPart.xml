<Type Name="IWebPart" FullName="System.Web.UI.WebControls.WebParts.IWebPart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="76213fd44dfa378c39c2c2b5a9ed4c1e0b8c6827" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="59744378" /></Metadata><TypeSignature Language="C#" Value="public interface IWebPart" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWebPart" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.IWebPart" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWebPart" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWebPart" />
  <TypeSignature Language="F#" Value="type IWebPart = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>ASP.NET <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤에서 사용되는 공용 UI(사용자 인터페이스) 속성을 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 사용 하는 사용자 환경을 향상 하는 몇 가지 UI 기반 속성을 제공 하는 인터페이스 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤입니다. 기본에서 파생 된 컨트롤을 만들 때 <xref:System.Web.UI.WebControls.WebParts.WebPart> 클래스의 모든 속성의 구현을 가져오게 합니다 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 때문를 <xref:System.Web.UI.WebControls.WebParts.WebPart> 이 인터페이스를 구현 하는 기본 클래스입니다.  
  
 기존 사용자 컨트롤, ASP.NET 컨트롤 또는 사용자 지정 서버 컨트롤에서 상속 하지 않는 사용할 수는 <xref:System.Web.UI.WebControls.WebParts.WebPart> 클래스는 웹 파트 응용 프로그램의 일부로 있으며에서 선언 된 이러한 UI 기반 속성을 사용할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 인터페이스입니다. 기존 서버 컨트롤을 배치 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 영역을 사용 하 여 래핑됩니다 런타임에 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> 개체입니다. 때문에 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> 클래스에서 상속 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPart> 기존 서버 컨트롤 역할을 할 수 있도록 기본 클래스 true로 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤을 추가 하의 속성을 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 인터페이스.  
  
 되지 않는 서버 컨트롤을 배치 하는 경우 <xref:System.Web.UI.WebControls.WebParts.WebPart> 영역에서 컨트롤을 낼 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 런타임에서 속성 페이지 지 속성 형식으로 페이지의 태그에 서버 컨트롤에서 해당 속성에 대 한 값을 선언할 수도 있습니다. 그러나 이러한 속성은 런타임 시 서버 컨트롤에 사용할 수 있습니다만, 때문에 디자인 타임 코딩 같은 기능을 IntelliSense 인식 하지 못하는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 서버 컨트롤에 선언 된 속성입니다. 이러한 컨트롤에 대 한 선언 된 속성 페이지를 로드 하지만 Microsoft Visual Studio에서 인식 되지 속성을 유효한 것으로 디자인 타임에 작동 합니다. 추가 하려는 경우는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 기존 서버 및 사용자 정의 컨트롤이 디자인 타임 사용자 환경을 개선 하기 위해 속성을 구현할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 서버 컨트롤의 인터페이스입니다.  
  
 아마도 구현 하는 주된 이유는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 인터페이스 (사용자 지정) expando 속성의 사용을 지원 하지 않는 컨트롤에 적용 됩니다. Expando 속성은 추가할 수 있는 클래스를 동적으로 속성으로 이용 하 여 문자열을 <xref:System.Web.UI.IAttributeAccessor> 인터페이스입니다. 이 인터페이스를 구현 하는 컨트롤 등을 <xref:System.Web.UI.WebControls.WebControl> 클래스 및 해당 자식에 expando 속성을 사용할 수 있습니다. 따라서 모든 ASP.NET 서버 컨트롤, 사용자 지정 컨트롤에서 파생 되는, 웹 사용자 컨트롤 및 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 expando 속성의 사용을 지원 합니다. 기본에서 직접 상속 하는 하지만 사용자 지정 컨트롤 <xref:System.Web.UI.Control> 클래스 expando 속성을 지원 하지 않습니다. 따라서 내에서 이러한 컨트롤을 선언 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone>, 일반적인 선언할 수 없습니다 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 컨트롤와 같은 속성의 속성 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Title%2A> 및 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Description%2A>합니다. 이러한 컨트롤을 사용 하 여 이러한 속성을 사용 하려는 경우 구현 해야 합니다 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 인터페이스입니다.  
  
   
  
## Examples  
 다음 코드 예제를 구현 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 사용자 정의 컨트롤의 인터페이스입니다. 최소 속성을 구현 하는 방법을 보여주는 간단한 구현입니다.  
  
 코드 예제의 첫 번째 부분에서는 사용자 정의 컨트롤을 보여 줍니다. 사용자 정의 컨트롤의 모든 속성을 구현 하는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 인터페이스 및 두 개의 추가 public 속성 사용자 인터페이스에서 컨트롤에 연결 합니다. 사용자 지정 두 속성을 사용 합니다 `Personalizable` 브라우저 세션 전체에 저장 되도록 해당 속성의 값을 사용 하도록 설정 하는 특성입니다. 기본 <xref:System.Web.UI.WebControls.WebParts.WebPart> 클래스 구현에서의 모든 속성을 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 인터페이스는 구현 개인 설정 가능한 것도 볼 수 없지만이 코드 예제입니다.  
  
 [!code-aspx-csharp[WebParts_IWebPart_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountusercontrolcs.ascx#2)]
 [!code-aspx-vb[WebParts_IWebPart_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountusercontrolvb.ascx#2)]  
  
 코드 예제에서는 두 번째 부분에서는 사용자 컨트롤을 호스팅하는 웹 페이지를 보여 줍니다. 페이지에는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 참조 되는 사용자 정의 컨트롤 내에서 제어 합니다. 몇 가지는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 인터페이스의 속성 값은 동작와 유사 하 게 표시에 사용 하도록 설정 하는 사용자 정의 컨트롤 태그에 선언적으로 설정 됩니다는 <xref:System.Web.UI.WebControls.WebParts.WebPart> 제어 디자인 타임 및 런타임. 브라우저에서 페이지를 로드 하는 경우 사용할 수는 UI 페이지의 프로그래밍 방식으로 구현 된 값을 변경 하는 기능을 보여 주기 위해 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 런타임에 속성입니다. 속성 값의 일부를 변경 하면 변경 내용을 페이지에 분명히 나타나지 않지만 페이지 소스에 표시 됩니다 (합니다 <xref:System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl%2A> 속성), 또는 응용 프로그램의 상태 데이터에 저장 됩니다 (의 <xref:System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl%2A> 속성).  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[WebParts_IWebPart_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountuchostcs.aspx#1)]
 [!code-aspx-vb[WebParts_IWebPart_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountuchostvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>일반적으로 구현할 필요가 없습니다 합니다 <see cref="T:System.Web.UI.WebControls.WebParts.IWebPart" /> 인터페이스를 사용자 지정 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤 또는 서버 컨트롤을 하기 때문에 기본 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 이미 클래스 인터페이스를 구현 합니다. 사용자 지정 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤 및 기타 서버 컨트롤에 있는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> 영역을 모두 사용할 수는 <see cref="T:System.Web.UI.WebControls.WebParts.IWebPart" /> 속성입니다.  
  
구현 하는 주된 이유는 <see cref="T:System.Web.UI.WebControls.WebParts.IWebPart" /> 인터페이스를 직접 여부를 사용자 지정 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤 또는 다른 서버 컨트롤을 기본 구현을 변경 하려는 경우입니다. 예를 들어, 다음 속성 중 일부에 대 한 기본값을 제공 하는 것이 좋습니다. 사용자 또는 서버 컨트롤에서 인터페이스를 구현 하는 또 다른 이유 컨트롤에서 이러한 속성을 사용 하는 디자인 타임 환경을 향상 될 것입니다.</para></block>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPart" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
  </Docs>
  <Members>
    <Member MemberName="CatalogIconImageUrl">
      <MemberSignature Language="C#" Value="public string CatalogIconImageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CatalogIconImageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Property CatalogIconImageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CatalogIconImageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CatalogIconImageUrl : string with get, set" Usage="System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤 카탈로그에서 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤을 나타내는 이미지의 URL을 가져오거나 설정합니다.</summary>
        <value>카탈로그의 컨트롤을 나타내는 데 사용되는 이미지의 URL 문자열입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 웹 파트 응용 프로그램 사용자가 페이지에 추가할 수 있는 컨트롤의 카탈로그 (또는 목록)에 종종 제공 합니다. <xref:System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl%2A> 컨트롤의 속성에 카탈로그에 표시 될 경우 컨트롤을 나타내는 이미지 URL을 포함 합니다.  
  
   
  
## Examples  
 다음 코드 예제에는 선언적 및 프로그래밍 방식의 사용 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl%2A> 속성입니다. 예제에 대 한 전체 소스 코드의 예 섹션에서 발견 되는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 클래스 개요입니다.  
  
 코드 예제의 첫 번째 부분에서는 사용자 정의 컨트롤을 구현 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl%2A> 속성입니다.  
  
 [!code-csharp[WebParts_IWebPart_Overview#8](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountusercontrolcs.ascx#8)]
 [!code-vb[WebParts_IWebPart_Overview#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountusercontrolvb.ascx#8)]  
  
 코드 예제에서는 두 번째 부분에 프로그래밍 방식으로 값을 설정 하는 사용자 정의 컨트롤에서 메서드를 보여 줍니다는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl%2A> 사용자가 페이지의 라디오 단추에서 적절 한 속성 이름을 선택 하면 속성 텍스트 상자에 새 값을 설정 하 고 다음을 클릭 합니다 **업데이트** 단추입니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-csharp[WebParts_IWebPart_Overview#9](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountusercontrolcs.ascx#9)]
 [!code-vb[WebParts_IWebPart_Overview#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountusercontrolvb.ascx#9)]  
  
 코드 예제에서는 세 번째 부분을 사용자 제어 하 구현 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 인터페이스에서 참조 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 컨트롤 하는 방법과 <xref:System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl%2A> 속성은 컨트롤에 선언적으로 설정 합니다. 참고가이 예제에서 제공 하는 웹 파트 컨트롤의 카탈로그가 없으면 이기 때문에이 속성을 설정 하는 실제 효과 볼 수 없습니다.  
  
 [!code-aspx-csharp[WebParts_IWebPart_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountuchostcs.aspx#1)]
 [!code-aspx-vb[WebParts_IWebPart_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountuchostvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.CatalogIconImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.GenericWebPart.CatalogIconImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartDescription.CatalogIconImageUrl" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IWebPart.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.Web.UI.WebControls.WebParts.IWebPart.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤의 도구 설명과 카탈로그에 사용하기 위해 컨트롤의 용도를 요약한 간략한 문구를 가져오거나 설정합니다.</summary>
        <value>컨트롤의 기능을 간략하게 요약한 문자열입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Description%2A> 목록을 제공 하는 카탈로그의 컨트롤에 대 한 설명이 포함 된 문자열 속성 값은 대개 사용 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 및 컨트롤의 제목 표시줄에서 도구 설명으로 합니다. 속성의 콘텐츠 컨트롤의 제목 표시줄의 제목 텍스트 위에 마우스 포인터를 놓을 때 도구 설명에 나타납니다.  
  
   
  
## Examples  
 다음 코드 예제에는 선언적 및 프로그래밍 방식의 사용 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Description%2A> 속성입니다. 예제에 대 한 전체 소스 코드의 예 섹션에서 발견 되는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 클래스 개요입니다.  
  
 코드 예제의 첫 번째 부분에서는 사용자 정의 컨트롤을 구현 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Description%2A> 속성입니다.  
  
 [!code-csharp[WebParts_IWebPart_Overview#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountusercontrolcs.ascx#3)]
 [!code-vb[WebParts_IWebPart_Overview#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountusercontrolvb.ascx#3)]  
  
 코드 예제에서는 두 번째 부분에 프로그래밍 방식으로 값을 설정 하는 사용자 정의 컨트롤에서 메서드를 보여 줍니다는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Description%2A> 사용자가 페이지의 라디오 단추에서 적절 한 속성 이름을 선택 하면 속성 텍스트 상자에 새 값을 설정 하 고 다음을 클릭 합니다 **업데이트** 단추입니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-csharp[WebParts_IWebPart_Overview#9](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountusercontrolcs.ascx#9)]
 [!code-vb[WebParts_IWebPart_Overview#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountusercontrolvb.ascx#9)]  
  
 코드 예제에서는 세 번째 부분을 사용자 제어 하 구현 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 인터페이스에서 참조 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 컨트롤 하는 방법과 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Description%2A> 속성은 컨트롤에 선언적으로 설정 합니다. 브라우저에서 페이지를 로드 한 후 컨트롤의 제목 표시줄에 있는 제목 텍스트 위에 마우스 포인터를 배치 하 여이 속성의 값을 볼 수 있는지 참고 합니다. 웹 페이지를 로드 하 고 속성 값을 변경 하려면 제공 된 사용자 인터페이스 (UI)를 사용 하 여 프로그래밍 방식으로 런타임에 속성 값을 변경 하 여 실험할 수 있습니다.  
  
 [!code-aspx-csharp[WebParts_IWebPart_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountuchostcs.aspx#1)]
 [!code-aspx-vb[WebParts_IWebPart_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountuchostvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.Part.Description" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.Description" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.GenericWebPart.Description" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="Subtitle">
      <MemberSignature Language="C#" Value="public string Subtitle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Subtitle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IWebPart.Subtitle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Subtitle As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Subtitle { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Subtitle : string" Usage="System.Web.UI.WebControls.WebParts.IWebPart.Subtitle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.WebParts.IWebPart.Title" /> 컨트롤의 전체 제목을 구성하기 위해 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 속성 값에 연결된 문자열을 가져옵니다.</summary>
        <value>컨트롤의 부제목으로 사용되는 문자열입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Subtitle%2A> 속성에 대 한 기본 부제목 문자열을 반환 하는 데 사용 됩니다는 <xref:System.Web.UI.WebControls.WebParts.WebPart> 제목 표시줄에 컨트롤의 제목에 추가 되는 컨트롤입니다.  
  
 기본값을 제공 하는 경우를 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Subtitle%2A> 구현 하는 컨트롤의 속성을 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 인터페이스를 자동으로 설정 하는 컨트롤의 값에 추가 하는 웹 파트를 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Title%2A> 런타임 시 컨트롤의 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에는 선언적 및 프로그래밍 방식의 사용 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Subtitle%2A> 속성입니다. 예제에 대 한 전체 소스 코드의 예 섹션에서 발견 되는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 클래스 개요입니다.  
  
 코드 예제의 첫 번째 부분에서는 사용자 정의 컨트롤을 구현 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Subtitle%2A> 속성입니다. 속성이 읽기 전용인 지 하는 컨트롤의 기본 제목에 추가 되는 기본 자막을 제공 하는 데 사용할 것을 참고 합니다.  
  
 [!code-csharp[WebParts_IWebPart_Overview#5](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountusercontrolcs.ascx#5)]
 [!code-vb[WebParts_IWebPart_Overview#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountusercontrolvb.ascx#5)]  
  
 코드 예제의 두 번째 부분은 사용자 제어 하 구현 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 인터페이스에서 참조 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 컨트롤 방법과 쓰기 가능한 속성을 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 컨트롤에 선언적으로 설정 됩니다. 브라우저에서 페이지를 로드 한 후 확인 하는 기본값인을 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Subtitle%2A> 사용자 컨트롤의 구현 코드에 설정 된 속성을 컨트롤의 제목 표시줄의 제목에 추가 됩니다.  
  
 [!code-aspx-csharp[WebParts_IWebPart_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountuchostcs.aspx#1)]
 [!code-aspx-vb[WebParts_IWebPart_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountuchostvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.Subtitle" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.GenericWebPart.Subtitle" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IWebPart.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Web.UI.WebControls.WebParts.IWebPart.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤의 제목을 가져오거나 설정합니다.</summary>
        <value>컨트롤의 제목이 들어 있는 문자열입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 컨트롤의 제목 표시줄에 나타나는 제목 텍스트도 설정 됩니다는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Title%2A> 속성입니다.  
  
 컨트롤의 제목을 제공 하지 않으면 자동으로 설정 하는 웹 파트 컨트롤을 제목으로 사용 하 여 기본 문자열을 계산 합니다. 자세한 내용은 <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle%2A>를 참조하십시오. 또한 제목 문자열에 추가 되는 기본 자막을 제공 하는 것이 같습니다. 자세한 내용은 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Subtitle%2A>를 참조하십시오.  
  
   
  
## Examples  
 다음 코드 예제에는 선언적 및 프로그래밍 방식의 사용 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Title%2A> 속성입니다. 예제에 대 한 전체 소스 코드의 예 섹션에서 발견 되는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 클래스 개요입니다.  
  
 코드 예제의 첫 번째 부분에서는 사용자 정의 컨트롤을 구현 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Title%2A> 속성입니다.  
  
 [!code-csharp[WebParts_IWebPart_Overview#4](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountusercontrolcs.ascx#4)]
 [!code-vb[WebParts_IWebPart_Overview#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountusercontrolvb.ascx#4)]  
  
 코드 예제에서는 두 번째 부분에 프로그래밍 방식으로 값을 설정 하는 사용자 정의 컨트롤에서 메서드를 보여 줍니다는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Title%2A> 사용자가 페이지의 라디오 단추에서 적절 한 속성 이름을 선택 하면 속성 텍스트 상자에 새 값을 설정 하 고 다음을 클릭 합니다 **업데이트** 단추입니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-csharp[WebParts_IWebPart_Overview#9](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountusercontrolcs.ascx#9)]
 [!code-vb[WebParts_IWebPart_Overview#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountusercontrolvb.ascx#9)]  
  
 코드 예제에서는 세 번째 부분을 사용자 제어 하 구현 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 인터페이스에서 참조 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 컨트롤 하는 방법과 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Title%2A> 속성은 컨트롤에 선언적으로 설정 합니다.  
  
 [!code-aspx-csharp[WebParts_IWebPart_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountuchostcs.aspx#1)]
 [!code-aspx-vb[WebParts_IWebPart_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountuchostvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.Part.Title" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.Title" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.GenericWebPart.Title" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="TitleIconImageUrl">
      <MemberSignature Language="C#" Value="public string TitleIconImageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TitleIconImageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Property TitleIconImageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TitleIconImageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TitleIconImageUrl : string with get, set" Usage="System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤의 자체 제목 표시줄에서 웹 파트 컨트롤을 나타내는 데 사용되는 이미지의 URL을 가져오거나 설정합니다.</summary>
        <value>이미지의 URL을 나타내는 문자열입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl%2A> 속성에 있는 아이콘을 연결 하는 방법을 제공을 <xref:System.Web.UI.WebControls.WebParts.WebPart> 제어 합니다. 컨트롤의 제목 표시줄에 아이콘이 표시 됩니다. 테마의 일관성에 대 한 응용 프로그램 개발자가이 아이콘을 웹 파트 컨트롤의 카탈로그에 컨트롤을 나타내는 이미지와 비슷하게 하도록 할 (에서 참조 된 이미지는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl%2A> 속성).  
  
 웹 파트 컨트롤 집합에서 구현 되는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl%2A> 이미지 또는 컨트롤의 제목 표시줄에 나타나는 아이콘을 변경 하려면 최종 사용자가 속성을 개인 설정할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에는 선언적 및 프로그래밍 방식의 사용 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl%2A> 속성입니다. 예제에 대 한 전체 소스 코드의 예 섹션에서 발견 되는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 클래스 개요입니다.  
  
 코드 예제의 첫 번째 부분에서는 사용자 정의 컨트롤을 구현 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl%2A> 속성입니다.  
  
 [!code-csharp[WebParts_IWebPart_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountusercontrolcs.ascx#6)]
 [!code-vb[WebParts_IWebPart_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountusercontrolvb.ascx#6)]  
  
 코드 예제에서는 두 번째 부분에 프로그래밍 방식으로 값을 설정 하는 사용자 정의 컨트롤에서 메서드를 보여 줍니다는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl%2A> 사용자가 페이지의 라디오 단추에서 적절 한 속성 이름을 선택 하면 속성 텍스트 상자에 새 값을 설정 하 고 다음을 클릭 합니다 **업데이트** 단추입니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-csharp[WebParts_IWebPart_Overview#9](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountusercontrolcs.ascx#9)]
 [!code-vb[WebParts_IWebPart_Overview#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountusercontrolvb.ascx#9)]  
  
 코드 예제에서는 세 번째 부분을 사용자 제어 하 구현 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 인터페이스에서 참조 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 컨트롤 하는 방법과 <xref:System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl%2A> 속성은 컨트롤에 선언적으로 설정 합니다. 실제 이미지의 URL을 얻을 수 없는 경우 아이콘에 대 한 자리 표시자에에서 나타나는지 제목 표시줄을 참고 합니다.  
  
 [!code-aspx-csharp[WebParts_IWebPart_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountuchostcs.aspx#1)]
 [!code-aspx-vb[WebParts_IWebPart_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountuchostvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.TitleIconImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.GenericWebPart.TitleIconImageUrl" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="TitleUrl">
      <MemberSignature Language="C#" Value="public string TitleUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TitleUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.IWebPart.TitleUrl" />
      <MemberSignature Language="VB.NET" Value="Public Property TitleUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TitleUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TitleUrl : string with get, set" Usage="System.Web.UI.WebControls.WebParts.IWebPart.TitleUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤에 대한 추가 정보의 URL을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤에 대한 추가 정보의 URL을 나타내는 문자열입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 URL을 할당 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.TitleUrl%2A> 속성, 컨트롤의 제목을 링크로 사용 됩니다. 이 속성의 목적은 최종 사용자가 컨트롤에 대 한 추가 정보에 액세스 하는 편리한 방법을 제공 하는 것입니다. 추가 정보는 저작권 데이터를 연락처 데이터를 컨트롤의 작성자나 컨트롤의 용도 요약 하는 방법에 대 한 세부 정보를 제공할 수 있습니다.  
  
> [!NOTE]
>  사용 하지 않을 일반적으로 <xref:System.Web.UI.WebControls.WebParts.IWebPart.TitleUrl%2A> 도움말 콘텐츠를 연결 하는 속성입니다. 컨트롤을 사용 하는 것에 대 한 도움말 링크를 제공 하는 가장 좋은 방법은 <xref:System.Web.UI.WebControls.WebParts.WebPart.HelpUrl%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에는 선언적 및 프로그래밍 방식의 사용 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.TitleUrl%2A> 속성입니다. 예제에 대 한 전체 소스 코드의 예 섹션에서 발견 되는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 클래스 개요입니다.  
  
 코드 예제의 첫 번째 부분에서는 사용자 정의 컨트롤을 구현 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.TitleUrl%2A> 속성입니다.  
  
 [!code-csharp[WebParts_IWebPart_Overview#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountusercontrolcs.ascx#7)]
 [!code-vb[WebParts_IWebPart_Overview#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountusercontrolvb.ascx#7)]  
  
 코드 예제에서는 두 번째 부분에 프로그래밍 방식으로 값을 설정 하는 사용자 정의 컨트롤에서 메서드를 보여 줍니다는 <xref:System.Web.UI.WebControls.WebParts.IWebPart.TitleUrl%2A> 사용자가 페이지의 라디오 단추에서 적절 한 속성 이름을 선택 하면 속성 텍스트 상자에 새 값을 설정 하 고 다음을 클릭 합니다 **업데이트** 단추입니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-csharp[WebParts_IWebPart_Overview#9](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountusercontrolcs.ascx#9)]
 [!code-vb[WebParts_IWebPart_Overview#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountusercontrolvb.ascx#9)]  
  
 코드 예제에서는 세 번째 부분을 사용자 제어 하 구현 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.WebParts.IWebPart> 인터페이스에서 참조 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartZone> 컨트롤 하는 방법과 <xref:System.Web.UI.WebControls.WebParts.IWebPart.TitleUrl%2A> 속성은 컨트롤에 선언적으로 설정 합니다. Note는 실제 페이지에 대 한 URL을 제공 하지 않는 경우 사용자가 제목 표시줄의 링크를 클릭 한 다음 오류 메시지가 나타납니다.  
  
 [!code-aspx-csharp[WebParts_IWebPart_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_IWebPart_Overview/CS/accountuchostcs.aspx#1)]
 [!code-aspx-vb[WebParts_IWebPart_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_IWebPart_Overview/VB/accountuchostvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.TitleUrl" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.GenericWebPart.TitleUrl" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
  </Members>
</Type>