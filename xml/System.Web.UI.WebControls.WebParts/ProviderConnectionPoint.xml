<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="575da1e985d2a34222cb6c445b73da8de19944c0" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="59352318" /></Metadata><TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>공급자 역할을 하는 서버 컨트롤에서 소비자와의 연결을 설정할 수 있도록 하는 연결 지점 개체를 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 서버 컨트롤 간의 모든 웹 파트 연결에서 각 컨트롤 있어야 합니다 (다른 요구 사항) 간에 다른 컨트롤에 연결 하 고 제공 하거나 여부에 따라 데이터를 사용할 수 있도록 하는 연결 지점 개체가 컨트롤 공급자 또는 소비자 연결용으로 지정 됩니다. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 개체 일반적 컨트롤을 공유할 수 있는 데이터의 형식과 다른 컨트롤에 연결할 수는 방법에 대 한 세부 정보를 포함 합니다. 연결에서 공급자 역할을 하는 컨트롤에 대 한 해당 연결 지점이 있어야를 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체입니다. 웹 파트 연결 및 연결 지점에 대 한 자세한 내용은 참고 항목 섹션 아래에 나열 된 항목을 참조 하세요.  
  
 만들려는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체, 몇 가지 단계가 필요 합니다.  
  
1.  인터페이스를 만듭니다. 공급자는 소비자를 사용 하 여 데이터를 공유 하면 인터페이스의 인스턴스를 시작 하 고 해당 인스턴스는 소비자에 게 반환 하 여 수행 합니다.  
  
2.  공급자에서 인터페이스를 구현 합니다. A <xref:System.Web.UI.WebControls.WebParts.WebPart> 또는 기타 서버 컨트롤 (에서 서버 컨트롤의 모든 형식은 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 영역을 사용할 수 있습니다) 공급자는 첫 번째 단계에서 만든 인터페이스를 구현 해야 하는 됩니다.  
  
3.  콜백 메서드를 식별 합니다. 공급자의 메서드에 연결할 콜백 메서드로 식별 되어야 합니다. 이 메서드는 소비자에 게 구현된 된 인터페이스의 인스턴스를 반환 합니다. 공급자에서 콜백 메서드를 식별 하기 위한 웹 파트는 방법은 추가 하는 것을 `ConnectionProvider` 메타 데이터 특성 (정의한는 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> 클래스) 인터페이스 인스턴스를 반환 하는 방법입니다. 특성을 추가할 때 유일한 필수 매개 변수는 공급자 연결 지점에 사용할 표시 이름입니다. 선택적 매개 변수는 연결점에 대 한 ID 같은 추가할 수도 있습니다.  
  
 컨트롤을 공급자 역할을 하도록 설정 된 후 컨트롤 (구비 하 고 사용 가능한 소비자 컨트롤 마찬가지로 것으로 간주) 연결에 참여할 수 있습니다. 웹 페이지의 태그에서 선언적 정적 연결을 만들려는 개발자가 사용할 수는 `<asp:webpartconnection>` 요소입니다. 경우는 `ConnectionProvider` 연결 지점에 대 한 ID를 지정 하는 콜백 메서드를 식별 하는 공급자 소스 코드에서 특성 값에 할당 되어야 합니다는 `ProviderConnectionPointID` 특성을 `<asp:webpartconnection>` 페이지에 요소. 개발자는 공급자 연결 지점의 ID를 지정 하는 이유 중 하나는 공급자 컨트롤에서 연결 지점이 여러 개 있기 때문입니다. 값 공급자 컨트롤의 공급자 연결 지점에 대 한 ID를 지정 하지 않으면를 할당할 필요가 없습니다 합니다 `ProviderConnectionPointID` 페이지에서, 연결에서 가져온 값을 사용 하 여 만들어지기 때문에 특성을 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> 필드입니다.  
  
 코드에서 연결을 만들려는 개발자는 새 만들어야 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 를 호출 하 여 개체를 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> 메서드와 함께 ID 또는 인덱스의 정의 된 공급자 컨트롤의 ID를 전달 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 공급자 컨트롤의 개체입니다. 반환 된 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 공급자 컨트롤에 대 한 참조와 함께 해당 소비자 컨트롤에 대 한 참조 개체 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 개체를 모두 전달할 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 메서드를 만들기 위한 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체.  
  
 개발자를 사용할 수 있지만 공급자 연결 지점의 선언적으로 또는 프로그래밍 방식으로 연결 설정의 일부로 사용자 공급자 연결 지점의 사용자 인터페이스 (UI)를 통해 연결을 설정할 수 상호 작용할 수도 있습니다. 개발자가 선언 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 컨트롤이 웹 페이지에서 연결을 만드는 사용자에 대 한 런타임 UI를 제공 합니다. 사용자가 클릭 하 여 연결을 설정 하기 위한 시작 지점으로 소비자 컨트롤을 선택 하는 경우 해당 연결 동사 (공급자를 선택할 수도 있습니다; 결과 연결에서 차이가), UI에 있는 드롭다운 목록 컨트롤이 나타납니다는 사용 가능한 공급자 연결 지점 (또는 여러 세션에 있는 경우 지점)의 이름을 표시 합니다. 사용자 연결을 만들려면 공급자 연결 지점을 선택 해야 합니다.  
  
 A <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 특정 공급자 컨트롤을 사용 하 여 직접 연결 하 고 기본에서 상속 된 속성에 연결 하는 방법에 대 한 세부 정보를 저장 하는 개체 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 클래스입니다. 예를 들어, 상속 된에서 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 속성 공급자 연결 지점이 계속 공급자가 반환 하는 인터페이스의 형식입니다. 공급자와 같은 작업 둘 다 연결에서 소비자 인터페이스 형식, 해당 컨트롤은 호환 되며 직접 연결을 설정할 수 있습니다. 공급자 및 소비자를 동일한 인터페이스 형식을 사용할 수 없는, 하는 경우 호환 되지 않는 하며 사용 해야 합니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 공급자 연결 지점의 변환할 개체 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 소비자가 사용할 수 있는 형식으로 값입니다. 다른 중요 한 상속 된 속성은는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> 연결을 만들 때 속성 공급자 연결을 선택 하는 사용자에 대 한 UI에 표시 하기 위한 이름을 제공 하는 지점입니다. 표시 이름은 필수 매개 변수 추가 하는 개발자는 `ConnectionProvider` 공급자 컨트롤의 콜백 메서드 특성입니다. 상속 된 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> 공급자에 연결 지점이 여러 개 공급자 연결 지점의 고유 식별자를 제공 하기 때문에, 앞서 설명한 대로 속성 유용 이기도 합니다. 공급자를 여러 개 있을 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개발자가 추가 후에이 예에서 정의 된 개체는 `ConnectionProvider` 특성 메서드에 각 연결점을 구별 하는 ID 값을 지정 해야 합니다. 상속 된 또 하나의 주요 속성은는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 공급자 연결 지점에서 동시에 여러 소비자에 게 연결할 수 있는지 여부를 나타내는 속성도 있습니다. 이 속성 값이 `true` 공급자 연결 지점에 대해 기본적으로 (기본적으로 반면 `false` 소비자 연결 지점에 대 한).  
  
 합니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 몇 가지 고유한 메서드를 추가 하는 클래스에서 상속 된 멤버에는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 클래스입니다. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> 메서드 콜백 메서드를 소비자에 게 반환 하는 인터페이스의 인스턴스를 검색 합니다. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> 메서드는 기존 연결의 일부인 추가 소비자 인터페이스를 검색 하지만 연결을 설정 하는 인터페이스가 아닌 사용 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 선언적으로 연결을 만들고, 프로그래밍 방식으로 또는 각 사례 때에서 UI를 통해 공급자 연결 지점을 사용 하는 간단한 방법을 보여 줍니다.  
  
 예제에는 네 가지 부분이 있습니다.  
  
-   웹 파트를 변경할 수 있게 해 주는 사용자 정의 컨트롤을 페이지 모드를 표시 합니다.  
  
-   소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.  
  
-   모든 컨트롤을 호스트 하 여 코드 예제를 실행 하는 웹 페이지입니다.  
  
-   예제 페이지를 실행 하는 방법 설명 합니다.  
  
 이 코드 예제에 첫 번째 부분은 사용자가 웹 페이지의 디스플레이 모드를 변경할 수 있는 사용자 정의 컨트롤입니다. 에 할당 되는 파일 이름을 지정.ascx 파일에 다음 소스 코드를 저장 합니다 `Src` 특성의는 `Register` 호스팅 웹 페이지의 위쪽에이 사용자 정의 컨트롤에 대 한 지시문을 합니다. 이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 대 한 정보를 참조 [연습: 페이지 파트는 웹에서 디스플레이 모드 변경](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 코드 예제의 두 번째 부분은 인터페이스 및 컨트롤에 대 한 소스 코드입니다. 이라는 간단한 인터페이스를 포함 하는 소스 파일 `IZipCode`합니다. 이기도 한 <xref:System.Web.UI.WebControls.WebParts.WebPart> 라는 클래스 `ZipCodeWebPart` 인터페이스를 구현 하 고 공급자 컨트롤의 역할을 합니다. 해당 `ProvideIZipCode` 메서드는 인터페이스의 전용 멤버를 구현 하는 콜백 메서드입니다. 메서드는 단순히 인터페이스의 인스턴스를 반환합니다. 메서드를 사용 하 여 표시 된 참고는 `ConnectionProvider` 해당 메타 데이터의 특성입니다. 공급자의 연결점에 대 한 콜백 메서드로 메서드를 식별 하기 위한 메커니즘입니다. 다른 <xref:System.Web.UI.WebControls.WebParts.WebPart> 클래스 이름은 `WeatherWebPart`, 연결에 대 한 소비자 역할을 합니다. 이 클래스에 메서드가 `GetZipCode` 의 인스턴스를 가져오는 `IZipCode` 공급자 컨트롤에서 인터페이스입니다. 이 메서드는 사용 하는 소비자 연결 지점 메서드로 표시는 `ConnectionConsumer` 해당 메타 데이터의 특성입니다. 소비자 컨트롤의 연결 지점 메서드를 식별 하기 위한 메커니즘입니다.  
  
 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제에서는 동적 컴파일을 사용 합니다. 컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 코드 예제에서는 세 번째 부분에는 웹 페이지입니다. 위쪽은 `Register` 페이지의 디스플레이 모드 연결을 구성 하는 사용자 지정 컨트롤 및 사용자가 변경할 수 있는 사용자 정의 컨트롤을 등록 하는 지시문입니다. 연결 자체 내에서 선언적으로 만들어집니다는 `<staticconnections>` 페이지의 요소입니다. 이 연결을 만드는 방법을 보여 줍니다-참고 합니다 `ProviderConnectionPointID` 특성을 `<asp:webpartconnection>` 요소입니다. 연결을 프로그래밍 방식으로 실현할 수 있습니다. 작업을 수행 하는 코드는 `Button1_Click` 메서드. 이 경우에 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체가 생성 되 고 실제 연결을 만드는 메서드로 전달 합니다. 연결이 선언적으로 또는 프로그래밍 방식으로 생성 하는지 여부를 연결점 공급자와 소비자 모두에 대해 항상 지정 해야 합니다. 합니다 `Button2_Click` 메서드 액세스를 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 공급자와 소비자 모두에 대 한 개체 및 레이블을 페이지에서 해당 속성 값의 일부를 씁니다.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 브라우저에서 페이지를 로드 한 후 클릭 합니다 **연결 지점 정보** 단추입니다. 선언적 연결에 설정 된 공급자 및 소비자 연결 지점에 대 한 정보가 표시 됩니다. 다음을 사용 하 여 합니다 **디스플레이 모드** 드롭다운 컨트롤을 페이지에 연결 전환 모드입니다. 동사 메뉴에서를 **ZIP Code 소비자** <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 (제목 표시줄의 아래쪽 화살표로 표시 됨) 연결 동사를 클릭 합니다. UI가 나타나고 연결이 자동으로 생성 된 `<asp:connectionszone>` 컨트롤이 페이지에 선언 합니다. 앞에서 설명한 선언적 방법과 프로그래밍 방법을 함께 (UI)를 통해 연결을 만드는 다른 방법입니다. 클릭 합니다 **연결 끊기** 단추 기존 정적 연결을 종료 합니다. 클릭 합니다 **공급자에 연결할** 링크. UI는 공급자 연결 지점 표시 이름을 나열 하는 드롭다운 목록 컨트롤에 표시 됩니다. 드롭다운 목록에서 연결 지점을 선택 하 고 클릭 **Connect** 연결을 완료 합니다. 다음으로, 클릭 **연결 끊기** 다시 합니다. 클릭 합니다 **동적 연결** 프로그래밍 방식으로 연결을 설정 하는 단추입니다. 사용 합니다 **디스플레이 모드** 찾아보기 모드로 페이지를 반환 하는 컨트롤입니다. 클릭 합니다 **연결 지점 세부 정보** 단추를 다시 한 번 더 공급자 연결 지점 개체에 대 한 정보를 나타냅니다.  
  
 이 예제에서는 연결 및 공급자 연결 지점을 사용 하 여 세 가지 방법으로 살펴보았습니다.; 웹 페이지 태그에 선언 된 정적 연결 사용 하는 코드에서 만든 연결을 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체 및 UI 연결을 통해 사용자가 만든 연결 합니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">웹 파트 연결 개요</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">연결을 설정하기 위해 소비자에게 인터페이스 인스턴스를 반환하는 공급자 컨트롤의 메서드입니다.</param>
        <param name="interfaceType">공급자가 소비자에게 제공하는 인터페이스의 <see cref="T:System.Type" />입니다.</param>
        <param name="controlType">공급자 연결 지점과 관련된 공급자 컨트롤의 <see cref="T:System.Type" />입니다.</param>
        <param name="displayName">연결 UI(사용자 인터페이스)에서 사용자에게 표시되는 공급자 연결 지점의 표시 이름입니다.</param>
        <param name="id">공급자 연결 지점의 고유 식별자입니다.</param>
        <param name="allowsMultipleConnections">공급자 연결 지점에 소비자와의 연결이 동시에 여러 개 있을 수 있는지 여부를 나타내는 부울 값입니다.</param>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> 에 대 한 생성자는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 클래스 기본 생성자, 다양 한 매개 변수를 전달 하 고 기본 클래스 초기화를 호출 합니다.  
  
 기본 클래스 생성자는 연결 지점에 대 한 매개 변수 개수를 확인 하 고 몇 가지 예외를 throw 할 수 있습니다. 가능한 예외 목록은 예외 섹션을 참조 하세요.  
  
 호출할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> 의 고유한 인스턴스를 만드는 생성자는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 클래스입니다. 그러나 단순히 연결을 설정 하 고 클래스를 확장 하지 않는 경우에 호출 해야 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> 공급자에서 기존 연결 지점 개체를 반환 하는 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에서 파생 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 클래스 사용자 지정 공급자 연결 지점 만들기를 합니다.  
  
 이 코드 예제는 세 부분으로 구성 합니다.  
  
-   공급자를 포함 하는 원본 파일 <xref:System.Web.UI.WebControls.WebParts.WebPart> 소비자 컨트롤 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 및 사용자 지정 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체입니다.  
  
-   정적 연결에서 컨트롤을 호스팅하는 웹 페이지입니다.  
  
-   예제 코드를 실행 하는 방법 설명 합니다.  
  
 코드 예제의 첫 번째 부분은 공급자와 소비자에 대 한 원본 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 및 사용자 지정 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 이라는 클래스가 `TableProviderConnectionPoint`합니다. 생성자는 `TableProviderConnectionPoint` 클래스 매개 변수 섹션에 표시 된 대로 필요한 매개 변수를 전달 하 고 기본 생성자를 호출 합니다. 에 유의 합니다 `TableProviderWebPart` 클래스를 `GetConnectionInterface` 메서드는 연결에 대 한 콜백 메서드로 지정 됩니다 및 `ConnectionProvider` 특성은 사용자 지정 선언 `TableProviderConnectionPoint` 매개 변수로 합니다. 이 사용자 지정 공급자 연결 지점 만들기 공급자 컨트롤을 사용 하 여 연결 하는 방법을 보여 줍니다. 이 예제에서는 소스 코드를 동적으로 컴파일할 소스 코드 파일을 웹 응용 프로그램의 App_Code 하위 폴더에 배치 해야 하므로  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 코드 예제의 두 번째 부분은 정적 웹 파트 연결에서 사용자 지정 컨트롤을 호스트 하는 웹 페이지입니다. 페이지의 맨 위에는 `Register` 접두사 및 사용자 지정 컨트롤에 대 한 네임 스페이스를 선언 하는 지시문입니다. 연결이 사용 하 여 선언 되는 `<asp:webpartconnection>` 요소, 공급자 및 소비자 컨트롤 내에서 선언 된는 `<asp:webpartzone>` 요소.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 브라우저에서 페이지를 로드 합니다. 이미 컨트롤 간의 연결이 있고 연결 된 페이지에 정적 연결으로 선언 되었으므로 소비자 공급자에서 데이터를 표시 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callbackMethod" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="interfaceType" />가 <see langword="null" />인 경우  
  
또는 
 <paramref name="controlType" />가 <see langword="null" />인 경우  
  
또는 
 <paramref name="displayName" />이 <see langword="null" /> 또는 빈 문자열("")인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="controlType" />이 공급자 컨트롤 또는 이 컨트롤에서 파생된 유효한 클래스의 형식과 동일하지 않은 경우</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">웹 파트 연결에서 공급자 역할을 하는 컨트롤입니다.</param>
        <summary>인터페이스 인스턴스를 가져와 소비자에게 반환하는 공급자 컨트롤의 콜백 메서드를 호출합니다.</summary>
        <returns>공급자가 연결을 설정하기 위해 소비자에게 반환하는 인터페이스의 인스턴스인 <see cref="T:System.Object" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 연결을 설정 하는 데 사용 하는 인터페이스의 인스턴스는 공급자 컨트롤에서 개체를 반환 합니다. 개체의 형식에 구현된 된 인터페이스의 형식이 됩니다. 예를 들어 두 구현 되는 인터페이스를 웹 파트 컨트롤 집합에서에서 연결에 대 한 <xref:System.Web.UI.WebControls.WebParts.IWebPartField> 고 <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>입니다. 경우는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> 메서드가 호출 되는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체에 연결 된 공급자 이러한 인터페이스를 구현 하는 경우 반환된 된 개체는 동일한 형식의.  
  
 합니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체는 연결을 활성화 하는 중입니다. 이것이 실제로 연결을 시작 하 고 두 개의 컨트롤이 데이터를 공유할 수 있도록 하는 프로세스를 시작 하는 중요 한 단계입니다.  
  
 연결에서 소비자 컨트롤과 공급자와 같은 유형의 인터페이스를 사용 하 여 작업에 있어야 합니다. 그렇지 않은 경우 컨트롤을 호환 되지 않습니다 및 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 개체를 사용 하 여 연결 해야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">웹 파트 연결에서 공급자 역할을 하는 컨트롤입니다.</param>
        <summary>공급자 연결 지점에서 지원할 수 있는 보조 인터페이스의 선택적 컬렉션을 가져옵니다.</summary>
        <returns>공급자 역할을 하는 컨트롤에서 제공하는 추가 인터페이스의 <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 공급자 연결 지점 개체는 항상 소비자와의 연결을 설정 하는 데 사용 되는 기본 인터페이스를 있습니다. 기본 인터페이스의 인스턴스를 호출 하 여 검색 되는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> 메서드는 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체입니다.  
  
 그러나 일부 공급자 컨트롤 연결의 일부분으로 소비자에 게 제공 하는 여러 인터페이스를 구현 합니다. 이러한 인터페이스를 하지 않은 연결에 사용 되는 기본, 보조 인터페이스 라고 합니다. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> 메서드 처럼 보조 인터페이스에 대 한 참조의 컬렉션을 반환 하는 방법을 제공 합니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> 메서드 기본 인터페이스에 대 한 참조를 반환 합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>합니다 <see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> 의 메서드는 <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> 클래스 구현이 포함 되지 않으며 않으면 보조 인터페이스의 빈 컬렉션을 반환 합니다. 상속 해야이 메서드를 구현 하는 <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> 클래스 및 보조 인터페이스의 특정 집합에서 반환 하는이 메서드를 재정의 합니다.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>