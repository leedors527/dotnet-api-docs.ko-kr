<Type Name="WebPartConnection" FullName="System.Web.UI.WebControls.WebParts.WebPartConnection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d33323212fbf6275393a23d262fe4884aeb7fc1a" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="59354458" /></Metadata><TypeSignature Language="C#" Value="public sealed class WebPartConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebPartConnection extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebPartConnection" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartConnection sealed" />
  <TypeSignature Language="F#" Value="type WebPartConnection = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Transformers")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>두 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤에서 연결을 설정할 수 있도록 하는 개체를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 웹 파트 컨트롤 집합에서 연결이 링크 또는 두 연결 <xref:System.Web.UI.WebControls.WebParts.WebPart> (또는 다른 서버 또는 사용자) 데이터를 공유할 수 있도록 하는 컨트롤입니다. 데이터를 공유 하는이 기능에는 연결 된 컨트롤이 격리 된 컨트롤에서 제공 하는 기능을 초과 하는 방법으로 사용할 수 있습니다. 예를 들어, 하나의 컨트롤 우편 번호 데이터를 제공 하 고 다른 컨트롤 해당 데이터를 읽을 수 있습니다 및 우편 번호에 따라 로컬 날씨 정보를 제공, 다음 두 개의 연결 된 기능 제공 더 많은 가치 사용자에 게 합니다. 이 예제를 확장 하려면 다른 컨트롤을 만들 수는 정보를 표시, 로컬 뉴스에 대 한 링크를 사용 하 여 컨트롤과 같은 우편 번호에 따라 및 우편 데이터로 작업할 수 있는 모든이 컨트롤을 제공 하는 단일 제어를 사용 하 여 데이터를 공유할 수 있습니다는 우편 번호입니다. 웹 파트 응용 프로그램의 최종 사용자가 제공한 표준 연결 사용자 인터페이스 (UI)를 사용 하 여 웹 브라우저에서 직접 이러한 모든 호환 컨트롤 간의 연결을 만들고 수는 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 컨트롤 또는 제공한 사용자 지정 UI를 사용 하는 개발자입니다.  
  
 이 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 클래스 개요의 연결을 만들기 위한 기본 세부 정보 일반 문입니다. 에 특정 구성 요소 및 연결 만들기와 관련 된 요구 사항에 대 한 자세한 참조 [웹 파트 연결 개요](https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100))에 참조 클래스 및 다음 섹션에서 언급 한 예제 코드입니다. 웹 파트 연결의 기본적인 측면을 여러 가지가 있습니다.  
  
-   두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤. 두 컨트롤의 모든 웹 파트 연결 구성 됩니다. 컨트롤을 동시에 둘 이상의 연결에 참여할 수 있지만 정확히 두 컨트롤의 모든 단일 연결으로 구성 됩니다. 직접 파생 된 컨트롤을 <xref:System.Web.UI.WebControls.WebParts.WebPart> 또는 기본 클래스에는 ASP.NET 컨트롤, 사용자 지정 서버 컨트롤 및 사용자 정의 컨트롤을 비롯 하 여 다른 서버 컨트롤 수입니다. 컨트롤에서 파생 되지 않은 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPart> 클래스에 배치 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 영역을 사용 하 여 자동으로 래핑됩니다를 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> 에서 상속할 수 있도록 하는 런타임 시 개체를 <xref:System.Web.UI.WebControls.WebParts.WebPart> 클래스와 함수 실행 시간으로 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤입니다.  
  
-   컨트롤에 있는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 영역입니다. 둘 다 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 및 기타 서버 컨트롤의 형식에 있어야는 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> 웹 파트 연결 (및 다른 대부분의 웹 파트 기능)에 참여할 수 있도록 하는 영역입니다.  
  
-   소비자 및 공급자입니다. 모든 웹 파트 연결에는 두 개의 컨트롤이: 데이터 및 데이터의 소비자는 공급자입니다. 공급자는 인터페이스의 형태로 데이터를 반환 하는 지정 된 콜백 메서드를 통해 소비자에 게 데이터를 제공 합니다. (만들고 콜백 메서드를 지정 하는 방법의 예제를이 항목의 예제 섹션 참조). 이 콜백 메서드는 공급자 연결 지점 이라고 합니다. 이 연결점 (해당 이름, ID 및 반환 되는 인터페이스 형식)의 세부 정보에 포함 된를 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 공급자 컨트롤과 연결 된 개체입니다. 소비자는 인터페이스의 인스턴스를 수락할 수 있는 지정된 된 메서드를 통해 데이터를 받습니다. 이 메서드는 소비자 연결 지점 이라고 하며에 포함 된 연결 지점 (이름, ID 및 인터페이스의 형식)의 세부 정보는 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 소비자 컨트롤과 연결 된 개체입니다.  
  
-   호환 되는 컨트롤 또는 올바른 변환기입니다. 작업 연결에 대해 소비자와 공급자 여야 호환 됨 (지정 된 연결 지점 메서드는 동일한 유형의 인터페이스를 사용 하 여 작업할 수는 의미) 또는 있어야를 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 에서 제공 하는 형식을 변환할 수 있는 개체는 소비자가 인식할 수 있는 형식으로 공급자입니다.  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체입니다. 존재에 대 한 연결 인스턴스에 있어야 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 공급자 및 소비자 컨트롤과 해당 연결점의 세부 정보에 대 한 참조를 포함 하는 클래스입니다. 공급자와 소비자가 호환 되지 않으며 대신 사용 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 개체에 연결 하려면 연결은 변환기를 참조 합니다.  
  
-   연결을 설정 하는 수단입니다. 올바르게 연결 지점 메서드를 사용 하 여 설계 및 영역에 배치 된 호환 소비자 및 공급자 컨트롤 후 및 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체를 사용할 수 있는 마지막 필요한 기본 단계는 연결을 시작 합니다. 이러한 한 가지 방법은 사용자가 UI 통해 연결을 만들 수입니다. 배치 하는 경우는 `<asp:connectionszone>` 페이지 및 다른 요소는 연결에 대 한 구성 요소는 현재 위치에서 런타임에 사용자 페이지를 연결 디스플레이 모드를 전환할 수 있습니다 동사를 클릭 연결 공급자 또는 소비자의 동사 메뉴의 필요 및 연결 UI (기반는 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 컨트롤) 표시 됩니다. 이 UI를 통해 사용자는 연결을 시작할 수 있습니다. 연결을 시작 하는 다른 방법은 프로그래밍 방식으로 것입니다. 두 경우 모두 시작 하는지 여부를 통해 UI 또는 프로그래밍 방식으로 내부 메서드는 연결 동일 합니다. 응용 프로그램이 호출을 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 메서드 (또는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 변환기를 사용 하는 경우 메서드)에 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 제어, 공급자, 소비자 및 해당 해당 연결 지점 개체를 전달 하 고 메서드 반환를 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체입니다.  
  
 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 클래스 간 연결의 필수 세부 정보를 캡슐화 하는 개체 정의 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤입니다. 클래스 세부 정보와 관련 된 특정 연결의 속성 거의 전적으로 이루어져 있습니다. 여러 속성에는 연결에서 소비자 컨트롤과 관련이 있습니다. 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> 속성은 소비자 컨트롤 자체를 참조 하며 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> 소비자의 ID를 참조 하는 속성 합니다 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 소비자 연결 지점의 세부 정보를 포함 하는 개체는 소비자가 참조 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> 속성입니다. 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> 속성의 ID를 참조 합니다 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 개체입니다. 이러한 모든 소비자 관련 된 연결 속성 값이 연결을 만들려면 할당 있어야 합니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 클래스에는 연결에서 공급자 컨트롤과 관련 된 몇 가지 속성 및 소비자에 대 한 속성에 해당 합니다. 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> 속성은 공급자 컨트롤 자체를 참조 하는 동안는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> 속성 참조 ID 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> 속성 참조를 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체 및 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> 속성 공급자의 연결점의 ID를 참조 합니다.  
  
 몇 가지 속성 연결의 상태와 관련이 있습니다. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> 속성 (현재 데이터 교환)는 활성 또는 비활성 (여전히 연결 되었지만 하지 적극적으로 공유 된 데이터) 연결 인지 여부를 나타냅니다. 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> 속성 공유 연결 인지를 나타냅니다 (페이지의 모든 사용자에 게 사용 가능) 또는 사용자 고유의 연결을 및 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> 속성 인지를 나타냅니다 컨트롤 정적 (영구 및 페이지 태그에 선언 됨) 또는 동적 (즉, 프로그래밍 방식으로 만든를 삭제할 수 있습니다).  
  
   
  
## Examples  
 다음 코드 예제에는 두 간의 간단한 연결을 만드는 방법을 보여 줍니다 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤입니다. 이 예제에서는 연결을 형성 하는 세 가지 방법을 보여 줍니다: 웹 페이지의 태그에 연결에 대 한 태그를 배치 하 여 선언적으로 코드에서 연결을 만드는 프로그래밍 방식으로 및 배치 하 여 UI를 통해를 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 연결을 설정할 수 있도록 하는 페이지의 컨트롤입니다.  
  
 코드 예제에는 네 가지 부분이 있습니다.  
  
-   웹 파트를 변경할 수 있게 해 주는 사용자 정의 컨트롤을 페이지 모드를 표시 합니다.  
  
-   소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.  
  
-   모든 컨트롤을 호스트 하 여 코드 예제를 실행 하는 웹 페이지입니다.  
  
-   예제 페이지를 실행 하는 방법 설명 합니다.  
  
 이 코드 예제에 첫 번째 부분은 사용자가 웹 페이지의 디스플레이 모드를 변경할 수 있는 사용자 정의 컨트롤입니다. 에 할당 되는 파일 이름을 지정.ascx 파일에 다음 소스 코드를 저장 합니다 `Src` 특성의는 `Register` 호스팅 웹 페이지의 위쪽에이 사용자 정의 컨트롤에 대 한 지시문을 합니다. 이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 대 한 정보를 참조 [연습: 페이지 파트는 웹에서 디스플레이 모드 변경](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 코드 예제의 두 번째 부분은 인터페이스 및 컨트롤에 대 한 소스 코드입니다. 이라는 간단한 인터페이스를 포함 하는 소스 파일 `IZipCode`합니다. 이기도 한 <xref:System.Web.UI.WebControls.WebParts.WebPart> 라는 클래스 `ZipCodeWebPart` 인터페이스를 구현 하 고 공급자 컨트롤의 역할을 합니다. 해당 `ProvideIZipCode` 메서드는 인터페이스의 전용 멤버를 구현 하는 콜백 메서드입니다. 메서드는 단순히 인터페이스의 인스턴스를 반환합니다. 메서드를 사용 하 여 표시 된 참고는 `ConnectionProvider` 해당 메타 데이터의 특성입니다. 공급자의 연결점에 대 한 콜백 메서드로 메서드를 식별 하기 위한 메커니즘입니다. 다른 <xref:System.Web.UI.WebControls.WebParts.WebPart> 클래스 이름은 `WeatherWebPart`, 연결에 대 한 소비자 역할을 합니다. 이 클래스에 메서드가 `GetZipCode` 의 인스턴스를 가져오는 `IZipCode` 공급자 컨트롤에서 인터페이스입니다. 이 메서드는 사용 하는 소비자 연결 지점 메서드로 표시는 `ConnectionConsumer` 해당 메타 데이터의 특성입니다.  
  
 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제에서는 동적 컴파일을 사용 합니다. 컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_WebPartConnection_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/ZipCodeComponent.vb#2)]  
  
 코드 예제에서는 세 번째 부분에는 웹 페이지입니다. 위쪽은 `Register` 사용자 정의 컨트롤 및 사용자 지정에 대 한 지시문 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤입니다. 컨트롤에 대 한 소스 코드를 App_Code 하위 폴더에 있어야 컨트롤의 동적 컴파일, 가정 하기 때문에 `Register` 페이지 태그는 임의의 태그 접두사와 컨트롤의 네임 스페이스 참조 합니다. 사용자 지정 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 (공급자 및 소비자) 웹 페이지 내에서 선언 된 `<asp:webpartzone>` 요소를 `<zonetemplate>` 요소입니다.  
  
 페이지는 사용자 지정 컨트롤 간의 연결을 형성 하는 세 가지를 제공 합니다. 첫 번째 방법은 선언적 방법입니다. 페이지 태그에는 <`StaticConnections>` 요소 선언 되 고 내에 `<asp:WebPartConnections>` 요소와 특성으로 지정 된 연결의 다양 한 소비자 및 공급자 정보입니다. 이 특히 내 웹 페이지에서 직접 선언 하 여 연결을 만드는 한 가지 방법은 `<asp:WebPartManager>` 요소입니다. 이 정적 연결으로 인해 두 사용자 지정 컨트롤 간의 연결 페이지를 로드 한 처음으로 즉시 생성 됩니다.  
  
 컨트롤 간의 연결을 설정 하는 것에 대 한 두 번째 방법에서 제공 되는 `<asp:connectionszone>` 페이지의 요소입니다. 사용자 페이지를 런타임에 연결 디스플레이 모드를 전환 하 고 사용자 지정 컨트롤 중 하나에서 연결 동사를 클릭 하는 경우는 `<asp:connectionszone>` 요소가 자동으로 연결을 만들기 위한 UI를 렌더링 합니다.  
  
 페이지에는 프로그래밍 방식으로 작업을 수행 하는 연결을 만들기 위해 세 번째 방법을 보여 줍니다. 에 `Button1_Click` 메서드는 코드를 생성을 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 공급자 컨트롤과 호출 하 여 해당 연결 지점 세부 정보 검색에 대 한 개체를 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> 메서드. 소비자 컨트롤에 대 한 비슷한 작업을 수행한 호출을 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> 메서드. 마지막으로, 새 만듭니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 호출 하 여 개체를 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 메서드를 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 컨트롤.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Overview/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 첫 번째 연결이 이미 존재 내에서 선언 되어 있어 브라우저에서 웹 페이지를 로드 한 후에 `<StaticConnections>` 요소입니다. 일부 텍스트를 입력 합니다 **ZIP Code 공급자** 제어 하며 소비자 컨트롤에 표시 됩니다. 다음으로 두 개의 연결을 끊습니다. 사용 하는 **표시 모드** 드롭다운 목록 컨트롤에서 페이지 연결 디스플레이 모드를 변경 합니다. 각각에 대 한 동사 메뉴 (제목 표시줄의 아래쪽 화살표로 표시 됨)를 클릭 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 및 각에 **Connect** 옵션. 동사 메뉴에 나타나는 연결 동사 이것이 경우에 페이지 연결 모드에 있습니다. 연결 동사 컨트롤과 연결에서 제공 하는 UI 중 하나를 클릭 합니다 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 컨트롤이 나타납니다. 클릭 합니다 **연결 끊기** 단추 컨트롤 간의 정적 연결을 종료 합니다. 사용 합니다 **디스플레이 모드** 찾아보기 모드로 페이지를 반환 하는 컨트롤입니다. 공급자에서 새 텍스트를 다시 입력 하 고 컨트롤 끊어져 텍스트 시 되지 않습니다 소비자 컨트롤을 업데이트 하려고 합니다.  
  
 연결 디스플레이 모드에 페이지를 다시 전환 하 고 다음으로, 위와 동일한 방법을 사용합니다 컨트롤 중 하나에서 연결 동사를 클릭 합니다. 클릭 합니다 **연결을 만듭니다** 링크를 제공한 UI를 사용 하는 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 컨트롤 간의 연결을 만들기 위해 컨트롤입니다. 이것이 연결을 만들기 위한 두 번째 방법입니다. 연결, 형성 하는 즉시 마지막 문자열 수 입력 (하는 컨트롤에 연결이 끊어진 때문에 표시 하지 못했습니다) 공급자 컨트롤의 연결을 다시 만든 때문에 소비자의 갑자기 나타납니다. 클릭 합니다 **연결 끊기** 단추를 방금 만든 현재 연결을 종료 합니다. 페이지 찾아보기 모드를 반환 합니다. 텍스트 업데이트 되지 않습니다 하 고 컨트롤에 다시 연결을 끊습니다는 보여 주기 위해 공급자에 새 텍스트를 입력 합니다.  
  
 디스플레이 모드를 연결 하려면 페이지를 반환 합니다. 연결 동사를 클릭 하는 대신 클릭 합니다 **WebPart 컨트롤 연결** 단추를 세 번째 연결을 설정할 메서드를 보여 줍니다. 이 방법은 사용 하지 않고도 간단한 단계 하나만으로 프로그래밍 방식으로 컨트롤을 연결 합니다 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 제어 합니다. 연결으로 생성 되는 참고를 공급자에 갑자기 입력 마지막 문자열 소비자 컨트롤에 표시 됩니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionsZone" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
    <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178187(v=vs.100)">웹 파트 연결 개요</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> ASP.NET 파서 웹 페이지의 태그에 대 한 연결을 선언한 경우 인스턴스를 만들 수 있도록 생성자는 공용;이 생성자는 개발자 코드에서 사용할 수 없습니다.  
  
 만들려는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체를 프로그래밍 방식으로 사용 해야 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> 또는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=nameWithType> 에서 제공 하는 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 컨트롤. 이러한 메서드는 연결을 만드는 많은 세부 사항을 처리 하 고 반환 된 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체입니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.%23ctor%2A> 에 대 한 생성자는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 클래스의 값을 설정 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> 및 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> 속성을 `true`입니다. 따라서 새 연결의 기본 상태 (포함 하는 웹 페이지의 태그에 선언 된 것을 의미) 정적 및 공유 (페이지의 모든 사용자에 게 표시 됨). 선언 된 페이지의 태그에 연결 하 여 일반적인 시나리오에서 연결을 추가 하는 경우에 해당 됩니다는 `<asp:webpartconnection>` 요소입니다. 그러나 다른 상황에서 연결을 이러한 속성에 대해 다른 값을 갖게 됩니다. 예를 들어 코드에서 연결 개체를 만들어 프로그래밍 방식으로 연결을 추가 하 고 사용자가 기본 사용자 개인 설정 범위에서 페이지를 보고, 연결으로 만들어집니다는 동적 user(visible only to the specific user) 연결입니다.  
  
> [!NOTE]
>  합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> 하 고 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> 속성은 읽기 전용 및 연결의 특성을 결정 하는 이러한 속성은 내부적으로 설정 됩니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 연결이 생성 하는 방법에 따라 컨트롤 (페이지 태그에서 선언적으로 또는 코드 또는 사용자 인터페이스)를 통해 프로그래밍 방식으로.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="Consumer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Consumer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Consumer As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Consumer { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Consumer : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>연결에서 소비자 컨트롤 역할을 하는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 개체를 가져옵니다.</summary>
        <value>연결에서 소비자 역할을 하는 웹 파트 컨트롤을 나타내는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 웹 파트 연결 데이터를 공유 하는 두 개의 이루어져 있습니다. 컨트롤은 데이터의 공급자 역할 및 다른 컨트롤 수신 하 고 공급자 로부터 데이터를 처리할 소비자로 작동 합니다. 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> 속성에 대 한 참조를 가져옵니다는 <xref:System.Web.UI.WebControls.WebParts.WebPart> 연결 관계에서 소비자 역할을 제어 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 프로그래밍 방식으로 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> 속성입니다.  
  
 코드 예제에는 네 가지 부분이 있습니다.  
  
-   웹 파트를 변경할 수 있게 해 주는 사용자 정의 컨트롤을 페이지 모드를 표시 합니다.  
  
-   소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.  
  
-   모든 컨트롤을 호스트 하 여 코드 예제를 실행 하는 웹 페이지입니다.  
  
-   예제 페이지를 실행 하는 방법 설명 합니다.  
  
 이 코드 예제에 첫 번째 부분은 사용자가 웹 페이지의 디스플레이 모드를 변경할 수 있는 사용자 정의 컨트롤입니다. 에 할당 되는 파일 이름을 지정.ascx 파일에 다음 소스 코드를 저장 합니다 `Src` 특성의는 `Register` 호스팅 웹 페이지의 위쪽에이 사용자 정의 컨트롤에 대 한 지시문을 합니다. 이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 대 한 정보를 참조 [연습: 페이지 파트는 웹에서 디스플레이 모드 변경](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/DisplayModeMenuVB.ascx#6)]  
  
 코드 예제의 두 번째 부분은 두 개의 소스 코드 <xref:System.Web.UI.WebControls.WebParts.WebPart> 소비자 및 공급자를 연결 및 연결 지점에 사용 되는 인터페이스에 대 한 역할을 하는 컨트롤입니다. 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제에서는 동적 컴파일을 사용 합니다. 컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Consumer#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/ZipCodeComponent.vb#2)]  
  
 코드 예제에서는 세 번째 부분은 컨트롤을 호스트 하 고 사용 방법을 설명 하는 웹 페이지에 대 한 코드는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> 속성입니다. 페이지의 위쪽에는 `Register` 사용자 정의 컨트롤 및 사용자 지정 컨트롤에 대 한 지시문입니다. 이 예에서는 동적 컴파일 사용 하므로 `Register` 소스 파일에 대 한 지시문 어셈블리 이름을 참조 하지 않아도; 여기에 임의의 태그 접두사 및 네임 스페이스는 컨트롤입니다. 에 `Button2_Click` 코드 메서드를 통해 연결 개체에 액세스 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 컨트롤과 소비자 컨트롤에 대 한 참조를 가져옵니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Consumer#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Consumer/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 사용 하 여 브라우저에서 페이지를 로드 한 후에 **디스플레이 모드** 드롭다운 목록 컨트롤을 페이지 연결 모드를 전환 합니다. 동사 메뉴 (제목 표시줄의 아래쪽 화살표로 표시 됨) 중 하나를 클릭 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤과 연결 동사를 클릭 합니다. 사용 합니다 **WebPart 컨트롤 연결** 단추 또는 제공 된 연결 사용자 인터페이스 (UI)를 두 컨트롤 간의 연결을 만듭니다. 클릭 합니다 **소비자 정보를 표시** 단추를 보여 주는 코드를 실행 하는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" /> 속성의 길이가 0인 경우</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerConnectionPoint As ConsumerConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ ConsumerConnectionPoint { System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>연결에서 소비자 역할을 하는 컨트롤의 연결 지점으로 사용되는 개체를 가져옵니다.</summary>
        <value>연결에서 소비자 컨트롤과 관련된 <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 연결을 만드는 데 필요한 단계 중 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤을 각 컨트롤에 대 한 연결점을 만드는 것입니다. 소비자 연결 지점의 소비자 역할을 하는 컨트롤에 연결 하는 방법에 대 한 정보를 포함 하는 개체입니다. 소비자의 소스 코드에서 메서드 중으로 식별 되어야 합니다는 `ConnectionConsumer` 특성입니다. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 소비자 컨트롤과 연결 된 개체의 메서드 및 메서드를 사용 하 여 사용자 인터페이스 (UI)에 대 한 표시 이름에 대 한 ID를 포함 하 여 특성에 대 한 세부 정보를 포함 하 고 어떤 유형의 인터페이스 메서드를 검색할 수 있습니다. 이 소비자에 대 한 정보이 집합을 인식할 수 있는 인터페이스의 형식과 연결을 형성 하는 것에 대 한 해당 메서드는 전체적으로 소비자 연결 지점의 형성 합니다.  
  
 기본적으로 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 개체가 하나만 연결할 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 번 개체입니다. 소비자에는 가능한 소비자 연결 지점으로 식별 하는 여러 메서드가 있을 수 있지만 소비자 (따라서만 활성화할 수는 소비자 연결 지점 중 하나)만 소비자로 서 이상의 연결에 참여할 수 있습니다 번입니다. 반면에 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개수에 관계 없이 연결할 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 개체입니다. 이 기본 동작을 재정의 하 여 변경할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A> 속성에는 <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> 특성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 프로그래밍 방식으로 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> 속성입니다.  
  
 예제에는 네 가지 부분이 있습니다.  
  
-   웹 파트를 변경할 수 있게 해 주는 사용자 정의 컨트롤을 페이지 모드를 표시 합니다.  
  
-   소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.  
  
-   모든 컨트롤을 호스트 하 여 코드 예제를 실행 하는 웹 페이지입니다.  
  
-   예제 페이지를 실행 하는 방법 설명 합니다.  
  
 이 코드 예제에 첫 번째 부분은 사용자가 웹 페이지의 디스플레이 모드를 변경할 수 있는 사용자 정의 컨트롤입니다. 에 할당 되는 파일 이름을 지정.ascx 파일에 다음 소스 코드를 저장 합니다 `Src` 특성의는 `Register` 호스팅 웹 페이지의 위쪽에이 사용자 정의 컨트롤에 대 한 지시문을 합니다. 이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 대 한 정보를 참조 [연습: 페이지 파트는 웹에서 디스플레이 모드 변경](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 코드 예제의 두 번째 부분은 두 개의 소스 코드 <xref:System.Web.UI.WebControls.WebParts.WebPart> 소비자 및 공급자를 연결 및 연결 지점에 사용 되는 인터페이스에 대 한 역할을 하는 컨트롤입니다. 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제에서는 동적 컴파일을 사용 합니다. 컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 코드 예제에서는 세 번째 부분은 컨트롤을 호스트 하 고 사용 방법을 설명 하는 웹 페이지에 대 한 코드는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> 속성입니다. 에 `Button1_Click` 메서드를 연결 하는 데 필요한 모든 개체는 생성을 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 개체입니다. 이러한 개체 모두에 전달 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 메서드 연결을 만듭니다. 에 `Button2_Click` 메서드를 코드에 액세스 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> 지점 일부 세부 정보를 연결의 속성을 표시 합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 사용 하 여 브라우저에서 페이지를 로드 한 후에 **디스플레이 모드** 드롭다운 목록 컨트롤을 페이지 연결 모드를 전환 합니다. 동사 메뉴 (제목 표시줄의 아래쪽 화살표로 표시 됨) 중 하나를 클릭 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤과 연결 동사를 클릭 합니다. 사용 합니다 **WebPart 컨트롤 연결** 단추 또는 제공된 된 두 컨트롤 간의 연결을 만드는 UI 연결 합니다. 클릭 합니다 **ConnectionPoint 세부 정보** 단추를 보여 주는 코드를 실행 하는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerConnectionPointID">
      <MemberSignature Language="C#" Value="public string ConsumerConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>연결에서 소비자 연결 지점 역할을 하는 개체의 ID를 참조하는 속성 값을 가져오거나 설정합니다.</summary>
        <value>소비자 연결 지점의 ID가 들어 있는 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 웹 페이지의 태그에 선언 된 정적 연결의 경우 개발자는 소비자 연결 지점에 사용할 연결 값을 할당 하 여 지정할 수는 `ConsumerConnectionPointID` 특성을 `<asp:webpartconnection>` 요소입니다. 특성에 값이 할당 되지 않은 경우는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> 속성 값이 사용 됩니다.  
  
 동적 (프로그래밍 방식으로) 연결을 만들 때 일반적으로 설정 하지 않아야의 값을 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> 속성입니다. 간단히 호출할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 제어, 소비자와 소비자 연결 지점 (다른 필요한 매개 변수와 함께), 개체를 전달 및 해당 메서드에서 소비자의 연결에 사용할 올바른 ID 확인 지점입니다. 마찬가지로, 연결을 끊으면 호출할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> 을 지정할 필요 없이 메서드를 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> 속성 값입니다.  
  
> [!NOTE]
>  지정 하는 경우에 소비자 연결 지점의 ID를 확인할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPart> 또는 소비자로 서 다른 서버 컨트롤입니다. 공급자 컨트롤 또는 변환기를 제공 하는 인터페이스의 인스턴스를 검색 하는 소비자에서 메서드를 식별 해야 합니다. 사용 하 여 표시 된 메서드를 식별 하는 `ConnectionConsumer` 코드 특성입니다. 이 특성을 추가 하는 경우 소비자에 대 한 ID로 사용 되는 선택적 문자열 값 매개 변수를 추가할 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 개체입니다. 해당 값의 값이 됩니다 선택적 ID 매개 변수 값을 제공 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> 연결에 대 한 속성입니다. ID 값을 지정 하지 않으면 경우는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> 속성 값이 사용 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에는 선언적 및 프로그래밍 방식의 사용 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> 속성입니다.  
  
 예제에는 네 가지 부분이 있습니다.  
  
-   웹 파트를 변경할 수 있게 해 주는 사용자 정의 컨트롤을 페이지 모드를 표시 합니다.  
  
-   소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.  
  
-   모든 컨트롤을 호스트 하 여 코드 예제를 실행 하는 웹 페이지입니다.  
  
-   예제 페이지를 실행 하는 방법 설명 합니다.  
  
 이 코드 예제에 첫 번째 부분은 사용자가 웹 페이지의 디스플레이 모드를 변경할 수 있는 사용자 정의 컨트롤입니다. 에 할당 되는 파일 이름을 지정.ascx 파일에 다음 소스 코드를 저장 합니다 `Src` 특성의는 `Register` 호스팅 웹 페이지의 위쪽에이 사용자 정의 컨트롤에 대 한 지시문을 합니다. 이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 대 한 정보를 참조 [연습: 페이지 파트는 웹에서 디스플레이 모드 변경](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 코드 예제의 두 번째 부분은 인터페이스 및 소비자 및 공급자 컨트롤에 대 한 소스 코드입니다. 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제에서는 동적 컴파일을 사용 합니다. 컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 코드 예제에서는 세 번째 부분에는 웹 페이지입니다. 연결 페이지 태그에서 선언 되를 사용 하는 `<StaticConnections>` 및 `<asp:WebPartsConnection>` 요소입니다. 연결 선언 포함 필수 `ConsumerConnectionPointID` 특성입니다. 에 대 한 연결 만들기에 대 한 두 번째 방법은 나타납니다는 `Button1_Click` 코드 소비자 컨트롤에 정의 된 연결 지점을 사용 하 여 새 연결을 만드는 메서드. 그런 다음 합니다 `Button2_Click` 메서드를 코드에 액세스 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> 속성입니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 브라우저에서 페이지를 로드 한 후 페이지에 선언 된 정적 연결으로 인해 연결이 이미 있습니다. 공급자 컨트롤에서 일부 텍스트를 입력 하 고 연결으로 인해 소비자에서 표시 됩니다. 다음으로, 컨트롤을 연결을 끊습니다. 사용 하는 **디스플레이 모드** 드롭다운 목록 컨트롤에서 페이지 연결 모드를 전환 합니다. 동사 메뉴 (제목 표시줄의 아래쪽 화살표로 표시 됨) 중 하나를 클릭 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤과 연결 동사를 클릭 합니다. 클릭 합니다 **연결 끊기** 단추입니다. 사용 하 여는 **WebPart 컨트롤 연결** 단추 두 컨트롤 간의 연결을 다시 만듭니다. 클릭 합니다 **ConnectionPoint 세부 정보** 에 액세스 하는 코드를 실행 하는 단추는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> 속성 값입니다. 값은 컨트롤 아래에 레이블을에 기록 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="ConsumerID">
      <MemberSignature Language="C#" Value="public string ConsumerID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsumerID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConsumerID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsumerID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>연결에서 소비자 역할을 하는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤의 ID를 참조하는 속성 값을 가져오거나 설정합니다.</summary>
        <value>연결에서 소비자 역할을 하는 컨트롤의 ID가 들어 있는 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> 간의 연결을 만들 때 속성 값은 필수 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤입니다. 값은 속성에 할당 되지 않은, 경우 예외가 발생 시기를 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 제어 연결을 활성화 하려고 시도 합니다.  
  
   
  
## Examples  
 다음 코드 예제에는 선언적 및 프로그래밍 방식의 사용 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> 속성입니다.  
  
 예제에는 네 가지 부분이 있습니다.  
  
-   웹 파트를 변경할 수 있게 해 주는 사용자 정의 컨트롤을 페이지 모드를 표시 합니다.  
  
-   소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.  
  
-   모든 컨트롤을 호스트 하 여 코드 예제를 실행 하는 웹 페이지입니다.  
  
-   예제 페이지를 실행 하는 방법 설명 합니다.  
  
 이 코드 예제에 첫 번째 부분은 사용자가 웹 페이지의 디스플레이 모드를 변경할 수 있는 사용자 정의 컨트롤입니다. 에 할당 되는 파일 이름을 지정.ascx 파일에 다음 소스 코드를 저장 합니다 `Src` 특성의는 `Register` 호스팅 웹 페이지의 위쪽에이 사용자 정의 컨트롤에 대 한 지시문을 합니다. 이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 대 한 정보를 참조 [연습: 페이지 파트는 웹에서 디스플레이 모드 변경](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/DisplayModeMenuVB.ascx#6)]  
  
 코드 예제의 두 번째 부분은 인터페이스 및 소비자 및 공급자 컨트롤에 대 한 소스 코드입니다. 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제에서는 동적 컴파일을 사용 합니다. 컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/ZipCodeComponent.vb#2)]  
  
 코드 예제에서는 세 번째 부분에는 웹 페이지입니다. 연결 페이지 태그에서 선언 되를 사용 하는 `<StaticConnections>` 및 `<asp:WebPartsConnection>` 요소입니다. 연결 선언 포함 필수 `ConsumerID` 특성입니다. 에 대 한 연결 만들기에 대 한 두 번째 방법은 나타납니다는 `Button1_Click` 코드 소비자 컨트롤에 정의 된 연결 지점을 사용 하 여 새 연결을 만드는 메서드. 그런 다음 합니다 `Button2_Click` 메서드를 코드의 값에 액세스를 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> 속성에 레이블을 표시 합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ConsumerID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ConsumerID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 브라우저에서 페이지를 로드 한 후 페이지에 선언 된 정적 연결으로 인해 연결이 이미 있습니다. 공급자 컨트롤에서 일부 텍스트를 입력 하 고 연결으로 인해 소비자에서 표시 됩니다. 다음으로, 컨트롤을 연결을 끊습니다. 사용 하는 **디스플레이 모드** 드롭다운 목록 컨트롤에서 페이지 연결 모드를 전환 합니다. 동사 메뉴 (제목 표시줄의 아래쪽 화살표로 표시 됨) 중 하나를 클릭 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤과 연결 동사를 클릭 합니다. 클릭 합니다 **연결 끊기** 단추입니다. 사용 하 여는 **WebPart 컨트롤 연결** 단추 두 컨트롤 간의 연결을 다시 만듭니다. 클릭 합니다 **소비자 세부 정보** 에 액세스 하는 코드를 실행 하는 단추는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> 속성 값입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 개체의 ID를 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />의 ID가 들어 있는 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체에 할당 된 고유 값이 해당 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> 속성입니다. 이 여러 연결을 구별할 수 있는지 확인 하는 것입니다.  
  
 선언 하 여 정적 연결을 만들 경우는 `<asp:webpartconnection>` 웹 페이지에 요소 값을 할당 하지 마십시오는 `ID` 예외가 연결에 대 한 특성 때 throw 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 제어 연결을 활성화 하려고 시도 합니다.  
  
 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 컨트롤에는 새 동적 연결을 만듭니다, 호출을 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> 연결에 대 한 고유 ID를 생성 하는 방법.  
  
   
  
## Examples  
 다음 코드 예제에는 선언적 및 프로그래밍 방식의 사용 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> 속성입니다.  
  
 예제에는 네 가지 부분이 있습니다.  
  
-   웹 파트를 변경할 수 있게 해 주는 사용자 정의 컨트롤을 페이지 모드를 표시 합니다.  
  
-   소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.  
  
-   모든 컨트롤을 호스트 하 여 코드 예제를 실행 하는 웹 페이지입니다.  
  
-   예제 페이지를 실행 하는 방법 설명 합니다.  
  
 이 코드 예제에 첫 번째 부분은 사용자가 웹 페이지의 디스플레이 모드를 변경할 수 있는 사용자 정의 컨트롤입니다. 에 할당 되는 파일 이름을 지정.ascx 파일에 다음 소스 코드를 저장 합니다 `Src` 특성의는 `Register` 호스팅 웹 페이지의 위쪽에이 사용자 정의 컨트롤에 대 한 지시문을 합니다. 이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 대 한 정보를 참조 [연습: 페이지 파트는 웹에서 디스플레이 모드 변경](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/DisplayModeMenuVB.ascx#6)]  
  
 코드 예제의 두 번째 부분은 인터페이스 및 소비자 및 공급자 컨트롤에 대 한 소스 코드입니다. 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제에서는 동적 컴파일을 사용 합니다. 컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_WebPartConnection_ID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/ZipCodeComponent.vb#2)]  
  
 코드 예제에서는 세 번째 부분에는 웹 페이지입니다. 연결 페이지 태그에서 선언 되를 사용 하는 `<StaticConnections>` 및 `<asp:WebPartsConnection>` 요소입니다. 연결 선언 포함 필수 `ID` 특성입니다. 에 대 한 연결 만들기에 대 한 두 번째 방법은 나타납니다는 `Button1_Click` 코드 소비자 컨트롤에 정의 된 연결 지점을 사용 하 여 새 연결을 만드는 메서드. 여기서는 ID 속성이 필요 하지 않습니다, 연결 동적 이므로 및 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 컨트롤 연결 ID를 할당 합니다. 에 `Button2_Click` 메서드를 코드의 값에 액세스를 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> 속성에 레이블을 표시 합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 브라우저에서 페이지를 로드 한 후 페이지에 선언 된 정적 연결으로 인해 연결이 이미 있습니다. 공급자 컨트롤에서 일부 텍스트를 입력 하 고 연결으로 인해 소비자에서 표시 됩니다. 다음으로, 컨트롤을 연결을 끊습니다. 사용 하는 **디스플레이 모드** 드롭다운 목록 컨트롤에서 페이지 연결 모드를 전환 합니다. 동사 메뉴 (제목 표시줄의 아래쪽 화살표로 표시 됨) 중 하나를 클릭 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤과 연결 동사를 클릭 합니다. 클릭 합니다 **연결 끊기** 단추입니다. 사용 하 여는 **WebPart 컨트롤 연결** 단추 두 컨트롤 간의 연결을 다시 만듭니다. 클릭 합니다 **연결 세부 정보** 에 액세스 하는 코드를 실행 하는 단추는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ID%2A> 속성 값입니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 개체가 현재 설정되어 있고 공급자 컨트롤과 소비자 컨트롤 간에 데이터를 교환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>연결이 활성화되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> 속성의 상태를 표시 합니다.는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체입니다. 연결에서 공급자 컨트롤과 소비자 컨트롤은 통신 및 공용 인터페이스를 통해 데이터를 교환할 수 있습니다이 상태의 연결이 면 또는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 개체입니다.  
  
 표준 찾아보기 모드로 설정 된 연결을 포함 하는 렌더링된 된 페이지를 사용자가 볼 때 연결이 (하지 않는 경우 페이지를 로드할 때 일부 충돌 또는 기타 문제로 인해 활성화 하지 못했습니다) 일반적으로 사용 합니다. 페이지 및 컨트롤 수명 주기의 초기 단계에서 속성 값이 `false`합니다. 연결은 직후 활성화는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> 이벤트에는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 컨트롤 발생 합니다. 소비자가 공급자에서 지정된 된 인터페이스의 인스턴스를 검색 한 후 연결 활성화 되는 특히 또는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 개체입니다.  
  
 연결 상황에서 활성 상태 인지 알고 있어야 하는 것이 유용 충돌이 나 페이지에 여러 연결으로 인해 동기화 문제가 발생할 수 있는 영역입니다. 예를 들어는 두 개의 연결 간의 충돌 일종의 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 컨트롤에 충돌 하지 않도록 하는 연결 중 하나를 활성화 하지 않을 옵션입니다.  
  
   
  
## Examples  
 다음 코드 예제에는 사용 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> 속성입니다.  
  
 이 예제는 세 부분으로 구성 합니다.  
  
-   소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.  
  
-   모든 컨트롤을 호스트 하 여 코드 예제를 실행 하는 웹 페이지입니다.  
  
-   예제 페이지를 실행 하는 방법 설명 합니다.  
  
 코드 예제의 첫 번째 부분은 인터페이스 및 소비자 및 공급자 컨트롤에 대 한 소스 코드입니다. 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제에서는 동적 컴파일을 사용 합니다. 컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsActive#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/ZipCodeComponent.vb#2)]  
  
 코드 예제의 두 번째 부분은 웹 페이지입니다. 위쪽에를 `Register` 동적으로 컴파일된 두 개의 소스 코드를 가리키는 지시문 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤입니다. 정적 연결 내에서 선언 된 `<StaticConnections>` 페이지의 요소입니다. 내는 `<script>` 요소는 4 명의 이벤트 처리기입니다. 값을 확인 하는 각 이벤트 처리기를 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> 는 정적 연결의 속성에 메시지를 씁니다는 <xref:System.Web.UI.WebControls.Label> 는 연결이 활성 또는 비활성 페이지 및 컨트롤 수명 주기의 해당 상태에서 인지 여부를 나타내는 컨트롤입니다. 연결 어느 시점에 활성화 되는 방법을 보여 줍니다이 렌더링 되는 활성 상태를 유지 페이지 뒤에  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/CS/wpConnectIsActiveCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsActive#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsActive/VB/wpConnectIsActiveVB.aspx#1)]  
  
 브라우저에서 페이지를 로드 합니다. 정적 연결 이미 만들어지고 연결 페이지 및 컨트롤 수명 주기의 여러 시점에서 활성 했는지 여부를 보여 주는 레이블로 이미 기록 된 메시지입니다. 클릭 합니다 **연결 세부 정보** 연결은 현재 시점에서 아니지만 연결 될 때마다 후 다시 활성화 되 고 단추를 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> 이벤트 및는 여전히 활성 상태인 (남아 있도록) 후 합니다 <xref:System.Web.UI.Control.PreRender> 페이지의 이벤트입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 개체가 모든 사용자에게 표시되는지 아니면 현재 사용자에게만 표시되는지를 나타내는 값을 가져옵니다.</summary>
        <value>연결이 공유되어 있으면 <see langword="true" />고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 개별와 마찬가지로 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤을 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체 공유 또는 사용자 당 인스턴스 수 있습니다. 공유 인스턴스 연결이 웹 페이지의 모든 사용자에 게 표시 사용자별 인스턴스 연결이 특정 사용자 에게만 표시 의미 있음을 의미 합니다.  
  
 일반적으로 페이지에는 연결이 추가 되는 방법은 연결 공유 되는지 여부를 결정 합니다. 연결이 웹 페이지의 태그에 선언 된 경우 연결에서 공유 되 고 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> 속성 값이 `true`합니다. 또한 웹 페이지에 공유 개인 설정 범위 연결이 추가 되 면 연결 공유 됩니다. 일반적으로 사용자를 사용 하는 경우는 `<asp:connectionszone>` 연결이 공유 되지 않은 연결을 페이지에 추가할 사용자 인터페이스 (UI) 사용자 개인 설정 범위에서 이므로 하며 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> 속성 값이 `false`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 프로그래밍 방식으로 사용 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> 속성입니다.  
  
 코드 예제는 5 부:  
  
-   웹 파트를 변경할 수 있게 해 주는 사용자 정의 컨트롤을 페이지 모드를 표시 합니다.  
  
-   소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.  
  
-   모든 컨트롤을 호스트 하 여 코드 예제를 실행 하는 웹 페이지입니다.  
  
-   예제를 실행 하는 데 필요한 Web.config 파일에는 항목입니다.  
  
-   예제 페이지를 실행 하는 방법 설명 합니다.  
  
 이 코드 예제에 첫 번째 부분은 사용자가 웹 페이지의 디스플레이 모드를 변경할 수 있는 사용자 정의 컨트롤입니다. 에 할당 되는 파일 이름을 지정.ascx 파일에 다음 소스 코드를 저장 합니다 `Src` 특성의는 `Register` 호스팅 웹 페이지의 위쪽에이 사용자 정의 컨트롤에 대 한 지시문을 합니다. 이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 대 한 정보를 참조 [연습: 페이지 파트는 웹에서 디스플레이 모드 변경](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/DisplayModeMenuVB.ascx#6)]  
  
 코드 예제의 두 번째 부분은 인터페이스 및 소비자 및 공급자 컨트롤에 대 한 소스 코드입니다. 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제에서는 동적 컴파일을 사용 합니다. 컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsShared#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/ZipCodeComponent.vb#2)]  
  
 코드 예제에서는 세 번째 부분에는 웹 페이지입니다. 에 `Button2_Click` 확인 메서드를는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> 기존 연결의 속성 페이지에서 결과 표시 합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsShared#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsShared/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 네 번째 부분 코드 예제에서는 공유 개인 설정 범위에서 페이지를 편집 하려면 예제를 실행 하는 사용자 계정에 필요한 Web.config 파일에서 항목을입니다. 이 작업이 가능 하도록 해야 항목 내에서 Web.config 파일에는 `<system.web>` 다음과 같은 섹션에 있습니다.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow users="UserAccount"  
             roles="admin"  
             verbs="enterSharedScope"/>  
    </authorization>            
  </personalization>  
</webParts>  
```  
  
 브라우저에서 페이지를 로드 한 후 사용 합니다 **디스플레이 모드** 페이지 연결 디스플레이 모드를 전환 하려면 드롭다운 목록 컨트롤입니다. 클릭는 **WebPart 컨트롤 연결** 단추 연결을 설정할 수 있습니다. 를 클릭 합니다 **연결 세부 정보** 는 연결이 공유 되어 있는지 여부를 표시 하려면 단추입니다. 기본 사용자 개인 설정 범위에 있는 페이지를 사용 하 여 연결을 만든 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> 속성 값은 여야 `false` 연결 합니다.  
  
 중의 동사 메뉴의 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤 (제목 표시줄의 아래쪽 화살표로 표시 됨), 연결 동사를 클릭 합니다. 연결 UI에 표시 되 면 클릭 합니다 **연결 끊기** 단추는 연결을 종료 합니다. 사용 합니다 **디스플레이 모드** 찾아보기 모드로 페이지를 반환 하는 컨트롤입니다.  
  
 에 **디스플레이 모드** 컨트롤을 선택 합니다 **공유** 옵션 페이지를 전환 하려면 개인 설정 범위를 공유 합니다. 연결을 만들고 다시 클릭 하 여 위의 동일한 단계를 수행 합니다 **연결 세부 정보** 는 연결이 공유 되어 있는지 여부를 표시 하려면 단추입니다. 이 경우 값을 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> 속성 `true`합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStatic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStatic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStatic : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> 개체가 웹 페이지의 태그에서 선언되었는지 아니면 프로그래밍 방식으로 만들어졌는지를 나타내는 값을 가져옵니다.</summary>
        <value>연결이 정적이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 웹 파트 컨트롤 간 연결에는 정적 이거나 동적일 수 있습니다. 웹 페이지의 태그에 선언 된 정적 연결을 사용 하는 `<asp:WebPartConnection>` 요소입니다. 동적 연결을 프로그래밍 방식으로 만들거나 정의한 사용자 인터페이스 (UI)를 통해 연결을 만드는 사용자는 <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 제어 합니다.  
  
 정적 연결은 웹 페이지의 모든 사용자에 게 제공 하는 공유 개체입니다. 기본적으로 영구는 또한 이므로 같은 정적 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤을 영구적으로 삭제할 수 없습니다.  
  
> [!NOTE]
>  정적 연결 개체를 영구적으로 삭제할 수 있지만 영구적으로 연결이 끊어질 수 있습니다. 이 경우 연결이 끊어진된 개체는 서버에 있지만 최종 사용자는 페이지에 개체의 존재을 인식 하지 못합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 프로그래밍 방식으로 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> 속성입니다.  
  
 이 코드 예제는 세 부분으로 구성 합니다.  
  
-   소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.  
  
-   웹 페이지 컨트롤을 호스트 및 코드 예제를 실행 합니다.  
  
-   예제 페이지를 실행 하는 방법 설명 합니다.  
  
 코드 예제의 첫 번째 부분은 인터페이스 및 소비자 및 공급자 컨트롤에 대 한 소스 코드입니다. 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제에서는 동적 컴파일을 사용 합니다. 컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/ZipCodeComponent.vb#2)]  
  
 코드 예제의 두 번째 부분은 웹 페이지입니다. 위쪽에를 `Register` 동적으로 컴파일된 두 개의 소스 코드를 가리키는 지시문 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤입니다. 정적 연결 내에서 선언 된 `<StaticConnections>` 페이지의 요소입니다. 합니다 `Button1_Click` 메서드 액세스를 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> 연결 정적 인지 여부를 확인할 속성입니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/CS/wpConnectIsStaticCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_IsStatic#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_IsStatic/VB/wpConnectIsStaticVB.aspx#1)]  
  
 브라우저에서 페이지를 로드 합니다. 정적 연결을 이미 만들어집니다. 공급자 컨트롤에서 일부 텍스트를 입력 하 고 소비자 컨트롤의 텍스트가 표시 됩니다. 클릭 합니다 **연결 세부 정보** 의 값을 표시 하려면 단추를 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Provider As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ Provider { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>웹 파트 연결에서 공급자 역할을 하는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤을 가져옵니다.</summary>
        <value>데이터의 공급자 역할을 하는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 웹 파트 연결의 두 구성 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤-소비자 및 공급자-및 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> 속성 연결에서 공급자 컨트롤에 대 한 참조를 반환 합니다.  
  
 연결 (소비자 컨트롤)에서에 대응와 같은 공급자 컨트롤은 연결을 설정 해야 합니다. 프로그래밍 방식으로 또는 페이지 지 속성 형식을 선언 하 여 연결을 만들 수 있는지 여부를 연결에 대 한 공급자 역할을 하는 컨트롤을 지정 해야 합니다.  
  
   
  
## Examples  
 다음 코드 예제에는 사용 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> 속성입니다.  
  
 이 코드 예제는 세 부분으로 구성 합니다.  
  
-   소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.  
  
-   웹 페이지 컨트롤을 호스트 및 코드 예제를 실행 합니다.  
  
-   예제 페이지를 실행 하는 방법 설명 합니다.  
  
 코드 예제의 첫 번째 부분은 인터페이스 및 소비자 및 공급자 컨트롤에 대 한 소스 코드입니다. 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제에서는 동적 컴파일을 사용 합니다. 컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_WebPartConnection_Provider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_Provider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/ZipCodeComponent.vb#2)]  
  
 코드 예제의 두 번째 부분은 웹 페이지입니다. 위쪽에를 `Register` 동적으로 컴파일된 두 개의 소스 코드를 가리키는 지시문 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤입니다. 정적 연결 내에서 선언 된 `<StaticConnections>` 페이지의 요소입니다. 되었는지 확인 합니다 `<asp:webpartconnection>` 요소는 `ProviderID` 특성에 할당 된 공급자 컨트롤의 ID입니다. 이 정적 연결에 대 한 공급자를 식별 해야 합니다. 합니다 `Button1_Click` 메서드 액세스를 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> 속성 레이블로 해당 세부 정보 중 일부를 씁니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_Provider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/CS/wpConnectProviderCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_Provider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_Provider/VB/wpConnectProviderVB.aspx#1)]  
  
 브라우저에서 페이지를 로드 합니다. 정적 연결을 이미 만들어집니다. 공급자 컨트롤에서 일부 텍스트를 입력 하 고 소비자 컨트롤의 텍스트가 표시 됩니다. 클릭 합니다 **공급자 세부 정보** 를 통해 액세스 하는 속성 값의 일부를 표시 하려면 단추를 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" /> 속성 값의 길이가 0인 경우</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPoint">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProviderConnectionPoint As ProviderConnectionPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ ProviderConnectionPoint { System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>연결의 공급자 역할을 하는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤의 연결 지점으로 사용되는 개체를 가져옵니다.</summary>
        <value>연결에서 공급자 컨트롤과 관련된 <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 연결을 만드는 데 필요한 단계 중 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤을 각 컨트롤에 대 한 연결점을 만드는 것입니다. 공급자 연결 지점의 공급자 역할을 하는 컨트롤에 연결 하는 방법에 대 한 정보를 포함 하는 개체입니다. 공급자의 소스 코드에서 메서드 중으로 식별 되어야 합니다는 `ConnectionProvider` 특성입니다. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 즉 연결 제어 공급자로 메서드 및 메서드를 사용 하 여 사용자 인터페이스 (UI)에 대 한 표시 이름에 대 한 ID를 포함 하 여 특성에 대 한 세부 정보를 포함 하 고 어떤 유형의 인터페이스 인스턴스 메서드는 소비자에 게 반환할 수 있습니다 컨트롤입니다. 이 공급자에 대 한 정보이 집합을 제공 하는 인터페이스의 형식과 연결을 형성 하는 것에 대 한 해당 메서드는 공급자 연결 지점 전체적으로 형성 합니다.  
  
 기본적으로 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 하나만 연결할 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 번 개체입니다. 소비자에는 가능한 소비자 연결 지점으로 식별 하는 여러 메서드가 있을 수 있지만 소비자 (따라서만 활성화할 수는 소비자 연결 지점 중 하나)만 소비자로 서 이상의 연결에 참여할 수 있습니다 번입니다. 반면에 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개수에 관계 없이 연결할 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 기본적으로는 개체입니다. 예를 들어 우편 번호를 제공 하는 공급자 컨트롤에 우편 번호를 날씨 데이터, 뉴스 등을 기준으로 데이터의 다양 한 종류를 만드는 우편 번호를 사용 하는 여러 소비자 컨트롤 연결할 수 있습니다. 이 기본 동작을 재정의 하 여 변경할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A> 속성에는 <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> 특성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 프로그래밍 방식으로 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> 속성입니다.  
  
 예제에는 네 가지 부분이 있습니다.  
  
-   웹 파트를 변경할 수 있게 해 주는 사용자 정의 컨트롤을 페이지 모드를 표시 합니다.  
  
-   소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.  
  
-   모든 컨트롤을 호스트 하 여 코드 예제를 실행 하는 웹 페이지입니다.  
  
-   예제 페이지를 실행 하는 방법 설명 합니다.  
  
 이 코드 예제에 첫 번째 부분은 사용자가 웹 페이지의 디스플레이 모드를 변경할 수 있는 사용자 정의 컨트롤입니다. 에 할당 되는 파일 이름을 지정.ascx 파일에 다음 소스 코드를 저장 합니다 `Src` 특성의는 `Register` 호스팅 웹 페이지의 위쪽에이 사용자 정의 컨트롤에 대 한 지시문을 합니다. 이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 대 한 정보를 참조 [연습: 페이지 파트는 웹에서 디스플레이 모드 변경](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/DisplayModeMenuVB.ascx#6)]  
  
 코드 예제의 두 번째 부분은 두 개의 소스 코드 <xref:System.Web.UI.WebControls.WebParts.WebPart> 소비자 및 공급자를 연결 및 연결 지점에 사용 되는 인터페이스에 대 한 역할을 하는 컨트롤입니다. 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제에서는 동적 컴파일을 사용 합니다. 컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/ZipCodeComponent.vb#2)]  
  
 코드 예제에서는 세 번째 부분은 컨트롤을 호스트 하 고 사용 방법을 설명 하는 웹 페이지에 대 한 코드는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> 속성입니다. 에 `Button1_Click` 메서드를 연결 하는 데 필요한 모든 개체는 생성을 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체입니다. 호출을 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 제어 합니다. 다양 한 만들어진된 개체를 모두에 전달 되는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 메서드 연결을 만듭니다. 에 `Button2_Click` 메서드를 코드에 액세스 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> 지점 일부 세부 정보를 연결의 속성을 표시 합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPoint/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 사용 하 여 브라우저에서 페이지를 로드 한 후에 **디스플레이 모드** 드롭다운 목록 컨트롤을 페이지 연결 모드를 전환 합니다. 동사 메뉴 (제목 표시줄의 아래쪽 화살표로 표시 됨) 중 하나를 클릭 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤과 연결 동사를 클릭 합니다. 사용 합니다 **WebPart 컨트롤 연결** 단추 또는 제공된 된 두 컨트롤 간의 연결을 만드는 UI 연결 합니다. 클릭 합니다 **ConnectionPoint 세부 정보** 단추를 보여 주는 코드를 실행 하는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderConnectionPointID">
      <MemberSignature Language="C#" Value="public string ProviderConnectionPointID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderConnectionPointID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderConnectionPointID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderConnectionPointID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderConnectionPointID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>연결에서 공급자 연결 지점 역할을 하는 개체의 ID를 참조하는 속성 값을 가져오거나 설정합니다.</summary>
        <value>공급자 연결 지점 개체의 ID가 들어 있는 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 웹 페이지의 태그에 선언 된 정적 연결의 경우 개발자는 공급자 연결 지점에 사용할 연결 값을 할당 하 여 지정할 수는 `ProviderConnectionPointID` 특성을 `<asp:webpartconnection>` 요소입니다. 특성에 값이 할당 되지 않은 경우는 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> 속성 값이 사용 됩니다.  
  
 동적 (프로그래밍 방식으로) 연결을 만들 때 일반적으로 설정 하지 않아야의 값을 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> 속성입니다. 간단히 호출할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 제어, 공급자 및 공급자 연결 지점 (다른 필요한 매개 변수와 함께), 개체를 전달 및 해당 메서드는 공급자의 연결에 사용할 올바른 ID 확인 지점입니다. 마찬가지로, 연결을 끊으면 호출할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> 을 지정할 필요 없이 메서드를 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> 속성 값입니다.  
  
> [!NOTE]
>  지정 하는 경우에 공급자의 연결점의 ID를 확인할 수 있습니다는 <xref:System.Web.UI.WebControls.WebParts.WebPart> 또는 공급자로 기타 서버 컨트롤입니다. 공급자는 소비자에 게 데이터를 포함 하는 인터페이스의 인스턴스를 제공 하는 콜백 메서드를 식별 해야 합니다. 사용 하 여 표시 된 메서드를 식별 하는 `ConnectionProvider` 코드 특성입니다. 이 특성을 추가 하는 경우 공급자의 ID로 사용 되는 선택적 문자열 값 매개 변수를 추가할 수 있습니다 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 개체입니다. 해당 값의 값이 됩니다 선택적 ID 매개 변수 값을 제공 하는 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> 연결에 대 한 속성입니다. ID 값을 지정 하지 않으면 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 컨트롤 개체를 만들 때 기본 ID를 할당 합니다.  
  
   
  
## Examples  
 다음 코드 예제에는 선언적 및 프로그래밍 방식의 사용 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> 속성입니다.  
  
 예제에는 네 가지 부분이 있습니다.  
  
-   웹 파트를 변경할 수 있게 해 주는 사용자 정의 컨트롤을 페이지 모드를 표시 합니다.  
  
-   소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.  
  
-   모든 컨트롤을 호스트 하 여 코드 예제를 실행 하는 웹 페이지입니다.  
  
-   예제 페이지를 실행 하는 방법 설명 합니다.  
  
 이 코드 예제에 첫 번째 부분은 사용자가 웹 페이지의 디스플레이 모드를 변경할 수 있는 사용자 정의 컨트롤입니다. 에 할당 되는 파일 이름을 지정.ascx 파일에 다음 소스 코드를 저장 합니다 `Src` 특성의는 `Register` 호스팅 웹 페이지의 위쪽에이 사용자 정의 컨트롤에 대 한 지시문을 합니다. 이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 대 한 정보를 참조 [연습: 페이지 파트는 웹에서 디스플레이 모드 변경](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/DisplayModeMenuVB.ascx#6)]  
  
 코드 예제의 두 번째 부분은 인터페이스 및 소비자 및 공급자 컨트롤에 대 한 소스 코드입니다. 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제에서는 동적 컴파일을 사용 합니다. 컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/ZipCodeComponent.vb#2)]  
  
 코드 예제에서는 세 번째 부분에는 웹 페이지입니다. 연결 페이지 태그에서 선언 되를 사용 하는 `<StaticConnections>` 및 `<asp:WebPartsConnection>` 요소입니다. 연결 선언 포함 필수 `ProviderConnectionPointID` 특성입니다. 에 대 한 연결 만들기에 대 한 두 번째 방법은 나타납니다는 `Button1_Click` 메서드 코드를 새 연결을 만드는 경우 연결 지점 (및 ID)를 사용 하 여 정의 된 공급자 컨트롤의 합니다. 그런 다음 합니다 `Button2_Click` 메서드를 코드에 액세스 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> 속성입니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderConnectionPointID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 브라우저에서 페이지를 로드 한 후 페이지에 선언 된 정적 연결으로 인해 연결이 이미 있습니다. 공급자 컨트롤에서 일부 텍스트를 입력 하 고 연결으로 인해 소비자에서 표시 됩니다. 다음으로, 컨트롤을 연결을 끊습니다. 사용 하는 **디스플레이 모드** 드롭다운 목록 컨트롤에서 페이지 연결 모드를 전환 합니다. 동사 메뉴 (제목 표시줄의 아래쪽 화살표로 표시 됨) 중 하나를 클릭 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤과 연결 동사를 클릭 합니다. 클릭 합니다 **연결 끊기** 단추입니다. 사용 하 여는 **WebPart 컨트롤 연결** 단추 두 컨트롤 간의 연결을 다시 만듭니다. 클릭 합니다 **ConnectionPoint 세부 정보** 에 액세스 하는 코드를 실행 하는 단추는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> 속성 값입니다. 값은 컨트롤 아래에 레이블을에 기록 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="ProviderID">
      <MemberSignature Language="C#" Value="public string ProviderID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberSignature Language="VB.NET" Value="Public Property ProviderID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProviderID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProviderID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>연결에서 공급자 역할을 하는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> 컨트롤의 ID를 참조하는 속성 값을 가져오거나 설정합니다.</summary>
        <value>공급자 컨트롤의 ID가 들어 있는 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> 간 연결을 만들 때 속성 값은 필수 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤입니다. 값은 속성에 할당 되지 않은, 경우 예외가 발생 시기를 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 제어 연결을 활성화 하려고 시도 합니다.  
  
   
  
## Examples  
 다음 코드 예제에는 선언적 및 프로그래밍 방식의 사용 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> 속성입니다.  
  
 예제에는 네 가지 부분이 있습니다.  
  
-   웹 파트를 변경할 수 있게 해 주는 사용자 정의 컨트롤을 페이지 모드를 표시 합니다.  
  
-   소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.  
  
-   모든 컨트롤을 호스트 하 여 코드 예제를 실행 하는 웹 페이지입니다.  
  
-   예제 페이지를 실행 하는 방법 설명 합니다.  
  
 이 코드 예제에 첫 번째 부분은 사용자가 웹 페이지의 디스플레이 모드를 변경할 수 있는 사용자 정의 컨트롤입니다. 에 할당 되는 파일 이름을 지정.ascx 파일에 다음 소스 코드를 저장 합니다 `Src` 특성의는 `Register` 호스팅 웹 페이지의 위쪽에이 사용자 정의 컨트롤에 대 한 지시문을 합니다. 이 컨트롤의 모드 및 소스 코드에 대 한 설명을 표시 하는 대 한 정보를 참조 [연습: 페이지 파트는 웹에서 디스플레이 모드 변경](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0)합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/DisplayModeMenuVB.ascx#6)]  
  
 코드 예제의 두 번째 부분은 인터페이스 및 소비자 및 공급자 컨트롤에 대 한 소스 코드입니다. 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제에서는 동적 컴파일을 사용 합니다. 컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/ZipCodeComponent.vb#2)]  
  
 코드 예제에서는 세 번째 부분에는 웹 페이지입니다. 연결 페이지 태그에서 선언 되를 사용 하는 `<StaticConnections>` 및 `<asp:WebPartsConnection>` 요소입니다. 연결 선언 포함 필수 `ProviderID` 특성입니다. 에 대 한 연결 만들기에 대 한 두 번째 방법은 나타납니다는 `Button1_Click` 코드 소비자 컨트롤에 정의 된 연결 지점을 사용 하 여 새 연결을 만드는 메서드. 그런 다음 합니다 `Button2_Click` 메서드를 코드의 값에 액세스를 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> 속성에 레이블을 표시 합니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ProviderID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ProviderID/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 브라우저에서 페이지를 로드 한 후 페이지에 선언 된 정적 연결으로 인해 연결이 이미 있습니다. 공급자 컨트롤에서 일부 텍스트를 입력 하 고 연결으로 인해 소비자에서 표시 됩니다. 다음으로, 컨트롤을 연결을 끊습니다. 이렇게 하려면 사용 합니다 **디스플레이 모드** 페이지 연결 모드를 전환 하려면 드롭다운 목록 컨트롤입니다. 동사 메뉴 (제목 표시줄의 아래쪽 화살표로 표시 됨) 중 하나를 클릭 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤과 연결 동사를 클릭 합니다. 클릭 합니다 **연결 끊기** 단추 및 컨트롤의 연결이 해제 됩니다. 다음을 사용 하 여는 **WebPart 컨트롤 연결** 단추 두 컨트롤 간의 연결을 다시 만듭니다. 클릭 합니다 **소비자 세부 정보** 에 액세스 하는 코드를 실행 하는 단추는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> 속성 값입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="webPartConnection.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>상속된 <see cref="M:System.Object.ToString" /> 메서드를 재정의하고 연결 개체의 약식 형식 이름을 반환합니다.</summary>
        <returns><see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />의 정규화되지 않은 약식 형식 이름이 들어 있는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 컨트롤 디자이너가 편의 위해 주로 사용 됩니다. 짧은 형식 이름, 정규화 된 형식 이름 대신 사용 하 여 연결 개체 디자인 뷰에서 표시 하는 방법을 향상 됩니다. 그러나 메서드는 연결 개체의 형식 이름을 확인 하려는 코드의 임의 지점에서 나 호출할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제를 호출 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> 의 약식 형식 이름을 반환 하는 메서드를 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 개체.  
  
 이 코드 예제는 세 부분으로 구성 합니다.  
  
-   소스 코드는 인터페이스 및 두 <xref:System.Web.UI.WebControls.WebParts.WebPart> 역할 공급자와 소비자 연결을 제어 합니다.  
  
-   웹 페이지 컨트롤을 호스트 및 코드 예제를 실행 합니다.  
  
-   예제 페이지를 실행 하는 방법 설명 합니다.  
  
 코드 예제의 첫 번째 부분은 인터페이스 및 소비자 및 공급자 컨트롤에 대 한 소스 코드입니다. 코드 예제를 실행 하려면이 소스 코드를 컴파일해야 합니다. 명시적으로 컴파일할 수 있으며 결과 어셈블리를 웹 사이트의 Bin 폴더 또는 전역 어셈블리 캐시에 넣을 수 있습니다. 또는 컴파일 수 있는 수 동적으로 런타임 시 사이트의 App_Code 폴더에 소스 코드를 넣을 수 있습니다. 이 코드 예제에서는 동적 컴파일을 사용 합니다. 컴파일하는 방법을 보여 주는 연습을 참조 하세요. [연습: 개발 및 사용자 지정을 사용 하 여 웹 서버 컨트롤](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08)합니다.  
  
 [!code-csharp[WebParts_WebPartConnection_ToString#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartConnection_ToString#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/ZipCodeComponent.vb#2)]  
  
 코드 예제의 두 번째 부분은 웹 페이지입니다. 위쪽에를 `Register` 동적으로 컴파일된 두 개의 소스 코드를 가리키는 지시문 <xref:System.Web.UI.WebControls.WebParts.WebPart> 컨트롤입니다. 정적 연결 내에서 선언 된 `<StaticConnections>` 페이지의 요소입니다. 합니다 `Button1_Click` 메서드 호출을 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> 레이블로 연결의 형식 이름을 작성 하는 방법입니다.  
  
 [!code-aspx-csharp[WebParts_WebPartConnection_ToString#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/CS/wpConnectToStringCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartConnection_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartConnection_ToString/VB/wpConnectToStringVB.aspx#1)]  
  
 브라우저에서 페이지를 로드 합니다. 정적 연결을 이미 만들어집니다. 공급자 컨트롤에서 일부 텍스트를 입력 하 고 소비자 컨트롤의 텍스트가 표시 됩니다. 클릭 합니다 **연결 세부 정보** 를 실행 하려면 단추를 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ToString%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Transformer">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformer As WebPartTransformer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformer ^ Transformer { System::Web::UI::WebControls::WebParts::WebPartTransformer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformer : System.Web.UI.WebControls.WebParts.WebPartTransformer" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>웹 파트 연결에서 데이터를 변환하지 않으면 호환되지 않는 두 연결 지점 간에 데이터를 변환하는 데 사용되는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> 개체를 가져옵니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 웹 파트 연결에서 두 가지 연결에서 공급자 컨트롤과 소비자 컨트롤 연결할 수 있습니다. 각각을 통해 직접 연결할 수 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 개체와 두 컨트롤에서 인식 하는 인터페이스 형식입니다. 호환 되지 연결할 수 없습니다를 직접 사용 하 여 또는 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 공급자 로부터 인터페이스 인스턴스는 소비자가 인식할 수 있는 형식으로 변환 하는 개체입니다.  
  
 변환기는 연결의 일부로 필요한 경우는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> 속성에 대 한 참조를 제공 합니다 <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 개체입니다. 내에서 사용자 지정 변환기 (또는 웹 파트 컨트롤 집합을 사용 하 여 제공 하는 변환기 중 하나)에 대 한 태그를 추가 하 여 웹 페이지의 태그에서 선언적으로 연결에 대 한 변환기를 추가할 수 있습니다는 `<asp:WebPartConnection>` 요소입니다. 추가할 수도 있습니다 변환기를 프로그래밍 방식으로 코드에서 해당 인스턴스를 만들고 호출을 <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> 메서드는 <xref:System.Web.UI.WebControls.WebParts.WebPartManager> 컨트롤 다른 필요한 매개 변수와 함께 변환기 개체를 전달 하 여 연결을 만듭니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="Transformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transformers As WebPartTransformerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ Transformers { System::Web::UI::WebControls::WebParts::WebPartTransformerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transformers : System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartTransformerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>웹 파트 컨트롤 집합에서 내부적으로 사용되는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> 개체의 컬렉션을 가져옵니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" /> 개체를 포함하는 <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> 되지 속성 사용에 대 한 개발자가 있습니다. 개발자는 연결과 관련 된 변환기에 액세스 하려면 항상 사용할지는 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A> 속성입니다.  
  
 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers%2A> 속성은 페이지 개발자가 내 변환기 요소를 선언할 수 있도록 설정 하는 웹 파트 컨트롤에서 내부적으로 사용 합니다 `<asp:webpartconnection>` 웹 페이지의 태그에는 요소입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/e0s9t4ck(v=vs.100)">ASP.NET 웹 파트 컨트롤</related>
      </Docs>
    </Member>
  </Members>
</Type>