<Type Name="BaseValidator" FullName="System.Web.UI.WebControls.BaseValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1b46bc2a24bf0d177c836f516b370dc1c3f4750e" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55350778" /></Metadata><TypeSignature Language="C#" Value="public abstract class BaseValidator : System.Web.UI.WebControls.Label, System.Web.UI.IValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BaseValidator extends System.Web.UI.WebControls.Label implements class System.Web.UI.IValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BaseValidator&#xA;Inherits Label&#xA;Implements IValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class BaseValidator abstract : System::Web::UI::WebControls::Label, System::Web::UI::IValidator" />
  <TypeSignature Language="F#" Value="type BaseValidator = class&#xA;    inherit Label&#xA;    interface IValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Label</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IValidator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ErrorMessage")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.BaseValidatorDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.BaseValidatorDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.BaseValidatorDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>유효성 검사 컨트롤에 대한 추상 기본 클래스로 사용됩니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator> 클래스에는 모든 유효성 검사 컨트롤에 대 한 핵심 구현을 제공 합니다. 유효성 검사 컨트롤과 연결된 된 입력된 컨트롤에서 사용자 입력의 유효성을 검사 하는 데 사용 됩니다. 사용자가 유효성 검사에 실패 하는 값을 입력 유효성 검사 컨트롤이 오류 메시지를 표시 합니다. 입력된 컨트롤에서 유효성 검사 컨트롤은 구분 하므로 입력된 컨트롤을 기준으로 페이지의 아무 곳 이나 오류 메시지를 배치할 수 있습니다. ASP.NET은 특정 유형의 유효성 검사를 수행 하는 여러 유효성 검사 컨트롤을 제공 합니다. 다음 표에 이러한 컨트롤을 보여 줍니다.  
  
|유효성 검사 컨트롤|설명|  
|------------------------|-----------------|  
|<xref:System.Web.UI.WebControls.CompareValidator>|다른 입력된 컨트롤에 입력 된 값에 대해, 상수 값, 또는 적절 한 데이터 형식에 대해 값을 설정 하 여 유효성을 검사 합니다 <xref:System.Web.UI.WebControls.CompareValidator.Operator%2A?displayProperty=nameWithType> 속성을 <xref:System.Web.UI.WebControls.ValidationCompareOperator.DataTypeCheck?displayProperty=nameWithType>입니다.|  
|<xref:System.Web.UI.WebControls.CustomValidator>|사용자가 제공한 사용자 지정 유효성 검사 루틴을 사용 하 여 값의 유효성을 검사 합니다.|  
|<xref:System.Web.UI.WebControls.RangeValidator>|값이 값의 범위 내에 있는지 여부를 확인 합니다.|  
|<xref:System.Web.UI.WebControls.RegularExpressionValidator>|정규식을 사용 하는 값의 유효성을 검사 합니다.|  
|<xref:System.Web.UI.WebControls.RequiredFieldValidator>|필수 필드에는 값을 입력 했는지 확인 합니다.|  
  
 유효성 검사 컨트롤은 항상 서버에 연결된 된 입력된 컨트롤의 유효성을 검사 합니다. 유효성 검사 컨트롤에는 클라이언트에서 유효성 검사를 수행 하려면 스크립트 기반 브라우저 (예: Microsoft Internet Explorer 4.0 이상 버전)를 허용 하는 완전 한 클라이언트 쪽 구현을 수도 있습니다. 클라이언트 쪽 유효성 검사 서버로 전송 되기 전에 사용자 입력을 확인 하 여 유효성 검사 프로세스를 개선 합니다. 이렇게 하면 오류를 서버 쪽 유효성 검사에 필요한 정보의 왕복을 방지 폼을 제출 하기 전에 클라이언트에서 감지할 수 있습니다.  
  
 여러 유효성 검사 컨트롤 다양 한 조건 유효성을 검사 하는 개별 입력된 컨트롤을 사용 하 여 사용할 수 있습니다. 예를 들어, 여러 유효성 검사 컨트롤에 적용할 수 있습니다는 <xref:System.Web.UI.WebControls.TextBox> 제어 합니다. 사용할 수는 <xref:System.Web.UI.WebControls.RangeValidator> 컨트롤에 입력 된 값을 <xref:System.Web.UI.WebControls.TextBox> 가 설정 된 범위 내에 컨트롤 및 <xref:System.Web.UI.WebControls.RequiredFieldValidator> 컨트롤 사용자가 값을 입력 하도록 합니다.  
  
 ASP.NET는 서버에 다시 게시할 수 있는 많은 컨트롤을 제공 합니다. 이러한 컨트롤 중 하나에 있을 때 해당 `CausesValidation` 속성으로 설정 `true`, 컨트롤이 서버에 다시 게시 되 면 유효성 검사가 수행 됩니다. 다음 컨트롤은 서버에 다시 게시할 수 있습니다:  
  
-   <xref:System.Web.UI.WebControls.BulletedList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.Button?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.CheckBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.CheckBoxList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputImage?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ImageButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.LinkButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>  
  
> [!NOTE]
>  이러한 컨트롤 중 일부는 서버에 다시 게시할 경우에만 합니다 `AutoPostBack` 속성이 `true`.  
  
 이러한 각 컨트롤을 `ValidationGroup` 속성,로 설정 하면 컨트롤이 서버에 다시 게시를 트리거하면만 지정된 된 그룹 내에서 유효성 검사 컨트롤의 유효성을 검사 합니다. 유효성 검사 컨트롤 그룹을 설정 하는 <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> 동일한 값으로 각 유효성 검사 컨트롤의 속성입니다.  
  
 입력된 컨트롤에 유효성 검사 컨트롤과 연결 하려면 사용 된 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> 속성입니다. 유효성 검사에 실패할 경우 유효성 검사 컨트롤에 표시할 텍스트를 지정 하려면 사용 된 <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> 속성입니다. 사용 하 여 페이지에서 유효성 검사에 실패 하는 모든 컨트롤의 요약을 표시할 수도 있습니다는 <xref:System.Web.UI.WebControls.ValidationSummary> 제어 합니다. 표시할 텍스트를 지정 하는 <xref:System.Web.UI.WebControls.ValidationSummary> 컨트롤을 사용 하 여는 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> 속성입니다.  
  
> [!NOTE]
>  설정 하는 경우는 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> 속성을 설정 하지 않고 합니다 <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> 속성, 값을 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> 속성 유효성 검사 컨트롤에도 표시 됩니다.  
  
 유효성 검사기 컨트롤을 사용 하는 경우 처리를 수행 하기 전에 서버 쪽 유효성 검사의 결과 항상 확인 해야 합니다. 포스트백 않지만 이벤트 메서드가 호출 되기 전에 페이지 검사기 컨트롤을 호출 후에 해당 결과 집계 하 여 <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> 속성입니다. (유효성 검사기 컨트롤을 사용 하 여 명시적으로 호출할 수도 있습니다는 `Validate` 메서드.) 사용자 고유의 코드에서 확인 해야 하는 <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> 속성에서 반환 `true` 입력을 처리 하기 전에 합니다. 스크립트 기반 브라우저 포스트백을 유효성 검사를 실패도 항상 확인 해야 하는 경우 클라이언트에서 발생 되지 못할 수도 <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> 유효성이 검사 된 데이터를 처리 하기 전에 서버 코드에 있습니다.  
  
 또한 수동으로 유효성 검사를 수행할 수 있습니다. 페이지의 모든 유효성 검사 컨트롤의 유효성을 검사 하려면 사용 된 <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> 메서드. 각 유효성 검사 컨트롤을 사용 하 여 검사할 수는 <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> 컨트롤의 메서드.  
  
> [!NOTE]
>  사용 하는 경우는 <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> 에서 속성을 `Page_Load` 메서드를 명시적으로 호출 해야 합니다 <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> 메서드. 유효성 검사 후 발생 하기 때문에 <xref:System.Web.UI.Control.Load?displayProperty=nameWithType> 이벤트 페이지에 대 한 있지만 이벤트의 처리기 앞를 `Click` 또는 `Command` 이벤트를 <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> 속성이 될 때까지 업데이트 되지 않습니다는 <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> 메서드는 합니다. 에 대 한 이벤트 처리기에서 코드를 배치할 수 있습니다 합니다 `Click` 또는 `Command` 대신 이벤트를 `Page_Load` 메서드.  
  
 모든 웹 서버 컨트롤 유효성 검사 컨트롤을 지원 합니다. 유효성 검사 컨트롤을 사용 하 여 유효성을 검사할 수 있는 표준 컨트롤은:  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.FileUpload?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputFile?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputPassword?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputText?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlSelect?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlTextArea?displayProperty=nameWithType>  
  
> [!NOTE]
>  유효성을 검사 하려면 입력된 컨트롤에 대 한는 <xref:System.Web.UI.ValidationPropertyAttribute?displayProperty=nameWithType> 특성 컨트롤에 적용 되어야 합니다.  
  
> [!NOTE]
>  파생 되는 유효성 검사기 컨트롤을 사용 하는 경우 <xref:System.Web.UI.WebControls.BaseValidator> 안에 <xref:System.Web.UI.UpdatePanel> 유효성 검사기 컨트롤과 연결 된 컨트롤은 동일한 패널에 있어야 합니다. 사용에 대 한 자세한 내용은 합니다 <xref:System.Web.UI.UpdatePanel> 부분 페이지 업데이트에 대 한 제어를 참조 하십시오 [부분 페이지 렌더링 개요](https://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49)합니다.  
  
 유효성 검사에 실패 하는 경우 설정할 수 있습니다 포커스 관련된 입력된 컨트롤에 설정 하 여 합니다 <xref:System.Web.UI.WebControls.BaseValidator.SetFocusOnError%2A> 속성을 `true`입니다.  
  
 인스턴스의 초기 속성 값의 목록을 <xref:System.Web.UI.WebControls.BaseValidator>, 참조는 <xref:System.Web.UI.WebControls.BaseValidator.%23ctor%2A> 생성자입니다.  
  
## <a name="accessibility"></a>액세스 가능성  
 접근성 표준을 준수 하는 태그를 생성할 수 있도록이 컨트롤을 구성 하는 방법에 대 한 정보를 참조 하세요 [Visual Studio 및 ASP.NET의 접근성](https://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13) 및 [ASP.NET 컨트롤과내게필요한옵션](https://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## Examples  
 다음 코드 예제에는 여러 유효성 검사 컨트롤을 사용 하 여 사용자가 유효한 값에 입력을 확인 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.TextBox> 제어 합니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>상속 하는 경우는 <see cref="T:System.Web.UI.WebControls.BaseValidator" /> 클래스에 다음 멤버를 재정의 해야 합니다: <see cref="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />합니다.</para></block>
    <altmember cref="T:System.Web.UI.WebControls.CompareValidator" />
    <altmember cref="T:System.Web.UI.WebControls.CustomValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RangeValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RegularExpressionValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
    <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
    <altmember cref="P:System.Web.UI.WebControls.IButtonControl.CausesValidation" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.Text" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BaseValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; BaseValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.BaseValidator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 직접 호출 되지 않습니다. 이 클래스에서 상속 되는 유효성 검사 컨트롤 기본 속성을 초기화 하는 자체 생성자에서이 생성자를 호출할 수 있습니다.  
  
 다음 표에서 인스턴스에 대 한 초기 속성 값을 보여 줍니다. <xref:System.Web.UI.WebControls.BaseValidator>합니다.  
  
|속성|초기 값|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A>|`true`|  
|<xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A>|<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>|  
|<xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A>|`true`|  
|<xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A>|`false`|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.CompareValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RangeValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RegularExpressionValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RequiredFieldValidator.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="baseValidator.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">클라이언트에서 HTML 콘텐츠를 렌더링하는 데 사용되는 출력 스트림을 나타내는 <see cref="T:System.Web.UI.HtmlTextWriter" />입니다.</param>
        <summary>컨트롤에 대해 렌더링되어야 하는 HTML 특성 및 스타일을 지정된 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender%2A> 메서드 컨트롤의 HTML 태그에서 컨트롤의 특성을 렌더링에 사용 됩니다. 이 메서드는 파생된 클래스에서 적절 한 특성을 삽입할 컨트롤 개발자가 일반적으로 재정의 됩니다 하 고 스타일을 <xref:System.Web.UI.HtmlTextWriter> 출력 스트림에 컨트롤에 대 한 합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>재정의 하는 경우는 <see cref="M:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" /> 메서드, 기본 클래스에 해당 하는 메서드를 호출 해야 합니다. 그렇지 않은 경우 기본 클래스에 포함 된 특성을 렌더링 되지 않습니다.</para></block>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="AssociatedControlID">
      <MemberSignature Language="C#" Value="public override string AssociatedControlID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssociatedControlID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.AssociatedControlID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property AssociatedControlID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ AssociatedControlID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AssociatedControlID : string with get, set" Usage="System.Web.UI.WebControls.BaseValidator.AssociatedControlID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 속성이 지원되지 않는 경우</summary>
        <value>이 속성은 지원되지 않으며 항상 <see cref="T:System.NotSupportedException" />을 throw합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성이 지원되지 않는 경우 이 속성은 기본에 대해서만 지원 <xref:System.Web.UI.WebControls.Label> 클래스입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">이 속성을 설정하려고 시도했습니다.</exception>
        <altmember cref="P:System.Web.UI.WebControls.Label.AssociatedControlID" />
      </Docs>
    </Member>
    <Member MemberName="CheckControlValidationProperty">
      <MemberSignature Language="C#" Value="protected void CheckControlValidationProperty (string name, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckControlValidationProperty(string name, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CheckControlValidationProperty (name As String, propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CheckControlValidationProperty(System::String ^ name, System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.CheckControlValidationProperty : string * string -&gt; unit" Usage="baseValidator.CheckControlValidationProperty (name, propertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">확인할 컨트롤입니다.</param>
        <param name="propertyName">이 메서드를 사용할 때 예외가 throw되면 예외의 소스를 설명하는 추가 텍스트입니다.</param>
        <summary>지정된 컨트롤이 페이지에 있는지 여부와 유효성 검사 속성을 포함하는지 여부를 확인합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty%2A> 메서드는 주로 도우미 메서드는 <xref:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid%2A> 지정된 된 컨트롤의 페이지에 유효성 검사 속성을 포함 여부를 확인 하는 방법. 이 메서드는 결과 보고 하는 값을 반환 하지 않습니다. 대신,이 확인이 실패 하는 경우 예외가 throw 됩니다.  
  
> [!NOTE]
>  이 메서드는 주로 컨트롤 개발자에 의해 사용됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">지정된 컨트롤을 찾을 수 없는 경우  
  
또는 
지정된 컨트롤에 연결된 <see cref="T:System.Web.UI.ValidationPropertyAttribute" /> 특성이 없으므로 유효성 검사 컨트롤을 사용하여 지정된 컨트롤의 유효성을 검사할 수 없는 경우</exception>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected virtual bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ControlPropertiesValid();" />
      <MemberSignature Language="F#" Value="abstract member ControlPropertiesValid : unit -&gt; bool&#xA;override this.ControlPropertiesValid : unit -&gt; bool" Usage="baseValidator.ControlPropertiesValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> 속성에서 지정한 컨트롤이 유효한 컨트롤인지 여부를 확인합니다.</summary>
        <returns><see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />에서 지정한 컨트롤이 유효한 컨트롤이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid%2A> 메서드는 주로 도우미 메서드입니다 합니다 <xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A> 속성을 여부를 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> 속성은 유효한 입력된 컨트롤을 포함 합니다. 유효한 입력된 컨트롤을를 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> 속성 값으로 설정 해야 하며 해당 값에는 유효성 검사를 지 원하는 페이지의 컨트롤 이어야 합니다.  
  
> [!NOTE]
>  이 메서드는 주로 컨트롤 개발자에 의해 사용됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> 속성에 지정된 값이 없는 경우  
  
또는 
<see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> 속성에서 지정한 입력 컨트롤이 페이지에 없는 경우  
  
또는 
<see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> 속성에 의해 지정된 입력 컨트롤에 연결된 <see cref="T:System.Web.UI.ValidationPropertyAttribute" /> 특성이 없으므로 유효성 검사 컨트롤을 사용하여 지정된 컨트롤의 유효성을 검사할 수 없는 경우</exception>
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
      </Docs>
    </Member>
    <Member MemberName="ControlToValidate">
      <MemberSignature Language="C#" Value="public string ControlToValidate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ControlToValidate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlToValidate As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ControlToValidate { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ControlToValidate : string with get, set" Usage="System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.ValidatedControlConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.IDReferenceProperty</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>유효성을 검사할 입력 컨트롤을 가져오거나 설정합니다.</summary>
        <value>유효성을 검사할 입력 컨트롤입니다. 기본값은 <see cref="F:System.String.Empty" />로, 이 속성이 설정되지 않았음을 나타냅니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> 속성 유효성을 검사할 입력된 컨트롤을 지정 합니다. 이 속성을 제외 하 고 모든 유효성 검사 컨트롤에 대 한 입력된 컨트롤의 ID로 설정 해야 합니다 <xref:System.Web.UI.WebControls.CustomValidator> 컨트롤 비워둘 수 있습니다. 유효한 입력된 컨트롤을 지정 하지 않으면 페이지를 렌더링할 때 예외가 throw 됩니다. ID는 동일한 유효성 검사 컨트롤 컨테이너 내의 컨트롤을 참조 해야 합니다. 동일한 페이지 또는 사용자 정의 컨트롤에 있어야 하거나 템플릿 기반 컨트롤의 동일한 템플릿 내에 있어야 합니다.  
  
 유효성을 검사할 수 있는 표준 컨트롤 다음과 같습니다.  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.FileUpload?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputFile?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputPassword?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputText?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlSelect?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlTextArea?displayProperty=nameWithType>  
  
> [!NOTE]
>  유효성을 검사 하려면 입력된 컨트롤에 대 한는 <xref:System.Web.UI.ValidationPropertyAttribute?displayProperty=nameWithType> 특성 컨트롤에 적용 되어야 합니다.  
  
 모든 유효성 검사 컨트롤을 제외 하 고는 <xref:System.Web.UI.WebControls.RequiredFieldValidator> 제어, 입력된 컨트롤에서 지정 된 경우 유효성 검사를 통과 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> 속성 텍스트를 포함 하지. 사용 중인 경우는 <xref:System.Web.UI.WebControls.CustomValidator> 제어, 클라이언트 쪽 및 서버측 유효성 검사 함수 중 하나를 호출 되지 않습니다.  
  
 이 속성은 테마 또는 스타일시트 테마에 의해 설정될 수 없습니다. 자세한 내용은 <xref:System.Web.UI.ThemeableAttribute> 하 고 [ASP.NET 테마 및 스킨](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)합니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> 속성 유효성을 검사할 입력된 컨트롤을 지정 합니다.  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
        <altmember cref="T:System.Web.UI.WebControls.CustomValidator" />
      </Docs>
    </Member>
    <Member MemberName="DetermineRenderUplevel">
      <MemberSignature Language="C#" Value="protected virtual bool DetermineRenderUplevel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DetermineRenderUplevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DetermineRenderUplevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool DetermineRenderUplevel();" />
      <MemberSignature Language="F#" Value="abstract member DetermineRenderUplevel : unit -&gt; bool&#xA;override this.DetermineRenderUplevel : unit -&gt; bool" Usage="baseValidator.DetermineRenderUplevel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>유효성 검사 컨트롤이 클라이언트 쪽 유효성 검사를 수행할 수 있는지 여부를 확인합니다.</summary>
        <returns>유효성 검사 컨트롤이 클라이언트 쪽 유효성 검사를 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel%2A> 메서드는 주로 사용 되는 도우미 함수는 <xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A> 클라이언트의 브라우저에서 클라이언트 스크립트를 지원 하는지 여부를 결정 하는 속성입니다. 반환 하도록이 속성에 대 한 `true`, 다음 조건이 충족 되어야 합니다.  
  
-   브라우저에서 클라이언트 스크립트를 사용 하도록 설정 합니다.  
  
-   <xref:System.Web.HttpBrowserCapabilitiesBase.W3CDomVersion%2A> 의 속성을 <xref:System.Web.HttpBrowserCapabilitiesBase> 에 저장 된 개체는 <xref:System.Web.HttpRequest.Browser%2A?displayProperty=nameWithType> 속성은 1 이상.  
  
-   <xref:System.Web.Configuration.HttpCapabilitiesBase.EcmaScriptVersion%2A> 의 속성을 <xref:System.Web.HttpBrowserCapabilitiesBase> 에 저장 된 개체는 <xref:System.Web.HttpRequest.Browser%2A?displayProperty=nameWithType> 속성이 1.2 이상.  
  
    > [!NOTE]
    >  이 메서드는 주로 컨트롤 개발자에 의해 사용됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ValidatorDisplay Display { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ValidatorDisplay Display" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Display" />
      <MemberSignature Language="VB.NET" Value="Public Property Display As ValidatorDisplay" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ValidatorDisplay Display { System::Web::UI::WebControls::ValidatorDisplay get(); void set(System::Web::UI::WebControls::ValidatorDisplay value); };" />
      <MemberSignature Language="F#" Value="member this.Display : System.Web.UI.WebControls.ValidatorDisplay with get, set" Usage="System.Web.UI.WebControls.BaseValidator.Display" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ValidatorDisplay</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>유효성 검사 컨트롤에서 오류 메시지의 표시 동작을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.ValidatorDisplay" /> 값 중 하나입니다. 기본값은 <see langword="Static" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.BaseValidator.Display%2A> 유효성 검사 컨트롤의 오류 메시지 표시 동작을 지정 하는 속성입니다. 다음 표에서 사용할 수 있는 다양 한 값을 나열 합니다.  
  
|동작 표시|설명|  
|----------------------|-----------------|  
|`None`|유효성 검사 메시지를 인라인으로 표시 되지 않습니다.|  
|`Static`|공간 유효성 검사 메시지에 대 한 페이지 레이아웃에 할당 됩니다.|  
|`Dynamic`|공간 유효성 검사 메시지에 대 한 유효성 검사에 실패 하는 경우 동적 페이지에 추가 됩니다.|  
  
> [!NOTE]
>  표시 동작을 클라이언트 쪽 유효성 검사를 수행 하는 여부에 따라 달라 집니다. 클라이언트 쪽 유효성 검사 활성화 되지 않은 경우 (없거나를 사용 하 여 비활성화 된 브라우저에서 지원 하지 않으므로 합니다 <xref:System.Web.UI.Page.ClientTarget%2A?displayProperty=nameWithType> page 지시문 또는 <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A> 속성), `ValidatorDisplay.Static` 및 `ValidatorDisplay.Dynamic` 동일한 방식으로 동작: 오류 메시지는 경우에만 공간을 표시 됩니다. 표시 되지 않으면 메시지에 대 한 공간을 동적으로 할당 하는 기능 (`ValidatorDisplay.Dynamic`)만 클라이언트 쪽 유효성 검사를 사용 하 여 작동 합니다.  
  
 이 속성은 테마 또는 스타일시트 테마에 의해 설정될 수 없습니다. 자세한 내용은 <xref:System.Web.UI.ThemeableAttribute> 하 고 [ASP.NET 테마 및 스킨](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)합니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.BaseValidator.Display%2A> 유효성 검사 메시지를 웹 페이지에 동적으로 추가 유효성 검사가 실패할 때에 대 한 해당 공간을 지정 하는 속성입니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">지정된 값이 <see cref="T:System.Web.UI.WebControls.ValidatorDisplay" /> 값 중 하나가 아닌 경우</exception>
        <altmember cref="T:System.Web.UI.WebControls.ValidatorDisplay" />
      </Docs>
    </Member>
    <Member MemberName="EnableClientScript">
      <MemberSignature Language="C#" Value="public bool EnableClientScript { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableClientScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableClientScript As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableClientScript { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableClientScript : bool with get, set" Usage="System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>클라이언트 쪽 유효성 검사의 활성화 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>클라이언트 쪽 유효성 검사를 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A> 속성을 통해 클라이언트 쪽 유효성 검사가 사용 되는지 여부를 지정 합니다.  
  
 유효성 검사 컨트롤은 항상 서버에서 유효성 검사를 수행 합니다. 또한 클라이언트에서 유효성 검사를 수행 하려면 DHTML-지원 되는 브라우저 (같은 Microsoft Internet Explorer 4.0 이상)를 허용 하는 전체 클라이언트 측 구현이 있습니다. 클라이언트 쪽 유효성 검사 서버로 전송 되기 전에 사용자 입력을 확인 하 여 유효성 검사 프로세스를 개선 합니다. 이렇게 하면 오류를 서버 쪽 유효성 검사에 필요한 정보의 왕복을 방지 폼을 제출 하기 전에 클라이언트에서 감지할 수 있습니다.  
  
 기본적으로이 값 설정할지 `true`, 브라우저에서 지 원하는 경우 클라이언트 쪽 유효성 검사를 사용 하는 합니다. 컨트롤 단위로 기준 클라이언트 쪽 유효성 검사를 비활성화할 수 있습니다. 이 페이지의 레이아웃을 사용 하 여 문제를 발생 시킵니다 클라이언트에서 동적으로 업데이트할 경우 또는 유효성 검사를 수행 하기 전에 일부 서버 코드를 실행 하려는 경우에 유용 합니다.  
  
 이 속성은 테마 또는 스타일시트 테마에 의해 설정될 수 없습니다. 자세한 내용은 <xref:System.Web.UI.ThemeableAttribute> 하 고 [ASP.NET 테마 및 스킨](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)합니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A> 난수를 서버에 생성 될 수 있도록 클라이언트 쪽 유효성 검사를 사용 하지 않도록 설정 하는 속성입니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public override bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Web.UI.WebControls.BaseValidator.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>유효성 검사 컨트롤의 활성화 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>유효성 검사 컨트롤이 활성화되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> 유효성 검사 컨트롤이 사용 되는지 여부를 지정 하는 속성입니다. 이 속성을 설정 하 여 유효성 검사 컨트롤을 비활성화할 수 있습니다 `false`합니다.  
  
 설정 된 <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType> 또는 <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> 속성을 `false` 유효성 검사가 수행 되지 못합니다. 이 인해 합니다 <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> 속성을 항상으로 평가 `true`합니다.  
  
 합니다 <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> 속성은 약간 다른는 <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType> 속성입니다. 경우는 <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType> 유효성 검사 컨트롤에 대 한 속성 `true`, 하지만 <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> 속성이 `false`, 유효성 검사 컨트롤이 렌더링 되는 여전히 비활성화 된 상태로 있지만 클라이언트 쪽 유효성 검사에 대 한 합니다. 그런 다음 클라이언트에서 유효성 검사 컨트롤이 DHTML 스크립트를 사용 하 여 다시 활성화할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> 속성을 사용 하도록 설정 하거나 서버 쪽 코드를 사용 하 여 웹 페이지에 유효성 검사 컨트롤을 사용 하지 않도록 설정 합니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[Classic BaseValidator.Enabled Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator.Enabled Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator.Enabled Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator.Enabled Example/VB/sourcevb.aspx#1)]  
  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> 속성을 사용 하도록 설정 하거나 클라이언트 쪽 코드를 사용 하 여 웹 페이지에 유효성 검사 컨트롤을 사용 하지 않도록 설정 합니다.  
  
<!-- TODO: review snippet reference  [!CODE [Classic BaseValidator.Enabled Example2#1](Classic BaseValidator.Enabled Example2#1)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorMessage">
      <MemberSignature Language="C#" Value="public string ErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorMessage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Property ErrorMessage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorMessage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ErrorMessage : string with get, set" Usage="System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IValidator.ErrorMessage</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>유효성 검사에 실패할 경우 <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> 컨트롤에 표시되는 오류 메시지의 텍스트를 가져오거나 설정합니다.</summary>
        <value>유효성 검사에 실패할 경우 <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> 컨트롤에 표시되는 오류 메시지입니다. 기본값은 빈 문자열("")로, 이 속성이 설정되어 있지 않음을 나타냅니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하는 경우를 <xref:System.Web.UI.WebControls.ValidationSummary> 컨트롤을 사용 하 여는 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> 표시할 텍스트를 지정 하는 속성을 <xref:System.Web.UI.WebControls.ValidationSummary> 현재 유효성 검사 컨트롤에 대 한 유효성 검사가 실패 하는 경우를 제어 합니다. 유효성 검사 컨트롤에 표시할 텍스트를 지정 하려면 사용 된 <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> 속성입니다.  
  
> [!NOTE]
>  설정 하는 경우는 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> 속성을 설정 하지 않고 합니다 <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> 속성, 값을 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> 속성 유효성 검사 컨트롤에도 표시 됩니다.  
  
 이 속성의 값으로 설정 된 경우 디자이너 도구를 사용 하 여 리소스 파일에 자동으로 저장 될 수 있습니다. 자세한 내용은 <xref:System.ComponentModel.LocalizableAttribute> 하 고 [ASP.NET 세계화 및 지역화](https://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)합니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> 속성에 대 한 다른 메시지를 지정 하는 <xref:System.Web.UI.WebControls.ValidationSummary> 컨트롤 및 <xref:System.Web.UI.WebControls.RequiredFieldValidator> 및 <xref:System.Web.UI.WebControls.CompareValidator> 컨트롤입니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[Classic BaseValidator Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.Text" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected abstract bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool EvaluateIsValid();" />
      <MemberSignature Language="F#" Value="abstract member EvaluateIsValid : unit -&gt; bool" Usage="baseValidator.EvaluateIsValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생된 클래스에서 재정의되면 이 메서드는 입력 컨트롤의 값이 유효한지 여부를 확인하는 코드를 포함합니다.</summary>
        <returns>입력 컨트롤의 값이 유효하면 <see langword="true" />이고, 유효하지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 합니다 <xref:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid%2A> 입력된 컨트롤의 값으로 지정 되었는지 여부를 결정 하는 방법의 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> 속성이 유효 합니다.  
  
> [!NOTE]
>  이 메서드는 주로 컨트롤 개발자에 의해 사용됩니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>입력된 컨트롤의 값이 유효한 지 여부를 반환 하는 파생된 클래스에서이 메서드를 구현 해야 합니다.</para></block>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.Validate" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Web.UI.WebControls.BaseValidator.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Red")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>유효성 검사에 실패할 경우 표시할 메시지의 색을 가져오거나 설정합니다.</summary>
        <value>유효성 검사에 실패할 경우 표시할 메시지의 색을 나타내는 <see cref="T:System.Drawing.Color" />입니다. 기본값은 <see cref="P:System.Drawing.Color.Red" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A> 속성 유효성 검사에 실패할 경우 유효성 검사 컨트롤에 표시 되는 메시지에 대 한 사용자 지정 텍스트 색을 지정 합니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A> 파란색에서 유효성 검사 메시지를 표시 하는 속성입니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[Classic BaseValidator.ForeColor Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator.ForeColor Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic BaseValidator.ForeColor Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator.ForeColor Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="GetControlRenderID">
      <MemberSignature Language="C#" Value="protected string GetControlRenderID (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetControlRenderID(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetControlRenderID(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetControlRenderID (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetControlRenderID(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetControlRenderID : string -&gt; string" Usage="baseValidator.GetControlRenderID name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">클라이언트 ID를 가져올 컨트롤의 이름입니다.</param>
        <summary>지정한 컨트롤의 클라이언트 ID를 가져옵니다.</summary>
        <returns>지정한 컨트롤의 클라이언트 ID를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.UI.WebControls.BaseValidator.GetControlRenderID%2A> 메서드를 지정된 된 컨트롤의 클라이언트 ID를 가져옵니다. 자세한 내용은 <xref:System.Web.UI.Control.ClientID%2A>을 참조하세요.  
  
> [!NOTE]
>  이 메서드는 주로 컨트롤 개발자에 의해 사용됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.ClientID" />
      </Docs>
    </Member>
    <Member MemberName="GetControlValidationValue">
      <MemberSignature Language="C#" Value="protected string GetControlValidationValue (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetControlValidationValue(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetControlValidationValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetControlValidationValue (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetControlValidationValue(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetControlValidationValue : string -&gt; string" Usage="baseValidator.GetControlValidationValue name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">값을 가져올 입력 컨트롤의 이름입니다.</param>
        <summary>지정한 입력 컨트롤과 연결된 값을 가져옵니다.</summary>
        <returns>지정한 입력 컨트롤과 연결된 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.BaseValidator.GetControlValidationValue%2A> 컨트롤 형식에 관계 없이 지정된 된 입력된 컨트롤과 연관 된 값을 가져오는 방법. 값을 가져오려면이 메서드를 사용할 수는 예를 들어를 <xref:System.Web.UI.WebControls.TextBox> 에서 선택한 항목의 값 뿐만 아니라 컨트롤을 <xref:System.Web.UI.WebControls.ListBox> 컨트롤입니다. 지정된 된 컨트롤을 찾을 수 없는 경우 `null` 반환 됩니다.  
  
> [!NOTE]
>  이 메서드는 주로 컨트롤 개발자에 의해 사용됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.GetValidationProperty(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetValidationProperty">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.PropertyDescriptor GetValidationProperty (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.PropertyDescriptor GetValidationProperty(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetValidationProperty(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValidationProperty (component As Object) As PropertyDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::PropertyDescriptor ^ GetValidationProperty(System::Object ^ component);" />
      <MemberSignature Language="F#" Value="static member GetValidationProperty : obj -&gt; System.ComponentModel.PropertyDescriptor" Usage="System.Web.UI.WebControls.BaseValidator.GetValidationProperty component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">유효성 검사 속성을 가져올 컨트롤을 나타내는 <see cref="T:System.Object" />입니다.</param>
        <summary>컨트롤의 유효성 검사 속성(있는 경우)을 확인합니다.</summary>
        <returns>컨트롤의 유효성 검사 속성을 포함하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.GetValidationProperty%2A> 메서드는 지정된 된 입력된 컨트롤의 유효성 검사 속성을 가져오는 도우미 함수입니다.  
  
> [!NOTE]
>  이 메서드는 주로 컨트롤 개발자에 의해 사용됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="IsUnobtrusive">
      <MemberSignature Language="C#" Value="protected bool IsUnobtrusive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnobtrusive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.IsUnobtrusive" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsUnobtrusive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsUnobtrusive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnobtrusive : bool" Usage="System.Web.UI.WebControls.BaseValidator.IsUnobtrusive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤이 비간섭 JavaScript를 생성하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>컨트롤이 비간섭 JavaScript를 생성하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 반환 `false` 경우는 <xref:System.Web.UI.Page.UnobtrusiveValidationMode%2A> 속성 값이 <xref:System.Web.UI.UnobtrusiveValidationMode.None>; 그렇지 않으면이 속성 반환 `true` 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValid { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool with get, set" Usage="System.Web.UI.WebControls.BaseValidator.IsValid" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IValidator.IsValid</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>연결된 입력 컨트롤의 유효성 검사 통과 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>연결된 입력 컨트롤이 유효성 검사를 통과하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> 관련된 입력된 컨트롤 유효성 검사를 통과 하는지 여부를 결정 하는 속성입니다.  
  
> [!CAUTION]
>  이 속성의 기본값 이므로 `true`를 반환 합니다 `true` 유효성 검사를 수행 하기 전에이 속성을 쿼리 하는 경우. 예를 들어이 속성을 사용 하려는 경우 발생할 수 있습니다는 <xref:System.Web.UI.Control.Load?displayProperty=nameWithType> 페이지의 이벤트입니다.  
  
 <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> 속성은 평가 경우에만 <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> 메서드가 호출 됩니다. 호출할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> 각 유효성 검사에 대 한 메서드를 개별적으로 페이지의 컨트롤 또는 사용 하 여 한 번에 모든 호출을 <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> 메서드. 사용 하 여 단추 컨트롤 자신의 `CausesValidation` 속성으로 설정 `true` 호출도는 <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> 메서드.  
  
> [!NOTE]
>  유효성 검사에 수행한 후이 속성의 값을 수동으로 변경 하는 것이 가능 합니다. 이렇게 하면 필요한 경우 유효성 검사 결과 재정의할 수 있습니다.  
  
 합니다 <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> 페이지에 대 한 속성 `true` 경우에만 합니다 <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> 페이지에 있는 각 유효성 검사 컨트롤에 대 한 속성도 설정 됩니다 `true`합니다.  
  
 이 속성은 테마 또는 스타일시트 테마에 의해 설정될 수 없습니다. 자세한 내용은 <xref:System.Web.UI.ThemeableAttribute> 하 고 [ASP.NET 테마 및 스킨](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)합니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> 관련된 입력된 컨트롤 유효성 검사를 통과 하는지 여부를 결정 하는 속성입니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[BaseValidatorIsValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BaseValidatorIsValid/CS/basevalidatorisvalidcs.aspx#1)]
 [!code-aspx-vb[BaseValidatorIsValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BaseValidatorIsValid/VB/basevalidatorisvalidvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="E:System.Web.UI.Control.Load" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.Validate" />
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="P:System.Web.UI.Page.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="baseValidator.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary><see cref="E:System.Web.UI.Control.Init" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 기본 컨트롤의 호출 후 <xref:System.Web.UI.Control.OnInit%2A> 메서드를 설정 합니다 <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A> 속성을 <xref:System.Drawing.Color.Red%2A> 다음 조건이 true 인 경우:  
  
-   <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A> 속성이 이미 설정 되지 않은 합니다.  
  
-   합니다 <xref:System.Web.UI.Control.RenderingCompatibility%2A> 속성은 ASP.NET 버전을 나타냅니다. 이전의 `4.0`합니다. 기본적으로 ASP.NET 4 및 이후 버전의 유효성 검사기 컨트롤 빨간색에서 오류 표시 하지 않습니다. 유효성 검사기 컨트롤의 시각적 모양을 제어 하는 방법에 대 한 정보를 참조 하세요 [ASP.NET 웹 페이지에서 사용자 입력 유효성 검사](https://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)합니다.  
  
 이 메서드는 또한 페이지의 유효성 검사 컨트롤을 등록합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>파생 클래스에서 <see cref="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" /> 메서드를 호출해야 합니다.</para></block>
        <altmember cref="E:System.Web.UI.Control.Init" />
        <altmember cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="baseValidator.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary><see cref="E:System.Web.UI.Control.PreRender" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클라이언트 브라우저를 확인 하 고 렌더링 하기 전에 호환성에 대 한 유효성 검사 컨트롤을 구성 하려면이 메서드 재정의 되었습니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Web.UI.WebControls.BaseValidator.OnPreRender%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>파생 클래스에서 <see cref="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" /> 메서드를 호출해야 합니다.</para></block>
        <altmember cref="E:System.Web.UI.Control.PreRender" />
        <altmember cref="M:System.Web.UI.Control.OnPreRender(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnUnload : EventArgs -&gt; unit" Usage="baseValidator.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary><see cref="E:System.Web.UI.Control.Unload" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 페이지에 유효성 검사 컨트롤 등록을 취소 하려면 재정의 되었습니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Web.UI.WebControls.BaseValidator.OnUnload%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>파생 클래스에서 <see cref="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" />를 재정의하는 경우 등록된 대리자가 이벤트를 받도록 기본 클래스의 <see cref="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" /> 메서드를 호출해야 합니다.</para></block>
        <altmember cref="E:System.Web.UI.Control.Unload" />
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="PropertiesValid">
      <MemberSignature Language="C#" Value="protected bool PropertiesValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PropertiesValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property PropertiesValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool PropertiesValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertiesValid : bool" Usage="System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> 속성에서 지정한 컨트롤이 유효한 컨트롤인지 여부를 나타내는 값을 가져옵니다.</summary>
        <value><see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />에서 지정한 컨트롤이 유효한 컨트롤이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 합니다 <xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A> 속성을 여부를 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> 속성은 유효한 입력된 컨트롤을 포함 합니다. 유효한 입력된 컨트롤을를 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> 페이지의 컨트롤에 속성을 설정 해야 합니다.  
  
> [!NOTE]
>  이 속성은 주로 컨트롤 개발자가 사용합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> 속성에 지정된 값이 없는 경우  
  
또는 
<see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> 속성에서 지정한 입력 컨트롤이 페이지에 없는 경우</exception>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterValidatorCommonScript">
      <MemberSignature Language="C#" Value="protected void RegisterValidatorCommonScript ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RegisterValidatorCommonScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RegisterValidatorCommonScript ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RegisterValidatorCommonScript();" />
      <MemberSignature Language="F#" Value="member this.RegisterValidatorCommonScript : unit -&gt; unit" Usage="baseValidator.RegisterValidatorCommonScript " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>클라이언트 쪽 유효성 검사를 위해 페이지에 코드를 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript%2A> 페이지의 클라이언트 쪽 유효성 검사를 수행 하는 코드를 등록 하는 방법입니다.  
  
> [!NOTE]
>  이 메서드는 주로 컨트롤 개발자에 의해 사용됩니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>이 메서드를 호출 합니다 <see cref="E:System.Web.UI.Control.PreRender" /> 클라이언트 쪽 유효성 검사를 수행 하는 코드를 등록 하는 파생된 클래스의 이벤트 처리기입니다.</para></block>
        <altmember cref="E:System.Web.UI.Control.PreRender" />
      </Docs>
    </Member>
    <Member MemberName="RegisterValidatorDeclaration">
      <MemberSignature Language="C#" Value="protected virtual void RegisterValidatorDeclaration ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RegisterValidatorDeclaration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RegisterValidatorDeclaration ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RegisterValidatorDeclaration();" />
      <MemberSignature Language="F#" Value="abstract member RegisterValidatorDeclaration : unit -&gt; unit&#xA;override this.RegisterValidatorDeclaration : unit -&gt; unit" Usage="baseValidator.RegisterValidatorDeclaration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>배열 이름이 <see langword="Page_Validators" />인 ECMAScript 배열 선언을 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration%2A> 배열 이름을 사용 하는 ECMAScript 배열 선언을 등록 방법 `Page_Validators`.  
  
> [!NOTE]
>  이 메서드는 주로 컨트롤 개발자에 의해 사용됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterArrayDeclaration(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="baseValidator.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">클라이언트에 렌더링할 출력 스트림이 들어 있는 <see cref="T:System.Web.UI.HtmlTextWriter" />입니다.</param>
        <summary>클라이언트에 컨트롤을 표시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.BaseValidator.Render%2A> 메서드를 사용 하는 유효성 검사 컨트롤에 대 한 HTML 태그를 생성 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderUplevel">
      <MemberSignature Language="C#" Value="protected bool RenderUplevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderUplevel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RenderUplevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool RenderUplevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RenderUplevel : bool" Usage="System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>클라이언트의 브라우저에서 "상위 수준" 렌더링을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>브라우저에서 "상위 수준" 렌더링을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A> 클라이언트의 브라우저에서 "상위 수준" 렌더링을 지원 하는지 여부를 결정 하는 속성입니다. "상위 수준" 렌더링을 지 원하는 브라우저에 대 한 ECMAScript 버전 1.2 이상이 및 Microsoft Internet Explorer 문서 개체 모델 (DOM) 버전 4 이상을 지원 해야 합니다.  
  
> [!NOTE]
>  이 속성은 주로 컨트롤 개발자가 사용합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="SetFocusOnError">
      <MemberSignature Language="C#" Value="public bool SetFocusOnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SetFocusOnError" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.SetFocusOnError" />
      <MemberSignature Language="VB.NET" Value="Public Property SetFocusOnError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SetFocusOnError { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SetFocusOnError : bool with get, set" Usage="System.Web.UI.WebControls.BaseValidator.SetFocusOnError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>유효성 검사에 실패할 경우 <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> 속성에서 지정된 컨트롤에 포커스를 설정할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>유효성 검사에 실패할 경우 <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />에서 지정된 컨트롤에 포커스를 설정하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.UI.WebControls.BaseValidator.SetFocusOnError%2A> 포커스가 지정 된 컨트롤이 자동으로 설정 되었는지 여부를 지정 하는 속성을 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> 이 유효성 검사 컨트롤이 못하면 속성입니다. 신속 하 게 적절 한 컨트롤을 업데이트 하려면이 있습니다.  
  
 여러 유효성 검사 컨트롤 실패 하 고이 속성이 `true`에 지정 된 컨트롤을 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> 첫 번째 유효성 검사 컨트롤의 속성을 포커스를 받을.  
  
 이 속성은 테마 또는 스타일시트 테마에 의해 설정될 수 없습니다. 자세한 내용은 <xref:System.Web.UI.ThemeableAttribute> 하 고 [ASP.NET 테마 및 스킨](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Web.UI.WebControls.BaseValidator.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>유효성 검사에 실패할 경우 유효성 검사 컨트롤에 표시되는 텍스트를 가져오거나 설정합니다.</summary>
        <value>유효성 검사에 실패할 경우 유효성 검사 컨트롤에 표시되는 텍스트입니다. 기본값은 빈 문자열("")로, 이 속성이 설정되어 있지 않음을 나타냅니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> 유효성 검사가 실패할 때 유효성 검사 컨트롤에 표시할 텍스트를 지정 하는 속성입니다. 사용 하 여 페이지에서 유효성 검사에 실패 하는 모든 컨트롤의 요약을 표시할 수도 있습니다는 <xref:System.Web.UI.WebControls.ValidationSummary> 제어 합니다. 표시할 텍스트를 지정 하는 <xref:System.Web.UI.WebControls.ValidationSummary> 컨트롤을 사용 하 여는 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> 속성입니다.  
  
> [!NOTE]
>  설정 하는 경우는 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> 속성을 설정 하지 않고 합니다 <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> 속성, 값을 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> 속성 유효성 검사 컨트롤에도 표시 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.Validate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Validate();" />
      <MemberSignature Language="F#" Value="abstract member Validate : unit -&gt; unit&#xA;override this.Validate : unit -&gt; unit" Usage="baseValidator.Validate " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IValidator.Validate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>연결된 입력 컨트롤에 유효성 검사를 수행하고 <see cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" /> 속성을 업데이트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> 관련된 입력된 컨트롤에 유효성 검사를 수행 하는 방법입니다. 이 메서드를 사용 하면 프로그래밍 방식으로 입력된 컨트롤에 유효성 검사를 수행할 수 있습니다. <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> 속성 유효성 검사 결과 사용 하 여 자동으로 업데이트 됩니다.  
  
   
  
## Examples  
 예는 <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> 파생된 클래스에서 사용 하는 방법을 참조는 <xref:System.Web.UI.WebControls.CompareValidator> 클래스 개요입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValidationGroup As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ValidationGroup { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationGroup : string with get, set" Usage="System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 유효성 검사 컨트롤이 속하는 유효성 검사 그룹의 이름을 가져오거나 설정합니다.</summary>
        <value>이 유효성 검사 컨트롤이 속하는 유효성 검사 그룹의 이름입니다. 기본값은 빈 문자열("")로, 이 속성이 설정되어 있지 않음을 나타냅니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET는 서버에 다시 게시할 수 있는 많은 컨트롤을 제공 합니다. 이러한 컨트롤 중 하나에 있을 때 해당 `CausesValidation` 속성이 설정 `true`, 컨트롤이 서버에 다시 게시 하는 경우 유효성 검사가 수행 됩니다. 다음 컨트롤은 서버에 다시 게시할 수 있습니다:  
  
-   <xref:System.Web.UI.WebControls.BulletedList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.Button?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.CheckBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.CheckBoxList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputImage?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ImageButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.LinkButton?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=nameWithType>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=nameWithType>  
  
> [!NOTE]
>  이러한 컨트롤 중 일부는 서버에 다시 게시할 경우에만 합니다 `AutoPostBack` 속성이 `true`.  
  
 이러한 각 컨트롤을 `ValidationGroup` 속성,로 설정 하면 컨트롤이 서버에 다시 게시를 트리거하면만 지정된 된 그룹 내에서 유효성 검사 컨트롤의 유효성을 검사 합니다. 사용 된 <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> 유효성 검사 컨트롤이 유효성 검사 그룹에 할당할 속성입니다. <xref:System.Web.UI.Page> 클래스에 노출도를 <xref:System.Web.UI.Page.GetValidators%2A> 메서드 및 <xref:System.Web.UI.Page.Validate%2A> 허용 하는 메서드를 <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> 입력된 매개 변수입니다.  
  
 이 속성은 테마 또는 스타일시트 테마에 의해 설정될 수 없습니다. 자세한 내용은 <xref:System.Web.UI.ThemeableAttribute> 하 고 [ASP.NET 테마 및 스킨](https://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)합니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> 유효성 검사 컨트롤 그룹에 할당할 속성입니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[BaseValidatorValidationGroup#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BaseValidatorValidationGroup/CS/BaseValidatorValidationGroupcs.aspx#1)]
 [!code-aspx-vb[BaseValidatorValidationGroup#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BaseValidatorValidationGroup/VB/BaseValidatorValidationGroupvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.IButtonControl.CausesValidation" />
        <altmember cref="P:System.Web.UI.WebControls.IButtonControl.ValidationGroup" />
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="M:System.Web.UI.Page.GetValidators(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>