<Type Name="LinqDataSource" FullName="System.Web.UI.WebControls.LinqDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7806dfca4e32e99c40ed18a7e3648eca3e1119d6" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="58875179" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.WebControls.ContextDataSource implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits ContextDataSource&#xA;Implements IDynamicDataSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::WebControls::ContextDataSource, System::Web::DynamicData::IDynamicDataSource" />
  <TypeSignature Language="F#" Value="type LinqDataSource = class&#xA;    inherit ContextDataSource&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.ContextDataSource</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.5">System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ContextTypeName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", System.ComponentModel.ToolboxItemFilterType.Require)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.ico")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>태그 텍스트를 통해 데이터 개체의 데이터를 검색 및 수정하기 위해 ASP.NET 웹 페이지에서 LINQ(통합 언어 쿼리)를 사용할 수 있도록 합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 항목 내용  
  
-   [소개](#introduction)  
  
-   [작업 순서](#order_of_operations)  
  
-   [데이터 정렬](#ordering_data)  
  
-   [데이터 그룹화](#grouping_data)  
  
-   [데이터 수정](#data_modifications)  
  
-   [런타임에 값을 계산합니다.](#evaluating_value_at_run_time)  
  
-   [저장된 프로시저 사용](#working_with_stored_procedures)  
  
-   [선언 구문](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>소개  
 언어 통합 쿼리 (LINQ)는 탐색, 필터 및 프로젝션 작업에서 선언적 방식으로 표현할 수 있도록 하는 쿼리 연산자 집합을 정의 하는 쿼리 구문입니다. NET 기반 프로그래밍 언어입니다. 데이터 개체는 메모리 내 데이터 컬렉션 또는 데이터베이스에서 데이터를 나타내는 개체를 수 있습니다. 검색 하거나 각 작업에 대해 SQL 명령을 작성 하지 않고도 데이터를 수정할 수 있습니다.  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤을 사용 하면 태그 텍스트의 속성을 설정 하 여 ASP.NET 웹 페이지에서 LINQ를 사용할 수 있습니다. <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 데이터 명령을 자동으로 생성할 LINQ to SQL 사용 합니다. LINQ to SQL에 대 한 자세한 내용은 참조 하세요. [LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655)합니다.  
  
 설정 하는 메모리 내 데이터 컬렉션에서 데이터를 검색 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 데이터 컬렉션을 포함 하는 클래스에는 속성입니다. 설정한는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성 데이터 컬렉션을 반환 하는 필드나 속성을 합니다. 예를 들어, 클래스가 있을 `Person` 라는 속성을 포함 하는 `FavoriteCities` 문자열 값의 배열을 반환 합니다. 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성을 `Person` 설정 된 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성을 `FavoriteCities`합니다.  
  
 데이터베이스를 쿼리 하는 경우 데이터베이스와 테이블을 나타내는 엔터티 클래스를 먼저 만들어야 합니다. 사용할 수는 [!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)] 또는 SqlMetal.exe 유틸리티를 이러한 클래스를 생성 합니다. 설정한 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 데이터베이스를 나타내는 클래스에 속성 설정 및는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성을 데이터베이스 테이블을 나타내는 속성입니다.  
  
<a name="order_of_operations"></a>   
## <a name="order-of-operations"></a>작업 순서  
 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 다음 순서 대로 데이터 작업을 적용 합니다.  
  
1.  위치 (데이터 레코드를 반환할 지정).  
  
2.  Order By (정렬)입니다.  
  
3.  Group By (값을 공유 하는 집계 데이터 레코드).  
  
4.  (그룹화 정렬 데이터)에서 그룹을 정렬 합니다.  
  
5.  (필드 또는 반환할 속성을 지정)을 선택 합니다.  
  
6.  (사용자가 선택한 속성에 의해 정렬 데이터 레코드)을 자동으로 정렬 합니다.  
  
7.  자동 페이지 (사용자가 선택 된 데이터 레코드의 하위 집합 검색).  
  
 조건을 추가할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 쿼리에서 반환 되는 데이터 레코드를 필터링 할 속성입니다. 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성을 설정 하지 않으면는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 데이터 개체에서 모든 레코드를 검색 합니다.  
  
<a name="ordering_data"></a>   
## <a name="ordering-data"></a>데이터 정렬  
 사용 된 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성을 기준으로 정렬 하려면 반환된 된 데이터에서 속성의 이름을 지정 합니다.  
  
> [!NOTE]
>  사용 하는 경우를 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 [!INCLUDE[ss2k](~/includes/ss2k-md.md)] 또는 [!INCLUDE[ssEW](~/includes/ssew-md.md)] 하며 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 속성이로 설정 되어 `true`에서 값을 제공 해야 합니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성. 기본적으로 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 속성은 `true`합니다. 값을 할당 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 포함 해야 모든 identity 열은 쿼리에서 반환 되는 속성 목록에서.  
  
<a name="grouping_data"></a>   
## <a name="grouping-data"></a>데이터 그룹화  
 사용 된 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성을 속성은 동일한 값이 있는 데이터 레코드를 통합 하는 데 사용 됩니다. 데이터를 그룹화 할 때 포함할 수 있습니다 `Key` 하 고 `It`, 동적으로 속성에서 만들어진를 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성. `Key` 속성은 속성 또는 데이터를 그룹화 하는 데 사용 된 속성 값을 참조 합니다. 예를 들어 명명 된 속성으로 그룹화 `Category`는 `Key` 속성의 모든 고유 값이 포함 됩니다는 `Category` 속성입니다. `It` 속성은 데이터 그룹의 개별 레코드의 컬렉션을 나타냅니다. 반복할 수 있습니다는 `It` 그룹화 작업에서 통합 된 개별 레코드를 검색할 속성입니다. 예를 들어 명명 된 속성으로 그룹화 `Category`는 `It` 속성의 값을 공유 하는 모든 개별 레코드를 포함 합니다 `Category` 속성입니다.  
  
 사용 된 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 그룹화 된 데이터 정렬에 사용할 속성을 지정 하는 속성입니다. 데이터를 그룹화 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성 그룹화 된 데이터 내에서 개별 레코드를 정렬 되는 방식을 지정 합니다.  
  
 기본적으로 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 데이터 개체에서 모든 속성에 대 한 값을 검색 합니다. 사용할는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 사용 가능한 속성의 하위 집합을 사용 하려는 경우 반환할 속성을 지정 합니다. Where, 후 선택 동작을 적용할 Order By, Group By 작업과 합니다. 따라서 Select 절에는 별칭이 지정 된 이름의 만든 별칭 없으면 다른 절에서 사용할 수 있습니다.  
  
<a name="data_modifications"></a>   
## <a name="data-modifications"></a>데이터 수정  
 사용 하 여 데이터 수정 사용 되는지 여부를 지정할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, 및 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 속성입니다. 데이터를 수정 하기 위한 사용자 인터페이스를 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 데이터 바인딩된 컨트롤을 통해 같은 제공 일반적으로 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다. 설정 외에도 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, 또는 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 하려면 `true`, 다음과 같은 자동 데이터 수정 작업을 사용 하도록 설정 하는 데 필요한:  
  
-   <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성 값을 할당할 수 없습니다.  
  
-   <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성 값을 할당할 수 없습니다.  
  
-   에 할당 되는 클래스를 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성에서 파생 되어야 합니다 <xref:System.Data.Linq.DataContext>합니다.  
  
-   에 할당 되는 속성을 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성에서 파생 되어야 합니다 <xref:System.Data.Linq.Table%601>합니다.  
  
 두 가지 방법으로 데이터 바인딩된 컨트롤에서 표시 되는 속성을 제한할 수 있습니다. 설정 하거나 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성의 속성 하위 집합을 추가 하 여 데이터 바인딩된 컨트롤에 대 한 필드를 정의할 수 <xref:System.Web.UI.WebControls.DataControlField> 컨트롤입니다. 그러나 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성, 즉 자동 업데이트, 삽입 및 삭제 작업을 사용할 수 없습니다. 사용 가능한 속성의 하위 집합을 사용 하는 동안 자동 데이터 수정을 활성화 하려는 경우 설정 하지 마십시오는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성입니다. 대신, 데이터 개체에서 모든 속성을 검색 하 고 데이터 바인딩된 컨트롤을 사용 하 여 표시 되는 작업을 관리 합니다. 사용 하는 경우는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤 또는 <xref:System.Web.UI.WebControls.GridView> 컨트롤을 설정 해야 합니다 <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> 또는 <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> 속성을 `false`입니다. 이렇게 데이터 바인딩된 컨트롤을 편집 하 고 데이터를 삭제 하는 단추가 자동으로 포함 하면 됩니다. 데이터 바인딩된 컨트롤에 표시 되지 않는 모든 값은 뷰 상태에 저장 됩니다. 전달 됩니다 변경 되지 않은 데이터 원본에 데이터 업데이트를 수행 하는 경우.  
  
<a name="evaluating_value_at_run_time"></a>   
## <a name="evaluating-values-at-run-time"></a>런타임에 값을 계산합니다.  
 값 순서 지정에 대해 런타임 시 평가를 필터링 또는 그룹화 값, 매개 변수를 추가할 수 있습니다 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>를 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, 또는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 컬렉션입니다.  
  
 기본값을 지정 하려는 경우에 매개 변수를 추가할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 컬렉션입니다.  
  
 데이터 작업이 실행 되기 전에 값을 수정 하거나 검사 하려는 경우를 처리할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>를 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, 또는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트입니다. 사용자 입력을 기반으로 데이터 클래스의 속성을 설정할 때 발생 하는 유효성 검사 오류를 검사 또는 데이터 작업을 취소 하기 위해 이러한 이벤트를 처리할 수도 있습니다.  
  
 값을 검사 하려면 데이터 작업이 완료 된 후에 처리 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, 또는 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 이벤트입니다.  
  
<a name="working_with_stored_procedures"></a>   
## <a name="working-with-stored-procedures"></a>저장된 프로시저 사용  
 사용할 합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에 대 한 이벤트 처리기를 만들어 저장된 프로시저에서 데이터를 검색 하는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트입니다. 이벤트 처리기를 저장된 프로시저를 나타내는 데이터 컨텍스트 클래스의 메서드를 호출 하는 결과를 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 의 속성은 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> 개체입니다. 메서드에서 반환 되는 형식에 지정 된 형식과 일치 해야 사용 자동 업데이트, 삽입 및 데이터에 대 한 삭제 작업 하려는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성입니다. 데이터 컨텍스트 메서드를 만드는 방법에 대 한 자세한 내용은 참조 하세요. [방법: 저장 프로시저 및 함수에 매핑된 DataContext 메서드를 만듭니다(O/R 디자이너)](https://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>선언 구문  
  
```  
<asp:LinqDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    ContextTypeName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableTheming="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    GroupBy="string"  
    ID="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    SkinID="string"  
    StoreOriginalValuesInViewState="True|False"  
    TableName="string"  
    Visible="True|False"  
    Where="string"  
>  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <WhereParameters />  
</asp:LinqDataSource>  
```  
  
   
  
## Examples  
 다음 예제는 <xref:System.Web.UI.WebControls.LinqDataSource> 라는 엔터티 클래스에서 데이터를 검색 하는 컨트롤 `Products`합니다. 엔터티 클래스를 사용 하 여 생성 되었는지는 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] 또는 SqlMetal.exe 유틸리티입니다. <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성의 값이 있는 레코드만 반환는 `Price` 속성 50 자를 초과 합니다. A <xref:System.Web.UI.WebControls.GridView> 컨트롤이 바인딩되는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 데이터를 표시 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 다음 예제와 <xref:System.Web.UI.WebControls.LinqDataSource> 업데이트, 삭제 및 데이터 원본에 레코드를 삽입할 수 있도록 하는 컨트롤입니다. A <xref:System.Web.UI.WebControls.DetailsView> 컨트롤이 바인딩되는 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 하 고 사용자가 데이터를 수정할 수 있습니다. SQL 명령을 선택, 업데이트, 삭제 또는 레코드를 삽입 하기 위해 필요한 지 확인 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 웹 페이지에서 값을 기반으로 하는 데이터 개체를 설정 하는 이벤트입니다.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 다음 예제와 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤로 두 열을 기준으로 그룹화 하도록 구성 합니다. 합니다 `Key` 두 속성이 있는 개체를 참조 하는 속성 `ProductCategory` 고 `Color`입니다. 가 나타내는 개체 `It` 이름이 바뀐된 (별칭이 지정 됨)으로 `Products`입니다. 이름이 바뀐 `Products` 개체는 그룹의 개별 레코드의 컬렉션을 포함 합니다. 인스턴스마다에서 모든 열이 포함 됩니다는 `Products` 테이블입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 다음 예제에서는 두 개의 <xref:System.Web.UI.WebControls.ListView> 에서 데이터를 표시 하는 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource> 이전 예제에서 컨트롤입니다. 하나의 <xref:System.Web.UI.WebControls.ListView> 그룹화 된 데이터와 다른 컨트롤이 표시 <xref:System.Web.UI.WebControls.ListView> 컨트롤 그룹에 속하는 제품의 개별 이름을 표시 합니다. 중첩 된 데이터 바인딩된 컨트롤의 <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> 속성이 `Products`에 대 한 별칭인는 `It` 개체입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateOrderByClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤이 <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" /> 컬렉션의 값에 따라 Order By 절을 동적으로 만드는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see langword="true" /> 경우는 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤이 Order By 절을 만들면이 고, 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 속성을 `true`의 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 값을 기준으로 하는 Order By 절을 동적으로 만듭니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 컬렉션입니다. <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 첫 번째 매개 변수에서 데이터를 정렬 하 고 또한 추가 각 매개 변수에 대 한 데이터를 정렬 합니다. 매개 변수가 포함 된 `null` 또는 Order By 절에 빈 값이 포함 되지 않습니다.  
  
 설정 하지 않으면 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 로 설정 되어 `true`파서가 Order By 절을 동적으로 만들기 때문에. 합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 하는 경우 예외를 throw 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 로 설정 된 `true` 및 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성 값이 할당 됩니다.  
  
   
  
## Examples  
 다음 예제와 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 로 `true`합니다. 매개 변수가 포함 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 에서 사용자 이름을 속성을 기반으로 데이터를 정렬 하는 컬렉션을 선택는 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateWhereClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤이 <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> 컬렉션에 정의된 값을 기준으로 Where 절을 동적으로 만드는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤이 Where 절을 만들면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 속성을 `true`의 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤의 위치를 동적으로 만듭니다 절에서 매개 변수에서는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 컬렉션입니다. 에 추가한 각 매개 변수를 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 컬렉션에 있어야 해당 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 속성이 쿼리 되는 데이터 개체의 속성과 일치 하는 값으로 설정 합니다. 자동으로 생성 된 위치 절 값에 지정 되었는지 여부를 확인 합니다는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 컬렉션 데이터 개체에 일치 하는 속성의 값과 같은 합니다. 둘 이상의 매개 변수를 제공 하는 경우 매개 변수를 논리적으로 연결 됩니다 `AND` 작업 합니다. 매개 변수가 포함 된 `null` Where에 빈 값이 포함 되지 않습니다 또는 절.  
  
 자동으로 생성 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 절 같음에 대해서만 테스트할 수 있으며, 매개 변수를만 연결할 수는 `AND` 작업 합니다. 설정 하지 않으면 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 속성을 `true` 같은지 테스트 하지 않는 조건을 추가 하려면 있는 경우 또는 매개 변수를 연결 하는 경우는 `OR` 작업 합니다. 설정 하 여 이러한 작업을 수행할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 속성을 `false` 의 자리 표시자를 추가 하 고는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성에서 각 매개 변수에 대해는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 컬렉션입니다. 에 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성을 사용 하 여 각 자리 표시자 이름 앞는 @ 기호.  
  
 설정 하지 않으면 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성 때 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 속성은 `true`파서가 Where를 동적으로 만들기 때문에 절. 합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 하는 경우 예외를 throw 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 속성은 `true` 및 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성 값이 할당 됩니다.  
  
   
  
## Examples  
 다음 예제와 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 로 `true`합니다. A <xref:System.Web.UI.WebControls.GridView> 컨트롤이 바인딩되는 <xref:System.Web.UI.WebControls.LinqDataSource> 쿼리에서 반환 되는 데이터를 표시 하는 컨트롤입니다. <xref:System.Web.UI.WebControls.DropDownList> 컨트롤은 포함 된 세 가지 값으로 채워집니다. 매개 변수가 포함 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 로 설정 하는 이름 사용 하 여 컬렉션 `Category,` 와 일치 하는 데이터 개체의 속성 중 하나입니다. 해당 <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> 의 ID 속성은 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다. <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤이 자동으로 만듭니다.는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 에서 사용자가 선택한 값을 기준으로 레코드를 필터링 할 속성의 <xref:System.Web.UI.WebControls.DropDownList> 컨트롤. 레코드를 반환 하는 쿼리입니다 `Category` 속성에서 사용자가 선택한 값과 일치 합니다 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default7.aspx#7)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default7.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoPage : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤이 런타임에 데이터의 섹션 탐색을 지원하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>사용자가 데이터 통해 페이징할 수 있으면 <see langword="true" />이고, 페이징할 수 없으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 속성을 `true` 에서 페이징을 사용 하도록 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 합니다. 사용자가 데이터를 통해 페이지를 사용 하려면 페이징에 대 한 인터페이스를 제공 하는 데이터 바인딩된 컨트롤에 연결 된 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤입니다. 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 속성이 `true`, <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 데이터 바인딩된 컨트롤에서 한 페이지에 대 한 충분 한 레코드만 검색 합니다. 사용 된 <xref:System.Linq.Enumerable.Skip%2A> 및 <xref:System.Linq.Enumerable.Take%2A> 현재 페이지에 대 한 레코드를 검색 하는 방법입니다.  
  
   
  
## Examples  
 다음 예제와 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 속성이로 설정 `true` 및 <xref:System.Web.UI.WebControls.GridView> 바인딩되는 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤입니다. 합니다 <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> 의 속성을 <xref:System.Web.UI.WebControls.GridView> 로 설정 되어 `true` 데이터를 통해 사용자가 페이지 수 있게 해 주는 인터페이스를 제공 하기.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSort : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤이 런타임에 데이터 정렬을 지원하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>사용자가 데이터를 정렬할 수 있으면 <see langword="true" />이고, 정렬할 수 없으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 데이터 정렬에 대 한 두 가지 방법을 지원 합니다. 사용할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 속성을 런타임에 정렬 사용 설정할 수 있습니다를 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 디자인 타임에 정렬을 정의 하는 속성입니다.  
  
 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 속성을 `true` 정렬을 사용 하는 <xref:System.Web.UI.WebControls.LinqDataSource> 데이터 바인딩된 컨트롤에서 정렬 식을 기반으로 하는 컨트롤입니다. 데이터 바인딩된 컨트롤을 사용자가 런타임에 정렬에 사용할 속성을 선택할 수 있도록 인터페이스를 제공 합니다.  
  
 설정에서 데이터를 반환 하는 순서를 프로그래밍 방식으로 설정할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성이 나 정렬에 사용 되는 속성에는 속성입니다. 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성에 속성 및 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 속성은 `true`에서 식 뒤 데이터 바인딩된 컨트롤에서 정렬 식이 적용 되는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성. 따라서 최종 정렬 데이터를 결정 합니다.  
  
   
  
## Examples  
 다음 예제와 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 속성이로 설정 `true` 및 <xref:System.Web.UI.WebControls.GridView> 바인딩되는 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤입니다. 합니다 <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> 의 속성을 <xref:System.Web.UI.WebControls.GridView> 로 설정 되어 `true` 사용자가 데이터를 정렬할 수 있는 인터페이스를 제공 하기.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ ContextCreated;" />
      <MemberSignature Language="F#" Value="member this.ContextCreated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.ContextCreated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨텍스트 형식 개체의 인스턴스가 만들어진 후에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> 컨텍스트 형식 개체를 검사 하거나 개체를 만드는 동안 발생 하는 예외를 검사 하는 이벤트입니다. 컨텍스트 형식 개체를 검색 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성의는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 이 이벤트와 연결 된 개체입니다. 데이터 작업 중에 발생 하는 예외를 검색 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성입니다.  
  
 컨텍스트 형식 개체 선택, 업데이트, 삽입 및 삭제 작업 중 생성 되 고 요청이 전체에서 다시 사용 됩니다.  
  
 한 시간이 방법으로 이벤트 발생 하지 않습니다. 프로그래밍 방식으로 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 하는 동안 개체에 속성을 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트입니다. 추가 조건을 원래 값 보기 상태에 있거나 개체에 저장할 필요가 없습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성이 구현 하는 <xref:System.Data.Linq.ITable> 인터페이스입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of LinqDataSourceContextEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceContextEventArgs ^&gt; ^ ContextCreating;" />
      <MemberSignature Language="F#" Value="member this.ContextCreating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " Usage="member this.ContextCreating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨텍스트 형식 개체의 인스턴스가 만들어지기 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에 지정 된 형식의 인스턴스를 만듭니다는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성입니다. <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 개체의 인스턴스를 만들 데이터 컨텍스트 개체의 기본 생성자를 호출 합니다. 기본이 아닌 생성자를 사용 해야 하거나에서 지정 된 다른 개체를 만들 필요가 있는지를 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성입니다. 처리 하는 경우에 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> 이벤트 데이터 컨텍스트 개체를 수동으로 만들어야 합니다.  
  
 컨텍스트 형식 개체 선택, 업데이트, 삽입 및 삭제 작업 중에 만들어집니다.  
  
 한 시간이 방법으로 이벤트 발생 하지 않습니다. 프로그래밍 방식으로 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성에 대 한 이벤트 처리기에서 개체를 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트입니다. 추가 조건을 원래 값 보기 상태에 있거나 개체에 저장할 필요가 없습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성이 구현 하는 <xref:System.Data.Linq.ITable> 인터페이스입니다.  
  
   
  
## Examples  
 다음 예에서는 중 기본이 아닌 생성자를 사용 하 여 데이터 컨텍스트 개체를 만드는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> 이벤트입니다. 코드에서 개체를 할당 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> 속성입니다.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of LinqDataSourceDisposeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDisposeEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberSignature Language="F#" Value="member this.ContextDisposing : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " Usage="member this.ContextDisposing : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨텍스트 형식 개체를 삭제하기 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리 하는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> 이벤트 개체를 수동으로 삭제 하거나 개체를 제거 하기 전에 개체에 관련 된 정리를 수행할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public override string ContextTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContextTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextTypeName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>해당 값에 검색할 데이터가 포함된 속성이 들어 있는 형식 이름을 가져오거나 설정합니다.</summary>
        <value>데이터를 검색할 클래스의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 컬렉션을 메모리 내 데이터 또는 데이터베이스에서 데이터를 검색을, 두 속성을 지정 해야 합니다. 첫 번째는 데이터 소스를 나타내는 데이터 컨텍스트 클래스입니다. 두 번째는 데이터가 포함 된 데이터 컨텍스트 클래스의 속성입니다. 설정한 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 데이터 컨텍스트 클래스의 이름으로 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성 데이터를 포함 하는 데이터 컬렉션을 합니다.  
  
 데이터베이스에서 데이터를 검색할 때 설정 하는 예를 들어를 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성을 데이터베이스를 나타내는 클래스의 이름입니다. 설정는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성을 데이터베이스에서 테이블을 나타내는 속성입니다. 데이터베이스에서 클래스를 생성 하려면 사용 된 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] 또는 SqlMetal.exe 유틸리티를 자동으로 이러한 클래스를 생성 합니다.  
  
 배열과 같은 메모리 내 데이터 컬렉션에서 데이터를 검색할 때 설정 된 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성 배열 속성을 포함 하는 클래스의 이름입니다. 설정한는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성을 속성 배열을 가져옵니다.  
  
 자동 업데이트를 사용 하려면 삽입 또는 삭제 작업을 통해 합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 에 할당 된 클래스를 제어 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성에서 파생 되어야 합니다 <xref:System.Data.Linq.DataContext>합니다. 또한 속성에는 할당 된 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성에서 파생 되어야 합니다 <xref:System.Data.Linq.Table%601>합니다. 하지 해야 자동 업데이트를 사용 하도록 설정 하려면 삽입 않거나 삭제 작업을 하는 경우 클래스의 모든 형식의 이름을 할당할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성입니다.  
  
 클래스의 인스턴스에서 데이터를 선택 하는 방법에 대 한 내용은 참조는 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 설정 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성 문자열의 배열을 포함 하는 클래스입니다. 또한 클래스에 속성을 설정 하는 방법을 보여 줍니다 (에서 생성 된 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]) 데이터베이스를 나타내는입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 이라는 클래스 `ExampleDataContext` 나타냅니다 데이터베이스 테이블은 표시 되지 않도록이 예제입니다. 이 예제가 작동 하려면 명명 된 Example.dbml 및 테이블을 끌어 라는 동영상을 LINQ To SQL 클래스를 추가 하 여이 클래스를 만들어야 합니다를 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]입니다. 클래스가 `ExampleDataContext` 라는 속성을 사용 하 여 `Movies` 생성 됩니다.  
  
 다음 예제에서는 라는 클래스를 보여 줍니다 `MovieLibrary` 에서 참조 되는 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryableView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateQueryableView" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateQueryableView () As QueryableDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::QueryableDataSourceView ^ CreateQueryableView();" />
      <MemberSignature Language="F#" Value="override this.CreateQueryableView : unit -&gt; System.Web.UI.WebControls.QueryableDataSourceView" Usage="linqDataSource.CreateQueryableView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.QueryableDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>쿼리 가능한 뷰를 반환합니다.</summary>
        <returns>쿼리 가능한 뷰입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.LinqDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As LinqDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::LinqDataSourceView ^ CreateView();" />
      <MemberSignature Language="F#" Value="abstract member CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView&#xA;override this.CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView" Usage="linqDataSource.CreateView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 컨트롤에 연결된 <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" /> 클래스의 새 인스턴스를 만듭니다.</summary>
        <returns>데이터 바인딩된 컨트롤에 대한 인터페이스로 사용되는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 지정 보기를 제공 하려면 파생된 클래스에서이 메서드를 재정의할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Delete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">삭제할 레코드의 행 키 값입니다.</param>
        <param name="oldValues">데이터 충돌을 감지하기 위해 계산하는 행 값입니다.</param>
        <summary>삭제 작업을 수행합니다.</summary>
        <returns>삭제 작업의 영향을 받는 레코드의 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 호출할 필요가 없습니다를 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> 코드에서 메서드. 사용 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource> 데이터 바인딩된 컨트롤을 데이터 바인딩된 컨트롤을 사용 하 여 컨트롤은 자동으로 호출 하는 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> 사용자가 레코드를 삭제 하는 작업을 수행 하는 메서드. 명시적으로 호출 된 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> 메서드 데이터를 삭제 하기 위한 사용자 고유의 프로세스를 만들려는 경우입니다. 예를 들어, 호출할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> 데이터 바인딩된 컨트롤 외부 이벤트를 기반으로 한 메서드는 레코드를 삭제 하려는 경우.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Deleted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>삭제 작업이 완료되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> 이벤트 삭제 작업에서 예외를 catch 하거나 작업이 완료 된 후 출력 매개 변수를 검사 합니다. 출력 매개 변수를 검색할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 이벤트 처리기에 전달 되는 개체입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 속성은 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 클래스에서 사용되지 않습니다.</summary>
        <value>매개 변수 컬렉션입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of LinqDataSourceDeleteEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDeleteEventArgs ^&gt; ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " Usage="member this.Deleting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>삭제 작업 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 삭제할, 삭제 작업 전에 값을 변경 또는 삭제 작업을 취소 하는 데이터 클래스에서 데이터 유효성 검사 오류를 검사 하는 개체의 유효성을 검사 하는 이벤트입니다. <xref:System.Web.UI.WebControls.LinqDataSource> 제어가 전달 된 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> 개체에 대 한 이벤트 처리기를는 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 이벤트. <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> 개체 데이터가 포함 된 삭제 되 고 삭제 작업을 취소할 수 있습니다. 데이터 클래스 throw 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 예외를 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> 에서 해당 예외를 포함 하는 개체는 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> 속성.  
  
 에 대 한 이벤트 처리기에서 예외가 발생 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 이벤트를 이벤트 처리기에서 예외를 처리 해야 합니다. 예외에 대 한 이벤트 처리기에 전달 되지 것입니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> 이벤트 (통해를 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 의 속성을 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 개체). 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성 뒤에 throw 되는 예외를 포함 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 이벤트입니다.  
  
   
  
## Examples  
 다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 이벤트입니다. 속성에 따라 삭제 작업을 취소 하는 코드는 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> 속성 및 웹 페이지의 값입니다. 예에서 때를 `OnSale` 속성이 `true`, 사용자 선택 해야 합니다는 <xref:System.Web.UI.WebControls.CheckBox> 레코드를 삭제 해야 함을 확인 하는 컨트롤입니다.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableDelete : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤을 통해 데이터 레코드를 삭제할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>자동 삭제 작업을 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 된 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> 속성을 `true` 를 통해 데이터 레코드를 삭제할 수 있도록 하려는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤입니다. 때 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> 됩니다 `true`, <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 데이터를 삭제 하는 명령을 자동으로 만들려면 LINQ to SQL 사용 합니다. 삭제와 같은 레코드를 선택할 수 있는 인터페이스를 포함 해야 합니다는 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다.  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 자동 삭제 작업을 지원 하지 않습니다 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성 또는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성을 설정 합니다. 이런 경우는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤이 삭제 작업을 시도 되 면 예외를 throw 합니다.  
  
   
  
## Examples  
 에서는 다음 예제는 <xref:System.Web.UI.WebControls.LinqDataSource> 있는 컨트롤 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> 로 `true`합니다. <xref:System.Web.UI.WebControls.DetailsView> 컨트롤 데이터를 표시 하 고 사용자가 데이터 레코드를 삭제할 수 있는 단추를 만듭니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableInsert : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤을 통해 데이터 레코드를 삽입할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>자동 삽입 작업을 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 된 <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> 속성을 `true` 를 통해 새 데이터 레코드를 삽입 하는 사용자를 사용 하도록 설정 하려는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤입니다. 때 <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> 됩니다 `true`, <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 데이터를 삽입 하는 명령이 자동으로 만들려면 LINQ to SQL 사용 합니다. 사용자가 같은 새 레코드를 삽입할 수 있는 인터페이스를 포함 해야 합니다는 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다.  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 자동 삽입 작업을 지원 하지 않습니다 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성 또는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성을 설정 합니다. 이런 경우는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 삽입 작업이 시도 되 면 예외를 throw 합니다.  
  
   
  
## Examples  
 에서는 다음 예제는 <xref:System.Web.UI.WebControls.LinqDataSource> 있는 컨트롤 <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> 로 `true`합니다. <xref:System.Web.UI.WebControls.DetailsView> 컨트롤 데이터를 표시 하 고 삽입 모드 사용자 작성 하 고 새 레코드를 저장할 수 있는 컨트롤을 전환 하는 단추를 표시 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="EnableObjectTracking">
      <MemberSignature Language="C#" Value="public bool EnableObjectTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableObjectTracking" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableObjectTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableObjectTracking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableObjectTracking : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 컨텍스트 개체에 대한 변경 내용이 추적되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>데이터 컨텍스트 개체의 변경 내용이 추적될 경우 <see langword="true" />이고, 그렇지 않을 경우 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> 속성은 LINQ To SQL 데이터 컨텍스트 개체에서 데이터를 선택할 때만 사용 됩니다.  
  
 읽기 전용 데이터를 사용 하 여 상호 작용 하는, 하는 경우 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> 속성을 `false` 변경 되었는지 여부를 결정 하는 데이터가 캐시 되지 않기 때문에 성능이 향상 됩니다. 그러나 지연 된 쿼리 실행도 비활성화 됩니다. 이 속성으로 설정 되어 있어야 `true` 지연 된 쿼리 실행을 사용 하려는 경우.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableUpdate : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤을 통해 데이터 레코드를 업데이트할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>자동 업데이트 작업을 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 된 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 속성을 `true` 사용자가 사용 하 여 데이터 레코드를 업데이트할 수 있게 하려는 경우를 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 합니다. 때 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 됩니다 `true`, <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 데이터를 업데이트 하는 명령을 자동으로 만들려면 LINQ to SQL 사용 합니다. 사용자가 같은 레코드를 업데이트할 수 있는 인터페이스를 포함 해야 합니다는 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다.  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 자동 업데이트 작업을 지원 하지 않습니다 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성 또는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성을 설정 합니다. 이런 경우는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤이 업데이트 작업 시도 되 면 예외를 throw 합니다.  
  
   
  
## Examples  
 에서는 다음 예제는 <xref:System.Web.UI.WebControls.LinqDataSource> 있는 컨트롤 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 로 `true`합니다. <xref:System.Web.UI.WebControls.DetailsView> 컨트롤 데이터를 표시 하 고 사용자가 데이터 레코드를 업데이트할 수 있는 단추를 만듭니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="linqDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="viewName">"DefaultView"여야 하는 검색할 보기의 이름입니다.</param>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 개체와 연결된 데이터 원본 뷰를 반환합니다.</summary>
        <returns><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 개체와 연결된 데이터 원본 뷰입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 하나의 데이터 원본 뷰를 지원 합니다. <xref:System.Web.UI.WebControls.LinqDataSourceView> 개체 "defaultview"라는 기본 이름을 가진 합니다. <xref:System.Web.UI.WebControls.LinqDataSourceView> 개체 데이터 소스 컨트롤의 기능을 정의 기본 데이터베이스에서 데이터를 검색 및 정렬, insert, delete 및 update와 같은 작업을 수행 합니다.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><p>viewName은 null(Visual Basic의 경우 Nothing) 또는 "DefaultView" 이외의 값입니다.</p></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">LinqDataSource 웹 서버 컨트롤 개요</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">ASP.NET 데이터 액세스 개요</related>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="linqDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤과 연결된 뷰 개체 목록을 나타내는 이름의 컬렉션을 반환합니다.</summary>
        <returns>"DefaultView"라는 이름을 포함하는 요소 하나가 있는 컬렉션입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤은 명명 된 해당 기본 데이터에 대해 하나의 뷰만 지원 `DefaultView`합니다. `GetViewNames` 메서드는 없으므로이 뷰 이름이 포함 된 하나의 요소만 있는 컬렉션을 반환 합니다.

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">LinqDataSource 웹 서버 컨트롤 개요</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">ASP.NET 데이터 액세스 개요</related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>검색된 데이터를 그룹화하는 데 사용되는 속성을 지정하는 값을 가져오거나 설정합니다.</summary>
        <value>Group By 절을 만드는 데 사용 되는 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성을 속성은 동일한 값이 있는 데이터 레코드 통합 적합 합니다. 예를 들어, 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성을 `Name`를 동일한 쿼리에서 모든 레코드가 `Name` 속성 값을 단일 통합 레코드로 반환 됩니다.  
  
 둘 이상의 속성을 할당할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성의 모든 속성을 포함 하는 `new` 함수와 쉼표를 사용 하 여 각 속성을 구분 합니다. 속성을 기준으로 그룹화 하려면 예를 들어 `Name` 차례로 `Category`로 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성을 `new(Name, Category)`입니다.  
  
 그룹화에 사용 되는 속성의 값 이라는 생성 된 속성을 통해 반환 됩니다 `Key`합니다. 포함 하는 `Key` 속성에는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 그룹화 된 값을 검색 하는 속성입니다. 설정할 수 있습니다는 `Key` 속성을 사용 하 여 별칭을 `As` 있지만 키워드를 필요가 없습니다 별칭을 사용 합니다. 예를 들어, 설정할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 라는 속성으로 속성 `Category`합니다. 통합된 된 값을 검색할 수 있습니다는 `Category` 설정 하 여 속성을 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 `new(Key As ProductCategory)`입니다.  
  
 그룹의 개별 레코드를 포함 하 여 액세스할 수 있습니다 합니다 `It` 속성에는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성입니다. `It` 속성 그룹화 된 속성의 값을 공유 하는 레코드의 컬렉션을 포함 합니다. 반복할 수 있습니다는 `It` 개별 레코드를 검색 하는 속성입니다.  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성은 집계 메서드를 사용 하 여 자주 사용 됩니다. 다음과 같은 집계 메서드를 사용할 수 있습니다.  
  
-   `Count()`  
  
-   `Average(` *열* `)`  
  
-   `Sum(` *열* `)`  
  
-   `Max(` *열* `)`  
  
-   `Min(` *열* `)`  
  
-   `Where(` *조건* `)`  
  
-   `Any()`  
  
-   `All(` *조건* `)`  
  
 자세한 내용은 참조 하세요. [NIB: LinqDataSource 웹 서버 컨트롤 개요](https://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) 고 [방법: 데이터 그룹화 및 집계 LinqDataSource 컨트롤을 사용 하 여](https://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af)입니다.  
  
   
  
## Examples  
 에서는 다음 예제는 <xref:System.Web.UI.WebControls.LinqDataSource> 명명 된 속성에 의해 반환된 된 데이터를 그룹화 하는 컨트롤 `Category`합니다. 공유 값을 반환 하 고 그룹화 된 레코드에 대 한 평균 가격을 계산 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 다음 예제와 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤로 두 열을 기준으로 그룹화 하도록 구성 합니다. 합니다 `Key` 두 속성이 있는 개체를 참조 하는 속성 `ProductCategory` 고 `Color`입니다. 가 나타내는 개체 `It` 이름이 `Products`합니다. 이름이 바뀐 `Products` 개체 그룹화, 개별 레코드의 컬렉션을 포함 하며 각 인스턴스는 Products 테이블에서 모든 열을 포함 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 다음 예제에서는 두 개의 <xref:System.Web.UI.WebControls.ListView> 의 데이터를 표시 하는 것에 대 한 제어를 <xref:System.Web.UI.WebControls.LinqDataSource> 이전 예제에서 제어 합니다. 하나의 <xref:System.Web.UI.WebControls.ListView> 그룹화 된 데이터와 다른 컨트롤이 표시 <xref:System.Web.UI.WebControls.ListView> 컨트롤 그룹에 속하는 제품의 개별 이름을 표시 합니다. 중첩 된 데이터 바인딩된 컨트롤의 <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> 속성이 `Products`에 대 한 별칭인는 `It` 개체입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ GroupByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GroupByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Group By 절을 만드는 데 사용되는 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>Group By 절을 만드는 데 사용 되는 매개 변수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 매개 변수를 사용 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 런타임에 Group By 절을 만들 컬렉션입니다. 일반적으로 사용 하지 것입니다는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 데이터를 그룹화 하는 컬렉션입니다. 대신 사용할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성입니다. 사용 된 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 런타임 시 컬렉션 Group By 절의 경우에 설정 해야 하며 해당 값은 속성 이름이 아닙니다. 사용 예를 들어, 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 여부를 기준으로 데이터를 그룹화 하는 컬렉션을 `LastName` 데이터 레코드의 속성에는 사용자가 제공한 값과 같음.  
  
 속성으로 데이터를 그룹화 하려는 경우 해당 속성을 런타임에 설정할 필요가 없습니다 그룹화 속성을 정의할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성입니다. 예를 들어 데이터베이스 테이블의 값을 반환 하 여 그룹화 `LastName`설정, <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 를 "LastName" 매개 변수 없이 합니다. 속성으로 데이터를 동적으로 그룹화 하려는 경우에 대 한 이벤트 처리기를 만듭니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트 및 사용자 지정을 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 필요에 따라 속성입니다.  
  
 매개 변수에 대해 값으로 속성의 이름을 할당할 수 없습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 컬렉션입니다. 매개 변수를 추가 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 조건을 추가 하려는 경우 컬렉션은 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 런타임에 설정 해야 하는 속성입니다.  
  
 값을 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 컬렉션, 각 매개 변수에 이름을 할당할 추가 하는 다음에서 자리 표시자는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 명명 된 매개 변수는 속성. Group By 절에 사용 하 여 각 매개 변수 이름 앞에 @ 기호입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="member this.Insert : System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Insert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">데이터 소스에 삽입할 행 값입니다.</param>
        <summary>삽입 작업을 수행합니다.</summary>
        <returns>삽입 작업이 적용되는 행의 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 호출할 필요가 없습니다를 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> 코드에서 메서드. 데이터 바인딩된 컨트롤을 자동으로 호출 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> 메서드 사용자가 새 레코드를 삽입 하는 작업을 수행 합니다. 명시적으로 호출 된 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> 메서드 데이터를 삽입 하기 위한 사용자 고유의 프로세스를 만들려는 경우입니다.  
  
   
  
## Examples  
 다음 예제에서는 프로그래밍 방식으로 사용자가 단추를 클릭 한 후 데이터 원본에 새 레코드를 삽입 하는 방법을 보여 줍니다. 코드를 <xref:System.Collections.Specialized.ListDictionary> 기본값을 포함 하는 개체 값을 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> 메서드.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx.vb#1)]  
  
 다음 예제에서는 이전 예제에 대 한 태그를 보여 줍니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Inserted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>삽입 작업이 완료되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 삽입 작업이 완료 된 후 값을 확인 하려면 이벤트 삽입 작업에서 발생 한 예외를 catch 합니다. 통해 새 값을 검색할 수는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 이벤트 처리기에 전달 되는 개체입니다. 예를 들어 사용할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 새 데이터 레코드에 대 한 데이터베이스에서 생성 된 id 속성을 검색할 개체입니다.  
  
   
  
## Examples  
 다음 예제에 대 한 이벤트 처리기를 만드는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 예외를 확인 하 고 새 레코드에 대 한 id 속성을 검색 하는 이벤트입니다.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of LinqDataSourceInsertEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceInsertEventArgs ^&gt; ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " Usage="member this.Inserting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>삽입 작업 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 삽입할, 삽입 작업 전에 값을 변경 하려면 또는 삽입 작업을 취소 하는 데이터 클래스에서 데이터 유효성 검사 오류를 검사 하는 개체의 유효성을 검사 하는 이벤트입니다. <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 개체 데이터 소스에 삽입할 새 개체를 포함 하는이 이벤트에 대 한 이벤트 처리기에 전달 합니다.  
  
 삽입 작업 중에 유효성 검사 오류가 발생할 경우를 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 데이터 클래스에 의해 throw 되는 유효성 검사 예외를 포함 하는 개체입니다. 유효성 검사 오류를 삽입할 값 데이터 클래스의 속성 형식과 일치 하지 않는 경우 또는 사용자 지정 유효성 검사를 통과 하지 못하는 경우 발생 합니다. 에 대 한 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 이벤트 유효성 검사 예외를 검색 하 고 적절 한 조치를 취할 수 있습니다.  
  
 에 대 한 이벤트 처리기에서 예외가 발생 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 이벤트를 이벤트 처리기에서 예외를 처리 해야 합니다. 예외에 대 한 이벤트 처리기에 전달 되지 것입니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 이벤트 (통해를 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 의 속성을 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 개체). 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성 뒤에 throw 되는 예외를 포함 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 이벤트입니다.  
  
   
  
## Examples  
 다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 삽입 작업 전에 데이터를 수정 하는 이벤트입니다. 개체를 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> 속성은 명명 된 형식으로 캐스팅 됩니다 `Product`합니다. `DateModified` 의 속성을 `Product` 개체가 현재 날짜 및 시간으로 설정 된 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 유효성 검사 예외를 검색 하는 이벤트입니다.  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 앞의 예제는 유효성 검사 예외를 검색합니다. 값 속성의 형식과 일치 하지 않는 경우 예외가 throw 될 수 있습니다. 다음 예제에서와 같은 사용자 지정된 검사에서 throw 수도 수 있습니다. `OnAgeChanging` 메서드를 확인 하는 대 한 숫자는 `Age` 속성이 음수입니다.  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>삽입 작업 중에 사용되는 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>삽입 작업 중에 사용되는 매개 변수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 삽입 작업에 필요한 값에 전달 되는 일반적으로 <xref:System.Web.UI.WebControls.LinqDataSource> 데이터 바인딩된 컨트롤에서 제어 합니다. 기본값을 제공 하려는 경우 삽입 매개 변수 값 또는 빈 값을 변환할지 여부를 정의할 지정할 `null`합니다. 사용자 값을 제공 하지 않는 경우 처리 해야 하는 값에 대해서만 삽입 되는 모든 값에 대 한 매개 변수를 제공할 필요가 없습니다.  
  
 제공 하는 값은 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 컬렉션 데이터 원본에 정의 되어 있지만 데이터 컨트롤에 바인딩되지 않은 필드에만 사용 됩니다. 예를 들어 데이터베이스 테이블에 열 이름, 주소 및 우편 번호, 명명 된 가정 하지만 <xref:System.Web.UI.WebControls.ListView> 테이블에 바인딩되는 컨트롤 이름과 주소 필드에만 바인딩되어 있습니다. 값을 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 컬렉션 PostalCode 필드에만 사용 됩니다. 이름 및 주소 필드에 대해 사용할 수 없습니다 됩니다. 이러한 필드에 대 한 입력 값이 없는 경우에 마찬가지입니다. 원본을 하는 경우 데이터의 모든 필드에 대해 데이터 바인딩된 컨트롤에서 자동으로 생성 필드에서 값이 없는 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 컬렉션 사용 됩니다.  
  
   
  
## Examples  
 다음 예제와 <xref:System.Web.UI.WebControls.LinqDataSource> 에서 기본값을 제공 하는 매개 변수를 사용 하 여 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> 컬렉션입니다. 사용자에 대 한 값을 제공 하지 않는 경우는 `Category` 속성인 매개 변수에서 제공 하는 기본 값을 데이터베이스에 저장 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default9.aspx#9)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default9.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="linqDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤의 상태를 나타내는 개체입니다.</param>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤에서 유지해야 하는 값의 상태를 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
합니다 `LoadViewState` 메서드를 사용 하 여 이전에 저장 된 뷰 상태를 로드 하는 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 합니다.

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">LinqDataSource 웹 서버 컨트롤 개요</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">ASP.NET 데이터 액세스 개요</related>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="linqDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터입니다.</param>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 개체를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnUnload : EventArgs -&gt; unit" Usage="linqDataSource.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" /> 개체입니다.</param>
        <summary><see cref="E:System.Web.UI.Control.Unload" /> 이벤트를 발생시킵니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>검색된 데이터의 순서를 지정하는 데 사용되는 필드를 지정하는 값을 가져오거나 설정합니다.</summary>
        <value>Order By 절을 만드는 데 사용 되는 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성에서 반환 되는 데이터 정렬에 사용할 속성을 지정 하려면. 데이터 원본에서 데이터를 정렬 하는 것에 대 한 속성이 있어야 하지만에 포함 될 필요가 없습니다를 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성입니다. 공간을 추가할 수 있습니다 하 고 `Ascending`, `ASC`, `Descending`, 또는 `DESC` 속성에 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 정렬 된 데이터 반환 되는 방법을 지정 하기 위해 문자열.  
  
 둘 이상의 속성을 제공할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 쉼표를 사용 하 여 각 속성을 구분 하 여 속성입니다. 라는 속성을 기준으로 정렬 하려면 예를 들어 `LastName` 하 고 `FirstName`설정는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성 "LastName, FirstName"을 합니다.  
  
> [!NOTE]
>  사용 하는 경우를 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 [!INCLUDE[ss2k](~/includes/ss2k-md.md)] 또는 [!INCLUDE[ssEW](~/includes/ssew-md.md)] 하며 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 속성이로 설정 되어 `true`에서 값을 제공 해야 합니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성. 기본적으로 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 속성은 `true`합니다. 값을 할당 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 포함 해야 모든 identity 열은 쿼리에서 반환 되는 속성 목록에서.  
  
 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> 속성이로 설정 된 `true`, 데이터 바인딩된 컨트롤에 정렬 식을 전달할 수는 <xref:System.Web.UI.WebControls.LinqDataSource> 런타임 시 컨트롤입니다. 합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 적용 한 후 제어 된 데이터 바인딩된 컨트롤에서 정렬 식을 적용 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성입니다. 따라서 데이터는 정렬 식에 따라 데이터 바인딩된 컨트롤에서 반환 됩니다.  
  
   
  
## Examples  
 다음 예에서는 역방향 사전순 값에 따라 데이터를 반환 합니다 `Category` 속성입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Order By 절을 만드는 데 사용되는 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>Order By 절을 만드는 데 사용 되는 매개 변수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 매개 변수를 사용 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 런타임에 Order By 절을 만들 컬렉션입니다. 일반적으로 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 속성을 `true` 매개 변수를 추가 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 컬렉션입니다. 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 속성이로 설정 되어 `true`, 각 매개 변수에 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 컬렉션이 Order By 절에 지정 된 시퀀스에 추가 되는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 컬렉션. 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 속성은 `true`, 매개 변수를 순서 대로 적용 됩니다 하 고 자리 표시자와 일치 하지 않습니다 하기 때문에 이름을 지정할 필요가 없습니다.  
  
 Order By 절에서 런타임 시 값을 설정 해야 하는 경우 필요가 없습니다 사용 하 여 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 컬렉션입니다. 데이터 정렬에 사용할 필드를 정의할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성입니다. 예를 들어 데이터베이스 테이블의 값을 반환 하 여 정렬 `LastName`설정, <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 를 "LastName" 매개 변수 없이 합니다.  
  
 매개 변수를 설정할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 컬렉션의 자리 표시자에 매개 변수와 일치 하 고는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 속성인 있지만이 방법은 응용 프로그램을 제한적입니다. 이 방법은 매개 변수를 사용 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 컬렉션에 열 이름을 나타낼 수 없습니다. 매개 변수 값으로 설정 하 고 속성의 값에 해당 값을 비교할 수 있습니다. 예를 들어 속성에 값 매개 변수가 나타내는 런타임 값 보다 작은 지 여부에 따라 데이터를 정렬할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Web.UI.WebControls.LinqDataSource> 속성이 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>로 설정된 `true` 컨트롤을 보여 줍니다. 매개 변수가 포함 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 에서 사용자 이름을 속성을 기반으로 데이터를 정렬 하는 컬렉션을 선택는 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsBy">
      <MemberSignature Language="C#" Value="public string OrderGroupsBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderGroupsBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderGroupsBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderGroupsBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>그룹화된 데이터의 순서를 지정하는 데 사용되는 필드를 가져오거나 설정합니다.</summary>
        <value>Order Groups By 절을 만드는 데 사용 되는 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 데이터 그룹의 정렬 방식을 지정 하는 속성입니다. 예를 들어 그룹화 할 수 있습니다 합니다 `CategoryID` 속성 및 각 범주 ID의 평균을 그룹화 한 다음 정렬 된 `Price` 속성입니다.  
  
 설정할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 속성 데이터를 그룹화 한 경우에 합니다. 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 속성을 설정 하지 않고는 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 속성인은 <xref:System.Web.UI.WebControls.LinqDataSource> 예외를 throw 하는 컨트롤입니다.  
  
 데이터를 그룹화 하는 데 사용 되는 속성이 나 그룹화 된 데이터에 집계 함수 결과 데이터를 정렬 하는 데 사용 되는 속성 이어야 합니다. 데이터를 정렬 하는 방법을 사용 하지 않으려면 및 추가할 수 있습니다 공백을 "오름차순", "ASC", "Descending" 또는 "DESC" 문자열에서 속성 이름에는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 문자열입니다.  
  
 둘 이상의 속성을 지정할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 속성입니다. 쉼표를 사용 하 여 각 속성을 구분 합니다.  
  
   
  
## Examples  
 다음 예제에서는 두 개의 속성을 사용 하 여 데이터를 그룹화 하는 방법 및 이러한 속성 중 하나를 사용 하 여 그룹화 된 데이터를 정렬 하는 방법을 보여 줍니다. 라는 테이블을 데이터로 `Products` 라는 속성을 사용 하 여 그룹화 `CategoryID` 및 `Discontinued`합니다. 그룹화 된 데이터를 정렬할 때는 `CategoryID` 속성입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default.aspx#1)]  
  
 다음 예제에서는 속성을 사용 하 여 데이터를 그룹화 하는 방법 및 집계 함수 결과에 따라 정렬 하는 방법을 보여 줍니다. 데이터를 `Products` 표를 사용 하 여 그룹화를 `CategoryID` 속성입니다. 평균을 기준으로 정렬 되는 `UnitPrice` 각 그룹 내의 속성입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderGroupsByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Order Groups By 절을 만드는 데 사용되는 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>Order Groups By 절을 만드는 데 사용 되는 매개 변수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 매개 변수를 사용 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> 런타임에 Order Groups By 절을 만들 컬렉션입니다.  
  
 값을 추가 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> 런타임에 Order Groups By 절에 값을 설정 해야 하는 경우에 컬렉션입니다. 사용 하 여 데이터를 정렬 하는 데 사용 되는 필드를 정의할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 속성입니다.  
  
 매개 변수를 설정할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> 컬렉션의 자리 표시자에 매개 변수와 일치 하 고는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 속성입니다. 그러나 사용 하는 경우이 방법은 매개 변수는 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> 컬렉션에 열 이름을 나타낼 수 없는; 값을 나타내야 합니다. 매개 변수 값으로 설정 하 고 속성에 해당 값을 비교할 수 있습니다. 예를 들어 속성에 값 매개 변수가 나타내는 런타임 값 보다 작은 지 여부에 따라 데이터를 정렬할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="linqDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤의 현재 뷰 상태를 저장합니다.</summary>
        <returns><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤에 대해 저장된 컨트롤 상태 값이 들어 있는 개체입니다.</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">LinqDataSource 웹 서버 컨트롤 개요</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">ASP.NET 데이터 액세스 개요</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Select : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>검색된 데이터에 포함되는 속성 및 계산된 값을 가져오거나 설정합니다.</summary>
        <value>Select 절을 만드는 데 사용되는 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 하지 않은 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 데이터 개체에서 모든 속성 (데이터 열)을 검색 합니다. 사용할는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성 개체의 속성 하위 집합을 검색 하거나 데이터를 검색 하는 경우 새 값을 계산 합니다.  
  
 속성을 설정 하 여 검색할 지정 된 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 반환된 된 데이터에 포함 하려는 속성의 이름에는 속성입니다.  
  
 데이터 개체에서 속성의 하위 집합을 검색 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 지정 하는 속성만 포함 하는 클래스를 동적으로 만듭니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성입니다. 데이터 개체의 속성을 하지 않은 속성을 계산 하는 경우 클래스를 동적으로 만들 수도 있습니다. 이러한 경우 쿼리에서 반환 된 개체가 없습니다에 지정 된 클래스의 인스턴스는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성입니다. 대신 사용 해야 합니다는 `new` 의 메서드는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 새 클래스는 쿼리에서 반환 하는 속성입니다. 예를 들어만 반환 하는 `FirstName` 및 `LastName` 포함 하는 개체의 속성을 두 개 이상의 이러한 속성을 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 `new(FirstName, LastName)`. 합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에 지정 된 새 클래스를 동적으로 만들는 `new` 메서드.  
  
 사용할 수는 `As` 선택한 값에 별칭을 지정 하는 키워드입니다. 별칭에 할당 된 속성을 포함 해야 합니다는 `new` 메서드. 결과에 바인딩하는 모든 데이터 바인딩된 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 속성의 별칭으로 참조 해야 합니다. 예를 들어, 설정 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`에 데이터 바인딩된 컨트롤을 두 개의 속성에 액세스할 수 있습니다 `SalesRegion` 및 `RevenueThousands`합니다.  
  
 사용할 합니다 `new` 함수는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 다음 표에 나열 된 조건에 따라 속성입니다.  
  
|선택|새 사용|예제|  
|------------|----------------|-------------|  
|단일 속성입니다.|`new` 필요 하지 않습니다.|`Select="Category"`|  
|여러 속성입니다.|`new` 필요합니다.|`Select="new(Category, Name)"`|  
|단일 또는 별칭이 있는 여러 속성이 있습니다.|`new` 필요합니다.|`Select="new(Category As CategoryGroup)"`|  
  
 자동 데이터 수정 작업을 사용 하도록 설정 하려는 경우 데이터 개체에서 모든 속성을 표시 하지 않으려는 경우, 설정 하지 마십시오는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성입니다. 대신 데이터 바인딩된 컨트롤을 통해 표시를 관리 합니다. 사용 하는 경우는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤 또는 <xref:System.Web.UI.WebControls.GridView> 컨트롤을 설정 해야 합니다 <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> 또는 <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> 속성을 `false`입니다. 데이터 바인딩된 컨트롤에 표시 되지 않는 모든 값은 뷰 상태에 저장 됩니다. 전달 됩니다 변경 되지 않은 데이터 원본에 데이터 업데이트를 수행 하는 경우.  
  
 쿼리에서 데이터를 그룹화 하는 경우에 집계 메서드를 포함할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성입니다. 다음과 같은 집계 메서드를 사용할 수 있습니다.  
  
-   `Count()`  
  
-   `Average(` *열* `)`  
  
-   `Sum(` *열* `)`  
  
-   `Max(` *열* `)`  
  
-   `Min(` *열* `)`  
  
-   `Where(` *조건* `)`  
  
-   `Any()`  
  
-   `All(` *조건* `)`  
  
 자세한 내용은 참조 하세요. [NIB: LinqDataSource 웹 서버 컨트롤 개요](https://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) 고 [방법: 데이터 그룹화 및 집계 LinqDataSource 컨트롤을 사용 하 여](https://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af)입니다.  
  
 데이터를 그룹화 할 때 포함할 수 있습니다 `Key` 하 고 `It`, 동적으로 속성에서 만들어진를 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성. `Key` 속성은 속성 또는 데이터를 그룹화 하는 데 사용 된 속성 값을 참조 합니다. 예를 들어 명명 된 속성으로 그룹화 `Category`는 `Key` 속성에서 각 고유 값이 포함 됩니다는 `Category` 속성입니다. `It` 속성은 데이터 그룹의 개별 레코드의 컬렉션을 나타냅니다. 반복할 수 있습니다는 `It` 그룹화 작업에서 통합 된 개별 레코드를 검색할 속성입니다. 예를 들어 명명 된 속성으로 그룹화 `Category`는 `It` 속성의 값을 공유 하는 모든 개별 레코드를 포함 합니다 `Category` 속성입니다.  
  
 포함 하는 경우는 `It` 키워드를 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성 데이터를 그룹화 할 때 별칭을 할당 해야 합니다는 `It` 키워드입니다. 합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 하는 경우 예외가 throw 됩니다 `It` 별칭이 없습니다. 에 대 한 별칭을 할당할 수는 `Key` 키워드, 하지만이 필요 하지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 설정 하는 방법을 보여 줍니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 데이터 개체의 속성 하위 집합입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default10.aspx#10)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default10.aspx#10)]  
  
 다음 예제에서는 데이터를 그룹화에 사용 된 속성의 값을 검색 하 고 그룹화 된 레코드에 대 한 평균 검색 하는 방법을 보여 줍니다. `Key` 키워드 데이터를 그룹화 하는 데 사용 된 속성을 포함 합니다. 이 예에서 `Key` 에서 공유 값이 포함 됩니다는 `ProductCategory` 속성입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Selected : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 검색 작업이 완료되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 이벤트 데이터 검색 작업에서 예외를 catch 하거나 검색 작업이 완료 된 후 데이터 개체를 검사 합니다. 개체에서 사용할 수는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 이벤트 처리기에 전달 되는 개체입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of LinqDataSourceSelectEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceSelectEventArgs ^&gt; ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " Usage="member this.Selecting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 검색 작업 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 다음 작업을 수행 하기 위해 이벤트:  
  
-   데이터 검색에 대 한 매개 변수를 수정 합니다.  
  
-   프로그래밍 방식으로 쿼리를 생성 합니다.  
  
-   정렬 또는 페이징에 대 한 값을 수정 합니다.  
  
-   사용자 지정 정렬 또는 페이징 수행 합니다.  
  
-   데이터 검색 작업을 취소 합니다.  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> 데이터 검색 작업에 대 한 매개 변수를 포함 하는이 이벤트에 대 한 이벤트 처리기에 전달 되는 개체입니다. 매개 변수를 수정할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 쿼리를 실행 하거나 새 결과 집합을 만들고 할당 하는 수 전에 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 속성입니다.  
  
 사용자 지정 정렬 또는이 이벤트에 바인딩된 컨트롤에 의해 제한 될 수도 있습니다에 대 한 처리기에서 페이징을 구현 하는 능력을 <xref:System.Web.UI.WebControls.LinqDataSource>입니다. 예를 들어 경우의 열 머리글을 <xref:System.Web.UI.WebControls.GridView> 컨트롤을 클릭 하면, 컨트롤이 자동 정렬을 수행 하는 순서 대로 재정의할 설정할 수는 이벤트 처리기입니다.  
  
 에 대 한 이벤트 처리기에서 예외가 발생 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트를 이벤트 처리기에서 예외를 처리 해야 합니다. 예외에 대 한 이벤트 처리기에 전달 되지 것입니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 이벤트 (통해를 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 의 속성을 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 개체). 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성 뒤에 throw 되는 예외를 포함 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트입니다.  
  
   
  
## Examples  
 다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트입니다. 처리기는 웹 페이지에 있는 문자열 값의 배열에서 값을 검색 하는 쿼리를 만듭니다.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 다음 예제에서는 할당 하는 방법의 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 저장된 프로시저를 나타내는 메서드에서 반환 되는 개체에는 속성입니다.  
  
```vb  
Protected Sub LinqDataSource_Selecting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceSelectEventArgs)  
    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  
    e.Result = exampleContext.GetRegisteredCustomers()  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Selecting(object sender,   
        LinqDataSourceSelectEventArgs e)  
{  
    ExampleDataContext exampleContext = new ExampleDataContext();  
    e.Result = exampleContext.GetRegisteredCustomers();  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 검색 작업 중에 사용되는 매개 변수 컬렉션을 가져옵니다.</summary>
        <value>Select 절을 만드는 데 사용되는 매개 변수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 매개 변수를 사용 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 런타임에 Select 절을 만들 컬렉션입니다. 매개 변수를 추가 하는 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> Select 절의 런타임 값을 사용 하려는 경우에 컬렉션입니다. 예를 들어, 매개 변수를 추가할 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 사용자 프로필의 속성을 나타내는 컬렉션입니다. 새 값을 계산 하는 데이터 소스에서 해당 속성 및 값 다음 사용할 수 있습니다.  
  
 Select 절에서 런타임에 값을 설정 해야 하는 경우 필요가 없습니다 사용 하 여 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 컬렉션입니다. 검색할 속성을 정의할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성입니다. 예를 들어, 반환 하는 `FirstName` 및 `LastName` 데이터베이스 테이블에서 값이 설정 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> "firstname, LastName" 매개 변수 없이 합니다.  
  
 값을 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 에서 자리 표시자를 추가 컬렉션은 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 명명 된 매개 변수에 대 한 속성. Select 절에서 사용 하 여 각 매개 변수 이름 앞에 @ 기호입니다.  
  
 매개 변수를 사용할 수 없습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 속성 이름을 나타내는 컬렉션입니다. 동적으로 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 속성을 속성의 이름에 대 한 이벤트 처리기를 만듭니다를 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트 및 사용자 지정을 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 필요에 따라 속성.  
  
   
  
## Examples  
 다음 예제에서는 반환 된 데이터에서 값을 계산 하는 사용자가 제공한 값을 사용 하는 방법을 보여 줍니다. 값을 제조 일 수를 나타내는 텍스트 상자에 입력할 수 있습니다. 제품을 제조 하는 일 수를 나타내는 데이터베이스의 값에서이 값을 나눕니다. 반환 된 값을 지정 된 기간 (일) 동안 얼마나 많은 제품을 생산할 수 있는 것을 나타냅니다. 통해 선택 명령에 포함 된 사용자의 입력을 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 컬렉션입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StoreOriginalValuesInViewState : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터를 업데이트 또는 삭제하기 전에 다른 프로세스에서 변경하지 않았음을 확인하기 위해 데이터 소스의 데이터를 뷰 상태에 저장해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>값이 뷰 상태에 저장되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 업데이트 및 삭제 작업을 설정한는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤이 모든 레코드의 뷰 상태에 대 한 원래 값을 저장 합니다. <xref:System.Web.UI.WebControls.LinqDataSource> 모든 기본 키에 대 한 값을 저장 하는 컨트롤 및 모든 속성으로 표시 되어 있지 `UpdateCheck.Never` 에 `Column` 특성입니다. 설정한 합니다 `UpdateCheck` 의 속성을 `Column` 특성를 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].  
  
 LINQ to SQL 업데이트 또는 데이터를 삭제 하기 전에 데이터 소스의 현재 값에 대 한 뷰 상태 값을 확인 합니다. 값이 일치 하지 않는 경우 데이터 원본 레코드 변경 되었습니다. 이 경우 LINQ to SQL 예외를 throw 및 않습니다 업데이트를 사용 하 여 계속 하거나 삭제 하지 작업 합니다. LINQ to SQL에 대 한 자세한 내용은 참조 하세요. [LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655)합니다.  
  
 보기에서 원래 값을 저장 상태 페이지 크기를 불필요 하 게 커질를 일으킬 수 있으며 악의적인 사용자에 게 중요 한 데이터를 노출할 수 있습니다. 뷰 상태 값을 설정 하 여 저장 하지 않으려면 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> 속성을 `false`입니다. 이 작업을 수행 하는 경우 데이터가 변경 되지 않은 되도록 고유한 방법을 제공 해야 합니다. 설정한 경우에 <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> 속성을 `false`, 원래 값을 데이터 바인딩된 컨트롤의 뷰 상태에 저장 되지 않습니다. 이 경우 LINQ to SQL 데이터의 무결성을 확인할 수 없습니다. LINQ to SQL 데이터 소스의 데이터가 실제로 변경 되지 않은 경우에 데이터 충돌을 나타내는 예외가 throw 됩니다.  
  
 데이터 원본 업데이트 중 자동으로 업데이트 되는 타임 스탬프 필드에 있으면 뷰 상태 값만 저장할 수 있습니다. 이런 경우는 타임 스탬프 엔터티 클래스의 속성 `IsVersion=true` 모든 속성으로 설정 됩니다 `UpdateCheck.Never`합니다. 타임 스탬프 필드는 자동으로 업데이트 되므로 데이터베이스에서 해당 레코드에 해당 데이터가 변경 될 때마다 LINQ to SQL은 데이터가 변경 된 경우 해당 값에서 결정 합니다. 보기 상태 크기를 줄일 수 있습니다 하 고 중요 한 데이터가 노출 됩니다. LINQ to SQL은 상태를 확인할 데이터 일관성에 대 한 보기에 타임 스탬프 값을 비교 하 여 데이터베이스의 타임 스탬프 값으로. 자세한 내용은 [연습: LinqDataSource 컨트롤을 사용 하 여 타임 스탬프를 사용 하 여 데이터 무결성을 검사할](https://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa)합니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.ContextType">
      <MemberSignature Language="C#" Value="Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType" />
      <MemberSignature Language="VB.NET" Value=" Property ContextType As Type Implements IDynamicDataSource.ContextType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System::Web::DynamicData::IDynamicDataSource::ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 멤버에 대한 설명은 <see cref="T:System.Web.DynamicData.IDynamicDataSource" />를 참조하십시오.</summary>
        <value>클래스와 연결된 형식입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Web.UI.WebControls.LinqDataSource> 인스턴스가 <xref:System.Web.DynamicData.IDynamicDataSource> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.EntitySetName">
      <MemberSignature Language="C#" Value="string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName" />
      <MemberSignature Language="VB.NET" Value=" Property EntitySetName As String Implements IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System::Web::DynamicData::IDynamicDataSource::EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 멤버에 대한 설명은 <see cref="T:System.Web.DynamicData.IDynamicDataSource" />를 참조하십시오.</summary>
        <value>엔터티의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Web.UI.WebControls.LinqDataSource> 인스턴스가 <xref:System.Web.DynamicData.IDynamicDataSource> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 멤버에 대한 설명은 <see cref="T:System.Web.DynamicData.IDynamicDataSource" />를 참조하십시오.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Web.UI.WebControls.LinqDataSource> 인스턴스가 <xref:System.Web.DynamicData.IDynamicDataSource> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TableName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 컬렉션을 나타내는 데이터 컨텍스트 클래스의 속성 또는 필드 이름을 가져오거나 설정합니다.</summary>
        <value>데이터 컬렉션이 들어 있는 속성의 이름을 포함하는 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 된 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성을 검색 하려는 데이터를 나타내는 필드나 속성의 이름입니다. 데이터베이스 테이블에 연결 하는 경우 속성의 이름은 일반적으로 테이블의 이름과 동일 합니다. 메모리 내 데이터 컬렉션에 연결 하는 경우 설정 된 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성 데이터 컬렉션을 반환 하는 필드나 속성의 이름입니다.  
  
 모든 형식을 반환 하는 속성을 할당할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 검색 작업에 대 한 속성입니다. 속성으로 표현 되는 개체를 구현 하지 않는 경우 <xref:System.Collections.IEnumerable>는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤이 자동으로 줄 바꿈됩니다 개체 인스턴스의 <xref:System.Collections.IEnumerable> 개체입니다.  
  
 자동 업데이트를 사용 하려면 삽입 또는 삭제 작업의 경우에 할당 되는 클래스를 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 속성에서 파생 되어야 합니다 <xref:System.Data.Linq.DataContext> 에 할당 되는 속성을 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성에서 파생 되어야 합니다 <xref:System.Data.Linq.Table%601>.  
  
 클래스의 인스턴스에서 데이터를 선택 하는 방법에 대 한 내용은 참조는 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 두 개의 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤입니다. 하나로 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 클래스에서 속성을 속성. 해당 속성에는 문자열의 배열을 반환합니다. 다른 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 데이터베이스 테이블을 나타내는 속성에는 속성입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 이라는 클래스 `ExampleDataContext` 나타냅니다 데이터베이스 테이블은 표시 되지 않도록이 예제입니다. 이 예제가 작동 하려면 LINQ to SQL 클래스 명명된 Example.dbml 및 테이블을 끌어 라는 동영상을 추가 하 여이 클래스를 만들어야 합니다를 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]입니다. 클래스가 `ExampleDataContext` 라는 속성을 사용 하 여 `Movies` 생성 됩니다.  
  
 다음 예제에서는 라는 클래스를 보여 줍니다 `MovieLibrary` 에서 참조 되는 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="linqDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 컨트롤의 뷰 상태 변경 내용을 컨트롤의 <see cref="T:System.Web.UI.StateBag" /> 개체에 저장할 수 있도록 추적합니다.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">LinqDataSource 웹 서버 컨트롤 개요</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">ASP.NET 데이터 액세스 개요</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Update (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">업데이트할 레코드의 행 키 값입니다.</param>
        <param name="values">데이터 소스에서 업데이트할 행 값입니다.</param>
        <param name="oldValues">데이터 충돌을 감지하기 위해 계산하는 행 값입니다.</param>
        <summary>업데이트 작업을 수행합니다.</summary>
        <returns>업데이트 작업의 영향을 받는 레코드의 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 호출할 필요가 없습니다를 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> 코드에서 메서드. 데이터 바인딩된 컨트롤을 자동으로 호출 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> 메서드 사용자가 레코드를 업데이트 하는 작업을 수행 합니다. 명시적으로 호출 된 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> 메서드 데이터를 업데이트 하기 위한 사용자 고유의 프로세스를 만들려는 경우입니다.  
  
   
  
## Examples  
 다음 예제에서는 프로그래밍 방식으로 사용자가 단추를 클릭 한 후 데이터 원본에서 레코드를 업데이트 하는 방법을 보여 줍니다. 코드를 <xref:System.Collections.Specialized.ListDictionary> 키 값을 포함 하는 개체를 <xref:System.Collections.Specialized.ListDictionary> 원래 값이 포함 된 개체 및 <xref:System.Collections.Specialized.ListDictionary> 새 값을 포함 하는 개체는 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> 메서드.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx.vb#1)]  
  
 다음 예제에서는 이전 예제에 대 한 태그를 보여 줍니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Updated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>업데이트 작업이 완료되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 업데이트 작업이 완료 된 후 출력 매개 변수 값을 확인 또는 업데이트 작업에서 발생 한 예외를 catch 하는 이벤트입니다. 출력 매개 변수에서 사용할 수는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 이벤트 처리기에 전달 되는 개체입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 컬렉션은 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> 클래스에서 사용되지 않습니다.</summary>
        <value>매개 변수 컬렉션입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of LinqDataSourceUpdateEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceUpdateEventArgs ^&gt; ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " Usage="member this.Updating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>업데이트 작업 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 업데이트, 업데이트 작업 전의 값을 변경 또는 업데이트 작업을 취소 하는 데이터 클래스에서 데이터 유효성 검사 오류를 검사 하는 개체의 유효성을 검사 하는 이벤트입니다. <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> 원래 개체와 업데이트 된 개체 이벤트 처리기에 전달 되는 개체에 포함 되어 있습니다.  
  
 업데이트 작업 중에 유효성 검사 오류가 발생할 경우를 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> 데이터 클래스에 의해 throw 되는 유효성 검사 예외를 포함 하는 개체입니다. 유효성 검사 오류를 업데이트할 값 데이터 클래스의 속성 형식과 일치 하지 않는 경우 또는 사용자 지정 유효성 검사를 통과 하지 못하는 경우 발생 합니다. 에 대 한 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트 유효성 검사 예외를 검색 하 고 적절 한 조치를 취할 수 있습니다.  
  
 에 대 한 이벤트 처리기에서 예외가 발생 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트를 이벤트 처리기에서 예외를 처리 해야 합니다. 예외에 대 한 이벤트 처리기에 전달 되지 것입니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 이벤트 (통해를 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 의 속성을 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 개체). 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성 뒤에 throw 되는 예외를 포함 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트입니다.  
  
   
  
## Examples  
 다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 이벤트입니다. 코드에서 속성을 비교 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> 속성 및 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 속성 값이 변경 되었는지 여부를 확인 합니다. 값이 변경의 값을 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> 속성이 `true`합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 유효성 검사 예외를 검색 하는 이벤트입니다.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 앞의 예제는 유효성 검사 예외를 검색합니다. 값 속성의 형식과 일치 하지 않는 경우 예외가 throw 될 수 있습니다. 다음 예제에서와 같은 사용자 지정된 검사에서 throw 수도 수 있습니다. `OnAgeChanging` 메서드를 확인 하는 대 한 숫자는 `Age` 속성이 음수입니다.  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Where : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>레코드가 검색되는 데이터에 포함되기 위해 충족해야 하는 조건을 지정하는 값을 가져오거나 설정합니다.</summary>
        <value>Where 절을 만드는 데 사용되는 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 쿼리에서 반환 하는 레코드에 대 한 조건을 지정 하는 속성입니다. 구문은 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성은 C#의 LINQ Where 절에 대 한 구문과 동일 합니다.  
  
 부울 값을 초래 하는 식을 지정 식이 계산 되는 경우 `true` 지정된 된 행에 대 한 행은 결과 집합에 포함 되어 있습니다. 다음 예제에서와 같이, 비교할 열 이름, 비교 연산자 및 값의 식으로 구성 됩니다.  
  
```  
<asp:LinqDataSource ... Where="Price > 50"...>  
```  
  
 논리적으로 연결 하는 여러 개의 식을 지정할 `AND` 또는 `OR` 연산자를 사용할 `&&` 논리 AND 연산자로 및 `||` 다음 예와에서 같이, 논리 OR 연산자로:  
  
```  
<asp:LinqDataSource ... Where="Price > 50 && Price < 100"...>  
<asp:LinqDataSource ... Where="Price <= 50 || Price >= 100"...>  
```  
  
 리터럴 문자열 값에 대 한 속성을 테스트 하려는 경우에 리터럴 문자열 값을 큰따옴표로 묶어야 합니다. 태그에서이 작업을 수행 하려면 묶습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 단일 따옴표 안에 다음 예와에서 같이 절 값:  
  
```  
<asp:LinqDataSource ... Where='Category = "Sports"' ... >  
```  
  
 코드의 리터럴 문자열 값을 테스트 하려면 다음 예제에서와 같이 큰따옴표를 삽입 하기 위해 사용 중인 언어에 적합 한 이스케이프 문자를 사용 합니다.  
  
```vb  
LinqDataSource1.Where = "Category = ""Sports"""  
```  
  
```csharp  
LinqDataSource1.Where = "Category = \"Sports\"";  
```  
  
 다른 문자열 보다 작거나 보다 큰 문자열 인지 여부를 테스트 하려는 경우의 메서드를 사용 해야 합니다는 <xref:System.String> 클래스를 사용 하는 대신 `<` 또는 `>` 열 이름은 문자열 값 사이의 연산자입니다. 다음 예제에서는 보다 큼, 보다 크거나 "Sports" 같음, 보다 작거나 같거나, 작은 범주 값이 있는 행 선택 방법을 보여 줍니다.  
  
```  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") < 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") <= 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") > 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") >= 0' ... >  
```  
  
 다른 메서드를 사용할 수도 있습니다는 <xref:System.String> 클래스와 같이 <xref:System.String.StartsWith%2A>를 <xref:System.String.EndsWith%2A>, 및 <xref:System.String.Contains%2A>합니다. 문자열을 비교 하는 방법에 대 한 자세한 내용은 참조 하세요. [문자열 비교](~/docs/standard/base-types/comparing.md)합니다. 위치에 대 한 자세한 내용은 절 구문을 참조 하세요 [C# 연산자](https://msdn.microsoft.com/library/0301e31f-22ad-49af-ac3c-d5eae7f0ac43) 및 [여기서 절](~/docs/csharp/language-reference/keywords/where-clause.md)합니다.  
  
 웹 페이지를 만들 때 정의 하는 정적 값을 기준으로 필터링 하는 것 외에도 런타임에 평가 되는 동적 값에 따라 필터링 할 수 있습니다. 명명 된 매개 변수를 포함 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 값에 대 한 자리 표시자로 사용 되는 속성입니다. 다음에 일치 하는 이름을 가진 매개 변수를 추가 하는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 컬렉션입니다.  
  
 설정할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 속성을 `true` 매개 변수를 정의 하 고는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 컬렉션입니다. 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 속성은 `true`, 명명 된 매개 변수를 포함할 필요가 없습니다를 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성입니다. 대신 합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤의 위치를 자동으로 생성 절에서 매개 변수에서의 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 속성.  
  
 데이터를 필터링 하는 방법에 대 한 자세한 내용은 참조 하세요. [연습: 선택 및 LinqDataSource 및 GridView 컨트롤을 사용 하 여 데이터의 하위 집합을 필터링](https://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)합니다.  
  
   
  
## Examples  
 다음 예제에서는 정적 조건에 따라 쿼리에서 반환 된 데이터를 필터링 하는 방법을 보여 줍니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 다음 예제에서는 런타임 시 사용자가 제공 되는 값을 기준으로 데이터를 필터링 하는 방법을 보여 줍니다. 이 예제는 <xref:System.Web.UI.WebControls.DropDownList> 컨트롤 및 <xref:System.Web.UI.WebControls.GridView> 컨트롤을 페이지에 표시 됩니다. 사용자의 값 중 하나를 선택 하면를 <xref:System.Web.UI.WebControls.DropDownList> 컨트롤을 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 선택 하는 `Products` 포함 된 행만 테이블 `UserPrice` 선택한 값과 같으면 값. <xref:System.Web.UI.WebControls.GridView> 컨트롤에는 다음 필터링 된 데이터를 표시 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WhereParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Where 절을 만드는 데 사용되는 매개 변수 컬렉션을 가져옵니다.</summary>
        <value><see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" /> 속성에서 Where 절을 만드는 데 사용되는 매개 변수 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에서 매개 변수를 사용 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Where 만들 컬렉션 런타임에 절. 매개 변수를 추가 하 여 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> where에서 조건 중 하나 이상의 작업을 프로그래밍 방식으로 설정 하려는 경우 컬렉션 절. 데이터베이스 테이블의 값과 같으면 성 가진 레코드를 검색 하는 예를 들어, 한 <xref:System.Web.UI.WebControls.TextBox> 제어 합니다. 매개 변수를 추가 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 입력란 값에 대 한 컬렉션입니다.  
  
 Where에서 런타임에 값을 설정 하지 않은 경우 절 필요가 없습니다 사용 하 여 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 컬렉션입니다. 검색할 필드를 정의할 수는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성입니다. 예를 들어 데이터베이스 테이블에서 값을 반환할 위치 `LastName` equals "Adams" 태그에서 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 속성을 `'LastName = "Adams"'` 매개 변수 없이 합니다.  
  
 값을 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 컬렉션, 각 매개 변수에 이름을 할당할 추가 하는 다음에서 자리 표시자는 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 해당 매개 변수에 대 한 속성. Where에서 절을 사용 하 여 각 매개 변수 이름 앞에 @ 기호.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법의 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Where를 동적으로 만들려는 컬렉션 절. <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤의 값을 사용 하 여 모든 레코드를 반환 합니다 `Price` 에서 사용자가 선택한 값 보다 큰 열을 <xref:System.Web.UI.WebControls.DropDownList> 컨트롤.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>