<Type Name="LinqDataSourceStatusEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="397ed9376985c69513834ee2e1edcf9a0819adeb" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39931345" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceStatusEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSourceStatusEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type LinqDataSourceStatusEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />, <see cref="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />, <see cref="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />, <see cref="E:System.Web.UI.WebControls.LinqDataSource.Selected" /> 및 <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updated" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 클래스를 사용 하 여 수행 된 데이터 작업의 결과를 검토 하면는 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 합니다. <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 개체에 대 한 이벤트 처리기로 전달 되는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, 및 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 의 이벤트는 <xref:System.Web.UI.WebControls.LinqDataSource> 제어 합니다.  
  
 데이터 작업을 성공적으로 완료 결과 데이터 개체에 저장 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성 및 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성은 `null`합니다. 데이터 작업이 실패 하는 경우 데이터 작업 중에 발생 한 예외에 저장 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성 및 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성은 `null`합니다. 표시 되는 예외를 처리 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성을 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> 속성을 `true` 예외가 throw 되지 것입니다 있도록 합니다.  
  
 통해 쿼리에서 반환 된 데이터 레코드의 총 수를 검색 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 이벤트입니다. 이벤트 처리기에서 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성은 `null`, 제품 ID의 개체에서 검색 되는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성입니다. 제품 ID가 테이블에 대 한 기본 키가 고 데이터베이스에 의해 설정 됩니다 따라서 값 알려지지 않은 삽입 작업이 완료 될 때까지 합니다. 경우는 예외 메시지가 기록 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성이 같으면 `null`합니다. 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> 속성으로 설정 됩니다 `true`합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : Exception -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs exception" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">데이터 작업 중 발생한 오류입니다.</param>
        <summary>데이터 작업의 결과로 발생한 예외를 사용하여 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 데이터 작업 중에 예외가 throw 될 때 사용 됩니다. 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 자동으로 속성이 `null`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (result As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(System::Object ^ result);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : obj -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs result" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="result">데이터 작업의 결과로 생성된 데이터가 들어 있는 개체입니다.</param>
        <summary>데이터 작업의 데이터를 포함하는 개체를 사용하여 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 데이터 작업이 오류 없이 완료 되 면 사용 됩니다. `result` 매개 변수는 데이터 작업의 결과 나타내는 개체를 포함 합니다. 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 자동으로 속성이 `null`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result, int totalRowCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result, int32 totalRowCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (result As Object, totalRowCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSourceStatusEventArgs(System::Object ^ result, int totalRowCount);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : obj * int -&gt; System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" Usage="new System.Web.UI.WebControls.LinqDataSourceStatusEventArgs (result, totalRowCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
        <Parameter Name="totalRowCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="result">데이터 작업의 결과로 생성된 데이터가 들어 있는 개체입니다.</param>
        <param name="totalRowCount">데이터 검색 작업에서 반환된 행 수입니다.</param>
        <summary>데이터 작업의 데이터 및 반환된 행 수를 포함하는 개체를 사용하여 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 작업 도중 throw된 예외를 가져옵니다.</summary>
        <value>오류가 발생한 경우 예외를 나타내는 <see cref="T:System.Exception" /> 개체이고, 그렇지 않으면 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터 작업 중 예외가 발생 하는 경우 예외에 저장 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성입니다. 에 대 한 이벤트 처리기를 만들 수 있습니다는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, 및 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 이벤트 및 예외를 있는 경우 검색을 통해를 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성.  
  
   
  
## Examples  
 다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 이벤트입니다. 이벤트 처리기에서 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성은 `null`, 제품 ID의 개체에서 검색 되는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성입니다. 제품 ID 테이블에 대 한 기본 키가 고 삽입 작업이 완료 될 때까지 값이 알려지지 않은 하므로 데이터베이스에 의해 설정 됩니다. 경우는 예외 메시지가 기록 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성이 같으면 `null`합니다. 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> 속성으로 설정 됩니다 `true`합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberSignature Language="VB.NET" Value="Public Property ExceptionHandled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExceptionHandled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandled : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>예외가 처리되었으며 다시 throw되어서는 안 되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>예외가 처리되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 이벤트 처리기를 만들 수 있습니다 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>를 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, 및 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 이러한 작업 중에 발생 하는 모든 예외를 검사 하는 이벤트입니다. 예외를 처리 하 고 다시 throw 되도록 원하지 않는 경우 설정 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> 속성을 `true`입니다. 설정 하지 않으면 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> 속성을 `true`, 예외 호출 스택에 있는 다음 이벤트 처리기에 전파 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 이벤트입니다. 이벤트 처리기에서 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성은 `null`, 제품 ID의 개체에서 검색 되는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성입니다. 제품 ID가 테이블에 대 한 기본 키가 고 데이터베이스에 의해 설정 됩니다 따라서 값 알려지지 않은 삽입 작업이 완료 될 때까지 합니다. 경우는 예외 메시지가 기록 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성이 같으면 `null`합니다. 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> 속성으로 설정 됩니다 `true`합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Result { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Result : obj" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 작업의 결과를 나타내는 개체를 가져옵니다.</summary>
        <value>데이터 작업의 데이터가 들어 있는 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 데이터 작업에서 반환 된 값을 검사 하는 속성입니다. 데이터 작업의 출력 매개 변수를 검색 하거나 쿼리에서 반환 된 값을 수정할 수 있습니다.  
  
 저장 된 데이터는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성 수행 된 데이터 작업의 유형에 따라 달라 집니다. 데이터를 삭제 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성에 지정 된 형식의 개체를 포함 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성을 데이터 소스에서 삭제 된 원래 값을 사용 하 여 합니다. 삽입 하거나 데이터를 업데이트 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성에 지정 된 형식의 개체를 포함 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성을 데이터 원본에 저장 된 새 값으로. 데이터를 선택 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 쿼리의 결과 포함 합니다.  
  
 선택 쿼리에 데이터를 그룹화 하거나 지정 된 형식에서 속성의 하위 집합을 선택 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성을 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 동적으로 생성 된 형식의 개체를 포함 하는 속성입니다. 이 고, 그렇지 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성에 지정 된 형식의 개체를 포함 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 이벤트 처리기는 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 이벤트입니다. 이벤트 처리기에서 경우는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성은 `null`, 제품 ID의 개체에서 검색 되는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 속성입니다. 제품 ID가 테이블에 대 한 기본 키가 고 데이터베이스에 의해 설정 됩니다 따라서 값 알려지지 않은 삽입 작업이 완료 될 때까지 합니다. 경우는 예외 메시지가 기록 됩니다는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> 속성이 같으면 `null`합니다. 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> 속성으로 설정 됩니다 `true`합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalRowCount">
      <MemberSignature Language="C#" Value="public int TotalRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TotalRowCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalRowCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TotalRowCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalRowCount : int" Usage="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 검색 작업의 데이터 집합에서 행의 총 개수를 가져옵니다.</summary>
        <value>데이터 검색 작업의 데이터 집합에서 행의 총 개수는 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> 개체가 데이터 수정 작업 중에 만들어지면 -1이고, <see cref="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />를 <see langword="true" />로 설정하고 <see cref="P:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount" />를 <see langword="false" />로 설정하여 사용자 지정 페이징을 지원하면 -1입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 데이터 검색 작업을 하는 동안 데이터 집합의 레코드 수가 가져올 속성입니다. 일반적으로 데이터 페이지를 표시 하 고 레코드의 총 수를 표시 하려면이 속성을 검색 합니다.  
  
 데이터를 페이징 되는 경우, 값은 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 속성은 쿼리에 의해 반환 되는 행의 실제 수와 다를 수 있습니다. 이 쿼리 수의 데이터 페이지에 필요한 행만 반환 합니다.  
  
 합니다 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 속성에 대 한 이벤트 처리기에 액세스 하는 경우에 쿼리의 레코드 수를 포함 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 이벤트입니다. 에 대 한 이벤트 처리기에서 속성에 액세스 하는 경우는 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, 또는 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 이벤트는 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 속성이-1을 포함 합니다.  
  
 값을 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 속성에 따라 달라 집니다를 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 의 속성을 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤 및는 `AllowPaging` 데이터 바인딩된 컨트롤의 속성. 다음 표에서 가능한 값은 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 속성입니다.  
  
|LinqDataSource 컨트롤의 자동 페이지 속성|데이터 바인딩된 컨트롤의 AllowPaging 속성|TotalRowCount 속성|결과|  
|-------------------------------------------------|-------------------------------------------------|----------------------------|-------------|  
|`true`|`true`|쿼리에 대 한 레코드 수입니다.|데이터는 자동으로 페이징 합니다.|  
|`false`|`false`|쿼리에 대 한 레코드 수입니다.|데이터 페이징되지 않습니다.|  
|`true`|`false`|-1|데이터 페이징되지 않습니다.|  
|`false`|`true`|에 할당 된 값을 <xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A> 속성에 대 한 이벤트 처리기에는 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 이벤트입니다.|데이터는 페이징 사용자 지정한 경우 지정 된 값에 따라 페이징 됩니다.|  
  
   
  
## Examples  
 다음 예제에서는 웹 페이지를 보여 줍니다.는 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.GridView> 컨트롤 및 <xref:System.Web.UI.WebControls.Literal> 컨트롤입니다. 합니다 <xref:System.Web.UI.WebControls.LinqDataSource> 컨트롤에 대 한 이벤트 처리기를 정의 합니다 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 이벤트입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx#1)]  
  
 다음 예제에서는 이벤트의 이벤트 처리기에 대 한 코드는 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> 이벤트입니다. 값을 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> 속성에 할당 된는 <xref:System.Web.UI.WebControls.Literal> 제어 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>