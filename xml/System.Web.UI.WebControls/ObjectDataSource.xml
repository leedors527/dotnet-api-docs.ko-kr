<Type Name="ObjectDataSource" FullName="System.Web.UI.WebControls.ObjectDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a7d5dc7d9209bc454de702e7d77fec188384e2c1" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55352546" /></Metadata><TypeSignature Language="C#" Value="public class ObjectDataSource : System.Web.UI.DataSourceControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectDataSource extends System.Web.UI.DataSourceControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.ObjectDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectDataSource&#xA;Inherits DataSourceControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectDataSource : System::Web::UI::DataSourceControl" />
  <TypeSignature Language="F#" Value="type ObjectDataSource = class&#xA;    inherit DataSourceControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("TypeName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.ObjectDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>다중 계층 웹 애플리케이션 아키텍처의 데이터 바인딩된 컨트롤에 데이터를 제공하는 비즈니스 개체를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 항목 내용:  
  
-   [소개](#introduction)  
  
-   [용도](#purpose)  
  
-   [데이터 검색](#retrieving_data)  
  
-   [데이터 작업을 수행합니다.](#performing_data_operations)  
  
-   [데이터 필터링](#filtering_data)  
  
-   [캐싱](#caching)  
  
-   [기능](#features)  
  
-   [데이터 뷰](#data_view)  
  
-   [LINQ to SQL 사용](#using_linq_to_sql)  
  
-   [선언 구문](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>소개  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤의 사용자가 만든 클래스를 사용 하 여 작동 합니다. 검색 하 고 데이터를 업데이트 하는 메서드를 만들고 해당 메서드의 이름을 제공 하는 <xref:System.Web.UI.WebControls.ObjectDataSource> 태그에서 제어 합니다. 렌더링 또는 포스트백 처리 하는 동안는 <xref:System.Web.UI.WebControls.ObjectDataSource> 지정한 메서드를 호출 합니다.  
  
 시각적으로 렌더링 되지 있는지는 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어 합니다. 결과적으로 <xref:System.Web.UI.WebControls.ObjectDataSource> 와 같은 시각적 기능 지원 하지 않습니다는 <xref:System.Web.UI.DataSourceControl.EnableTheming%2A> 또는 <xref:System.Web.UI.DataSourceControl.SkinID%2A> 속성입니다.  
  
<a name="purpose"></a>   
## <a name="purpose"></a>용도  
 매우 일반적인 애플리케이션 디자인 방법은 프레젠테이션 계층 비즈니스 논리에서 분리 하는 데 비즈니스 개체의 비즈니스 논리를 캡슐화 합니다. 이러한 비즈니스 개체는 프레젠테이션 계층과 데이터 계층에는 3 계층 애플리케이션 아키텍처에서 결과 사이는 고유한 계층을 형성 합니다. <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤을 사용 하면 개발자가 자신의 3 계층 애플리케이션 아키텍처를 유지 하는 동안 ASP.NET 데이터 소스 컨트롤을 사용 하도록 합니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 리플렉션을 사용 하 여 비즈니스 개체의 인스턴스 만들기 및를 검색 하도록의 메서드를 호출, 삽입, 데이터 업데이트 및 삭제 합니다. 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 클래스의 이름을 식별 하는 <xref:System.Web.UI.WebControls.ObjectDataSource> 작동 합니다. <xref:System.Web.UI.WebControls.ObjectDataSource> ; 보유 하지 않는 개체가 메모리에 웹 요청 수명에 대 한 제어를 만들고 각 메서드 호출에 대 한 클래스의 인스턴스를 소멸 시킵니다. 사용 하는 비즈니스 개체는 많은 리소스가 필요 하거나 만들고 제거 하는 비용이 많이 소요 되는 경우 심각한 고려 사항입니다. 비용이 많이 드는 개체를 사용 하는 최적의 디자인 선택 되지 않을 수 있습니다 하지만 사용 하 여 개체의 수명 주기를 제어할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 이벤트입니다.  
  
> [!NOTE]
>  로 식별 되는 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 속성에는 인스턴스 메서드 일 수 있습니다 또는 `static` (`Shared` Visual Basic에서) 메서드. 메서드는 경우 `static` (`Shared` Visual Basic에서), 비즈니스 개체의 인스턴스가 만들어지지 않습니다 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>를 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 이벤트가 발생 하지 않습니다.  
  
<a name="retrieving_data"></a>   
## <a name="retrieving-data"></a>데이터 검색  
 비즈니스 개체에서 데이터를 검색할 설정의 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성 데이터를 검색 하는 메서드의 이름입니다. 메서드를 반환 하지 않는 경우는 <xref:System.Collections.IEnumerable> 또는 <xref:System.Data.DataSet> 런타임에서 개체를 래핑할 개체는 <xref:System.Collections.IEnumerable> 컬렉션입니다. 메서드 시그니처가 있는지 매개 변수를 추가할 수 있습니다 <xref:System.Web.UI.WebControls.Parameter> 개체를 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 컬렉션 다음에 의해 지정 된 메서드에 전달 하려는 값에 바인딩합니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성. 에 대 한 순서로 된 <xref:System.Web.UI.WebControls.ObjectDataSource> 매개 변수를 사용 하 여 컨트롤, 매개 변수 이름 및 메서드 시그니처에서 매개 변수의 형식과 일치 해야 합니다. 자세한 내용은 [ObjectDataSource 컨트롤을 사용 하 여 매개 변수를 사용 하 여](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)입니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 데이터를 검색할 때마다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드가 호출 됩니다. 이 메서드는 지정 된 메서드에 프로그래밍 방식 액세스를 제공 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성입니다. 지정 된 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성에 바인딩되는 컨트롤에 의해 자동으로 호출 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource> 때 해당 `DataBind` 메서드가 호출 됩니다. 설정 하는 경우는 `DataSourceID` 데이터 바인딩된 컨트롤의 속성을 컨트롤 자동으로 데이터에 바인딩하는 데이터 원본에서 필요에 따라 합니다. 설정 합니다 `DataSourceID` 속성은 바인딩에 대 한 권장 되는 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤을 데이터 바인딩된 컨트롤입니다. 설정할 수 있습니다 합니다 `DataSource` 속성인 있지만 명시적으로 호출 해야 합니다 `DataBind` 데이터 바인딩된 컨트롤의 메서드. 호출할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드 프로그래밍 방식으로 언제 든 지 데이터를 검색 합니다.  
  
 바인딩 데이터 바인딩된 컨트롤을 데이터 소스 컨트롤에 대 한 자세한 내용은 참조 하세요. [데이터 소스 컨트롤을 사용 하 여 데이터에 바인딩](https://msdn.microsoft.com/library/e41adfff-8fb8-449e-9cd1-9bd49788c5f7)합니다.  
  
<a name="performing_data_operations"></a>   
## <a name="performing-data-operations"></a>데이터 작업을 수행합니다.  
 개체는 비즈니스 기능에 따라는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤과 함께, 업데이트, 삽입 및 삭제와 같은 데이터 작업을 수행할 수 있습니다. 이러한 데이터 작업을 수행 하려면 적절 한 메서드 이름 및 수행 하려는 작업에 대 한 모든 연결된 매개 변수를 설정 합니다. 예를 들어, 업데이트 작업을 설정 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 속성을 추가 및 업데이트를 수행 하는 비즈니스 개체 메서드의 이름에 필요한 매개 변수가 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 컬렉션입니다. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어와 데이터 바인딩된 컨트롤을 연결 된 매개 변수는 데이터 바인딩된 컨트롤에 의해 추가 됩니다. 이 경우 메서드의 매개 변수 이름은 데이터 바인딩된 컨트롤의 필드 이름이 일치 하는지 확인 해야 합니다. 업데이트가 수행 되는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 메서드가 호출 되는 데이터 바인딩된 컨트롤에 의해 코드에서 명시적으로 또는 자동으로 합니다. 동일한 일반 패턴에 대 한 뒤 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 고 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 작업 합니다. 비즈니스 개체는 일괄 처리 되지 않고 한 번에 이러한 유형의 데이터 작업에 대 한 하나의 레코드를 수행할 것으로 간주 됩니다.  
  
<a name="filtering_data"></a>   
## <a name="filtering-data"></a>데이터 필터링  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤에서 검색 된 데이터를 필터링 할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 데이터로 반환 되 면 속성을 <xref:System.Data.DataSet> 또는 <xref:System.Data.DataTable> 개체입니다. 설정할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 속성 형식을 사용 하 여 필터링 식에 구문 문자열 및 값에 지정 된 매개 변수 식에 바인딩하는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 컬렉션입니다.  
  
<a name="caching"></a>   
## <a name="caching"></a>캐싱  
 하지만 <xref:System.Web.UI.WebControls.ObjectDataSource> 인스턴스를 유지 하지 않는 여러 요청에서 비즈니스 개체의으로 식별 되는 메서드 호출의 결과 캐시할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성. 데이터는 캐시에서 후속 호출을 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 비즈니스 개체를 만들고 호출 하는 대신 캐시 된 데이터를 반환 하는 메서드 해당 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 리플렉션을 사용 하 여 합니다. 개체를 만들고 웹 서버의 메모리 데이터 메서드를 호출을 방지할 수 캐싱 있습니다. <xref:System.Web.UI.WebControls.ObjectDataSource> 자동으로 데이터를 캐시 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 속성이로 설정 되어 `true`, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 속성 캐시 삭제 되기 전에 캐시 데이터를 저장 하는 시간 (초) 수로 설정 됩니다. 지정할 수도 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 속성과 선택적 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> 속성입니다. 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤을 사용 하면 모든 유형의 데이터를 캐시할 수 있지만 리소스 또는 여러 요청에 서비스를 공유할 수 없는 상태를 유지 하는 개체를 캐시 하지 않을 (예를 들어, 개방적이 고 <xref:System.Data.SqlClient.SqlDataReader> 개체) 이므로 개체의 동일한 인스턴스 여러 요청을 서비스에 사용 됩니다.  
  
<a name="features"></a>   
## <a name="features"></a>기능  
 다음 표에서의 기능을 설명 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어 합니다.  
  
|기능|요구 사항|  
|----------------|------------------|  
|선택|설정 된 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 비즈니스의 이름으로 속성의 데이터를 선택 하는 메서드를 개체 및에 필요한 매개 변수를 포함할는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 컬렉션 프로그래밍 방식으로 또는 데이터 바인딩된 컨트롤을 사용 하 여 합니다.|  
|정렬|설정 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> 속성에 있는 매개 변수의 이름으로는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 정렬 조건을 전달 하는 메서드.|  
|필터링|설정를 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 속성을 필터링 식 및 필요에 따라 모든 매개 변수를 추가 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 컬렉션 데이터를 필터링 할 때를 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드는. 지정 된 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성을 반환 해야 합니다는 <xref:System.Data.DataSet> 또는 <xref:System.Data.DataTable>합니다.|  
|페이징|데이터 소스 페이징을 지원 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 메서드는 검색할 레코드의 최대 수와 검색할 첫 번째 레코드의 인덱스에 대 한 매개 변수를 포함 합니다. 이러한 매개 변수의 이름을 설정 해야 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 및 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> 속성을 각각. 데이터 바인딩된 컨트롤을 자체적으로 페이징을 수행할 수 있습니다 경우에 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 페이징으로 지정한 메서드의에서 직접 지원 하지 않습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성입니다. 이 작업을 수행 하려면 데이터 바인딩된 컨트롤에 대 한 요구 사항인 하 여 지정 된 메서드가 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성을 구현 하는 개체를 반환 합니다 <xref:System.Collections.ICollection> 인터페이스.|  
|업데이트하는 중|설정 된 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 비즈니스의 이름으로 데이터를 업데이트 하는 메서드를 개체 속성과에 필요한 매개 변수를 포함할는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 컬렉션입니다.|  
|삭제|설정 된 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 비즈니스의 이름으로 속성 메서드 또는 데이터를 삭제 하는 함수 개체 및에 필요한 매개 변수를 포함할는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 컬렉션입니다.|  
|삽입|설정 된 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 비즈니스의 이름으로 속성 메서드 또는 데이터를 삽입 하는 함수 개체 및에 필요한 매개 변수를 포함할는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 컬렉션입니다.|  
|캐싱|설정 된 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 속성을 `true`, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 및 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 캐시 된 데이터에 대해 원하는 캐싱 동작에 따라 속성입니다.|  
  
> [!NOTE]
>  사용 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource> 데이터, 클라이언트에서 입력 된 문자열을 삽입 하거나 업데이트할 클래스는으로 자동 변환 되지 클라이언트 culture 형식에서 서버 문화권 형식입니다. 예를 들어, 클라이언트 culture의 날짜 형식으로 DD/MM/YYYY를 지정할 수 있습니다 및 서버에서의 날짜 형식은 MM/DD/YYYY를 수 있습니다. 이런 경우 2009 년 10 월 5 일은에 입력을 <xref:System.Web.UI.WebControls.TextBox> 2009 년 5 월 10으로 제어 하지만 2009 년 5 월 10 일으로 해석 됩니다. 2009 년 10 월 15 일은 15/10/2009을 입력 하 고 잘못 된 날짜로 거부 될 수 있습니다.  
  
<a name="data_view"></a>   
## <a name="data-view"></a>데이터 뷰  
 모든 데이터 소스 컨트롤과 마찬가지로 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 데이터 소스 뷰 클래스와 연결 되어 있습니다. 동안 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤은 데이터를 사용 하는 데 사용 하는 페이지 개발자는 인터페이스를 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 클래스는 데이터 바인딩된 컨트롤을 사용 하는 인터페이스입니다. 또한는 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 클래스는 데이터 소스 컨트롤의 기능을 설명 하 고 실제 작업을 수행 합니다. <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤에 연결 된 하나만 <xref:System.Web.UI.WebControls.ObjectDataSourceView>, 이름은 항상 및 `DefaultView`합니다. 하는 동안 합니다 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 개체에 의해 노출 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> 메서드를 다양 한 해당 속성과 메서드에 래핑되고에서 직접 노출 된는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤입니다. 내부적으로 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 개체 검색, 삽입, 업데이트, 삭제, 필터링 및 데이터 정렬 등의 모든 데이터 작업을 수행 합니다. 자세한 내용은 <xref:System.Web.UI.WebControls.ObjectDataSourceView>을 참조하세요.  
  
<a name="using_linq_to_sql"></a>   
## <a name="using-linq-to-sql"></a>LINQ to SQL 사용  
 사용할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource> LINQ to SQL 클래스를 사용 하 여 제어 합니다. 그렇게 하려면 설정의 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 속성을 데이터 컨텍스트 클래스의 이름입니다. 설정할 수도 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>를 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 해당 작업을 수행 하는 데이터 컨텍스트 클래스의 메서드에 메서드. 에 대 한 이벤트 처리기를 만들어야 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 데이터 컨텍스트 클래스의 삭제를 취소 하기 위해 이벤트입니다. 이 단계는 필요한 LINQ to SQL에서는 지연 된 실행을 지원 하기 때문에 반면는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 선택 작업 후 데이터 컨텍스트를 삭제 하려고 합니다. LINQ to SQL 클래스 만들기 방법에 대 한 자세한 내용은 참조 하세요. [방법: 만들 LINQ to SQL 클래스를 웹 프로젝트에서](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)합니다. 데이터 컨텍스트 클래스의 삭제를 취소 하는 방법의 예 참조는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 이벤트입니다.  
  
## <a name="using-the-entity-framework"></a>Entity Framework를 사용 하 여  
 사용할 수도 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource> Entity Framework를 사용 하 여 제어 합니다. 자세한 내용은 [Entity Framework 및 ObjectDataSource 컨트롤을 사용 하 여](https://go.microsoft.com/fwlink/?LinkId=209117)입니다.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>선언 구문  
  
```  
<asp:ObjectDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    ConflictDetection="OverwriteChanges|CompareAllValues"  
    ConvertNullToDBNull="True|False"  
    DataObjectTypeName="string"  
    DeleteMethod="string"  
    EnableCaching="True|False"  
    EnablePaging="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    FilterExpression="string"  
    ID="string"  
    InsertMethod="string"  
    MaximumRowsParameterName="string"  
    OldValuesParameterFormatString="string"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnFiltering="Filtering event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnObjectCreated="ObjectCreated event handler"  
    OnObjectCreating="ObjectCreating event handler"  
    OnObjectDisposing="ObjectDisposing event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    runat="server"  
    SelectCountMethod="string"  
    SelectMethod="string"  
    SkinID="string"  
    SortParameterName="string"  
    SqlCacheDependency="string"  
    StartRowIndexParameterName="string"  
    TypeName="string"  
    UpdateMethod="string"  
    Visible="True|False"  
>  
        <DeleteParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </DeleteParameters>  
        <FilterParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </FilterParameters>  
        <InsertParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </InsertParameters>  
        <SelectParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </SelectParameters>  
        <UpdateParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </UpdateParameters>  
</asp:ObjectDataSource>  
```  
  
   
  
## Examples  
 소스 코드를 사용 하 여 Visual Studio 웹 사이트 프로젝트는 다음이 항목과 함께 사용할 수 있습니다: [다운로드](https://code.msdn.microsoft.com/Project/Download/FileDownload.aspx?ProjectName=aspnetmsdnexamples&DownloadId=14838)합니다.  
  
 이 섹션에서는 <xref:System.Web.UI.WebControls.ObjectDataSource> 태그는.aspx에서 페이지 표시에서 작동 하는 비즈니스 개체입니다. 이 예제에서는.aspx 페이지입니다. 포함을 <xref:System.Web.UI.WebControls.GridView> 바인딩되는 컨트롤을 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤입니다. <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 태그 지정 비즈니스 개체의 이름 및 데이터를 검색 하기 위해 호출할 비즈니스 개체 메서드의 이름입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 다음 예에서는 비즈니스 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource> .aspx 페이지에서 컨트롤을 사용 합니다. (다른 많은 <xref:System.Web.UI.WebControls.ObjectDataSource> 코드 예제도이 비즈니스 개체를 사용 합니다.) 이 예제에서는 다음 두 개의 기본 클래스로 이루어져 있습니다.  
  
-   합니다 `EmployeeLogic` 클래스는 비즈니스 논리 클래스는 <xref:System.Web.UI.WebControls.ObjectDataSource> 사용 합니다.  
  
-   `NorthwindEmployee` 클래스에서 반환 되는 데이터 개체를 정의 합니다 `GetAllEmployees` 메서드를 `EmployeeLogic` 클래스.  
  
 추가 `NorthwindDataException` 클래스는 편의 위해 제공 됩니다.  
  
 이 예제에서는 클래스이 집합을 Microsoft SQL Server 및 Microsoft Access를 사용 하 여 사용할 수 있는 여 Northwind 데이터베이스를 사용 하 여 작동 합니다. 전체 작업 예제를 컴파일 및 제공 되는.aspx 페이지 예제를 사용 하 여 이러한 클래스를 사용 해야 합니다. Northwind 데이터베이스를 설치 하는 방법에 대 한 정보를 참조 하세요 [방법: 샘플 데이터베이스 설치](https://msdn.microsoft.com/library/ed1291f6-604c-4972-ae22-0345c6dea12e)합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.IDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceControl" />
    <altmember cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />
    <related type="Article" href="https://msdn.microsoft.com/library/a806fa2c-fe6a-405f-869c-74e804a642ea">연습: 데이터를 사용자 지정 비즈니스 개체에 바인딩</related>
    <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
    <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
    <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">Entity Framework 및 ObjectDataSource 컨트롤을 사용 하 여</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSource (string typeName, string selectMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, string selectMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (typeName As String, selectMethod As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectDataSource(System::String ^ typeName, System::String ^ selectMethod);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.ObjectDataSource : string * string -&gt; System.Web.UI.WebControls.ObjectDataSource" Usage="new System.Web.UI.WebControls.ObjectDataSource (typeName, selectMethod)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="selectMethod" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName"><see cref="T:System.Web.UI.WebControls.ObjectDataSource" />와 작동하는 클래스의 이름입니다.</param>
        <param name="selectMethod"><see cref="T:System.Web.UI.WebControls.ObjectDataSource" />가 데이터를 검색하기 위해 호출하는 메서드 또는 함수의 이름입니다.</param>
        <summary>지정된 형식 이름과 데이터 검색 메서드 이름을 사용하여 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 `typeName` Bin 디렉터리나 App_Code 디렉터리에서에 있는 코드는 부분적으로 정규화 된 형식 또는 전역 어셈블리 캐시에 등록 되어 있는 코드에 대 한 정규화 된 형식 이름을 매개 변수 수 있습니다. 전역 어셈블리 캐시를 사용 하는 경우에 대 한 적절 한 참조를 추가 해야 합니다는 `assemblies` 합니다 Machine.config 또는 Web.config 구성 파일의 섹션입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 속성으로 검색된 데이터를 데이터 소스 컨트롤에서 캐시하는 시간(초)을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.ObjectDataSource" />에서 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 속성 호출의 결과를 캐시하는 시간(초)입니다. 기본값은 0입니다. 값은 음수일 수 없습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 데이터 캐싱을 지원 합니다. 데이터 캐시 되어 있는 동안에 호출을 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드 검색 데이터 캐시에서 아닌 비즈니스 개체를 <xref:System.Web.UI.WebControls.ObjectDataSource> 작동 합니다. 캐시가 만료 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드는 비즈니스 개체에서 데이터를 검색 하 고 다시 데이터를 캐시 합니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤은 자동으로 데이터를 캐시 때 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 속성이 `true` 및 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 속성 캐시에 캐시 엔트리 이전의 데이터가 저장 되는 시간 (초) 수를 나타내는 0 보다 큰 값으로 설정 됩니다 삭제 됩니다. 값이 0 무한정 캐시를 나타냅니다.  
  
 캐시 기간을 결합 하 여 규제 되 고 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 설정 합니다. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 속성이 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> 값을 <xref:System.Web.UI.WebControls.ObjectDataSource> 첫 번째 호출에서 데이터를 캐시는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드 최대 시간으로 지정 된 기간 동안 메모리에 보관 하 고는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 속성. 메모리가 필요한 경우 데이터를 기간, 이전 해제 될 수 있습니다. 다음 호출 하는 동안 캐시는 다음을 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 속성이 <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> 값을 데이터 소스 컨트롤의 첫 번째 호출에서 데이터를 캐시 합니다를 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드를 하지만 이후 각 호출의 캐시를 보관 하는 기간을 다시 설정는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드. 해당 시간 동안 활동이 없는 경우 캐시가 만료 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 속성에 대 한 마지막 호출 이후를 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에서는 어떻게는 <xref:System.Web.UI.WebControls.ObjectDataSource> 개체에서 캐싱을 지원 합니다. 두 번째 코드 예제에는 반환 하는 래퍼 메서드를 구현 하는 방법을 보여 줍니다.는 <xref:System.Data.DataSet> 캐싱을 사용 하도록 설정 하는 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource> 개체입니다.  
  
 다음 코드 예제에서는 어떻게는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 캐싱을 지원 합니다. 캐싱을 사용 하도록 설정, 식별 된 데이터를 검색 하는 메서드를 구현 해야 합니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성으로 데이터를 반환 하는 <xref:System.Data.DataSet> 개체. 이 예제에서는 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 속성이 `true`, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 및 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 속성이 설정 됩니다. 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 에서 반환 되는 데이터를 캐시 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 30 초에 대 한 속성입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/CS/objds6cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/VB/objds6vb.aspx#1)]  
  
 다음 코드 예제에는 반환 하는 래퍼 메서드를 구현 하는 방법을 보여 줍니다.는 <xref:System.Data.DataSet> 캐싱을 사용 하도록 설정 하는 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어 합니다. 기본 구현에서 합니다 `EmployeeLogic` 클래스를 `GetAllEmployees` 메서드가 반환 되는 <xref:System.Collections.ArrayList> 개체. 완전히 사용 하려면 개체를 리팩터링 하는 대신를 <xref:System.Web.UI.WebControls.ObjectDataSource> 래퍼 메서드 라는 Web Forms 페이지에서 `GetAllEmployeesAsDataSet` 집합을 반환 하는 항목이 `NorthwindEmployee` 데이터를 <xref:System.Data.DataSet>입니다.  
  
 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Web.UI.WebControls.ObjectDataSource> 클래스입니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>기간과 결합될 때 데이터 소스 컨트롤에서 사용하는 캐시의 동작을 설명하는 캐시 만료 동작을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.DataSourceCacheExpiry" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 데이터 캐싱을 지원 합니다. 데이터 캐시 되어 있는 동안에 호출을 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드 검색 데이터 캐시에서 아닌 비즈니스 개체를 <xref:System.Web.UI.WebControls.ObjectDataSource> 작동 합니다. 캐시가 만료 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드는 비즈니스 개체에서 데이터를 검색 하 고 다시 데이터를 캐시 합니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤은 자동으로 데이터를 캐시 때 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 속성이 `true` 및 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 속성 캐시에 캐시 엔트리 이전의 데이터가 저장 되는 시간 (초) 수를 나타내는 0 보다 큰 값으로 설정 됩니다 삭제 됩니다. 값이 0 무한정 캐시 기간을 나타냅니다.  
  
 캐시 기간을 결합 하 여 규제 되 고 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 설정 합니다. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 속성이 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> 값을 <xref:System.Web.UI.WebControls.ObjectDataSource> 첫 번째 호출에서 데이터를 캐시는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드 최대 시간으로 지정 된 기간 동안 메모리에 보관 하 고는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 속성. 메모리가 필요한 경우 데이터를 기간, 이전 해제 될 수 있습니다. 다음 호출 하는 동안 캐시는 다음을 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 속성을 <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> 값을 데이터 소스 컨트롤의 첫 번째 호출에서 데이터를 캐시 합니다를 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드, 하지만 이후 각 호출에 대 한 캐시를 보관 하는 기간을 다시 설정는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드. 해당 시간 동안 활동이 없는 경우 캐시가 만료 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 속성에 대 한 마지막 호출 이후를 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에서는 어떻게는 <xref:System.Web.UI.WebControls.ObjectDataSource> 개체 필터링 및 캐싱을 지원 합니다. 두 번째 코드 예제에는 반환 하는 래퍼 메서드를 구현 하는 방법을 보여 줍니다.는 <xref:System.Data.DataSet> 캐싱 및 필터링을 사용 하는 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource> 개체입니다.  
  
 다음 코드 예제에서는 어떻게는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 필터링 및 캐싱을 지원 합니다. 필터링 및 캐시를 사용 하 여 식별 되는 데이터를 검색 하는 메서드를 구현 해야 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성에 데이터를 반환 하는 <xref:System.Data.DataSet> 개체. 이 예제에서는 캐싱이 설정 되어 있으므로 `EmployeeLogic` 개체에 데이터를 반환 합니다는 <xref:System.Data.DataSet>, <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 속성이로 설정 되어 `true`, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 및 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 속성이 설정 됩니다. 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 에서 반환 되는 데이터를 캐시 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 30 초에 대 한 속성입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/CS/objds6cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/VB/objds6vb.aspx#1)]  
  
 다음 코드 예제에는 반환 하는 래퍼 메서드를 구현 하는 방법을 보여 줍니다.는 <xref:System.Data.DataSet> 캐싱 및 필터링을 사용 하는 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어 합니다. 기본 구현에서 합니다 `EmployeeLogic` 클래스를 `GetAllEmployees` 메서드가 반환 되는 <xref:System.Collections.ArrayList>. 완전히 사용 하려면 개체를 리팩터링 하는 대신를 <xref:System.Web.UI.WebControls.ObjectDataSource> 래퍼 메서드 라는 Web Forms 페이지에서 `GetAllEmployeesAsDataSet` 집합을 반환 하는 항목이 `NorthwindEmployee` 데이터를 <xref:System.Data.DataSet>입니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Web.UI.WebControls.ObjectDataSource> 클래스입니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 소스 컨트롤에서 만든 모든 데이터 캐시 개체에 링크된 사용자 정의 키 종속성을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.ObjectDataSource" />에서 만든 모든 캐시 개체를 식별하는 키입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 임의의 문자열 값으로 속성을 설정할 수 있습니다.  
  
 이 키가 만료되면 모든 캐시 개체도 명시적으로 만료됩니다. 이렇게 하면 하 여 만든 캐시 항목이 무효화 될 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource> 고유한 페이지 코드에서 프로그래밍 방식으로 합니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 데이터 캐싱을 지원 합니다. 데이터 캐시 되어 있는 동안에 호출을 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드 검색 데이터 캐시에서 아닌 비즈니스 개체를 <xref:System.Web.UI.WebControls.ObjectDataSource> 작동 합니다. 캐시가 만료 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드는 비즈니스 개체에서 데이터를 검색 하 고 다시 데이터를 캐시 합니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤은 자동으로 데이터를 캐시 때 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 속성이 `true` 및 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 속성 캐시에 캐시 엔트리 이전의 데이터가 저장 되는 시간 (초) 수를 나타내는 0 보다 큰 값으로 설정 됩니다 삭제 됩니다. 값이 0 무한정 캐시를 나타냅니다.  
  
 설정할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 속성에서 만든 모든 캐시 항목 간의 종속성을 만들려면는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤과 키입니다. 하면 만료 될 수 있습니다 모든 캐시 항목을 프로그래밍 방식으로 언제 든 지 키를 만료 하 여 합니다. 키를 사용 하 여 만료 합니다 <xref:System.Web.Caching.Cache.Remove%2A?displayProperty=nameWithType> 메서드는 현재 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 매개 변수로 값입니다.  
  
 모든 조합에 대 한 고유 캐시 엔트리 만들어집니다 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 속성입니다. 여러 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 같은 캐시 엔트리 시나리오에서 사용할 수 있는 동일한 형식, 메서드 및 매개 변수를 사용 하 여 데이터 로드 합니다.  
  
   
  
## Examples  
 다음 세 가지 예제에는 웹 페이지, 코드 숨김 페이지 클래스 및 Northwind 데이터베이스의 Employees 테이블에서 레코드를 검색 하는 데이터 액세스 클래스를 보여 줍니다.  
  
 첫 번째 예제 두 개가 포함 된 웹 페이지를 보여 줍니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.DropDownList> 컨트롤 및 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다. 첫 번째 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 및 <xref:System.Web.UI.WebControls.DropDownList> 검색 하 고 데이터베이스에서 직원 이름이 표시 되는 컨트롤입니다. 두 번째 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 및 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤 검색 하 고 사용자가 선택한 직원 레코드를 표시 하는 데 사용 됩니다.  
  
 캐싱을 사용할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어 합니다. 따라서 각 레코드는 한 번만 데이터베이스에서 검색 됩니다. <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> "EmployeeDetails" 속성이 있지만 임의의 문자열 값을 키로 작업할 수 있습니다. 웹 페이지도 포함 되어 있습니다를 <xref:System.Web.UI.WebControls.Button> 캐시 된 데이터를 만료 하기 위해 클릭할 수 있는 컨트롤입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx#3)]  
  
 두 번째 예제에 대 한 처리기를 보여 줍니다.는 <xref:System.Web.UI.Control.Load> 이벤트 및 처리기는 <xref:System.Web.UI.WebControls.Button.Click> 의 이벤트는 <xref:System.Web.UI.WebControls.Button> 컨트롤입니다. 합니다 <xref:System.Web.UI.Control.Load> 이벤트 처리기로 키를 사용 하 여 캐시 항목을 만듭니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 값입니다. 합니다 <xref:System.Web.UI.WebControls.Button.Click> 키가 같은 캐시 항목을 제거 하는 이벤트 처리기는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 값입니다. 캐시 항목이 제거 되 면 키에 종속 된 모든 캐시 된 데이터가 만료 되었습니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx.vb#4)]  
  
 세 번째 예제에서는 Northwind 데이터베이스와 상호 작용 하는 데이터 액세스 클래스를 보여 줍니다. 클래스는 LINQ를 사용 하 여 직원 테이블을 쿼리 합니다. 이 예제에서는 LINQ to SQL 클래스는 Northwind 데이터베이스를 나타내고 Employees 테이블에 필요 합니다. 자세한 내용은 [방법: 만들 LINQ to SQL 클래스를 웹 프로젝트에서](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      <MemberSignature Language="VB.NET" Value="Public Property ConflictDetection As ConflictOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ConflictOptions ConflictDetection { System::Web::UI::ConflictOptions get(); void set(System::Web::UI::ConflictOptions value); };" />
      <MemberSignature Language="F#" Value="member this.ConflictDetection : System.Web.UI.ConflictOptions with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>새 값만 <see langword="Update" /> 메서드에 전달되는지 아니면 기존 값과 새 값이 모두 <see langword="Update" /> 메서드에 전달되는지를 확인하는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.ConflictOptions" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성으로 지정한 메서드의 매개 변수 값 이전 및 새 값에 대 한 적용 되었는지 여부를 결정 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 속성입니다. 예를 들어 메서드는 지정 된를 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성에서 반환을 <xref:System.Data.DataTable> 열을 사용 하 여 컨트롤 `Name` 및 `Number`, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 속성는 <xref:System.Web.UI.ConflictOptions.OverwriteChanges> 필드, 매개 변수는에 대 한 생성 `Name` 하 고 `Number` 에 대 한는 `Update` 메서드. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 속성을 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 에 대 한 매개 변수는 생성 값 `Name`, `Number`, `original_Name`, 및 `original_Number`합니다. (원래 값에 대 한 정확한 매개 변수 이름에 따라 달라 집니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 속성입니다.) 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 다음 여부를 확인 메서드는에 지정 된는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 속성이 일치 하는 매개 변수입니다.  
  
 동시성 제어에는 데이터는 읽기 및 여러 클라이언트가 액세스 하 고 동일한 데이터를 조작 하는 경우 저장소에서 변경 하는 방법을 제어 하려면 데이터 저장소를 사용 하는 기술입니다. 예를 들어, 하나의 클라이언트 데이터를 읽고 다른 클라이언트가 동일한 데이터를 읽고 다른 사용자에 게 제공 하는 동안 사용자에 게 제공 합니다. 두 사용자가 데이터를 업데이트하여 데이터 스토리지에 제출하는 경우 두 클라이언트가 동일한 데이터에 대해 다른 값을 제공할 수 있으므로 예기치 않은 결과가 발생할 수 있습니다. 이 충돌로 간주 됩니다. 설정 하 여는 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 속성을를 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 값을 `Update` 메서드 수 충돌을 감지 하 고 필요에 따라 처리에 원래 데이터 원본에 이전 및 새 값을 비교 합니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 에 위임 하는 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 개체와 연결 된는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertNullToDBNull">
      <MemberSignature Language="C#" Value="public bool ConvertNullToDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertNullToDBNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull" />
      <MemberSignature Language="VB.NET" Value="Public Property ConvertNullToDBNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConvertNullToDBNull { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ConvertNullToDBNull : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>업데이트, 삽입 또는 삭제 작업에 전달되는 <see cref="T:System.Web.UI.WebControls.Parameter" /> 값이 <see cref="F:System.DBNull.Value" /> 컨트롤에 의해 <see langword="null" />에서 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 값으로 자동으로 변환되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.Parameter" /> 컨트롤에 전달된 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체의 <see langword="true" /> 값이 자동으로 <see cref="F:System.DBNull.Value" /> 값으로 변환되면 <see langword="null" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 변환 하지 않았습니다 `null` 에 <xref:System.DBNull.Value> 값 런타임 시 오류가 발생할 수 있습니다. 사용 하 여는 <xref:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull%2A> 나타내는 속성을 여부를 <xref:System.Web.UI.WebControls.Parameter> 에서 업데이트, 삽입 또는 삭제 작업에 전달 되는 값은 자동으로 변환 `null` 에 <xref:System.DBNull.Value> 값는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DBNull.Value" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="DataObjectTypeName">
      <MemberSignature Language="C#" Value="public string DataObjectTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataObjectTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property DataObjectTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataObjectTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataObjectTypeName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 바인딩된 컨트롤의 개별 값을 전달하는 대신 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 컨트롤에서 데이터 업데이트, 삽입 또는 삭제 작업의 매개 변수로 사용할 클래스의 이름을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.ObjectDataSource" />에서 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />, <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 또는 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 작업의 매개 변수로 사용할 수 있는 개체의 형식을 식별하는 정규화된 또는 부분적으로 정규화된 클래스 이름입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 전달 되는 여러 매개 변수를 지정 하는 대신 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 메서드를 여러 데이터 필드 값을 집계 하는 하나의 개체를 만들 수 있습니다. 이 개체는 한 방법에 몇 가지 매개 변수 대신 전달 됩니다.  
  
 기본 동작을 <xref:System.Web.UI.WebControls.ObjectDataSource> 데이터 바인딩된 컨트롤에 바인딩되는 컨트롤은 데이터 바인딩된 컨트롤을 만듭니다는 <xref:System.Web.UI.WebControls.Parameter> 데이터 소스의 각 매개 변수에 대 한 개체입니다. 비즈니스 개체에 많은 필드가 있으면 결과 메서드에 많은 필드가 수도 있습니다. <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성을 사용 하면 각 데이터 필드에 대 한 속성을 갖는 형식에 지정할 수 있습니다. 그런 다음 여러 매개 변수를 메서드에 전달 하는 대신 런타임에 하나의 개체를 만들고 모든 속성을 설정 합니다. 이 개체는 메서드 호출에 대 한 매개 변수 컬렉션에 추가 됩니다.  
  
 지정 된 형식을 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성 매개 변수가 있는 기본 생성자가 있어야 하므로 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 형식의 인스턴스를 만들 수 있습니다. 형식에는 사용할 수 있는 속성을 설정할 수 있어야 합니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 데이터 바인딩된 컨트롤에서 전달 되는 값을 사용 하 여 개체를 채울 컨트롤입니다. 속성 이름이 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 데이터 바인딩된 컨트롤에 의해 전달 되는 값의 매개 변수 이름과 정확히 일치 해야 합니다.  
  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성을 설정 및 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤은 데이터 바인딩된 컨트롤에서 지정 된 메서드를 사용 하 여 연결 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 및 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 속성 각각 한 개의 매개 변수만 는에지정된형식의<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성입니다. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 속성을 <xref:System.Web.UI.ConflictOptions.OverwriteChanges> 값을 지정 된 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 속성에 지정 된 형식의 매개 변수 하나 있어야 합니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 속성을 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 값을 지정 된 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 속성에 지정 된 형식의 두 매개 변수가 있어야 합니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성. 원래 값을 포함 하는 첫 번째 매개 변수 두 번째 매개 변수 새 값을 포함 합니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 에 위임 하는 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 연관 된는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤.  
  
   
  
## Examples  
 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에는 모든 매개 변수 값을 하나 이상의 개체를 결합 하는 형식을 구현 하는 방법을 보여 줍니다.를 사용 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성입니다. 두 번째 코드 예제에서는 첫 번째 코드 예제에 사용 되는 두 개의 클래스를 사용 하는 웹 페이지를 보여 줍니다.  
  
 다음 코드 예제에는 모든 매개 변수 값을 하나 이상의 개체를 결합 하는 형식을 구현 하는 방법을 보여 줍니다.를 사용 하 여 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성입니다. select 메서드를 `AggregateData` 반환 클래스를 <xref:System.Data.DataTable> 이라는 두 개의 열을 사용 하 여 개체 `Name` 및 `Number`합니다. 마찬가지로, 합니다 `NewData` 클래스에는 두 개의 읽기/쓰기 속성을 정의 `Name` 고 `Number`입니다. 합니다 `Insert` 메서드를 `AggregateData` 형식의 매개 변수 하나를 사용 하는 클래스가 `NewData`합니다. `TypeName` 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSource> 로 설정 된 `AggregateData` 및 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성 `NewData`.  
  
 [!code-csharp[ObjectDataSourceDataObjectTypeName#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/CS/AggregateData.cs#2)]
 [!code-vb[ObjectDataSourceDataObjectTypeName#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/VB/AggregateData.vb#2)]  
  
 다음 코드 예제에서는 앞의 코드 예제에 사용 되는 두 개의 클래스를 사용 하는 웹 페이지를 보여 줍니다.  
  
 [!code-aspx-csharp[ObjectDataSourceDataObjectTypeName#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/CS/AggregateDataPageCS.aspx#1)]
 [!code-aspx-vb[ObjectDataSourceDataObjectTypeName#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/VB/AggregateDataPageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
        <related type="Article" href="https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4">ObjectDataSource 컨트롤을 사용 하 여 매개 변수를 사용 하 여</related>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete();" />
      <MemberSignature Language="F#" Value="member this.Delete : unit -&gt; int" Usage="objectDataSource.Delete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> 컬렉션의 매개 변수를 사용하여 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" /> 속성으로 식별되는 메서드를 호출하는 방식으로 삭제 작업을 수행합니다.</summary>
        <returns><see cref="T:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" />의 <see cref="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows" /> 속성이 <see cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" /> 이벤트에 설정되어 있으면 내부 데이터 스토리지에서 삭제된 행 수를 나타내는 값이며, 그렇지 않으면 -1입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 전에 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 작업을 수행할를 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A> 메서드를 호출 발생 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 이벤트. 처리할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 이벤트 매개 변수의 값을 검사 하 고 이전 전처리를 수행할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 작업 합니다. 삭제 작업을 수행 하는 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 로 식별 되는 개체의 인스턴스를 만들 하기 위해는 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 속성. 다음으로 식별 되는 메서드를 호출 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 속성에 연결 된 모든를 사용 하 여 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 속성입니다. 매개 변수의 이름을 삭제 매개 변수를 연결된 된 데이터 바인딩된 컨트롤에서 가져오는, 경우에 따라 만들어집니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 속성입니다. 후는 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 작업이 완료 되 면 합니다 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A> 메서드를 호출 발생 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> 이벤트. 처리할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> 이벤트 모든 반환 값과 출력 매개 변수 예외를 검사 하 고 후 처리를 수행할 수 있습니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 연관 된 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤.  
  
## <a name="data-bound-controls"></a>데이터 바인딩된 컨트롤  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어와 같은 데이터 바인딩된 컨트롤을 사용 하 여 연결 된 합니다 <xref:System.Web.UI.WebControls.GridView> 컨트롤 필요 없는 호출 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 페이지 코드에서 메서드. <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 메서드 대신 데이터 바인딩된 컨트롤에서 직접 호출 됩니다.  
  
 매개 변수가 병합, 개체 수명 및 방법 확인 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Deleted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 작업이 완료되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리를 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> 반환 값 또는 출력 매개 변수의 값을 확인 하거나 후 예외가 throw 되었는지 여부를 확인 하려면 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 작업이 완료 합니다. 반환 값, 출력 매개 변수 및 예외 처리 속성에서 사용할 수는 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> 이벤트와 연결 된 개체입니다.  
  
 사용할 수는 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> 에서 삭제 된 행의 수를 반환 하는 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 메서드. 이 위해 설정 된 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> 속성입니다. 삭제 된 행 수가 지정 된 메서드에서 반환 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 속성 값은에서 사용할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> 개체입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 개체 및 <xref:System.Web.UI.WebControls.GridView> 컨트롤 데이터를 삭제 합니다. 두 번째 코드 예에서는 `EmployeeLogic` 첫 번째 코드 예제에 사용 되는 클래스입니다.  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 컨트롤 및 <xref:System.Web.UI.WebControls.GridView> 컨트롤 데이터를 삭제 합니다. 처음에 <xref:System.Web.UI.WebControls.GridView> 컨트롤 집합에 지정 된 메서드를 사용 하 여 모든 직원을 표시 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성에서 데이터를 검색 하는 `EmployeeLogic` 개체. 때문에 <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> 속성이 `true`의 <xref:System.Web.UI.WebControls.GridView> 컨트롤이 자동으로 표시를 **삭제** 단추입니다.  
  
 클릭할 경우는 **삭제** 단추를 삭제 작업에 지정 된 메서드를 사용 하 여 수행 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 속성 및 지정 된 매개 변수를 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 컬렉션입니다. 이 코드 예제에서는 몇 가지 전처리 및 후 처리 단계도 수행 됩니다. `NorthwindEmployeeDeleting` 대리자를 처리 하기 위해 호출 됩니다 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 작업을 수행 하기 전에 이벤트 및 `NorthwindEmployeeDeleted` 대리자를 처리 하기 위해 호출 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> 예외 처리를 수행 하는 작업이 완료 된 후 이벤트. 이 코드 예제에서는 하는 경우는 `NorthwindDataException` 는 의해 처리 될 throw를 `NorthwindEmployeeDeleted` 메서드.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 다음 코드 예제는 `EmployeeLogic` 앞의 코드 예제에 사용 되는 클래스입니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">Entity Framework 및 ObjectDataSource 컨트롤을 사용 하 여</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteMethod">
      <MemberSignature Language="C#" Value="public string DeleteMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DeleteMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 컨트롤에서 데이터 삭제를 위해 호출하는 메서드나 함수의 이름을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.ObjectDataSource" />에서 데이터를 삭제할 때 사용하는 메서드나 함수의 이름을 나타내는 문자열입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비즈니스 개체는 한 번에 아닌 일괄 처리 데이터 하나의 레코드를 삭제로 간주 됩니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 에 위임 하는 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 개체와 연결 된는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤.  
  
 매개 변수 이름에 대 한 구성 되었는지 확인 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 에서 제어를 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 컬렉션 select 메서드에 의해 반환 되는 열 이름과 일치 합니다.  
  
## <a name="object-lifetime"></a>개체 수명  
 로 식별 되는 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 속성에는 인스턴스 메서드 일 수 있습니다 또는 `static` (`Shared` Visual Basic에서) 메서드. 비즈니스 개체가 만들어지고 제거 될 때마다 인스턴스 메서드인 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 속성 이라고 합니다. 처리할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 하기 전에 비즈니스 개체를 사용 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 속성 이라고 합니다. 처리할 수도 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 후에 발생 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 속성 이라고 합니다. 비즈니스 개체를 구현 하는 경우는 <xref:System.IDisposable> 인터페이스는 <xref:System.IDisposable.Dispose%2A> 개체를 제거 하기 전에 호출 됩니다. 메서드가 `static` (`Shared` Visual Basic의) 메서드를 비즈니스 개체가 생성 되지 않고 처리할 수 없는 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 이벤트.  
  
## <a name="parameter-merging"></a>병합 하는 매개 변수  
 매개 변수가 추가 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 다음 세 가지 소스의 컬렉션:  
  
-   런타임에 데이터 바인딩된 컨트롤입니다.  
  
-   `DeleteParameters` 요소를 선언적으로 합니다.  
  
-   `Deleting` 메서드를 선언적으로 합니다.  
  
 데이터 바인딩된 컨트롤에서 생성 된 모든 매개 변수가 먼저 추가 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 컬렉션입니다. 예를 들어 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 바인딩되는 <xref:System.Web.UI.WebControls.GridView> 열이 있는 컨트롤 `Name` 및 `Number`에 대 한 매개 변수 `Name` 및 `Number` 컬렉션에 추가 됩니다. 매개 변수가의 정확한 이름은 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 속성입니다. 이러한 매개 변수의 데이터 형식은 `string`합니다. 다음으로에 나와 있는 매개 변수는 `DeleteParameters` 요소가 추가 됩니다. 경우에 매개 변수를 `DeleteParameters` 에 이미 있는 매개 변수로 동일한 이름을 가진 요소가 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 기존 매개 변수 컬렉션에 지정 된 매개 변수와 일치 하도록 수정 됩니다는 `DeleteParameters` 요소. 일반적으로이 매개 변수의 데이터 형식을 수정 하려면 사용 됩니다. 마지막으로 프로그래밍 방식으로 추가 및 제거할 수의 매개 변수를 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 하기 전에 발생 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 메서드를 실행 합니다. 메서드는 매개 변수를 병합 된 후 확인 됩니다. 메서드 확인은 다음 섹션에 설명 되어 있습니다.  
  
## <a name="method-resolution"></a>메서드 확인  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 메서드를 호출할 매개 변수에서 선언적으로 생성 된 데이터 바인딩된 컨트롤에서 데이터 필드를 `DeleteParameters` 요소 및에 추가 된 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 이벤트 처리기 모두 병합 됩니다. (자세한 내용은 이전 섹션 참조). <xref:System.Web.UI.WebControls.ObjectDataSource> 개체 호출할 메서드를 찾으려고 시도 합니다. 에 지정 된 이름 가진 하나 이상의 메서드를 찾습니다 먼저는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 속성입니다. 일치 하는 항목이 없으면는 <xref:System.InvalidOperationException> 예외가 throw 됩니다. 일치 하는 항목이 있으면 매개 변수 이름과 일치 하는 찾습니다. 예를 들어 지정 된 형식 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 속성이 라는 두 개의 메서드도 `DeleteARecord`합니다. 하나의 `DeleteARecord` 하나의 매개 변수가 `ID`, 및 다른 `DeleteARecord` 두 매개 변수가 `Name` 및 `Number`합니다. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 컬렉션에 명명 된 매개 변수만 `ID`의 `DeleteARecord` 메서드를만 `ID` 매개 변수 라고 합니다. 메서드를 확인 하는 데 매개 변수의 형식을 확인 하지 않습니다. 매개 변수의 순서는 중요 하지 않습니다.  
  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성, 메서드를 다른 방식으로 확인 됩니다. <xref:System.Web.UI.WebControls.ObjectDataSource> 에 지정 된 이름의 메서드를 찾습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 는 매개 변수 형식 중 하나를 사용 하는 속성에 지정 된 된 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성. 이 경우 매개 변수의 이름을 중요 하지 않습니다.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 개체 및 <xref:System.Web.UI.WebControls.GridView> 컨트롤 데이터를 삭제 합니다. 두 번째 코드 예에서는 `EmployeeLogic` 첫 번째 코드 예제에 사용 되는 클래스입니다.  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 컨트롤 및 <xref:System.Web.UI.WebControls.GridView> 컨트롤 데이터를 삭제 합니다. 처음에 <xref:System.Web.UI.WebControls.GridView> 컨트롤 집합에 지정 된 메서드를 사용 하 여 모든 직원을 표시 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성에서 데이터를 검색 하는 `EmployeeLogic` 개체. 때문에 <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> 속성이 `true`의 <xref:System.Web.UI.WebControls.GridView> 컨트롤이 자동으로 표시를 **삭제** 단추입니다.  
  
 클릭할 경우는 **삭제** 단추를 삭제 작업에 지정 된 메서드를 사용 하 여 수행 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 속성 및 지정 된 매개 변수를 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 컬렉션입니다. 이 코드 예제에서는 몇 가지 전처리 및 후 처리 단계도 수행 됩니다. `NorthwindEmployeeDeleting` 대리자를 처리 하기 위해 호출 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 작업을 수행 하려면 먼저 이벤트 및 `NorthwindEmployeeDeleted` 대리자를 처리 하기 위해 호출 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> 예외 처리를 수행 하는 작업이 완료 된 후 이벤트입니다. 이 예제의 경우는 `NorthwindDataException` 는 의해 처리 될 throw는 `NorthwindDataException` 대리자.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 다음 코드 예제는 `EmployeeLogic` 앞의 코드 예제에 사용 되는 클래스입니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">Entity Framework 및 ObjectDataSource 컨트롤을 사용 하 여</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> 메서드에서 사용하는 매개 변수가 포함된 매개 변수 컬렉션을 가져옵니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" /> 메서드에서 사용하는 매개 변수가 포함된 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이름 및 형식에 포함 된 매개 변수를 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 컬렉션 이름 및 매개 변수 형식과 일치 해야 합니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 메서드 시그니처입니다. 매개 변수 이름은 영향을 받지는 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 속성 및 대/소문자 구분 됩니다. 컬렉션의 매개 변수는 데이터 바인딩된 컨트롤을 선언적으로 지정 된 매개 변수 및 프로그래밍 방식으로 추가 되는 매개 변수는 데이터에 따라 달라 집니다. 자세한 내용은 "매개 변수가 병합"의 참조 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 하 고 [ObjectDataSource 컨트롤을 사용 하 여 매개 변수를 사용 하 여](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)입니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 속성 검색을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A> 속성에 포함 된를 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 연관 된 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤.  
  
 매개 변수가 병합, 개체 수명 및 방법 확인 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>합니다.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 개체 및 <xref:System.Web.UI.WebControls.GridView> 컨트롤 데이터를 삭제 합니다. 두 번째 코드 예에서는 `EmployeeLogic` 첫 번째 코드 예제에 사용 되는 클래스입니다.  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 컨트롤 및 <xref:System.Web.UI.WebControls.GridView> 데이터를 삭제 하는 컨트롤입니다. 처음에 <xref:System.Web.UI.WebControls.GridView> 컨트롤 집합에 지정 된 메서드를 사용 하 여 모든 직원을 표시 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성에서 데이터를 검색 하는 `EmployeeLogic` 개체. 때문에 <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> 속성이 `true`의 <xref:System.Web.UI.WebControls.GridView> 컨트롤이 자동으로 표시를 **삭제** 단추입니다.  
  
 클릭할 경우 합니다 **삭제** 단추를 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 이벤트는 두 개의 매개 변수를 사용 하 여 호출 됩니다. 하나의 매개 변수 `EmpID`에서 제공 되는 <xref:System.Web.UI.WebControls.DataGrid> 컨트롤을 기반으로 <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> 속성입니다. 선언적에서 제공 되는 다른 매개 변수가 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 속성입니다. 합니다 `EmployeeLogic` 오버 로드 클래스를 `DeleteEmployee` 메서드. 하나의 오버 로드는를 `NorthwindEmployee` 매개 변수 및 다른 하나는 <xref:System.Int32> 라는 매개 변수 `anID`합니다. 에 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 이벤트, 항목을 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> 속성 이라는 하나의 매개 변수를 포함 하도록 조정 됩니다 `anID` 에서 값을 사용 하 여 `original_EmpID`. 경우 이벤트 처리기가 일치 하는 `DeleteEmployee` 메서드가 호출 됩니다.  
  
 다음 코드 예제를 표시 하는 웹 페이지를 보여 줍니다.는 <xref:System.Web.UI.WebControls.DataGrid> 컨트롤과 핸들을 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 이벤트입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_11#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/CS/objds11cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_11#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/VB/objds11vb.aspx#1)]  
  
 다음 코드 예제는 `EmployeeLogic` 앞의 코드 예제에 사용 되는 클래스입니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_11#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/CS/northwindemployee11.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/VB/northwindemployee11.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Deleting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 작업 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리를 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 매개 변수의 값을 확인 하거나 전에 매개 변수 값을 변경 하려면 애플리케이션에 관련 된 추가 초기화를 수행 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 삭제 작업을 수행 합니다. 매개 변수를 사용할 수는 <xref:System.Collections.IDictionary> 액세스 하는 컬렉션을 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> 속성에 의해 노출 되는 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> 개체입니다.  
  
 설정 하 여 삭제 작업을 취소할 수 있습니다는 <xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> 에 `true`입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 개체 및 <xref:System.Web.UI.WebControls.GridView> 컨트롤 데이터를 삭제 합니다. 두 번째 코드 예에서는 `EmployeeLogic` 첫 번째 코드 예제에 사용 되는 클래스입니다.  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 컨트롤 및 <xref:System.Web.UI.WebControls.GridView> 컨트롤 데이터를 삭제 합니다. 처음에 <xref:System.Web.UI.WebControls.GridView> 컨트롤 집합에 지정 된 메서드를 사용 하 여 모든 직원을 표시 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성에서 데이터를 검색 하는 `EmployeeLogic` 개체. 때문에 <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> 속성이 `true`의 <xref:System.Web.UI.WebControls.GridView> 컨트롤이 자동으로 표시를 **삭제** 단추입니다.  
  
 클릭할 경우는 **삭제** 단추를 삭제 작업에 지정 된 메서드를 사용 하 여 수행 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 속성 및 지정 된 매개 변수를 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 컬렉션입니다. 이 코드 예제에서는 몇 가지 전처리 및 후 처리 단계도 수행 됩니다. `NorthwindEmployeeDeleting` 대리자를 처리 하기 위해 호출 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 작업을 수행 하려면 먼저 이벤트 및 `NorthwindEmployeeDeleted` 대리자를 처리 하기 위해 호출 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> 예외 처리를 수행 하는 작업이 완료 된 후 이벤트입니다. 이 코드 예제에서는 하는 경우는 `NorthwindDataException` 는 의해 처리 될 throw를 `NorthwindEmployeeDeleted` 메서드.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 다음 코드 예제는 `EmployeeLogic` 앞의 코드 예제에 사용 되는 클래스입니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 컨트롤에서 데이터 캐싱이 활성화되어 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>데이터 소스 컨트롤에서 데이터 캐싱을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 데이터 캐싱을 지원 합니다. 데이터 캐시 되어 있는 동안에 호출을 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 캐시에서 데이터를 검색 하는 메서드 대신 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체의 인스턴스를 만들고 데이터 메서드를 호출 합니다. 캐시가 만료 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드는 비즈니스 개체에서 데이터를 검색 하 고 다시 데이터를 캐시 합니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤은 자동으로 데이터를 캐시 때 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 속성이 `true` 및 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 속성 캐시에 캐시 엔트리 이전의 데이터가 저장 되는 시간 (초) 수를 나타내는 0 보다 큰 값으로 설정 됩니다 삭제 됩니다. 값이 0 무한정 캐시를 나타냅니다.  
  
   
  
## Examples  
 다음 세 가지 예제에는 웹 페이지, 코드 숨김 페이지 클래스 및 Northwind 데이터베이스의 Employees 테이블에서 레코드를 검색 하는 데이터 액세스 클래스를 보여 줍니다.  
  
 첫 번째 예제 두 개가 포함 된 웹 페이지를 보여 줍니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.DropDownList> 컨트롤 및 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다. 첫 번째 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 및 <xref:System.Web.UI.WebControls.DropDownList> 검색 하 고 데이터베이스에서 직원 이름이 표시 되는 컨트롤입니다. 두 번째 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 및 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤 검색 하 고 사용자가 선택한 직원 레코드를 표시 하는 데 사용 됩니다.  
  
 캐싱을 사용할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어 합니다. 따라서 각 레코드는 한 번만 데이터베이스에서 검색 됩니다. <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> "EmployeeDetails" 속성이 있지만 임의의 문자열 값을 키로 작업할 수 있습니다. 웹 페이지도 포함 되어 있습니다를 <xref:System.Web.UI.WebControls.Button> 캐시 된 데이터를 만료 하기 위해 클릭할 수 있는 컨트롤입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx#3)]  
  
 두 번째 예제에 대 한 처리기를 보여 줍니다.는 <xref:System.Web.UI.Control.Load> 이벤트 및 처리기는 <xref:System.Web.UI.WebControls.Button.Click> 의 이벤트는 <xref:System.Web.UI.WebControls.Button> 컨트롤입니다. 합니다 <xref:System.Web.UI.Control.Load> 이벤트 처리기로 키를 사용 하 여 캐시 항목을 만듭니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 값입니다. 합니다 <xref:System.Web.UI.WebControls.Button.Click> 키가 같은 캐시 항목을 제거 하는 이벤트 처리기는 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 값입니다. 캐시 항목이 제거 되 면 키에 종속 된 모든 캐시 된 데이터가 만료 되었습니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx.vb#4)]  
  
 세 번째 예제에서는 Northwind 데이터베이스와 상호 작용 하는 데이터 액세스 클래스를 보여 줍니다. 클래스는 LINQ를 사용 하 여 직원 테이블을 쿼리 합니다. 이 예제에서는 LINQ to SQL 클래스는 Northwind 데이터베이스를 나타내고 Employees 테이블에 필요 합니다. 자세한 내용은 [방법: 만들 LINQ to SQL 클래스를 웹 프로젝트에서](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" /> 속성으로 지정된 메서드가 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />를 반환할 때 <see cref="T:System.Data.Common.DbDataReader" /> 속성이 <see langword="true" />로 설정되어 있는 경우</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="EnablePaging">
      <MemberSignature Language="C#" Value="public bool EnablePaging { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePaging" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePaging As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePaging { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnablePaging : bool with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 소스 컨트롤에서 검색된 데이터 집합을 통해 페이징을 지원하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>데이터 소스 컨트롤에서 검색된 데이터에 대해 페이징을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 페이징 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤을 설정 하 여 처리 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSource> 적절 한 매개 변수를 사용 하 여 비즈니스 개체에서 선택 메서드를 정의 하 고 합니다. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> 속성이 `true`, <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 컬렉션은 요청 되는 첫 번째 행 및 요청 된 행의 수에 대 한 두 개의 추가 매개 변수를 포함 합니다. 이러한 두 매개 변수 이름이 정의 된 대로 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> 및 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 속성입니다. `Select` 메서드 요청된 수가 지정된 된 인덱스에서 시작 하는 행을 반환 해야 합니다. 데이터 페이지 크기에 따라 균등 하 게 나누지 수 있으므로 마지막 페이지 적은 수의 행을 포함할 수 있습니다. 따라서 요청 된 행의 수는 실제로 반환 되는 행의 최대 수 있습니다.  
  
 데이터 바인딩된 컨트롤을 호출 하는 페이징 연결된 된 데이터 바인딩된 컨트롤에 사용 되는 경우는 `Select` 요청 된 행의 수와 시작 인덱스를 사용 하 여 메서드. 또한 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 속성이 설정 되 면 데이터 바인딩된 컨트롤의 페이저 컨트롤을 렌더링 하기 전에 메서드를 호출 합니다. 예를 들어 경우는 <xref:System.Web.UI.WebControls.GridView> 컨트롤에서 페이징을 사용 하 여 지정 된 메서드와 5, 페이지 크기가 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 20을 반환 하는 속성, 호출기에 4 개의 페이지만 표시 됩니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> 에 위임 하는 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 개체.  
  
   
  
## Examples  
 다음 세 가지 예제에는 웹 페이지, 코드 숨김 페이지 클래스 및 사용자는 페이지에 표시 된 레코드 수를 선택할 수 있도록 데이터 액세스 클래스를 보여 줍니다.  
  
 웹 페이지에는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> 속성이 `true`합니다. <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 쿼리에서 레코드의 총 수를 반환 하는 메서드의 이름으로 설정 합니다. 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 속성 및 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> 속성 선택 메서드에서 사용 되는 매개 변수의 이름으로 설정 됩니다. 페이지는 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 두 번째 예제에 대 한 처리기를 보여 줍니다.는 <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType> 의 이벤트는 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다. 처리기 집합의 코드는 <xref:System.Web.UI.WebControls.GridView.PageSize%2A> 속성을 사용자의 선택 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 세 번째 예제에서는 Customers 테이블에서 데이터를 검색 하는 데이터 액세스 클래스를 보여 줍니다. 라는 메서드를 포함 `GetSubsetOfEmployees`에 할당 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤입니다. 예제에는 또한 라는 메서드 `GetEmployeeCount`에 할당 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤입니다. LINQ를 사용 하 여 Customers 테이블을 쿼리 하는 클래스입니다. 이 예제에서는 LINQ to SQL 클래스 Northwind 데이터베이스와 Customers 테이블을 나타내는 필요 합니다. 자세한 내용은 [방법: 만들 LINQ to SQL 클래스를 웹 프로젝트에서](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterExpression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterExpression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FilterExpression : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 속성으로 지정된 메서드가 호출될 때 적용되는 필터링 식을 가져오거나 설정합니다.</summary>
        <value><see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 속성으로 식별된 메서드나 함수를 사용하여 데이터를 검색할 때 적용되는 필터링 식을 나타내는 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 데이터 필터링을 지원 경우에만 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드가 반환 되는 <xref:System.Data.DataSet> 또는 <xref:System.Data.DataTable> 개체입니다.  
  
 에 사용 되는 구문을 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 속성은 형식 문자열 스타일 식입니다. 필터 식 구문은에 허용 되는 동일한 구문을 <xref:System.Data.DataColumn.Expression%2A> 속성입니다. 매개 변수를 추가 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 컬렉션 형식 문자열 자리 표시자를 포함할 수도 있습니다. 예를 들어 `"{0}"` 식 매개 변수 값으로 대체 합니다. 매개 변수의 인덱스에 따라 자리 표시자는는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 컬렉션입니다.  
  
 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 속성입니다. 매개 변수 형식의 문자열 또는 문자 형식이 면 매개 변수를 작은따옴표로 묶습니다. 매개 변수가 숫자 형식인 경우에 따옴표 필요 하지 않습니다.  
  
 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 컬렉션에 있는 자리 표시자에 대 한 계산 되는 매개 변수를 포함 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 속성입니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 에 위임 하는 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 개체와 연결 된는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤.  
  
> [!NOTE]
>  클라이언트에서 받은 모든 필터 매개 변수 값을 확인 해야 합니다. 매개 변수 값은 필터 식으로 대체 및에 적용 하기만 하면 런타임에서 <xref:System.Data.DataSet> 또는 <xref:System.Data.DataTable> 에서 반환 되는 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드. 사용 중인 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 필터링이 발생 하기 전에 매개 변수 값의 유효성을 검사 해야 반환 되는 항목의 수를 제한 하려면 보안 조치로 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에 사용 하 여 필터링 된 데이터를 표시 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 중간 계층 비즈니스 개체에서 데이터를 검색 하는 컨트롤 및 <xref:System.Web.UI.WebControls.GridView> 결과 표시 하는 컨트롤입니다. 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어로 데이터를 검색 하는 메서드를 검색 하는 경우에 데이터를 필터링 할 수는 <xref:System.Data.DataSet> 또는 <xref:System.Data.DataTable> 개체입니다. 이러한 이유로 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 데이터를 검색 하는 비즈니스 개체 메서드를 식별 하는 속성을 <xref:System.Data.DataSet>.  
  
 코드 예제에서는 구성를 <xref:System.Web.UI.WebControls.TextBox> 컨트롤을 <xref:System.Web.UI.WebControls.GridView> 컨트롤을 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 및 **제출** 단추. 기본적으로 <xref:System.Web.UI.WebControls.TextBox> Northwind Traders 직원 중 하나의 이름으로 채워집니다. 합니다 <xref:System.Web.UI.WebControls.GridView> 에서 이름으로 식별 되는 직원에 대 한 정보를 표시 합니다 <xref:System.Web.UI.WebControls.TextBox>합니다. 다른 직원에 대 한 데이터를 검색 하려면 직원의 전체 이름을 입력 합니다 <xref:System.Web.UI.WebControls.TextBox>를 클릭 하 고는 **제출** 단추입니다.  
  
 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 속성에 지정 된 메서드에 의해 검색 되는 데이터를 필터링 하는 데 사용 되는 식을 지정 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성입니다. 에 포함 된 매개 변수를 계산 되는 매개 변수 자리 표시자를 사용 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 컬렉션입니다. 이 예제에서는 매개 변수 자리 표시자는 공백을 포함할 수 있는 문자열 형식 매개 변수 형식의 작은따옴표 제한 됩니다. 매개 변수 형식의 숫자 또는 날짜 형식인 경우에 따옴표가 필요 하지 않습니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 다음 코드 예제에서는 앞의 코드 예제를 사용 하는 중간 계층 비즈니스 개체의 예제를 제공 합니다. 코드 예제에서는 두 개의 기본 클래스로 이루어져 있습니다.  
  
-   `EmployeeLogic` 클래스는 비즈니스 논리를 캡슐화 하는 클래스입니다.  
  
-   `NorthwindEmployee` 클래스를 로드 하 고 데이터 계층에서 데이터를 유지 하는 데 필요한 기본적인 기능만 포함 하는 모델 클래스입니다.  
  
 간단히 하기 위해는 `EmployeeLogic` 클래스는 데이터 계층에서 데이터를 검색 하는 것이 아니라 데이터의 정적 집합을 만듭니다. 필터링을 보여 주기 위해 Northwind Traders 직원의 전체 이름을 제공 하는 샘플을 실행 하기 때문에 예를 들어도 유용 합니다. 전체 작업 예제를 컴파일 및 제공 되는 Web Forms 코드 예제를 사용 하 여 이러한 클래스를 사용 해야 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 속성이 설정되어 있고 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 메서드가 <see cref="T:System.Data.DataSet" /> 또는 <see cref="T:System.Data.DataTable" />를 반환하지 않는 경우</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Filtering As ObjectDataSourceFilteringEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceFilteringEventHandler ^ Filtering;" />
      <MemberSignature Language="F#" Value="member this.Filtering : System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler " Usage="member this.Filtering : System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>필터 작업 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리를 <xref:System.Web.UI.WebControls.ObjectDataSource.Filtering> 하기 전에 필터 매개 변수 값에 대 한 유효성 검사 작업을 수행 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 필터 작업을 수행 합니다. 설정 하 여 선택한 작업을 취소할 수 있습니다는 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs> 에 `true`입니다. 경우에 이벤트가 발생 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 속성을 설정 합니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Filtering?displayProperty=nameWithType> 에 위임 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=nameWithType> 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 연관 된를 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤입니다.  
  
> [!IMPORTANT]
>  클라이언트에서 받은 모든 필터 매개 변수 값을 확인 해야 합니다. 매개 변수 값은 필터 식으로 대체 및에 적용 하기만 하면 런타임에서 <xref:System.Data.DataSet> 또는 <xref:System.Data.DataTable> 에서 반환 되는 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드. 사용 중인 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 필터링이 발생 하기 전에 매개 변수 값의 유효성을 검사 해야 반환 되는 항목의 수를 제한 하려면 보안 조치로 속성입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ FilterParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilterParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 문자열의 모든 매개 변수 자리 표시자와 연결된 매개 변수 컬렉션을 가져옵니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" /> 속성에 있는 모든 매개 변수 자리 표시자와 연결된 매개 변수 집합을 포함하는 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 데이터 필터링을 지원 경우에만 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드가 반환 되는 <xref:System.Data.DataSet> 또는 <xref:System.Data.DataTable> 개체입니다.  
  
 에 사용 되는 구문을 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 형식 문자열 스타일 식입니다. 필터 식 구문은에 허용 되는 동일한 구문을 <xref:System.Data.DataColumn.Expression%2A> 속성입니다. 매개 변수를 추가 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 컬렉션 형식 문자열 자리 표시자를 포함할 수도 있습니다. 예를 들어 `"{0}"` 식 매개 변수 값으로 대체 합니다. 매개 변수의 인덱스에 따라 자리 표시자는는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 컬렉션입니다.  
  
 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 속성입니다. 매개 변수 문자열 또는 문자 형식이 면 매개 변수를 작은따옴표로 묶습니다. 매개 변수가 숫자 형식인 경우에 따옴표 필요 하지 않습니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 속성 검색을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A> 속성에 포함 된를 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 연관 된 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에 사용 하 여 필터링 된 데이터를 표시 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 중간 계층 비즈니스 개체에서 데이터를 검색 하는 개체 및 <xref:System.Web.UI.WebControls.GridView> 결과 표시 하는 컨트롤입니다. 두 번째 코드 예제에서는 첫 번째 코드 예제에 사용 되는 중간 계층 비즈니스 개체의 예제를 제공 합니다.  
  
 다음 코드 예제에 사용 하 여 필터링 된 데이터를 표시 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 중간 계층 비즈니스 개체에서 데이터를 검색 하는 컨트롤 및 <xref:System.Web.UI.WebControls.GridView> 결과 표시 하는 컨트롤입니다. 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어로 데이터를 검색 하는 메서드를 검색 하는 경우에 데이터를 필터링 할 수는 <xref:System.Data.DataSet> 또는 <xref:System.Data.DataTable> 개체입니다. 이러한 이유로 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 데이터를 검색 하는 비즈니스 개체 메서드를 식별 하는 속성을 <xref:System.Data.DataSet>.  
  
 코드 예제에서는 구성를 <xref:System.Web.UI.WebControls.TextBox> 컨트롤을 <xref:System.Web.UI.WebControls.GridView> 컨트롤을 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 및 **제출** 단추. 기본적으로 <xref:System.Web.UI.WebControls.TextBox> Northwind Traders 직원 중 하나의 이름으로 채워집니다. 합니다 <xref:System.Web.UI.WebControls.GridView> 에서 이름으로 식별 되는 직원에 대 한 정보를 표시 합니다 <xref:System.Web.UI.WebControls.TextBox>합니다. 다른 직원에 대 한 데이터를 검색할 합니다 <xref:System.Web.UI.WebControls.TextBox>해당 직원의 전체 이름을 입력 하 고 클릭 합니다 **제출** 단추.  
  
 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 속성에서 검색 된 데이터를 필터링 하는 데 사용 되는 식을 지정 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성입니다. 에 포함 된 매개 변수를 계산 되는 매개 변수 자리 표시자를 사용 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 컬렉션입니다. 이 예제에서는 매개 변수 자리 표시자는 공백을 포함할 수 있는 문자열 형식 매개 변수 형식의 작은따옴표 제한 됩니다. 매개 변수 형식의 숫자 또는 날짜 형식인 경우에 따옴표가 필요 하지 않습니다. <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 하나의 매개 변수를 포함 하는 컬렉션을 <xref:System.Web.UI.WebControls.FormParameter> 바인딩되는 개체는 <xref:System.Web.UI.WebControls.TextBox> 컨트롤입니다.  
  
> [!IMPORTANT]
>  클라이언트에서 받은 모든 필터 매개 변수 값을 확인 해야 합니다. 매개 변수 값은 필터 식으로 대체 및에 적용 하기만 하면 런타임에서 <xref:System.Data.DataView> 에서 반환 되는 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드. 사용 중인 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 필터링이 발생 하기 전에 매개 변수 값의 유효성을 검사 해야 반환 되는 항목의 수를 제한 하려면 보안 조치로 속성입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 다음 코드 예제에서는 앞의 코드 예제를 사용 하는 중간 계층 비즈니스 개체의 예제를 제공 합니다. 코드 예제에서는 두 개의 기본 클래스로 이루어져 있습니다.  
  
-   `EmployeeLogic` 클래스는 비즈니스 논리를 캡슐화 하는 클래스입니다.  
  
-   `NorthwindEmployee` 클래스를 로드 하 고 데이터 계층에서 데이터를 유지 하는 데 필요한 기본적인 기능만 포함 하는 모델 클래스입니다.  
  
 간단히 하기 위해는 `EmployeeLogic` 클래스는 데이터 계층에서 데이터를 검색 하는 것이 아니라 데이터의 정적 집합을 만듭니다. 필터링을 보여 주기 위해 Northwind Traders 직원의 전체 이름을 제공 하는 샘플을 실행 하기 때문에 예를 들어도 유용 합니다. 전체 작업 예제를 컴파일 및 제공 되는 Web Forms 코드 예제를 사용 하 여 이러한 클래스를 사용 해야 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 속성이 설정되어 있고 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 메서드에서 <see cref="T:System.Data.DataSet" /> 또는 <see cref="T:System.Data.DataTable" />을 반환하지 않는 경우</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="objectDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">검색할 뷰의 이름입니다. <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />는 한 개의 뷰만 지원하기 때문에 <paramref name="viewName" />은 무시됩니다.</param>
        <summary>데이터 소스 컨트롤이 연결된 명명된 데이터 소스 뷰를 검색합니다.</summary>
        <returns><see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />와 연결된 <see langword="DefaultView" />라는 이름의 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤은 하나의 데이터 원본 뷰를 지원 합니다. 모든 데이터 원본 보기 개체와 마찬가지로 데이터 원본 컨트롤과 연결된 <xref:System.Web.UI.WebControls.ObjectDataSourceView>은 해당 기능을 정의하고 기본 데이터 스토리지에서 데이터를 검색하는 데 필요한 모든 작업을 수행하고 정렬, 삽입, 삭제 및 업데이트와 같은 작업을 수행합니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> 메서드 페이지 코드가 아니라 데이터 바인딩된 컨트롤에서 호출 될 것입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">지정된 <paramref name="viewName" />이 <see langword="null" />이거나 <see langword="DefaultView" />가 아닌 경우</exception>
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.GetViewNames" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="objectDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체와 연결된 뷰 개체의 목록을 나타내는 이름의 컬렉션을 검색합니다.</summary>
        <returns><see cref="T:System.Collections.ICollection" />와 연결된 뷰의 이름이 들어 있는 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어 라는 하나의 뷰만 지원 `DefaultView`, 해당 기본 데이터에 대해 합니다. <xref:System.Web.UI.WebControls.ObjectDataSource.GetViewNames%2A> 메서드는이 보기 이름의 단일 요소 컬렉션을 반환 합니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.GetViewNames%2A> 메서드 페이지 코드가 아니라 데이터 바인딩된 컨트롤에서 호출 될 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert();" />
      <MemberSignature Language="F#" Value="member this.Insert : unit -&gt; int" Usage="objectDataSource.Insert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" /> 속성으로 식별되는 메서드와 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" /> 컬렉션의 매개 변수를 호출하여 삽입 작업을 수행합니다.</summary>
        <returns>내부 데이터 스토리지로 삽입되는 행 수를 나타내는 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 전에 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 작업을 수행할를 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A> 메서드를 호출 발생 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 이벤트. 처리할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 이벤트 매개 변수의 값을 검사 하 고 이전 전처리를 수행할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 작업 합니다. 삽입 작업을 수행 하는 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 로 식별 되는 개체의 인스턴스를 만들 하기 위해는 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 속성. 다음으로 식별 되는 메서드를 호출 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 속성에 연결 된 모든를 사용 하 여 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 속성입니다. 후는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 작업이 완료 되 면 합니다 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A> 메서드를 호출 발생 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> 이벤트. 처리할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> 이벤트 모든 반환 값과 출력 매개 변수 예외를 검사 하 고 후 처리를 수행할 수 있습니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 연관 된를 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤입니다.  
  
 매개 변수가 병합, 개체 수명 및 방법 확인 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>합니다.  
  
## <a name="data-bound-controls"></a>데이터 바인딩된 컨트롤  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource> 개체와 같은 데이터 바인딩된 컨트롤을 사용 하 여 연결 된 합니다 <xref:System.Web.UI.WebControls.GridView> 컨트롤 필요 없는 호출 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 페이지 코드에서 메서드. <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 메서드 대신 데이터 바인딩된 컨트롤에서 직접 호출 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/a806fa2c-fe6a-405f-869c-74e804a642ea">연습: 데이터를 사용자 지정 비즈니스 개체에 바인딩</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Inserted : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" /> 작업이 완료되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리를 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> 반환 값 또는 출력 매개 변수의 값을 확인 하거나 후 예외가 throw 되었는지 여부를 확인 하려면 이벤트는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 작업이 완료 합니다. 반환 값, 출력 매개 변수 및 예외 처리 속성에서 사용할 수는 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> 이벤트와 연결 된 개체입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Inserting : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" /> 작업 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리를 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 매개 변수의 값을 확인 하거나 전에 매개 변수 값을 변경 하려면 애플리케이션에 관련 된 추가 초기화를 수행 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 삽입 작업을 수행 합니다. 매개 변수를 사용할 수는 <xref:System.Collections.IDictionary> 액세스 하는 컬렉션을 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> 속성에 의해 노출 되는 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> 개체입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 개체 및 <xref:System.Web.UI.WebControls.DetailsView> 데이터 삽입을 제어 합니다. 두 번째 코드 예제에서는 첫 번째 코드 예제에 사용 되는 중간 계층 비즈니스 개체의 예제를 제공 합니다.  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 컨트롤 및 <xref:System.Web.UI.WebControls.DetailsView> 데이터 삽입을 제어 합니다. 처음에 <xref:System.Web.UI.WebControls.DetailsView> 새 표시 `NorthwindEmployee` 와 함께 자동으로 생성 된 레코드 **삽입** 단추입니다. 데이터의 필드에 입력 한 후 합니다 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤을 클릭 합니다 **삽입** 단추입니다. <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 속성 삽입 작업을 수행 하는 메서드를 식별 합니다.  
  
 이 예제에서는 합니다 `UpdateEmployeeInfo` 그러나; 메서드는 삽입을 수행 하는 `NorthwindEmployee` 데이터를 삽입 하려면 매개 변수입니다. 따라서 컬렉션 하는 문자열을 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤 전달 자동으로 충분 하지 않습니다. `NorthwindEmployeeInserting` 대리자가는 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> 처리 하는 개체를 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 이벤트 이전 입력된 매개 변수를 조작할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 작업 진행 합니다. 때문에 합니다 `UpdateEmployeeInfo` 메서드를 사용 하려면를 `NorthwindEmployee` 개체를 매개 변수로 하나 문자열의 컬렉션을 사용 하 여 추가할 합니다 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> 매개 변수 이름을 사용 하 여 컬렉션 (`ne`) 메서드에 필요한 합니다. 형식 및 사용에 맞게 설계 되지 않은 메서드를 사용 하 여 데이터 원본으로 기존 중간 계층 개체를 사용 하는 경우에 다음과 같은 단계를 수행할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어 합니다.  
  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 작업을 수행할로 식별 되는 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 속성 이라고 합니다. 경우는 `Insert` 개체의 메서드가 매개 변수를 포함 하는 메서드 시그니처를 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 컬렉션에 대 한 메서드 시그니처 매개 변수와 일치 하는 이름 가진 매개 변수가 포함 되어야 합니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 성공적으로 완료 하는 방법입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/objds4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/objds4vb.aspx#1)]  
  
 다음 코드 예제에서는 앞의 코드 예제를 사용 하는 중간 계층 비즈니스 개체의 예제를 제공 합니다. 코드 예제에서는 두 개의 기본 클래스로 이루어져 있습니다.  
  
-   `EmployeeLogic` 비즈니스 논리를 캡슐화 하는 상태 비저장 클래스 클래스.  
  
-   `NorthwindEmployee` 클래스를 로드 하 고 데이터 계층에서 데이터를 유지 하는 데 필요한 기본적인 기능만 포함 하는 모델 클래스입니다.  
  
 추가 `NorthwindDataException` 클래스는 편의 위해 제공 됩니다. 전체 작업 예제를 컴파일 및 이러한 클래스를 사용 해야 합니다. `UpdateEmployeeInfo` 메서드 구현 되지 않은 완전히 하지 삽입할 데이터 Northwind Traders 데이터베이스이 예제를 테스트할 때 있도록 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/northwindemployee4.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/northwindemployee4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="InsertMethod">
      <MemberSignature Language="C#" Value="public string InsertMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InsertMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 컨트롤에서 데이터 삽입을 위해 호출하는 메서드나 함수의 이름을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.ObjectDataSource" />에서 데이터를 삽입할 때 사용하는 메서드나 함수의 이름을 나타내는 문자열입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비즈니스 개체는 한 번에 아닌 일괄 처리 데이터 하나의 레코드를 삽입으로 간주 됩니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 에 위임 하는 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 개체와 연결 된는 <xref:System.Web.UI.WebControls.ObjectDataSource> 개체.  
  
## <a name="object-lifetime"></a>개체 수명  
 로 식별 되는 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 속성에는 인스턴스 메서드 일 수 있습니다 또는 `static` (`Shared` Visual Basic에서) 메서드. 인스턴스 메서드인 경우 비즈니스 개체가 만들어지고 소멸 될 때마다 지정 된 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 속성 이라고 합니다. 처리할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 하기 전에 비즈니스 개체를 사용 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 속성 이라고 합니다. 처리할 수도 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 메서드를 지정 된 후 발생 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 속성 이라고 합니다. 비즈니스 개체를 구현 하는 경우는 <xref:System.IDisposable> 인터페이스는 <xref:System.IDisposable.Dispose%2A> 개체를 제거 하기 전에 호출 됩니다. 방법이 `static` (`Shared` Visual Basic의), 비즈니스 개체 생성 되지 않고 처리할 수 없는 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 이벤트입니다.  
  
## <a name="parameter-merging"></a>병합 하는 매개 변수  
 매개 변수가 추가 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 다음 세 가지 소스의 컬렉션:  
  
-   런타임에 데이터 바인딩된 컨트롤입니다.  
  
-   `InsertParameters` 요소를 선언적으로 합니다.  
  
-   `Inserting` 메서드를 프로그래밍 방식으로 합니다.  
  
 데이터 바인딩된 컨트롤에서 생성 된 모든 매개 변수가 먼저 추가 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 컬렉션입니다. 예를 들어 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 바인딩되는 <xref:System.Web.UI.WebControls.GridView> 열이 있는 컨트롤 `Name` 및 `Number`에 대 한 매개 변수 `Name` 및 `Number` 컬렉션에 추가 됩니다. 이러한 매개 변수의 데이터 형식은 `string`합니다. 다음으로에 나와 있는 매개 변수는 `InsertParameters` 요소가 추가 됩니다. 경우에 매개 변수를 `InsertParameters` 에 이미 있는 매개 변수로 동일한 이름을 가진 요소가 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 기존 매개 변수 컬렉션에 지정 된 매개 변수와 일치 하도록 수정 됩니다는 `InsertParameters` 요소. 일반적으로이 매개 변수의 데이터 형식을 수정 하려면 사용 됩니다. 마지막으로 프로그래밍 방식으로 추가 및 제거할 수의 매개 변수를 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 하기 전에 발생 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 메서드를 실행 합니다. 메서드는 매개 변수를 병합 된 후 확인 됩니다. 메서드 확인은 다음 섹션에 설명 되어 있습니다.  
  
> [!IMPORTANT]
>  클라이언트에서 받은 모든 매개 변수 값을 확인 해야 합니다. 런타임에 매개 변수 값을 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 속성입니다.  
  
## <a name="method-resolution"></a>메서드 확인  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 메서드를 호출할 매개 변수에서 선언적으로 생성 된 데이터 바인딩된 컨트롤에서 데이터 필드를 `InsertParameters` 요소 및에 추가 된 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 이벤트 처리기 모두 병합 됩니다. (자세한 내용은 이전 섹션 참조). <xref:System.Web.UI.WebControls.ObjectDataSource> 개체 호출할 메서드를 찾으려고 시도 합니다. 에 지정 된 이름 가진 하나 이상의 메서드를 찾습니다 먼저는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 속성입니다. 일치 하는 항목이 없으면는 <xref:System.InvalidOperationException> 예외가 throw 됩니다. 일치 하는 항목이 있으면 매개 변수 이름과 일치 하는 찾습니다. 예를 들어 지정 된 형식 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 속성이 라는 두 개의 메서드도 `InsertARecord`합니다. 하나의 `InsertARecord` 하나의 매개 변수가 `ID`, 및 다른 `InsertARecord` 두 매개 변수가 `Name` 및 `Number`합니다. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 컬렉션에 명명 된 매개 변수만 `ID`의 `InsertARecord` 메서드를만 `ID` 매개 변수 라고 합니다. 메서드를 확인 하는 데 매개 변수의 형식을 확인 하지 않습니다. 매개 변수의 순서는 중요 하지 않습니다.  
  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성, 메서드를 다른 방식으로 확인 됩니다. <xref:System.Web.UI.WebControls.ObjectDataSource> 에 지정 된 이름의 메서드를 찾습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 는 매개 변수 형식 중 하나를 사용 하는 속성에 지정 된 된 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성. 이 경우 매개 변수의 이름을 중요 하지 않습니다.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 개체 및 <xref:System.Web.UI.WebControls.DetailsView> 데이터 삽입을 제어 합니다. 두 번째 코드 예제에서는 첫 번째 코드 예제에 사용 되는 중간 계층 비즈니스 개체의 예제를 제공 합니다.  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 컨트롤 및 <xref:System.Web.UI.WebControls.DetailsView> 데이터 삽입을 제어 합니다. 처음에 <xref:System.Web.UI.WebControls.DetailsView> 새 표시 `NorthwindEmployee` 와 함께 자동으로 생성 된 레코드 **삽입** 단추입니다. 데이터의 필드에 입력 한 후 합니다 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤을 클릭 합니다 **삽입** 단추입니다. <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 속성 삽입 작업을 수행 하는 메서드를 식별 합니다.  
  
 이 예제에서는 합니다 `UpdateEmployeeInfo` 그러나; 메서드는 삽입을 수행 하는 `NorthwindEmployee` 데이터를 삽입 하려면 매개 변수입니다. 따라서 컬렉션 하는 문자열을 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤 전달 자동으로 충분 하지 않습니다. `NorthwindEmployeeInserting` 대리자가는 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> 처리 하는 개체를 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 이벤트 이전 입력된 매개 변수를 조작할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 작업 진행 합니다. 때문에 합니다 `UpdateEmployeeInfo` 메서드를 사용 하려면를 `NorthwindEmployee` 개체를 매개 변수로 하나 문자열의 컬렉션을 사용 하 여 추가할 합니다 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> 매개 변수 이름을 사용 하 여 컬렉션 (`ne`) 메서드에 필요한 합니다. 형식 및 사용에 맞게 설계 되지 않은 메서드를 사용 하 여 데이터 원본으로 기존 중간 계층 개체를 사용 하는 경우에 다음과 같은 단계를 수행할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어 합니다.  
  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 작업을 수행할로 식별 되는 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 속성 이라고 합니다. 경우는 `Insert` 개체의 메서드가 매개 변수를 포함 하는 메서드 시그니처를 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 컬렉션에 대 한 메서드 시그니처 매개 변수와 일치 하는 이름 가진 매개 변수가 포함 되어야 합니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 성공적으로 완료 하는 방법입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/objds4cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/objds4vb.aspx#1)]  
  
 다음 코드 예제에서는 앞의 코드 예제를 사용 하는 중간 계층 비즈니스 개체의 예제를 제공 합니다. 코드 예제에서는 두 개의 기본 클래스로 이루어져 있습니다.  
  
-   `EmployeeLogic` 비즈니스 논리를 캡슐화 하는 상태 비저장 클래스 클래스.  
  
-   `NorthwindEmployee` 클래스를 로드 하 고 데이터 계층에서 데이터를 유지 하는 데 필요한 기본적인 기능만 포함 하는 모델 클래스입니다.  
  
 추가 `NorthwindDataException` 클래스는 편의 위해 제공 됩니다. 전체 작업 예제를 컴파일 및 이러한 클래스를 사용 해야 합니다. `UpdateEmployeeInfo` 메서드 구현 되지 않은 완전히 하지 삽입할 데이터 Northwind Traders 데이터베이스이 예제를 테스트할 때 있도록 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/northwindemployee4.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/northwindemployee4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">Entity Framework 및 ObjectDataSource 컨트롤을 사용 하 여</related>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" /> 속성에서 사용하는 매개 변수가 포함된 매개 변수 컬렉션을 가져옵니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" /> 속성으로 식별되는 메서드에서 사용하는 매개 변수가 포함된 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이름 및 형식에 포함 된 매개 변수를 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 컬렉션 이름 및에 매개 변수의 형식과 일치 해야 합니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 속성 서명 합니다. 매개 변수 이름은 대/소문자를 구분 합니다. 와 같은 매개 변수를 제공 하는 데이터 바인딩된 컨트롤을 사용 하는 경우는 <xref:System.Web.UI.WebControls.GridView> 및 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤을 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어 되는 매개 변수를 사용 하 여 컬렉션에 명시적으로 지정 된 매개 변수를 자동으로 병합 데이터 바인딩된 컨트롤에서 제공합니다. 데이터 바인딩된 컨트롤에는 항상 해당 매개 변수를 제공 하기 때문에이 중요 <xref:System.String> 형식이 있고 메서드 시그니처에 숫자 또는 날짜 형식을 명시적으로 지정 해야 하는 경우의 매개 변수를 포함 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 에 올바른 형식의 컬렉션입니다. 그렇지 않은 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 컬렉션에서 매개 변수로 정의 된 형식에 따라 매개 변수를 캐스팅 하 려 합니다. 자세한 내용은 [ObjectDataSource 컨트롤을 사용 하 여 매개 변수를 사용 하 여](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)입니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 속성 검색을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A> 속성에 포함 된를 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 연관 된를 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤입니다.  
  
 매개 변수가 병합, 개체 수명 및 방법 확인 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>합니다.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 개체 및 <xref:System.Web.UI.WebControls.DetailsView> 데이터 삽입을 제어 합니다. 두 번째 코드 예의 예제 구현을 제공 합니다 `Insert` 첫 번째 코드 예제에 사용 되는 메서드.  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 컨트롤 및 <xref:System.Web.UI.WebControls.DetailsView> 데이터 삽입을 제어 합니다. 처음에 <xref:System.Web.UI.WebControls.DetailsView> 새 데이터를 입력할 수 있는 텍스트 상자를 표시 `NorthwindEmployee` 와 함께 자동으로 생성 된 레코드 **삽입** 단추입니다. 데이터의 필드에 입력 한 후 합니다 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤을 클릭 합니다 **삽입** 단추입니다. <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 속성 삽입 작업을 수행 하는 메서드를 식별 합니다.  
  
 클릭 하면를 **삽입** 단추를 작업으로 지정 된 메서드를 사용 하 여 수행 됩니다 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 속성 및 지정 된 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 컬렉션. 이 코드 예제에서는 하나의 매개 변수는에 지정 된 된 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 감독자의 ID에 해당 하는 컬렉션 ID에 표시 되는 경우에 이므로이 <xref:System.Web.UI.WebControls.GridView.Rows%2A> 컬렉션에 대 한는 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤을 <xref:System.Web.UI.WebControls.BoundField> 개체에 문자열로 전달 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤. 명시적으로 추가 하 여는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 사용 하 여 컬렉션을 <xref:System.Web.UI.WebControls.Parameter.Type%2A> 속성이로 설정는 <xref:System.TypeCode.Int32> 값으로 전달 됩니다에서 올바르게를 <xref:System.Web.UI.WebControls.ObjectDataSource> 메서드에으로 <xref:System.Int32>아니라 문자열.  
  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 작업을 수행할로 식별 되는 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 속성 이라고 합니다. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 개체의 메서드가 매개 변수를 포함 하는 메서드 시그니처를 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 컬렉션에 대 한 메서드 시그니처 매개 변수와 일치 하는 이름의 매개 변수가 포함 되어야 합니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 성공적으로 완료 하는 방법입니다.  
  
> [!IMPORTANT]
>  클라이언트에서 받은 모든 매개 변수 값을 확인 해야 합니다. 런타임에 매개 변수 값을 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 속성입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/CS/objds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/VB/objds8vb.aspx#1)]  
  
 다음 코드 예제에서는의 예제 구현을 제공 합니다 `Insert` 앞의 코드 예제를 사용 하는 메서드. `InsertNewEmployeeWrapper` 메서드가 추가 되는 `EmployeeLogic` 에서 제공 되는 중간 계층 개체를 <xref:System.Web.UI.WebControls.ObjectDataSource> 개체를 보다 쉽게 작업할 수 있도록 클래스 개요를 <xref:System.Web.UI.WebControls.ObjectDataSource> 실제 쓰지 않고도 웹 시나리오에서 비즈니스 논리입니다.  
  
 예제를 실행 하려면 해야 합니다 `NorthwindEmployee` 에서 제공 되는 클래스는 <xref:System.Web.UI.WebControls.ObjectDataSource> 클래스 개요입니다. 연결 하는 방법만 보여 주는이 예제는 <xref:System.Web.UI.WebControls.ObjectDataSource> 하는 비즈니스 개체 메서드 매개 변수를 사용 하 여 새 데이터베이스 레코드에 대 한 데이터를 가져옵니다. 예제 추가 하지 않습니다 레코드를 데이터베이스에 있으므로 합니다 `Save` 메서드는 `NorthwindEmployee` 클래스는 데이터베이스를 업데이트 하는 코드를 포함 하지 않습니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_8#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/CS/northwindemployee8.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/VB/northwindemployee8.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="objectDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">해당 컨트롤에 저장된 뷰 상태 값이 들어 있는 개체입니다.</param>
        <summary>이전에 저장된 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 컨트롤의 뷰 상태를 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는.NET Framework 인프라에서 기본적으로 사용 하며 사용자 코드에서 직접 사용할 수 없습니다. 그러나 컨트롤 개발자가 사용자 지정 서버 컨트롤에서 해당 뷰 상태를 복원 하는 방법을 지정 하려면이 메서드를 재정의할 수 있습니다. 자세한 내용은 [ASP.NET 상태 관리 개요](https://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce(v=vs.100))합니다.  
  
 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.LoadViewState%2A> 메서드를 사용 하 여 이전에 저장 된 뷰 상태를 로드 하는 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어 합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)" /> 메서드는 주로 컨트롤 개발자가 확장할 때 사용 합니다 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 컨트롤입니다.</para></block>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="MaximumRowsParameterName">
      <MemberSignature Language="C#" Value="public string MaximumRowsParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MaximumRowsParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumRowsParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MaximumRowsParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumRowsParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("maximumRows")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 소스 페이징을 지원하게 위해 검색할 레코드의 수를 나타내는 데 사용되는 비즈니스 개체 데이터 검색 메서드 매개 변수의 이름을 가져오거나 설정합니다.</summary>
        <value>검색할 레코드의 수를 나타내는 데 사용되는 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 매개 변수의 이름입니다. 기본값은 <c>"maximumRows"</c>합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 속성은 데이터 소스 페이징을 지원 하는 데 사용 됩니다. 페이징을 지 원하는 방법에 대 한 자세한 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어를 참조 하십시오 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>합니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 에 위임 하는 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 개체와 연결 된는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤.  
  
   
  
## Examples  
 다음 세 가지 예제에는 웹 페이지, 코드 숨김 페이지 클래스 및 사용자는 페이지에 표시 된 레코드 수를 선택할 수 있도록 데이터 액세스 클래스를 보여 줍니다.  
  
 웹 페이지에는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> 속성이 `true`합니다. <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 쿼리에서 레코드의 총 수를 반환 하는 메서드의 이름으로 설정 합니다. 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 속성 및 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> 속성 선택 메서드에서 사용 되는 매개 변수의 이름으로 설정 됩니다. 페이지는 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 두 번째 예제에 대 한 처리기를 보여 줍니다.는 <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType> 의 이벤트는 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다. 처리기 집합의 코드는 <xref:System.Web.UI.WebControls.GridView.PageSize%2A> 속성을 사용자의 선택 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 세 번째 예제에서는 Customers 테이블에서 데이터를 검색 하는 데이터 액세스 클래스를 보여 줍니다. 라는 메서드를 포함 `GetSubsetOfEmployees`에 할당 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤입니다. 예제에는 또한 라는 메서드 `GetEmployeeCount`에 할당 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤입니다. LINQ를 사용 하 여 Customers 테이블을 쿼리 하는 클래스입니다. 이 예제에서는 LINQ to SQL 클래스 Northwind 데이터베이스와 Customers 테이블을 나타내는 필요 합니다. 자세한 내용은 [방법: 만들 LINQ to SQL 클래스를 웹 프로젝트에서](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectCreated As ObjectDataSourceObjectEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceObjectEventHandler ^ ObjectCreated;" />
      <MemberSignature Language="F#" Value="member this.ObjectCreated : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " Usage="member this.ObjectCreated : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> 속성으로 식별되는 개체가 만들어진 후 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리를 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 비즈니스 개체의 다른 메서드를 호출 하는 이벤트 속성을 설정 또는 먼저 비즈니스 개체에 관련 된 다른 초기화를 수행 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 개체 데이터 작업을 수행할 비즈니스 개체 데이터 메서드를 호출 합니다. . 개체에 대 한 참조를 통해 액세스 하는 합니다 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> 속성에 의해 노출 되는 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> 개체.  
  
 경우 데이터 작업을 수행 하려면 식별 되는 메서드는 `static` (`Shared` Visual Basic에서), <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 고 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 이벤트는 발생 하지 않습니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="ObjectCreating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectCreating As ObjectDataSourceObjectEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceObjectEventHandler ^ ObjectCreating;" />
      <MemberSignature Language="F#" Value="member this.ObjectCreating : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " Usage="member this.ObjectCreating : System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> 속성으로 식별되는 개체가 만들어지기 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 데이터 작업을 수행 하려면 식별 되는 메서드는 `static` (`Shared` Visual Basic에서), <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 고 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 이벤트는 발생 하지 않습니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 리플렉션을 사용 하 여 해당 인스턴스를 만들려면 비즈니스 개체의 기본 생성자를 자동으로 호출 하는 컨트롤입니다. 처리를 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 이벤트를 명시적으로 다른 생성자를 호출 하 고 결과 개체의 인스턴스를 설정 합니다 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> 속성은 연결 된 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> 개체입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 개체 및 <xref:System.Web.UI.WebControls.GridView> 정보를 표시 하는 컨트롤입니다. 두 번째 코드 예제에서는 첫 번째 코드 예제에 사용 되는 중간 계층 비즈니스 개체를 제공 합니다.  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 컨트롤 및 <xref:System.Web.UI.WebControls.GridView> 정보를 표시 하는 컨트롤입니다. 웹 페이지에서 수행 하는 모든 데이터 작업에 대 한 만들기 (시간 또는 리소스) 측면에서 비용이 많이 하는 비즈니스 개체를 사용 하 여 작업할 수 있습니다. 비용이 많이 드는 개체를 사용 하는 한 가지 방법은 해당 인스턴스를 한 번 만들어를 만들고 모든 데이터 작업에 대 한 제거 하는 대신 다음 작업에 캐시 될 수 있습니다.  
  
> [!NOTE]
>  프로덕션 애플리케이션에서는 여러 요청이 동시에 동일한 인스턴스를 사용 하 여 생길 수 있습니다. 따라서 개체는 스레드로부터 안전한 방식으로 구현 해야 합니다.  
  
 이 코드 예제에서는이 패턴을 보여 줍니다. 처리할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 이벤트 개체에 대 한 캐시를 먼저 확인 하 고 이미 캐시 되지 않으면만 개체의 인스턴스를 만듭니다. 그런 다음 처리를 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 이벤트를 제거 하는 대신 나중에 사용할 비즈니스 개체를 캐시 합니다. 이 코드 예제에서는 <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=nameWithType> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> 개체로 설정 됩니다 `true` 보내기 위해는 <xref:System.Web.UI.WebControls.ObjectDataSource> 를 호출 하지 않도록 <xref:System.IDisposable.Dispose%2A> 개체의 메서드를.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/objds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/objds16vb.aspx#1)]  
  
 다음 코드 예제에서는 앞의 코드 예제를 사용 하는 예제에서는 중간 계층 비즈니스 개체를 제공 합니다. 정의한 기본 비즈니스 개체의 코드 예제는는 `EmployeeLogic` 비즈니스 논리를 캡슐화 하는 상태 저장 클래스 클래스. 전체 작업 예제를 보려면이 코드를 라이브러리로 컴파일하고 ASP.NET 페이지 (.aspx 파일)에서 이러한 클래스를 사용 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/northwindemployee16.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/northwindemployee16.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnObjectCreating(System.Web.UI.WebControls.ObjectDataSourceEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="ObjectDisposing">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectDisposing As ObjectDataSourceDisposingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceDisposingEventHandler ^ ObjectDisposing;" />
      <MemberSignature Language="F#" Value="member this.ObjectDisposing : System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler " Usage="member this.ObjectDisposing : System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> 속성으로 식별되는 개체가 삭제되기 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 이벤트는 비즈니스 개체의 인스턴스가 삭제 되기 전에 항상 발생 합니다. 비즈니스 개체를 구현 하는 경우는 <xref:System.IDisposable> 인터페이스는 <xref:System.IDisposable.Dispose%2A> 이 이벤트가 발생 한 후 호출 됩니다.  
  
 처리는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 개체에서 다른 메서드를 호출 하는 이벤트 속성을 설정 또는 개체를 제거 하기 전에 개체에 관련 된 정리를 수행 합니다. 개체에 대 한 참조를 통해 액세스 하는 합니다 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> 속성에 의해 노출 되는 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> 개체.  
  
 사용 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤에 대 한 처리기에서 데이터 컨텍스트 클래스의 삭제 취소 해야 합니다는 LINQ to SQL 클래스를 사용 하 여는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 이벤트입니다. 이 단계는 필요한 LINQ to SQL에서는 지연 된 실행을 지원 하기 때문에 반면는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 선택 작업 후 데이터 컨텍스트를 삭제 하려고 합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 개체 및 <xref:System.Web.UI.WebControls.GridView> 정보를 표시 하는 컨트롤입니다. 두 번째 코드 예제에서는 첫 번째 코드 예제에 사용 되는 중간 계층 비즈니스 개체를 제공 합니다.  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 비즈니스 개체를 사용 하 여 컨트롤 및 <xref:System.Web.UI.WebControls.GridView> 정보를 표시 하는 컨트롤입니다. 웹 페이지에서 수행 하는 모든 데이터 작업에 대 한 만들기 (시간 또는 리소스) 측면에서 비용이 많이 하는 비즈니스 개체를 사용 하 여 작업할 수 있습니다. 비용이 많이 드는 개체를 사용 하는 한 가지 방법은 해당 인스턴스를 한 번 만들어를 만들고 모든 데이터 작업에 대 한 제거 하는 대신 다음 작업에 캐시 될 수 있습니다. 이 예제에서는이 패턴을 보여 줍니다. 처리할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 이벤트 개체에 대 한 캐시를 먼저 확인 하 고 이미 캐시 되지 않으면만의 인스턴스를 만듭니다. 그런 다음 처리를 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 이벤트를 제거 하는 대신 나중에 사용할 비즈니스 개체를 캐시 합니다. 이 코드 예제에서는 <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=nameWithType> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> 개체로 설정 됩니다 `true` 보내기 위해를 <xref:System.Web.UI.WebControls.ObjectDataSource> 를 호출 하지 않도록를 <xref:System.IDisposable.Dispose%2A> 개체의 메서드를.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/objds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/objds16vb.aspx#1)]  
  
 다음 코드 예제에서는 앞의 코드 예제를 사용 하는 예제에서는 중간 계층 비즈니스 개체를 제공 합니다. 정의한 기본 비즈니스 개체의 코드 예제는는 `EmployeeLogic` 비즈니스 논리를 캡슐화 하는 상태 저장 클래스 클래스. 전체 작업 예제를 보려면이 코드를 라이브러리로 컴파일하고 ASP.NET 페이지 (.aspx 파일)에서 이러한 클래스를 사용 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/northwindemployee16.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/northwindemployee16.vb#2)]  
  
 다음 예제에서는 처리 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 이벤트를 사용 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource> LINQ to SQL 클래스를 사용 하 여 제어 합니다.  
  
```vb  
Public Sub ExampleObjectDisposing(ByVal sender As Object, _   
        ByVal e As ObjectDataSourceDisposingEventArgs)  
    e.Cancel = True  
End Sub  
```  
  
```csharp  
public void ExampleObjectDisposing(object sender,   
        ObjectDataSourceDisposingEventArgs e)  
{  
    e.Cancel = true;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property OldValuesParameterFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OldValuesParameterFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OldValuesParameterFormatString : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Delete" /> 또는 <see langword="Update" /> 메서드에 전달된 원래 값에 대한 매개 변수의 이름에 적용할 서식 문자열을 가져오거나 설정합니다.</summary>
        <value><see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 또는 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 메서드에 전달된 모든 <paramref name="oldValues" /> 또는 키 매개 변수의 이름에 적용된 서식 문자열을 나타내는 문자열입니다. 기본값은 <c>"{0}"</c>, 필드 이름은 매개 변수 이름을 의미 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> 속성으로 표시 된 것과 같은 기본 키에 적용 됩니다를 `DataKeyNames` 삭제 또는 데이터 바인딩된 컨트롤의 속성 업데이트 시나리오 및 위치를 <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> 속성를 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 값 및 원래 값 집합과 해당 하는 데이터 메서드에 전달 됩니다.  
  
 다음은 변경할 수 있는 두 가지 일반적인 시나리오는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> 속성:  
  
-   업데이트의 이전 및 새 값을 구분 하는 속성을 변경 수 있습니다. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> 속성을 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 값, 매개 변수는 원래 및 새 값에 추가 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 컬렉션. 서식 문자열을 사용 하지 않고 이름이 같은 두 개의 매개 변수는 각 데이터 필드에 대해 만들어집니다. 원래 값 매개 변수의 이름을 변경 하 여 충돌을 감지 하 고 키 값을 비교 하 여 원래 데이터 원본에 데이터를 비교할 수 있습니다.  
  
-   일부 비주얼 디자이너에는 원래 값 및 키에 대 한 특정 명명 체계를 구현 합니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 에 위임 하는 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 개체와 연결 된는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="objectDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
        <summary><see cref="E:System.Web.UI.Page.LoadComplete" /> 이벤트 처리기를 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 컨트롤이 포함된 페이지에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Web.UI.WebControls.ObjectDataSource.OnInit%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>재정의 하는 경우는 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)" /> 파생된 클래스에서 메서드를 호출 해야 합니다 <see cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" /> 대리자를 등록 하는 기본 클래스의 메서드는 이벤트를 받도록 합니다.</para></block>
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <altmember cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="ParsingCulture">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParsingCulture ParsingCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ParsingCulture ParsingCulture" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ParsingCulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ParsingCulture As ParsingCulture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParsingCulture ParsingCulture { System::Web::UI::WebControls::ParsingCulture get(); void set(System::Web::UI::WebControls::ParsingCulture value); };" />
      <MemberSignature Language="F#" Value="member this.ParsingCulture : System.Web.UI.WebControls.ParsingCulture with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.ParsingCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParsingCulture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />이 나타내는 형식의 개체를 생성하기 위해 문자열 값을 실제 속성 형식으로 변환할 때 사용되는 문화권 정보를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>문화권 정보입니다. 기본값은 <see cref="F:System.Web.UI.WebControls.ParsingCulture.Invariant" />입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="objectDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.ObjectDataSource" />컨트롤의 상태를 저장합니다.</summary>
        <returns>서버 컨트롤의 현재 뷰 상태를 반환합니다. 컨트롤과 연결된 뷰 상태가 없는 경우에는 <see langword="null" />을 반환합니다.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IStateManager.SaveViewState" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Function Select () As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; System.Collections.IEnumerable" Usage="objectDataSource.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 속성으로 식별되는 메서드를 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" /> 컬렉션의 매개 변수와 함께 호출하여 내부 데이터 스토리지에서 데이터를 검색합니다.</summary>
        <returns>데이터 행의 <see cref="T:System.Collections.IEnumerable" /> 목록입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정된 된 메서드는 모든 메서드 시그니처를 가질 수 있지만 반환 하거나에 대 한 다음 표에 나열 된 형식 중 하나에서 파생 되어야 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 성공적으로 호출할 수는 컨트롤입니다.  
  
|반환 형식|작업|  
|-----------------|------------|  
|<xref:System.Collections.IEnumerable>|합니다 <xref:System.Collections.IEnumerable> 에서 반환 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드.|  
|<xref:System.Data.DataTable>|<xref:System.Data.DataView> 사용 하 여 만들어집니다 합니다 <xref:System.Data.DataTable> 반환한는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드.|  
|<xref:System.Data.DataView>|합니다 <xref:System.Data.DataView> 에서 반환 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드.|  
|<xref:System.Data.DataSet>|첫 번째 <xref:System.Data.DataTable> 의 합니다 <xref:System.Data.DataSet> 추출 및 <xref:System.Data.DataView> 만들어지고 반환한는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드.|  
|<xref:System.Object>|개체 단일 요소에 래핑됩니다 <xref:System.Collections.IEnumerable> 컬렉션에서 반환 된 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드.|  
  
 로 식별 되는 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성에는 인스턴스 메서드 일 수 있습니다 또는 `static` (`Shared` Visual Basic에서) 메서드. 인스턴스 메서드인 경우 비즈니스 개체가 만들어지고 소멸 될 때마다 지정 된 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 제외 하 고 동일한 인스턴스에 의해 지정 된 메서드를 호출 하는 속성은 호출 된 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성 및 지정 된 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 속성입니다. 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드가 반환 되는 <xref:System.Collections.IEnumerable> 인터페이스입니다. 그러나 캐싱 및 필터링 시나리오를 사용 하려면 반환 값 이어야 합니다는 <xref:System.Data.DataSet> 개체입니다. 하는 동안를 <xref:System.Data.DataSet> 클래스를 구현 하지 않습니다는 <xref:System.Collections.IEnumerable> 인터페이스는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 자동으로 기본값을 추출 <xref:System.Data.DataView> 컨트롤을 구현 하는 <xref:System.Collections.IEnumerable>합니다.  
  
 전에 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 작업을 수행할를 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A> 메서드를 호출 발생 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 이벤트. 처리할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 이벤트 매개 변수의 값을 검사 하 고 이전 전처리를 수행할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 작업 합니다. 데이터 검색 작업을 수행 하는 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 로 식별 되는 개체의 인스턴스를 만들 하기 위해는 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 속성. 다음으로 식별 되는 메서드를 호출 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성에 연결 된 모든를 사용 하 여 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 속성입니다. 후는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 작업이 완료 되 면 합니다 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A> 메서드를 호출 발생 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 이벤트. 처리할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 이벤트 모든 반환 값과 출력 매개 변수 예외를 검사 하 고 후 처리를 수행할 수 있습니다.  
  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성에서 반환을 <xref:System.Data.DataSet>, <xref:System.Data.DataTable>, 또는 <xref:System.Data.DataView> 개체 및 캐싱을 사용 하도록 설정 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 에서 데이터를 검색 하는 동안 캐시에 데이터를 저장 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 작업. 캐시가 만들어지는, 삭제 또는 새로 고침의 조합에 의해 지정 된 캐싱 동작을 기반으로 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 고 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 속성입니다.  
  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성이 반환을 <xref:System.Data.DataSet> 또는 <xref:System.Data.DataTable> 개체 및 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 속성이 지정 된, 제공 된를 사용 하 여 계산 됩니다 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 속성 및 결과 필터 목록 중에 데이터에 적용 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 작업 합니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 연관 된를 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤입니다.  
  
 매개 변수가 병합, 개체 수명 및 방법 확인 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>합니다.  
  
## <a name="data-bound-controls"></a>데이터 바인딩된 컨트롤  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어와 같은 데이터 바인딩된 컨트롤을 사용 하 여 연결 된 합니다 <xref:System.Web.UI.WebControls.GridView> 컨트롤 필요 없는 호출 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 페이지 코드에서 메서드. <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드 대신 데이터 바인딩된 컨트롤에서 직접 호출 됩니다.  
  
   
  
## Examples  
 코드 예제를 보려면 <xref:System.Web.UI.WebControls.ObjectDataSource>를 참조하세요.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="SelectCountMethod">
      <MemberSignature Language="C#" Value="public string SelectCountMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCountMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCountMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectCountMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCountMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 컨트롤이 행 수를 검색할 때 호출하는 메서드나 함수의 이름을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.ObjectDataSource" />가 행 수를 검색할 때 사용하는 메서드나 함수의 이름을 나타내는 문자열입니다. 이 메서드는 정수(<see cref="T:System.Int32" />)를 반환해야 합니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 속성은 데이터 소스 페이징을 지원 하기 위해 총 행 수를 검색 하는 데 사용 되는 비즈니스 개체 메서드를 식별 합니다. <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 속성은 경우에 평가 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> 속성이 `true`.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 에 위임 하는 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 개체와 연결 된는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤. 페이징을 지 원하는 방법에 대 한 자세한 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어를 참조 하십시오 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>합니다.  
  
   
  
## Examples  
 다음 세 가지 예제에는 웹 페이지, 코드 숨김 페이지 클래스 및 사용자는 페이지에 표시 된 레코드 수를 선택할 수 있도록 데이터 액세스 클래스를 보여 줍니다.  
  
 웹 페이지에는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> 속성이 `true`합니다. <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 쿼리에서 레코드의 총 수를 반환 하는 메서드의 이름으로 설정 합니다. 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 속성 및 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> 속성 선택 메서드에서 사용 되는 매개 변수의 이름으로 설정 됩니다. 페이지는 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 두 번째 예제에 대 한 처리기를 보여 줍니다.는 <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType> 의 이벤트는 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다. 처리기 집합의 코드는 <xref:System.Web.UI.WebControls.GridView.PageSize%2A> 속성을 사용자의 선택 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 세 번째 예제에서는 Customers 테이블에서 데이터를 검색 하는 데이터 액세스 클래스를 보여 줍니다. 라는 메서드를 포함 `GetSubsetOfEmployees`에 할당 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤입니다. 예제에는 또한 라는 메서드 `GetEmployeeCount`에 할당 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤입니다. LINQ를 사용 하 여 Customers 테이블을 쿼리 하는 클래스입니다. 이 예제에서는 LINQ to SQL 클래스 Northwind 데이터베이스와 Customers 테이블을 나타내는 필요 합니다. 자세한 내용은 [방법: 만들 LINQ to SQL 클래스를 웹 프로젝트에서](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanRetrieveTotalRowCount" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Selected : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 작업이 완료되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리를 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 반환 값 또는 출력 매개 변수의 값을 확인 하거나 후 예외가 throw 되었는지 여부를 확인 하려면 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 작업이 완료 합니다. 반환 값, 출력 매개 변수 및 예외 처리 속성에서 사용할 수는 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> 이벤트와 연결 된 개체입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 세 가지 예제에는 웹 페이지, 코드 숨김 페이지 클래스 및 사용자를 검색 하 고 Northwind 데이터베이스의 Employees 테이블의 레코드를 업데이트할 수 있도록 데이터 액세스 클래스를 보여 줍니다.  
  
 첫 번째 예제 두 개가 포함 된 웹 페이지를 보여 줍니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.DropDownList> 컨트롤 및 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다. 첫 번째 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 및 <xref:System.Web.UI.WebControls.DropDownList> 검색 하 고 데이터베이스에서 직원 이름이 표시 되는 컨트롤입니다. 두 번째 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 및 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤은 검색, 표시 및 사용자가 선택 되어 직원 레코드의 데이터를 수정 하는 데 사용 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 두 번째 예제에 대 한 처리기를 표시 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 및 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 이벤트입니다. <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 이벤트 처리기는 Employee 테이블 로부터 검색 된 데이터를 포함 하는 개체를 serialize 합니다. 직렬화 된 개체는 뷰 상태에 저장 됩니다. <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 업데이트 되는 데이터 레코드에 대 한 원본 데이터가 포함 된 뷰 상태에 개체를 역직렬화 하는 이벤트 처리기입니다. 원래 데이터를 포함 하는 개체는 Update 메서드를 매개 변수로 전달 됩니다. 다른 프로세스에서 데이터를 수정 되었는지 여부를 검사할 수 있도록 원래 데이터를 데이터베이스에 전달 되어야 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 세 번째 예제에서는 Northwind 데이터베이스와 상호 작용 하는 데이터 액세스 클래스를 보여 줍니다. 클래스는 LINQ를 사용 하 여 쿼리하고 Employees 테이블을 업데이트 합니다. 이 예제에서는 LINQ to SQL 클래스 Northwind 데이터베이스 및 직원 테이블을 나타내는 필요 합니다. 자세한 내용은 [방법: 만들 LINQ to SQL 클래스를 웹 프로젝트에서](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As ObjectDataSourceSelectingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceSelectingEventHandler ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler " Usage="member this.Selecting : System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 작업 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리를 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 매개 변수의 값을 확인 하거나 전에 매개 변수 값을 변경 하려면 애플리케이션에 관련 된 추가 초기화를 수행 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 데이터 검색 작업을 수행 합니다. 매개 변수를 사용할 수는 <xref:System.Collections.IDictionary> 액세스 하는 컬렉션을 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> 속성에 의해 노출 되는 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> 개체입니다.  
  
 에 대 한 단일 호출 하기 위해이 이벤트를 발생 시킬 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드를 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 속성을 설정 합니다. 합니다 <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs> 개체 선택 된를 호출 하 여 데이터를 검색 하거나 검색할 수를 결정 하는 합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="SelectMethod">
      <MemberSignature Language="C#" Value="public string SelectMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SelectMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 컨트롤이 데이터를 검색할 때 호출하는 메서드나 함수의 이름을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.ObjectDataSource" />에서 데이터를 검색할 때 사용하는 메서드나 함수의 이름을 나타내는 문자열입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정된 된 메서드는 모든 메서드 시그니처를 가질 수 있지만 다음 표에 나온 형식 중 하나를 반환 하는 <xref:System.Web.UI.WebControls.ObjectDataSource> 성공적으로 호출할 수는 컨트롤입니다.  
  
|반환 형식|작업|  
|-----------------|------------|  
|<xref:System.Collections.IEnumerable>|합니다 <xref:System.Collections.IEnumerable> 에서 반환 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드.|  
|<xref:System.Data.DataTable>|A <xref:System.Data.DataView> 사용 하 여 만들어집니다 합니다 <xref:System.Data.DataTable> 반환한 및는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드.|  
|<xref:System.Data.DataView>|A <xref:System.Data.DataView> 에서 반환 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드.|  
|<xref:System.Data.DataSet>|첫 번째 <xref:System.Data.DataTable> 의 합니다 <xref:System.Data.DataSet> 추출 됩니다 및 <xref:System.Data.DataView> 만들어지고 반환한는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드.|  
|<xref:System.Object>|개체 단일 요소에 래핑됩니다 <xref:System.Collections.IEnumerable> 컬렉션에서 반환 된 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드.|  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 에 위임 하는 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 개체와 연결 된는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤.  
  
 사용 하는 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource> 클래스를 삭제 하거나 데이터를 업데이트, 매개 변수 이름에 대 한 구성 되었는지 확인 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 에서 제어할 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 컬렉션 또는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 컬렉션 select 메서드에 의해 반환 되는 열 이름과 일치 .  
  
## <a name="object-lifetime"></a>개체 수명  
 로 식별 되는 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성에는 인스턴스 메서드 일 수 있습니다 또는 `static` (`Shared` Visual Basic에서) 메서드. 인스턴스 메서드인 경우 비즈니스 개체가 만들어지고 소멸 될 때마다 지정 된 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성 이라고 합니다. 처리할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 에 지정 된 메서드 앞에 비즈니스 개체를 사용 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성 이라고 합니다. 처리할 수도 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 메서드를 지정 된 후 발생 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성 이라고 합니다. 비즈니스 개체를 구현 하는 경우는 <xref:System.IDisposable> 인터페이스는 <xref:System.IDisposable.Dispose%2A> 개체를 제거 하기 전에 호출 됩니다. 방법이 `static` (`Shared` Visual Basic의), 비즈니스 개체 생성 되지 않고 처리할 수 없는 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 이벤트입니다.  
  
## <a name="parameter-merging"></a>병합 하는 매개 변수  
 매개 변수가 추가 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 이러한 원본에서 컬렉션:  
  
-   선언적으로 `SelectParameters` 요소입니다.  
  
-   프로그래밍 방식으로 `Selecting` 메서드.  
  
 먼저에 나열 된 매개 변수는 `SelectParameters` 요소가 추가 됩니다. 둘째, 매개 변수는 프로그래밍 방식으로 추가 및 제거에 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 하기 전에 발생 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드를 실행 합니다. 메서드는 매개 변수를 병합 된 후 확인 됩니다. 메서드 확인은 다음 섹션에 설명 되어 있습니다.  
  
> [!IMPORTANT]
>  클라이언트에서 받은 모든 매개 변수 값을 확인 해야 합니다. 런타임에 매개 변수 값을 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성입니다.  
  
## <a name="method-resolution"></a>메서드 확인  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드를 호출할 매개 변수에서 선언적으로 생성 된 데이터 바인딩된 컨트롤에서 데이터 필드를 `SelectParameters` 요소 및에 추가 된 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 이벤트 처리기 모두 병합 됩니다. (자세한 내용은 이전 섹션 참조). <xref:System.Web.UI.WebControls.ObjectDataSource> 호출할 메서드를 찾으려면 다음 시도 제어 합니다. 에 지정 된 이름 가진 하나 이상의 메서드를 찾습니다 먼저는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성입니다. 일치 하는 항목이 없으면는 <xref:System.InvalidOperationException> 예외가 throw 됩니다. 일치 하는 항목이 있으면 매개 변수 이름과 일치 하는 찾습니다. 예를 들어 지정 된 형식 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 속성이 라는 두 개의 메서드도 `SelectARecord`합니다. 하나의 `SelectARecord` 하나의 매개 변수가 `ID`, 및 다른 `SelectARecord` 두 매개 변수가 `Name` 및 `Number`합니다. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 컬렉션에 명명 된 매개 변수만 `ID`의 `SelectARecord` 메서드를만 `ID` 매개 변수 라고 합니다. 메서드를 확인 하는 데 매개 변수의 형식을 확인 하지 않습니다. 매개 변수의 순서는 중요 하지 않습니다.  
  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성, 메서드를 다른 방식으로 확인 됩니다. <xref:System.Web.UI.WebControls.ObjectDataSource> 에 지정 된 이름의 메서드를 찾습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 는 매개 변수 형식 중 하나를 사용 하는 속성에 지정 된 된 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성. 이 경우 매개 변수의 이름을 중요 하지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 어떻게를 <xref:System.Web.UI.WebControls.GridView> 컨트롤에서 사용 하 여 데이터를 표시할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource> Web Forms 페이지에 컨트롤입니다. <xref:System.Web.UI.WebControls.ObjectDataSource> 식별 하는 부분적으로 또는 완전히 정규화 된 클래스 이름을 해당 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 속성과 메서드를 사용 하 여 데이터를 검색 하기 위해 호출 됩니다 해당 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성입니다. 런타임 시 개체를 만든 및 리플렉션을 사용 하 여 메서드를 호출 합니다. <xref:System.Web.UI.WebControls.GridView> 컨트롤을 열거 합니다 <xref:System.Collections.IEnumerable> 컬렉션에서 지정 된 메서드에 의해 반환 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성 및 해당 데이터를 표시 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">Entity Framework 및 ObjectDataSource 컨트롤을 사용 하 여</related>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 속성에 지정된 메서드에서 사용하는 매개 변수의 컬렉션을 가져옵니다.</summary>
        <value><see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 속성에 지정된 메서드에서 사용하는 매개 변수의 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 속성을 가져옵니다는 <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 개체와 연결 된를 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤.  
  
 매개 변수를 추가 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 선언적으로 사용 하 여 컬렉션을 `SelectParameters` 요소 또는 처리기에서 프로그래밍 방식으로 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 이벤트. 런타임 시에 나열 된 매개 변수는 `SelectParameters` 먼저 요소를 컬렉션에 추가 됩니다. 매개 변수 컬렉션에 다음 추가 또는 제거에 대 한 처리기를 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 이벤트입니다. 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 이벤트가 발생 하기 전에 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드를 실행 합니다.  
  
 전에 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 이름 및에 포함 된 매개 변수의 형식에 메서드가 실행 될를 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 컬렉션에 지정 된 메서드의 시그니처와 일치 해야 합니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성입니다. 예를 들어 라는 선택 메서드 `GetEmployeesByStateAndAge` 사용을 `string` 및 매개 변수로 정수를 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 컬렉션에는 두 개의 매개 변수가 포함 되어야 합니다. 첫 번째 매개 변수를 문자열로 해결 해야 하 고 두 번째 매개 변수는 정수를 확인 해야 합니다. 태그에서 두 매개 변수를 지정할 수 있습니다는 `SelectParameters` 요소입니다. 수 또는 추가할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 이벤트 처리기 또는 1 개의 매개 변수가 태그에 추가 될 수 있으며 다른 하나는 프로그래밍 방식으로 추가할 수 있습니다.  
  
 자세한 내용은 [ObjectDataSource 컨트롤을 사용 하 여 매개 변수를 사용 하 여](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4) 하며 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod> 속성입니다.  
  
> [!IMPORTANT]
>  코드에 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 이벤트 처리기 또는 지정 된 메서드에서 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성을 클라이언트에서 수신 되는 모든 매개 변수 값의 유효성을 검사 하는 있는지 확인 합니다.  
  
   
  
## Examples  
 다음 코드 예제에 사용 하 여 단일 데이터 레코드를 검색 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤에 표시 하는 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다. <xref:System.Web.UI.WebControls.ObjectDataSource> 제어를 호출 하 여 특정 직원 레코드를 검색 합니다 `GetEmployee` 메서드의 `EmployeeLogic` 클래스. `GetEmployee` 메서드는 직원 ID 매개 변수가 필요 합니다. <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 사용 하는 `QueryStringParameter` 만들려는 태그 요소에에서는 <xref:System.Web.UI.WebControls.QueryStringParameter> URL에서 지정 된 쿼리 문자열 매개 변수의 값을 검색 하 고에 전달 하는 개체는 `GetEmployee` 메서드.  
  
 컨트롤 속성, 폼 필드, 쿠키, ASP.NET 프로필 데이터를 세션 상태와 같은 다른 원본에서 값을 검색 하려면 다른 매개 변수 클래스를 사용할 수 있습니다. 또한 select 메서드에 하드 코드 된 값을 전달 하기 위해 태그에 정의 된 매개 변수 개체를 사용할 수 있습니다. 사용할 수 있는 매개 변수 클래스에 대 한 자세한 내용은 참조 하세요. [필터링에 대 한 데이터 소스 컨트롤을 사용 하 여 매개 변수를 사용 하 여](https://msdn.microsoft.com/library/88622d04-2989-484e-93fe-594cd98dcf5f(v=vs.100))입니다.  
  
 이 예제를 실행 하려면 다음이 필요 합니다.  
  
-   명명 된 연결 문자열을 포함 하는 웹 사이트 `NorthwindConnection` 는 Northwind 데이터베이스에 연결 합니다. 자세한 내용은 참조는 <xref:System.Web.UI.WebControls.ObjectDataSource> 클래스 개요입니다.  
  
-   합니다 `EmployeeLogic` 코드 예제에 대 한 중 하나로 표시 되는 클래스는 <xref:System.Web.UI.WebControls.ObjectDataSource> 클래스 개요입니다. 클래스 파일을 App_Code 폴더에 있어야 합니다.  
  
-   .Aspx 페이지와 샘플 코드를 실행할 수 있습니다. 쿼리 문자열 매개 변수 없이 페이지를 요청 하면 오류 메시지가 표시 됩니다. 같은 쿼리 문자열을 사용 하 여 페이지를 요청 하는 경우 `?empid=1` .aspx 파일의 이름 뒤 요청한 직원에 대 한 세부 정보가 표시 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/CS/objds3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/VB/objds3vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SortParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property SortParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SortParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SortParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> 매개 변수에서 데이터 소스 정렬을 지원하기 위해 정렬 식을 지정하는 데 사용하는 비즈니스 개체의 이름을 가져오거나 설정합니다.</summary>
        <value>데이터 정렬에 사용되는 매개 변수를 나타내는 데 사용되는 메서드 매개 변수의 이름입니다. 기본값은 빈 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> 속성은 데이터 소스 정렬을 지원 하기 위해 사용 합니다. 경우는 <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> 속성이 설정 되어를 <xref:System.Web.UI.DataSourceSelectArguments> 개체를 전달할를 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드를를 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> 값의 매개 변수 이름을 식별는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 기준인 데이터 정렬 하는 비즈니스 개체 메서드.  
  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource> 뒤에 형식으로 쉼표로 구분 된 필드 값이 매개 변수 사용에 전달 되는 값을 데이터 바인딩된 컨트롤과 관련이 `"ASC"` 또는 `"DESC"`합니다. 예를 들어, 값에 오름차순 정렬 `Name` 것 `"Name ASC"`입니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> 에 위임 하는 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 개체와 연결 된는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에는 정렬을 지 원하는 형식을 구현 하는 방법을 보여 줍니다. 두 번째 코드 예제에는 정렬 식을 구현 하는 방법을 보여 줍니다.  
  
 다음 코드 예제에는 정렬을 지 원하는 형식을 구현 하는 방법을 보여 줍니다. 합니다 `SelectMethod` 의 합니다 `SortingData` 매개 변수를 사용 하는 클래스가 `sortExpression`합니다. 에 전달 되는 문자열 `SelectMethod` 에 사용 되는 <xref:System.Data.DataView.Sort%2A> 의 속성을 <xref:System.Data.DataView> 에서 반환 되는 개체 `SelectMethod`합니다.  
  
 [!code-csharp[ObjectDataSourceSorting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceSorting/CS/SortingData.cs#1)]
 [!code-vb[ObjectDataSourceSorting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceSorting/VB/SortingData.vb#1)]  
  
 다음 코드 예제에는 정렬 식을 구현 하는 방법을 보여 줍니다. 인스턴스를 만들고 웹 페이지의 코드는 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어 합니다. <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 속성이로 설정 되어 `SortingData` 하며 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> 속성이 `sortExpression`. 합니다 <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> 의 속성을 <xref:System.Web.UI.WebControls.GridView> 로 설정 되어 `true`입니다. 클릭할 때 합니다 **정렬** 단추, 필드 이름을 `Name` 또는 `Number`, 전달 됩니다 `SelectMethod` 정렬 매개 변수에서.  
  
 [!code-aspx-csharp[ObjectDataSourceSorting#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceSorting/CS/SortingDataExample.aspx#2)]
 [!code-aspx-vb[ObjectDataSourceSorting#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceSorting/VB/SortingDataExampleVB.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanSort" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="SqlCacheDependency">
      <MemberSignature Language="C#" Value="public virtual string SqlCacheDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SqlCacheDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SqlCacheDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SqlCacheDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SqlCacheDependency : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Microsoft SQL Server 캐시 종속성에 사용할 데이터베이스와 테이블을 지정하는 세미콜론으로 구분된 문자열을 가져오거나 설정합니다.</summary>
        <value>SQL Server 캐시 종속성에 사용할 데이터베이스와 테이블을 지정하는 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 지원의 기반이 되는 선택적 만료 정책을 <xref:System.Web.Caching.SqlCacheDependency> (데이터베이스 서버에 대 한 서비스를 구성 해야 합니다) 데이터 캐시에 대 한 개체입니다.  
  
 SQL Server는 캐시 무효화에 대 한 두 가지 메커니즘을 지원 합니다: 폴링 및 알림. 각 메커니즘에 대 한 다른 구문이 <xref:System.Web.Caching.SqlCacheDependency> 개체입니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 폴링만 지원 합니다. <xref:System.Web.Caching.SqlCacheDependency> 문자열 만드는 데 사용 되는 <xref:System.Data.SqlClient.SqlDependency> 에 전달 되는 개체를 <xref:System.Data.Common.DbCommand> 전에 생성자는 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 메서드를 실행 합니다. 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> 데이터베이스 및 테이블에서 사용 되는 동일한 형식에 따라 식별 하는 문자열을 `@ Page` 지시문을 문자열의 첫 번째 파트 인 SQL Server 데이터베이스에 연결 문자열 뒤에 콜론 구분 기호를 및 마지막 이름 데이터베이스 테이블의 (예를 들어 `"connectionstring1:table1"`). 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> 둘 이상의 테이블에 종속 속성, 연결 문자열 및 테이블 이름 쌍은 세미콜론으로 구분 됩니다 (예를 들어 `"connectionstring1:table1";connectionstring2:table2"`).  
  
 구현의 캐시 논리를 작성 해야 하는 알림을 지원 하려면 사용자 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성의 생성을 처리 하 고는 <xref:System.Web.Caching.SqlCacheDependency> 코드에서 개체입니다.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에는 SQL Server 캐시 종속성을 만들고 설정 하는 방법을 보여 줍니다. 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSource> 개체입니다. 두 번째 코드 예제에는 반환 하는 래퍼 메서드를 구현 하는 방법을 보여 줍니다.는 <xref:System.Data.DataSet> 캐싱 및 필터링을 사용 하는 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource> 개체입니다.  
  
 다음 코드 예제에는 SQL Server 캐시 종속성을 만들고 설정 하는 방법을 보여 줍니다. 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어 합니다. 이 예제에서는 데이터베이스 120 초 마다 폴링됩니다. Northwind Traders 직원의 데이터를 변경 하는 동안 시간 테이블에서 캐시 된 데이터를 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤을 표시 하 여는 <xref:System.Web.UI.WebControls.GridView> 컨트롤 만료 되 고 새 데이터 집합을 페이지에 대 한 다음 요청에서 검색 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_7/CS/objds7cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_7/VB/objds7vb.aspx#1)]  
  
 다음 코드 예제에는 반환 하는 래퍼 메서드를 구현 하는 방법을 보여 줍니다.는 <xref:System.Data.DataSet> 캐싱 및 필터링을 사용 하는 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어 합니다. 기본 구현에서 합니다 `EmployeeLogic` 클래스를 `GetAllEmployees` 메서드가 반환 되는 <xref:System.Collections.ArrayList> 개체. 완전히 사용 하려면 개체를 리팩터링 하는 대신를 <xref:System.Web.UI.WebControls.ObjectDataSource> 래퍼 메서드 라는 Web Forms 페이지에서 `GetAllEmployeesAsDataSet` 집합을 반환 하는 항목이 `NorthwindEmployee` 데이터를 <xref:System.Data.DataSet>입니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_5#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="StartRowIndexParameterName">
      <MemberSignature Language="C#" Value="public string StartRowIndexParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StartRowIndexParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property StartRowIndexParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StartRowIndexParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StartRowIndexParameterName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("startRowIndex")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 소스 페이징을 지원하기 위해 검색할 첫 번째 레코드의 식별자 값을 나타내는 데 사용되는 데이터 검색 메서드 매개 변수의 이름을 가져오거나 설정합니다.</summary>
        <value>검색할 첫 번째 레코드를 나타내는 데 사용되는 비즈니스 개체 메서드 매개 변수의 이름입니다. 이 매개 변수는 정수 값을 반환해야 합니다. 기본값은 <c>"startRowIndex"</c>합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> 속성은 데이터 소스 페이징을 지원 하는 데 사용 됩니다. 페이징을 지 원하는 방법에 대 한 자세한 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어를 참조 하십시오 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>합니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> 에 위임 하는 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 개체와 연결 된는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤.  
  
   
  
## Examples  
 다음 세 가지 예제에는 웹 페이지, 코드 숨김 페이지 클래스 및 사용자는 페이지에 표시 된 레코드 수를 선택할 수 있도록 데이터 액세스 클래스를 보여 줍니다.  
  
 웹 페이지에는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> 속성이 `true`합니다. <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 쿼리에서 레코드의 총 수를 반환 하는 메서드의 이름으로 설정 합니다. 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 속성 및 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> 속성 선택 메서드에서 사용 되는 매개 변수의 이름으로 설정 됩니다. 페이지는 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 두 번째 예제에 대 한 처리기를 보여 줍니다.는 <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=nameWithType> 의 이벤트는 <xref:System.Web.UI.WebControls.DropDownList> 제어 합니다. 처리기 집합의 코드는 <xref:System.Web.UI.WebControls.GridView.PageSize%2A> 속성을 사용자의 선택 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 세 번째 예제에서는 Customers 테이블에서 데이터를 검색 하는 데이터 액세스 클래스를 보여 줍니다. 라는 메서드를 포함 `GetSubsetOfEmployees`에 할당 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤입니다. 예제에는 또한 라는 메서드 `GetEmployeeCount`에 할당 되는 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 의 속성은 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤입니다. LINQ를 사용 하 여 Customers 테이블을 쿼리 하는 클래스입니다. 이 예제에서는 LINQ to SQL 클래스 Northwind 데이터베이스와 Customers 테이블을 나타내는 필요 합니다. 자세한 내용은 [방법: 만들 LINQ to SQL 클래스를 웹 프로젝트에서](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="objectDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 컨트롤의 뷰 상태 변경 내용을 <see cref="T:System.Web.UI.StateBag" /> 개체에 저장할 수 있도록 추적합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.ObjectDataSource.TrackViewState%2A> 메서드를 재정의 하는 개체에 대 한 뷰 상태의 일부로 컨트롤의 변경 내용을 추적 하 고 저장을 시작 하려면 시작 지점을 표시 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.TrackViewState" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체에서 나타내는 클래스의 이름을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.ObjectDataSource" />에서 나타내는 개체의 형식을 식별하는 부분적으로 정규화된 클래스 이름 또는 완전히 정규화된 클래스 이름입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 개체의 인스턴스를 만들는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 바인딩된, 컨트롤이 리플렉션을 사용 하 여 런타임 시 형식 이름으로 식별 되는 형식을 로드 합니다. 따라서 값을 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> Bin 또는 App_Code 디렉터리에 있는 코드는 부분적으로 정규화 된 형식 또는 전역 어셈블리 캐시에 등록 되어 있는 코드에 대 한 정규화 된 형식 이름을 속성 일 수 있습니다. 전역 어셈블리 캐시를 사용 하는 경우에 대 한 적절 한 참조를 추가 해야 합니다는 `assemblies` 합니다 Machine.config 또는 Web.config 파일의 섹션입니다.  
  
 형식을 처리 하지 않는 한 기본 생성자를 있어야는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 해당 인스턴스를 직접 만들어야 하는 이벤트입니다. 형식의 인스턴스를 호출할 때마다 만들어집니다 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 메서드, 형식에 메서드는 멤버입니다. 메서드는 인스턴스 생성 되지 않습니다 `static` (`Shared` Visual Basic에서). 형식을 구현 하는 경우는 <xref:System.IDisposable> 인터페이스는 <xref:System.IDisposable.Dispose%2A> 개체를 제거 하기 전에 호출 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 어떻게를 <xref:System.Web.UI.WebControls.GridView> 제어를 사용 하 여 데이터를 표시할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource> Web Forms 페이지에 컨트롤입니다. <xref:System.Web.UI.WebControls.ObjectDataSource> 식별 하는 부분적으로 또는 완전히 정규화 된 클래스 이름을 해당 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 속성과 메서드를 사용 하 여 데이터를 검색 하기 위해 호출 됩니다 해당 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성입니다. 런타임 시 개체를 만든 및 리플렉션을 사용 하 여 메서드를 호출 합니다. <xref:System.Web.UI.WebControls.GridView> 컨트롤을 열거 합니다 <xref:System.Collections.IEnumerable> 에서 반환 되는 컬렉션을 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 속성 및 해당 데이터를 표시 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 다음 예에서는 클래스를 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 속성 값을 가리킵니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      <MemberSignature Language="VB.NET" Value="Public Function Update () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update();" />
      <MemberSignature Language="F#" Value="member this.Update : unit -&gt; int" Usage="objectDataSource.Update " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> 속성으로 식별되는 메서드와 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" /> 컬렉션의 매개 변수를 호출하여 업데이트 작업을 수행합니다.</summary>
        <returns>내부 데이터 스토리지에서 업데이트되는 행 수를 나타내는 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비즈니스 개체는 한 번에 아닌 일괄 처리 데이터 하나의 레코드를 업데이트로 간주 됩니다.  
  
 전에 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 작업을 수행할를 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A> 메서드를 호출 발생 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 이벤트. 처리할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 이벤트 매개 변수의 값을 검사 하 고 이전 전처리를 수행할 수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 작업 합니다. 업데이트 작업을 수행 하는 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 개체 리플렉션을 사용 하 여로 식별 되는 개체의 인스턴스를 만들는 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 속성입니다. 다음으로 식별 되는 메서드를 호출 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 속성에 연결 된 모든를 사용 하 여 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 속성입니다. 후는 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 작업이 완료 되 면 합니다 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A> 메서드를 호출 발생 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> 이벤트. 처리할 수 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> 이벤트 모든 반환 값과 출력 매개 변수 예외를 검사 하 고 후 처리를 수행할 수 있습니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A> 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 연관 된를 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤입니다.  
  
 매개 변수가 병합, 개체 수명 및 방법 확인 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>합니다.  
  
> [!IMPORTANT]
>  클라이언트에서 받은 모든 매개 변수 값을 확인 해야 합니다. 런타임에 매개 변수 값을 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 속성입니다.  
  
## <a name="data-bound-controls"></a>데이터 바인딩된 컨트롤  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource> 제어와 같은 데이터 바인딩된 컨트롤을 사용 하 여 연결 된 합니다 <xref:System.Web.UI.WebControls.GridView> 컨트롤 필요 없는 호출 하는 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 페이지 코드에서 메서드. <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 메서드 대신 데이터 바인딩된 컨트롤에서 직접 호출 됩니다.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.DropDownList> 제어 <xref:System.Web.UI.WebControls.TextBox> 컨트롤 및 여러 <xref:System.Web.UI.WebControls.ObjectDataSource> 개체 데이터를 업데이트 합니다. 두 번째 코드 예에서는 `EmployeeLogic` 첫 번째 코드 예제에 사용 되는 클래스입니다.  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.DropDownList> 제어 <xref:System.Web.UI.WebControls.TextBox> 컨트롤 및 여러 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 데이터를 업데이트 합니다. 합니다 <xref:System.Web.UI.WebControls.DropDownList> Northwind 직원의 이름을 표시 하는 동안는 <xref:System.Web.UI.WebControls.TextBox> 컨트롤은 입력 하 고 주소 정보를 업데이트 하는 데 사용 됩니다. 때문에 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 컬렉션에 포함를 <xref:System.Web.UI.WebControls.ControlParameter> 의 선택된 된 값에 바인딩되는 개체를 <xref:System.Web.UI.WebControls.DropDownList>, 발생 하는 단추는 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 직원을 선택한 후에 작업을 사용 하도록 설정 합니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/objds12cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/objds12vb.aspx#1)]  
  
 다음 코드 예제는 `EmployeeLogic` 앞의 코드 예제에 사용 되는 클래스입니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/northwindemployee12.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/northwindemployee12.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">Entity Framework 및 ObjectDataSource 컨트롤을 사용 하 여</related>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As ObjectDataSourceStatusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceStatusEventHandler ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " Usage="member this.Updated : System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 작업이 완료되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리를 <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> 반환 값 또는 출력 매개 변수의 값을 확인 하거나 후 예외가 throw 되었는지 여부를 확인 하려면 이벤트는 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 작업이 완료 합니다. 반환 값, 출력 매개 변수 및 예외 처리 속성에서 사용할 수는 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> 이벤트와 연결 된 개체입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">Entity Framework 및 ObjectDataSource 컨트롤을 사용 하 여</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateMethod">
      <MemberSignature Language="C#" Value="public string UpdateMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UpdateMethod { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateMethod : string with get, set" Usage="System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 컨트롤이 데이터 업데이트를 위해 호출하는 메서드나 함수의 이름을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.ObjectDataSource" />에서 데이터를 업데이트할 때 사용하는 메서드나 함수의 이름을 나타내는 문자열입니다. 기본값은 빈 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 있다고 가정으로 식별 되는 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 속성 일괄 처리 대신 한 번에 한 업데이트를 수행 합니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 에 위임 하는 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A> 의 속성을 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 개체와 연결 된는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤.  
  
 매개 변수 이름에 대 한 구성 되었는지 확인 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 에서 제어를 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 컬렉션 select 메서드에 의해 반환 되는 열 이름과 일치 합니다.  
  
## <a name="object-lifetime"></a>개체 수명  
 로 식별 되는 메서드를 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 속성에는 인스턴스 메서드 일 수 있습니다 또는 `static` (`Shared` Visual Basic에서) 메서드. 인스턴스 메서드인 경우 비즈니스 개체가 만들어지고 소멸 될 때마다 지정 된 메서드는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 속성 이라고 합니다. 처리할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 에 지정 된 메서드 앞에 비즈니스 개체를 사용 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 속성 이라고 합니다. 처리할 수도 있습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 메서드를 지정 된 후 발생 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 속성 이라고 합니다. 비즈니스 개체를 구현 하는 경우는 <xref:System.IDisposable> 인터페이스는 <xref:System.IDisposable.Dispose%2A> 개체를 제거 하기 전에 호출 됩니다. 방법이 `static` (`Shared` Visual Basic의), 비즈니스 개체 생성 되지 않고 처리할 수 없는 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, 및 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 이벤트입니다.  
  
## <a name="parameter-merging"></a>병합 하는 매개 변수  
 매개 변수가 추가 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 다음 세 가지 소스의 컬렉션:  
  
-   런타임에 데이터 바인딩된 컨트롤입니다.  
  
-   `UpdateParameters` 요소를 선언적으로 합니다.  
  
-   <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 이벤트 처리기를 프로그래밍 방식으로 합니다.  
  
 데이터 바인딩된 컨트롤에서 생성 된 모든 매개 변수가 먼저 추가 됩니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 컬렉션입니다. 예를 들어 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 바인딩되는 <xref:System.Web.UI.WebControls.GridView> 열이 있는 컨트롤 `Name` 및 `Number`에 대 한 매개 변수 `Name` 및 `Number` 컬렉션에 추가 됩니다. 매개 변수가의 정확한 이름은 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 속성입니다. 이러한 매개 변수의 데이터 형식은 `string`합니다. 다음으로에 나와 있는 매개 변수는 `UpdateParameters` 요소가 추가 됩니다. 경우에 매개 변수를 `UpdateParameters` 에 이미 있는 매개 변수로 동일한 이름을 가진 요소가 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 기존 매개 변수 컬렉션에 지정 된 매개 변수와 일치 하도록 수정 됩니다는 `UpdateParameters` 요소. 일반적으로이 매개 변수의 데이터 형식을 수정 하려면 사용 됩니다. 마지막으로 프로그래밍 방식으로 추가 및 제거할 수의 매개 변수를 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 하기 전에 발생 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 메서드를 실행 합니다. 메서드는 매개 변수를 병합 된 후 확인 됩니다. 메서드 확인은 다음 섹션에 설명 되어 있습니다.  
  
> [!IMPORTANT]
>  클라이언트에서 받은 모든 매개 변수 값을 확인 해야 합니다. 런타임에 매개 변수 값을 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 속성입니다.  
  
## <a name="method-resolution"></a>메서드 확인  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 메서드를 호출할 매개 변수에서 선언적으로 생성 된 데이터 바인딩된 컨트롤에서 데이터 필드를 `UpdateParameters` 요소 및에 추가 된 매개 변수는 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 이벤트 처리기 모두 병합 됩니다. (자세한 내용은 이전 섹션 참조). <xref:System.Web.UI.WebControls.ObjectDataSource> 호출할 메서드를 찾으려면 다음 시도 제어 합니다. 에 지정 된 이름 가진 하나 이상의 메서드를 찾습니다 먼저는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 속성입니다. 일치 하는 항목이 없으면는 <xref:System.InvalidOperationException> 예외가 throw 됩니다. 일치 하는 항목이 있으면 매개 변수 이름과 일치 하는 찾습니다. 예를 들어 지정 된 형식 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 속성이 라는 두 개의 메서드도 `UpdateARecord`합니다. 하나의 `UpdateARecord` 하나의 매개 변수가 `ID`, 및 다른 `UpdateARecord` 두 매개 변수가 `Name` 및 `Number`합니다. 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 컬렉션에 명명 된 매개 변수만 `ID`의 `UpdateARecord` 메서드를만 `ID` 매개 변수 라고 합니다. 메서드를 확인 하는 데 매개 변수의 형식을 확인 하지 않습니다. 매개 변수의 순서는 중요 하지 않습니다.  
  
 경우는 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성, 메서드를 다른 방식으로 확인 됩니다. <xref:System.Web.UI.WebControls.ObjectDataSource> 에 지정 된 이름의 메서드를 찾습니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 는 매개 변수 형식 중 하나를 사용 하는 속성에 지정 된 된 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> 속성. 이 경우 매개 변수의 이름을 중요 하지 않습니다.  
  
   
  
## Examples  
 다음 세 가지 예제에는 웹 페이지, 코드 숨김 페이지 클래스 및 사용자를 검색 하 고 Northwind 데이터베이스의 Employees 테이블의 레코드를 업데이트할 수 있도록 데이터 액세스 클래스를 보여 줍니다.  
  
 첫 번째 예제 두 개가 포함 된 웹 페이지를 보여 줍니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.DropDownList> 컨트롤 및 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다. 첫 번째 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 및 <xref:System.Web.UI.WebControls.DropDownList> 검색 하 고 데이터베이스에서 직원 이름이 표시 되는 컨트롤입니다. 두 번째 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 및 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤은 검색, 표시 및 사용자가 선택 되어 직원 레코드의 데이터를 수정 하는 데 사용 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 두 번째 예제에 대 한 처리기를 표시 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 및 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 이벤트입니다. <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 이벤트 처리기는 Employee 테이블 로부터 검색 된 데이터를 포함 하는 개체를 serialize 합니다. 직렬화 된 개체는 뷰 상태에 저장 됩니다. <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 업데이트 되는 데이터 레코드에 대 한 원본 데이터가 포함 된 뷰 상태에 개체를 역직렬화 하는 이벤트 처리기입니다. 원래 데이터를 포함 하는 개체는 Update 메서드를 매개 변수로 전달 됩니다. 다른 프로세스에서 데이터를 수정 되었는지 여부를 검사할 수 있도록 원래 데이터를 데이터베이스에 전달 되어야 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 세 번째 예제에서는 Northwind 데이터베이스와 상호 작용 하는 데이터 액세스 클래스를 보여 줍니다. 클래스는 LINQ를 사용 하 여 쿼리하고 Employees 테이블을 업데이트 합니다. 이 예제에서는 LINQ to SQL 클래스 Northwind 데이터베이스 및 직원 테이블을 나타내는 필요 합니다. 자세한 내용은 [방법: 만들 LINQ to SQL 클래스를 웹 프로젝트에서](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=214011">Entity Framework 및 ObjectDataSource 컨트롤을 사용 하 여</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> 속성으로 지정된 메서드에서 사용하는 매개 변수가 포함된 매개 변수 컬렉션을 가져옵니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.ParameterCollection" /> 속성으로 지정된 메서드에서 사용하는 매개 변수가 포함된 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이름 및 형식에 포함 된 매개 변수를 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 컬렉션 이름 및 매개 변수 형식과 일치 해야 합니다는 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 메서드 시그니처입니다. 매개 변수 이름은 영향을 받지는 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 속성 및 대/소문자 구분 됩니다. 컬렉션의 매개 변수를 데이터 바인딩된 컨트롤을 선언적으로 지정 된 매개 변수 및 프로그래밍 방식으로 추가 되는 매개 변수를 데이터에 따라 달라 집니다. 자세한 내용은의 "병합 매개 변수" 섹션을 참조 하세요 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 하 고 [ObjectDataSource 컨트롤을 사용 하 여 매개 변수를 사용 하 여](https://msdn.microsoft.com/library/45fb67ee-9be7-49b7-9421-e242203dafa4)입니다.  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 속성 검색을 <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A> 속성에 포함 된를 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 연관 된 개체는 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤.  
  
 매개 변수가 병합, 개체 수명 및 방법 확인 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>합니다.  
  
> [!IMPORTANT]
>  클라이언트에서 받은 모든 매개 변수 값을 확인 해야 합니다. 런타임에 매개 변수 값을 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 속성입니다.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.DropDownList> 제어 <xref:System.Web.UI.WebControls.TextBox> 컨트롤 및 여러 <xref:System.Web.UI.WebControls.ObjectDataSource> 개체 데이터를 업데이트 합니다. 두 번째 코드 예에서는 `EmployeeLogic` 첫 번째 코드 예제에 사용 되는 클래스입니다.  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.DropDownList> 제어 <xref:System.Web.UI.WebControls.TextBox> 컨트롤 및 여러 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 데이터를 업데이트 합니다. 합니다 <xref:System.Web.UI.WebControls.DropDownList> Northwind 직원의 이름을 표시 하는 동안는 <xref:System.Web.UI.WebControls.TextBox> 컨트롤은 입력 하 고 주소 정보를 업데이트 하는 데 사용 됩니다. 때문에 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 컬렉션에 포함를 <xref:System.Web.UI.WebControls.ControlParameter> 의 선택된 된 값에 바인딩된를 <xref:System.Web.UI.WebControls.DropDownList>, 발생 하는 단추는 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 직원을 선택한 후에 작업을 사용 하도록 설정 합니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/objds12cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/objds12vb.aspx#1)]  
  
 다음 코드 예제는 `EmployeeLogic` 앞의 코드 예제에 사용 되는 클래스입니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/northwindemployee12.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/northwindemployee12.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As ObjectDataSourceMethodEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ObjectDataSourceMethodEventHandler ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " Usage="member this.Updating : System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 작업 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리를 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 매개 변수의 값을 확인 하거나 전에 매개 변수 값을 변경 하려면 애플리케이션에 관련 된 추가 초기화를 수행 하는 이벤트를 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤이 업데이트 작업을 수행 합니다. 매개 변수를 사용할 수는 <xref:System.Collections.IDictionary> 액세스 하는 컬렉션을 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> 속성에 의해 노출 되는 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> 개체입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 세 가지 예제에는 웹 페이지, 코드 숨김 페이지 클래스 및 사용자를 검색 하 고 Northwind 데이터베이스의 Employees 테이블의 레코드를 업데이트할 수 있도록 데이터 액세스 클래스를 보여 줍니다.  
  
 첫 번째 예제 두 개가 포함 된 웹 페이지를 보여 줍니다 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.DropDownList> 컨트롤 및 <xref:System.Web.UI.WebControls.DetailsView> 제어 합니다. 첫 번째 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 및 <xref:System.Web.UI.WebControls.DropDownList> 검색 하 고 데이터베이스에서 직원 이름이 표시 되는 컨트롤입니다. 두 번째 <xref:System.Web.UI.WebControls.ObjectDataSource> 컨트롤 및 <xref:System.Web.UI.WebControls.DetailsView> 컨트롤은 검색, 표시 및 사용자가 선택 되어 직원 레코드의 데이터를 수정 하는 데 사용 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 두 번째 예제에 대 한 처리기를 표시 합니다 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 및 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 이벤트입니다. <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 이벤트 처리기는 Employee 테이블 로부터 검색 된 데이터를 포함 하는 개체를 serialize 합니다. 직렬화 된 개체는 뷰 상태에 저장 됩니다. <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 업데이트 되는 데이터 레코드에 대 한 원본 데이터가 포함 된 뷰 상태에 개체를 역직렬화 하는 이벤트 처리기입니다. 원래 데이터를 포함 하는 개체는 Update 메서드를 매개 변수로 전달 됩니다. 다른 프로세스에서 데이터를 수정 되었는지 여부를 검사할 수 있도록 원래 데이터를 데이터베이스에 전달 되어야 합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 세 번째 예제에서는 Northwind 데이터베이스와 상호 작용 하는 데이터 액세스 클래스를 보여 줍니다. 클래스는 LINQ를 사용 하 여 쿼리하고 Employees 테이블을 업데이트 합니다. 이 예제에서는 LINQ to SQL 클래스 Northwind 데이터베이스 및 직원 테이블을 나타내는 필요 합니다. 자세한 내용은 [방법: 만들 LINQ to SQL 클래스를 웹 프로젝트에서](https://msdn.microsoft.com/library/20bf925f-2a6d-410d-8f65-7b5b8f555081)합니다.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <related type="Article" href="https://msdn.microsoft.com/library/f1685b00-09f3-46a4-ad74-2bea21d12863">데이터 소스 웹 서버 컨트롤</related>
        <related type="Article" href="https://msdn.microsoft.com/library/1f10d54b-d7ba-47f4-832b-f83b8861d1d2">ObjectDataSource 컨트롤 개요</related>
        <related type="Article" href="https://msdn.microsoft.com/library/0165387c-847f-4731-a198-a0759004152f">ObjectDataSource 컨트롤 소스 개체 만들기</related>
      </Docs>
    </Member>
  </Members>
</Type>