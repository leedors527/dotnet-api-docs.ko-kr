<Type Name="XmlDataSource" FullName="System.Web.UI.WebControls.XmlDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="80a8abd56617d8c6d6e4f6c130871ad90ce06595" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55343082" /></Metadata><TypeSignature Language="C#" Value="public class XmlDataSource : System.Web.UI.HierarchicalDataSourceControl, System.ComponentModel.IListSource, System.Web.UI.IDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDataSource extends System.Web.UI.HierarchicalDataSourceControl implements class System.ComponentModel.IListSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.XmlDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlDataSource&#xA;Inherits HierarchicalDataSourceControl&#xA;Implements IDataSource, IListSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlDataSource : System::Web::UI::HierarchicalDataSourceControl, System::ComponentModel::IListSource, System::Web::UI::IDataSource" />
  <TypeSignature Language="F#" Value="type XmlDataSource = class&#xA;    inherit HierarchicalDataSourceControl&#xA;    interface IDataSource&#xA;    interface IListSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HierarchicalDataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Transforming")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DataFile")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.XmlDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>데이터 바인딩된 컨트롤에 대한 XML 데이터 원본을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 항목 내용:  
  
-   [소개](#introduction)  
  
-   [XML 데이터 원본](#source_of_xml_data)  
  
-   [XML 데이터를 업데이트 하는 중](#updating_xml_data)  
  
-   [XSL 변환 지정](#specifying_an_xsl_transformation)  
  
-   [XPath 식을 사용 하 여 필터링](#filtering_using_an_xpath_expression)  
  
-   [캐싱](#caching)  
  
-   [추가 기능](#additional_features)  
  
-   [데이터 뷰 개체](#data_view_object)  
  
-   [선언 구문](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>소개  
 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤이 XML 데이터를 데이터 바인딩된 컨트롤을 제공 하는 데이터 소스 컨트롤입니다. <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤 수 데이터 바인딩된 컨트롤에서 계층 구조 및 테이블 형식 데이터를 표시 합니다. <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤은 일반적으로 읽기 전용 시나리오에서 계층적 XML 데이터를 표시 하는 데 사용 됩니다. 때문에 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤을 <xref:System.Web.UI.HierarchicalDataSourceControl> 계층적 데이터를 사용 하 여 작동 클래스입니다. <xref:System.Web.UI.WebControls.XmlDataSource> 구현도 제어는 <xref:System.Web.UI.IDataSource> 인터페이스와 함께 테이블 형식 목록 스타일, 데이터 또는 합니다.  
  
> [!NOTE]
>  하나도 보안상의 이유로 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤 속성 보기 상태에 저장 됩니다. 기술적으로 가능 클라이언트에서 보기 상태의 내용을 디코딩 이므로 저장 데이터 구조 또는 해당 내용에 대 한 중요 한 정보가 노출 될 수 있습니다 정보 공개 위협이 합니다. 와 같은 정보를 저장 해야 하는 경우 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 속성에서 뷰 상태를 설정 하 여 콘텐츠를 보호 하기 위해 암호화를 설정할 수 있습니다. <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> 에 `@ Page` 지시문입니다.  
  
 개발자가 사용 하 여 페이지를 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤을 데이터 바인딩된 컨트롤을 사용 하 여 XML 데이터를 표시 합니다.  
  
<a name="source_of_xml_data"></a>   
## <a name="sources-of-xml-data"></a>XML 데이터 원본  
 합니다 <xref:System.Web.UI.WebControls.XmlDataSource> 일반적으로 의해 지정 되는 XML 파일에서 XML 데이터를 로드 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성입니다. XML 데이터를 사용 하 여 문자열 양식에서 데이터 소스 컨트롤에서 직접 저장할 수도 있습니다는 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성입니다. 데이터 바인딩된 컨트롤에서 표시 하기 전에 XML 데이터를 변환 하려는 경우 변환에 대 한 스타일 시트 XSL (Extensible Language) 스타일 시트를 제공할 수 있습니다. XML 데이터를 사용 하 여 일반적으로 파일에서 스타일 시트를 로드, 대로 나타난를 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 있지만 속성을 저장할 수도 직접 사용 하 여 문자열 형태로 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 속성.  
  
<a name="updating_xml_data"></a>   
## <a name="updating-xml-data"></a>XML 데이터를 업데이트 하는 중  
 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤은 일반적으로 읽기 전용 데이터 시나리오에서 사용 데이터 바인딩된 컨트롤을 XML 데이터를 표시 하는 위치입니다. 그러나 사용할 수도 있습니다는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤이 XML 데이터를 편집 합니다. XML 데이터를 편집 하려면 호출을 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 검색 하는 메서드는 <xref:System.Xml.XmlDataDocument> 개체는 XML 데이터의 메모리 내 표현입니다. 노출 하는 개체 모델을 사용할 수 있습니다 합니다 <xref:System.Xml.XmlDataDocument> 및 <xref:System.Xml.XmlNode> 개체를 포함 하거나 문서에서 데이터를 조작 하는 XPath 식을 필터링을 사용 합니다. XML 데이터의 메모리 내 표현을 변경한 호출 하 여 디스크에 저장할 수 있습니다는 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 메서드.  
  
 몇 가지 제한 사항이의 편집 기능에는 <xref:System.Web.UI.WebControls.XmlDataSource> 제어 합니다.  
  
-   의해 표시 되는 XML 파일에서 XML 데이터를 로드 해야 합니다는 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성에 지정 된 XML 인라인에서가 아니라는 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성입니다.  
  
-   XSLT 변환이 지정할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 또는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 속성입니다.  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 메서드 처리 하지 않는 저장 작업 동시 다른 요청에서. 둘 이상의 사용자가를 통해 XML 파일을 편집 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource>은 동일한 데이터를 사용 하 여 실행 중인 모든 사용자가 아닙니다. 수 이기도 한 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 작업이 이러한 같은 동시성 문제로 인해 실패 하 게 합니다.  
  
<a name="specifying_an_xsl_transformation"></a>   
## <a name="specifying-an-xsl-transformation"></a>XSL 변환 지정  
 XML 데이터를 사용 하 여 수행 하는 일반적인 작업은 변환 하나의 XML 데이터 집합에서 다른 합니다. <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤이 사용 하 여 XML 변환을 지원 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 및 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 데이터 바인딩된 컨트롤에 전달 되기 전에 XML 데이터에 적용할 XSL 스타일 시트를 지정 하는 속성 및 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 수 있는 속성 XSL 스타일 시트에서 변환 하는 동안 사용할 동적 XSLT 스타일 시트 인수를 제공 합니다. XPath 식을 사용 하 여 필터링을 지정 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 속성인 변환 수행 후 적용 됩니다.  
  
> [!NOTE]
>  합니다 <xref:System.Web.UI.WebControls.XmlDataSource> 클래스를 사용 하 여 사용 되지 않는 <xref:System.Xml.Xsl.XslTransform> XSL 변환을 수행 하는 클래스입니다. 이후 도입 된 스타일 시트 기능을 사용 하려는 경우는 <xref:System.Xml.Xsl.XslTransform> 클래스의 사용이 중단 되었으며, 사용 하 여 수동으로 변환을 적용 합니다 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스입니다.  
  
<a name="filtering_using_an_xpath_expression"></a>   
## <a name="filtering-using-an-xpath-expression"></a>XPath 식을 사용 하 여 필터링  
 기본적으로 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤에 의해 식별 된 XML 파일에서 XML 데이터를 모두 로드 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성 또는 인라인으로 찾을 수는 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성인 있지만 XPath 식을 사용 하 여 데이터를 필터링 할 수 있습니다. <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 속성이 XML 데이터 로드 되 고 변환 후에 적용 되는 XPath 구문을 필터를 지원 합니다.  
  
<a name="caching"></a>   
## <a name="caching"></a>캐싱  
 성능 향상을 위해 캐싱을 사용할 수는 <xref:System.Web.UI.WebControls.XmlDataSource> 기본적으로 제어 합니다. 열고 페이지가 요청 될 때마다 서버에서 XML 파일을 읽는 애플리케이션의 성능을 줄일 수 있습니다. 처리 부하를 웹 서버에서 메모리 서버의 줄이는 있습니다 캐싱 대부분의 경우 적절 한 절충입니다. <xref:System.Web.UI.WebControls.XmlDataSource> 자동으로 데이터를 캐시 때 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 속성이로 설정 되어 `true`, 및 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 속성 캐시는 캐시를 무효화 하기 전에 데이터를 저장 하는 시간 (초) 수로 설정 됩니다. 사용할 수는 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 추가 데이터 소스 컨트롤의 캐싱 동작을 세밀 하 게 합니다.  
  
<a name="additional_features"></a>   
## <a name="additional-features"></a>추가 기능  
 다음 테이블에서 지원 되는 추가 기능을 나열 합니다 <xref:System.Web.UI.WebControls.XmlDataSource> 제어 합니다.  
  
|기능|설명|  
|----------------|-----------------|  
|정렬|지원 되지 않습니다는 <xref:System.Web.UI.WebControls.XmlDataSource> 제어 합니다.|  
|필터링|<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 적절 한 XPath 식을 사용 하 여 XML 데이터를 필터링 할 속성을 사용할 수 있습니다.|  
|페이징|지원 되지 않습니다는 <xref:System.Web.UI.WebControls.XmlDataSource> 제어 합니다.|  
|업데이트하는 중|조작 하 여 지원 합니다 <xref:System.Xml.XmlDataDocument> 직접 호출한는 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 메서드.|  
|삭제|조작 하 여 지원 합니다 <xref:System.Xml.XmlDataDocument> 직접 호출한는 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 메서드.|  
|삽입|조작 하 여 지원 합니다 <xref:System.Xml.XmlDataDocument> 직접 호출한는 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 메서드.|  
|캐싱|기본적으로 사용 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 0 (무한)으로 설정 하는 속성 및 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 속성으로 설정 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>합니다.|  
  
<a name="data_view_object"></a>   
## <a name="data-view-object"></a>데이터 뷰 개체  
 때문에 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤이 지원 계층적 데이터를 표시 하는 데이터 바인딩된 컨트롤 뿐만 아니라 테이블 형식 데이터를 표시 하는 컨트롤, 데이터 소스 컨트롤이 해당 내부 XML 데이터에 대해 여러 유형의 데이터 원본 뷰 개체를 지원 합니다. 합니다 <xref:System.Web.UI.WebControls.XmlDataSource> 제어 라는 단일 검색 <xref:System.Web.UI.WebControls.XmlDataSourceView> 표 형식 데이터를 표시 하는 데이터 바인딩된 컨트롤을 사용 하는 경우 개체입니다. <xref:System.Web.UI.IDataSource.GetViewNames%2A> 메서드는이 단일 명명 된 보기를 식별 합니다. 계층적 데이터를 표시 하는 데이터 바인딩된 컨트롤을 사용 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤에서 검색을 <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> 에 전달 된 모든 고유한 계층 경로 대 한는 <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> 메서드.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>선언 구문  
  
```  
<asp:XmlDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    DataFile="string"  
    EnableCaching="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnTransforming="Transforming event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    TransformArgumentList="string"  
    TransformFile="string"  
    Visible="True|False"  
    XPath="string"  
>  
    <Data>string</Data>  
    <Transform>string</Transform>  
</asp:XmlDataSource>  
```  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.TreeView> 샘플 XML 파일에서 XML 데이터를 표시 하는 컨트롤입니다. 두 번째 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 템플릿 기반 컨트롤과 <xref:System.Web.UI.WebControls.Repeater> XML 데이터를 표시 하는 컨트롤입니다.  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.TreeView> XML 데이터를 표시 하는 컨트롤입니다. 합니다 <xref:System.Web.UI.WebControls.XmlDataSource> 으로 식별 된 XML 파일에서 XML 데이터를 로드 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 코드 예제에서 XML 파일에 다음 데이터가 있습니다.  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 템플릿 기반 컨트롤과 <xref:System.Web.UI.WebControls.Repeater> XML 데이터를 표시 하는 컨트롤입니다. 합니다 <xref:System.Web.UI.WebControls.Repeater> 컨트롤에 데이터를 바인딩할 XPath 데이터 바인딩 식을 XML 내의 항목을 사용 하 여 문서에 <xref:System.Web.UI.WebControls.XmlDataSource> 나타냅니다. 에 대 한 자세한 내용은 `XPath` 하 고 `XPathSelect` 데이터 바인딩 구문을 참조는 <xref:System.Web.UI.XPathBinder> 클래스입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/CS/xmlds14cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_14#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_14/VB/xmlds14vb.aspx#1)]  
  
 코드 예제에서 XML 파일에 다음 데이터가 있습니다.  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>John</firstn>  
         <lastn>Smith</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 클래스의 새 인스턴스를 만듭니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheDuration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CacheDuration { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CacheDuration : int with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 소스 컨트롤에서 검색한 데이터를 캐시하는 시간(초)을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤에서 데이터 검색 작업의 결과를 캐시하는 시간(초)입니다. 기본값은 0입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource> 은 다음과 같은 경우 자동으로 데이터를 캐시 제어:  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 속성은 `true`로 설정됩니다.  
  
-   <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 속성 캐시는 캐시를 무효화 하기 전에 데이터를 저장 하는 시간 (초) 수를 나타내는 0 보다 큰 값으로 설정 됩니다.  
  
 변경 된 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성 또는 XML 데이터를 포함 하는 파일의 내용을 하면 캐시가 무효화 됩니다.  
  
 기본적으로 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 속성 무한 캐시를 나타내는 0으로 설정 되 고 종속 되는 XML 파일이 변경 될 때까지 데이터 원본의 데이터를 캐시 합니다.  
  
 캐시의 동작 기간의 조합에 따라 적용 됩니다 및 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 설정 합니다. 경우 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 로 설정 된 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>의 <xref:System.Web.UI.WebControls.XmlDataSource> 제어는 첫 번째 데이터 검색 작업에 데이터를 캐시, 지정 된 시간 동안 메모리에 보관 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>, 경과 되 면 무효화 합니다. 다음 작업 시에 캐시 한 다음 새로 고쳐집니다. 하는 경우 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 로 설정 된 <xref:System.Web.UI.DataSourceCacheExpiry.Sliding>, 데이터 소스 컨트롤은 첫 번째 데이터 검색 작업에서 데이터를 캐시 하지만 각 후속 작업에 대 한 캐시를 보유 하는 기간을 다시 설정 합니다. 활동이 없는 시간 동안 같은 경우에 캐시 만료 됩니다를 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 이후 마지막 데이터 검색 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 경우 캐싱을 사용 하도록 설정 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.XmlDataSource> XML 파일에 포함 된 데이터를 표시 하는 컨트롤입니다. 캐싱을 사용 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 속성이로 설정 되어 `true` 및 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 데이터 소스 컨트롤에서 데이터 캐시 되는 시간 (초) 수로 설정 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 코드 예제에서 XML 파일에 다음 데이터가 있습니다.  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheExpirationPolicy As DataSourceCacheExpiry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::DataSourceCacheExpiry CacheExpirationPolicy { System::Web::UI::DataSourceCacheExpiry get(); void set(System::Web::UI::DataSourceCacheExpiry value); };" />
      <MemberSignature Language="F#" Value="member this.CacheExpirationPolicy : System.Web.UI.DataSourceCacheExpiry with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>캐시 기간과 함께 사용되어 데이터 소스 컨트롤에서 사용하는 캐시의 캐싱 동작을 설명하는 캐시 만료 정책을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.DataSourceCacheExpiry" /> 값 중 하나입니다. 기본 캐시 만료 정책 설정은 <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 캐시의 동작을 조합 하 여 적용 됩니다는 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 고 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 설정 합니다. 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 로 설정 된 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute>의 <xref:System.Web.UI.WebControls.XmlDataSource> 첫 번째 데이터 검색 작업에 데이터를 캐시, 지정 된 시간 동안 메모리에 보관 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>, 경과 되 면 무효화 합니다. 다음 작업 시에 캐시 한 다음 새로 고쳐집니다. 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 로 설정 된 <xref:System.Web.UI.DataSourceCacheExpiry.Sliding>, 데이터 소스 컨트롤은 첫 번째 데이터 검색 작업에서 데이터를 캐시 하지만 각 후속 작업에 대 한 캐시를 보유 하는 기간을 다시 설정 합니다. 활동이 없는 시간 동안 같은 경우에 캐시 만료를 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 이후 마지막 데이터 검색 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 경우 캐싱을 사용 하도록 설정 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.XmlDataSource> XML 파일에 포함 된 데이터를 표시 하는 컨트롤입니다. 캐싱을 사용 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 속성이로 설정 되어 `true` 및 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 데이터 소스 컨트롤에서 데이터 캐시 되는 시간 (초) 수로 설정 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 코드 예제에서 XML 파일에 다음 데이터가 있습니다.  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyContext">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyContext" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyContext As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyContext { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyContext : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>뷰 상태에서 데이터 소스 컨트롤에 대한 캐시 키 값을 가져오거나 설정합니다. 또는 뷰 상태에 캐시 키를 추가합니다.</summary>
        <value>캐시 키 값입니다. 또는 캐시 키가 뷰 상태에 있지 않으면 빈 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyContext%2A> 속성에 대 한 캐시 키를 수동으로 만들 수 있습니다는 <xref:System.Web.UI.WebControls.XmlDataSource> 제어 합니다. 컨트롤 데이터를 포함 하는 파일을 지정 하는 대신에 XML 또는 XSLT 데이터를 포함 하는 개체를 할당 하는 경우 이것이 필요 합니다. 컨트롤에 데이터를 할당 하면 데이터 캐시 키 생성에 사용 되지 않습니다. 대신, 데이터 개체를 업데이트 하려는 경우 고유한 cache-key에 생성 해야 수동으로.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CacheKeyDependency As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CacheKeyDependency { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CacheKeyDependency : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 소스 컨트롤에서 만든 모든 데이터 캐시 개체에 연결된 사용자 정의 키 종속성을 가져오거나 설정합니다. 모든 캐시 개체는 키가 만료될 때 명시적으로 만료됩니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤에서 만든 모든 캐시 개체를 식별하는 키입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤이 데이터 캐싱을 지원 합니다. 데이터 캐시 되어 있는 동안은 <xref:System.Web.UI.WebControls.XmlDataSource> 캐시에서 대신 기본 데이터 파일에서 데이터를 검색 합니다. 캐시 만료 되 면 기본 파일에서 데이터를 검색 하 고 다시 데이터를 캐시 합니다.  
  
 설정할 수 있습니다 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> 속성에서 만든 모든 캐시 항목 간의 종속성을 만들려면는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤과 키입니다. 프로그래밍 방식으로 언제 든 지 키를 만료 하 여 모든 캐시 항목을 무효화할 수 있습니다.  
  
 만드는 데 사용 되는 속성으로 인해 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>, 있기 여러 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤은 동일한 XML 파일에서 동일한 데이터를 로드 및 파일을 변환 하 고 시나리오에서 동일 동일한 캐시를 사용할 수 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 및 <xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>설정 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual string Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Data { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Data : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 소스 컨트롤이 바인딩된 XML 데이터의 블록을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤이 바인딩된 인라인 XML 데이터의 문자열입니다. 기본값은 <see cref="F:System.String.Empty" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 선언적 시나리오에는 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성의 여러 줄로 된 내부 속성으로 지정 됩니다는 <xref:System.Web.UI.WebControls.XmlDataSource> 개체입니다. 내부 속성이 어떤 방식으로든에서 XML 데이터 형식 패딩 인용 문자 등의 문자 패딩 문제가 무시를 수 있기 때문에 XML 데이터와 호환입니다.  
  
 모두를 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 및 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성을 설정 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성이 우선 하 고 XML 파일의 데이터에 지정 된 XML 데이터 대신 사용 됩니다는 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성입니다.  
  
 값을 변경 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성을 <xref:System.Web.UI.IDataSource.DataSourceChanged> 이벤트가 발생 합니다. 캐싱을 사용 하는 및의 값을 변경 하는 경우 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>, 캐시를 무효화 합니다.  
  
   
  
## Examples  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤이 포함 된 인라인 XML 데이터를 표시 하는 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성을 <xref:System.Web.UI.WebControls.TreeView> 컨트롤입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/CS/xmlds10cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_10/VB/xmlds10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">문서를 로드하고 있는 경우</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="DataFile">
      <MemberSignature Language="C#" Value="public virtual string DataFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DataFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.DataFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlDataFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 소스가 바인딩된 XML 파일의 파일 이름을 지정합니다.</summary>
        <value><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤이 나타내는 데이터를 포함하는 XML 파일의 절대 실제 경로 또는 상대 경로입니다. 기본값은 <see cref="F:System.String.Empty" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 및 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성을 설정 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성이 우선 하 고 XML 파일의 데이터에 지정 된 XML 데이터 대신 사용 됩니다는 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성입니다.  
  
 값을 변경 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성을 <xref:System.Web.UI.IDataSource.DataSourceChanged> 이벤트가 발생 합니다. 캐싱을 사용 하는 및의 값을 변경 하는 경우 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>, 캐시를 무효화 합니다.  
  
   
  
## Examples  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 인 파일에 포함 된 XML 데이터를 표시 하도록 컨트롤을 <xref:System.Web.UI.WebControls.TreeView> 제어 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/CS/xmlds1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_1/VB/xmlds1vb.aspx#1)]  
  
 코드 예제에서 XML 파일에 다음 데이터가 있습니다.  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">문서를 로드하고 있는 경우</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Data" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableCaching As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableCaching { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCaching : bool with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤에서 데이터 캐싱이 활성화되어 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>데이터 소스 컨트롤에서 데이터 캐싱을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤은 자동으로 데이터를 캐시 때 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 속성이 `true`합니다. 기본적으로 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 속성 무한 캐시를 나타내는 0으로 설정 되 고 종속 되는 XML 파일이 변경 될 때까지 데이터 원본의 데이터를 캐시 합니다. 설정 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 0 보다 큰 값으로 속성 캐시는 새로운 집합을 검색 하는 많은 초에 대 한 데이터를 저장 합니다.  
  
 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 속성이 `true` 하며 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 속성을 설정 하면 변환 인수 목록에 있는 매개 변수를 변경 하는 경우 캐시 항목을 자동으로 무효화 되지 않습니다. 설정 하 여 캐시를 무효화 하는 코드를 작성 해야 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 경우 캐싱을 사용 하도록 설정 하는 방법에 설명 합니다 <xref:System.Web.UI.WebControls.XmlDataSource> XML 파일에 포함 된 데이터를 표시 하는 컨트롤입니다. 캐싱을 사용 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 속성이로 설정 되어 `true` 및 <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 데이터 소스 컨트롤에서 데이터 캐시 되는 시간 (초) 수로 설정 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/CS/xmlds16cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_16/VB/xmlds16vb.aspx#1)]  
  
 코드 예제에서 XML 파일에 다음 데이터가 있습니다.  
  
```  
<books>  
   <computerbooks>  
     <book title="Secrets of Silicon Valley" author="Sheryl Hunter"/>  
     <book title="Straight Talk About Computers" author="Dean Straight"/>  
     <book title="You Can Combat Computer Stress!" author="Marjorie Green"/>                  
   </computerbooks>  
   <cookbooks>  
     <book title="Silicon Valley Gastronomic Treats" author="Innes del Castill"/>  
   </cookbooks>  
</books>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="GetHierarchicalView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HierarchicalDataSourceView GetHierarchicalView (string viewPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.HierarchicalDataSourceView GetHierarchicalView(string viewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetHierarchicalView (viewPath As String) As HierarchicalDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::HierarchicalDataSourceView ^ GetHierarchicalView(System::String ^ viewPath);" />
      <MemberSignature Language="F#" Value="override this.GetHierarchicalView : string -&gt; System.Web.UI.HierarchicalDataSourceView" Usage="xmlDataSource.GetHierarchicalView viewPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HierarchicalDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewPath">현재 계층적 뷰가 만들어진 노드를 식별하는 XPath 식입니다.</param>
        <summary><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤의 데이터 소스 뷰 개체를 가져옵니다. <paramref name="viewPath" /> 매개 변수는 XPath 식일 수 있습니다.</summary>
        <returns><paramref name="viewPath" />로 식별된 데이터 노드로 시작되는 단일 데이터 뷰를 나타내는 <see cref="T:System.Web.UI.WebControls.XmlHierarchicalDataSourceView" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출할 수 있습니다는 <xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> 검색 하는 메서드를 <xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> 연관 된 개체는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤입니다. 지정 하는 경우 `viewPath` 값을 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤에 의해 식별 된 노드 보기를 나타내는 데이터 원본 뷰 개체를 반환 합니다. `viewPath`, 모든 자식 노드 함께 합니다. 설정 하는 경우 `viewPath` 를 <xref:System.String.Empty?displayProperty=nameWithType>, <xref:System.Web.UI.WebControls.XmlDataSource> 검사를 제어는 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 속성을 데이터 원본 뷰를 작성 하는 루트 노드를 확인 합니다. 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 속성을 설정 합니다 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤 같은 데이터 원본 뷰를 반환 하는 데 사용 방식으로 `viewPath` 식이 사용 됩니다. 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 속성을 설정 하지 않으면는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤이 XML 데이터의 데이터 노드에 대 한 뷰를 반환 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlDocument">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDocument GetXmlDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlDocument GetXmlDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlDocument () As XmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlDocument ^ GetXmlDocument();" />
      <MemberSignature Language="F#" Value="member this.GetXmlDocument : unit -&gt; System.Xml.XmlDocument" Usage="xmlDataSource.GetXmlDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>XML 데이터를 내부 데이터 스토리지에서 직접 메모리로 로드하거나 캐시에서 메모리로 로드한 다음, <see cref="T:System.Xml.XmlDataDocument" /> 개체의 형식으로 반환합니다.</summary>
        <returns><see cref="T:System.Xml.XmlDataDocument" /> 속성에 지정된 XML이나 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 속성으로 식별된 파일의 XML을 나타내는 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 개체입니다. 여기에는 변환과 <see cref="P:System.Web.UI.WebControls.XmlDataSource.XPath" /> 쿼리가 적용되어 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 메서드는 기본 XML 데이터의 메모리 내 표현에 직접 액세스 합니다.  
  
 반환 된 조작할 수 있습니다 <xref:System.Xml.XmlDataDocument> 개체와 호출 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 로 지정 된 XML 파일에 변경 내용을 유지 하려면를 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성입니다. 몇 가지 요구 사항을 충족 해야 합니다 <xref:System.Xml.XmlDataDocument> 개체를 성공적으로 저장할 수 있습니다. 자세한 내용은 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 메서드를 참조하세요.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.TreeView> 컨트롤을 표시 하 고 XML 파일에 포함 된 XML 데이터를 편집 합니다. 두 번째 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 템플릿 기반 컨트롤과 <xref:System.Web.UI.WebControls.Repeater> 컨트롤을 표시 하 고 XML 파일에 포함 된 XML 데이터를 편집 합니다.  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.TreeView> 컨트롤을 표시 하 고 XML 파일에 포함 된 XML 데이터를 편집 합니다. 사용 하 여 메모리에서 데이터 조작 되는 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 메서드를 선택할 때마다를 <xref:System.Web.UI.WebControls.TreeView> 노드를 다음 XML 파일에 저장 됩니다. 마지막으로, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 라고 하는 <xref:System.Web.UI.WebControls.TreeView> 컨트롤을 표시 하는 데이터를 새로 고칩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 템플릿 기반 컨트롤과 <xref:System.Web.UI.WebControls.Repeater> 컨트롤을 표시 하 고 XML 파일에 포함 된 XML 데이터를 편집 합니다. 앞의 예제와 데이터를 사용 하 여 메모리에서 조작 되는 대로 합니다 <xref:System.Xml.XmlDataDocument> 하 여 검색할를 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 메서드. 마지막으로, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 라고 하는 <xref:System.Web.UI.WebControls.TreeView> 컨트롤을 표시 하는 데이터를 새로 고칩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 코드 예제에서 XML 파일에 다음 데이터가 있습니다.  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 속성에 대한 URL이 지정되어 있지만 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤에 웹 리소스에 대한 올바른 권한이 없는 경우</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 속성에 대한 URL이 지정되어 있지만 HTTP 기반 URL이 아닌 경우  
  
또는 
<see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤을 사용하기 전에 디자이너에서 디자인 타임 상대 경로를 올바르게 매핑하지 않은 경우  
  
또는 
캐싱과 클라이언트 가장이 모두 사용되는 경우. <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤은 클라이언트 가장이 사용되는 경우 캐싱을 지원하지 않습니다.</exception>
        <exception cref="T:System.Web.HttpException"><see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 속성의 지정된 경로에 대한 액세스가 거부된 경우</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.Save" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" />
      </Docs>
    </Member>
    <Member MemberName="OnTransforming">
      <MemberSignature Language="C#" Value="protected virtual void OnTransforming (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTransforming(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTransforming (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTransforming(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTransforming : EventArgs -&gt; unit&#xA;override this.OnTransforming : EventArgs -&gt; unit" Usage="xmlDataSource.OnTransforming e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary><see cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" /> 컨트롤에서 XML 데이터에 대한 XSLT 변환을 수행하기 전에 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.TreeView> 컨트롤이 표시 하는 XML 데이터를 변환 합니다. XML 변환 하 여 지정 된 스타일 시트를 사용 하 여 수행 됩니다는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 속성입니다. 스타일 시트의 데이터 소스 컨트롤에 전달 되는 변환 인수를 사용 하는 또한는 <xref:System.Xml.Xsl.XsltArgumentList> 런타임에 개체입니다. 코드 예제에서는 전달 하는 방법에 설명 합니다 <xref:System.Xml.Xsl.XsltArgumentList> 처리 하 여 데이터 소스 컨트롤에 개체를 <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> 메서드의 이름으로 식별 되는 사용자 지정 이벤트 처리기를 사용 하 여 이벤트에 대 한 설정는 <xref:System.Web.UI.WebControls.XmlDataSource.OnTransforming%2A> 메서드.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 코드 예제에서 XML 파일에 다음 데이터가 있습니다.  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 XML 변환 다음 스타일 시트를 사용 하 여 수행 됩니다.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>재정의 하는 경우 <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> 파생된 클래스에서 호출 해야 합니다 <see cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" /> 대리자를 등록 하는 기본 클래스의 메서드는 이벤트를 받도록 합니다.</para></block>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.Save" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; unit" Usage="xmlDataSource.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 속성이 설정된 경우 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 컨트롤이 메모리에 현재 보유한 XML 데이터를 디스크에 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하는 동안 합니다 <xref:System.Web.UI.WebControls.XmlDataSource> 제어는 읽기 전용 데이터 바인딩 시나리오에서 일반적으로 사용, 사용할 수 있습니다는 <xref:System.Web.UI.WebControls.XmlDataSource> 기본 XML 데이터 파일의 XML 데이터를 편집 하는 컨트롤입니다. 이러한 시나리오에서 XML 데이터에서 XML 파일에서 로드 되는 <xref:System.Web.UI.WebControls.XmlDataSource> 제어 합니다. 수정 합니다 <xref:System.Xml.XmlDataDocument> 사용 하 여 메모리에는 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 메서드를 호출 하 여 XML 데이터 파일에 대 한 다음 저장을 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 메서드. 이 편집 가능한 XML 시나리오는 다음 조건이 충족 되 면 수 있습니다:  
  
-   XML 데이터를 나타내는 XML 파일에서 로드 되는 <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 속성에 지정 된 인라인 XML 데이터에서 하지는 <xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 속성.  
  
-   에 지정 된 XSLT 변환이 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 또는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 속성입니다.  
  
 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 메서드 처리 하지 않는 저장 작업 동시 다른 요청에서. 둘 이상의 사용자가를 통해 XML 파일을 편집 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource> 제어는 모든 사용자는 동일한 데이터를 사용 하 여 작동 하는 보장 되지 않습니다. 수 이기도 한 <xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 작업이 이러한 같은 동시성 문제로 인해 실패 하 게 합니다.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.TreeView> 컨트롤을 표시 하 고 XML 파일에 포함 된 XML 데이터를 편집 합니다. 두 번째 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 템플릿 기반 컨트롤과 <xref:System.Web.UI.WebControls.Repeater> 컨트롤을 표시 하 고 XML 파일에 포함 된 XML 데이터를 편집 합니다.  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.TreeView> 컨트롤을 표시 하 고 XML 파일에 포함 된 XML 데이터를 편집 합니다. 사용 하 여 메모리에서 데이터 조작 되는 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 메서드를 선택할 때마다를 <xref:System.Web.UI.WebControls.TreeView> 노드를 다음 XML 파일에 저장 됩니다. 마지막으로, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 라고 하는 <xref:System.Web.UI.WebControls.TreeView> 컨트롤을 표시 하는 데이터를 새로 고칩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/CS/xmlds17cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_17/VB/xmlds17vb.aspx#1)]  
  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 템플릿 기반 컨트롤과 <xref:System.Web.UI.WebControls.Repeater> 컨트롤을 표시 하 고 XML 파일에 포함 된 XML 데이터를 편집 합니다. 앞의 예제와 데이터를 사용 하 여 메모리에서 조작 되는 대로 합니다 <xref:System.Xml.XmlDataDocument> 에서 검색 한 개체는 <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 메서드. 마지막으로, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> 라고 하는 <xref:System.Web.UI.WebControls.TreeView> 컨트롤을 표시 하는 데이터를 새로 고칩니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/CS/xmlds18cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_18/VB/xmlds18vb.aspx#1)]  
  
 코드 예제에서 XML 파일에 다음 데이터가 있습니다.  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
 <bookstore xmlns:bk="urn:samples">  
   <book genre="novel" publicationdate="1999" bk:ISBN="0000000000">  
     <title>Secrets of Silicon Valley</title>  
     <author>  
       <first-name>Sheryl</first-name>  
       <last-name>Hunter</last-name>  
     </author>  
     <price>24.95</price>"   
     </book>  
   <book genre="novel" publicationdate="1985" bk:ISBN="1111111111">  
     <title>Straight Talk About Computers</title>  
     <author>  
       <first-name>Dean</first-name>  
       <last-name>Straight</last-name>  
     </author>  
     <price>29.95</price>  
   </book>  
</bookstore>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">XML 데이터가 <see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 속성 대신 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 속성을 사용하여 로드된 경우  
  
또는 
<see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 속성에 대한 URL이 지정되어 있지만 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤에 웹 리소스에 대한 올바른 권한이 없는 경우</exception>
        <exception cref="T:System.NotSupportedException"><see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 속성에 대한 URL이 지정되어 있지만 HTTP 기반 URL이 아닌 경우  
  
또는 
<see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤을 사용하기 전에 디자이너에서 디자인 타임 상대 경로를 올바르게 매핑하지 않은 경우</exception>
        <exception cref="T:System.Web.HttpException"><see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 속성의 지정된 경로에 대한 액세스가 거부된 경우</exception>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />를 참조하세요.</summary>
        <value>해당 컬렉션이 <see cref="T:System.Collections.IList" /> 개체의 컬렉션이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, 사용할 수 있습니다 경우에만 합니다 <xref:System.Web.UI.WebControls.XmlDataSource> 캐스팅 된는 <xref:System.ComponentModel.IListSource> 인터페이스입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IListSource.GetList" />를 참조하세요.</summary>
        <returns>데이터 소스에 바인딩할 수 있으며 <see cref="T:System.Collections.IList" />를 구현하는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, 사용할 수 있습니다 경우에만 합니다 <xref:System.Web.UI.WebControls.XmlDataSource> 캐스팅 된는 <xref:System.ComponentModel.IListSource> 인터페이스입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.IListSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.DataSourceChanged">
      <MemberSignature Language="C#" Value="event EventHandler System.Web.UI.IDataSource.DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler System.Web.UI.IDataSource.DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Custom Event DataSourceChanged As EventHandler Implements System.Web.UI.IDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.UI.IDataSource.DataSourceChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 멤버에 대한 설명은 <see cref="E:System.Web.UI.IDataSource.DataSourceChanged" />를 참조하세요.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, 사용할 수 있습니다 경우에만 합니다 <xref:System.Web.UI.WebControls.XmlDataSource> 캐스팅 된는 <xref:System.Web.UI.IDataSource> 인터페이스입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetView">
      <MemberSignature Language="C#" Value="System.Web.UI.DataSourceView IDataSource.GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.DataSourceView System.Web.UI.IDataSource.GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function GetView (viewName As String) As DataSourceView Implements IDataSource.GetView" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Web::UI::DataSourceView ^ System.Web.UI.IDataSource.GetView(System::String ^ viewName) = System::Web::UI::IDataSource::GetView;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">검색할 뷰의 이름입니다. <see cref="F:System.String.Empty" />가 지정된 경우에는 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤의 기본 뷰가 검색됩니다.</param>
        <summary>데이터 소스 컨트롤이 연결된 명명된 데이터 소스 뷰를 가져옵니다.</summary>
        <returns><see cref="T:System.Web.UI.WebControls.XmlDataSourceView" /> 컨트롤과 연결된 명명된 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 개체입니다.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetViewNames">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IDataSource.GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.Web.UI.IDataSource.GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Function GetViewNames () As ICollection Implements IDataSource.GetViewNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::ICollection ^ System.Web.UI.IDataSource.GetViewNames() = System::Web::UI::IDataSource::GetViewNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 멤버에 대한 설명은 <see cref="M:System.Web.UI.IDataSource.GetViewNames" />를 참조하세요.</summary>
        <returns><see cref="T:System.Collections.ICollection" /> 개체와 연결된 뷰 개체의 목록을 나타내는 이름이 포함되어 있으며 <see cref="T:System.Web.UI.IDataSource" />을 구현하는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, 사용할 수 있습니다 경우에만 합니다 <xref:System.Web.UI.WebControls.XmlDataSource> 캐스팅 된는 <xref:System.Web.UI.IDataSource> 인터페이스입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IDataSource" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public virtual string Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Transform" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Transform As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Transform { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.MultilineStringConverter,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤에서 관리하는 XML 데이터에 대해 수행될 XSLT 변환을 정의하는 XSL(Extensible Stylesheet Language) 데이터의 블록을 가져오거나 설정합니다.</summary>
        <value><see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 또는 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 속성에 포함된 데이터에 수행할 XML 변환을 정의하는 인라인 XSL의 문자열입니다. 기본값은 <see cref="F:System.String.Empty" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 선언적 시나리오에는 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 속성의 여러 줄로 된 내부 속성으로 지정 됩니다는 <xref:System.Web.UI.WebControls.XmlDataSource> 개체입니다. 내부 속성이 어떤 방식으로 스타일 시트를 서식을 지정 하 고 패딩 인용 문자 등의 문자 패딩 문제를 무시할 수 있기 때문에 XSL 스타일 시트 데이터와 호환 됩니다.  
  
 모두를 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 및 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 속성을 설정 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 속성이 우선 및 XSL 스타일 시트 파일 (.xsl)의 데이터에 지정 된 스타일 시트 요소 대신 사용 됩니다는 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 속성입니다. XPath 식을 사용 하 여 설정 된 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 속성을 XML 데이터를 변환한 후 적용 됩니다.  
  
 값을 변경 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 속성을 <xref:System.Web.UI.IDataSource.DataSourceChanged> 이벤트가 발생 합니다. 캐싱을 사용 하는 및의 값을 변경 하는 경우 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>, 캐시를 무효화 합니다.  
  
> [!NOTE]
>  합니다 <xref:System.Web.UI.WebControls.XmlDataSource> 클래스를 사용 하 여 사용 되지 않는 <xref:System.Xml.Xsl.XslTransform> XSL 변환을 수행 하는 클래스입니다. 이후 도입 된 스타일 시트 기능을 사용 하려는 경우는 <xref:System.Xml.Xsl.XslTransform> 클래스의 사용이 중단 되었으며, 사용 하 여 수동으로 변환을 적용 합니다 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 템플릿 기반 컨트롤과 <xref:System.Web.UI.WebControls.Repeater> 컨트롤이 표시 하는 XML 데이터를 변환 합니다. 변환을 수행 하는 스타일 시트에서 인라인으로 정의 됩니다는 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 데이터 소스 컨트롤의 속성입니다.  
  
  
  
 코드 예제에서 XML 파일에 다음 데이터가 있습니다.  
  
```  
<?xml version="1.0" encoding="iso-8859-1"?>  
 <orders>  
   <order>  
     <customer id="12345" />  
     <customername>  
         <firstn>Todd</firstn>  
         <lastn>Rowe</lastn>  
     </customername>  
     <transaction id="12345" />  
     <shipaddress>  
         <address1>1234 Tenth Avenue</address1>  
         <city>Bellevue</city>  
         <state>Washington</state>  
         <zip>98001</zip>  
     </shipaddress>  
     <summary>  
         <item dept="tools">screwdriver</item>  
         <item dept="tools">hammer</item>  
         <item dept="plumbing">fixture</item>  
     </summary>  
   </order>  
</orders>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">문서를 로드하고 있는 경우</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="TransformArgumentList">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XsltArgumentList TransformArgumentList" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformArgumentList As XsltArgumentList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::Xsl::XsltArgumentList ^ TransformArgumentList { System::Xml::Xsl::XsltArgumentList ^ get(); void set(System::Xml::Xsl::XsltArgumentList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformArgumentList : System.Xml.Xsl.XsltArgumentList with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformArgumentList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XsltArgumentList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> 또는 <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> 속성으로 정의된 스타일시트와 함께 사용되어 XML 데이터에 대한 변환을 수행하는 XSLT 인수의 목록을 제공합니다.</summary>
        <value><see cref="T:System.Xml.Xsl.XsltArgumentList" /> 컨트롤이 XML 데이터를 로드할 때 XML 데이터에 적용될 XSLT 매개 변수와 개체를 포함하는 <see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 개체입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 된 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 속성 때는 <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> 이벤트가 발생 하 여 XSLT 변환을 XML 데이터에 적용 되는 시간에 XSLT 매개 변수를 사용할 수 있도록 합니다.  
  
 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 속성이 `true` 하며 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 속성을 설정 하면 변환 인수 목록에 있는 매개 변수를 변경 하는 경우 캐시 항목을 자동으로 무효화 되지 않습니다. 설정 하 여 캐시를 무효화 하는 코드를 작성 해야 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 사용 하 여는 <xref:System.Web.UI.WebControls.TreeView> 컨트롤이 표시 하는 XML 데이터를 변환 합니다. XML 변환 하 여 지정 된 스타일 시트를 사용 하 여 수행 됩니다는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 속성입니다. 스타일 시트의 데이터 소스 컨트롤에 전달 되는 변환 인수를 사용 하는 또한는 <xref:System.Xml.Xsl.XsltArgumentList> 런타임에 개체입니다. 코드 예제에서는 전달 하는 방법에 설명 합니다 <xref:System.Xml.Xsl.XsltArgumentList> 처리 하 여 데이터 소스 컨트롤에는 <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> 사용자 지정 이벤트 처리기를 사용 하 여 이벤트입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 코드 예제에서 XML 파일에 다음 데이터가 있습니다.  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 다음 스타일 시트를 사용 하 여 XML 데이터의 변환이 수행 됩니다.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      </Docs>
    </Member>
    <Member MemberName="TransformFile">
      <MemberSignature Language="C#" Value="public virtual string TransformFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransformFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property TransformFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TransformFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransformFile : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.TransformFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslTransformFileEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.XmlDataSource" /> 컨트롤에서 관리하는 XML 데이터에 대해 수행될 XSLT 변환을 정의하는 XSL(Extensible Stylesheet Language) 파일(.xsl)의 파일 이름을 지정합니다.</summary>
        <value><see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 또는 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 속성에 포함된 데이터에 수행할 XML 변환을 정의하는 XSL 스타일시트 파일의 절대 실제 경로나 상대 경로입니다. 기본값은 <see cref="F:System.String.Empty" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모두를 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 및 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 속성을 설정 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 속성이 우선 및 XSL 스타일 시트 파일 (.xsl)의 데이터에 지정 된 스타일 시트 요소 대신 사용 됩니다는 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 속성입니다. XPath 식을 사용 하 여 설정 된 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 속성을 XML 데이터를 변환한 후 적용 됩니다.  
  
 값을 변경 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 속성을 <xref:System.Web.UI.IDataSource.DataSourceChanged> 이벤트가 발생 합니다. 캐싱을 사용 하는 및의 값을 변경 하는 경우 <xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>, 캐시를 무효화 합니다.  
  
> [!NOTE]
>  합니다 <xref:System.Web.UI.WebControls.XmlDataSource> 클래스를 사용 하 여 사용 되지 않는 <xref:System.Xml.Xsl.XslTransform> XSL 변환을 수행 하는 클래스입니다. 이후 도입 된 스타일 시트 기능을 사용 하려는 경우는 <xref:System.Xml.Xsl.XslTransform> 클래스의 사용이 중단 되었으며, 사용 하 여 수동으로 변환을 적용 합니다 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤 및 <xref:System.Web.UI.WebControls.TreeView> 표시할 컨트롤 Web form에 XML 데이터를 변환 합니다. 변환 하 여 지정 된 스타일 시트를 사용 하 여 수행 됩니다는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 속성입니다. 필요에 따라 사용 하 여 스타일 시트에 대 한 변환 인수를 제공할 수 있습니다는 <xref:System.Xml.Xsl.XsltArgumentList>합니다. 자세한 내용은 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 속성을 참조하세요.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/CS/xmlds5cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_5/VB/xmlds5vb.aspx#1)]  
  
 코드 예제에서 XML 파일에 다음 데이터가 있습니다.  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 XML 변환을 수행 하는 XSL 스타일 시트에는 다음과 같은 구조에 있습니다.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
     </xsl:attribute>  
     <xsl:attribute name="price">  
       <xsl:value-of select="price"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">문서를 로드하고 있는 경우</exception>
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency" />
      </Docs>
    </Member>
    <Member MemberName="Transforming">
      <MemberSignature Language="C#" Value="public event EventHandler Transforming;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Transforming" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.XmlDataSource.Transforming" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Transforming As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Transforming;" />
      <MemberSignature Language="F#" Value="member this.Transforming : EventHandler " Usage="member this.Transforming : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.XmlDataSource.Transform" /> 속성에서 정의하거나 <see cref="P:System.Web.UI.WebControls.XmlDataSource.TransformFile" /> 속성에서 식별하는 스타일시트가 XML 데이터에 적용되기 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 처리를 <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> 이벤트가 설정 합니다 <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 속성을는 <xref:System.Xml.Xsl.XsltArgumentList> 하기 전에 개체를 <xref:System.Web.UI.WebControls.XmlDataSource> XML 변환을 수행 하는 컨트롤입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 컨트롤을 <xref:System.Web.UI.WebControls.TreeView> 컨트롤이 표시 하는 XML 데이터를 변환 합니다. XML 변환 하 여 지정 된 스타일 시트를 사용 하 여 수행 됩니다는 <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 속성입니다. 스타일 시트의 데이터 소스 컨트롤에 전달 되는 변환 인수를 사용 하는 또한는 <xref:System.Xml.Xsl.XsltArgumentList> 런타임 시. 코드 예제에서는 전달 하는 방법에 설명 합니다 <xref:System.Xml.Xsl.XsltArgumentList> 처리 하 여 데이터 소스 컨트롤에 개체를 <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> 사용자 지정 이벤트 처리기를 사용 하 여 이벤트입니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/CS/xmlds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_9/VB/xmlds9vb.aspx#1)]  
  
 코드 예제에서 XML 파일에 다음 데이터가 있습니다.  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 다음 스타일 시트를 사용 하 여 XML 데이터의 변환이 수행 됩니다.  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
 <xsl:param name="purchdate"/>  
 <xsl:template match="bookstore">  
   <bookstore>  
     <xsl:apply-templates select="genre"/>  
   </bookstore>  
 </xsl:template>  
 <xsl:template match="genre">  
   <genre>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates select="book"/>  
   </genre>  
 </xsl:template>  
 <xsl:template match="book">  
   <book>  
     <xsl:attribute name="ISBN">  
       <xsl:value-of select="@ISBN"/>  
     </xsl:attribute>  
     <xsl:attribute name="title">  
       <xsl:value-of select="title"/>  
       Price: <xsl:value-of select="price"/>  
           15% discount if purchased by: <xsl:value-of select="$purchdate"/>        
     </xsl:attribute>  
     <xsl:apply-templates select="chapters/chapter" />  
   </book>  
 </xsl:template>  
 <xsl:template match="chapter">  
   <chapter>  
     <xsl:attribute name="num">  
       <xsl:value-of select="@num"/>  
     </xsl:attribute>  
     <xsl:attribute name="name">  
       <xsl:value-of select="@name"/>  
     </xsl:attribute>  
     <xsl:apply-templates/>  
   </chapter>  
 </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public virtual string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property XPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XPath : string with get, set" Usage="System.Web.UI.WebControls.XmlDataSource.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 속성에 포함되어 있거나 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 속성으로 지정된 XML 파일에 포함되어 있는 XML 데이터에 적용할 XPath 식을 지정합니다.</summary>
        <value><see cref="P:System.Web.UI.WebControls.XmlDataSource.Data" /> 속성에 포함되어 있거나 <see cref="P:System.Web.UI.WebControls.XmlDataSource.DataFile" /> 속성으로 지정된 XML 파일에 포함되어 있는 데이터를 필터링하는 데 사용할 수 있는 XPath 식을 나타내는 문자열입니다. 기본값은 <see cref="F:System.String.Empty" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XPath 데이터 바인딩 식에 대 한 자세한 내용은 참조 하세요. [XmlDataSource 컨트롤에 테이블 형식 컨트롤을 바인딩할](https://msdn.microsoft.com/library/d6bf202f-6454-45fd-9424-e17f6c7eafe8)합니다.  
  
   
  
## Examples  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.WebControls.XmlDataSource> 템플릿 기반 컨트롤과 <xref:System.Web.UI.WebControls.Repeater> XPath 식을 사용 하 여 필터링 된 XML 데이터를 표시 하는 컨트롤입니다. 이 예제에서는 XPath 구문을 XML 데이터를 필터링 하는 경우는 <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 데이터 소스 컨트롤의 속성을 설정 하 고 요소의 바인딩됩니다를 <xref:System.Web.UI.WebControls.Repeater> XML 데이터에 컨트롤 템플릿을 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/CS/xmlds8cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.XmlDataSource_8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.XmlDataSource_8/VB/xmlds8vb.aspx#1)]  
  
 코드 예제에서 XML 파일에 다음 데이터가 있습니다.  
  
```  
<bookstore>  
   <genre name="fiction">  
     <book ISBN="0000000000">  
       <title>Secrets of Silicon Valley</title>  
       <price>12.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />             
         <chapter num="2" name="Body" />            
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
   <genre name="novel">  
     <book genre="novel" ISBN="1111111111">  
       <title>Straight Talk About Computers</title>  
       <price>24.95</price>  
       <chapters>  
         <chapter num="1" name="Introduction" />   
         <chapter num="2" name="Body" />  
         <chapter num="3" name="Conclusion" />  
       </chapters>  
     </book>  
   </genre>  
</bookstore>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">문서를 로드하고 있는 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>