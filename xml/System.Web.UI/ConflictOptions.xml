<Type Name="ConflictOptions" FullName="System.Web.UI.ConflictOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dff7dbbe50196456c8014e8d0eee632fceedaa6b" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37588929" /></Metadata><TypeSignature Language="C#" Value="public enum ConflictOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ConflictOptions extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ConflictOptions" />
  <TypeSignature Language="VB.NET" Value="Public Enum ConflictOptions" />
  <TypeSignature Language="C++ CLI" Value="public enum class ConflictOptions" />
  <TypeSignature Language="F#" Value="type ConflictOptions = " />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>데이터를 업데이트하거나 삭제할 때 ASP.NET 데이터 소스 컨트롤에서 데이터 충돌을 처리하는 방법을 결정합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 동시성 제어에는 데이터는 읽기 및 여러 클라이언트가 액세스 하 고 동일한 데이터를 조작 하는 경우 저장소에서 변경 하는 방법을 제어 하려면 데이터 저장소를 사용 하는 기술입니다. 예를 들어, 하나의 클라이언트 데이터를 읽고 다른 클라이언트가 동일한 데이터를 읽는 다른 사용자에 게 제공 하는 동안 사용자에 게 제공 합니다. 두 사용자가 데이터를 업데이트하여 데이터 스토리지에 제출하면 두 클라이언트가 동일한 데이터에 대해 다른 값을 업데이트할 수 있으므로 예기치 않은 결과가 발생할 수 있습니다. 이 충돌로 간주 됩니다.  
  
 `ConflictDetection` ASP.NET 데이터 소스 컨트롤에 대해 정의 된 속성은 낙관적 동시성 및 delete를 사용 하는 내부 데이터 저장소 또는 업데이트 작업이 때 컨트롤을 내부 데이터 저장소에서 데이터 충돌을 처리 하는 방법을 결정 데 수행 합니다.  
  
 기본적으로 `ConflictDetection` 속성을 데이터 소스 컨트롤에는 먼저 데이터 소스 컨트롤에서 행의 데이터를 읽을 때 행이 업데이트 될 당시와 데이터 행에 대 한 변경 내용을 덮어씁니다 즉 OverwriteChanges로 설정 합니다. 기본 키 업데이트 또는 삭제 하는 데이터 행을 찾는 데 사용 됩니다 있지만 데이터의 다른 없습니다 비교가 수행 됩니다. 그러나 데이터 원본 컨트롤이 CompareAllValues 옵션을 사용하도록 구성된 경우, 컨트롤은 `Update` 및 `Delete` 메서드의 `oldValues` 컬렉션에 원본 데이터를 전달하여 이러한 값이 현재 데이터 스토리지에 있는 값과 일치하는 경우에만 데이터를 업데이트하거나 삭제하기 위한 논리를 작성할 수 있습니다. 일치 하는 값은 읽은 이후에 데이터가 변경 되지 않은 것을 나타냅니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
    <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection" />
    <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" />
    <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConflictDetection" />
  </Docs>
  <Members>
    <Member MemberName="CompareAllValues">
      <MemberSignature Language="C#" Value="CompareAllValues" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.UI.ConflictOptions CompareAllValues = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.ConflictOptions.CompareAllValues" />
      <MemberSignature Language="VB.NET" Value="CompareAllValues" />
      <MemberSignature Language="C++ CLI" Value="CompareAllValues" />
      <MemberSignature Language="F#" Value="CompareAllValues = 1" Usage="System.Web.UI.ConflictOptions.CompareAllValues" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>데이터 소스 컨트롤에서 <see langword="Update" /> 및 <see langword="Delete" /> 메서드의 <paramref name="oldValues" /> 컬렉션을 사용하여 데이터가 다른 프로세스를 통해 변경되었는지 확인합니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="OverwriteChanges">
      <MemberSignature Language="C#" Value="OverwriteChanges" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.UI.ConflictOptions OverwriteChanges = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.ConflictOptions.OverwriteChanges" />
      <MemberSignature Language="VB.NET" Value="OverwriteChanges" />
      <MemberSignature Language="C++ CLI" Value="OverwriteChanges" />
      <MemberSignature Language="F#" Value="OverwriteChanges = 0" Usage="System.Web.UI.ConflictOptions.OverwriteChanges" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>데이터 소스 컨트롤에서 행에 대한 자체 값을 사용하여 데이터 행의 모든 값을 덮어씁니다.</summary>
      </Docs>
    </Member>
  </Members>
</Type>