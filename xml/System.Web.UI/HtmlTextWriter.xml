<Type Name="HtmlTextWriter" FullName="System.Web.UI.HtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2cc525d453709d2420e7f9c513d74bf3bb1aadeb" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57924286" /></Metadata><TypeSignature Language="C#" Value="public class HtmlTextWriter : System.IO.TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HtmlTextWriter extends System.IO.TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class HtmlTextWriter&#xA;Inherits TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlTextWriter : System::IO::TextWriter" />
  <TypeSignature Language="F#" Value="type HtmlTextWriter = class&#xA;    inherit TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ASP.NET 서버 컨트롤 출력 스트림에 태그 문자와 텍스트를 씁니다. 이 클래스는 ASP.NET 서버 컨트롤이 태그를 클라이언트로 렌더링할 때 사용하는 서식 기능을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> 클래스 데스크톱 브라우저에 HTML 4.0 렌더링 하는 데 사용 됩니다. <xref:System.Web.UI.HtmlTextWriter> 의 모든 태그 작성기에 대 한 기본 클래스 이기도 합니다 <xref:System.Web.UI> 네임 스페이스를 포함 하 여를 <xref:System.Web.UI.ChtmlTextWriter>, <xref:System.Web.UI.Html32TextWriter>, 및 <xref:System.Web.UI.XhtmlTextWriter> 클래스. 이러한 클래스는 요소, 특성 및 다양 한 유형의 태그에 대 한 스타일 및 레이아웃 정보를 쓰는 데 사용 됩니다. 또한 이러한 클래스는 각 태그 언어와 연관 된 페이지 및 컨트롤 어댑터 클래스에서 사용 됩니다.  
  
 대부분의 경우 ASP.NET 자동으로 요청 하는 장치에 대 한 적절 한 기록기를 사용합니다. 그러나 사용자 지정 텍스트 기록기를 만든 경우 또는 특정 장치에 대 한 페이지를 렌더링 하는 특정 한 작성기를 지정 하려는 경우 매핑해야 작성기에서 페이지를 `controlAdapters` 응용 프로그램.browser 파일의 섹션입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 재정의 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.Control.Render%2A> 에서 파생 되는 사용자 지정 컨트롤의 메서드는 <xref:System.Web.UI.Control> 클래스입니다. 코드 예제에서는 다양 한를 사용 하는 방법을 보여 줍니다 <xref:System.Web.UI.HtmlTextWriter> 메서드, 속성 및 필드입니다.  
  
 [!code-csharp[MarkupTextWriter_Samples1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#1)]
 [!code-vb[MarkupTextWriter_Samples1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.TextWriter" />
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="T:System.Web.UI.Adapters.ControlAdapter" />
    <altmember cref="T:System.Web.UI.Adapters.PageAdapter" />
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <altmember cref="T:System.Web.UI.Html32TextWriter" />
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
    <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Web.UI.HtmlTextWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.HtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.HtmlTextWriter" Usage="new System.Web.UI.HtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">태그 내용을 렌더링하는 <see cref="T:System.IO.TextWriter" />입니다.</param>
        <summary>기본 탭 문자열을 사용하는 <see cref="T:System.Web.UI.HtmlTextWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> 오버 로드는 <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> 생성자를 사용 합니다 <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> 상수 줄의 들여쓰기를 나타내며 필요한 경우. 호출 된 <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> 오버 로드를 새 인스턴스를 초기화 합니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> 사용자 지정을 만드는 생성자입니다 <xref:System.Web.UI.HtmlTextWriter> 라는 개체 `StyledLabelHtmlWriter.` 경우를 `MyPage` 에서 파생 되는 사용자 지정 클래스를 <xref:System.Web.UI.Page> 클래스, 클라이언트에서 요청 하는 브라우저를 사용 하 여는 `StyledLabelHtmlWriter` 출력 스트림에 해당 콘텐츠를 렌더링 하는 클래스입니다.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.HtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.HtmlTextWriter" Usage="new System.Web.UI.HtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">태그 내용을 렌더링하는 <see cref="T:System.IO.TextWriter" />입니다.</param>
        <param name="tabString">줄 들여쓰기를 렌더링하는 데 사용할 문자열입니다.</param>
        <summary>지정된 탭 문자열 문자를 사용하여 <see cref="T:System.Web.UI.HtmlTextWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> 오버 로드 된 <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> 생성자를 사용 하 여 `tabString` 줄의 들여쓰기를 나타내며 필요한 경우. 호출 된 <xref:System.IO.TextWriter.%23ctor%28System.IFormatProvider%29?displayProperty=nameWithType> 새 인스턴스를 초기화 하는 기본 생성자입니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> 사용자 지정을 만드는 생성자입니다 <xref:System.Web.UI.HtmlTextWriter> 라는 개체 `StyledLabelHtmlWriter.` 경우를 `MyPage` 에서 파생 되는 사용자 지정 클래스를 <xref:System.Web.UI.Page> 클래스, 클라이언트에서 요청 하는 브라우저를 사용 하 여는 `StyledLabelHtmlWriter` 출력 스트림에 해당 콘텐츠를 렌더링 하는 클래스입니다.  
  
 [!code-cpp[HtmlTextWriter_Methods3#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter_Methods3#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter_Methods3#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 태그 특성과 값을 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체가 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 이후에 호출하여 만드는 요소의 여는 태그에 추가합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string -&gt; unit&#xA;override this.AddAttribute : string * string -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">추가할 특성의 이름이 포함된 문자열입니다.</param>
        <param name="value">특성에 할당할 값이 포함된 문자열입니다.</param>
        <summary>지정된 태그 특성과 값을 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체가 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 이후에 호출하여 만드는 요소의 여는 태그에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 오버 로드는 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> 특성 중 하나가 아닌 경우 메서드는 <xref:System.Web.UI.HtmlTextWriterAttribute> 값을 특성 런타임 전에 알 수 없는 경우 또는 합니다.  
  
 지정 된 태그 요소의 모든 인스턴스에 대 한는 <xref:System.Web.UI.HtmlTextWriter> 클래스에는 해당 요소에 대 한 특성 목록을 유지 관리 합니다. 경우는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드를 호출 하 여 추가 하는 모든 특성을 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 메서드 요소의 여는 태그 렌더링 됩니다. 특성 목록에서 다음 지워집니다는 <xref:System.Web.UI.HtmlTextWriter> 개체입니다.  
  
 태그 요소를 렌더링 하는 코딩 패턴은 다음과 같습니다.  
  
-   사용 된 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 요소에 특성을 추가 하는 방법입니다.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드를 사용하세요.  
  
-   렌더링할 요소의 여는 태그와 닫는 태그 사이 있는 내용이 필요에 따라 다른 메서드를 사용 합니다.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 메서드를 사용하세요.  
  
   
  
## Examples  
 다음 코드 예제를 호출 하는 방법에 설명 합니다 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 메서드를 호출 하기 전에 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드. 코드의 두 가지 오버 로드를 호출 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 의 두 가지 오버 로드 하 고 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 호출 하기 전에 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 렌더링 하는 메서드를 `<span>` 요소를 출력 스트림에. 합니다 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> 메서드 라는 사용자 지정 특성을 정의 하는 `CustomAttribute` 라는 사용자 지정 값 `CustomAttributeValue` 에 대 한는 `<span>` 이 코드를 렌더링 하는 요소입니다.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string -&gt; unit&#xA;override this.AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string -&gt; unit" Usage="htmlTextWriter.AddAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">출력 스트림에 추가할 태그 특성을 나타내는 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />입니다.</param>
        <param name="value">특성에 할당할 값이 포함된 문자열입니다.</param>
        <summary>태그 특성과 특성 값을 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체가 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 이후에 호출하여 만드는 요소의 여는 태그에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 오버 로드는 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> 표준 태그 특성을 렌더링 하는 방법입니다.  
  
 지정 된 태그 요소의 모든 인스턴스에 대 한는 <xref:System.Web.UI.HtmlTextWriter> 클래스에는 해당 요소에 대 한 특성 목록을 유지 관리 합니다. 경우는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드를 호출 하 여 추가 되는 모든 특성을 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 메서드 요소의 여는 태그 렌더링 됩니다. 특성 목록에서 다음 지워집니다는 <xref:System.Web.UI.HtmlTextWriter>합니다.  
  
 태그 요소를 렌더링 하는 코딩 패턴은 다음과 같습니다.  
  
-   사용 된 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 요소에 특성을 추가 하는 방법입니다.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드를 사용하세요.  
  
-   렌더링할 요소의 여는 태그와 닫는 태그 사이 있는 내용이 필요에 따라 다른 메서드를 사용 합니다.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 메서드를 사용하세요.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 오버 로드는 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> 메서드를 추가 `Onclick` 특성을 태그 요소를 설정한 후 해당 값 다음 ECMAScript 코드:  
  
```  
alert('Hello');  
```  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#1)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.HtmlTextWriter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value, bool fEndode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value, bool fEndode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (name As String, value As String, fEndode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, bool fEndode);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string * bool -&gt; unit&#xA;override this.AddAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value, fEndode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEndode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">추가할 특성의 이름이 포함된 문자열입니다.</param>
        <param name="value">특성에 할당할 값이 포함된 문자열입니다.</param>
        <param name="fEndode">특성과 그 값을 인코딩하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>지정된 태그 특성과 값을 선택적으로 인코딩하여 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체가 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 이후에 호출하여 만드는 요소의 여는 태그에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 오버 로드는 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> 특성 중 하나가 아닌 경우 메서드는 <xref:System.Web.UI.HtmlTextWriterAttribute> 값 또는 특성 실행 시간과 인코딩 까지는 알 수 없는 경우 필요 하지 않습니다.  
  
 지정 된 태그 요소의 모든 인스턴스에 대 한는 <xref:System.Web.UI.HtmlTextWriter> 클래스에는 해당 요소에 대 한 특성 목록을 유지 관리 합니다. 경우는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드를 호출 하 여 추가 하는 모든 특성을 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 메서드 요소의 여는 태그 렌더링 됩니다. 특성 목록에서 다음 지워집니다는 <xref:System.Web.UI.HtmlTextWriter> 개체입니다.  
  
 사용 합니다 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> 메서드를 `fEncode` 로 `true`, 특성 따옴표 ("), 작음 (<) 기호를 포함할 수 있는 수 있는 경우 또는 앰퍼샌드 (&). 메서드 호출에는 특성을 요청 장치 요구 사항에 맞게 인코딩합니다. 설정할 수 있습니다 `fEncode` 에 `false`는 이러한 문자가 생성 하는 것이 알고 있는 경우, 특성이 이미 인코딩된 알고 있는 경우.  
 
특성 형식이 `Style`에 값을 인코딩할 수 없습니다 경우에 `fEndode` 는 `true`합니다. 스타일 값을 CSS 규격이 고 악성 코드가 포함 되어 있지 않습니다 확인 합니다.
  
 태그 요소를 렌더링 하는 코딩 패턴은 다음과 같습니다.  
  
-   사용 된 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 요소에 특성을 추가 하는 방법입니다.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드를 사용하세요.  
  
-   렌더링할 요소의 여는 태그와 닫는 태그 사이 있는 내용이 필요에 따라 다른 메서드를 사용 합니다.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 메서드를 사용하세요.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 오버 로드를 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> 라는 사용자 지정 특성을 확인 하는 방법 `myattribute`, 및 해당 값에 대 한 인코딩되지 않은 `<img>` 요소입니다.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddAttribute (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddAttribute (name As String, value As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit&#xA;override this.AddAttribute : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit" Usage="htmlTextWriter.AddAttribute (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">추가할 특성의 이름이 포함된 문자열입니다.</param>
        <param name="value">특성에 할당할 값이 포함된 문자열입니다.</param>
        <param name="key">특성을 나타내는 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />입니다.</param>
        <summary>지정된 태그 특성과 값을 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 열거형 값과 함께 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체가 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 이후에 호출하여 만드는 요소의 여는 태그에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 합니다 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 오버 로드는 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterAttribute%29> 에서 상속 하는 경우에 메서드를 <xref:System.Web.UI.HtmlTextWriter> 클래스입니다. 새로 만들 수 있습니다 `name` 고 `key` 특성에 대 한 쌍입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAttribute (key As HtmlTextWriterAttribute, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAttribute(System::Web::UI::HtmlTextWriterAttribute key, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string * bool -&gt; unit&#xA;override this.AddAttribute : System.Web.UI.HtmlTextWriterAttribute * string * bool -&gt; unit" Usage="htmlTextWriter.AddAttribute (key, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">출력 스트림에 추가할 태그 특성을 나타내는 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />입니다.</param>
        <param name="value">특성에 할당할 값이 포함된 문자열입니다.</param>
        <param name="fEncode">특성과 그 값을 인코딩하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>태그 특성과 특성 값을 선택적으로 인코딩하여 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체가 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 이후에 호출하여 만드는 요소의 여는 태그에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 오버 로드는 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> 선택적으로 인코딩하여 표준 태그 특성을 렌더링 하는 방법.  
  
 지정 된 태그 요소의 모든 인스턴스에 대 한는 <xref:System.Web.UI.HtmlTextWriter> 클래스에는 해당 요소에 대 한 특성 목록을 유지 관리 합니다. 경우는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드를 호출 하 여 추가 하는 모든 특성을 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 요소의 여는 태그 렌더링 됩니다. 특성 목록에서 다음 지워집니다는 <xref:System.Web.UI.HtmlTextWriter> 개체입니다.  
  
 사용 합니다 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> 메서드를 `fEncode` 로 `true`, 특성 따옴표 ("), 작음 (<) 기호를 포함할 수 있는 수 있는 경우 또는 앰퍼샌드 (&). 메서드 호출에는 특성을 요청 장치 요구 사항에 맞게 인코딩합니다. 설정할 수 있습니다 `fEncode` 에 `false`는 이러한 문자가 생성 하는 것이 알고 있는 경우, 특성이 이미 인코딩된 알고 있는 경우.  
 
 특성 형식이 `Style`에 값을 인코딩할 수 없습니다 경우에 `fEncode` 는 `true`합니다. 스타일 값을 CSS 규격이 고 악성 코드가 포함 되어 있지 않습니다 확인 합니다.

  
 태그 요소를 렌더링 하는 코딩 패턴은 다음과 같습니다.  
  
-   사용 된 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 요소에 특성을 추가 하는 방법입니다.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드를 사용하세요.  
  
-   렌더링할 요소의 여는 태그와 닫는 태그 사이 있는 내용이 필요에 따라 다른 메서드를 사용 합니다.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 메서드를 사용하세요.  
  
   
  
## Examples  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> 에 할당 되는 문자열 값을 확인 하는 방법을 `Alt` 특성에 대 한는 `<img>` 요청 하는 장치에 대 한 요소는 인코딩됩니다.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>태그 스타일 특성을 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체가 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 이후에 호출하여 만드는 요소의 여는 태그에 추가합니다.</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : string * string -&gt; unit&#xA;override this.AddStyleAttribute : string * string -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">추가할 스타일 특성이 포함된 문자열입니다.</param>
        <param name="value">특성에 할당할 값이 포함된 문자열입니다.</param>
        <summary>지정된 태그 스타일 특성과 특성 값을 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 이후에 호출하여 만들어진 여는 태그에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 오버 로드는 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> 스타일의 구성원이 아닙니다. 메서드는 <xref:System.Web.UI.HtmlTextWriterStyle> 열거형 않거나 런타임 전에 알 수 없는 합니다.  
  
 <xref:System.Web.UI.HtmlTextWriter> 클래스 스타일을 렌더링 하는 태그 요소의 목록을 유지 관리 합니다. 경우는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드를 호출 하 여 추가 되는 모든 스타일을 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 메서드 요소의 여는 태그 렌더링 됩니다. 스타일의 목록은 지워집니다.  
  
 태그 요소를 렌더링 하는 코딩 패턴은 다음과 같습니다.  
  
-   사용 된 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 요소에 특성을 모든 스타일을 추가 하는 방법입니다.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드를 사용하세요.  
  
-   요소 태그와 닫는 태그 사이 있는 콘텐츠를 렌더링 하려면 필요에 따라 다른 메서드를 사용 합니다.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 메서드를 사용하세요.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 오버 로드는 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> 렌더링 하는 방법 `font-size` 및 `color` 스타일 특성에는 `<p>` 요소입니다. 이 코드 예제에서는 <xref:System.Web.UI.HtmlTextWriter> 컨트롤의 콘텐츠를 렌더링 하는 클래스입니다.  
  
 [!code-cpp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CPP/htmltextwriter_addstyleattribute.cpp#1)]
 [!code-csharp[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CS/htmltextwriter_addstyleattribute.cs#1)]
 [!code-vb[HtmlTextWriter_AddStyleAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/VB/htmltextwriter_addstyleattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (System.Web.UI.HtmlTextWriterStyle key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(valuetype System.Web.UI.HtmlTextWriterStyle key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddStyleAttribute (key As HtmlTextWriterStyle, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddStyleAttribute(System::Web::UI::HtmlTextWriterStyle key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : System.Web.UI.HtmlTextWriterStyle * string -&gt; unit&#xA;override this.AddStyleAttribute : System.Web.UI.HtmlTextWriterStyle * string -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">출력 스트림에 추가할 스타일 특성을 나타내는 <see cref="T:System.Web.UI.HtmlTextWriterStyle" />입니다.</param>
        <param name="value">특성에 할당할 값이 포함된 문자열입니다.</param>
        <summary>지정된 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 값과 연결된 태그 스타일 특성과 특성 값을 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 이후에 호출하여 만들어진 여는 태그에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 합니다 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 오버 로드는 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%29> 스타일의 구성원 인 경우 메서드는 <xref:System.Web.UI.HtmlTextWriterStyle> 열거형을 런타임 전에 알 합니다.  
  
 <xref:System.Web.UI.HtmlTextWriter> 클래스 스타일을 렌더링 하는 태그 요소의 목록을 유지 관리 합니다. 경우는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드를 호출 하 여 추가 스타일을 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 메서드 요소의 여는 태그 렌더링 됩니다. 스타일의 목록은 지워집니다.  
  
 태그 요소를 렌더링 하는 코딩 패턴은 다음과 같습니다.  
  
-   사용 된 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 요소에 특성을 모든 스타일을 추가 하는 방법입니다.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드를 사용하세요.  
  
-   요소 태그와 닫는 태그 사이 있는 콘텐츠를 렌더링 하려면 필요에 따라 다른 메서드를 사용 합니다.  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 메서드를 사용하세요.  
  
   
  
## Examples  
 다음 코드 예제에서는 재정의 하는 부분을 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 에서 파생 된 클래스에서 메서드를 <xref:System.Web.UI.HtmlTextWriter> 클래스입니다. 코드 검사 하는지 여부를 `<Label>` 요소 렌더링 되 고 있습니다. 그렇다면를 <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> 메서드는 검사할 여부를 `Color` 스타일 특성에 대해 정의 된는 `<Label>` 요소. 경우를 `Color` 특성 정의 되지 않은,이 오버 로드를 호출 하는 코드를 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 메서드를 추가 합니다 `Color` 스타일 특성, 특성 및 해당 값을 설정 합니다 `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddStyleAttribute (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddStyleAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddStyleAttribute (name As String, value As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddStyleAttribute(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="abstract member AddStyleAttribute : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; unit&#xA;override this.AddStyleAttribute : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; unit" Usage="htmlTextWriter.AddStyleAttribute (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">추가할 스타일 특성이 포함된 문자열입니다.</param>
        <param name="value">특성에 할당할 값이 포함된 문자열입니다.</param>
        <param name="key">추가할 스타일 특성을 나타내는 <see cref="T:System.Web.UI.HtmlTextWriterStyle" />입니다.</param>
        <summary>지정된 태그 스타일 특성과 특성 값을 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 열거형 값과 함께 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 이후에 호출하여 만들어진 여는 태그에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 합니다 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 오버 로드는 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterStyle%29> 에서 상속 하는 경우에 메서드를 <xref:System.Web.UI.HtmlTextWriter> 클래스입니다. 새로 만들 수 있습니다 `name` 하 고 `value` 에 대 한 쌍 <xref:System.Web.UI.HtmlTextWriterStyle> 특성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="BeginRender">
      <MemberSignature Language="C#" Value="public virtual void BeginRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginRender();" />
      <MemberSignature Language="F#" Value="abstract member BeginRender : unit -&gt; unit&#xA;override this.BeginRender : unit -&gt; unit" Usage="htmlTextWriter.BeginRender " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>컨트롤이 렌더링되려고 한다는 것을 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체나 파생 클래스의 개체에 알립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> 의 클래스를 구현 합니다 <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> 메서드가 기능이 없습니다. 재정의 해야 합니다 <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> 에서 파생 된 클래스에서 메서드가 <xref:System.Web.UI.HtmlTextWriter> 고유한 렌더링 기능을 제공 합니다. 필요할 수 있는 태그 언어에서 예를 들어 `<p>` 있겠지만 여기서 컨트롤을 미리 즉시 렌더링 되어야 하는 요소 필요 합니다 `<p>` 요소는 이전에 결정 된, 사용할 수 있습니다는 <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> 재정의 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="htmlTextWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.HtmlTextWriter" /> 개체를 닫고 이와 관련된 모든 시스템 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 구현의 합니다 <xref:System.Web.UI.HtmlTextWriter.Close%2A> 메서드 호출을 <xref:System.IO.TextWriter.Close%2A?displayProperty=nameWithType> 기본 메서드.  
  
 호출 된 후에 <xref:System.Web.UI.HtmlTextWriter.Close%2A> 메서드, 작업을 수행 합니다 <xref:System.Web.UI.HtmlTextWriter> 하므로 모든 해당 리소스가 해제 된 개체 예외를 throw 할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.IO.TextWriter.Close" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DefaultTabString">
      <MemberSignature Language="C#" Value="public const string DefaultTabString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultTabString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultTabString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultTabString;" />
      <MemberSignature Language="F#" Value="val mutable DefaultTabString : string" Usage="System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>단일 탭 문자를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 단일 탭 ASCII 9 문자로 표시 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에 사용 하는 생성자를 만드는 방법을 보여 줍니다는 <xref:System.IO.TextWriter> 개체를 매개 변수로 전달 된 <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> 생성자의 두 번째 버전에 대 한 매개 변수 인수로 필드. 코드에서이 생성자를 호출할 때를 <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> 필드 페이지 또는 어댑터에서 사용 되는 태그 작성기 인스턴스에 대 한 들여쓰기 정책을 정의 합니다.  
  
 [!code-csharp[MarkupTextWriter_Methods3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#1)]
 [!code-vb[MarkupTextWriter_Methods3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="DoubleQuoteChar">
      <MemberSignature Language="C#" Value="public const char DoubleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char DoubleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const DoubleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char DoubleQuoteChar;" />
      <MemberSignature Language="F#" Value="val mutable DoubleQuoteChar : char" Usage="System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>따옴표(") 문자를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> 필드가 사용 되는 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 특성을 닫는 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 렌더링 하는 방법을 보여 줍니다.는 `border` 특성을 `<table>` 요소입니다. 호출을 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 특성 값 및 사용 하 여 렌더링 하는 메서드를 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 렌더링 하는 방법을 <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> 및 <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> 필드.  
  
 이 코드 예제에서는 다음 태그를 렌더링 합니다.  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.Write" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EncodeAttributeValue">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>현재 컨텍스트의 <see cref="T:System.Web.HttpRequest" /> 개체 요구 사항에 따라 지정된 태그 특성의 값을 인코딩합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected string EncodeAttributeValue (string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeAttributeValue(string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeAttributeValue (value As String, fEncode As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeAttributeValue(System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="member this.EncodeAttributeValue : string * bool -&gt; string" Usage="htmlTextWriter.EncodeAttributeValue (value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">인코딩할 특성 값을 포함하는 문자열입니다.</param>
        <param name="fEncode">특성 값을 인코드하면 <see langword="true" />이고, 인코드하지 않으면 <see langword="false" />입니다.</param>
        <summary>현재 컨텍스트의 <see cref="T:System.Web.HttpRequest" /> 개체 요구 사항에 따라 지정된 태그 특성의 값을 인코딩합니다.</summary>
        <returns>인코딩된 특성 값을 포함하는 문자열이거나, <paramref name="value" />가 비어 있으면 <see langword="null" />이고, <paramref name="fEncode" />가 는 <see langword="false" />이면 인코딩되지 않은 특성 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> 오버 로드를 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> 특성이 없는 경우 메서드는 <xref:System.Web.UI.HtmlTextWriterAttribute> 열거형 값 또는 런타임 전에 알 수 없는.  
  
 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> 메서드 제거 큰따옴표 ("), 앰퍼샌드 (&), 및 기호 (<)는 잘못 된 태그 하므로 생성 되지 않으면 입력에 관계 없이 보다 작습니다. 에 의해 수행 됩니다 실제 인코딩과 <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 호출 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> 메서드 매개 변수로 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 메서드 호출에서 다음 인코딩합니다를 `color:blue` 스타일 특성 값입니다.  
  
 [!code-cpp[HtmlTextWriter_Methods#5](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#5)]
 [!code-csharp[HtmlTextWriter_Methods#5](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#5)]
 [!code-vb[HtmlTextWriter_Methods#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected virtual string EncodeAttributeValue (System.Web.UI.HtmlTextWriterAttribute attrKey, string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string EncodeAttributeValue(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EncodeAttributeValue (attrKey As HtmlTextWriterAttribute, value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ EncodeAttributeValue(System::Web::UI::HtmlTextWriterAttribute attrKey, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member EncodeAttributeValue : System.Web.UI.HtmlTextWriterAttribute * string -&gt; string&#xA;override this.EncodeAttributeValue : System.Web.UI.HtmlTextWriterAttribute * string -&gt; string" Usage="htmlTextWriter.EncodeAttributeValue (attrKey, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrKey">태그 특성을 나타내는 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />입니다.</param>
        <param name="value">인코딩할 특성 값을 포함하는 문자열입니다.</param>
        <summary>현재 컨텍스트의 <see cref="T:System.Web.HttpRequest" /> 개체 요구 사항에 따라 지정된 태그 특성의 값을 인코딩합니다.</summary>
        <returns>인코딩된 특성 값이 포함된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> 메서드 제거 큰따옴표 ("), 앰퍼샌드 (&), 및 기호 (<)는 잘못 된 태그 하므로 생성 되지 않으면 입력에 관계 없이 보다 작습니다. 에 의해 수행 됩니다 실제 인코딩과 <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeUrl">
      <MemberSignature Language="C#" Value="protected string EncodeUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EncodeUrl (url As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ EncodeUrl(System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.EncodeUrl : string -&gt; string" Usage="htmlTextWriter.EncodeUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">인코딩할 URL이 포함된 문자열입니다.</param>
        <summary>지정된 URL의 공백을 "%20"으로 변환하여 URL 인코딩을 최소화합니다.</summary>
        <returns>인코딩된 URL이 포함된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 문자 인코딩을 두 자리 16 진수 표현 (대/소문자) 문자 Latin ISO 코드 포인트의 뒤에 백분율 기호 (%)으로 구성 됩니다. 16 진수 표현 공간의 20입니다.  
  
   
  
## Examples  
 다음 코드 예제를 호출 하는 방법에 설명 합니다 <xref:System.Web.UI.HtmlTextWriter.EncodeUrl%2A> 매개 변수로 전달 되는 URL의 공백을 변환 방법은 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 메서드 호출.  
  
 [!code-cpp[HtmlTextWriter_Methods#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#6)]
 [!code-vb[HtmlTextWriter_Methods#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.UrlPathEncode(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.HtmlTextWriter" /> 개체가 페이지에 내용을 쓰는 데 사용하는 인코딩을 가져옵니다.</summary>
        <value>페이지에 쓰는 태그의 <see cref="T:System.Text.Encoding" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> 속성에서 기본 값을 가져옵니다 <xref:System.IO.TextWriter> 개체입니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> 사용자 지정 컨트롤을 포함 하는 페이지에 텍스트를 렌더링 하는 인코딩 유형을 쓸 속성입니다.  
  
 [!code-cpp[HtmlTextWriter_Properties#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#2)]
 [!code-csharp[HtmlTextWriter_Properties#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#2)]
 [!code-vb[HtmlTextWriter_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="EndRender">
      <MemberSignature Language="C#" Value="public virtual void EndRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EndRender" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndRender ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndRender();" />
      <MemberSignature Language="F#" Value="abstract member EndRender : unit -&gt; unit&#xA;override this.EndRender : unit -&gt; unit" Usage="htmlTextWriter.EndRender " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>컨트롤이 렌더링을 완료했다는 것을 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체나 파생 클래스의 개체에 알립니다. 이 메서드를 사용하여 <see cref="M:System.Web.UI.HtmlTextWriter.BeginRender" /> 메서드에서 열린 태그 요소를 닫을 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> 의 클래스를 구현 합니다 <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> 메서드가 기능이 없습니다. 재정의 해야 합니다 <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> 에서 파생 된 클래스에는 <xref:System.Web.UI.HtmlTextWriter> 고유한 렌더링 기능을 제공 합니다.  
  
 사용할 수는 <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> 에서 열린 태그 요소를 닫는 메서드를는 <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      </Docs>
    </Member>
    <Member MemberName="EndTagLeftChars">
      <MemberSignature Language="C#" Value="public const string EndTagLeftChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EndTagLeftChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberSignature Language="VB.NET" Value="Public Const EndTagLeftChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EndTagLeftChars;" />
      <MemberSignature Language="F#" Value="val mutable EndTagLeftChars : string" Usage="System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>태그 요소에서 닫는 태그의 왼쪽 꺾쇠 괄호와 슬래시 표시(&lt;/)를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> 필드가 사용 되는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 태그 요소의 끝 태그를 생성 하는 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에는 닫는 태그를 렌더링 하는 방법을 보여 줍니다는 `<table>` 태그 요소를 사용 하 여는 <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> 하며 <xref:System.Web.UI.HtmlTextWriter.TagRightChar> 필드에 대 한 호출에서 매개 변수 값으로는 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 메서드.  
  
 이 코드 예제에서는 다음 태그를 렌더링 합니다.  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EnterStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정한 스타일의 레이아웃과 문자 형식을 구현하는 특성이 포함된 태그 요소의 여는 태그를 씁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberSignature Language="F#" Value="abstract member EnterStyle : System.Web.UI.WebControls.Style -&gt; unit&#xA;override this.EnterStyle : System.Web.UI.WebControls.Style -&gt; unit" Usage="htmlTextWriter.EnterStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="style">태그 블록에 적용을 시작할 레이아웃과 형식을 지정하는 <see cref="T:System.Web.UI.WebControls.Style" />입니다.</param>
        <summary>지정한 스타일의 레이아웃과 문자 형식을 구현하는 특성이 포함된 <see langword="&lt;span&gt;" /> 요소의 여는 태그를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 태그 블록 배경 색 또는 테두리 너비 같은 스타일을 적용 하는 방법입니다.  
  
 합니다 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 및 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> 메서드를 지정된 된 스타일의 문자 서식을 사용 하는 태그를 만들려면 장치 어댑터 또는 컨트롤을 사용 합니다. 에 동일한 값을 사용 `style` 에 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 해당 사용 하는 방법은 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> 메서드.  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 오버 로드는 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> 여는 태그를 렌더링 하는 메서드를 `<span>` 요소입니다. 이 메서드에 추가한 필요한 특성 및 스타일 특성의 여는 태그를 `<span>` 요소에 지정 된 설정을 표시 하는 <xref:System.Web.UI.WebControls.Style> 개체입니다. 특성 및 스타일 특성을 포함을 사용 하 여 다른 태그 요소를 렌더링 하려는 경우는 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> 오버 로드 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 라는 사용자 지정 클래스를 사용 하는 방법을 보여 줍니다 `TextSample`에서 파생 된를 <xref:System.Web.UI.WebControls.WebControl> 클래스를 사용 하는 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 적용 하는 방법을 <xref:System.Web.UI.WebControls.Style.ForeColor%2A> 스타일 텍스트 문자열을 합니다.  
  
 합니다 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 메서드는 HTML 렌더링 `<span style="color:Navy;">`합니다. 합니다 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> 메서드 호출을 닫습니다는 `<span>` 텍스트 렌더링 된 후에 요소입니다.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnterStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberSignature Language="F#" Value="abstract member EnterStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.EnterStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.EnterStyle (style, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="style">태그 블록에 적용을 시작할 레이아웃과 형식을 지정하는 <see cref="T:System.Web.UI.WebControls.Style" />입니다.</param>
        <param name="tag"><paramref name="style" />에 지정된 스타일 개체가 포함될 태그 요소의 여는 태그를 지정하는 <see cref="T:System.Web.UI.HtmlTextWriterTag" />입니다.</param>
        <summary>지정한 스타일의 레이아웃과 문자 형식을 구현하는 특성이 포함된 태그 요소의 여는 태그를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 태그 블록 배경 색 또는 테두리 너비 같은 스타일을 적용 하는 방법입니다.  
  
 합니다 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 및 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> 메서드를 지정된 된 스타일의 문자 서식을 사용 하는 태그를 만들려면 장치 어댑터 또는 컨트롤을 사용 합니다. 에 동일한 값을 사용 `style` 에 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 해당 사용 하는 방법은 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> 메서드.  
  
 합니다 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 오버 로드는 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> 에서 지정한 요소의 여는 태그를 렌더링 하는 메서드를 `tag` 매개 변수입니다. 합니다 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> 메서드 다음 필요한 특성 및 스타일 특성에 추가 하 여 지정 된 설정을 표시 하려면 요소의 여는 태그를 <xref:System.Web.UI.WebControls.Style> 개체입니다. 사용 된 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> 오버 로드의 여는 태그를 렌더링 하는 `<span>` 요소.  
  
   
  
## Examples  
 다음 코드 예제에서는 라는 사용자 지정 클래스를 사용 하는 방법을 보여 줍니다 `TextSample`에서 파생 된를 <xref:System.Web.UI.WebControls.WebControl> 클래스를 사용 하는 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 적용 하는 방법을 <xref:System.Web.UI.WebControls.Style.ForeColor%2A> 스타일 텍스트 문자열을 합니다.  
  
 합니다 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 메서드는 HTML 렌더링`<span style="color:Navy;">`합니다. 합니다 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> 메서드 호출을 닫습니다는 `<span>` 텍스트 렌더링 된 후에 요소입니다.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EqualsChar">
      <MemberSignature Language="C#" Value="public const char EqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char EqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char EqualsChar;" />
      <MemberSignature Language="F#" Value="val mutable EqualsChar : char" Usage="System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>등호(<see langword="=" />)를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하려는 합니다 <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> 대신 필드를 <xref:System.Web.UI.HtmlTextWriter.EqualsChar> 특성 값의 여는 구분 기호를 생성할 때 필드입니다.  
  
   
  
## Examples  
 다음 코드 예제를 렌더링 하는 방법을 보여 줍니다 합니다 `src` 특성과 해당 값에 대 한 부분을 `<img>` 요소입니다. 코드를 사용 하는 <xref:System.Web.UI.HtmlTextWriter.EqualsChar> 필드를 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 메서드 호출 간의 등호 (=)를 렌더링 하는 `src` 특성과 그 값.  
  
 이 코드 예제에서는 다음 태그를 렌더링 합니다.  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      </Docs>
    </Member>
    <Member MemberName="EqualsDoubleQuoteString">
      <MemberSignature Language="C#" Value="public const string EqualsDoubleQuoteString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EqualsDoubleQuoteString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberSignature Language="VB.NET" Value="Public Const EqualsDoubleQuoteString As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EqualsDoubleQuoteString;" />
      <MemberSignature Language="F#" Value="val mutable EqualsDoubleQuoteString : string" Usage="System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>등호(=)와 큰따옴표(")를 함께 문자열(=")로 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> 필드가 사용 되는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 및 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 특성 값의 여는 구분 기호를 생성 하는 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 렌더링 하는 방법을 보여 줍니다.는 `border` 특성을 `<table>` 요소입니다. 호출을 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 특성 값 및 사용 하 여 렌더링 하는 메서드를 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 렌더링 하는 방법을 <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> 및 <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> 필드.  
  
 이 코드 예제에서는 다음 태그를 렌더링 합니다.  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter_Constants#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter_Constants#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ExitStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정한 레이아웃과 문자 형식을 끝내는 태그 요소의 닫는 태그를 작성합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style);" />
      <MemberSignature Language="F#" Value="abstract member ExitStyle : System.Web.UI.WebControls.Style -&gt; unit&#xA;override this.ExitStyle : System.Web.UI.WebControls.Style -&gt; unit" Usage="htmlTextWriter.ExitStyle style" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="style">닫을 레이아웃과 형식을 지정하는 <see cref="T:System.Web.UI.WebControls.Style" />입니다.</param>
        <summary>지정한 레이아웃과 문자 형식을 끝내는 <see langword="&lt;span&gt;" /> 요소의 닫는 태그를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> 오버 로드는 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%29> 의 닫는 태그를 렌더링 하는 메서드를 `<span>` 컨트롤의 닫는 태그 뒤 요소를 해당 열 요소를 닫습니다 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 호출 합니다.  
  
 합니다 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> 및 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 메서드를 시작 하 고 지정된 된 스타일의 문자 서식을 사용 하 여 블록을 종료 하는 태그를 만들려면 장치 어댑터 또는 컨트롤을 사용 합니다. 에 동일한 값을 사용 `style` 에 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 해당 사용 하는 방법은 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 라는 사용자 지정 클래스를 사용 하는 방법을 보여 줍니다 `TextSample`에서 파생 된를 <xref:System.Web.UI.WebControls.WebControl> 클래스를 사용 하는 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 적용 하는 방법을 <xref:System.Web.UI.WebControls.Style.ForeColor%2A> 스타일 텍스트 문자열을 합니다.  
  
 합니다 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 메서드는 HTML 렌더링 `<span style="color:Navy;">`합니다. 합니다 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> 메서드 호출을 닫습니다는 `<span>` 텍스트 렌더링 된 후에 요소입니다.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExitStyle(System::Web::UI::WebControls::Style ^ style, System::Web::UI::HtmlTextWriterTag tag);" />
      <MemberSignature Language="F#" Value="abstract member ExitStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.ExitStyle : System.Web.UI.WebControls.Style * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.ExitStyle (style, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="style">출력 텍스트에 더 이상 적용되지 않을 레이아웃 및 서식을 지정하는 <see cref="T:System.Web.UI.WebControls.Style" />입니다.</param>
        <param name="tag">지정된 스타일을 적용하는 특성을 포함하는 태그 요소의 닫는 태그를 지정하는 <see cref="T:System.Web.UI.HtmlTextWriterTag" />입니다. 해당 <see cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" /> 호출에 전달된 키와 일치해야 합니다.</param>
        <summary>지정된 레이아웃 및 문자 서식을 끝낼 지정된 태그 요소의 닫는 태그를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> 오버 로드 된 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> 메서드는 지정 된 요소의 닫는 태그를 렌더링 `tag` 컨트롤의 닫는 태그 뒤 해당 열려 있는 요소를 닫습니다 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> 메서드 호출 합니다.  
  
 합니다 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> 및 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 메서드를 시작 하 고 지정된 된 스타일의 문자 서식을 사용 하 여 블록을 종료 하는 태그를 만들려면 장치 어댑터 또는 컨트롤을 사용 합니다. 에 동일한 값을 사용 `style` 에 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 해당 사용 하는 방법은 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 라는 사용자 지정 클래스를 사용 하는 방법을 보여 줍니다 `TextSample`에서 파생 된를 <xref:System.Web.UI.WebControls.WebControl> 클래스를 사용 하는 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 적용 하는 방법을 <xref:System.Web.UI.WebControls.Style.ForeColor%2A> 스타일 텍스트 문자열을 합니다.  
  
 합니다 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 메서드는 HTML 렌더링 `<span style="color:Navy;">`합니다. 합니다 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> 메서드 호출을 닫습니다는 `<span>` 텍스트 렌더링 된 후에 요소입니다.  
  
 [!code-vb[System.Web.UI.HtmlTextWriter_EnterStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="protected virtual void FilterAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FilterAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.FilterAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub FilterAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void FilterAttributes();" />
      <MemberSignature Language="F#" Value="abstract member FilterAttributes : unit -&gt; unit&#xA;override this.FilterAttributes : unit -&gt; unit" Usage="htmlTextWriter.FilterAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>페이지나 웹 서버 컨트롤의 모든 속성에 대한 태그 및 스타일 특성을 모두 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특성을 태그 요소에 렌더링 되기 전에 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> 메서드가 호출 됩니다. 차례로 합니다 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> 메서드 호출을 <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> 및 <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> 각 특성 및 스타일을 렌더링 하는 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에서 파생 된 사용자 지정 클래스를 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter> 재정의 하는 클래스는 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> 메서드. 를 호출 하는 경우는 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> 재정의 된 텍스트 기록기 렌더링 하는지 여부를 확인할 `<label>` 또는 `<a>` 요소:  
  
-   경우는 `<label>` 요소 렌더링 되는 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> 메서드 검사 여부를 `style` 특성 요소에 렌더링 되 면 만들고, 그렇지 않은 경우를 `style` 설정 하는 특성 `color: blue`합니다.  
  
-   경우는 `<a>` 요소 렌더링 되는 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> 메서드를 결정 하는지 여부를 `href` 특성에 포함 되며, 그렇지 않은 경우 추가 `href` URL로 http://www.cohowinery.com.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="htmlTextWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체의 모든 버퍼를 지우고 버퍼링된 모든 데이터를 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> 클래스 구현의 합니다 <xref:System.Web.UI.HtmlTextWriter.Flush%2A> 메서드를 호출 합니다 <xref:System.IO.TextWriter.Flush%2A> 기본 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterAttribute GetAttributeKey (string attrName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterAttribute GetAttributeKey(string attrName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeKey (attrName As String) As HtmlTextWriterAttribute" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterAttribute GetAttributeKey(System::String ^ attrName);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeKey : string -&gt; System.Web.UI.HtmlTextWriterAttribute" Usage="htmlTextWriter.GetAttributeKey attrName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrName"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" />를 가져올 특성이 포함된 문자열입니다.</param>
        <summary>지정된 특성에 해당하는 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 열거형 값을 가져옵니다.</summary>
        <returns>지정된 특성에 대한 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 열거형 값이거나, 해당 특성이 열거형의 멤버가 아닌 경우에는 잘못된 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `attrName` 는 `null` 이거나 빈 문자열 (""), 또는를 입력 한 특성 이름, 값-1의 테이블에서 찾을 수 없는 <xref:System.Web.UI.HtmlTextWriterAttribute> 개체에서 반환 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서 파생 된 클래스를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.HtmlTextWriter> 재정의 하는 클래스는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드. 재정의 검사 여부를 `tagKey` 값과 같음는 <xref:System.Web.UI.HtmlTextWriterTag.Font> 것임을 나타내는 필드를 `<font>` 태그 요소로 렌더링 됩니다. 따라서 재정의 호출 하는 경우는 <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> 여부를 확인 하는 방법 합니다 `<font>` 요소를 포함을 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 특성. 경우는 <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> 반환 `false`, <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 메서드 호출을 <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> 메서드를 정의 하는 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 그 값을 설정 하 고 `30pt`합니다.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.IsAttributeDefined" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeName">
      <MemberSignature Language="C#" Value="protected string GetAttributeName (System.Web.UI.HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetAttributeName(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeName(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAttributeName (attrKey As HtmlTextWriterAttribute) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetAttributeName(System::Web::UI::HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="F#" Value="member this.GetAttributeName : System.Web.UI.HtmlTextWriterAttribute -&gt; string" Usage="htmlTextWriter.GetAttributeName attrKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="attrKey">태그 특성 이름을 가져올 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />입니다.</param>
        <summary>지정된 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 값과 관련된 태그 특성의 이름을 가져옵니다.</summary>
        <returns>태그 특성의 이름이 포함된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> 메서드는 빈 문자열을 반환 합니다 ("") 이면 `attrKey` 올바르지 않습니다 <xref:System.Web.UI.HtmlTextWriterAttribute> 값입니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> 변환 하는 메서드를 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 열거형 값을 문자열 이름입니다.  
  
 [!code-cpp[HtmlTextWriter_Methods3#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#6)]
 [!code-csharp[HtmlTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#6)]
 [!code-vb[HtmlTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterStyle GetStyleKey (string styleName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterStyle GetStyleKey(string styleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleKey (styleName As String) As HtmlTextWriterStyle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::UI::HtmlTextWriterStyle GetStyleKey(System::String ^ styleName);" />
      <MemberSignature Language="F#" Value="member this.GetStyleKey : string -&gt; System.Web.UI.HtmlTextWriterStyle" Usage="htmlTextWriter.GetStyleKey styleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="styleName"><see cref="T:System.Web.UI.HtmlTextWriterStyle" />을 가져올 스타일 특성입니다.</param>
        <summary>지정된 스타일에 대한 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 열거형 값을 가져옵니다.</summary>
        <returns><paramref name="styleName" />에 해당하는 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 열거형 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> -1로 형식화 된 값을 반환 하는 메서드를 <xref:System.Web.UI.HtmlTextWriterStyle> 값을 `styleName` 에 일치 하지 않습니다 <xref:System.Web.UI.HtmlTextWriterStyle> 열거형 값.  
  
   
  
## Examples  
 다음 코드 예제에서는 재정의 하는 방법에 설명 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 에서 파생 된 클래스에서 메서드를 <xref:System.Web.UI.HtmlTextWriter> 클래스입니다. <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 재정의 결정 하는지 여부를 `<label>` 태그 렌더링 되는 경우 확인에 대 한 요소를를 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 특성. 경우는 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 특성, 정의 되지 않은 <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> 메서드 호출에서 첫 번째 매개 변수로 사용 됩니다는 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 메서드를 추가 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 특성을 `<label>` 태그 요소 집합과 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 특성을 `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#1)]
 [!code-vb[HtmlTextWriter_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleName">
      <MemberSignature Language="C#" Value="protected string GetStyleName (System.Web.UI.HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetStyleName(valuetype System.Web.UI.HtmlTextWriterStyle styleKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleName(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyleName (styleKey As HtmlTextWriterStyle) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetStyleName(System::Web::UI::HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="F#" Value="member this.GetStyleName : System.Web.UI.HtmlTextWriterStyle -&gt; string" Usage="htmlTextWriter.GetStyleName styleKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleKey" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="styleKey">태그 특성 이름을 가져올 <see cref="T:System.Web.UI.HtmlTextWriterStyle" />입니다.</param>
        <summary>지정된 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 열거형 값과 관련된 태그 스타일 특성 이름을 가져옵니다.</summary>
        <returns><paramref name="styleKey" />에 지정된 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 열거형 값과 관련된 스타일 특성 이름입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하는 경우 `styleKey` 유효 하지 <xref:System.Web.UI.HtmlTextWriterStyle> 개체는 <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> 메서드는 빈 문자열을 반환 합니다 ("").  
  
   
  
## Examples  
 다음 코드 예제를 확인 하는 방법을 보여 줍니다 여부는 `<label>` 요소 렌더링 되 고 합니다. 따라서 확인 하는 경우 여부를 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 요소에서 정의한 스타일 특성입니다. 특성, 정의 되지 않은 경우는 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 메서드는 및 <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> 메서드 변환 합니다 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 열거형 멤버에 전달할 문자열 표현으로는 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 메서드.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetTagKey">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.HtmlTextWriterTag GetTagKey (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Web.UI.HtmlTextWriterTag GetTagKey(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagKey (tagName As String) As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::HtmlTextWriterTag GetTagKey(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member GetTagKey : string -&gt; System.Web.UI.HtmlTextWriterTag&#xA;override this.GetTagKey : string -&gt; System.Web.UI.HtmlTextWriterTag" Usage="htmlTextWriter.GetTagKey tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName"><see cref="T:System.Web.UI.HtmlTextWriterTag" />를 가져올 태그 요소입니다.</param>
        <summary>지정된 태그 요소와 관련된 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 열거형 값을 가져옵니다.</summary>
        <returns><see cref="T:System.Web.UI.HtmlTextWriterTag" /> 열거형 값이거나, <paramref name="tagName" />이 특정 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 값과 연결되어 있지 않으면 <see cref="F:System.Web.UI.HtmlTextWriterTag.Unknown" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `tagName` 는 `null`, 빈 문자열 (""), 태그 이름, 테이블에서 찾을 수 없습니다 또는 <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> 메서드가 반환 되는 <xref:System.Web.UI.HtmlTextWriterTag.Unknown> 필드.  
  
   
  
## Examples  
 다음 코드 예제에서는 오버 로드를 재정의 하는 방법을 보여 줍니다는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드 매개 변수로 문자열을 사용 합니다. 문자열에 전달 되는 <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> 해당 변환 하는 메서드를 <xref:System.Web.UI.HtmlTextWriterTag> 열거형 멤버를 다음에 전달 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 오버 로드를를 <xref:System.Web.UI.HtmlTextWriterTag> 열거형 값을 매개 변수로 합니다.  
  
 [!code-cpp[HtmlTextWriter_Methods3#8](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#8)]
 [!code-csharp[HtmlTextWriter_Methods3#8](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#8)]
 [!code-vb[HtmlTextWriter_Methods3#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="GetTagName">
      <MemberSignature Language="C#" Value="protected virtual string GetTagName (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetTagName(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagName(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTagName (tagKey As HtmlTextWriterTag) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetTagName(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="F#" Value="abstract member GetTagName : System.Web.UI.HtmlTextWriterTag -&gt; string&#xA;override this.GetTagName : System.Web.UI.HtmlTextWriterTag -&gt; string" Usage="htmlTextWriter.GetTagName tagKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">태그 요소를 가져올 <see cref="T:System.Web.UI.HtmlTextWriterTag" />입니다.</param>
        <summary>지정된 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 열거형 값과 관련된 태그 요소를 가져옵니다.</summary>
        <returns>태그 요소를 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `tagKey` 유효 하지 <xref:System.Web.UI.HtmlTextWriterTag> 값을 <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> 메서드는 빈 문자열을 반환 합니다 ("").  
  
   
  
## Examples  
 다음 코드 예제에서는 종결 하는 방법을 `<font>` 를 사용 하 여 요소를 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> 메서드. <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> 메서드 호출을 <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> 변환할 메서드는 <xref:System.Web.UI.HtmlTextWriterTag.Font> 값을 문자열로.  
  
 [!code-cpp[HtmlTextWriter_Methods3#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods3#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#7)]
 [!code-vb[HtmlTextWriter_Methods3#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Indent { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : int with get, set" Usage="System.Web.UI.HtmlTextWriter.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>각 태그 줄의 시작 부분에서 들여쓰기할 탭 위치 수를 가져오거나 설정합니다.</summary>
        <value>각 줄을 들여쓰기할 탭 위치 수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 들여쓰기 하 여 지정 된 문자열을 작성 하 여 수행 됩니다는 `tabString` 의 매개 변수를 <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> 생성자에서 지정 된 횟수는 <xref:System.Web.UI.HtmlTextWriter.Indent%2A> 속성입니다.  
  
 경우는 <xref:System.Web.UI.HtmlTextWriter.Indent%2A> 음수 값으로 속성을 설정 하면 저장 되기 전에 0으로 변경 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에 할당 된 값이 증가 하는 방법에 설명 합니다 <xref:System.Web.UI.HtmlTextWriter.Indent%2A> 특성의 여는 태그에 추가 되 면 속성을 `<span>` 요소 및 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드를 호출한. 내에서 렌더링 되는 모든 태그에 대 한 들여쓰기 향상 된 `<span>` 요소입니다.  
  
 [!code-csharp[MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      </Docs>
    </Member>
    <Member MemberName="InnerWriter">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter InnerWriter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter InnerWriter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberSignature Language="VB.NET" Value="Public Property InnerWriter As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ InnerWriter { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InnerWriter : System.IO.TextWriter with get, set" Usage="System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>태그 요소의 내부 내용을 쓰는 텍스트 작성기를 가져오거나 설정합니다.</summary>
        <value>내부 태그 내용을 쓰는 <see cref="T:System.IO.TextWriter" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 내부 태그 내용의 열고 태그 언어 요소의 닫는 태그 사이 있는 문자열입니다.  
  
 경우는 <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> 속성을 <xref:System.IO.TextWriter> 개체의 인스턴스를는 <xref:System.Web.HttpWriter> 클래스에이 사실이 기록 되 고 별도 참조가 저장 되 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서 파생 된 사용자 지정 웹 서버 컨트롤을 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.WebControls.WebControl> 재정의 하는 클래스는 <xref:System.Web.UI.Control.Render%2A> 메서드. 사용 된 <xref:System.Web.UI.HtmlTextWriter> 작성 하는 클래스는 `<font>` 요소. 사용 하 여 요소의 여는 태그를 쓴 후는 <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> 문자열을 작성 하는 속성 `"<br> The time on the server:"` 의 값을 사용 하 여이 문자열을 연결 하 고는 <xref:System.DateTime.Now%2A?displayProperty=nameWithType> 속성.  
  
 [!code-cpp[HtmlTextWriter_Properties#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#3)]
 [!code-csharp[HtmlTextWriter_Properties#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#3)]
 [!code-vb[HtmlTextWriter_Properties#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpWriter" />
        <altmember cref="T:System.Web.UI.WebControls.WebControl" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>다음에 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 호출하는 동안 지정된 태그 특성과 그 값이 렌더링되는지 여부를 결정합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="member this.IsAttributeDefined : System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="htmlTextWriter.IsAttributeDefined key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="key">태그 특성과 관련된 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />입니다.</param>
        <summary>다음에 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 호출하는 동안 지정된 태그 특성과 그 값이 렌더링되는지 여부를 결정합니다.</summary>
        <returns>다음에 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 호출하는 동안 특성이 렌더링되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 할당할 값을 가져오려면 합니다 <xref:System.Web.UI.HtmlTextWriterAttribute> 개체를 사용 하 여는 <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%40%29> 대신이 오버 로드 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 재정의 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 에서 상속 되는 클래스에서 메서드를 <xref:System.Web.UI.HtmlTextWriter> 클래스입니다. <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 여부 검사를 무시 한 `<font>` 태그 요소로 렌더링 됩니다. 따라서 재정의 호출 하는 경우는 <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> 확인 하는 메서드 있는지 여부를 `<font>` 요소에 포함 되어는 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 특성. 그렇지 않은 경우, <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 메서드 호출을 <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> 메서드를 정의 하는 합니다 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 특성 및 해당 값을 설정 합니다 `30pt`합니다.  
  
 [!code-cpp[HtmlTextWriter_Methods#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter_Methods#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsAttributeDefined (key As HtmlTextWriterAttribute, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsAttributeDefined(System::Web::UI::HtmlTextWriterAttribute key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberSignature Language="F#" Value="member this.IsAttributeDefined : System.Web.UI.HtmlTextWriterAttribute *  -&gt; bool" Usage="htmlTextWriter.IsAttributeDefined (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">태그 특성과 관련된 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />입니다.</param>
        <param name="value">특성에 할당된 값입니다.</param>
        <summary>다음에 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 호출하는 동안 지정된 태그 특성과 그 값이 렌더링되는지 여부를 결정합니다.</summary>
        <returns>다음에 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 호출하는 동안 특성이 렌더링되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> 메서드가 반환 되는 `true`에 할당할 값을 <xref:System.Web.UI.HtmlTextWriterAttribute> 개체에 반환 됩니다는 `value` 매개 변수.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStyleAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>다음에 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 호출하는 동안 태그 스타일 특성이 렌더링되는지 여부를 결정합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="member this.IsStyleAttributeDefined : System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="htmlTextWriter.IsStyleAttributeDefined key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="key">특성과 관련된 <see cref="T:System.Web.UI.HtmlTextWriterStyle" />입니다.</param>
        <summary>다음에 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 호출하는 동안 지정된 태그 스타일 특성이 렌더링되는지 여부를 결정합니다.</summary>
        <returns>다음에 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 호출하는 동안 특성이 렌더링되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정된 된 스타일 특성을 사용 하 여 렌더링 되는 값을 사용 합니다 <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%40%29> 오버 로드는 <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제를 확인 하는 방법을 보여 줍니다 여부는 `<label>` 요소 렌더링 되 고 합니다. 그렇다면를 <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> 메서드 검사 여부를 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 스타일 특성이 요소에 정의 되었습니다. 경우는 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 특성, 정의 되지 않은 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 메서드를 정의 합니다 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 특성 및 해당 값을 설정 합니다 `red`.  
  
 [!code-cpp[HtmlTextWriter_Methods3#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key, [out] string&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsStyleAttributeDefined (key As HtmlTextWriterStyle, ByRef value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsStyleAttributeDefined(System::Web::UI::HtmlTextWriterStyle key, [Runtime::InteropServices::Out] System::String ^ % value);" />
      <MemberSignature Language="F#" Value="member this.IsStyleAttributeDefined : System.Web.UI.HtmlTextWriterStyle *  -&gt; bool" Usage="htmlTextWriter.IsStyleAttributeDefined (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">특성과 관련된 <see cref="T:System.Web.UI.HtmlTextWriterStyle" />입니다.</param>
        <param name="value">스타일 특성에 할당되는 값입니다.</param>
        <summary>다음에 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 호출하는 동안 지정된 태그 스타일 특성과 그 값이 렌더링되는지 여부를 결정합니다.</summary>
        <returns>다음에 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> 메서드를 호출하는 동안 특성과 그 값이 렌더링되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> 메서드가 반환 되는 `true`에 할당할 값을 <xref:System.Web.UI.HtmlTextWriterStyle> 특성에 반환 됩니다는 `value` 매개 변수.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public virtual bool IsValidFormAttribute (string attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidFormAttribute(string attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidFormAttribute (attribute As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidFormAttribute(System::String ^ attribute);" />
      <MemberSignature Language="F#" Value="abstract member IsValidFormAttribute : string -&gt; bool&#xA;override this.IsValidFormAttribute : string -&gt; bool" Usage="htmlTextWriter.IsValidFormAttribute attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="attribute">확인할 특성의 이름이 포함된 문자열입니다.</param>
        <summary><see langword="&lt;form&gt;" /> 태그 요소의 여는 태그에 특성을 렌더링할 수 있는지 확인합니다.</summary>
        <returns>항상 <see langword="true" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter> 의 클래스를 구현 합니다 <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> 메서드가 반환 되는 `true` 모든 특성에 대 한 합니다. 재정의 <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> 여는 태그를 렌더링할 수 있는 특성을 제한 하는 `<form>` 요소입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>재정의 <see cref="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" /> 반환 하는 방법 <see langword="true" /> 에 포함 될 수 있는 해당 특성에 대해서만 합니다 <see langword="&lt;form&gt;" /> 태그에서 파생 된 클래스의 <see cref="T:System.Web.UI.HtmlTextWriter" /> 클래스 것입니다.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public override string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property NewLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NewLine { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLine : string with get, set" Usage="System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.HtmlTextWriter" /> 개체에서 사용하는 줄 종결자 문자열을 가져오거나 설정합니다.</summary>
        <value>현재 <see cref="T:System.Web.UI.HtmlTextWriter" />에서 사용한 줄 종결자 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴, 뒤에 줄 바꿈 ("\r\n").  
  
 줄 종결자 문자열을 출력 스트림에 때마다 기록 됩니다의 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 메서드를 호출 합니다. 경우는 <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> 속성 `null`를 기본 줄 바꿈 문자가 사용 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서 파생 된 사용자 지정 클래스를 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter> 재정의 하는 클래스는 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> 메서드. 호출 되 면 합니다 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> 재정의 된 텍스트 기록기 렌더링 하는지 여부를 확인할 `<label>` 또는 `<a>` 요소입니다. 그렇다면는 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> 메서드 레이블에 대 한 스타일 특성을 정의 되어 있는지 여부를 확인 합니다. 없는 스타일에 정의 된 경우는 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> 의 기본값을 설정 하는 메서드는 `style:color` 파란색 특성입니다. 합니다 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> 메서드를 사용 하 여는 <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> 줄을 삽입 하려면 속성 태그에 중단 및 기타 정의 된 특성을 씁니다.  
  
 [!code-cpp[HtmlTextWriter_Methods#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter_Methods#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter_Methods#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="abstract member OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool&#xA;override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="htmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">렌더링할 특성의 이름이 포함된 문자열입니다.</param>
        <param name="value">특성에 할당되는 값이 포함된 문자열입니다.</param>
        <param name="key">태그 특성과 관련된 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />입니다.</param>
        <summary>지정된 태그 특성과 그 값이 현재 태그 요소로 렌더링될 수 있는지 여부를 결정합니다.</summary>
        <returns>항상 <see langword="true" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter> 의 클래스를 구현 합니다 <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> 메서드는 항상 반환 `true`합니다. <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> 재정의 특성 페이지로 렌더링 되는지 여부를 결정할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제를 재정의 하는 방법을 보여 줍니다는 <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> 메서드. 경우는 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 특성이 렌더링 되는지 하지만 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 값이 아닙니다 `30pt`, <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> 호출을 재정의 합니다 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 추가 하는 방법을 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 특성 및 해당 값을 설정 `30pt`.  
  
 [!code-csharp[MarkupTextWriter_Methods3#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#5)]
 [!code-vb[MarkupTextWriter_Methods3#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>상속 하는 경우는 <see cref="T:System.Web.UI.HtmlTextWriter" /> 재정의할 수 있습니다 클래스는 <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> 반환 하는 방법 <see langword="false" /> 특성을 전혀 렌더링 되 고, 특정 요소에 렌더링할 또는 특정 태그에 대해 렌더링 되지 않도록 합니다. 예를 들어에서 파생 된 개체를 원하지 않는 경우 <see cref="T:System.Web.UI.HtmlTextWriter" /> 렌더링 하는 <see langword="bgcolor" /> 특성을 <see langword="&lt;table&gt;" /> 재정의할 수 있습니다 요소는 <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> 반환 <see langword="false" /> 때 <paramref name="name" /> 전달 <see langword="bgcolor" /> 및 <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> 속성 값이 <see langword="table" />합니다.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool&#xA;override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="htmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">렌더링할 스타일 특성의 이름이 포함된 문자열입니다.</param>
        <param name="value">스타일 특성에 할당되는 값이 포함된 문자열입니다.</param>
        <param name="key">스타일 특성과 관련된 <see cref="T:System.Web.UI.HtmlTextWriterStyle" />입니다.</param>
        <summary>지정된 태그 특성과 그 값이 현재 태그 요소로 렌더링될 수 있는지 여부를 결정합니다.</summary>
        <returns>항상 <see langword="true" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter> 의 클래스를 구현 합니다 <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> 메서드는 항상 반환 `true`합니다. <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> 재정의 스타일 특성을 페이지로 렌더링 되는지 여부를 결정할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제를 재정의 하는 방법을 보여 줍니다는 <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> 메서드. 경우는 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 스타일 특성이 렌더링 되는지 하지만 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 값이 아닙니다 `purple`, <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> 사용 하 여 재정의 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 설정 하는 방법을 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 특성을 `purple`입니다.  
  
 [!code-csharp[MarkupTextWriter_Methods3#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#6)]
 [!code-vb[MarkupTextWriter_Methods3#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>상속 하는 경우는 <see cref="T:System.Web.UI.HtmlTextWriter" /> 재정의할 수 있습니다 클래스는 <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> 반환 하는 방법 <see langword="false" /> 스타일 특성을 전혀 렌더링 되 고, 특정 요소에 렌더링할 또는 특정 태그 언어에 대해 렌더링 되지 않도록 합니다. 파생 된 개체를 원하지 않는 경우 <see cref="T:System.Web.UI.HtmlTextWriter" /> 렌더링 하는 <see langword="color" /> 스타일 특성을를 <see langword="&lt;p&gt;" /> 재정의할 수 있습니다 요소는 <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> 반환 <see langword="false" /> 때 <paramref name="name" /> 전달<see langword="color" />하며 <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> 속성 값이 <see langword="p" />합니다.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="abstract member OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool&#xA;override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="htmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">렌더링할 요소의 이름이 포함된 문자열입니다.</param>
        <param name="key">요소와 관련된 <see cref="T:System.Web.UI.HtmlTextWriterTag" />입니다.</param>
        <summary>지정된 태그 요소가 요청한 페이지로 렌더링되는지 여부를 결정합니다.</summary>
        <returns>항상 <see langword="true" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter> 의 클래스를 구현 합니다 <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> 메서드는 항상 반환 `true`합니다. <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> 재정의 요소 페이지로 렌더링 되는지 여부를 결정할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제를 재정의 하는 방법을 보여 줍니다는 <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> 메서드. 경우는 <xref:System.Web.UI.HtmlTextWriterTag.Font> 요소 렌더링 되는 <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> 사용을 재정의 <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> 결정 하는 방법 여부를 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 특성이 렌더링 되 고 합니다. 사용 그렇지 않은 경우는 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 만들려면 메서드를 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 특성 및 해당 값을 설정 `20pt`합니다.  
  
 [!code-csharp[MarkupTextWriter_Methods3#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#4)]
 [!code-vb[MarkupTextWriter_Methods3#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>상속 하는 경우는 <see cref="T:System.Web.UI.HtmlTextWriter" /> 재정의할 수 있습니다 클래스는 <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> 반환할 메서드 <see langword="false" /> 태그 요소를 전혀 또는 특정 태그 언어에 대 한 렌더링 되지 않도록 방지 하기 위해. 파생 된 개체를 원하지 않는 경우 <see cref="T:System.Web.UI.HtmlTextWriter" /> 렌더링 하는 <see langword="&lt;font&gt;" /> 재정의할 수 있습니다 요소는 <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> 반환 하는 방법 <see langword="false" /> 포함 하는 페이지가 요청 될 때를 <see langword="&lt;font&gt;" /> 요소.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="OutputTabs">
      <MemberSignature Language="C#" Value="protected virtual void OutputTabs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTabs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputTabs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputTabs();" />
      <MemberSignature Language="F#" Value="abstract member OutputTabs : unit -&gt; unit&#xA;override this.OutputTabs : unit -&gt; unit" Usage="htmlTextWriter.OutputTabs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>태그 문자 줄의 들여쓰기 수준을 나타내는 일련의 탭 문자열을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> 메서드는 <xref:System.Web.UI.HtmlTextWriter.Indent%2A> 속성을 가져오려면 원하는 들여쓰기를 쓸 수 탭 문자열을 확인 합니다.  
  
 탭 문자열을 사용 하 여 지정 된 <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> 생성자입니다. 없는 탭 문자열을 지정 합니다 <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> 상수 (`\t`) 사용 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 재정의 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> 에서 파생 된 클래스에서 메서드를 <xref:System.Web.UI.HtmlTextWriter> 클래스입니다. 합니다 <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> 사용을 항상 재정의 <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> 들여쓰기를 수행 하는 상수입니다.  
  
 [!code-cpp[HtmlTextWriter_Methods#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#7)]
 [!code-csharp[HtmlTextWriter_Methods#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#7)]
 [!code-vb[HtmlTextWriter_Methods#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.Indent" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName="PopEndTag">
      <MemberSignature Language="C#" Value="protected string PopEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string PopEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      <MemberSignature Language="VB.NET" Value="Protected Function PopEndTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ PopEndTag();" />
      <MemberSignature Language="F#" Value="member this.PopEndTag : unit -&gt; string" Usage="htmlTextWriter.PopEndTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>렌더링된 요소의 목록에서 가장 최근에 저장된 태그 요소를 제거합니다.</summary>
        <returns>가장 최근에 렌더링된 태그 요소가 포함된 <see cref="T:System.String" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요소에서 렌더링 된 태그 요소의 목록에 추가 됩니다는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드. 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 메서드를 호출 하 여 목록에서 태그 요소를 제거 합니다 <xref:System.Web.UI.HtmlTextWriter.PopEndTag%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">렌더링된 요소의 목록이 비어 있습니다.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PushEndTag">
      <MemberSignature Language="C#" Value="protected void PushEndTag (string endTag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PushEndTag(string endTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub PushEndTag (endTag As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void PushEndTag(System::String ^ endTag);" />
      <MemberSignature Language="F#" Value="member this.PushEndTag : string -&gt; unit" Usage="htmlTextWriter.PushEndTag endTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endTag">태그 요소의 닫는 태그입니다.</param>
        <summary>태그 요소의 끝 태그를 생성할 때 이후에 사용할 지정된 태그 요소를 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요소는 렌더링 된 태그 요소의 목록에 추가 됩니다 때 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드 호출을 <xref:System.Web.UI.HtmlTextWriter.PushEndTag%2A> 메서드. <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 메서드 끝 태그 요소를 렌더링 한 후 목록에서 태그 요소를 제거 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttribute">
      <MemberSignature Language="C#" Value="protected static void RegisterAttribute (string name, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterAttribute(string name, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterAttribute(System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterAttribute (name As String, key As HtmlTextWriterAttribute)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterAttribute(System::String ^ name, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="static member RegisterAttribute : string * System.Web.UI.HtmlTextWriterAttribute -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterAttribute (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">등록할 태그 특성의 이름이 포함된 문자열입니다.</param>
        <param name="key">특성 이름에 해당하는 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />입니다.</param>
        <summary>요청하는 클라이언트로 제대로 렌더링되도록 소스 파일에서 리터럴 또는 동적으로 생성된 특성을 포함하여 태그 특성을 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 태그 언어의 미리 정의 된 특성에 대 한 호출 하 여 등록 합니다 <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> 메서드 때 첫 번째 <xref:System.Web.UI.HtmlTextWriter> 개체가 만들어집니다. 동적 특성을 사용 하 여 등록할 수는 <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> 다른 시간에 메서드.  
  
 등록 테이블에서 사용 하는 합니다 <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> 메서드는 `static`이므로 모든 등록 특성을 적용 <xref:System.Web.UI.HtmlTextWriter> 호스트 컴퓨터의 개체입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStyle">
      <MemberSignature Language="C#" Value="protected static void RegisterStyle (string name, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterStyle(string name, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterStyle(System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterStyle (name As String, key As HtmlTextWriterStyle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterStyle(System::String ^ name, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="static member RegisterStyle : string * System.Web.UI.HtmlTextWriterStyle -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterStyle (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">스타일 이름을 지정하는 소스 파일에서 전달된 문자열입니다.</param>
        <param name="key">지정된 스타일에 해당하는 <see cref="T:System.Web.UI.HtmlTextWriterStyle" />입니다.</param>
        <summary>요청하는 클라이언트로 제대로 렌더링되도록 소스 파일에서 리터럴 또는 동적으로 생성된 속성을 포함하여 태그 스타일 속성을 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 태그 언어의 미리 정의 된 연계 스타일 시트 (CSS) 특성에 대 한 호출 하 여 등록 합니다 <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> 메서드 때 첫 번째 <xref:System.Web.UI.HtmlTextWriter> 개체가 만들어집니다. 동적 스타일 특성을 사용 하 여 등록할 수 있습니다는 <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> 다른 시간에 메서드.  
  
 등록 테이블에서 사용 하는 합니다 <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> 메서드는 `static`이므로 모든 등록 특성을 적용 <xref:System.Web.UI.HtmlTextWriter> 호스트 컴퓨터의 개체입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="RegisterTag">
      <MemberSignature Language="C#" Value="protected static void RegisterTag (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterTag(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterTag(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub RegisterTag (name As String, key As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void RegisterTag(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="static member RegisterTag : string * System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="System.Web.UI.HtmlTextWriter.RegisterTag (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">HTML 태그가 포함된 문자열입니다.</param>
        <param name="key">렌더링할 요소를 지정하는 <see cref="T:System.Web.UI.HtmlTextWriterTag" />입니다.</param>
        <summary>요청하는 클라이언트로 제대로 렌더링되도록 소스 파일에서 리터럴 또는 동적으로 생성된 태그를 포함하여 태그를 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 언어의 미리 정의 된 태그를 호출 하 여 등록 합니다 <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> 메서드 때 첫 번째 <xref:System.Web.UI.HtmlTextWriter> 개체가 만들어집니다. 동적 태그를 사용 하 여 등록할 수 있습니다는 <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> 다른 시간에 메서드.  
  
 등록 테이블에서 사용 하는 합니다 <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> 메서드는 `static`이므로 태그의 등록을 모두 적용할 <xref:System.Web.UI.HtmlTextWriter> 호스트 컴퓨터의 개체입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterContent();" />
      <MemberSignature Language="F#" Value="abstract member RenderAfterContent : unit -&gt; string&#xA;override this.RenderAfterContent : unit -&gt; string" Usage="htmlTextWriter.RenderAfterContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>태그 요소의 내용 뒤와 닫는 태그 앞에 있는 텍스트나 공백을 태그 출력 스트림에 씁니다.</summary>
        <returns>요소의 내용 뒤에 있는 쓸 공백이나 텍스트가 포함된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> 방법은 현재 태그 요소로에 자식 요소를 삽입 하려는 경우 유용할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 재정의 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> 에서 파생 된 클래스에서 메서드를 <xref:System.Web.UI.HtmlTextWriter> 을 확인 하려면 클래스 있는지 여부를 `<label>` 요소 렌더링 되 고 합니다. 그렇다면 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> 닫는 태그를 삽입 하는 재정의 `<font>` 의 닫는 태그 바로 앞의 요소는 `<label>` 요소. 이외의 요소가 `<label>` 렌더링 되는 <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> 기본 메서드가 사용 됩니다.  
  
 [!code-cpp[HtmlTextWriter_Methods1#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#3)]
 [!code-csharp[HtmlTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#3)]
 [!code-vb[HtmlTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="T:System.Web.UI.HtmlTextWriter" /> 의 클래스를 구현 합니다 <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> 메서드가 반환 되는 <see langword="null" />합니다. 재정의 <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> 텍스트나 닫는 태그 앞 공백을 요소 콘텐츠를 작성 하려는 경우.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderAfterTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderAfterTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderAfterTag : unit -&gt; string&#xA;override this.RenderAfterTag : unit -&gt; string" Usage="htmlTextWriter.RenderAfterTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>태그 요소의 닫는 태그 뒤에 있는 공백이나 텍스트를 씁니다.</summary>
        <returns>요소의 닫는 태그 뒤에 있는 쓸 공백이나 텍스트입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> 메서드는 요소 태그 추가 닫는 태그를 렌더링 하려는 경우 유용할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 재정의 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> 에서 파생 된 클래스가 있는지 여부를 결정 하는 방법 합니다 <xref:System.Web.UI.HtmlTextWriter> 렌더링 하는 클래스를 `<label>` 요소. 그렇다면 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> 닫는 태그를 삽입 하는 재정의 `<font>` 요소 바로 뒤를 `<label>` 요소. 없는 경우는 `<label>` 요소는 <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> 기본 메서드가 사용 됩니다.  
  
 [!code-cpp[HtmlTextWriter_Methods4#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#2)]
 [!code-vb[HtmlTextWriter_Methods4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="T:System.Web.UI.HtmlTextWriter" /> 의 클래스를 구현 합니다 <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> 메서드가 반환 되는 <see langword="null" />합니다. 재정의 <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> 텍스트나 요소의 닫는 태그 뒤 간격을 작성 하려는 경우.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeContent () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeContent();" />
      <MemberSignature Language="F#" Value="abstract member RenderBeforeContent : unit -&gt; string&#xA;override this.RenderBeforeContent : unit -&gt; string" Usage="htmlTextWriter.RenderBeforeContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>태그 요소의 내용 앞과 여는 태그 뒤에 있는 텍스트나 공백을 씁니다.</summary>
        <returns>요소의 내용 앞에 있는 쓸 텍스트나 텍스트입니다. <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />는 재정의되지 않으면 <see langword="null" />을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> 방법은 현재 태그 요소로 내부 태그 앞에 자식 요소를 삽입 하려는 경우 유용할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 재정의 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> 에서 파생 된 클래스가 있는지 여부를 결정 하는 방법의 <xref:System.Web.UI.HtmlTextWriter> 클래스를 렌더링 하려고를 `<label>` 요소. 그렇다면 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> 의 여는 태그를 삽입 하는 재정의 `<font>` 여는 태그 바로 다음 요소를 `<label>` 요소. 없는 경우는 `<label>` 요소는 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> 기본 메서드가 사용 됩니다.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="T:System.Web.UI.HtmlTextWriter" /> 의 클래스를 구현 합니다 <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> 메서드가 반환 되는 <see langword="null" />합니다. 재정의 <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> 텍스트나 공백을 여는 태그 뒤 요소 콘텐츠 미리 작성 하려는 경우.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RenderBeforeTag () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ RenderBeforeTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderBeforeTag : unit -&gt; string&#xA;override this.RenderBeforeTag : unit -&gt; string" Usage="htmlTextWriter.RenderBeforeTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>태그 요소의 여는 태그 앞에 있는 텍스트나 공백을 씁니다.</summary>
        <returns>태그 요소의 여는 태그 앞에 있는 쓸 텍스트나 공백입니다. 재정의되지 않으면 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> 방법은 의도 한 요소의 여는 태그 앞 추가 태그를 렌더링 하려는 경우 유용할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 재정의 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> 클래스에서 파생 되는 지 여부를 결정 하는 메서드를 <xref:System.Web.UI.HtmlTextWriter> 클래스를 렌더링 하려고를 `<label>` 요소. 그렇다면를 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> 의 여는 태그를 삽입 하는 재정의 `<font>` 요소 바로 앞의 `<label>` 요소입니다. 렌더링 하는 경우는 `<label>` 요소는 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> 기본 메서드가 사용 됩니다.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="T:System.Web.UI.HtmlTextWriter" /> 의 클래스를 구현 합니다 <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> 메서드가 반환 되는 <see langword="null" />합니다. 재정의 <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> 요소 열기 태그를 미리 텍스트나 텍스트를 작성 하려는 경우.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RenderBeginTag">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>태그 요소의 여는 태그를 출력 스트림에 씁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member RenderBeginTag : string -&gt; unit&#xA;override this.RenderBeginTag : string -&gt; unit" Usage="htmlTextWriter.RenderBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">여는 태그를 렌더링할 태그 요소 이름을 포함하는 문자열입니다.</param>
        <summary>지정된 태그 요소의 여는 태그를 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 재정의 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.String%29> 메서드를 태그 요소 중 하나가 아닌 경우는 <xref:System.Web.UI.HtmlTextWriterTag> 열거형 값입니다.  
  
 태그 요소를 사용 하 여 생성할 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드를 첫 번째 호출을 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 및 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 요소 또는 요소의 여는 태그에 표시 되는 스타일 특성을 지정 하는 데 필요한 메서드를 합니다. 내부 태그를 생성 한 후 호출 된 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 닫는 태그를 생성 하는 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는를 호출 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드는 비표준의 여는 태그를 렌더링 하는 사용자 지정 컨트롤에서 `MyTag` 요소. 코드 예제에서는 호출을 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 내부 태그를 차례로 호출을 렌더링 하는 방법은 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 메서드는 요소를 닫습니다.  
  
 이 코드 예제에서는 다음 태그를 생성합니다.  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderBeginTag (tagKey As HtmlTextWriterTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderBeginTag(System::Web::UI::HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="F#" Value="abstract member RenderBeginTag : System.Web.UI.HtmlTextWriterTag -&gt; unit&#xA;override this.RenderBeginTag : System.Web.UI.HtmlTextWriterTag -&gt; unit" Usage="htmlTextWriter.RenderBeginTag tagKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">렌더링할 태그 요소의 여는 태그를 정의하는 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 값 중 하나입니다.</param>
        <summary>지정된 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 열거형 값과 관련된 태그 요소의 여는 태그를 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 오버 로드는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.Web.UI.HtmlTextWriterTag%29> 태그 요소 중 하나는 알려진 형식의 경우 메서드는 <xref:System.Web.UI.HtmlTextWriterTag> 열거형 값입니다.  
  
 태그 요소를 사용 하 여 생성할 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드를 첫 번째 호출을 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 및 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 요소 또는 요소의 여는 태그에 표시 되는 스타일 특성을 지정 하는 데 필요한 메서드를 합니다. 내부 태그를 생성 한 후 호출 된 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 닫는 태그를 생성 하는 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 여는 태그를 출력 하는 방법은 `<img>` 요소입니다. 요소에 추가 되는 특성을 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 메서드 여에서 됩니다 `<img>` 태그입니다. <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 메서드를 사용 하 여를 닫는 태그를 생성 합니다.  
  
 이 코드 예제에서는 다음 태그를 생성합니다.  
  
 `<img alt="Encoding &quot;Required&quot;" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderEndTag">
      <MemberSignature Language="C#" Value="public virtual void RenderEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RenderEndTag ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RenderEndTag();" />
      <MemberSignature Language="F#" Value="abstract member RenderEndTag : unit -&gt; unit&#xA;override this.RenderEndTag : unit -&gt; unit" Usage="htmlTextWriter.RenderEndTag " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>태그 요소의 끝 태그를 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출을 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 메서드는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 오버 로드를 호출한와 요소의 닫는 태그 (내부 태그) 간의 모든 콘텐츠가 렌더링 된 후입니다.  
  
   
  
## Examples  
 다음 코드 예제를 호출 하는 방법에 설명 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 모두 메서드는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 여는 태그를 생성 하는 메서드 및 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 을 열고 사용자 지정 닫는태그사이내부태그를렌더링하는메서드`MyTag` 요소를 호출한 합니다.  
  
 이 코드 예제에서는 다음 태그를 생성합니다.  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingChars">
      <MemberSignature Language="C#" Value="public const string SelfClosingChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingChars As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingChars;" />
      <MemberSignature Language="F#" Value="val mutable SelfClosingChars : string" Usage="System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>태그의 공백과 자체 닫는 슬래시 기호(/)를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.SelfClosingChars> 필드는 자체 닫는 태그 요소에 사용 됩니다. 예:  
  
 `<input type="submit" value="go"  />`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingTagEnd">
      <MemberSignature Language="C#" Value="public const string SelfClosingTagEnd;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingTagEnd" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberSignature Language="VB.NET" Value="Public Const SelfClosingTagEnd As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ SelfClosingTagEnd;" />
      <MemberSignature Language="F#" Value="val mutable SelfClosingTagEnd : string" Usage="System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>자체적으로 닫는 태그 요소의 닫는 슬래시 기호와 닫는 꺾쇠 괄호(/&gt;)를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> 필드가 사용 되는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드 자체 닫음 태그 요소를 생성 하는 경우.  
  
   
  
## Examples  
 다음 코드 예제에는 사용자 지정 값을 렌더링 하는 방법을 보여 줍니다 `FileName` 나타내는 문자와 속성 뒤에 따옴표를 <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> 필드입니다. 코드 예제에서는 호출 하 여는 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 메서드와 전달은 <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> 필드 매개 변수 인수는 요소를 닫습니다.  
  
 이 코드 예제에서는 렌더링 된 `FileName` 속성 값 및 다음 태그:  
  
 `" />`  
  
 [!code-csharp[MarkupTextWriter_Constants#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#11)]
 [!code-vb[MarkupTextWriter_Constants#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SemicolonChar">
      <MemberSignature Language="C#" Value="public const char SemicolonChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SemicolonChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SemicolonChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SemicolonChar;" />
      <MemberSignature Language="F#" Value="val mutable SemicolonChar : char" Usage="System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>세미콜론(;)을 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 전달 된 <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> 필드에서 매개 변수 인수를를 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 메서드 호출을 사용자 지정 컨트롤 또는 어댑터에서 세미콜론을 렌더링 하려는 경우.  
  
   
  
## Examples  
 다음 코드 예제에서는 수동 일련의 태그 요소에 스타일을 렌더링 하는 방법에 설명 합니다. 사용 하 여 코드 예제는 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 렌더링 하는 방법 `font-size` 및 `border-style` 스타일 특성입니다. <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> 필드의 매개 변수로 사용 되는 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 의 값을 구분 하는 메서드는 `font-size` 특성의 시작 부분에서는 `border-style` 특성입니다.  
  
 이 코드 예제에서는 다음 태그를 렌더링 합니다.  
  
 `style="font-size:12pt;border-style:ridge"`  
  
 [!code-csharp[MarkupTextWriter_Constants#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simplebutton.cs#7)]
 [!code-vb[MarkupTextWriter_Constants#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simplebutton.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SingleQuoteChar">
      <MemberSignature Language="C#" Value="public const char SingleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SingleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SingleQuoteChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SingleQuoteChar;" />
      <MemberSignature Language="F#" Value="val mutable SingleQuoteChar : char" Usage="System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>아포스트로피(')를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.HtmlTextWriter.SingleQuoteChar> 아포스트로피를 렌더링 하는 데 필요한 경우 필드입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SlashChar">
      <MemberSignature Language="C#" Value="public const char SlashChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SlashChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SlashChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SlashChar;" />
      <MemberSignature Language="F#" Value="val mutable SlashChar : char" Usage="System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>슬래시 기호(/)를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.HtmlTextWriter.SlashChar> URL을 작성 하는 경우 슬래시를 렌더링 하는 필드 표시 합니다. 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> 메서드는 <xref:System.Web.UI.HtmlTextWriter.SlashChar> 태그 요소의 닫는 태그를 작성할 때 필드입니다.  
  
   
  
## Examples  
 다음 코드 예제에는 수동으로 렌더링 하는 방법을 보여 줍니다.는 `src` 특성을 `<img>` 요소입니다. 코드 예제에서는 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 메서드를 <xref:System.Web.UI.HtmlTextWriter.SlashChar> 에 적용 되는 경로에 슬래시를 렌더링 하는 매개 변수로 필드 표시는 `src` 특성입니다.  
  
 이 코드 예제에서는 다음 태그를 렌더링 합니다.  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter_Constants#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter_Constants#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SpaceChar">
      <MemberSignature Language="C#" Value="public const char SpaceChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SpaceChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberSignature Language="VB.NET" Value="Public Const SpaceChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char SpaceChar;" />
      <MemberSignature Language="F#" Value="val mutable SpaceChar : char" Usage="System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>공백( ) 문자를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.SpaceChar> 필드가 사용 되는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 및 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 요소와 특성 간의 구분 기호를 작성할 때 메서드.  
  
   
  
## Examples  
 이 섹션에서는 두 코드 예제를 제공합니다. 첫 번째 문자 배열을 만드는 방법을 보여 줍니다. 두 번째 배열을 사용 하는 방법을 보여 줍니다.  
  
 이러한 코드 예제는 다음 태그를 생성합니다.  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 다음 코드 예제에서는 만드는 방법을 보여 줍니다.는 <xref:System.Char> 포함 된 배열은 <xref:System.Web.UI.HtmlTextWriter.SpaceChar> 필드입니다.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 다음 코드 예제에는 호출할 때 매개 변수로 앞의 코드 예제에서 생성 된 배열을 사용 하는 방법을 보여 줍니다는 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 메서드.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StyleEqualsChar">
      <MemberSignature Language="C#" Value="public const char StyleEqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char StyleEqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberSignature Language="VB.NET" Value="Public Const StyleEqualsChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char StyleEqualsChar;" />
      <MemberSignature Language="F#" Value="val mutable StyleEqualsChar : char" Usage="System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스타일 특성을 값으로 설정하는 데 사용되는 콜론(<see langword=":" />) 문자를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> 필드가 사용 되는 <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> 스타일 이름 및 값을 구분 하는 방법입니다.  
  
   
  
## Examples  
 다음 코드 예제에는 렌더링 하는 방법을 보여 줍니다.는 `FontWeight` 특성 및 값의 `bold` 요소의 여는 태그입니다. 코드 예제에서는 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 메서드는 <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> 각 스타일 특성의 값을 설정 하는 문자를 렌더링 하는 매개 변수로 필드입니다.  
  
 이 코드 예제에서는 다음 태그를 렌더링 합니다.  
  
 `FontWeight:"bold"`  
  
 [!code-csharp[MarkupTextWriter_Constants#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#5)]
 [!code-vb[MarkupTextWriter_Constants#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterTag TagKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagKey As HtmlTextWriterTag" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::HtmlTextWriterTag TagKey { System::Web::UI::HtmlTextWriterTag get(); void set(System::Web::UI::HtmlTextWriterTag value); };" />
      <MemberSignature Language="F#" Value="member this.TagKey : System.Web.UI.HtmlTextWriterTag with get, set" Usage="System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>지정된 태그 요소의 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 값을 가져오거나 설정합니다.</summary>
        <value>여는 태그를 렌더링하는 태그 요소입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> 속성에서 상속 된 클래스에만 사용 되는 <xref:System.Web.UI.HtmlTextWriter> 클래스입니다. 읽거나 설정 해야 합니다 <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> 속성에 대 한 호출 에서만에서 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 메서드를 일정 한 값으로 설정 된 전용 시간입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 재정의 된 버전의 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> 에서 파생 된 클래스에서 메서드를 <xref:System.Web.UI.HtmlTextWriter> 클래스입니다. 값을 사용 합니다 <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> 사용자 지정을 사용 하 여 서버 컨트롤 여부를 확인 하려면 속성 <xref:System.Web.UI.HtmlTextWriter> 개체 렌더링 하는 `<label>` 태그 요소입니다. 인 경우는 `<font>` 요소를 `color` 특성이로 설정 `red` 의 형식을 수정 하 되는 `<label>` 요소의 텍스트입니다.  
  
 [!code-cpp[HtmlTextWriter_Methods1#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">속성 값이 설정될 수 없는 경우</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagName" />
      </Docs>
    </Member>
    <Member MemberName="TagLeftChar">
      <MemberSignature Language="C#" Value="public const char TagLeftChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagLeftChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagLeftChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagLeftChar;" />
      <MemberSignature Language="F#" Value="val mutable TagLeftChar : char" Usage="System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>태그의 여는 꺾쇠 괄호(&lt;)를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> 필드가 사용 되는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, 및 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> 메서드 태그를 작성 하는 경우.  
  
   
  
## Examples  
 여는 태그의 첫 번째 문자를 렌더링 하는 다음 코드 예제는 `<table>` 요소 이름 사용 하는 요소입니다. 코드 예제에서는 사용 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 메서드는 <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> 필드를 매개 변수로 합니다.  
  
 이 코드 예제에서는 다음 태그를 렌더링 합니다.  
  
 `<table`  
  
 [!code-csharp[MarkupTextWriter_Constants#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#9)]
 [!code-vb[MarkupTextWriter_Constants#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="protected string TagName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagName" />
      <MemberSignature Language="VB.NET" Value="Protected Property TagName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ TagName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TagName : string with get, set" Usage="System.Web.UI.HtmlTextWriter.TagName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>렌더링되는 태그 요소의 태그 이름을 가져오거나 설정합니다.</summary>
        <value>렌더링되는 태그 요소의 태그 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.TagName%2A> 속성에서 상속 된 클래스에만 사용 되는 <xref:System.Web.UI.HtmlTextWriter> 클래스입니다. 읽거나 설정 해야 합니다 <xref:System.Web.UI.HtmlTextWriter.TagName%2A> 속성에만 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> ; 메서드 호출 일정 한 값으로 설정 된 전용 시간입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 재정의 된 버전의 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> 에서 파생 된 클래스에서 메서드를 <xref:System.Web.UI.HtmlTextWriter> 클래스입니다. 렌더링 요소 인지 여부를 확인 합니다를 `<label>` 호출 하 여 요소를 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드를 전달 합니다 <xref:System.Web.UI.HtmlTextWriter.TagName%2A> 속성 값 및 문자열을 `"label"`, 매개 변수 인수로. 경우를 `<label>` 요소는 렌더링 되려고의 여는 태그를 `<font>` 요소를 사용 하 여를 `color` 특성이로 설정 `red`, 전에 렌더링 됩니다는 `<label>` 요소의 여는 태그. 렌더링 하는 요소가 되지 않은 경우는 `<label>` 요소, 버전, 기본 클래스의는 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> 메서드가 호출 됩니다.  
  
 [!code-cpp[HtmlTextWriter_Methods4#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter_Methods4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter_Methods4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagKey" />
      </Docs>
    </Member>
    <Member MemberName="TagRightChar">
      <MemberSignature Language="C#" Value="public const char TagRightChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagRightChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberSignature Language="VB.NET" Value="Public Const TagRightChar As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char TagRightChar;" />
      <MemberSignature Language="F#" Value="val mutable TagRightChar : char" Usage="System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>태그의 닫는 꺾쇠 괄호(&gt;)를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.TagRightChar> 필드가 사용 되는 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, 및 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> 메서드 태그를 작성 하는 경우.  
  
   
  
## Examples  
 다음 코드 예제에는 닫는 태그를 렌더링 하는 방법을 보여 줍니다는 `<table>` 호출의 오버 로드 하 여 요소를 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 메서드. 코드 예제에서는 태그의 마지막 문자를 렌더링 하려면 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 메서드는 <xref:System.Web.UI.HtmlTextWriter.TagRightChar> 필드를 매개 변수로 합니다.  
  
 이 코드 예제에서는 다음 태그를 렌더링 합니다.  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter_Constants#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter_Constants#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>보류 중인 탭 공백과 함께 지정된 데이터 형식을 출력 스트림에 씁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(bool value);" />
      <MemberSignature Language="F#" Value="override this.Write : bool -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">출력 스트림에 쓸 <see cref="T:System.Boolean" />입니다.</param>
        <summary>보류 중인 탭 공백과 함께 부울 값의 텍스트 표현을 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 모든 보류 중인 탭 및 다음 호출에서는 발생 하는 메서드는 <xref:System.IO.TextWriter.Write%2A> 기본 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(char value);" />
      <MemberSignature Language="F#" Value="override this.Write : char -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">출력 스트림에 쓸 유니코드 문자입니다.</param>
        <summary>보류 중인 탭 공백과 함께 유니코드 문자의 텍스트 표현을 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 모든 보류 중인 탭 및 다음 호출에서는 발생 하는 메서드는 <xref:System.IO.TextWriter.Write%2A> 기본 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 의 여는 태그를 종료 하는 방법을 `<img>` 요소를 사용 하 여를 <xref:System.Web.UI.HtmlTextWriter.TagRightChar> 상수입니다.  
  
 이 코드 예제에서는 다음 태그를 렌더링 합니다.  
  
 `<img alt="A custom image">`  
  
 `</img>`  
  
 [!code-csharp[MarkupTextWriter_Samples1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#5)]
 [!code-vb[MarkupTextWriter_Samples1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="override this.Write : char[] -&gt; unit" Usage="htmlTextWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">출력 스트림에 쓸 유니코드 문자 배열입니다.</param>
        <summary>보류 중인 탭 공백과 함께 유니코드 문자 배열의 텍스트 표현을 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 모든 보류 중인 탭 및 다음 호출에서는 발생 하는 메서드는 <xref:System.IO.TextWriter.Write%2A> 기본 메서드.  
  
   
  
## Examples  
 이 섹션에서는 두 코드 예제를 제공합니다. 첫 번째 문자의 배열을 만드는 방법을 보여 줍니다. 두 번째 배열을 사용 하는 방법을 보여 줍니다.  
  
 이러한 코드 예제는 다음 태그를 생성합니다.  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 다음 코드 예제에 나와 있는 문자 배열을 만드는 방법을 보여 줍니다 `hello world`합니다. 배열에 포함 되는 <xref:System.Web.UI.HtmlTextWriter.SpaceChar> 필드 두 단어 사이 공백을 만듭니다.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 렌더링 하는 방법은 `hello world` 이 예제 코드를 포함 하는 컨트롤을 페이지에 포함 되 면 페이지에 앞의 코드 예제에서 생성 하는 문자 배열입니다.  
  
 [!code-csharp[MarkupTextWriter_Methods2#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter_Methods2#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(double value);" />
      <MemberSignature Language="F#" Value="override this.Write : double -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">출력 스트림에 쓸 배정밀도 부동 소수점 숫자입니다.</param>
        <summary>보류 중인 탭 공백과 함께 배정밀도 부동 소수점 숫자의 텍스트 표현을 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 모든 보류 중인 탭 및 다음 호출에서는 발생 하는 메서드는 <xref:System.IO.TextWriter.Write%2A> 기본 메서드.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 의 값을 렌더링 하는 메서드는 <xref:System.Double.MaxValue?displayProperty=nameWithType> 필드입니다.  
  
 이 코드 예제에서는 다음 태그를 생성합니다.  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#7)]
 [!code-vb[MarkupTextWriter_Methods1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(int value);" />
      <MemberSignature Language="F#" Value="override this.Write : int -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">출력 스트림에 쓸 32바이트 부호 있는 정수입니다.</param>
        <summary>보류 중인 탭 공백과 함께 32바이트 부호 있는 정수의 텍스트 표현을 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 모든 보류 중인 탭 및 다음 호출에서는 발생 하는 메서드는 <xref:System.IO.TextWriter.Write%2A> 기본 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(long value);" />
      <MemberSignature Language="F#" Value="override this.Write : int64 -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">출력 스트림에 쓸 64바이트 부호 있는 정수입니다.</param>
        <summary>보류 중인 탭 공백과 함께 64바이트 부호 있는 정수의 텍스트 표현을 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 모든 보류 중인 탭 및 다음 호출에서는 발생 하는 메서드는 <xref:System.IO.TextWriter.Write%2A> 기본 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Write : obj -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">출력 스트림에 쓸 개체입니다.</param>
        <summary>보류 중인 탭 공백과 함께 개체의 텍스트 표현을 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 모든 보류 중인 탭 및 다음 호출에서는 발생 하는 메서드는 <xref:System.IO.TextWriter.Write%2A> 기본 메서드.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 의 값을 렌더링 하는 메서드는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 속성입니다.  
  
 이 코드 예제에서는 다음 태그를 생성합니다.  
  
 `This is a rendered CultureInfo object.`  
  
 `<bold>`  
  
 값을 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 속성:  
  
 `</bold>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#8](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#8)]
 [!code-vb[MarkupTextWriter_Methods1#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(float value);" />
      <MemberSignature Language="F#" Value="override this.Write : single -&gt; unit" Usage="htmlTextWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">출력 스트림에 쓸 단정밀도 부동 소수점 숫자입니다.</param>
        <summary>보류 중인 탭 공백과 함께 단정밀도 부동 소수점 숫자의 텍스트 표현을 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 모든 보류 중인 탭 및 다음 호출에서는 발생 하는 메서드는 <xref:System.IO.TextWriter.Write%2A> 기본 메서드.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 의 값을 렌더링 하는 방법을 <xref:System.Single.Epsilon?displayProperty=nameWithType> 가능한 가장 작은 값 필드의를 <xref:System.Single> 구조입니다.  
  
 이 코드 예제에서는 다음 태그를 생성합니다.  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#10)]
 [!code-vb[MarkupTextWriter_Methods1#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="htmlTextWriter.Write s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">출력 스트림에 쓸 문자열입니다.</param>
        <summary>보류 중인 탭 공백과 함께 지정된 문자열을 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 모든 보류 중인 탭 및 다음 호출에서는 발생 하는 메서드는 <xref:System.IO.TextWriter.Write%2A> 기본 메서드.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 와 사용자 지정 태그 요소의 닫는 태그 사이의 문자열을 렌더링 하는 방법입니다.  
  
 이 코드 예제에서는 다음 태그를 생성합니다.  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj -&gt; unit" Usage="htmlTextWriter.Write (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">0개 이상의 형식 항목을 포함하는 문자열입니다.</param>
        <param name="arg0">서식을 지정할 개체입니다.</param>
        <summary><see cref="M:System.String.Format(System.String,System.Object)" /> 메서드와 동일한 의미 체계를 사용하여 보류 중인 탭 공백과 함께 탭 문자열과 형식이 지정된 문자열을 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 모든 보류 중인 탭 및 다음 호출에서는 발생 하는 메서드는 <xref:System.IO.TextWriter.Write%2A> 기본 메서드.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 의 값을 사용 하 여 서식이 지정 된 문자열을 렌더링 하는 메서드는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 속성입니다.  
  
 [!code-csharp[MarkupTextWriter_Methods1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#5)]
 [!code-vb[MarkupTextWriter_Methods1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj[] -&gt; unit" Usage="htmlTextWriter.Write (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">0개 이상의 형식 항목을 포함하는 문자열입니다.</param>
        <param name="arg">형식을 지정할 개체 배열입니다.</param>
        <summary>보류 중인 탭 공백과 함께 개체 배열의 텍스트 표현이 포함된 형식이 지정된 문자열을 출력 스트림에 씁니다. 이 메서드에서는 <see cref="M:System.String.Format(System.String,System.Object[])" /> 메서드와 동일한 의미 체계를 사용합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 모든 보류 중인 탭 및 다음 호출에서는 발생 하는 메서드는 <xref:System.IO.TextWriter.Write%2A> 기본 메서드.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 배열의 내용과 서식이 지정 된 문자열을 렌더링 하는 방법에 설명 합니다. 두 번째 배열을 선언 하는 방법에 설명 합니다.  
  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 서식이 지정 된 문자열과 라는 개체 배열의 내용을 렌더링 하는 방법 `curPriceTime`합니다. 첫 번째 멤버를 렌더링 하기 전에 배열의 두 번째 멤버를 렌더링 하는 메서드 호출 합니다.  
  
 [!code-csharp[MarkupTextWriter_Methods2#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#9)]
 [!code-vb[MarkupTextWriter_Methods2#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#9)]  
  
 다음 코드 예제에서는 선언 된 `curPriceTime` 개체 배열입니다.  
  
 [!code-csharp[MarkupTextWriter_Methods2#14](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#14)]
 [!code-vb[MarkupTextWriter_Methods2#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : char[] * int * int -&gt; unit" Usage="htmlTextWriter.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">출력 스트림에 쓸 텍스트가 포함된 문자의 배열입니다.</param>
        <param name="index">쓰기를 시작할 배열의 인덱스 위치입니다.</param>
        <param name="count">출력 스트림에 쓸 문자 수입니다.</param>
        <summary>보류 중인 탭 공백과 함께 유니코드 문자 하위 배열의 텍스트 표현을 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 모든 보류 중인 탭 및 다음 호출에서는 발생 하는 메서드는 <xref:System.IO.TextWriter.Write%2A> 기본 메서드.  
  
   
  
## Examples  
 이 섹션에서는 두 코드 예제를 제공합니다. 첫 번째 문자 배열을 만드는 방법을 보여 줍니다. 두 번째 배열을 사용 하는 방법을 보여 줍니다.  
  
 이러한 코드 예제는 다음 태그를 생성합니다.  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 다음 코드 예제에 나와 있는 문자 배열을 만드는 방법을 보여 줍니다 `hello world`합니다. 배열에 포함 되는 <xref:System.Web.UI.HtmlTextWriter.SpaceChar> 필드 두 단어 사이 공백을 만듭니다.  
  
 [!code-csharp[MarkupTextWriter_Methods2#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter_Methods2#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 다음 부분 코드 예제를 사용 합니다 `index` 및 `count` 의 매개 변수는 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 앞의 예제에서 만든 배열의 첫 5 자를 렌더링 하는 방법입니다.  
  
 [!code-csharp[MarkupTextWriter_Methods2#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#11)]
 [!code-vb[MarkupTextWriter_Methods2#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="override this.Write : string * obj * obj -&gt; unit" Usage="htmlTextWriter.Write (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">0개 이상의 형식 항목을 포함하는 문자열입니다.</param>
        <param name="arg0">서식을 지정할 개체입니다.</param>
        <param name="arg1">서식을 지정할 개체입니다.</param>
        <summary>보류 중인 탭 공백과 함께 두 개체의 텍스트 표현이 포함된 형식이 지정된 문자열을 출력 스트림에 씁니다. 이 메서드에서는 <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 메서드와 동일한 의미 체계를 사용합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 모든 보류 중인 탭 및 다음 호출에서는 발생 하는 메서드는 <xref:System.IO.TextWriter.Write%2A> 기본 메서드.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 서식이 지정 된 문자열 및 값을 렌더링 하는 메서드를 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 및 <xref:System.DateTime.Today%2A> 속성.  
  
 [!code-csharp[MarkupTextWriter_Methods1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#6)]
 [!code-vb[MarkupTextWriter_Methods1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>태그 특성과 그 값을  출력 스트림에 씁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttribute : string * string -&gt; unit&#xA;override this.WriteAttribute : string * string -&gt; unit" Usage="htmlTextWriter.WriteAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">출력 스트림에 쓸 특성입니다.</param>
        <param name="value">특성에 할당된 값입니다.</param>
        <summary>지정된 태그 특성과 값을  출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 태그 특성과 인코딩 없이 해당 값을 작성 하는 방법입니다. <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 메서드를 큰따옴표 (")로 묶은 특성 값을 씁니다. 하는 경우 `value` 됩니다 `null`, <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 메서드 특성 이름만 씁니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 렌더링을 `<img>` 의 두 오버 로드는 요소는 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 메서드가 호출 됩니다. 코드 예제는 다음 프로세스를 사용합니다.  
  
-   호출 된 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> 요소의 여는 문자를 렌더링 하는 메서드.  
  
-   호출을 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> 는 쓰기를 오버 로드는 `alt` 특성과 해당 값을는 `<img>` 요소입니다.  
  
-   호출을 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> 오버 로드를 사용자 지정 렌더링 `myattribute` 특성에 값 `No "encoding" required`, 설정한 `fEncode` 에 `false`합니다.  
  
-   요소의 여는 태그를 닫고 다음 호출을 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> 닫는 메서드를는 `<img>` 요소입니다.  
  
 이 코드 예제에서는 다음 태그를 생성합니다.  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>파생된 클래스에서 재정의할 수 있습니다는 <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> 특성과 해당 값을 작성 하기 위한 사용자 지정 규칙을 정의 하는 방법입니다. 예를 들어 허용 되는 코드를 작성할 수 있습니다는 <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> 빈 값을 사용 하 여 특성을 작성 하는 방법입니다.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member WriteAttribute : string * string * bool -&gt; unit&#xA;override this.WriteAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.WriteAttribute (name, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">출력 스트림에 쓸 태그 특성입니다.</param>
        <param name="value">특성에 할당된 값입니다.</param>
        <param name="fEncode">특성 및 할당된 값을 인코드하면 <see langword="true" />이고, 인코드하지 않으면 <see langword="false" />입니다.</param>
        <summary>지정된 태그 특성과 값을 출력 스트림에 쓰고, 지정된 경우 인코드된 값을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 메서드를 태그 특성과 그 값을 인코딩하거나 인코딩하지 않고 씁니다. 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 메서드는 <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> 인코딩을 수행 하는 방법입니다.  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 메서드를 큰따옴표 (")로 묶은 특성 값을 씁니다. 하는 경우 `value` 됩니다 `null`, <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 메서드 특성 이름만 씁니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 렌더링을 `<img>` 의 두 오버 로드는 요소는 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 메서드가 호출 됩니다. 코드 예제는 다음 프로세스를 사용합니다.  
  
-   호출 된 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> 요소의 여는 문자를 렌더링 하는 메서드.  
  
-   호출을 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> 는 쓰기를 오버 로드는 `alt` 특성과 해당 값을는 `<img>` 요소입니다.  
  
-   호출을 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> 오버 로드를 사용자 지정 렌더링 `myattribute` 특성에 값 `No "encoding" required`, 설정한 `fEncode` 에 `false`합니다.  
  
-   요소의 여는 태그를 닫고 다음 호출을 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> 닫는 메서드를는 `<img>` 요소입니다.  
  
 이 코드 예제에서는 다음 태그를 생성합니다.  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>파생된 클래스에서 재정의할 수 있습니다는 <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> 특성과 해당 값을 작성 하기 위한 사용자 지정 규칙을 정의 하는 방법입니다. 예를 들어 허용 되는 코드를 작성할 수 있습니다는 <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> 빈 값을 사용 하 여 특성을 작성 하는 방법입니다.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteBeginTag : string -&gt; unit&#xA;override this.WriteBeginTag : string -&gt; unit" Usage="htmlTextWriter.WriteBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">여는 태그를 쓸 태그 요소입니다.</param>
        <summary>탭 공백과 지정된 태그 요소의 여는 태그를 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> 메서드에서 태그 요소의 여는 태그의 닫는 꺾쇠 괄호 (>)를 기록 하지 않습니다. 이 태그 특성 요소의 여는 태그를 작성할 수 있습니다. 사용 된 <xref:System.Web.UI.HtmlTextWriter.TagRightChar> 상수를 호출할 때 여는 태그를 닫습니다는 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> 메서드. 사용 된 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> 메서드를 <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> 상수 자체 닫음 태그 요소를 작성 하는 경우.  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> 태그 또는 특성 매핑을 허용 하지 않으며 동일한 방식으로 각 요청에 대 한 태그 요소를 렌더링 하는 사용자 지정 서버 컨트롤에서 메서드를 사용 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 렌더링을 `<img>` 의 두 오버 로드는 요소는 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 메서드가 호출 됩니다. 코드 예제는 다음 프로세스를 사용합니다.  
  
-   호출 된 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> 요소의 여는 문자를 렌더링 하는 메서드.  
  
-   호출을 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> 는 쓰기를 오버 로드는 `alt` 특성과 해당 값을는 `<img>` 요소입니다.  
  
-   호출을 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> 오버 로드를 사용자 지정 렌더링 `myattribute` 특성에 값 `No "encoding" required`, 설정한 `fEncode` 에 `false`합니다.  
  
-   요소의 여는 태그를 닫고 다음 호출을 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> 닫는 메서드를는 `<img>` 요소입니다.  
  
 이 코드 예제에서는 다음 태그를 생성합니다.  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public virtual void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteBreak();" />
      <MemberSignature Language="F#" Value="abstract member WriteBreak : unit -&gt; unit&#xA;override this.WriteBreak : unit -&gt; unit" Usage="htmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see langword="&lt;br /&gt;" /> 태그 요소를 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> 줄을 렌더링 하는 방법을 사용자 지정 컨트롤 또는 어댑터 태그에서 중단 합니다. <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> 메서드 사이 공백을 작성 합니다 `br` 및 `/` HTML의 향상 된 호환성에 대 한 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 호출 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> 쓸 메서드를 `<br />` 후 요청 브라우저에 요소를 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> 메서드 기록 인코딩된 `&lt;custID&gt; &amp; &lt;invoice#&gt;` 태그.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedText : string -&gt; unit&#xA;override this.WriteEncodedText : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="text">인코드하고 출력 스트림에 작성할 텍스트 문자열입니다.</param>
        <summary>요청하는 디바이스에 대해 지정된 텍스트를 인코드한 후 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> 꺾쇠 괄호를 포함 하는 문자열 메서드 (\< 또는 >) 또는 앰퍼샌드 (&).  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> 메서드를 <xref:System.Web.HttpUtility.HtmlEncode%2A> 인코딩을 수행 하는 방법 또한 유니코드 문자를 변환 하 고 `00A0` 를 `&nbsp;`합니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> 인코딩된 태그를 작성 하는 방법 `&lt;custID&gt; &amp; &lt;invoice#&gt;` 출력 스트림에 합니다. 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> 메서드 쓰기 `<br />`합니다.  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="text" />가 <see langword="null" />입니다.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrl">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrl (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrl(System::String ^ url);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedUrl : string -&gt; unit&#xA;override this.WriteEncodedUrl : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="url">인코드하고 출력 스트림에 작성할 URL 문자열입니다.</param>
        <summary>지정된 URL을 인코드하고 출력 스트림에 씁니다. URL에 매개 변수가 포함될 수도 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> 메서드는 문자열을 인코딩합니다는 `url` URL 인코딩 사양에 따라 매개 변수입니다. 물음표 (?) 구분 기호는 매개 변수는 인코딩되지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> 메서드를 다음 출력을 생성 합니다.  
  
 `http://localhost/Sample%20Folder/Sample%20%2b%20File.txt`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#3)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrlParameter">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrlParameter (string urlText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrlParameter(string urlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEncodedUrlParameter (urlText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEncodedUrlParameter(System::String ^ urlText);" />
      <MemberSignature Language="F#" Value="abstract member WriteEncodedUrlParameter : string -&gt; unit&#xA;override this.WriteEncodedUrlParameter : string -&gt; unit" Usage="htmlTextWriter.WriteEncodedUrlParameter urlText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlText" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="urlText">인코딩하고 출력 스트림에 쓸 URL 매개 변수 문자열입니다.</param>
        <summary>요청하는 장치에 맞게 지정된 URL 매개 변수를 인코딩한 다음 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL의 매개 변수 부분에서 공백을 더하기 기호 (+)로 인코딩되고 등호 (=)로 인코딩되며 `%3d`합니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> 메서드를 다음 출력을 생성 합니다.  
  
 `ID%3dCity+State`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#4)]
 [!code-vb[System.Web.UI.MarkupTextWriter_Samples1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEndTag">
      <MemberSignature Language="C#" Value="public virtual void WriteEndTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteEndTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteEndTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteEndTag : string -&gt; unit&#xA;override this.WriteEndTag : string -&gt; unit" Usage="htmlTextWriter.WriteEndTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">닫는 태그를 쓸 요소입니다.</param>
        <summary>탭 공백과 지정된 태그 요소의 닫는 태그를 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 달리 합니다 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 메서드는 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> 메서드가 해당 여는 태그와 일치 요소의 끝 태그를 만들 수 있는 논리가 없습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 렌더링을 `<img>` 요소입니다. 코드 예제는 다음 프로세스를 사용합니다.  
  
-   호출 된 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> 요소의 여는 문자를 렌더링 하는 방법입니다.  
  
-   두 오버 로드를 호출 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 특성을 쓸 메서드는 `<img>` 요소입니다.  
  
-   호출 된 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> 닫는 메서드를는 `<img>` 요소입니다.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteFullBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteFullBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteFullBeginTag (tagName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteFullBeginTag(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="abstract member WriteFullBeginTag : string -&gt; unit&#xA;override this.WriteFullBeginTag : string -&gt; unit" Usage="htmlTextWriter.WriteFullBeginTag tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">출력 스트림에 쓸 요소입니다.</param>
        <summary>탭 공백과 지정된 태그 요소의 여는 태그를 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> 메서드가 닫는 꺾쇠 괄호 (>) 요소의 여는 태그와 달리 자동으로 씁니다는 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> 메서드를 닫는 꺾쇠 괄호를 작성 하지는 않습니다. 사용 하 여 <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> 특성이 없는 태그 요소에 대 한 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>오버로드된 매개 변수에서 지정한 대로 <see cref="T:System.Web.UI.HtmlTextWriter" /> 출력 스트림에 데이터를 쓴 다음 줄 종결자 문자열을 씁니다. 이 메서드의 모든 버전은 출력 스트림에 보류 중인 탭 공백을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 합니다 <xref:System.IO.TextWriter.WriteLine%2A> 기본 메서드 쓰는 데 사용 되는 `value` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine();" />
      <MemberSignature Language="F#" Value="override this.WriteLine : unit -&gt; unit" Usage="htmlTextWriter.WriteLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>줄 종결자 문자열을 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 자세한 내용은 <xref:System.IO.TextWriter.WriteLine%2A>를 참조하십시오.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 뒤에 줄을 삽입 하는 방법은 `<img>` 요소가 렌더링 됩니다.  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(bool value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : bool -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">출력 스트림에 쓸 부울입니다.</param>
        <summary>출력 스트림에 보류 중인 탭 공백과 부울 값의 텍스트 표현을 쓴 다음 줄 종결자 문자열을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 합니다 <xref:System.IO.TextWriter.WriteLine%2A> 기본 메서드 쓰는 데 사용 되는 `value` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(char value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : char -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">출력 스트림에 쓸 문자입니다.</param>
        <summary>출력 스트림에 보류 중인 탭 공백과 유니코드 문자를 쓴 다음 줄 종결자 문자열을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 합니다 <xref:System.IO.TextWriter.WriteLine%2A> 기본 메서드 쓰는 데 사용 되는 `value` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : char[] -&gt; unit" Usage="htmlTextWriter.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">출력 스트림에 쓸 문자 배열입니다.</param>
        <summary>출력 스트림에 보류 중인 탭 공백과 유니코드 문자 배열을 쓴 다음 줄 종결자 문자열을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 합니다 <xref:System.IO.TextWriter.WriteLine%2A> 기본 메서드 쓰는 데 사용 되는 `value` 매개 변수입니다.  
  
   
  
## Examples  
 이 섹션에서는 두 코드 예제를 제공합니다. 첫 번째 배열을 만드는 방법을 보여 줍니다. 두 번째 배열을 사용 하는 방법을 보여 줍니다.  
  
 이러한 코드 예제는 다음 태그를 생성합니다.  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 다음 코드 예제에 나와 있는 문자 배열을 만드는 방법을 보여 줍니다 `hello world`합니다. 배열에 포함 되는 <xref:System.Web.UI.HtmlTextWriter.SpaceChar> 필드 두 단어 사이 공백을 만듭니다.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 다음 코드 예제에서는 렌더링 된 `hello world` 를 사용 하 여 앞의 예제에서 생성 된 문자 배열은 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 메서드.  
  
 [!code-csharp[MarkupTextWriter_Methods2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#5)]
 [!code-vb[MarkupTextWriter_Methods2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(double value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : double -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">출력 스트림에 쓸 배정밀도 부동 소수점 숫자입니다.</param>
        <summary>출력 스트림에 보류 중인 탭 공백과 배정밀도 부동 소수점 숫자의 텍스트 표현을 쓴 다음 줄 종결자 문자열을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 합니다 <xref:System.IO.TextWriter.WriteLine%2A> 기본 메서드 쓰는 데 사용 되는 `value` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 의 값을 렌더링 하는 메서드는 <xref:System.Double.MaxValue?displayProperty=nameWithType> 필드입니다.  
  
 이 코드 예제에서는 다음 태그를 생성합니다.  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#3)]
 [!code-vb[MarkupTextWriter_Methods1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(int value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : int -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">출력 스트림에 쓸 32바이트 부호 있는 정수입니다.</param>
        <summary>출력 스트림에 보류 중인 탭 공백과 32바이트 부호 있는 정수의 텍스트 표현을 쓴 다음 줄 종결자 문자열을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 합니다 <xref:System.IO.TextWriter.WriteLine%2A> 기본 메서드 쓰는 데 사용 되는 `value` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(long value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : int64 -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">출력 스트림에 쓸 64바이트 부호 있는 정수입니다.</param>
        <summary>출력 스트림에 보류 중인 탭 공백과 64바이트 부호 있는 정수의 텍스트 표현을 쓴 다음 줄 종결자 문자열을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 합니다 <xref:System.IO.TextWriter.WriteLine%2A> 기본 메서드 쓰는 데 사용 되는 `value` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : obj -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">출력 스트림에 쓸 개체입니다.</param>
        <summary>출력 스트림에 보류 중인 탭 공백과 개체의 텍스트 표현을 쓴 다음 줄 종결자 문자열을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 합니다 <xref:System.IO.TextWriter.WriteLine%2A> 기본 메서드 쓰는 데 사용 되는 `value` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 의 값을 렌더링 하는 방법의 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 컨트롤에 속성입니다.  
  
 [!code-csharp[MarkupTextWriter_Methods1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#4)]
 [!code-vb[MarkupTextWriter_Methods1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(float value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : single -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">출력 스트림에 쓸 단정밀도 부동 소수점 숫자입니다.</param>
        <summary>출력 스트림에 보류 중인 탭 공백과 단정밀도 부동 소수점 숫자의 텍스트 표현을 쓴 다음 줄 종결자 문자열을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 합니다 <xref:System.IO.TextWriter.WriteLine%2A> 기본 메서드 쓰는 데 사용 되는 `value` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 의 값을 렌더링 하는 방법 합니다 <xref:System.Single.Epsilon?displayProperty=nameWithType> 최소값 필드의는 <xref:System.Single> 구조입니다.  
  
 이 코드 예제에서는 다음 태그를 생성합니다.  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter_Methods1#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#9)]
 [!code-vb[MarkupTextWriter_Methods1#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ s);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="htmlTextWriter.WriteLine s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">출력 스트림에 쓸 문자열입니다.</param>
        <summary>출력 스트림에 보류 중인 탭 공백과 텍스트 문자열을 쓴 다음 줄 종결자 문자열을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 합니다 <xref:System.IO.TextWriter.WriteLine%2A> 기본 메서드 쓰는 데 사용 되는 `value` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : uint32 -&gt; unit" Usage="htmlTextWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">출력 스트림에 쓸 4바이트 부호 없는 정수입니다.</param>
        <summary>출력 스트림에 보류 중인 탭 공백과 4바이트 부호 없는 정수의 텍스트 표현을 쓴 다음 줄 종결자 문자열을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 합니다 <xref:System.IO.TextWriter.WriteLine%2A> 기본 메서드 쓰는 데 사용 되는 `value` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">0개 이상의 형식 항목을 포함하는 문자열입니다.</param>
        <param name="arg0">서식을 지정할 개체입니다.</param>
        <summary>출력 스트림에 보류 중인 탭 공백과 개체의 텍스트 표현이 포함된 형식이 지정된 문자열을 쓴 다음 줄 종결자 문자열을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 와 동일한 의미 체계를 사용 하는 메서드를 <xref:System.String.Format%28System.String%2CSystem.Object%29> 메서드. 합니다 <xref:System.IO.TextWriter.WriteLine%2A> 기본 메서드 쓰는 데 사용 되는 `value` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 의 값을 사용 하 여 서식이 지정 된 문자열을 렌더링 하는 메서드는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 속성입니다.  
  
 [!code-csharp[MarkupTextWriter_Methods1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#1)]
 [!code-vb[MarkupTextWriter_Methods1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj[] -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-1.1">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">0개 이상의 형식 항목을 포함하는 문자열입니다.</param>
        <param name="arg">형식을 지정할 개체 배열입니다.</param>
        <summary>출력 스트림에 보류 중인 탭 공백과 개체 배열의 텍스트 표현이 포함된 형식이 지정된 문자열을 쓴 다음 줄 종결자 문자열을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 와 동일한 의미 체계를 사용 하는 메서드를 <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> 메서드. 합니다 <xref:System.IO.TextWriter.WriteLine%2A> 기본 메서드 쓰는 데 사용 되는 `value` 메서드.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 출력 스트림에 배열 및 문자열을 렌더링 하는 방법을 보여 줍니다. 두 번째 배열을 선언 하는 방법을 보여 줍니다.  
  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 서식이 지정 된 문자열과 출력 스트림에 개체 배열의 내용을 렌더링 하는 방법입니다.  
  
 [!code-csharp[MarkupTextWriter_Methods2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#2)]
 [!code-vb[MarkupTextWriter_Methods2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#2)]  
  
 다음 코드 예제에는 앞의 코드 예제에서 렌더링 된 개체 배열을 선언 하는 방법을 보여 줍니다.  
  
 [!code-csharp[MarkupTextWriter_Methods2#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#7)]
 [!code-vb[MarkupTextWriter_Methods2#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : char[] * int * int -&gt; unit" Usage="htmlTextWriter.WriteLine (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">출력 스트림에 쓸 텍스트가 포함된 문자 배열입니다.</param>
        <param name="index">쓰기를 시작할 문자 배열의 인덱스입니다.</param>
        <param name="count">출력 스트림에 쓸 배열의 문자 수입니다.</param>
        <summary>출력 스트림에 보류 중인 탭 공백과 유니코드 문자의 하위 배열을 쓴 다음 줄 종결자 문자열을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 합니다 <xref:System.IO.TextWriter.WriteLine%2A> 기본 메서드 쓰는 데 사용 되는 `value` 매개 변수입니다.  
  
   
  
## Examples  
 이 섹션에는 두 코드 예제가 있습니다. 첫 번째 문자 배열을 만드는 방법을 보여 줍니다. 두 번째 배열을 사용 하는 방법을 보여 줍니다.  
  
 이러한 코드 예제는 다음 태그를 생성합니다.  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 다음 코드 예제에 나와 있는 문자 배열을 만드는 방법을 보여 줍니다 `hello world`합니다. 배열에 포함 되는 <xref:System.Web.UI.HtmlTextWriter.SpaceChar> 필드 두 단어 사이 공백을 만듭니다.  
  
 [!code-csharp[MarkupTextWriter_Methods2#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter_Methods2#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 다음 코드 예제에서는 합니다 `index` 하 고 `count` 의 매개 변수는 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 앞의 코드 예제에서 만든 배열의 첫 5 자를 렌더링 하는 방법.  
  
 [!code-csharp[MarkupTextWriter_Methods2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#4)]
 [!code-vb[MarkupTextWriter_Methods2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string * obj * obj -&gt; unit" Usage="htmlTextWriter.WriteLine (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">0개 이상의 형식 항목을 포함하는 문자열입니다.</param>
        <param name="arg0">서식을 지정할 개체입니다.</param>
        <param name="arg1">서식을 지정할 개체입니다.</param>
        <summary>출력 스트림에 보류 중인 탭 공백과 두 개체의 텍스트 표현이 포함된 형식이 지정된 문자열을 쓴 다음 줄 종결자 문자열을 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 와 동일한 의미 체계를 사용 하는 메서드를 <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> 메서드. 합니다 <xref:System.IO.TextWriter.WriteLine%2A> 기본 메서드 쓰는 데 사용 되는 `value` 매개 변수입니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 서식이 지정 된 문자열 및 값을 렌더링 하는 방법 합니다 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 속성 및 <xref:System.DateTime.Today%2A> 속성.  
  
 [!code-csharp[MarkupTextWriter_Methods1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#2)]
 [!code-vb[MarkupTextWriter_Methods1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineNoTabs">
      <MemberSignature Language="C#" Value="public void WriteLineNoTabs (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteLineNoTabs(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLineNoTabs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLineNoTabs (s As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteLineNoTabs(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.WriteLineNoTabs : string -&gt; unit" Usage="htmlTextWriter.WriteLineNoTabs s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">출력 스트림에 쓸 문자열입니다.</param>
        <summary>문자열과 줄 종결자 문자열을 차례로 출력 스트림에 씁니다. 이 메서드는 지정된 탭 공백을 무시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.HtmlTextWriter.WriteLineNoTabs%2A> 메서드 대신 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 중인 탭 공백과 미리 렌더링된 된 문자열을 렌더링 하지 않을 때 메서드 `s`합니다.  
  
 기본 줄 종결자 문자열은 캐리지 리턴 뒤에 줄 바꿈 ("\r\n"). 합니다 <xref:System.IO.TextWriter.WriteLine%2A> 기본 메서드 쓰는 데 사용 되는 `value` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>스타일 특성과 그 값을  출력 스트림에 씁니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteStyleAttribute : string * string -&gt; unit&#xA;override this.WriteStyleAttribute : string * string -&gt; unit" Usage="htmlTextWriter.WriteStyleAttribute (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">출력 스트림에 쓸 스타일 특성입니다.</param>
        <param name="value">스타일 특성에 할당되는 값입니다.</param>
        <summary>지정된 스타일 특성을 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> 메서드는 다음과 같은 형태로 스타일 특성을 씁니다.  
  
 `name` `=` `value` `;`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
      </Docs>
    </Member>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteStyleAttribute (name As String, value As String, fEncode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteStyleAttribute(System::String ^ name, System::String ^ value, bool fEncode);" />
      <MemberSignature Language="F#" Value="abstract member WriteStyleAttribute : string * string * bool -&gt; unit&#xA;override this.WriteStyleAttribute : string * string * bool -&gt; unit" Usage="htmlTextWriter.WriteStyleAttribute (name, value, fEncode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">출력 스트림에 쓸 스타일 특성입니다.</param>
        <param name="value">스타일 특성에 할당되는 값입니다.</param>
        <param name="fEncode">스타일 특성과 그 할당 값을 인코딩하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>지정된 스타일 특성과 값을 출력 스트림에 쓰고 지정된 경우 값을 인코딩합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> 메서드는 다음과 같은 형태로 스타일 특성을 씁니다.  
  
 `name` `=` `value` `;`  
  
 합니다 <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> 메서드는 인코딩하는 데는 `value` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteUrlEncodedString">
      <MemberSignature Language="C#" Value="protected void WriteUrlEncodedString (string text, bool argument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void WriteUrlEncodedString(string text, bool argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub WriteUrlEncodedString (text As String, argument As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void WriteUrlEncodedString(System::String ^ text, bool argument);" />
      <MemberSignature Language="F#" Value="member this.WriteUrlEncodedString : string * bool -&gt; unit" Usage="htmlTextWriter.WriteUrlEncodedString (text, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="argument" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="text">인코딩하고 출력 스트림에 쓸 문자열입니다.</param>
        <param name="argument">URL 매개 변수 섹션의 일부로 문자열을 인코딩하면 <see langword="true" />이고, URL 경로 섹션의 일부로 문자열을 인코딩하면 <see langword="false" />입니다.</param>
        <summary>지정된 문자열을 URL 요구 사항에 따라 인코딩하여 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> 메서드 URL 구분 기호로 간주 될 수 있는 문자를 인코딩합니다 (의 설정에 따라 달라 집니다 `argument`) 형식의 문자열로 `%xx`ASCII 코드 보다 작거나 128 고, 그렇지 않으면 있으면 `%uxxxx`여기서 `x` 는 16 진수입니다.  
  
 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> 및 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> 메서드를 사용 합니다 <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> 유틸리티 메서드로 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>