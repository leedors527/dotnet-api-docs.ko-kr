<Type Name="IDataSource" FullName="System.Web.UI.IDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8bd9799a83592c123c572fa408e6f968b54e2249" /><Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="09/22/2018" /><Meta Name="ms.locfileid" Value="46676704" /></Metadata><TypeSignature Language="C#" Value="public interface IDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.IDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataSource" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataSource" />
  <TypeSignature Language="F#" Value="type IDataSource = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>데이터 바인딩된 컨트롤을 바인딩할 추상 데이터 소스를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 웹 서버 컨트롤에 일관 된 방식으로 데이터를 바인딩할 수 있게 해 주는 컨트롤 데이터 바인딩 아키텍처를 지원 합니다. 데이터에 바인딩되는 웹 서버 컨트롤은 데이터 바인딩된 컨트롤과 바인딩 데이터 소스 컨트롤 이라고 하는 클래스 라고 합니다. 데이터 소스 컨트롤에서 모든 데이터 소스를 나타낼 수 있습니다: 관계형 데이터베이스, 파일, 스트림, 비즈니스 개체 및 등입니다. 데이터 소스 컨트롤에서 소스 나 기본 데이터의 형식에 관계 없이 데이터 바인딩된 컨트롤에 일관 된 방식으로 데이터를 제공 합니다.  
  
 구현 하는 <xref:System.Web.UI.IDataSource> 사용자 고유의 사용자 지정 ASP.NET 데이터 소스 제어를 구현 하려는 경우 인터페이스.  
  
 구현 하는 클래스는 <xref:System.Web.UI.IDataSource> 인터페이스는 데이터 소스 컨트롤입니다. 합니다 <xref:System.Web.UI.IDataSource> 인터페이스는 모든 ASP.NET 데이터 원본에 대 한 기초를 제어 하 고 해당 두 가지 방법으로 기본 데이터 바인딩 아키텍처 개념 중 하나를 정의: 합니다 <xref:System.Web.UI.IDataSource.GetView%2A> 메서드 및 <xref:System.Web.UI.IDataSource.GetViewNames%2A> 메서드. 이 개념은 모든 데이터 소스 컨트롤은 해당 데이터에 대해 하나 이상의 명명 된 뷰를 지원 합니다. 데이터 원본 뷰 개체는 비슷합니다는 <xref:System.Data.DataView> 추상화를 <xref:System.Data> 네임 스페이스:를 데이터 바인딩 가능, 정렬, 필터링 및 뷰를 정의 하는 다른 데이터 작업에 대 한 데이터의 뷰 사용자 지정 합니다. 본질적으로 데이터 원본을 아무 작업도 수행 하지 제어 보다 보기 데이터를 검색 합니다.  
  
 데이터 소스 컨트롤에는 하나 이상의 연결 된 데이터 원본 뷰 개체 있을 수 있습니다. 일부 데이터 소스와 같은 관계형 데이터베이스를 표시 하는 것을 비롯 하 여 컨트롤 <xref:System.Web.UI.WebControls.SqlDataSource> 및 <xref:System.Web.UI.WebControls.AccessDataSource>, 보기가 하나만 지원 합니다. 다른 데이터 소스와 같은 계층적 데이터 소스 컨트롤을 비롯 하 여 컨트롤 <xref:System.Web.UI.WebControls.SiteMapDataSource>, 여러 뷰를 지원 합니다. 데이터 원본 뷰의 데이터 원본 및 지원 되는 작업의 기능을 정의 합니다.  
  
 요약 하자면, 데이터 소스 컨트롤 구현를 <xref:System.Web.UI.IDataSource> 인터페이스, 하나를 지원 또는 이상의 명명 된 뷰 데이터 고, 항상 나타내는 데이터 원본에서 데이터 검색을 지원 합니다. 데이터 소스 컨트롤은 항상 경우와 같이 필요에 따라 데이터를 검색 `DataBind` 데이터 바인딩된 컨트롤에서 호출 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 클래스를 정의 하는 메서드의 구현 방법을 보여 줍니다는 <xref:System.Web.UI.IDataSource> 데이터 바인딩된 컨트롤에 데이터를 제공 하는 인터페이스입니다. 이 예제의 데이터 소스 컨트롤 쉼표로 구분 된 값 파일에서 데이터 소스 역할을 하 고 쉼표로 구분 된 파일 데이터를 표시할 모든 데이터 바인딩된 컨트롤에서 사용할 수 있습니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Web.UI.DataSourceControl> 클래스입니다.  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#1)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.IDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceView" />
    <altmember cref="T:System.Web.UI.HierarchicalDataSourceControl" />
  </Docs>
  <Members>
    <Member MemberName="DataSourceChanged">
      <MemberSignature Language="C#" Value="event EventHandler DataSourceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataSourceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.IDataSource.DataSourceChanged" />
      <MemberSignature Language="VB.NET" Value="Event DataSourceChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DataSourceChanged;" />
      <MemberSignature Language="F#" Value="member this.DataSourceChanged : EventHandler " Usage="member this.DataSourceChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 바인딩된 컨트롤에 영향을 주는 방식으로 데이터 소스 컨트롤이 변경된 경우에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.IDataSource.DataSourceChanged> 이벤트는 변경 될 때 데이터 바인딩된 컨트롤과 데이터 간의 데이터 바인딩에 영향을 주는 방식으로 내부 데이터 나 데이터 바인딩된 컨트롤의 속성입니다. 파일 이름 속성을 같은 경우 이벤트는 발생 하는 예를 들어를 <xref:System.Web.UI.WebControls.AccessDataSource.DataFile%2A> 속성 파일 기반 데이터 소스 컨트롤에서 변경 됩니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.IDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="abstract member GetView : string -&gt; System.Web.UI.DataSourceView" Usage="iDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">검색할 뷰의 이름입니다.</param>
        <summary>데이터 소스 컨트롤이 연결된 명명된 데이터 소스 뷰를 가져옵니다.</summary>
        <returns><see cref="T:System.Web.UI.DataSourceView" />과 연결된 명명된 <see cref="T:System.Web.UI.IDataSource" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터 소스 컨트롤 클래스는 내부 데이터에서 하나 이상의 보기를 지원할 수 있습니다. 이러한 보기의 인스턴스로 표시 되는 <xref:System.Web.UI.DataSourceView> 클래스입니다. 데이터 원본 뷰는 데이터 소스 컨트롤의 기능을 정의 하 고 내부 데이터 저장소에서 데이터를 검색 및 정렬, 삽입, 삭제 및 업데이트와 같은 작업을 수행 하는 데 필요한 모든 작업을 수행 합니다.  
  
 데이터 소스 컨트롤이 구현 하는 클래스를 <xref:System.Web.UI.IDataSource> 인터페이스 구현 된 <xref:System.Web.UI.IDataSource.GetView%2A> 클래스와 연결 된 개체를 보고 하는 강력한 형식의 반환 하는 방법.  
  
   
  
## Examples  
 다음 코드 예제는 데이터 소스 컨트롤 클래스를 구현 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.IDataSource> 인터페이스 구현 합니다 <xref:System.Web.UI.IDataSource.GetView%2A> 의 강력한 형식의 인스턴스를 반환 하는 메서드를는 <xref:System.Web.UI.DataSourceView> 클래스입니다. 데이터 소스 컨트롤이 하나만 보기를 지원 하므로 이름을 무시 하 고 기본 보기 이름으로 명명 된 뷰를 반환 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Web.UI.DataSourceControl> 클래스입니다.  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#3)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IDataSource.GetViewNames" />
        <altmember cref="T:System.Web.UI.DataSourceView" />
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.IDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Public Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="abstract member GetViewNames : unit -&gt; System.Collections.ICollection" Usage="iDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.IDataSource" /> 인터페이스와 관련된 뷰 개체의 목록을 나타내는 이름의 컬렉션을 가져옵니다.</summary>
        <returns><see cref="T:System.Collections.ICollection" />와 연결된 뷰의 이름이 들어 있는 <see cref="T:System.Web.UI.IDataSource" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터 소스 컨트롤 클래스는 내부 데이터에서 하나 이상의 명명 된 뷰를 지원할 수 있습니다. <xref:System.Web.UI.IDataSource.GetViewNames%2A> 메서드 뷰 이름은 현재 인스턴스와 연결 된 데이터 소스 컨트롤의 컬렉션을 반환 합니다. 호출자는 뷰 이름의 컬렉션을 반복 하 고 개별 검색할 수 <xref:System.Web.UI.DataSourceView> 사용 하 여 개체를 <xref:System.Web.UI.IDataSource.GetView%2A> 메서드.  
  
 데이터 소스 컨트롤이 구현 하는 클래스를 <xref:System.Web.UI.IDataSource> 인터페이스 구현 된 <xref:System.Web.UI.IDataSource.GetViewNames%2A> 현재 데이터 소스 컨트롤 클래스와 연결 된 개체를 보고 하는 모든 데이터 소스를 나타내는 이름의 컬렉션을 반환 하는 방법.  
  
   
  
## Examples  
 다음 코드 예제는 데이터 소스 컨트롤을 구현 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.IDataSource> 인터페이스 구현 합니다 <xref:System.Web.UI.IDataSource.GetViewNames%2A> 메서드를 반환는 <xref:System.Collections.ICollection> 이름의 컬렉션입니다. 데이터 원본 뷰를 하나만 지원 하므로 메서드는 뷰에 대 한 기본 이름을 사용 하 여 한 요소의 컬렉션을 반환 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Web.UI.DataSourceControl> 클래스입니다.  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource_1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#4)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource_1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.DataSourceControl.GetView(System.String)" />
        <altmember cref="T:System.Web.UI.DataSourceView" />
      </Docs>
    </Member>
  </Members>
</Type>