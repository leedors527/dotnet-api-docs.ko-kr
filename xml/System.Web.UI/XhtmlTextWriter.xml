<Type Name="XhtmlTextWriter" FullName="System.Web.UI.XhtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9d775893b0205e35ac27e9de3a9a4a49c8f3b54e" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="58875361" /></Metadata><TypeSignature Language="C#" Value="public class XhtmlTextWriter : System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XhtmlTextWriter extends System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.XhtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XhtmlTextWriter&#xA;Inherits HtmlTextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XhtmlTextWriter : System::Web::UI::HtmlTextWriter" />
  <TypeSignature Language="F#" Value="type XhtmlTextWriter = class&#xA;    inherit HtmlTextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlTextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>XHTML(Extensible Hypertext Markup Language)에서 파생된 XHTML의 모든 변형을 포함하여 XHTML 관련 문자를 모바일 디바이스의 ASP.NET 서버 컨트롤 출력 스트림에 씁니다. ASP.NET 페이지와 서버 컨트롤에 사용자 지정 XHTML 렌더링 기능을 제공하려면 <see cref="T:System.Web.UI.XhtmlTextWriter" /> 클래스를 재정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XHTML은 여러 장치 유형에 대해 적합 한 웹 사이트를 만들 수 있는 HTML 4.1 기반, XML 규격 태그 언어입니다. 언어 태그 모호성 감소와 다양 한 형식 및 스타일 옵션을 사용 하 여 생성 하는 XML에서 제공한 엄격한 요소 지침을 사용 하 여 HTML에서 제공 하는 사용 편의성을 병합 합니다. <xref:System.Web.UI.XhtmlTextWriter> 클래스는 ASP.NET 서버 컨트롤이 XHTML 내용을 클라이언트로 렌더링할 때 사용 하는 서식 기능을 제공 합니다. 사용할 수는 <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> XHTML 유형을 텍스트 기록기 렌더링을 지정 하는 방법입니다. 지원 되는 문서 형식에 정의 된는 <xref:System.Web.UI.XhtmlMobileDocType> 열거형입니다.  
  
 <xref:System.Web.UI.XhtmlTextWriter> 클래스 두 가지 요소에 대 한 특성 집합을 렌더링 합니다. 하나의 집합으로 참조 되는 공통 특성의 컬렉션인는 <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> 속성입니다. 두 번째 집합에서 참조 되는 요소 관련 특성의 컬렉션인는 <xref:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes%2A> 속성입니다. 요소 및 렌더링 되는 스타일에 대 한 자세한 내용은 XHTML 모듈화 사양을 참조를 [World Wide Web Consortium (W3C) 웹 사이트](https://go.microsoft.com/fwlink/?linkid=37125)합니다.  
  
 멤버를 사용할 수는 <xref:System.Web.UI.XhtmlTextWriter> 클래스와 모든 파생된 클래스 사용자 지정 XHTML에서 사용할 사용자 지정 텍스트 기록기를 만들기 위한 페이지 또는 어댑터 클래스입니다. 표준 동작을 재정의 하는 파생된 클래스를 만들 수도 있습니다는 <xref:System.Web.UI.XhtmlTextWriter> 클래스입니다.  
  
 기본적으로 HTML 4.0을 지 원하는 브라우저를 사용 하는 ASP.NET 페이지 및 컨트롤은 XHTML 1.1 표준과 호환 되는 태그를 렌더링 합니다. 자세한 내용은 [XHTML 표준 Visual Studio 및 ASP.NET에](https://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97)입니다.  
  
 <xref:System.Web.UI.HtmlTextWriter> XHTML 태그를 렌더링 하지에 맞게 ASP.NET을 구성 하지 않으면 XHTML을 출력 합니다. 자세한 내용은 참조 하세요. [NIB: 방법: ASP.NET 웹 사이트에 XHTML 렌더링 구성](https://msdn.microsoft.com/library/42483a54-f1ae-44e1-88e6-4370f8690149)합니다.  
  
   
  
## Examples  
 이 섹션의 코드 예제에서는 네 부분을 포함합니다. 첫 번째 예제에는 파생된 클래스를 만드는 방법을 보여 줍니다. 두 번째 코드 예제에서는 사용자 지정 컨트롤을 만드는 방법을 보여 줍니다. 세 번째 코드 예제에서는 사용자 지정 컨트롤을 사용 하는 방법에 설명 합니다. 네 번째 코드 예제에서는 사용자 지정 컨트롤을 실행 하는 데 필요한 코드를 제공 합니다.  
  
 다음 코드 예제에서 파생 되는 사용자 지정 클래스를 만들어야 하는 방법에 설명 합니다 <xref:System.Web.UI.XhtmlTextWriter> 클래스입니다. 직접 또는 간접적으로 상속 되는 모든 클래스에 대 한 표준는 두 명의 생성자가는 <xref:System.Web.UI.HtmlTextWriter> 클래스입니다. 첫 번째 생성자는 <xref:System.IO.TextWriter> 개체를 매개 변수로 두 번째 생성자는 다음 두 매개 변수 값을 전달 하는 호출:  
  
-   <xref:System.IO.TextWriter> 인스턴스입니다.  
  
-   값을 <xref:System.Web.UI.HtmlTextWriter.DefaultTabString?displayProperty=nameWithType> XHTML 텍스트 기록기에 의해 사용 되는 기본 줄 들여쓰기를 정의 하는 속성입니다.  
  
 이 코드 예제에서는 재정의 하는 <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> 및 <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> 텍스트에 대 한 필터링 방법 크기 및 색 스타일, 각각. 또한 재정의 <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> 및 <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> 전과 컨트롤을 렌더링 한 후 메서드는 텍스트를 쓸 문자열입니다.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#1)]  
  
 다음 코드 예제에는 사용자 지정을 만드는 방법을 보여 줍니다 <xref:System.Web.UI.WebControls.Label> 라는 컨트롤 `TestLabel` 라는 사용자 지정 어댑터 및 `XhtmlTestLabelAdapter` XHTML로 컨트롤의 콘텐츠를 렌더링 하는 합니다.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#1)]  
  
 다음 코드 예제에는 사용자 지정 컨트롤을 사용 하는 방법을 보여 줍니다. `TestLabel` ASP.NET 웹 페이지에 있습니다.  
  
 [!code-aspx-csharp[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.aspx#4)]
 [!code-aspx-vb[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.aspx#4)]  
  
 앞의 코드 예제에서 사용자 지정 컨트롤을 사용 하려면 다음 추가 `<controlAdapters>` 요소 두 파일 중 하나입니다. .NET Framework 구성 디렉터리의 하위 폴더로 특정 브라우저에 대 한 하위 디렉터리에 적절 한 컴퓨터 수준 파일에 추가할 수 있습니다. 또는 웹 응용 프로그램 루트 아래의 App_Browsers 디렉터리에서 사용자 지정 브라우저 파일을 추가할 수 있습니다.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.TestLabel"  
   adapterType="AspNet.Samples.XhtmlTestLabelAdapter" />  
</controlAdapters>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <related type="Article" href="https://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97">ASP.NET 및 XHTML 규격</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Web.UI.XhtmlTextWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">XHTML 내용을 렌더링하는 <see cref="T:System.IO.TextWriter" /> 인스턴스입니다.</param>
        <summary><see cref="T:System.Web.UI.XhtmlTextWriter" /> 필드에 지정된 줄 들여쓰기를 사용하는 <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> 클래스의 새 인스턴스를 초기화합니다. 기본 줄 들여쓰기를 변경하지 않으려면 <see cref="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" /> 생성자를 사용합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.XhtmlTextWriter.%23ctor%2A> 사용 하는 생성자를 <xref:System.IO.TextWriter> 매개 변수가 두 번째 생성자 매개 변수 값을 전달 하는 호출 개체:  
  
-   <xref:System.IO.TextWriter> 인스턴스입니다.  
  
-   에 지정 된 문자열 값을 <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> XHTML 텍스트 기록기에 의해 사용 되는 탭 간격을 정의 하는 필드입니다.  
  
   
  
## Examples  
 다음 코드 예제에는 표준에서 직접 또는 간접적으로 파생 되는 모든 클래스는 두 명의 생성자가를 만드는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter> 에서 파생 되는 사용자 지정 클래스에 대 한 클래스는 <xref:System.Web.UI.XhtmlTextWriter> 클래스입니다.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">XHTML 내용을 렌더링하는 <see cref="T:System.IO.TextWriter" /> 인스턴스입니다.</param>
        <param name="tabString">줄 들여쓰기를 렌더링하는 데 사용할 문자열입니다.</param>
        <summary>지정한 줄 들여쓰기를 사용하는 <see cref="T:System.Web.UI.XhtmlTextWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에는 표준에서 직접 또는 간접적으로 파생 되는 모든 클래스는 두 명의 생성자가를 만드는 방법을 보여 줍니다 합니다 <xref:System.Web.UI.HtmlTextWriter> 에서 파생 되는 사용자 지정 클래스에 대 한 클래스는 <xref:System.Web.UI.XhtmlTextWriter> 클래스입니다.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">특성을 추가할 XHTML 요소입니다.</param>
        <param name="attributeName">추가할 특성입니다.</param>
        <summary>XHTML 요소에 특성을 추가합니다. <see cref="T:System.Web.UI.XhtmlTextWriter" /> 개체의 요소별 특성 컬렉션은 <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> 속성에 의해 참조됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> XHTML 요소에 특성을 추가 하는 방법입니다. 추가 특성을 인식 하 여 렌더링 한 다음 여는 <xref:System.Web.UI.XhtmlTextWriter> 개체입니다. 작성기 XHTML 요소 공통 특성을 렌더링 하지 못하도록 하려면 사용 된 <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable CommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable CommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ CommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.Hashtable" /> 개체에 대한 공통 태그 특성이 포함된 <see cref="T:System.Web.UI.XhtmlTextWriter" /> 개체를 가져옵니다.</summary>
        <value>공통 특성이 포함된 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> XHTML 요소에 허용 되는 및에 표시 되는 특성을 포함 하는 컬렉션을 <xref:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes%2A> 속성입니다. 공통 특성에 대 한 자세한 내용은 참조는 [World Wide Web Consortium (W3C) 웹 사이트](https://go.microsoft.com/fwlink/?linkid=37125)합니다.  
  
 새 인스턴스를 <xref:System.Web.UI.XhtmlTextWriter> 클래스를 초기화 하는 일반적인 특성은:  
  
-   `class`  
  
-   `id`  
  
-   `title`  
  
-   `xml:lang`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="ElementSpecificAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable ElementSpecificAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable ElementSpecificAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ElementSpecificAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ ElementSpecificAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementSpecificAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소별 특성이 포함된 <see cref="T:System.Collections.Hashtable" /> 개체를 가져옵니다.</summary>
        <value>요소별 특성이 포함된 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> XHTML 요소에 특성을 인식할 수 있는 추가 하는 방법입니다. XHTML 요소에 공통 특성을 제거 하려면 사용 된 <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> 메서드.  
  
 새 인스턴스를 <xref:System.Web.UI.XhtmlTextWriter> 클래스를 만들는 <xref:System.Collections.Hashtable> 요소별 특성의 개체는 다음 표에 표시 된 특성이 채워집니다.  
  
|요소|특성|  
|-------------|----------------|  
|`<a>`|`accesskey`, `href`, `charset`, `hreflang`, `rel`, `type`, `rev`, `title`, `tabindex`|  
|`<base>`|`href`|  
|`<blockquote>`|`cite`|  
|`<br>`|`id`, `class`, `title`|  
|`<form>`|`action`, `method`, `enctype`|  
|`<head>`|`xml:lang`|  
|`<html>`|`version`, `xml:lang`, `xmlns`|  
|`<img>`|`src`, `alt`, `width`, `longdesc`, `height`|  
|`<input>`|`size`, `accesskey`, `title`, `name`, `type`, `disabled`, `value`, `src`, `checked`, `maxlength`, `tabindex`|  
|`<label>`|`accesskey`, `for`|  
|`<li>`|`value`|  
|`<link>`|`hreflang`, `rev`, `type`, `charset`, `rel`, `href`, `media`|  
|`<meta>`|`content`, `name`, `xml:lang`, `http-equiv`, `scheme`|  
|`<object>`|`codebase`, `classid`, `data`, `standby`, `name`, `type`, `height`, `archive`, `declare`, `width`, `tabindex`, `codetype`|  
|`<ol>`|`start`|  
|`<optgroup>`|`label`, `disabled`|  
|`<option>`|`selected`, `value`|  
|`<param>`|`id`, `name`, `valuetype`, `value`, `type`|  
|`<pre>`|`xml:space`|  
|`<q>`|`cite`|  
|`<select>`|`name`, `tabindex`, `disabled`, `multiple`, `size`|  
|`<style>`|`xml:lang`, `xml:space`, `type`, `title`, `media`|  
|`<table>`|`width`, `summary`|  
|`<textarea>`|`name`, `cols`, `accesskey`, `tabindex`, `rows`|  
|`<td>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<th>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<title>`|`xml:lang`|  
|`<tr>`|`align`, `valign`|  
  
 요소 및 렌더링 되는 스타일에 대 한 자세한 내용은 XHTML 모듈화 사양을 참조를 [World Wide Web Consortium (W3C) 웹 사이트](https://go.microsoft.com/fwlink/?linkid=37125)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public override bool IsValidFormAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsValidFormAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsValidFormAttribute (attributeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsValidFormAttribute(System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="override this.IsValidFormAttribute : string -&gt; bool" Usage="xhtmlTextWriter.IsValidFormAttribute attributeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">확인할 특성 이름입니다.</param>
        <summary><see langword="&lt;form&gt;" /> 요소의 여는 태그에 XHTML 특성을 렌더링할 수 있는지 확인합니다.</summary>
        <returns>특성을 <see langword="true" /> 요소에 적용할 수 있으면 <see langword="&lt;form&gt;" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 조건부로 요청 하는 장치 XHTML 문서 유형별로 지원 되는지 여부에 따라 특성을 렌더링 하는 데 유용 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 사용자 지정을 만드는 보다 큰 예제의 일부 <xref:System.Web.UI.WebControls.Label> 제어 및 XHTML로 컨트롤의 콘텐츠를 렌더링 하는 어댑터입니다.  
  
 이 코드 예제에는 라는 부울 변수를 만드는 방법을 보여 줍니다 `attTest` 호출 결과로 생성 되는 반환 값으로 설정 하 고는 <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> "style" 매개 변수 값을 사용 하 여 메서드. 경우는 <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> 메서드가 반환 되는 `true`, 컨트롤과 연결 된 스타일을 사용 하 여 렌더링 되는 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A?displayProperty=nameWithType> 및 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A?displayProperty=nameWithType> 메서드. 경우는 `attTest` 값은 `false`, 스타일은 렌더링 되지 않습니다. 페이지 컨트롤에 대 한 텍스트를 표시 하는 대신를 `<br/>` 하 여 렌더링 되는 요소는 <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> 메서드 및 컨트롤의 XHTML 콘텐츠가 조건부로 렌더링 하는 사용자에 게 알리는 텍스트 문자열입니다.  
  
 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Web.UI.XhtmlTextWriter> 클래스입니다.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="xhtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">렌더링할 XHTML 특성입니다.</param>
        <param name="value">XHTML 특성에 할당되는 값입니다.</param>
        <param name="key">XHTML 특성과 연결된 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 열거형 값입니다.</param>
        <summary>지정된 XHTML 특성과 그 값이 현재 태그 요소로 렌더링될 수 있는지 여부를 결정합니다.</summary>
        <returns>특성이 해당 페이지로 렌더링되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에는 재정의 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> 확인 하는 메서드 있는지 여부를 `size` 특성이이 텍스트 기록기에 의해 렌더링 되는 요소에 대 한 렌더링 됩니다. 경우는 `size` 특성이 렌더링 되는지, 코드를 해당 값이 8 포인트 인지를 확인 합니다. 그렇다면 합니다 <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> 메서드가 반환 되는 `true`, 특성 및 해당 값을 렌더링 합니다. 8 포인트 이외의 값 이면 합니다 <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> 메서드가 반환 되는 `false`, 특성 및 해당 값이 렌더링 되지 않습니다. 경우의 키 매개 변수를 <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> 메서드는 일치 하지 않습니다는 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 특성의 기본 기능을 합니다 <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> 에 정의 된 메서드가 호출 되는 <xref:System.Web.UI.XhtmlTextWriter> 클래스.  
  
 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Web.UI.XhtmlTextWriter> 클래스입니다.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="xhtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">렌더링할 XHTML 스타일 특성입니다.</param>
        <param name="value">XHTML 스타일 특성에 할당되는 값입니다.</param>
        <param name="key">XHTML 스타일 특성과 연결된 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 열거형 값입니다.</param>
        <summary>지정된 XHTML 스타일 특성과 그 값이 현재 태그 요소로 렌더링될 수 있는지 여부를 결정합니다.</summary>
        <returns>스타일 특성이 렌더링되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에는 재정의 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> 확인 하는 메서드 있는지 여부를 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 이 텍스트 기록기에 의해 렌더링 되는 요소에 대 한 렌더링 되 고 특성입니다. 경우는 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 특성이 렌더링 되는지, 코드를 해당 값 자주색 인지 확인 합니다. 값이 보라색 합니다 <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> 메서드가 반환 되는 `false` 특성 및 해당 값이 렌더링 되지 않습니다. 경우는 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 특성이 다른 값으로 설정 되어 합니다 <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> 메서드가 반환 되는 `true` 특성 및 해당 값이 렌더링 됩니다. 경우의 키 매개 변수를 <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> 메서드는 일치 하지 않습니다는 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 특성의 기본 기능을 합니다 <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> 에 정의 된 메서드가 호출 되는 <xref:System.Web.UI.XhtmlTextWriter> 클래스.  
  
 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Web.UI.XhtmlTextWriter> 클래스입니다.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">특성을 제거할 XHTML 요소입니다.</param>
        <param name="attributeName">지정한 XHTML 요소에서 제거할 특성입니다.</param>
        <summary>요소의 <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> 컬렉션에서 특성을 제거합니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetDocType">
      <MemberSignature Language="C#" Value="public virtual void SetDocType (System.Web.UI.XhtmlMobileDocType docType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDocType(valuetype System.Web.UI.XhtmlMobileDocType docType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.SetDocType(System.Web.UI.XhtmlMobileDocType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDocType (docType As XhtmlMobileDocType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDocType(System::Web::UI::XhtmlMobileDocType docType);" />
      <MemberSignature Language="F#" Value="abstract member SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit&#xA;override this.SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit" Usage="xhtmlTextWriter.SetDocType docType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="docType" Type="System.Web.UI.XhtmlMobileDocType" />
      </Parameters>
      <Docs>
        <param name="docType"><see cref="T:System.Web.UI.XhtmlMobileDocType" /> 열거형 값 중 하나입니다.</param>
        <summary>텍스트 작성기에서 페이지나 컨트롤에 렌더링할 XHTML 문서 형식을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> 메서드를 요청 하는 장치에 렌더링할 XHTML의 형식을 정의 하는 사용자 지정 페이지 어댑터에서입니다. 지원 되는 문서 형식에 정의 된는 <xref:System.Web.UI.XhtmlMobileDocType> 열거형입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.XhtmlMobileDocType" />
      </Docs>
    </Member>
    <Member MemberName="SuppressCommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressCommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressCommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressCommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressCommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressCommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.Hashtable" /> 특성이 억제된 요소의 <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> 개체를 가져옵니다.</summary>
        <value>렌더링되지 않는 <see cref="T:System.Collections.Hashtable" /> 컬렉션이 포함된 요소의 <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 억제 된 특성 컬렉션을 XHTML 요소 목록이 포함 됩니다. <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> 특성은 렌더링 되지 않습니다.  
  
 새 인스턴스를 <xref:System.Web.UI.XhtmlTextWriter> 클래스를 만들 합니다 <xref:System.Collections.Hashtable> 개체의 요소는 <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> 특성이 억제 된 포함:  
  
-   `base`  
  
-   `meta`  
  
-   `br`  
  
-   `head`  
  
-   `title`  
  
-   `html`  
  
-   `style`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="xhtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see langword="&lt;br/&gt;" /> 요소를 XHTML 출력 스트림에 씁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는 상속을 재정의 하는 방법을 보여 줍니다 <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A?displayProperty=nameWithType> 메서드를 사용 하 여 텍스트 문자열을 씁니다 합니다 <xref:System.Web.UI.HtmlTextWriter.Write%2A?displayProperty=nameWithType> 메서드 및 `<br/>` 요소를 <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> 메서드.  
  
 [!code-csharp[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#4)]
 [!code-vb[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>