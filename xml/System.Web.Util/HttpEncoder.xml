<Type Name="HttpEncoder" FullName="System.Web.Util.HttpEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="02366399c041606f7039849acedcefa543ab6551" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="58874880" /></Metadata><TypeSignature Language="C#" Value="public class HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HttpEncoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.HttpEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpEncoder" />
  <TypeSignature Language="F#" Value="type HttpEncoder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>인코딩 및 디코딩 논리를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인코딩 및 디코딩 논리와 같은 클래스의 메서드에 의해 사용 되는 클래스에 포함 되어 있습니다 <xref:System.Web.HttpUtility>, <xref:System.Web.HttpServerUtility>, 및 <xref:System.Net.HttpResponseHeader>합니다.  
  
 상속 하는 <xref:System.Web.Util.HttpEncoder> 클래스 및 기본 인코딩 및 디코딩 ASP.NET의 동작에 맞게 동작을 재정의 합니다. 설정한를 <xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A> 의 속성을 <xref:System.Web.Configuration.HttpRuntimeSection> 사용자 지정 클래스를 구성 하는 클래스입니다.  
  
 인코딩 및 디코딩하는 사용자 지정 클래스에서 파생 되며 <xref:System.Web.Util.HttpEncoder> 변경 항목을 선택 또는 기본 제공 ASP.NET 인코딩 및 디코딩 동작을 재정의할 수 있습니다.  
  
 에 대 한 사용자 지정 인코딩 형식을 바꾸거나 다음 인코딩 동작을 보완 하는 ASP.NET에서 구성할 수 있습니다.  
  
-   HTML 인코딩  
  
-   HTML 특성 인코딩입니다.  
  
-   URL 인코딩  
  
-   URL 경로 인코딩  
  
-   HTTP 헤더 이름 및 헤더 값 인코딩  
  
 기본적으로 ASP.NET 응용 프로그램은 사용 하도록 구성 되는 <xref:System.Web.Security.AntiXss.AntiXssEncoder> 인코딩 출력 모두에 대 한 입력 합니다.  
  
 응용 프로그램 수준 Web.config 파일 표시는 다음 예제에서는 방법을 <xref:System.Web.Security.AntiXss.AntiXssEncoder> ASP.NET 응용 프로그램 유형 설정 됩니다.  
  
 `<httpRuntime requestValidationMode="4.5" encoderType="System.Web.Security.AntiXss.AntiXssEncoder, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>`  
  
 예제에서는의 구성 설정의 <xref:System.Web.Security.AntiXss.AntiXssEncoder> 모두를 수행 하는 클래스는 응용 프로그램에서 인코딩 출력 합니다. 자세한 내용은 참조는 <xref:System.Web.Security.AntiXss.AntiXssEncoder> 클래스 개요입니다.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>사용자 지정 인코더 클래스를 만들고 기본 클래스의 기본 메서드를 재정의 하는 경우 파생된 인코더 재정의 된 메서드 중 하나에서 예외를 throw 할 수 있습니다. 그러나 다음 경우에 이러한 예외를 throw 시킬 수 ASP.NET에서 예기치 않은 동작: 
-ASP.NET 사용자 지정 인코더에서 throw 된 처리 되지 않은 예외로 인해 발생 하는 오류 페이지를 렌더링 하는 경우에 ASP.NET 사용자 지정 인코더를 호출 하 여 오류 출력을 인코딩할 시도 하지 않습니다. 이 재귀 오류 조건을 방지합니다.  
  
-보내면 ASP.NET은 HTTP 헤더를 IIS, ASP.NET는 처리 되지 않은 예외에 대 한 제공 하지 않습니다. 따라서 (구성 설정을 표시 하려면이 페이지를 통해) 하는 경우 표준 ASP.NET 오류 페이지 렌더링 됩니다.</para></block>
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
    <altmember cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.Util.HttpEncoder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Current { System::Web::Util::HttpEncoder ^ get(); void set(System::Web::Util::HttpEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.HttpEncoder with get, set" Usage="System.Web.Util.HttpEncoder.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>응용 프로그램에서 사용될 <see cref="T:System.Web.Util.HttpEncoder" /> 형식을 가져오거나 설정합니다.</summary>
        <value>사용될 인코더/디코더 형식에 대한 참조입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생 된 경우 <xref:System.Web.Util.HttpEncoder> 형식 구성 파일에 지정 된 된 <xref:System.Web.Util.HttpEncoder.Current%2A> 속성 사용자 지정 형식에 대 한 참조를 반환 합니다. 그러나 없는 사용자 지정 인코더를 사용 하는 경우 속성 참조를 반환 합니다 기본 ASP.NET <xref:System.Web.Util.HttpEncoder> 인스턴스.  
  
 <xref:System.Web.Util.HttpEncoder.Current%2A> 속성은 스레드로부터 안전 하지 않습니다. 응용 프로그램에만이 속성을 설정 `Application_Start` 메서드를 있으므로 `Application_Start` 단일 스레드에서 실행 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">이 속성에 할당되는 인코더 인스턴스는 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Default { System::Web::Util::HttpEncoder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Web.Util.HttpEncoder" Usage="System.Web.Util.HttpEncoder.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET의 기본 인코더에 대한 참조를 가져옵니다.</summary>
        <value>기본 인코더에 대한 참조입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적인 인코딩 문제는 기본 ASP.NET <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> 동작에서 "+" 문자가 공백으로 변환 합니다. 지금까지 "+" 문자는 인터넷 규칙 보다 읽기 쉬운 방식으로 URL에서 공백 문자 인코딩 되었습니다. 그러나 표준에 따라 공백 문자 할 대신 및 "%20"으로 인코딩할 수 "+" 문자입니다. ASP.NET를 사용 하면 자세한 표준 규격 인코딩 알고리즘을 구현할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderNameValueEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HeaderNameValueEncode (string headerName, string headerValue, out string encodedHeaderName, out string encodedHeaderValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HeaderNameValueEncode(string headerName, string headerValue, [out] string&amp; encodedHeaderName, [out] string&amp; encodedHeaderValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HeaderNameValueEncode(System.String,System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HeaderNameValueEncode (headerName As String, headerValue As String, ByRef encodedHeaderName As String, ByRef encodedHeaderValue As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HeaderNameValueEncode(System::String ^ headerName, System::String ^ headerValue, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderName, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderValue);" />
      <MemberSignature Language="F#" Value="abstract member HeaderNameValueEncode : string * string *  *  -&gt; unit&#xA;override this.HeaderNameValueEncode : string * string *  *  -&gt; unit" Usage="httpEncoder.HeaderNameValueEncode (headerName, headerValue, encodedHeaderName, encodedHeaderValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="headerValue" Type="System.String" />
        <Parameter Name="encodedHeaderName" Type="System.String" RefType="out" />
        <Parameter Name="encodedHeaderValue" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="headerName">인코딩할 HTTP 헤더 이름입니다.</param>
        <param name="headerValue">인코딩할 HTTP 헤더 값입니다.</param>
        <param name="encodedHeaderName">이 메서드가 반환될 때 HTTP 헤더에 사용할 인코딩된 이름을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <param name="encodedHeaderValue">이 메서드가 반환될 때 HTTP 헤더에 사용할 인코딩된 값을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>HTTP 헤더로 사용할 수 있는 문자열로 헤더 이름 및 값을 인코딩합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> 메서드는 입력된 문자열에서 사용 합니다 `headerName` 및 `headerValue` 매개 변수 인코딩하고 및 합니다. 인코딩된 값 출력 매개 변수로 반환 됩니다.  
  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> 메서드 헤더 이름 및 값을 인코딩하려면 다음 논리를 사용 합니다.  
  
-   유니코드 값이 ASCII 문자 9 제외 하 고 ASCII 문자 32 보다 작은 모든 문자는의 형식으로 URL로 인코딩된 `%NN` 여기서는 `N` 자 16 진수 값을 나타냅니다.  
  
-   ASCII 문자 (가로 탭 문자) 9 URL 인코딩되지 않습니다.  
  
-   ASCII 문자 127로 인코딩됩니다 `%7F`합니다.  
  
-   다른 모든 문자는 인코딩되지 않습니다.  
  
    > [!NOTE]
    >  유니코드 값에 대 한이 메서드를 사용할 수 있지만 ASCII 범위에서 값에 대 한 일반적으로 사용 됩니다.  
  
 기본 구현을 합니다 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> 의 값을 반환 하는 메서드 `headerValue` 에서 `encodedHeaderValue` 경우 `headerValue` 는 `null` 이거나 빈 문자열인. 기본 구현은 값을 반환 하는 마찬가지로 `headerName` 에 `encodedHeaderName` 경우 `headerName` 는 `null` 이거나 빈 문자열입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">인코딩할 문자열입니다.</param>
        <param name="output">인코딩된 값을 쓸 텍스트 기록기입니다.</param>
        <summary>들어오는 값을 작은 따옴표나 큰따옴표로 구분된 HTML 특성에 삽입할 수 있는 문자열로 인코딩합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> 메서드는 표준 HTML 엔터티를 사용 하 여 문자를 인코딩합니다. 예를 들어 합니다 `<` (왼쪽된 꺾쇠 괄호)로 인코딩됩니다 `&lt;` 하며 `\` (백슬래시)로 인코딩됩니다 `&#92;`.  
  
 안전 하 게 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> 작은따옴표로 묶인 및 큰따옴표로 묶인 특성 내에서. 값을 따옴표로 묶어야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlDecode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlDecode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlDecode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlDecode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">디코딩할 문자열입니다.</param>
        <param name="output">디코딩된 값을 쓸 텍스트 기록기입니다.</param>
        <summary>HTML로 인코딩된 문자열에서 값을 디코딩합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 ASP.NET 디코딩 논리가 디코딩할 수 있는 문자 시퀀스를 보여 줍니다.  
  
|문자 시퀀스|규칙|  
|------------------------|----------|  
|`&#NNN;` (ASCII 문자에 대 한 10 진수 코드)입니다.|지정된 된 ASCII 문자도 디코딩됩니다. # 문자 뒤 첫째 자리에서 시작 하 고 세미콜론 완료 하는 문자 시퀀스입니다.|  
|`&#xZZ;` (ASCII 문자에 대 한 16 진수 코드)입니다.|지정된 된 ASCII 문자도 디코딩됩니다. 인코딩된 형식 대신 10 진수 값을 16 진수 문자를 사용 하 여 문자를 지정 합니다. # 문자 뒤 첫째 자리에서 시작 하 고 세미콜론 완료 하는 문자 시퀀스입니다.|  
|명명 된 HTML 엔터티입니다.|해당 ASCII 문자로 디코딩됩니다.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member HtmlEncode : string * System.IO.TextWriter -&gt; unit&#xA;override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">인코딩할 문자열입니다.</param>
        <param name="output">인코딩된 값을 쓸 텍스트 기록기입니다.</param>
        <summary>문자열을 HTML로 인코딩된 문자열로 인코딩합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 ASP.NET 인코딩 논리가 디코딩할 수 있는 문자 시퀀스를 보여 줍니다.  
  
|문자|로 인코딩됩니다.|  
|---------------|----------------|  
|`<` (왼쪽된 꺾쇠 괄호)|`&lt;`|  
|`>` (오른쪽 꺾쇠 괄호)|`&gt;`|  
|`"` (큰따옴표)|`&quot;`|  
|`&` (앰퍼샌드)|`&amp;`|  
|`\` (백슬래시)|`&#92;`|  
|160에서 255 사이의 ASCII 문자|`&#NNN;`여기서 `NNN` 는 세 자리 10 진수 문자 코드|  
  
 재정의 하는 경우는 <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> 메서드를 큰따옴표로 묶인 또는 작은따옴표로 묶인 HTML 특성 내에서 안전 하 게 되는 출력을 생성 해야 합니다. 이 태그와 코드 결합할 수 있습니다, 같은 Razor 엔진에 의해 구문 분석을 수용 \<attr 태그 = "@value" > 있습니다. 또한는 @ 연산자 상황에 맞는 인식 되지 않으면 Razor 엔진에 의해 처리 되므로 호출 <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> 대신 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="output" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="JavaScriptStringEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string JavaScriptStringEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string JavaScriptStringEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.JavaScriptStringEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function JavaScriptStringEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ JavaScriptStringEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member JavaScriptStringEncode : string -&gt; string&#xA;override this.JavaScriptStringEncode : string -&gt; string" Usage="httpEncoder.JavaScriptStringEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">인코딩할 문자열입니다.</param>
        <summary>문자열을 인코딩합니다.</summary>
        <returns>인코딩된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 인코딩을 사용 하면 모든 브라우저에서 URL 문자열의에서 텍스트는 올바르게 전송 합니다. 물음표 (?), 앰퍼샌드 (&), 슬래시 (/) 및 공백 등의 문자 잘리거나 일부 브라우저에 의해 손상 될 수 있습니다. 따라서 이러한 문자를 인코딩해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member UrlEncode : byte[] * int * int -&gt; byte[]&#xA;override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="httpEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">인코딩할 바이트 배열입니다.</param>
        <param name="offset">인코딩을 시작할 <paramref name="bytes" /> 배열의 위치입니다.</param>
        <param name="count">인코딩할 <paramref name="bytes" /> 배열의 항목 수입니다.</param>
        <summary>URL에 사용할 수 없는 문자 배열을 해당하는 16진수 문자 엔터티로 인코딩합니다.</summary>
        <returns>인코딩된 문자 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> 의 여러 URL 인코딩 메서드 메서드를 호출 합니다 <xref:System.Web.HttpUtility> 클래스입니다.  
  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> 메서드 URL로 인코딩하고 모든 문자는 아닙니다. ASCII 집합 문자는 URL 로부터 안전한으로 간주 됩니다. 공백 ASCII로 인코딩되며 "`+"` 문자입니다. ASCII 문자를 포함 하는 URL 로부터 안전한 ASCII 문자 (A ~ Z 및 z), 숫자 (0-9), 및 일부 문장 부호입니다. 다음 표에서 URL 로부터 안전한 ASCII 문자로 간주 되는 문장 부호를 나열 합니다.  
  
|문자|설명|  
|---------------|-----------------|  
|-|하이픈|  
|_|밑줄|  
|.|마침표 (.)|  
|!|느낌표|  
|*|별표 (*)|  
|(|여는 괄호|  
|)|닫는 괄호|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />이 0보다 작거나 <paramref name="bytes" /> 배열의 길이보다 큰 경우  
  
또는 
 <paramref name="count" />가 0보다 작거나 <paramref name="count" />와 <paramref name="offset" />의 합이 <paramref name="bytes" /> 배열의 길이보다 큰 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="bytes" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member UrlPathEncode : string -&gt; string&#xA;override this.UrlPathEncode : string -&gt; string" Usage="httpEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">인코딩할 문자열입니다.</param>
        <summary>URL의 하위 섹션을 인코딩합니다.</summary>
        <returns>URL 인코딩된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> 메서드는 <xref:System.Web.HttpUtility.UrlPathEncode%2A> 메서드에 의해 호출됩니다. <xref:System.Web.HttpUtility.UrlPathEncode%2A> 메서드는 다음 단계를 수행 합니다.  
  
-   인코딩 논리를 적용 합니다 <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> URL (쿼리 문자열 제외)의 경로 부분만 방법입니다. 메서드는 utf-8 문자열로 사용 하는 URL로 인코딩된를 가정 합니다.  
  
-   결과 인코딩된 문자열의 처음 128 개 ASCII 문자 집합만 사용 되도록 비 공간을 인코딩합니다. 유니코드 값 128 및, 또는 32 크고, 문자가 URL로 인코딩됩니다.  
  
-   공백이 %20으로 인코딩합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>