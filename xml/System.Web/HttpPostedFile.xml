<Type Name="HttpPostedFile" FullName="System.Web.HttpPostedFile">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7b5f62f8871ee32c9fc3a853b7ca969414a5987d" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51862322" /></Metadata><TypeSignature Language="C#" Value="public sealed class HttpPostedFile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpPostedFile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpPostedFile" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpPostedFile" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpPostedFile sealed" />
  <TypeSignature Language="F#" Value="type HttpPostedFile = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>클라이언트에서 업로드한 개별 파일에 액세스할 수 있도록 합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpFileCollection> 클래스 파일 컬렉션으로 클라이언트에서 업로드 되는 모든 파일에 대 한 액세스를 제공 합니다. <xref:System.Web.HttpPostedFile> 클래스 속성 및 개별 파일에 대 한 정보 및 읽고 파일을 저장 하는 메서드를 제공 합니다.  
  
 <xref:System.Web.UI.HtmlControls.HtmlInputFile> 컨트롤을 선택 하 고 클라이언트에서 파일 업로드에 사용할 수 있습니다.  
  
 MIME 다중 파트/폼 데이터 형식으로 파일이 업로드 됩니다. 기본적으로 256KB 보다 큰 파일 업로드 및 양식 필드를 포함 하 여 모든 요청에는 디스크에 버퍼링 하지 않고 서버 메모리에 보관 합니다.  
  
 에 액세스 하 여 허용 되는 최대 요청 크기를 지정할 수 있습니다는 <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> 속성 또는 설정 하 여는 `maxRequestLength` 특성을 [httpRuntime 요소 (ASP.NET 설정 스키마)](https://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) 합니다 Machine.config 내의 요소 또는 Web.config 파일입니다. 기본값은 4MB입니다.  
  
 에 액세스 하 여 파일 업로드를 포함 하는 요청에 대 한 서버 메모리에 버퍼링 되는 데이터의 양을 지정할 수 있습니다는 <xref:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold%2A> 속성 또는 설정 하 여는 `requestLengthDiskThreshold` 특성을 [httpRuntime 요소 (ASP.NET 설정 스키마)](https://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) 합니다 Machine.config 또는 Web.config 파일 내의 요소입니다.  
  
 조정 하 여 합니다 <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> 및 <xref:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold%2A> 속성인 서버의 성능을 미세 조정할 수 있습니다. 또한 설정 해야 합니다 <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> 큰 파일 서버에 게시 하는 사용자로 인 한 서비스 공격 거부를 방지 하기 위해.  
  
 업로드 된 파일을 버퍼에 할당 되는 서버 리소스는 요청이 종료 될 때 소멸 됩니다. 파일의 영구 복사본을 저장 하려면는 <xref:System.Web.HttpPostedFile.SaveAs%2A> 메서드.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.HtmlControls.HtmlInputFile" />
    <altmember cref="T:System.Web.HttpFileCollection" />
  </Docs>
  <Members>
    <Member MemberName="ContentLength">
      <MemberSignature Language="C#" Value="public int ContentLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ContentLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpPostedFile.ContentLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ContentLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentLength : int" Usage="System.Web.HttpPostedFile.ContentLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>업로드된 파일의 크기(바이트)를 가져옵니다.</summary>
        <value>파일 길이(바이트)입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.HttpPostedFile.ContentType" />
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public string ContentType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpPostedFile.ContentType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContentType { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentType : string" Usage="System.Web.HttpPostedFile.ContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>클라이언트에서 보낸 파일의 MIME 콘텐츠 형식을 가져옵니다.</summary>
        <value>업로드된 파일의 MIME 콘텐츠 형식입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는 업로드 된 파일 컬렉션에 있는 모든 파일을 반복 하 고 파일의 MIME 형식을 때 작업을 수행 하는 방법을 보여 줍니다 `US-ASCII`합니다.  
  
 [!code-csharp[Classic HttpPostedFile.ContentType Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpPostedFile.ContentType Example/CS/source.cs#1)]
 [!code-vb[Classic HttpPostedFile.ContentType Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpPostedFile.ContentType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpPostedFile.FileName" />
        <altmember cref="P:System.Web.HttpPostedFile.ContentLength" />
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpPostedFile.FileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string" Usage="System.Web.HttpPostedFile.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>클라이언트에 있는 파일의 정규화된 이름을 가져옵니다.</summary>
        <value>디렉터리 경로를 포함한 클라이언트 파일의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는 문자열 변수에 업로드 된 파일 (파일 컬렉션의 첫 번째 파일)의 이름을 지정 하는 방법에 설명 합니다.  
  
 [!code-csharp[Classic HttpPostedFile.FileName Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpPostedFile.FileName Example/CS/source.cs#1)]
 [!code-vb[Classic HttpPostedFile.FileName Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpPostedFile.FileName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpPostedFile.ContentType" />
      </Docs>
    </Member>
    <Member MemberName="InputStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream InputStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream InputStream" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpPostedFile.InputStream" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ InputStream { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputStream : System.IO.Stream" Usage="System.Web.HttpPostedFile.InputStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>업로드된 파일을 가리켜 파일 내용을 읽을 준비를 하는 <see cref="T:System.IO.Stream" /> 개체를 가져옵니다.</summary>
        <value>파일을 가리키는 <see cref="T:System.IO.Stream" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는 클라이언트의 파일을 바이트 배열에 컬렉션의 첫 번째 파일의 내용을 읽고 문자열을 바이트 배열 복사 하는 방법을 보여 줍니다.  
  
 [!code-csharp[Classic HttpPostedFile.InputStream Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpPostedFile.InputStream Example/CS/source.cs#1)]
 [!code-vb[Classic HttpPostedFile.InputStream Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpPostedFile.InputStream Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAs">
      <MemberSignature Language="C#" Value="public void SaveAs (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAs(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpPostedFile.SaveAs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveAs (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveAs(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="member this.SaveAs : string -&gt; unit" Usage="httpPostedFile.SaveAs filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">저장된 파일의 이름입니다.</param>
        <summary>업로드된 파일의 콘텐츠를 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 업로드 된 파일을 포함 하는 요청에 대해 허용 되는 최대 크기는 4MB를 기본적으로 됩니다. Machine.config 또는 Web.config 파일에서 최대 요청 크기를 지정할 수 있습니다 합니다 `maxRequestLength` 특성을 [httpRuntime 요소 (ASP.NET 설정 스키마)](https://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) 요소입니다. 사용 하 여 특정 페이지에 대 한 최대 요청 크기를 지정할 수 있습니다 합니다 [location 요소 (ASP.NET 설정 스키마)](https://msdn.microsoft.com/library/922ef7d5-da38-4661-b1c6-5b9e5ceda1d5) Web.config 파일의 요소입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 웹 서버의 로컬 디스크에 C:\TempFiles 폴더 클라이언트에서 업로드 되는 모든 파일을 저장 하는 방법에 설명 합니다.  
  
 [!code-csharp[Classic HttpPostedFile.SaveAs Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpPostedFile.SaveAs Example/CS/source.cs#1)]
 [!code-vb[Classic HttpPostedFile.SaveAs Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpPostedFile.SaveAs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><see cref="P:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath" /> 개체의 <see cref="T:System.Web.Configuration.HttpRuntimeSection" /> 속성이 <see langword="true" />로 설정되지만 <paramref name="filename" />이 절대 경로가 아닌 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>