<Type Name="HttpServerUtility" FullName="System.Web.HttpServerUtility">
  <Metadata><Meta Name="ms.openlocfilehash" Value="de9ef1415ef4c2ca6c31b7dcf99a0c0fab37cc19" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57933458" /></Metadata><TypeSignature Language="C#" Value="public sealed class HttpServerUtility" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpServerUtility extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpServerUtility" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpServerUtility" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpServerUtility sealed" />
  <TypeSignature Language="F#" Value="type HttpServerUtility = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>웹 요청을 처리하기 위한 도우미 메서드를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 속성과 메서드를 <xref:System.Web.HttpServerUtility> 클래스가 내장 함수를 통해 노출 됩니다 <xref:System.Web.HttpContext.Server%2A> ASP.NET에서 제공 되는 개체입니다.  
  
   
  
## Examples  
 소스 코드를 사용 하 여 Visual Studio 웹 사이트 프로젝트는 다음이 항목과 함께 제공 됩니다. [다운로드](https://go.microsoft.com/fwlink/?LinkId=192870)합니다.  
  
 다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Web.HttpServerUtility.HtmlEncode%2A> 메서드 및 <xref:System.Web.HttpServerUtility.UrlEncode%2A> 메서드를 <xref:System.Web.HttpServerUtility> 클래스입니다. <xref:System.Web.HttpServerUtility.HtmlEncode%2A> 메서드를 사용 하면 모든 사용자가 제공한 문자열 입력 실행 스크립트 또는 HTML 요소 대신 브라우저에서 정적 텍스트로 렌더링 됩니다 하는 확인 합니다. <xref:System.Web.HttpServerUtility.UrlEncode%2A> 메서드 HTTP 스트림에 올바르게 전송 되도록 Url을 인코딩합니다.  
  
 [!code-aspx-csharp[System.Web.HttpServerUtility1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpServerUtility1/cs/HttpServerUtilityCS.aspx#1)]
 [!code-aspx-vb[System.Web.HttpServerUtility1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpServerUtility1/vb/HttpServerUtilityVB.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.HttpContext" />
  </Docs>
  <Members>
    <Member MemberName="ClearError">
      <MemberSignature Language="C#" Value="public void ClearError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.ClearError" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearError ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearError();" />
      <MemberSignature Language="F#" Value="member this.ClearError : unit -&gt; unit" Usage="httpServerUtility.ClearError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이전 예외를 지웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 throw 된 마지막 예외를 지웁니다.  
  
 [!code-csharp[Classic HttpServerUtility.ClearError Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.ClearError Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.ClearError Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.ClearError Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpServerUtility.GetLastError" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateObject">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>COM 개체의 서버 인스턴스를 만듭니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public object CreateObject (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObject(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject (progID As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObject(System::String ^ progID);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : string -&gt; obj" Usage="httpServerUtility.CreateObject progID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">인스턴스를 만들 개체의 클래스 또는 형식입니다.</param>
        <summary>개체의 ProgID(프로그램 식별자)로 식별되는 COM 개체의 서버 인스턴스를 만듭니다.</summary>
        <returns>새 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 개체의 ProgID를 사용 하 여 개체를 만듭니다.  
  
 [!code-csharp[Classic HttpServerUtility.CreateObject Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObject Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.CreateObject Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObject Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">개체의 인스턴스를 만들 수 없습니다.</exception>
        <altmember cref="M:System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public object CreateObject (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObject(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObject(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObject(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : Type -&gt; obj" Usage="httpServerUtility.CreateObject type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">만들 개체를 나타내는 <see cref="T:System.Type" />입니다.</param>
        <summary>개체의 형식으로 식별되는 COM 개체의 서버 인스턴스를 만듭니다.</summary>
        <returns>새 개체입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObjectFromClsid">
      <MemberSignature Language="C#" Value="public object CreateObjectFromClsid (string clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObjectFromClsid(string clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObjectFromClsid (clsid As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObjectFromClsid(System::String ^ clsid);" />
      <MemberSignature Language="F#" Value="member this.CreateObjectFromClsid : string -&gt; obj" Usage="httpServerUtility.CreateObjectFromClsid clsid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clsid">인스턴스를 만들 개체의 클래스 식별자입니다.</param>
        <summary>개체의 CLSID(클래스 식별자)로 식별되는 COM 개체의 서버 인스턴스를 만듭니다.</summary>
        <returns>새 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Web.HttpServerUtility.CreateObjectFromClsid%2A> COM 개체의 서버 인스턴스를 만드는 방법.  
  
 [!code-csharp[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObjectFromClsid Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObjectFromClsid Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">개체의 인스턴스를 만들 수 없습니다.</exception>
        <altmember cref="M:System.Web.HttpServerUtility.CreateObject(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Execute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>현재 요청의 컨텍스트에서 지정된 리소스에 대한 처리기를 실행하고 요청을 호출한 페이지로 실행 제어를 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Execute : string -&gt; unit" Usage="httpServerUtility.Execute path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">실행할 URL 경로입니다.</param>
        <summary>현재 요청의 컨텍스트에서 지정된 가상 경로에 대한 처리기를 실행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.Execute%2A> 새 페이지의 실행이 완료 된 후 메서드는 원래 페이지의 실행을 계속 합니다. <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드는 무조건 실행 다른 처리기에 전달 합니다.  
  
 ASP.NET에서 현재 사용자에서 제공 하는 리소스를 볼 수 있는 권한이 있는지 확인 하지 않습니다는 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드. ASP.NET 인증 및 권한 부여 논리가 원래 리소스 처리기가 호출 되기 전에 실행을 ASP.NET에 나타난 처리기를 직접 호출을 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드 및 인증 및 권한 부여 논리 새 다시 실행 하지 않습니다 리소스입니다. 응용 프로그램의 보안 정책 리소스에 액세스할 수 있는 적절 한 권한을 클라이언트에 필요한 경우 응용 프로그램 가지도록 하거나 사용자 지정 액세스 제어 메커니즘을 제공 해야 합니다.  
  
 사용 하 여 다시 인증을 할 수 있습니다 합니다 <xref:System.Web.HttpResponse.Redirect%2A> 메서드 대신는 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드. <xref:System.Web.HttpResponse.Redirect%2A> 브라우저는 새 리소스를 요청 하는 클라이언트 쪽 리디렉션을 수행 합니다. 이 리디렉션 시스템으로 들어가는 새 요청을 이기 때문에 인터넷 정보 서비스 (IIS) 및 ASP.NET 모두 보안 정책의 모든 인증 및 권한 부여 논리를 거쳐야 합니다.  
  
 사용 하는 사용자 지정 권한 부여 메서드를 통합 하 여 리소스를 볼 수 있는 권한이 있는지 확인할 수 있습니다 합니다 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> 응용 프로그램 호출 하기 전에 메서드를 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드.  
  
   
  
## Examples  
 다음 예에서는 현재 디렉터리에.aspx 페이지 ""를 표시합니다. 프로그램 실행 Updateinfo.aspx 페이지 표시 되 면 시작 페이지를 반환 합니다.  
  
 [!code-csharp[Classic HttpServerUtility.Execute Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Execute Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Execute Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Execute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">현재 <see cref="T:System.Web.HttpContext" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="path" />에 지정된 처리기를 실행하는 동안 오류가 발생한 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="path" />가 가상 경로가 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Execute : string * bool -&gt; unit" Usage="httpServerUtility.Execute (path, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path">실행할 URL 경로입니다.</param>
        <param name="preserveForm"><see cref="P:System.Web.HttpRequest.QueryString" /> 및 <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 유지하려면 <see langword="true" />이고, <see cref="P:System.Web.HttpRequest.QueryString" /> 및 <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 지우려면 <see langword="false" />입니다.</param>
        <summary>현재 요청의 컨텍스트에서 지정된 가상 경로에 대한 처리기를 실행하고 <see cref="P:System.Web.HttpRequest.QueryString" /> 및 <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 지울지 여부를 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는.aspx 페이지를 실행 하는 방법을 보여 줍니다 `Updateinfo.aspx` 현재 요청에 유지 합니다 <xref:System.Web.HttpRequest.QueryString%2A> 및 <xref:System.Web.HttpRequest.Form%2A> 컬렉션입니다. 프로그램 실행 후 시작 페이지를 반환 `Updateinfo.aspx` 표시 됩니다.  
  
 [!code-csharp[HttpServerUtility.Execute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpServerUtility.Execute/CS/httpserverutility.execute_cs.aspx#1)]
 [!code-vb[HttpServerUtility.Execute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpServerUtility.Execute/VB/httpserverutility.execute_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">현재 <see cref="T:System.Web.HttpContext" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="path" />에 지정된 처리기를 실행하는 동안 오류가 발생한 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="path" />가 가상 경로가 아닌 경우</exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.Execute : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.Execute (path, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="path">실행할 URL 경로입니다.</param>
        <param name="writer">출력을 캡처할 <see cref="T:System.IO.TextWriter" />입니다.</param>
        <summary>현재 요청의 컨텍스트에서 지정된 가상 경로에 대한 처리기를 실행합니다. <see cref="T:System.IO.TextWriter" />는 실행된 처리기에서 출력을 캡처합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드는 지정 된 가상 경로 실행이 완료 된 후 원래 요청의 실행을 계속 합니다. <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드는 무조건 실행 다른 처리기에 전달 합니다.  
  
 ASP.NET에서 현재 사용자에서 제공 하는 리소스를 볼 수 있는 권한이 있는지 확인 하지 않습니다는 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드. ASP.NET 인증 및 권한 부여 논리가 원래 리소스 처리기가 호출 되기 전에 실행을 ASP.NET에 나타난 처리기를 직접 호출을 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드 및 인증 및 권한 부여 논리 새 다시 실행 하지 않습니다 리소스입니다. 응용 프로그램의 보안 정책 리소스에 액세스할 수 있는 적절 한 권한을 클라이언트에 필요한 경우 응용 프로그램 가지도록 하거나 사용자 지정 액세스 제어 메커니즘을 제공 해야 합니다.  
  
 사용 하 여 다시 인증을 할 수 있습니다 합니다 <xref:System.Web.HttpResponse.Redirect%2A> 메서드 대신는 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드. <xref:System.Web.HttpResponse.Redirect%2A> 브라우저는 새 리소스를 요청 하는 클라이언트 쪽 리디렉션을 수행 합니다. 이 리디렉션 시스템으로 들어가는 새 요청을 이기 때문에 인터넷 정보 서비스 (IIS) 및 ASP.NET 모두 보안 정책의 모든 인증 및 권한 부여 논리를 거쳐야 합니다.  
  
 사용 하는 사용자 지정 권한 부여 메서드를 통합 하 여 리소스를 볼 수 있는 권한이 있는지 확인할 수 있습니다 합니다 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> 응용 프로그램 호출 하기 전에 메서드를 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드.  
  
   
  
## Examples  
 다음 예제를 실행 합니다 `Login.aspx` 현재 디렉터리에 서버에서 페이지를 통해 페이지에서 출력을 받는 합니다 <xref:System.IO.StringWriter> 개체 `writer`합니다. 받은 HTML 스트림에 기록 `writer` http 출력 스트림으로.  
  
 [!code-csharp[Classic HttpServerUtility.Execute1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Execute1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Execute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Execute1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">현재 <see cref="T:System.Web.HttpContext" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="path" />에 지정된 처리기를 실행하는 동안 오류가 발생한 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="path" />가 가상 경로가 아닌 경우</exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, System.IO.TextWriter writer, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, class System.IO.TextWriter writer, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, writer As TextWriter, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, System::IO::TextWriter ^ writer, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Execute : string * System.IO.TextWriter * bool -&gt; unit" Usage="httpServerUtility.Execute (path, writer, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path">실행할 URL 경로입니다.</param>
        <param name="writer">출력을 캡처할 <see cref="T:System.IO.TextWriter" />입니다.</param>
        <param name="preserveForm"><see cref="P:System.Web.HttpRequest.QueryString" /> 및 <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 유지하려면 <see langword="true" />이고, <see cref="P:System.Web.HttpRequest.QueryString" /> 및 <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 지우려면 <see langword="false" />입니다.</param>
        <summary>현재 요청의 컨텍스트에서 지정된 가상 경로에 대한 처리기를 실행합니다. <see cref="T:System.IO.TextWriter" />는 페이지에서 출력을 캡처하며 부울 매개 변수는 <see cref="P:System.Web.HttpRequest.QueryString" /> 및 <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 지울지 여부를 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드는 지정 된 가상 경로의 실행이 완료 된 후 원래 요청의 실행을 계속 합니다. <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드는 무조건 실행 다른 처리기에 전달 합니다.  
  
 ASP.NET에서 현재 사용자에서 제공 하는 리소스를 볼 수 있는 권한이 있는지 확인 하지 않습니다는 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드. ASP.NET 인증 및 권한 부여 논리가 원래 리소스 처리기가 호출 되기 전에 실행을 ASP.NET에 나타난 처리기를 직접 호출을 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드 및 인증 및 권한 부여 논리 새 다시 실행 하지 않습니다 리소스입니다. 응용 프로그램의 보안 정책 리소스에 액세스할 수 있는 적절 한 권한을 클라이언트에 필요한 경우 응용 프로그램 가지도록 하거나 사용자 지정 액세스 제어 메커니즘을 제공 해야 합니다.  
  
 사용 하 여 다시 인증을 할 수 있습니다 합니다 <xref:System.Web.HttpResponse.Redirect%2A> 메서드 대신는 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드. <xref:System.Web.HttpResponse.Redirect%2A> 브라우저는 새 리소스를 요청 하는 클라이언트 쪽 리디렉션을 수행 합니다. 이 리디렉션 시스템으로 들어가는 새 요청을 이기 때문에 인터넷 정보 서비스 (IIS) 및 ASP.NET 모두 보안 정책의 모든 인증 및 권한 부여 논리를 거쳐야 합니다.  
  
 사용 하는 사용자 지정 권한 부여 메서드를 통합 하 여 리소스를 볼 수 있는 권한이 있는지 확인할 수 있습니다 합니다 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> 응용 프로그램 호출 하기 전에 메서드를 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드.  
  
   
  
## Examples  
 다음 예제를 실행 합니다 `Login.aspx` 현재 디렉터리에 서버에서 페이지를 통해 페이지에서 출력을 받는 합니다 <xref:System.IO.StringWriter> 개체 `writer`합니다. 받은 HTML 스트림에 기록 `writer` http 출력 스트림으로. 콘텐츠를 <xref:System.Web.HttpRequest.Form%2A> 및 <xref:System.Web.HttpRequest.QueryString%2A> 컬렉션 유지 됩니다.  
  
 [!code-csharp[HttpServerUtility.Execute02#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpServerUtility.Execute02/CS/httpserverutility.execute02_cs.aspx#1)]
 [!code-vb[HttpServerUtility.Execute02#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpServerUtility.Execute02/VB/httpserverutility.execute02_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">현재 <see cref="T:System.Web.HttpContext" />가 Null 참조(Visual Basic에서는 <see langword="Nothing" />)인 경우  
  
또는 
 <paramref name="path" />가 마침표(.)로 끝나는 경우  
  
또는 
<paramref name="path" />에 지정된 처리기를 실행하는 동안 오류가 발생한 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" />가 가상 경로가 아닌 경우</exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (System.Web.IHttpHandler handler, System.IO.TextWriter writer, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(class System.Web.IHttpHandler handler, class System.IO.TextWriter writer, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (handler As IHttpHandler, writer As TextWriter, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Web::IHttpHandler ^ handler, System::IO::TextWriter ^ writer, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Execute : System.Web.IHttpHandler * System.IO.TextWriter * bool -&gt; unit" Usage="httpServerUtility.Execute (handler, writer, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Web.IHttpHandler" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler">현재 요청을 전송할 <see cref="T:System.Web.IHttpHandler" />를 구현하는 HTTP 처리기입니다.</param>
        <param name="writer">출력을 캡처할 <see cref="T:System.IO.TextWriter" />입니다.</param>
        <param name="preserveForm"><see cref="P:System.Web.HttpRequest.QueryString" /> 및 <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 유지하려면 <see langword="true" />이고, <see cref="P:System.Web.HttpRequest.QueryString" /> 및 <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 지우려면 <see langword="false" />입니다.</param>
        <summary>현재 요청의 컨텍스트에서 지정된 가상 경로에 대한 처리기를 실행합니다. <see cref="T:System.IO.TextWriter" />는 실행된 처리기에서 출력을 캡처하며 부울 매개 변수는 <see cref="P:System.Web.HttpRequest.QueryString" /> 및 <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 지울지 여부를 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cls는 공용 언어 사양 ()는 모든 언어로 HTTP 요청의 특정 한 미리 정의 된 형식을 처리 하려면 사용자 지정 HTTP 처리기를 작성할 수 있습니다. 기존 ASP (라고도: 클래식 ASP) 페이지 또는 ASP.NET 페이지 대신 HTTP 처리기 클래스에 정의 된 실행 코드에서 이러한 특정 요청에 응답 합니다. 다르지만 유사한 기능을 제공 하 고 HTTP 처리기 저수준 요청 및 응답 서비스 웹 서버의 인터넷 정보 서비스 (IIS)를 실행 하는 상호 작용할 수 있도록 더 간단한 프로그래밍 모델을 사용 하면서 ISAPI 확장 합니다.  
  
 ASP.NET에서 현재 사용자에서 전달 되는 리소스를 볼 수 있는 권한이 있는지 확인 하지 않습니다는 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드. ASP.NET 인증 및 권한 부여 논리가 원래 리소스 처리기가 호출 되기 전에 실행을 ASP.NET으로 표시 되는 처리기를 직접 호출을 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드 인증 및 권한 부여 논리를 다시 실행 하지 않습니다 하 고는 새 리소스입니다. 응용 프로그램에 대 한 보안 정책 리소스에 액세스할 수 있는 적절 한 권한을 클라이언트에 필요한 경우 응용 프로그램 가지도록 하거나 사용자 지정 액세스 제어 메커니즘을 제공 해야 합니다.  
  
 사용 하 여 다시 인증을 할 수 있습니다 합니다 <xref:System.Web.HttpResponse.Redirect%2A> 메서드 대신는 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드. <xref:System.Web.HttpResponse.Redirect%2A> 브라우저는 새 리소스를 요청 하는 클라이언트 쪽 리디렉션을 수행 합니다. 이 리디렉션 시스템으로 들어가는 새 요청을 이기 때문에 IIS 및 ASP.NET 모두 보안 정책의 모든 인증 및 권한 부여 논리를 거쳐야 합니다.  
  
 사용 하는 사용자 지정 권한 부여 메서드를 통합 하 여 리소스를 볼 수 있는 권한이 있는지 확인할 수 있습니다 합니다 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> 응용 프로그램 호출 하기 전에 메서드를 <xref:System.Web.HttpServerUtility.Execute%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><paramref name="handler" />에 지정된 처리기를 실행하는 동안 오류가 발생한 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="handler" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="GetLastError">
      <MemberSignature Language="C#" Value="public Exception GetLastError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Exception GetLastError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.GetLastError" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLastError () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetLastError();" />
      <MemberSignature Language="F#" Value="member this.GetLastError : unit -&gt; Exception" Usage="httpServerUtility.GetLastError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이전 예외를 반환합니다.</summary>
        <returns>이전에 throw된 예외입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 HTTP 출력 스트림에 응용 프로그램의 마지막 오류에 대 한 설명을 출력 합니다. 오류가 발생 하는 경우에 "오류 없음"을 인쇄 합니다.  
  
 [!code-csharp[Classic HttpServerUtility.GetLastError Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.GetLastError Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.GetLastError Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.GetLastError Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpServerUtility.ClearError" />
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlDecode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>잘못된 HTML 문자를 제거하기 위해 인코딩된 문자열을 디코딩합니다.  
  
웹 애플리케이션 외부의 값을 인코딩 또는 디코딩하려면 <see cref="T:System.Net.WebUtility" /> 클래스를 사용합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public string HtmlDecode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string HtmlDecode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function HtmlDecode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ HtmlDecode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.HtmlDecode : string -&gt; string" Usage="httpServerUtility.HtmlDecode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">디코딩할 HTML 문자열입니다.</param>
        <summary>HTML로 인코딩된 문자열을 디코딩하여 디코딩된 문자열을 반환합니다.</summary>
        <returns>디코딩된 텍스트입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 인코딩을 사용 하면 텍스트 HTML로 브라우저에서 해석 되지 않는 브라우저에서 올바르게 표시 하 합니다. 예를 들어, 보다 작음 기호를 포함 하는 텍스트 문자열 (\<) 이상 기호 (>), 보다 브라우저는 HTML 태그의 닫는 괄호 또는 여 이러한 문자를 해석 합니다. 문자를 HTML로 인코딩된 경우 문자열로 변환 됩니다 `&lt;` 및 `&gt;`, 기호 및 보다 보다 작음 기호 올바르게 표시 하려면 브라우저에 이르게 합니다. <xref:System.Web.HttpServerUtility.HtmlDecode%2A> 서버에 전송 된 텍스트를 디코딩합니다.  
  
 이 방법은 편리 하 게 액세스를 <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> ASP.NET 응용 프로그램에서 런타임 시 메서드. 이 메서드는 내부적으로 <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> 디코딩할 문자열입니다.  
  
 ASP.NET 웹 페이지에 대 한 코드 숨김 파일에서의 인스턴스에 액세스 합니다 <xref:System.Web.HttpServerUtility> 를 통해 클래스는 `Server` 속성. 코드 숨김 파일에 없는 클래스에서 사용 하 여 `HttpContext.Current.Server` 의 인스턴스에 액세스 하는 <xref:System.Web.HttpServerUtility> 클래스입니다.  
  
 웹 응용 프로그램을 외부에서 사용할는 <xref:System.Net.WebUtility> 인코딩 또는 디코딩하려면 값 클래스입니다.  
  
   
  
## Examples  
 함수를 포함 하는 다음 예제에서는 `LoadDecodedFile`에 파일에서 데이터를 디코딩하고을 하나의 문자열로 복사 합니다.  
  
 [!code-aspx-csharp[Classic HttpServerUtility.HtmlDecode Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HttpServerUtility.HtmlDecode Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public void HtmlDecode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HtmlDecode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HtmlDecode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void HtmlDecode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.HtmlDecode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">디코딩할 HTML 문자열입니다.</param>
        <param name="output">디코딩된 문자열을 포함하는 <see cref="T:System.IO.TextWriter" /> 출력 스트림입니다.</param>
        <summary>HTML로 인코딩된 문자열을 디코딩하고 그 결과 출력을 <see cref="T:System.IO.TextWriter" /> 출력 스트림에 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 인코딩을 사용 하면 텍스트 HTML로 브라우저에서 해석 되지 않는 브라우저에서 올바르게 표시 하 합니다. 예를 들어, 보다 작음 기호를 포함 하는 텍스트 문자열 (\<) 이상 기호 (>), 보다 브라우저는 HTML 태그의 닫는 괄호 또는 여 이러한 문자를 해석 합니다. 문자를 HTML로 인코딩된 경우 문자열로 변환 됩니다 `&lt;` 및 `&gt;`, 기호 및 보다 보다 작음 기호 올바르게 표시 하려면 브라우저에 이르게 합니다.  
  
 <xref:System.Web.HttpServerUtility.HtmlDecode%2A> 서버에 전송 된 텍스트를 디코딩합니다.  
  
 <xref:System.Web.HttpServerUtility.HtmlDecode%2A> 편리 하 게 액세스 되는 <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> ASP.NET 응용 프로그램에서 런타임에 메서드. 내부적으로 <xref:System.Web.HttpServerUtility.HtmlDecode%2A> 사용 하 여 <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> 디코딩할 문자열입니다.  
  
 웹 애플리케이션 외부의 값을 인코딩 또는 디코딩하려면 <xref:System.Net.WebUtility> 클래스를 사용합니다.  
  
   
  
## Examples  
 다음 예제에서는 된 전송을 위해 HTML로 인코딩된 HTTP를 통해 문자열로 디코딩합니다. 라는 제공된 된 문자열을 디코딩합니다 `EncodedString` 텍스트를 포함 하는 "이를 &lt;테스트 문자열&gt;.", 라는 문자열에 복사 `DecodedString` 으로 "이것이 \<테스트 문자열 >."입니다.  
  
 [!code-csharp[Classic HttpServerUtility.HtmlDecode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.HtmlDecode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>브라우저에 표시되는 문자열을 인코딩합니다.  
  
웹 애플리케이션 외부의 값을 인코딩 또는 디코딩하려면 <see cref="T:System.Net.WebUtility" /> 클래스를 사용합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public string HtmlEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string HtmlEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function HtmlEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ HtmlEncode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.HtmlEncode : string -&gt; string" Usage="httpServerUtility.HtmlEncode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">인코딩할 텍스트 문자열입니다.</param>
        <summary>문자열을 HTML로 인코딩하고 인코딩된 문자열을 반환합니다.</summary>
        <returns>HTML로 인코딩된 텍스트입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML 인코딩을 사용 하면 텍스트 HTML로 브라우저에서 해석 되지 않는 브라우저에서 올바르게 표시 하 합니다. 예를 들어, 보다 작음 기호를 포함 하는 텍스트 문자열 (\<) 이상 기호 (>), 보다 브라우저는 HTML 태그의 닫는 괄호 또는 여 이러한 문자를 해석 합니다. 문자를 HTML로 인코딩된 경우 문자열로 변환 됩니다 `&lt;` 및 `&gt;`, 기호 및 보다 보다 작음 기호 올바르게 표시 하려면 브라우저에 이르게 합니다.  
  
 이 방법은 편리 하 게 액세스를 <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> ASP.NET 응용 프로그램에서 런타임 시 메서드. 이 메서드는 내부적으로 <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> 문자열을 인코딩합니다.  
  
 ASP.NET 웹 페이지에 대 한 코드 숨김 파일에서의 인스턴스에 액세스 합니다 <xref:System.Web.HttpServerUtility> 를 통해 클래스는 `Server` 속성. 코드 숨김 파일에 없는 클래스에서 사용 하 여 `HttpContext.Current.Server` 의 인스턴스에 액세스 하는 <xref:System.Web.HttpServerUtility> 클래스입니다.  
  
 웹 응용 프로그램을 외부에서 사용할는 <xref:System.Net.WebUtility> 인코딩 또는 디코딩하려면 값 클래스입니다.  
  
   
  
## Examples  
 다음 예제에서는 어떻게 값을 HTML로 인코딩하는 잠재적으로 코드 안전 하지 않은 코드를 보여 줍니다. 코드를 웹 페이지에 대 한 코드 숨김 파일에 상주합니다. 인코딩할 값 예제를 단순화 하 고 표시 값의 형식을 HTML로 인코딩하는 것이 수에이 예제에서 하드 코딩 되어 있습니다. 일반적으로 HTML 인코딩해야 사용자 또는 요청에서 수신 하는 값입니다. `Result` 참조는 `Literal` 제어 합니다.  
  
 [!code-csharp[System.Web.HttpServerUtility.HtmlEncode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.HtmlEncode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/vb/default.aspx.vb#1)]  
  
 표시 됩니다 점을 제외 하 고 다음 예제는 이전 예제와 비슷한 방법을 HTML 인코딩하려면 클래스 내에서 값에에서 없는 코드 숨김 파일입니다.  
  
 [!code-csharp[System.Web.HttpServerUtility.HtmlEncode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.HtmlEncode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public void HtmlEncode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HtmlEncode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HtmlEncode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void HtmlEncode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.HtmlEncode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">인코딩할 문자열입니다.</param>
        <param name="output">인코딩된 문자열을 포함하는 <see cref="T:System.IO.TextWriter" /> 출력 스트림입니다.</param>
        <summary>문자열을 HTML로 인코딩하고 그 결과 출력을 <see cref="T:System.IO.TextWriter" /> 출력 스트림에 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML로 인코딩하면 텍스트 HTML로 브라우저에서 해석 되지 않는 브라우저에서 올바르게 표시 됩니다. 예를 들어, 보다 작음 기호를 포함 하는 텍스트 문자열 (\<) 이상 기호 (>), 보다 브라우저는 HTML 태그의 닫는 괄호 또는 여 이러한 문자를 해석 합니다. 이러한 두 문자가 HTML 인코딩이 `&lt;` 및 `&gt;`각각 기호 이상 보다 작음 기호 올바르게 표시 하려면 브라우저에 이르게 합니다.  
  
 <xref:System.Web.HttpServerUtility.HtmlEncode%2A> 편리 하 게 액세스 되는 <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> ASP.NET 응용 프로그램에서 런타임에 메서드. 내부적으로 <xref:System.Web.HttpServerUtility.HtmlEncode%2A> 사용 하 여 <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> 문자열을 인코딩합니다.  
  
 웹 애플리케이션 외부의 값을 인코딩 또는 디코딩하려면 <xref:System.Net.WebUtility> 클래스를 사용합니다.  
  
   
  
## Examples  
 다음 예제에서는 HTTP에서 전송을 위해 문자열로 인코딩합니다. 라는 문자열로 인코딩하도록 `TestString`, 텍스트를 포함 하는 "이를 \<테스트 문자열 >.", 라는 문자열에 복사 `EncodedString` 으로 "이것이 &lt;테스트 문자열&gt;."입니다.  
  
 [!code-csharp[Classic HttpServerUtility.HtmlEncode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlEncode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.HtmlEncode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlEncode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpServerUtility.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string" Usage="System.Web.HttpServerUtility.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>서버의 컴퓨터 이름을 가져옵니다.</summary>
        <value>로컬 컴퓨터의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 문자열 변수로 서버의 컴퓨터 이름을 저장합니다.  
  
 [!code-csharp[Classic HttpServerUtility.MachineName Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.MachineName Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.MachineName Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.MachineName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">컴퓨터 이름을 찾을 수 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="MapPath">
      <MemberSignature Language="C#" Value="public string MapPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string MapPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.MapPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MapPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ MapPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.MapPath : string -&gt; string" Usage="httpServerUtility.MapPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">웹 애플리케이션의 가상 경로입니다.</param>
        <summary>지정된 가상 경로에 해당하는 실제 파일 경로를 반환합니다.</summary>
        <returns><paramref name="path" />에 해당하는 웹 서버의 실제 파일 경로입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하는 경우 `path` 됩니다 `null`, <xref:System.Web.HttpServerUtility.MapPath%2A> 메서드 경로 대 한 현재 요청을 포함 하는 디렉터리의 전체 실제 경로 반환 합니다. 상대 경로 기존 파일 또는 폴더 값을 반환 하려면이 메서드를 지정할 필요가 없습니다. 그러나 웹 응용 프로그램 외부에 경로 지정할 수 없습니다.  
  
> [!IMPORTANT]
>  <xref:System.Web.HttpServerUtility.MapPath%2A> 메서드는 호스팅 환경에 대 한 중요 한 정보를 포함 될 수 있습니다. 반환 값은 사용자에 게 표시 되지 해야 합니다.  
  
 에 있는 웹 응용 프로그램을 `C:\ExampleSites\TestMapPath` 다음 결과가 반환 됩니다.  
  
|요청|`path`|반환 값|  
|------------------|------------|--------------------|  
|RootLevelPage.aspx|`null`|C:\ExampleSites\TestMapPath|  
|RootLevelPage.aspx|"/DownOneLevel/DownLevelPage.aspx"|C:\ExampleSites\TestMapPath\DownOneLevel\DownLevelPage.aspx|  
|RootLevelPage.aspx|"/NotRealFolder"|C:\ExampleSites\TestMapPath\NotRealFolder|  
|RootLevelPage.aspx|"../OutsideApplication"|<xref:System.Web.HttpException>|  
|/DownOneLevel/DownLevelPage.aspx|`null`|C:\ExampleSites\TestMapPath\DownOneLevel|  
|/DownOneLevel/DownLevelPage.aspx|"../RootLevelPage.aspx"|C:\ExampleSites\TestMapPath\RootLevelPage.aspx|  
  
   
  
## Examples  
 다음 예제에서는 상대 가상 경로의 실제 파일을 검색 하는 방법을 보여 줍니다. 코드를 웹 페이지에 대 한 코드 숨김 파일에 있고 기본 활용 `Server` 개체입니다.  
  
 [!code-csharp[System.Web.HttpServerUtility.MapPath#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.mappath/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.MapPath#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.mappath/vb/default.aspx.vb#1)]  
  
 다음 예제에서는 코드 숨김 파일에 없는 클래스 내에서 실제 경로 검색 하는 방법을 보여 줍니다 점을 제외 하 고 이전 예제와 비슷합니다.  
  
 [!code-csharp[System.Web.HttpServerUtility.MapPath#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.mappath/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.MapPath#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.mappath/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">현재 <see cref="T:System.Web.HttpContext" />이 <see langword="null" />인 경우
        
또는 
<paramref name="path" />은 실제 경로이지만 가상 경로가 필요합니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="ScriptTimeout">
      <MemberSignature Language="C#" Value="public int ScriptTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScriptTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpServerUtility.ScriptTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ScriptTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ScriptTimeout : int with get, set" Usage="System.Web.HttpServerUtility.ScriptTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요청 제한 시간 값(초)을 가져오거나 설정합니다.</summary>
        <value>요청에 대한 제한 시간 값 설정입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Web.HttpServerUtility.ScriptTimeout%2A> 속성을 설정 하 여 Web.config 파일에서 설정할 수 있습니다는 `executionTimeout` 요소의 특성입니다. 프로그래밍 방식으로 제한 시간 설정의 <xref:System.Web.HttpServerUtility.ScriptTimeout%2A> 속성 Web.config 설정 보다 우선 합니다.  
  
> [!NOTE]
>  설정 하는 경우는 `debug` 요소의 특성 `true` 의 값을 Web.config 파일에서 <xref:System.Web.HttpServerUtility.ScriptTimeout%2A> 무시 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 60 초로 요청 제한 시간을 설정합니다.  
  
 [!code-csharp[Classic HttpServerUtility.ScriptTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.ScriptTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.ScriptTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.ScriptTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">현재 <see cref="T:System.Web.HttpContext" />이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">제한 시간이 <see langword="null" />이거나 설정할 수 없는 경우</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transfer">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>현재 페이지의 실행을 종료하고 현재 요청에 대한 새 페이지의 실행을 시작합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Transfer : string -&gt; unit" Usage="httpServerUtility.Transfer path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">서버에서 실행할 새 페이지의 URL 경로입니다.</param>
        <summary>현재 요청에 대해 현재 페이지의 실행을 종료하고 해당 페이지의 지정된 URL 경로를 사용하여 새 페이지의 실행을 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 전송 페이지에는 다른.aspx 페이지가 있어야 합니다. 예를 들어.asp 또는.asmx 페이지로 전송 올바르지 않습니다. 합니다 <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드 유지 합니다 <xref:System.Web.HttpRequest.QueryString%2A> 및 <xref:System.Web.HttpRequest.Form%2A> 컬렉션입니다.  
  
 <xref:System.Web.HttpServerUtility.Transfer%2A> 호출 <xref:System.Web.HttpResponse.End%2A>을 throw 하는 <xref:System.Threading.ThreadAbortException> 완료 되 면 예외입니다.  
  
 ASP.NET에서 현재 사용자에서 제공 하는 리소스를 볼 수 있는 권한이 있는지 확인 하지 않습니다는 <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드. ASP.NET 인증 및 권한 부여 논리가 원래 리소스 처리기가 호출 되기 전에 실행을 ASP.NET에 나타난 처리기를 직접 호출을 <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드 및 인증 및 권한 부여 논리 새 다시 실행 하지 않습니다 리소스입니다. 응용 프로그램의 보안 정책 리소스에 액세스할 수 있는 적절 한 권한을 클라이언트에 필요한 경우 응용 프로그램 가지도록 하거나 사용자 지정 액세스 제어 메커니즘을 제공 해야 합니다.  
  
 사용 하 여 다시 인증을 할 수 있습니다 합니다 <xref:System.Web.HttpResponse.Redirect%2A> 메서드 대신는 <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드. <xref:System.Web.HttpResponse.Redirect%2A> 메서드는 브라우저는 새 리소스를 요청 하는 클라이언트 쪽 리디렉션을 수행 합니다. 이 리디렉션 시스템으로 들어가는 새 요청을 이기 때문에 인터넷 정보 서비스 (IIS) 및 ASP.NET 모두 보안 정책의 모든 인증 및 권한 부여 논리를 거쳐야 합니다.  
  
 사용 하는 사용자 지정 권한 부여 메서드를 통합 하 여 리소스를 볼 수 있는 권한이 있는지 확인할 수 있습니다 합니다 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> 응용 프로그램 호출 하기 전에 메서드를 <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::String ^ path, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Transfer : string * bool -&gt; unit" Usage="httpServerUtility.Transfer (path, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">서버에서 실행할 새 페이지의 URL 경로입니다.</param>
        <param name="preserveForm"><see cref="P:System.Web.HttpRequest.QueryString" /> 및 <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 유지하려면 <see langword="true" />이고, <see cref="P:System.Web.HttpRequest.QueryString" /> 및 <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 지우려면 <see langword="false" />입니다.</param>
        <summary>현재 페이지의 실행을 종료하고 해당 페이지의 지정된 URL 경로를 사용하여 새 페이지의 실행을 시작합니다. <see cref="P:System.Web.HttpRequest.QueryString" /> 및 <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 지울 것인지 여부를 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 전송 페이지에는 다른.aspx 페이지가 있어야 합니다. 예를 들어.asp 또는.asmx 페이지로 전송 올바르지 않습니다.  
  
 <xref:System.Web.HttpServerUtility.Transfer%2A> 호출 <xref:System.Web.HttpResponse.End%2A>을 throw 하는 <xref:System.Threading.ThreadAbortException> 완료 되 면 예외입니다.  
  
 설정 하는 경우는 `preserveForm` 매개 변수를 `true`, 대상 페이지를 사용 하 여 이전 페이지의 뷰 상태에 액세스할 수는 <xref:System.Web.UI.Page.PreviousPage%2A> 속성입니다.  
  
 보안상의 이유로 유지 해야 합니다 `enableViewStateMac` 특성이 설정 `true`합니다. ASP.NET에서 현재 사용자에서 제공 하는 리소스를 볼 수 있는 권한이 있는지 확인 하지 않습니다는 <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드. ASP.NET 인증 및 권한 부여 논리가 원래 리소스 처리기가 호출 되기 전에 실행을 ASP.NET에 나타난 처리기를 직접 호출을 <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드 및 인증 및 권한 부여 논리 새 다시 실행 하지 않습니다 리소스입니다. 응용 프로그램의 보안 정책 리소스에 액세스할 수 있는 적절 한 권한을 클라이언트에 필요한 경우 응용 프로그램 가지도록 하거나 사용자 지정 액세스 제어 메커니즘을 제공 해야 합니다.  
  
 사용 하 여 다시 인증을 할 수 있습니다 합니다 <xref:System.Web.HttpResponse.Redirect%2A> 메서드 대신는 <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드. <xref:System.Web.HttpResponse.Redirect%2A> 메서드는 브라우저는 새 리소스를 요청 하는 클라이언트 쪽 리디렉션을 수행 합니다. 이 리디렉션 시스템으로 들어가는 새 요청을 이기 때문에 인터넷 정보 서비스 (IIS) 및 ASP.NET 모두 보안 정책의 모든 인증 및 권한 부여 논리를 거쳐야 합니다.  
  
 사용 하는 사용자 지정 권한 부여 메서드를 통합 하 여 리소스를 볼 수 있는 권한이 있는지 확인할 수 있습니다 합니다 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> 응용 프로그램 호출 하기 전에 메서드를 <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드.  
  
   
  
## Examples  
 다음 예에서는 현재 페이지와 같은 디렉터리에 새 페이지를 실행 합니다.  
  
 [!code-csharp[Classic HttpServerUtility.Transfer Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Transfer Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Transfer Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Transfer Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">현재 페이지 요청이 콜백인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (System.Web.IHttpHandler handler, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(class System.Web.IHttpHandler handler, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.Web.IHttpHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (handler As IHttpHandler, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::Web::IHttpHandler ^ handler, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Transfer : System.Web.IHttpHandler * bool -&gt; unit" Usage="httpServerUtility.Transfer (handler, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Web.IHttpHandler" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler">현재 요청을 전송할 <see cref="T:System.Web.IHttpHandler" />를 구현하는 HTTP 처리기입니다.</param>
        <param name="preserveForm"><see cref="P:System.Web.HttpRequest.QueryString" /> 및 <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 유지하려면 <see langword="true" />이고, <see cref="P:System.Web.HttpRequest.QueryString" /> 및 <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 지우려면 <see langword="false" />입니다.</param>
        <summary>현재 페이지의 실행을 종료하고 <see cref="T:System.Web.IHttpHandler" /> 인터페이스를 구현하고 <see cref="P:System.Web.HttpRequest.QueryString" /> 및 <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 지울지 여부를 지정하는 사용자 지정 HTTP 처리기를 사용하여 새 요청의 실행을 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cls는 공용 언어 사양 ()는 모든 언어로 HTTP 요청의 특정 한 미리 정의 된 형식을 처리 하려면 사용자 지정 HTTP 처리기를 작성할 수 있습니다. 기존 ASP (라고도: 클래식 ASP) 페이지 또는 ASP.NET 페이지 대신 HTTP 처리기 클래스에 정의 된 실행 코드에서 이러한 특정 요청에 응답 합니다. 다르지만 유사한 기능을 제공 하 고 HTTP 처리기 저수준 요청 및 응답 서비스 웹 서버의 인터넷 정보 서비스 (IIS)를 실행 하는 상호 작용할 수 있도록 더 간단한 프로그래밍 모델을 사용 하면서 ISAPI 확장 합니다.  
  
 설정 하는 경우는 `preserveForm` 매개 변수를 `true`, 대상 페이지를 사용 하 여 이전 페이지의 뷰 상태에 액세스할 수는 <xref:System.Web.UI.Page.PreviousPage%2A> 속성입니다.  
  
 보안상의 이유로 유지 해야 합니다 `enableViewStateMac` 특성이 설정 `true`합니다. ASP.NET에서 현재 사용자에서 제공 하는 리소스를 볼 수 있는 권한이 있는지 확인 하지 않습니다는 <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드. ASP.NET에 나타난 처리기를 직접 호출 ASP.NET 인증 및 권한 부여 논리가 원래 리소스 처리기가 호출 되기 전에 실행을 <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드와 새 인증 및 권한 부여 논리를 다시 실행 하지 않습니다 리소스입니다. 응용 프로그램에 대 한 보안 정책 리소스에 액세스할 수 있는 적절 한 권한을 클라이언트에 필요한 경우 응용 프로그램 가지도록 하거나 사용자 지정 액세스 제어 메커니즘을 제공 해야 합니다.  
  
 사용 하 여 다시 인증을 할 수 있습니다 합니다 <xref:System.Web.HttpResponse.Redirect%2A> 메서드 대신는 <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드. <xref:System.Web.HttpResponse.Redirect%2A> 메서드는 브라우저는 새 리소스를 요청 하는 클라이언트 쪽 리디렉션을 수행 합니다. 이 리디렉션 시스템으로 들어가는 새 요청을 이기 때문에 IIS 및 ASP.NET 모두 보안 정책의 모든 인증 및 권한 부여 논리를 거쳐야 합니다.  
  
 사용 하는 사용자 지정 권한 부여 메서드를 통합 하 여 리소스를 볼 수 있는 권한이 있는지 확인할 수 있습니다 합니다 <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> 응용 프로그램 호출 하기 전에 메서드를 <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">현재 페이지 요청이 콜백인 경우</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransferRequest">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 URL의 비동기 실행을 수행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.TransferRequest%2A> .NET Framework 버전 3.5에서에서 도입 되었습니다. .NET Framework에 대 한 요약 정보를 참조 하세요 [버전 및 종속성](~/docs/framework/migration-guide/versions-and-dependencies.md)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string -&gt; unit" Usage="httpServerUtility.TransferRequest path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path">서버에서 실행할 새 페이지의 URL 경로입니다.</param>
        <summary>지정된 URL의 비동기 실행을 수행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드 오버 로드를 호출 합니다 <xref:System.Web.HttpServerUtility.TransferRequest%2A> 오버 로드를 `preserveForm` 매개 변수 설정 `false`, `method` 매개 변수 설정 `null`의 `headers` 매개 변수 설정 `null`, 및 `preserveUser` 매개 변수 설정 `true`합니다. 자세한 내용은의 "주의" 섹션을 참조 하세요. <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29> 오버 로드 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">요청에 [!INCLUDE[iisver](~/includes/iisver-md.md)]의 통합 파이프라인 모드가 필요한 경우</exception>
        <exception cref="T:System.Web.HttpException">요청을 처리하는 데 서버를 사용할 수 없는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 매개 변수가 잘못되었습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string * bool -&gt; unit" Usage="httpServerUtility.TransferRequest (path, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path">서버에서 실행할 새 페이지의 URL 경로입니다.</param>
        <param name="preserveForm"><see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 유지하려면 <see langword="true" />이고, <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 지우려면 <see langword="false" />입니다.</param>
        <summary>지정된 URL의 비동기 실행을 수행하고 쿼리 문자열 매개 변수를 유지합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 오버 로드를 호출 합니다 <xref:System.Web.HttpServerUtility.TransferRequest%2A> 오버 로드는 `preserveForm` 매개 변수에서 전달 된 값으로 설정 합니다 `method` 매개 변수 설정 `null`, `headers` 매개 변수 설정 `null`, 및 `preserveUser` 매개 변수 집합 `true`입니다. 자세한 내용은의 "주의" 섹션을 참조 하세요. <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>합니다.  
  
 <xref:System.Web.HttpServerUtility.TransferRequest%2A> .NET Framework 버전 3.5에서에서 도입 되었습니다.  자세한 내용은 [버전 및 종속성](~/docs/framework/migration-guide/versions-and-dependencies.md)을 참조하세요.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">요청에 [!INCLUDE[iisver](~/includes/iisver-md.md)]의 통합 파이프라인 모드가 필요한 경우</exception>
        <exception cref="T:System.Web.HttpException">요청을 처리하는 데 서버를 사용할 수 없는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 매개 변수가 잘못되었습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm, string method, class System.Collections.Specialized.NameValueCollection headers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean, method As String, headers As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ headers);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string * bool * string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="httpServerUtility.TransferRequest (path, preserveForm, method, headers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="headers" Type="System.Collections.Specialized.NameValueCollection" Index="3" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path">서버에서 실행할 새 페이지의 URL 경로입니다.</param>
        <param name="preserveForm"><see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 유지하려면 <see langword="true" />이고, <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 지우려면 <see langword="false" />입니다.</param>
        <param name="method">새 요청을 실행하는 데 사용할 HTTP 메서드입니다.</param>
        <param name="headers">새 요청에 대한 요청 헤더의 <see cref="T:System.Collections.Specialized.NameValueCollection" />입니다.</param>
        <summary>지정된 HTTP 메서드와 헤더를 사용하여 지정된 URL의 비동기 실행을 수행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 통합된 파이프라인 모드에서 실행 되는 경우이 메서드는 [!INCLUDE[iisver](~/includes/iisver-md.md)] 요청을 처리 한 리소스 종류에서 올바른 요청 컨텍스트를 사용 하 여 대상 요청을 실행 하는 동안 다른 전송 될 수 있도록 합니다. 예를 들어 사용할 수 있습니다는 <xref:System.Web.HttpServerUtility.TransferRequest%2A> XML 페이지 요청에 ASPX 페이지에 대 한 요청을 전송 하는 방법입니다.  
  
 <xref:System.Web.HttpServerUtility.TransferRequest%2A> 메서드는 다음 조건에 따라 지정된 된 URL의 비동기 자식 실행을 수행 합니다.  
  
-   경우는 `path` 쿼리 문자열을 지정 하는 매개 변수, 새 쿼리 문자열로 사용 됩니다. 쿼리 문자열이 포함 된 경우 요청의 쿼리 문자열 다시 사용 됩니다.  
  
-   경우는 `method` 사용, 매개 변수를 지정 합니다. 있으면 `null`, 원래 요청의 HTTP 메서드가 사용 됩니다.  
  
-   경우는 `preserveForm` 매개 변수는 `true`, 현재 엔터티 본문 요청의 대상 요청에 제공 됩니다. 이 폼 게시를 허용 하며 업로드를 전송할 수 있습니다.  
  
-   사용자 id는 원래 요청에 현재 설정 되어, id 새 요청에 전송 됩니다. 이 새 요청에 대 한 인증 결과 다시 사용 하도록 인증 된 요청만 허용 합니다. 사용자를 전송 하지 않으려면 사용자로 설정 `null` 전송 하기 전에 원래 요청에서.  
  
-   경우는 `headers` 매개 변수가 지정 된, 지정 된 헤더를 사용 하 여 새 요청이 실행 됩니다. 이 요청 헤더 및 쿠키 새 요청에 대 한 수정에 사용할 수 있습니다 하거나 원래 요청이 수신 위치를 지정 하는 특수 헤더를 추가 합니다.  
  
     이 메서드를 호출 합니다 <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%2CSystem.Boolean%29> 메서드 오버 로드는 `preserveUser` 매개 변수 설정 `true`합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">요청에 통합 모드로 실행되는 [!INCLUDE[iisver](~/includes/iisver-md.md)]이 필요한 경우</exception>
        <exception cref="T:System.Web.HttpException">요청을 처리하는 데 서버를 사용할 수 없는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 매개 변수가 잘못되었습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers, bool preserveUser);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm, string method, class System.Collections.Specialized.NameValueCollection headers, bool preserveUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean, method As String, headers As NameValueCollection, preserveUser As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ headers, bool preserveUser);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string * bool * string * System.Collections.Specialized.NameValueCollection * bool -&gt; unit" Usage="httpServerUtility.TransferRequest (path, preserveForm, method, headers, preserveUser)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="headers" Type="System.Collections.Specialized.NameValueCollection" Index="3" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveUser" Type="System.Boolean" Index="4" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path">경로입니다.</param>
        <param name="preserveForm"><see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 유지하려면 <see langword="true" />이고, <see cref="P:System.Web.HttpRequest.Form" /> 컬렉션을 지우려면 <see langword="false" />입니다.</param>
        <param name="method">새 요청에서 사용할 HTTP 메서드입니다.</param>
        <param name="headers">새 요청의 요청 헤더를 포함하는 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 개체입니다.</param>
        <param name="preserveUser">사용자 ID를 보존하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드의 다른 메서드 오버로드는 이 매개 변수가 <see langword="true" />로 설정된 이 오버로드를 호출합니다.</param>
        <summary>지정된 HTTP 메서드, 헤더 및 경로를 사용하여 지정된 URL의 비동기 실행을 수행하며 폼 값과 사용자 ID를 선택적으로 유지합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 자세한 내용은의 "주의" 섹션을 참조 하세요. <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">요청에 [!INCLUDE[iisver](~/includes/iisver-md.md)]의 통합 파이프라인 모드가 필요한 경우</exception>
        <exception cref="T:System.Web.HttpException">요청을 처리하는 데 서버를 사용할 수 없는 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 매개 변수가 잘못되었습니다.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlDecode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>URL에서 HTTP 전송을 위해 인코딩된 후 서버로 전송된 문자열을 디코딩합니다.  
  
웹 애플리케이션 외부의 값을 인코딩 또는 디코딩하려면 <see cref="T:System.Net.WebUtility" /> 클래스를 사용합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlDecode">
      <MemberSignature Language="C#" Value="public string UrlDecode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlDecode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlDecode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlDecode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.UrlDecode : string -&gt; string" Usage="httpServerUtility.UrlDecode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">디코딩할 텍스트 문자열입니다.</param>
        <summary>문자열을 URL로 디코딩하고 디코딩된 문자열을 반환합니다.</summary>
        <returns>디코딩된 텍스트입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 인코딩은 모든 브라우저에서 URL 문자열의에서 텍스트를 올바르게 전달할 확인 합니다. 질문 등의 문자 표시 (?), 앰퍼샌드 (&), 슬래시 (/) 표시 및 공간 잘리거나 일부 브라우저 될 수 있습니다. 결과적으로, 이러한 문자 인코딩해야 `<a>` 태그 또는 쿼리에서 요청 문자열의 브라우저에서 다시 보낼 수 있도록 문자열입니다.  
  
 이 방법은 편리 하 게 액세스를 <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> ASP.NET 응용 프로그램에서 런타임 시 메서드. 이 메서드는 내부적으로 <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> 디코딩할 문자열입니다.  
  
 ASP.NET 웹 페이지에 대 한 코드 숨김 파일에서의 인스턴스에 액세스 합니다 <xref:System.Web.HttpServerUtility> 를 통해 클래스는 `Server` 속성. 코드 숨김 파일에 없는 클래스에서 사용 하 여 `HttpContext.Current.Server` 의 인스턴스에 액세스 하는 <xref:System.Web.HttpServerUtility> 클래스입니다.  
  
 웹 응용 프로그램을 외부에서 사용할는 <xref:System.Net.WebUtility> 인코딩 또는 디코딩하려면 값 클래스입니다.  
  
   
  
## Examples  
 다음 예와 어떻게 값 URL 디코딩을 수행 하는 쿼리 문자열에서 검색 됩니다. 코드를 웹 페이지에 대 한 코드 숨김 파일에 상주합니다. `ReturnPage` 참조는 `HyperLink` 제어 합니다.  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlDecode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.UrlDecode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/vb/default.aspx.vb#1)]  
  
 표시 점을 제외 하 고 다음 예제는 이전 예제와 비슷한 방법을 URL 디코딩할 클래스 내에서 값에에서 없는 코드 숨김 파일입니다.  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlDecode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.UrlDecode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlDecode">
      <MemberSignature Language="C#" Value="public void UrlDecode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UrlDecode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UrlDecode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UrlDecode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.UrlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.UrlDecode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">디코딩할 HTML 문자열입니다.</param>
        <param name="output">디코딩된 문자열을 포함하는 <see cref="T:System.IO.TextWriter" /> 출력 스트림입니다.</param>
        <summary>URL에서 받은 HTML 문자열을 디코딩하고 그 결과 출력을 <see cref="T:System.IO.TextWriter" /> 출력 스트림에 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 인코딩은 모든 브라우저에서 URL 문자열의에서 텍스트를 올바르게 전달할 확인 합니다. 질문 등의 문자 표시 (?), 앰퍼샌드 (&), 슬래시 (/) 표시 및 공간 잘리거나 일부 브라우저 될 수 있습니다. 결과적으로, 이러한 문자 인코딩해야 `<a>` 태그 또는 쿼리에서 요청 문자열의 브라우저에서 다시 보낼 수 있도록 문자열입니다.  
  
 <xref:System.Web.HttpServerUtility.UrlDecode%2A> 편리 하 게 액세스 되는 <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> ASP.NET 응용 프로그램에서 런타임에 메서드. 내부적으로 <xref:System.Web.HttpServerUtility.UrlDecode%2A> 사용 하 여 <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> 디코딩할 문자열입니다.  
  
 웹 애플리케이션 외부의 값을 인코딩 또는 디코딩하려면 <xref:System.Net.WebUtility> 클래스를 사용합니다.  
  
   
  
## Examples  
 다음 예제에서는 명명 된 문자열을 디코딩합니다 `EncodedString` (URL에서 받은) 이라는 문자열로 `DecodedString`합니다.  
  
 [!code-csharp[Classic HttpServerUtility.UrlDecode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.UrlDecode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.UrlDecode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.UrlDecode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>URL을 통해 웹 서버에서 클라이언트로 신뢰할 수 있는 HTTP 전송을 하기 위해 문자열을 인코딩합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.UrlEncode%2A> 편리 하 게 액세스 되는 <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> ASP.NET 응용 프로그램에서 런타임에 메서드. 내부적으로 <xref:System.Web.HttpServerUtility.UrlEncode%2A> 사용 하 여 <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> 문자열을 인코딩합니다.  
  
 웹 애플리케이션 외부의 값을 인코딩 또는 디코딩하려면 <xref:System.Net.WebUtility> 클래스를 사용합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public string UrlEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlEncode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.UrlEncode : string -&gt; string" Usage="httpServerUtility.UrlEncode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">URL로 인코딩할 텍스트입니다.</param>
        <summary>문자열을 URL로 인코딩하고 인코딩된 문자열을 반환합니다.</summary>
        <returns>URL로 인코딩된 텍스트입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 인코딩은 모든 브라우저에서 URL 문자열의에서 텍스트를 올바르게 전달할 확인 합니다. 질문 등의 문자 표시 (?), 앰퍼샌드 (&), 슬래시 (/) 표시 및 공간 잘리거나 일부 브라우저 될 수 있습니다. 결과적으로, 이러한 문자 인코딩해야 `<a>` 태그 또는 쿼리에서 요청 문자열의 브라우저에서 다시 보낼 수 있도록 문자열입니다.  
  
 이 방법은 편리 하 게 액세스를 <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> ASP.NET 응용 프로그램에서 런타임 시 메서드. 이 메서드는 내부적으로 <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> 문자열을 인코딩합니다.  
  
 ASP.NET 웹 페이지에 대 한 코드 숨김 파일에서의 인스턴스에 액세스 합니다 <xref:System.Web.HttpServerUtility> 를 통해 클래스는 `Server` 속성. 코드 숨김 파일에 없는 클래스에서 사용 하 여 `HttpContext.Current.Server` 의 인스턴스에 액세스 하는 <xref:System.Web.HttpServerUtility> 클래스입니다.  
  
 웹 응용 프로그램을 외부에서 사용할는 <xref:System.Net.WebUtility> 인코딩 또는 디코딩하려면 값 클래스입니다.  
  
   
  
## Examples  
 다음 예와 어떻게 URL로 인코딩해야 값으로 사용 되는 하이퍼링크의 쿼리 문자열 값입니다. 코드를 웹 페이지에 대 한 코드 숨김 파일에 상주합니다. 인코딩할 값 예제를 단순화 하 고 URL로 인코딩할 수 값의 형식을 표시에이 예제에서 하드 코딩 되어 있습니다. 일반적으로 URL로 인코딩한 사용자 또는 요청에서 수신 하는 값입니다. `NextPage` 참조는 `HyperLink` 제어 합니다.  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlEncode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.UrlEncode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/vb/default.aspx.vb#1)]  
  
 표시 됩니다 점을 제외 하 고 다음 예제는 이전 예제와 비슷한 방법을 URL로 인코딩해야 클래스 내에서 값에에서 없는 코드 숨김 파일입니다.  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlEncode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.UrlEncode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public void UrlEncode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UrlEncode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UrlEncode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UrlEncode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.UrlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.UrlEncode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s">인코딩할 텍스트 문자열입니다.</param>
        <param name="output">인코딩된 문자열을 포함하는 <see cref="T:System.IO.TextWriter" /> 출력 스트림입니다.</param>
        <summary>문자열을 URL로 인코딩하고 그 결과 출력을 <see cref="T:System.IO.TextWriter" /> 출력 스트림에 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 인코딩은 모든 브라우저에서 URL 문자열의에서 텍스트를 올바르게 전달할 확인 합니다. 질문 등의 문자 표시 (?), 앰퍼샌드 (&), 슬래시 (/) 표시 및 공간 잘리거나 일부 브라우저 될 수 있습니다. 결과적으로, 이러한 문자 인코딩해야 `<a>` 태그 또는 쿼리에서 요청 문자열의 브라우저에서 다시 보낼 수 있도록 문자열입니다.  
  
 <xref:System.Web.HttpServerUtility.UrlEncode%2A> 편리 하 게 액세스 되는 <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> ASP.NET 응용 프로그램에서 런타임에 메서드. 내부적으로 <xref:System.Web.HttpServerUtility.UrlEncode%2A> 사용 하 여 <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> 문자열을 인코딩합니다.  
  
 웹 애플리케이션 외부의 값을 인코딩 또는 디코딩하려면 <xref:System.Net.WebUtility> 클래스를 사용합니다.  
  
   
  
## Examples  
 다음 예제에서는 HTTP에서 전송을 위해 문자열로 인코딩합니다. 라는 문자열로 인코딩하도록 `TestString`, 텍스트를 포함 하는 "이를 \<테스트 문자열 >.", 라는 문자열에 복사 `EncodedString` 으로 "이 +는 + a + %3cTest + 문자열 %3e."입니다.  
  
 [!code-csharp[Classic HttpServerUtility.UrlEncode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.UrlEncode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.UrlEncode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.UrlEncode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="public string UrlPathEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlPathEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlPathEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlPathEncode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.UrlPathEncode : string -&gt; string" Usage="httpServerUtility.UrlPathEncode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">URL로 인코딩할 텍스트입니다.</param>
        <summary>사용하지 마십시오. 브라우저 호환성을 위해서만 제공됩니다. <see cref="M:System.Web.HttpServerUtility.UrlEncode(System.String)" />을 사용하십시오.</summary>
        <returns>URL로 인코딩된 텍스트입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlTokenDecode">
      <MemberSignature Language="C#" Value="public static byte[] UrlTokenDecode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] UrlTokenDecode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlTokenDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlTokenDecode (input As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ UrlTokenDecode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member UrlTokenDecode : string -&gt; byte[]" Usage="System.Web.HttpServerUtility.UrlTokenDecode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="input">디코딩할 URL 문자열 토큰입니다.</param>
        <summary>Base 64 숫자를 사용하여 URL 문자열 토큰을 해당하는 바이트 배열로 디코딩합니다.</summary>
        <returns>디코딩한 URL 문자열 토큰을 포함하는 바이트 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.UrlTokenDecode%2A> 메서드 base 64 숫자를 이진 데이터 인코딩하는 URL 문자열 토큰을 해당 하는 바이트 배열 표현으로 변환 합니다. 사용 하 여는 <xref:System.Web.HttpServerUtility.UrlTokenDecode%2A> 메서드를 디코딩하는 데 토큰 URL에 전송 및를 사용 하 여 인코딩된는 <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>합니다.  
  
 합니다 <xref:System.Web.HttpServerUtility.UrlTokenDecode%2A> 메서드는 빈 바이트 배열을 반환 하는 경우는 `input` 매개 변수 길이가 1 보다 작습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 매개 변수의 값이 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="UrlTokenEncode">
      <MemberSignature Language="C#" Value="public static string UrlTokenEncode (byte[] input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlTokenEncode(unsigned int8[] input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlTokenEncode (input As Byte()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlTokenEncode(cli::array &lt;System::Byte&gt; ^ input);" />
      <MemberSignature Language="F#" Value="static member UrlTokenEncode : byte[] -&gt; string" Usage="System.Web.HttpServerUtility.UrlTokenEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Byte[]" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="input">인코딩할 바이트 배열입니다.</param>
        <summary>Base 64 숫자를 사용하여 URL에서 전송하기에 적합한 동등한 문자열 표현으로 바이트 배열을 인코딩합니다.</summary>
        <returns>바이트 배열 *길이*가 1보다 큰 경우 인코딩된 토큰이 포함된 문자열이고, 그렇지 않으면 빈 문자열("")입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A> 메서드는 바이트 배열을 base 64 숫자로 인코딩된 해당 하는 문자열 표현으로 변환 합니다. 결과 문자열 토큰 URL에 전송할 수 있습니다.  
  
 합니다 <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A> 경우 빈 문자열을 반환 합니다는 `input` 매개 변수 길이가 1 보다 작습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 매개 변수의 값이 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Convert.ToBase64String(System.Byte[])" />
        <altmember cref="M:System.Web.HttpServerUtility.UrlTokenDecode(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>