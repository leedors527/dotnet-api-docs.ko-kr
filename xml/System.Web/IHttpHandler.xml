<Type Name="IHttpHandler" FullName="System.Web.IHttpHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c0af3086a39a9ec32e66cb3393068e7b0233d4ac" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37528492" /></Metadata><TypeSignature Language="C#" Value="public interface IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpHandler" />
  <TypeSignature Language="F#" Value="type IHttpHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>ASP.NET 구현에서 사용자 지정 HTTP 처리기를 사용하여 동시에 HTTP 웹 요청을 처리하는 규약을 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특정 한 미리 정의 된 유형의 모든 공용 언어 사양 (CLS) 호환 언어에서 HTTP 요청을 처리 하는 데 사용자 지정 HTTP 처리기를 작성할 수 있습니다. 실행 파일에 정의 된 코드는 `HttpHandler` 이러한 특정 요청에 응답을 기본 ASP 또는 ASP.NET 웹 페이지 보다는 클래스입니다. HTTP 처리기 저수준 요청 및 응답 서비스는 IIS 웹 서버와 상호 작용 하는 방법을 제공 및 ISAPI 확장과 마찬가지로 하지만 더 간단한 프로그래밍 모델을 사용 하 여 많은 기능을 제공 합니다.  
  
 처리기는 세션 상태 값에 액세스 하는 경우 구현 해야 합니다는 <xref:System.Web.SessionState.IRequiresSessionState> 인터페이스 (메서드가 없는 마커 인터페이스).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.IHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.IHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>다른 요청에서 <see cref="T:System.Web.IHttpHandler" /> 인스턴스를 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value><see cref="T:System.Web.IHttpHandler" /> 인스턴스를 다시 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 명시적으로 설정 합니다 <xref:System.Web.IHttpHandler.IsReusable%2A> 속성을 `true` 또는 `false` 재정의 하는 코드를 제공 하 여는 <xref:System.Web.IHttpHandler.IsReusable%2A> 속성 접근자 (getter).  
  
   
  
## Examples  
 다음 코드 예제에서는 handler.aspx 라는 페이지에 대 한 클라이언트 요청에 대 한 응답으로 HTTP 출력 스트림에 4 줄의 텍스트를 씁니다. Handler.aspx에 대 한 모든 요청에서 처리 하는 합니다 `MyHttpHandler` 네임 스페이스의 클래스 `HandlerExample` HandlerTest.dll 어셈블리에 포함 합니다.  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="iHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context"><see langword="Request" />, <see langword="Response" />, <see langword="Session" />, <see langword="Server" /> 등과 같이 HTTP 요청을 처리하는 데 사용되는 내장 서버 개체에 대한 참조를 제공하는 <see cref="T:System.Web.HttpContext" /> 개체입니다.</param>
        <summary><see cref="T:System.Web.IHttpHandler" /> 인터페이스를 구현하는 사용자 지정 <see langword="HttpHandler" />를 사용하여 HTTP 웹 요청을 처리할 수 있도록 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 지정 배치 `HttpHandler` 의 코드는 <xref:System.Web.IHttpHandler.ProcessRequest%2A> 가상 메서드를 다음 예와에서 같이 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 handler.aspx 라는 페이지에 대 한 클라이언트 요청에 대 한 응답으로 HTTP 출력 스트림에 4 줄의 텍스트를 씁니다. Handler.aspx에 대 한 모든 요청에서 처리 하는 합니다 `MyHttpHandler` 네임 스페이스의 클래스 `HandlerExample` HandlerTest.dll 어셈블리에 포함 합니다.  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>