<Type Name="ITextRangeProvider" FullName="System.Windows.Automation.Provider.ITextRangeProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="86b3fa97aa346591419b18aa93b7764b7859fb28" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65012470" /></Metadata><TypeSignature Language="C#" Value="public interface ITextRangeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITextRangeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.ITextRangeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITextRangeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class ITextRangeProvider" />
  <TypeSignature Language="F#" Value="type ITextRangeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.Guid("5347ad7b-c355-46f8-aff5-909033582f63")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:System.Windows.Automation.Provider.ITextProvider" />를 구현하는 텍스트 컨테이너에 있는 연속 텍스트의 범위에 대한 UI 자동화 클라이언트 액세스를 지원하는 메서드 및 속성을 노출합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지원 해야 하는 UI 자동화 공급자에서 구현 된 <xref:System.Windows.Automation.TextPattern> 컨트롤 패턴입니다.  
  
 A <xref:System.Windows.Automation.Text.TextPatternRange> 삽입 지점 하위 집합 또는에서 텍스트를 모두 나타낼 수는 <xref:System.Windows.Automation.TextPattern> 컨테이너입니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Text.TextPatternRange" />
    <related type="Article" href="~/docs/framework/ui-automation/ui-automation-control-patterns-overview.md">UI 자동화 컨트롤 패턴 개요</related>
    <related type="Article" href="https://msdn.microsoft.com/library/6acc6d08-bd67-4e2e-915c-9c1d34eb86fe">서버 쪽 UI 자동화 공급자 구현</related>
    <related type="Article" href="https://msdn.microsoft.com/library/3584c0a1-9cd0-4968-8b63-b06390890ef6">클라이언트 쪽 UI 자동화 공급자 구현</related>
    <related type="Article" href="https://msdn.microsoft.com/library/0d635c35-ffa8-4dc8-bbc9-12fcd5445776">UI 자동화 공급자의 컨트롤 패턴 지원</related>
    <related type="Article" href="https://msdn.microsoft.com/library/41787927-df1f-4f4a-aba3-641662854fc4">UI 자동화 TextPattern 개요</related>
  </Docs>
  <Members>
    <Member MemberName="AddToSelection">
      <MemberSignature Language="C#" Value="public void AddToSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToSelection();" />
      <MemberSignature Language="F#" Value="abstract member AddToSelection : unit -&gt; unit" Usage="iTextRangeProvider.AddToSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>서로 분리된 여러 선택 영역을 지원하는 텍스트 컨테이너의 강조 표시된 텍스트 컬렉션에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 새 선택 영역에 텍스트 삽입 지점을 이동합니다.  
  
 삽입 지점을 이동 중복 제거 텍스트 범위를 제공 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">텍스트 공급자는 여러를 지원 하지 않는 경우 선택 항목을 서로 분리 된 (즉, <see cref="P:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection" /> 의 값이 있어야 <see langword="Multiple" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.ITextRangeProvider Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As ITextRangeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::ITextRangeProvider ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Windows.Automation.Provider.ITextRangeProvider" Usage="iTextRangeProvider.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>원래 <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />와 동일하고 원본의 모든 속성을 상속하는 새 <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" />를 반환합니다.</summary>
        <returns>새 텍스트 범위입니다. null 참조(Visual Basic의 경우 <see langword="Nothing" />)는 반환되지 않습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 새 범위를 원본에서 독립적으로 조작할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public bool Compare (System.Windows.Automation.Provider.ITextRangeProvider range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Compare(class System.Windows.Automation.Provider.ITextRangeProvider range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (range As ITextRangeProvider) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Compare(System::Windows::Automation::Provider::ITextRangeProvider ^ range);" />
      <MemberSignature Language="F#" Value="abstract member Compare : System.Windows.Automation.Provider.ITextRangeProvider -&gt; bool" Usage="iTextRangeProvider.Compare range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Windows.Automation.Provider.ITextRangeProvider" />
      </Parameters>
      <Docs>
        <param name="range">비교할 텍스트 범위입니다.</param>
        <summary>텍스트의 범위(<see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> 엔드포인트에서 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> 엔드포인트까지)가 다른 텍스트 범위와 동일한지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>두 텍스트 범위가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">범위를 비교할 경우 같은 텍스트 공급자에서 제공 되지 않습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompareEndpoints">
      <MemberSignature Language="C#" Value="public int CompareEndpoints (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Provider.ITextRangeProvider targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareEndpoints(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Provider.ITextRangeProvider targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareEndpoints (endpoint As TextPatternRangeEndpoint, targetRange As ITextRangeProvider, targetEndpoint As TextPatternRangeEndpoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareEndpoints(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Provider::ITextRangeProvider ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="F#" Value="abstract member CompareEndpoints : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Provider.ITextRangeProvider * System.Windows.Automation.Text.TextPatternRangeEndpoint -&gt; int" Usage="iTextRangeProvider.CompareEndpoints (endpoint, targetRange, targetEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Provider.ITextRangeProvider" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">호출자의 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> 또는 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> 엔드포인트입니다.</param>
        <param name="targetRange">비교할 대상 범위입니다.</param>
        <param name="targetEndpoint">대상의 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> 또는 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> 엔드포인트입니다.</param>
        <summary>두 텍스트 범위의 엔드포인트가 동일한지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>텍스트에서 호출자의 엔드포인트가 대상 엔드포인트보다 먼저 나타나면 음수 값을 반환합니다.  
  
호출자의 엔드포인트가 대상 엔드포인트와 같은 위치에 있으면 0을 반환합니다.  
  
텍스트에서 호출자의 엔드포인트가 대상 엔드포인트보다 나중에 나타나면 양수 값을 반환합니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">경우 <paramref name="targetRange" /> 다른 텍스트 공급자에서 시작 됩니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExpandToEnclosingUnit">
      <MemberSignature Language="C#" Value="public void ExpandToEnclosingUnit (System.Windows.Automation.Text.TextUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExpandToEnclosingUnit(valuetype System.Windows.Automation.Text.TextUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExpandToEnclosingUnit (unit As TextUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExpandToEnclosingUnit(System::Windows::Automation::Text::TextUnit unit);" />
      <MemberSignature Language="F#" Value="abstract member ExpandToEnclosingUnit : System.Windows.Automation.Text.TextUnit -&gt; unit" Usage="iTextRangeProvider.ExpandToEnclosingUnit unit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
      </Parameters>
      <Docs>
        <param name="unit">텍스트 단위입니다.</param>
        <summary>텍스트 범위를 지정된 텍스트 단위로 확장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 범위 지정 단위 정확한 수량을 이미 있으면 그대로 유지 됩니다.  
  
 일련의 단계를 위해에서 백그라운드에서 관련 된는 <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> 메서드를 실행 합니다.  
  
1.  텍스트 범위가 정규화됩니다. 다시 말해서, 텍스트 범위가 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> 엔드포인트에서 중복 제거 범위로 축소되어 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 엔드포인트가 불필요해집니다. 이 단계는 텍스트 범위에 걸쳐 있는 경우 모호성을 제거 하는 데 필요한 `unit` 경계; 예를 들어 "{The U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) 텍스트에 포함 된" 위치 "{0}" 및 "}"는 텍스트 범위 끝점입니다.  
  
2.  결과 범위가 <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> 내에서 뒤쪽으로 옮겨져 요청된 `unit` 경계의 시작 부분으로 이동하게 됩니다.  
  
3.  범위가 요청된 <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> 경계 수만큼 `unit` 내에서 앞이나 뒤로 이동합니다.  
  
4.  그런 다음, 요청된 `unit` 경계 하나만큼 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 엔드포인트를 이동하여 중복 제거 범위 상태이던 범위가 확장됩니다.  
  
 ![Move & ExpandToEnclosingUnit으로 범위 조정](~/add/media/uia-textpattern-moveandexpand-examples.png "Move & ExpandToEnclosingUnit으로 범위 조정")  
Move() 및 ExpandToEnclosingUnit()에 따라 텍스트 범위가 조정되는 방법의 예  
  
> [!NOTE]
>  이러한 단계는 일반적으로 화면 판독기는 전체 단어, 문장 또는 전체 단락 삽입 지점 또는 가상 커서 위치에서 읽을 수 있기 때문에 필요 합니다.  
  
 <xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A> 숨겨진 / 표시 텍스트를 따릅니다.  
  
 <xref:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit%2A> 단위는 다음 가장 큰 <xref:System.Windows.Automation.Text.TextUnit> 지원 되는 경우에는 지정 된 <xref:System.Windows.Automation.Text.TextUnit> 컨트롤에서 지원 되지 않습니다.  
  
 가장 크고 가장 작은 단위는 순서는 아래 나열 됩니다.  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAttribute">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider FindAttribute (int attribute, object value, bool backward);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.ITextRangeProvider FindAttribute(int32 attribute, object value, bool backward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAttribute (attribute As Integer, value As Object, backward As Boolean) As ITextRangeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::ITextRangeProvider ^ FindAttribute(int attribute, System::Object ^ value, bool backward);" />
      <MemberSignature Language="F#" Value="abstract member FindAttribute : int * obj * bool -&gt; System.Windows.Automation.Provider.ITextRangeProvider" Usage="iTextRangeProvider.FindAttribute (attribute, value, backward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="backward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attribute">검색할 특성입니다.</param>
        <param name="value">검색할 특성 값입니다. 이 값은 특성에 지정된 형식과 일치해야 합니다.</param>
        <param name="backward">마지막으로 나타나는 텍스트 범위를 반환해야 하면 <see langword="true" />이고, 처음으로 나타나는 텍스트 범위를 반환해야 하면 <see langword="false" />입니다.</param>
        <summary>지정된 특성 값을 갖는 텍스트 범위 하위 집합을 반환합니다.</summary>
        <returns>특성 및 특성 값이 일치하는 텍스트 범위이거나, 이러한 범위가 없으면 null(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 숨겨진 / 표시 텍스트에 차이가 없습니다 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindText">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.ITextRangeProvider FindText (string text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.ITextRangeProvider FindText(string text, bool backward, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindText (text As String, backward As Boolean, ignoreCase As Boolean) As ITextRangeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::ITextRangeProvider ^ FindText(System::String ^ text, bool backward, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member FindText : string * bool * bool -&gt; System.Windows.Automation.Provider.ITextRangeProvider" Usage="iTextRangeProvider.FindText (text, backward, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.ITextRangeProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="backward" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">검색할 텍스트 문자열입니다.</param>
        <param name="backward">마지막으로 나타나는 텍스트 범위를 반환해야 하면 <see langword="true" />이고, 처음으로 나타나는 텍스트 범위를 반환해야 하면 <see langword="false" />입니다.</param>
        <param name="ignoreCase">대/소문자를 구분하지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>지정된 텍스트를 포함하는 텍스트 범위 하위 집합을 반환합니다.</summary>
        <returns>지정된 텍스트와 일치하는 텍스트 범위이거나, 이러한 범위가 없으면 null(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 숨겨진 / 표시 텍스트에 차이가 없습니다 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributeValue">
      <MemberSignature Language="C#" Value="public object GetAttributeValue (int attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAttributeValue(int32 attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttributeValue (attribute As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetAttributeValue(int attribute);" />
      <MemberSignature Language="F#" Value="abstract member GetAttributeValue : int -&gt; obj" Usage="iTextRangeProvider.GetAttributeValue attribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="attribute">텍스트 특성입니다.</param>
        <summary>텍스트 범위에서 지정된 특성 값을 검색합니다.</summary>
        <returns>지정된 특성의 값을 나타내는 개체를 검색합니다. 예를 들어 <c>GetAttributeValue(TextPattern.FontNameAttribute)</c>는 텍스트 범위에 글꼴이 하나만 사용되는 경우 해당 글꼴 이름을 나타내는 문자열을 반환하는 반면 <c>GetAttributeValue(TextPattern.IsItalicAttribute)</c>는 <see cref="T:System.Boolean" /> 형식의 값을 반환합니다.  
  
지정된 특성의 값이 텍스트 범위에서 일정하지 않게 변화하면 <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" />를 반환합니다.  
  
지정된 특성을 공급자 또는 컨트롤에서 지원하지 않으면 <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 숨겨진 / 표시 텍스트에 차이가 없습니다 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">지정된 특성이 유효하지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetBoundingRectangles">
      <MemberSignature Language="C#" Value="public double[] GetBoundingRectangles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64[] GetBoundingRectangles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoundingRectangles () As Double()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;double&gt; ^ GetBoundingRectangles();" />
      <MemberSignature Language="F#" Value="abstract member GetBoundingRectangles : unit -&gt; double[]" Usage="iTextRangeProvider.GetBoundingRectangles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>텍스트 범위에서 완전히 표시되거나 부분적으로 표시되는 각 텍스트 줄의 경계 사각형 컬렉션을 검색합니다. </summary>
        <returns>텍스트 범위에서 완전히 표시되거나 부분적으로 표시되는 각 텍스트 줄의 경계 사각형 배열입니다.  
  
디제너레이트 범위의 경우 빈 배열이 반환됩니다.  
  
텍스트 범위의 화면 좌표가 화면에서 완전히 벗어나거나, 스크롤되어 표시되지 않거나, 겹치는 창으로 가려진 경우 빈 배열이 반환됩니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderSimple[] GetChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderSimple[] GetChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildren () As IRawElementProviderSimple()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::Provider::IRawElementProviderSimple ^&gt; ^ GetChildren();" />
      <MemberSignature Language="F#" Value="abstract member GetChildren : unit -&gt; System.Windows.Automation.Provider.IRawElementProviderSimple[]" Usage="iTextRangeProvider.GetChildren " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>텍스트 범위 안에 있는 모든 포함된 개체의 컬렉션을 검색합니다.</summary>
        <returns>범위에 속하는 자식 개체의 컬렉션입니다. 텍스트 범위와 겹치지만 완전히 포함되지 않는 자식 개체도 컬렉션에 포함됩니다.  
  
자식 개체가 없으면 빈 컬렉션을 반환합니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnclosingElement">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderSimple GetEnclosingElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderSimple GetEnclosingElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnclosingElement () As IRawElementProviderSimple" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::IRawElementProviderSimple ^ GetEnclosingElement();" />
      <MemberSignature Language="F#" Value="abstract member GetEnclosingElement : unit -&gt; System.Windows.Automation.Provider.IRawElementProviderSimple" Usage="iTextRangeProvider.GetEnclosingElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>텍스트 범위를 포함하는 가장 안쪽의 컨트롤을 반환합니다.</summary>
        <returns>포함하는 컨트롤이며, 일반적으로 텍스트 범위를 제공하는 텍스트 공급자입니다. 그러나 텍스트 공급자에서 테이블 또는 하이퍼링크와 같은 자식 요소를 지원하는 경우 포함하는 요소가 텍스트 공급자의 하위 항목일 수도 있습니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetText">
      <MemberSignature Language="C#" Value="public string GetText (int maxLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetText(int32 maxLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetText (maxLength As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetText(int maxLength);" />
      <MemberSignature Language="F#" Value="abstract member GetText : int -&gt; string" Usage="iTextRangeProvider.GetText maxLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxLength">반환할 문자열의 최대 길이입니다. 제한할 필요가 없으면 <c>-1</c>을 사용합니다.</param>
        <summary>범위의 일반 텍스트를 검색합니다.</summary>
        <returns>텍스트 범위의 일반 문자열이며, 지정된 <paramref name="maxLength" />로 잘릴 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A> 숨겨진 / 표시 텍스트를 따릅니다.  
  
 경우 `maxLength` 길이 보다 크면 호출자의 텍스트 범위를 반환 하는 문자열 텍스트 범위의 일반 텍스트 됩니다.  
  
 <xref:System.Windows.Automation.Provider.ITextRangeProvider.GetText%2A> 끝점 텍스트 흐름; 순서로 적용 되지 않습니다. 항상 논리 텍스트 흐름 순서로 텍스트 범위의 시작 및 종료 끝점 사이의 텍스트를 반환 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxLength" />가 -1보다 작은 경우입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public int Move (System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Move(valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Move (unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Move(System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberSignature Language="F#" Value="abstract member Move : System.Windows.Automation.Text.TextUnit * int -&gt; int" Usage="iTextRangeProvider.Move (unit, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unit">텍스트 단위 경계입니다.</param>
        <param name="count">이동할 텍스트 단위 수입니다.  
  
양수 값을 사용하면 텍스트 범위가 앞으로 이동하고, 음수 값을 사용하면 텍스트 범위가 뒤로 이동하며, 0은 효과가 없습니다.</param>
        <summary>지정된 텍스트 단위 수만큼 텍스트 범위를 이동합니다.</summary>
        <returns>실제로 이동한 단위 수입니다. 이 수는 새 텍스트 범위의 엔드포인트 중 하나가 <see cref="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange" /> 엔드포인트보다 크거나 작으면 요청된 수보다 작을 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 텍스트 범위의 내용을 이동해야 하는 경우 <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> 메서드가 성공적으로 실행되려면 백그라운드에서 일련의 단계를 거쳐야 합니다.  
  
1.  텍스트 범위가 정규화됩니다. 다시 말해서, 텍스트 범위가 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> 엔드포인트에서 중복 제거 범위로 축소되어 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 엔드포인트가 불필요해집니다. 이 단계는 텍스트 범위에 걸쳐 있는 경우 모호성을 제거 하는 데 필요한 `unit` 경계; 예를 들어 "{The U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) 텍스트에 포함 된" 위치 "{0}" 및 "}"는 텍스트 범위 끝점입니다.  
  
2.  결과 범위가 <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> 내에서 뒤쪽으로 옮겨져 요청된 `unit` 경계의 시작 부분으로 이동하게 됩니다.  
  
3.  범위가 요청된 <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> 경계 수만큼 `unit` 내에서 앞이나 뒤로 이동합니다.  
  
4.  그런 다음, 요청된 `unit` 경계 하나만큼 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 엔드포인트를 이동하여 중복 제거 범위 상태이던 범위가 확장됩니다.  
  
 ![Move & ExpandToEnclosingUnit으로 범위 조정](~/add/media/uia-textpattern-moveandexpand-examples.png "Move & ExpandToEnclosingUnit으로 범위 조정")  
Move() 및 ExpandToEnclosingUnit()에 따라 텍스트 범위가 조정되는 방법의 예  
  
 텍스트 컨테이너 및 포함된 개체(예: 하이퍼링크 또는 테이블 셀)의 텍스트 내용(또는 내부 텍스트)은 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 트리의 컨트롤 뷰와 콘텐츠 뷰에서 지속적인 단일 텍스트 스트림으로 노출됩니다. 개체 경계는 무시됩니다.  
  
 ![포함 된 개체에 의해 확장 되는 텍스트 범위입니다. ] (~/add/media/uia-textpattern-embeddedobjecttextranges.png "포함 된 개체에 의해 확장 되는 텍스트 범위입니다.")  
포함된 개체가 있는 텍스트 스트림과 해당 범위의 예  
  
 <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> 숨겨진 / 표시 텍스트를 따릅니다.  
  
 <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> 단위는 다음 가장 큰 <xref:System.Windows.Automation.Text.TextUnit> 지원 되는 경우에는 지정 된 <xref:System.Windows.Automation.Text.TextUnit> 컨트롤에서 지원 되지 않습니다.  
  
 가장 크고 가장 작은 단위는 순서는 아래 나열 됩니다.  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
 텍스트를 전혀 변경 되지 않으면, 텍스트 범위가 텍스트의 다른 부분에만 걸쳐 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByRange">
      <MemberSignature Language="C#" Value="public void MoveEndpointByRange (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Provider.ITextRangeProvider targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveEndpointByRange(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, class System.Windows.Automation.Provider.ITextRangeProvider targetRange, valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveEndpointByRange (endpoint As TextPatternRangeEndpoint, targetRange As ITextRangeProvider, targetEndpoint As TextPatternRangeEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveEndpointByRange(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Provider::ITextRangeProvider ^ targetRange, System::Windows::Automation::Text::TextPatternRangeEndpoint targetEndpoint);" />
      <MemberSignature Language="F#" Value="abstract member MoveEndpointByRange : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Provider.ITextRangeProvider * System.Windows.Automation.Text.TextPatternRangeEndpoint -&gt; unit" Usage="iTextRangeProvider.MoveEndpointByRange (endpoint, targetRange, targetEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="targetRange" Type="System.Windows.Automation.Provider.ITextRangeProvider" />
        <Parameter Name="targetEndpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">이동할 엔드포인트입니다.</param>
        <param name="targetRange">같은 텍스트 공급자의 다른 범위입니다.</param>
        <param name="targetEndpoint">다른 범위의 엔드포인트입니다.</param>
        <summary>텍스트 범위의 한 엔드포인트를 두 번째 텍스트 범위의 지정된 엔드포인트로 이동합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이동 하는 끝점이 다른 끝점을 동일한 텍스트 범위를 벗어날 경우 다른 끝점도 이동 하는 중복 제거 범위 않으며 끝점의 순서가 올바르게 (즉, <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> 작거나는항상<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End>).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveEndpointByUnit">
      <MemberSignature Language="C#" Value="public int MoveEndpointByUnit (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextUnit unit, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 MoveEndpointByUnit(valuetype System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, valuetype System.Windows.Automation.Text.TextUnit unit, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveEndpointByUnit (endpoint As TextPatternRangeEndpoint, unit As TextUnit, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int MoveEndpointByUnit(System::Windows::Automation::Text::TextPatternRangeEndpoint endpoint, System::Windows::Automation::Text::TextUnit unit, int count);" />
      <MemberSignature Language="F#" Value="abstract member MoveEndpointByUnit : System.Windows.Automation.Text.TextPatternRangeEndpoint * System.Windows.Automation.Text.TextUnit * int -&gt; int" Usage="iTextRangeProvider.MoveEndpointByUnit (endpoint, unit, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Windows.Automation.Text.TextPatternRangeEndpoint" />
        <Parameter Name="unit" Type="System.Windows.Automation.Text.TextUnit" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="endpoint">이동할 엔드포인트입니다.</param>
        <param name="unit">이동할 텍스트 단위입니다.</param>
        <param name="count">이동할 단위 수입니다. 양수 값을 사용하면 엔드포인트가 앞으로 이동합니다. 음수 값을 사용하면 뒤로 이동합니다. 0은 효과가 없습니다.</param>
        <summary>텍스트 범위의 한 엔드포인트를 문서 범위 내에서 지정된 텍스트 단위 수만큼 이동합니다.</summary>
        <returns>실제로 이동한 단위 수이며, 엔드포인트를 이동하면서 문서의 시작이나 끝과 만나게 되면 요청된 수보다 작을 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 텍스트 범위의 내용을 이동해야 하는 경우 <xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A> 메서드가 성공적으로 실행되려면 백그라운드에서 일련의 단계를 거쳐야 합니다.  
  
1.  텍스트 범위가 정규화됩니다. 다시 말해서, 텍스트 범위가 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> 엔드포인트에서 중복 제거 범위로 축소되어 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 엔드포인트가 불필요해집니다. 이 단계는 텍스트 범위에 걸쳐 있는 경우 모호성을 제거 하는 데 필요한 `unit` 경계; 예를 들어 "{The U} RL [ https://www.microsoft.com/ ](https://www.microsoft.com/) 텍스트에 포함 된" 위치 "{0}" 및 "}"는 텍스트 범위 끝점입니다.  
  
2.  결과 범위가 <xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A> 내에서 뒤쪽으로 옮겨져 요청된 `unit` 경계의 시작 부분으로 이동하게 됩니다.  
  
3.  그런 다음, 요청된 `unit` 경계 하나만큼 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.End> 엔드포인트를 이동하여 중복 제거 범위 상태이던 범위가 확장됩니다.  
  
 ![Move & ExpandToEnclosingUnit으로 범위 조정](~/add/media/uia-textpattern-moveandexpand-examples.png "Move & ExpandToEnclosingUnit으로 범위 조정")  
Move() 및 ExpandToEnclosingUnit()에 따라 텍스트 범위가 조정되는 방법의 예  
  
 <xref:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit%2A> 단위는 다음 가장 큰 <xref:System.Windows.Automation.Text.TextUnit> 지원 되는 경우에는 지정 된 <xref:System.Windows.Automation.Text.TextUnit> 컨트롤에서 지원 되지 않습니다.  
  
 가장 크고 가장 작은 단위는 순서는 아래 나열 됩니다.  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Character>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Format>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Word>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Line>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Paragraph>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Page>  
  
-   <xref:System.Windows.Automation.Text.TextUnit.Document>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromSelection">
      <MemberSignature Language="C#" Value="public void RemoveFromSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveFromSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFromSelection ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFromSelection();" />
      <MemberSignature Language="F#" Value="abstract member RemoveFromSelection : unit -&gt; unit" Usage="iTextRangeProvider.RemoveFromSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>서로 분리된 여러 선택 영역을 지원하는 텍스트 컨테이너의 강조 표시된 텍스트가 들어 있는 기존 컬렉션에서 호출자의 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> 및 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> 엔드포인트에 해당하는 강조 표시된 텍스트 섹션을 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 제거 된 강조 표시의 영역에 텍스트 삽입 지점을 이동 합니다.  
  
 중복 제거 텍스트 범위를 제공 하면 삽입 지점을 이동 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">텍스트 공급자는 여러를 지원 하지 않는 경우 선택 항목을 서로 분리 된 (예를 들어 <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> 의 값이 있어야 <see langword="Multiple" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="ScrollIntoView">
      <MemberSignature Language="C#" Value="public void ScrollIntoView (bool alignToTop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScrollIntoView(bool alignToTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollIntoView (alignToTop As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollIntoView(bool alignToTop);" />
      <MemberSignature Language="F#" Value="abstract member ScrollIntoView : bool -&gt; unit" Usage="iTextRangeProvider.ScrollIntoView alignToTop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignToTop" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="alignToTop">텍스트 범위를 스크롤하여 뷰포트 맨 위에 맞추려면 <see langword="true" />이고, 뷰포트 맨 아래에 맞추려면 <see langword="false" />입니다.</param>
        <summary>뷰포트에 텍스트 범위가 보일 때까지 텍스트 컨트롤을 세로로 스크롤합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView%2A> 숨겨진 / 표시 텍스트를 따릅니다.  
  
 텍스트 범위, 숨겨진 경우에 텍스트 컨트롤은 숨겨진된 텍스트 뷰포트에 앵커를 포함 하는 경우에 스크롤됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.ITextRangeProvider.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberSignature Language="F#" Value="abstract member Select : unit -&gt; unit" Usage="iTextRangeProvider.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>텍스트 컨트롤에서 텍스트 범위의 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> 및 <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> 엔드포인트에 해당하는 텍스트를 강조 표시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 텍스트 삽입 지점을 이동은 중복 제거 텍스트 범위를 제공 하는 경우는 <xref:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start> 텍스트 범위 끝점입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">텍스트 선택을 텍스트 컨트롤에서 지원하지 않을 때 발생합니다.</exception>
      </Docs>
    </Member>
  </Members>
</Type>