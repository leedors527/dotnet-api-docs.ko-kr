<Type Name="Label" FullName="System.Windows.Controls.Label">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7f00d9efa3cabea8bfb57977502d2c55a5b5d730" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56370980" /></Metadata><TypeSignature Language="C#" Value="public class Label : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Label extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Label" />
  <TypeSignature Language="VB.NET" Value="Public Class Label&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Label : System::Windows::Controls::ContentControl" />
  <TypeSignature Language="F#" Value="type Label = class&#xA;    inherit ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Label)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>컨트롤에 대한 텍스트 레이블을 나타내며 선택키에 대한 지원을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 클래스에는 액세스 키 (니모닉이 라고도 함)에 대 한 기능 및 시각적 지원을 제공 합니다. 와 같은 컨트롤에 대 한 빠른 키보드 액세스를 사용 하도록 설정에 자주 사용 된 <xref:System.Windows.Controls.TextBox>합니다. 할당할를 <xref:System.Windows.Controls.Label> 에 <xref:System.Windows.Controls.Control>설정는 <xref:System.Windows.Controls.Label.Target%2A> 속성 액세스 키를 누를 때 포커스를 받아야 하는 컨트롤을 합니다. 대상도 설정 하면 [!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)] 대상된 컨트롤의 이름으로 레이블의 텍스트를 사용 하도록 합니다. 자세한 내용은 [내게 필요한 옵션](~/docs/framework/ui-automation/index.md)합니다.  
  
 액세스 키를 설정 하려면 액세스 키를 해야 하는 문자 앞에 밑줄을 추가 합니다. 첫 번째 슬래시만 선택키가; 변환 내용을 여러 개의 밑줄 문자가 있으면 다른 밑줄 일반 텍스트로 표시 됩니다. 액세스 키로 변환 하는 것이 원하는 밑줄 첫 번째 밑줄 없는 경우 변환 하려는 것을 앞에 오는 밑줄에 대 한 두 개의 연속 밑줄을 사용 합니다. 다음 코드 액세스 키를 포함 하 고 _Hello로 표시 하는 예를 들어**W**됩니다.  
  
```  
<Label>__Hello_World</Label>   
```  
  
 H 앞에 오는 밑줄 double 이기 때문에 W 키 액세스 키로 등록 합니다.  
  
 레이블을 포커스를 이며 탭은 아닙니다. 자세한 내용은 참조 하세요 [포커스 개요](~/docs/framework/wpf/advanced/focus-overview.md)합니다.  
  
 A <xref:System.Windows.Controls.Label> 는 <xref:System.Windows.Controls.ContentControl>, 즉, 모든 형식 (예: 문자열, 이미지 또는 패널)의 단일 개체가 포함 될 수 있습니다. 자세한 내용은 <xref:System.Windows.Controls.ContentControl> 클래스를 참조하세요.  
  
## <a name="customizing-the-label-control"></a>레이블 컨트롤을 사용자 지정  
 여러 동일한 속성 설정에 적용할 <xref:System.Windows.Controls.Label> 컨트롤을 사용 하 여는 <xref:System.Windows.FrameworkElement.Style%2A> 속성입니다. 기본값을 수정할 수 있습니다 <xref:System.Windows.Controls.ControlTemplate> 고유한 모양을 제어할 수 있습니다. 만들기에 대 한 자세한 내용은 <xref:System.Windows.Controls.ControlTemplate>를 참조 하세요 [ControlTemplate을 만들어 기존 컨트롤의 모양 사용자 지정](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)합니다.  부분과 관련 된 상태를 보려면 합니다 <xref:System.Windows.Controls.Label>를 참조 하세요 [Label 스타일 및 템플릿](~/docs/framework/wpf/controls/label-styles-and-templates.md).  
  
 이 컨트롤에 대 한 종속성 속성은 컨트롤의 기본 스타일으로 설정할 수 있습니다.  속성이 설정 된 기본 스타일을 컨트롤 애플리케이션에 표시 되 면 속성 값이 기본값에서 변경 될 수 있습니다. 기본 스타일은 애플리케이션 실행 중일 때 사용 되는 바탕 화면 테마에서 결정 됩니다.  자세한 내용은 [기본 WPF 테마](https://go.microsoft.com/fwlink/?LinkID=158252)합니다.  
  
[!INCLUDE[setting-a-visual-property](~/includes/visual-property-note.md)]  
  
## Examples  
 다음 예제에서는 만드는 방법을 보여 줍니다는 <xref:System.Windows.Controls.Label> 대상을 설정 하는 바인딩을 사용 하 합니다.  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 다음 예제에서는 만드는 방법을 보여 줍니다는 <xref:System.Windows.Controls.Label> 는 액세스 키가 있고 텍스트 줄 바꿈을 지원 합니다.  
  
 [!code-xaml[LabelSnippet#4](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#4)]   
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms752101(v=vs.90)">방법: 레이블의 대상 속성 설정</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Label();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Controls.Label" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="label.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 인프라의 일부로 이 컨트롤에 대한 적절한 <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer" /> 구현을 제공합니다.</summary>
        <returns>형식별 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 구현입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public System.Windows.UIElement Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.UIElement Target" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Label.Target" />
      <MemberSignature Language="VB.NET" Value="Public Property Target As UIElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::UIElement ^ Target { System::Windows::UIElement ^ get(); void set(System::Windows::UIElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Target : System.Windows.UIElement with get, set" Usage="System.Windows.Controls.Label.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.NameReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 레이블의 선택키를 누를 때 포커스를 받는 요소를 가져오거나 설정합니다.</summary>
        <value>사용자가 선택키를 누를 때 포커스를 받는 <see cref="T:System.Windows.UIElement" />입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 바로 가기 키를 제공 하 여 액세스 키를 지원 하지 않는 요소를 제공할 수 있습니다는 <xref:System.Windows.Controls.Label> 액세스 키 및이 속성을 설정 합니다. 레이블에 대 한 액세스 키로 사용 되는 문자 바로 앞에 밑줄을 배치 하 여 액세스 키를 할당 합니다. 액세스 키를 지정할 수 있습니다는 <xref:System.Windows.Controls.ContentControl.Content%2A> 속성 또는 설정 하 여 <xref:System.Windows.Controls.ContentControl.Content%2A> 에 <xref:System.Windows.Controls.AccessText> 개체입니다.  
  
 이 속성을 사용 하 여 정의할 수 없습니다는 <xref:System.Windows.UIElement>합니다. 예를 들어 컴파일되지만 작동 하지 않습니다: `<object.Target><UIElement../></object.Target>`합니다. 이 속성은 애플리케이션에서 이미 정의 되어 있는 요소에 대 한 참조를 제공 합니다.  
  
<a name="dependencyPropertyInfo_Target"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.Controls.Label.TargetProperty>|  
|메타 데이터 속성 설정 `true`|없음|  
  
<a name="xamlAttributeUsage_Target"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<Label Target=" nameOfExistingElement"/>  
  
```  
  
<a name="xamlPropertyElementUsage_Target"></a>   
## <a name="xaml-property-element-usage"></a>XAML 속성 요소 사용  
  
<a name="xamlValues_Target"></a>   
## <a name="xaml-values"></a>XAML 값  
 `nameOfExistingElement`  
 이름의 <xref:System.Windows.UIElement> 액세스 키를 누를 때 포커스를 받을입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.Controls.Label.Target%2A>의 <xref:System.Windows.Controls.Label> 속성을 설정하는 방법을 보여 줍니다.  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms752101(v=vs.90)">방법: 레이블의 대상 속성 설정</related>
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Label.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Label.TargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Controls.Label.Target" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>