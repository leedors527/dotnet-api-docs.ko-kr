<Type Name="SpellCheck" FullName="System.Windows.Controls.SpellCheck">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cbe16baa3a332057d3a71dd5fe6702b89aa33da0" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57949920" /></Metadata><TypeSignature Language="C#" Value="public sealed class SpellCheck" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpellCheck extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.SpellCheck" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpellCheck" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpellCheck sealed" />
  <TypeSignature Language="F#" Value="type SpellCheck = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Windows.Controls.TextBox" /> 및 <see cref="T:System.Windows.Controls.RichTextBox" /> 같은 텍스트 편집 컨트롤에 대해 실시간 맞춤법 검사 기능을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 맞춤법 검사기를 사용 하도록 설정 하려면 설정 합니다 <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> 속성을 `true` 텍스트 편집 컨트롤입니다. 맞춤법 검사기를 사용 하는 경우 다음 그림과에서 같이 맞춤법이 틀린된 단어는 빨간색 물결선을 사용 하 여 밑줄이 표시 됩니다. 맞춤법 검사기가 WPF 기본 사전을 제공 하는 경우에 지원 합니다. [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], WPF는 영어, 프랑스어, 독일어 및 스페인어에 대 한 사전을 제공 합니다.  
  
 ![텍스트 상자의 맞춤법 검사를 사용 하 여&#45;검사](~/add/media/editing-textbox-with-spellchecking.png "맞춤법 검사 기능이 있는 Textbox")  
  
 사용자 지정 사전에 추가 하려면 어휘 집 파일의 위치를 추가 합니다 <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> 컬렉션입니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CustomDictionaries">
      <MemberSignature Language="C#" Value="public System.Collections.IList CustomDictionaries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList CustomDictionaries" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomDictionaries As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ CustomDictionaries { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomDictionaries : System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자 지정 맞춤법 검사에 사용되는 용어 파일 위치의 컬렉션을 가져옵니다.</summary>
        <value>용어 파일 위치의 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 지정 사전을.lex 확장명을 가진 텍스트 파일에는 사전 파일을 사용 합니다. 사전 파일의 각 줄은 합법적인 철자로 허용 되는 단일 단어를 포함 합니다. 파일의 첫 번째 줄 사전에 적용 되는 로캘 식별자 (LCID)를 지정할 수 있습니다. 로캘을 지정 하지 않으면 사전에는 모든 언어에 적용 됩니다. 자세한 내용은 [로캘 Id](https://go.microsoft.com/fwlink/?LinkId=165561)합니다. 다음 예제에서는 영어에 대 한 사전 파일의 처음 몇 줄을 보여 줍니다.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 에 대 한 하나 이상의 사용자 지정 사전을 지정 하는 <xref:System.Windows.Controls.TextBox> 또는에서 파생 되는 모든 클래스에 대 한 <xref:System.Windows.Controls.Primitives.TextBoxBase>, 파일에 대 한 URI를 추가 하 여 사전 파일의 위치를 지정는 <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> 컬렉션입니다.  
  
> [!NOTE]
>  사용 하 여 <xref:System.Collections.IList.Insert%2A> 파일을 추가 하 여 <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> 예외를 발생 하는 컬렉션입니다. 대신 <xref:System.Collections.IList.Add%2A> 및 <xref:System.Collections.IList.Remove%2A> 컬렉션을 업데이트 합니다.  
  
 어휘 집 파일을 포함할 수 응용 프로그램을 로컬에 컴파일된 리소스 파일 또는 로컬 컴퓨터에 설치 된 콘텐츠 파일에서 어셈블리를 참조 합니다. Pack Uri를 사용 하 여 파일을 참조할 수 있습니다. 자세한 내용은 [WPF의 Pack URI](~/docs/framework/wpf/app-development/pack-uris-in-wpf.md)를 참조하세요.  
  
 맞춤법 검사기를 사용 하도록 설정 하려면 설정 합니다 <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> 속성을 `true` 에 <xref:System.Windows.Controls.TextBox> 에서 파생 되는 모든 클래스 또는 <xref:System.Windows.Controls.Primitives.TextBoxBase>. 에 대 한 모든 사용자 지정 사전 <xref:System.Windows.Controls.TextBox> 기본 맞춤법 검사기를 사용 하는 것 외에도 사용 됩니다. 맞춤법 검사기에 대 한 자세한 내용은 참조 하세요. <xref:System.Windows.Controls.SpellCheck>합니다.  
  
   
  
## Examples  
 다음 예제에서는 두 개의 사용자 지정 사전을 추가 하는 방법을 보여 줍니다는 <xref:System.Windows.Controls.RichTextBox>합니다. 첫 번째 사용자 지정 사전 (customwords.lex) XAML에 추가 됩니다. 파일 콘텐츠 파일을 응용 프로그램에 포함 된 이며 출력 디렉터리에 복사 합니다. 사용 하는 <xref:System.Uri> System 네임 스페이스를 포함 해야 하는 요소입니다.  
  
 `xmlns:sys="clr-namespace:System;assembly=System"`  
  
 두 번째 사용자 지정 사전 (customwords2.lex)에 추가 되는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트 처리기입니다. 파일을 리소스 파일로 포함 되어 있으며 WPFCustomDictionary 이라고 하는 응용 프로그램 어셈블리에 컴파일됩니다.  
  
 [!code-xaml[WpfCustomDictionary#1](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml#1)]  
  
 [!code-csharp[WpfCustomDictionary#2](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml.cs#2)]
 [!code-vb[WpfCustomDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/wpfcustomdictionary/vb/mainwindow.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
        <altmember cref="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      </Docs>
    </Member>
    <Member MemberName="CustomDictionariesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomDictionariesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomDictionariesProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomDictionariesProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomDictionariesProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomDictionariesProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDictionaries">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetCustomDictionaries (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetCustomDictionaries(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetCustomDictionaries(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetCustomDictionaries : System.Windows.Controls.Primitives.TextBoxBase -&gt; System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.GetCustomDictionaries textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">용어 파일의 컬렉션을 검색하는 텍스트 편집 컨트롤입니다.</param>
        <summary>사용자 지정 맞춤법 검사기에서 지정된 텍스트 편집 컨트롤에 대해 사용되는 용어 파일 위치의 컬렉션을 가져옵니다.</summary>
        <returns>용어 파일 위치의 컬렉션입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 지정 사전을.lex 확장명을 가진 간단한 텍스트 파일에는 사전 파일을 사용 합니다. 사전 파일의 각 줄은 합법적인 철자로 허용 되는 단일 단어를 포함 합니다. 파일의 첫 번째 줄 사전에 적용 되는 로캘 식별자 (LCID)를 지정할 수 있습니다. 로캘을 지정 하지 않으면 사전에는 모든 언어에 적용 됩니다. 자세한 내용은 [로캘 Id](https://go.microsoft.com/fwlink/?LinkId=165561)합니다. 다음 예제에서는 영어에 대 한 사전 파일의 처음 몇 줄을 보여 줍니다.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 하나 이상의 사용자 지정 사전을 지정 하려면를 <xref:System.Windows.Controls.TextBox> 또는 클래스에서 파생 되는 <xref:System.Windows.Controls.Primitives.TextBoxBase>, 파일에 대 한 URI를 추가 하 여 사전 파일의 위치를 지정 합니다 <xref:System.Collections.IList> 반환한는 <xref:System.Windows.Controls.SpellCheck.GetCustomDictionaries%2A> 메서드.  
  
 맞춤법 검사기를 사용 하도록 설정 하려면 설정 합니다 <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> 속성을 `true` 에 <xref:System.Windows.Controls.TextBox> 에서 파생 되는 모든 클래스 또는 <xref:System.Windows.Controls.Primitives.TextBoxBase>. 에 대 한 모든 사용자 지정 사전 <xref:System.Windows.Controls.TextBox> 기본 맞춤법 검사기를 사용 하는 것 외에도 사용 됩니다. 맞춤법 검사기에 대 한 자세한 내용은 참조 하세요. <xref:System.Windows.Controls.SpellCheck>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textBoxBase" />이 <see langword="null" />인 경우</exception>
        <altmember cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
      </Docs>
    </Member>
    <Member MemberName="GetIsEnabled">
      <MemberSignature Language="C#" Value="public static bool GetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase -&gt; bool" Usage="System.Windows.Controls.SpellCheck.GetIsEnabled textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">확인할 텍스트 편집 컨트롤입니다. 예제 컨트롤에는 <see cref="T:System.Windows.Controls.TextBox" /> 및 <see cref="T:System.Windows.Controls.RichTextBox" />가 있습니다.</param>
        <summary>지정된 텍스트 편집 컨트롤에 대해 맞춤법 검사기를 활성화하는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>텍스트 편집 컨트롤에 대해 맞춤법 검사기가 활성화되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textBoxBase" />이 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Controls.TextBox" /> 또는 <see cref="T:System.Windows.Controls.RichTextBox" /> 같은 이 텍스트 편집 컨트롤에 대해 맞춤법 검사기를 활성화하는지 여부를 결정하는 값을 가져오거나 설정합니다.</summary>
        <value>이 컨트롤에 대해 맞춤법 검사기가 활성화되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 종속성 속성에는 다음과 같은 특수 한 쓰기 전용 연결 된 속성 사용법입니다. 합니다 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 속성을 설정 하는 것에 대 한 구문은 `<` *textBoxBaseClass* **SpellCheck.IsEnabled**`="`*boolValue* `" .../>`, 여기서 *textBoxBaseClass* 에서 파생 된 클래스에 대 한 개체 요소 <xref:System.Windows.Controls.Primitives.TextBoxBase>, 및 *boolValue* 하나는 `true` 또는 `false` (대/소문자 안 함). 코드에서 연결된 된 속성으로 속성을 설정 하려면 참조는 <xref:System.Windows.Controls.SpellCheck.SetIsEnabled%2A> 메서드. 일치 하는 방법이 `GetIsEnabled` 접근자입니다. 값을 가져오려면 현재 <xref:System.Windows.Controls.SpellCheck> 에서 개체를 <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> 속성을 다음 값을 가져올 합니다 <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> 는 속성 <xref:System.Windows.Controls.SpellCheck>합니다.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.Controls.SpellCheck.IsEnabledProperty>|  
|메타 데이터 속성 설정 `true`|없음|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Controls.SpellCheck.IsEnabled" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsEnabled">
      <MemberSignature Language="C#" Value="public static void SetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, bool value);" />
      <MemberSignature Language="F#" Value="static member SetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase * bool -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetIsEnabled (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">맞춤법 검사기를 활성화하거나 비활성화할 텍스트 편집 컨트롤입니다. 예제 컨트롤에는 <see cref="T:System.Windows.Controls.TextBox" /> 및 <see cref="T:System.Windows.Controls.RichTextBox" />가 있습니다.</param>
        <param name="value">텍스트 편집 컨트롤에 대해 맞춤법 검사기를 활성화하는지 여부를 지정하는 부울 값입니다.</param>
        <summary><see cref="T:System.Windows.Controls.TextBox" /> 또는 <see cref="T:System.Windows.Controls.RichTextBox" /> 같은 지정된 텍스트 편집 컨트롤에 대해 맞춤법 검사기를 활성화하거나 비활성화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 연결 된 속성 사용에 대 한 활성화 합니다 <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> 속성에서 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]합니다. 다음 예제는 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 사용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpellingReform">
      <MemberSignature Language="C#" Value="public static void SetSpellingReform (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, System.Windows.Controls.SpellingReform value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSpellingReform(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, valuetype System.Windows.Controls.SpellingReform value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetSpellingReform(System.Windows.Controls.Primitives.TextBoxBase,System.Windows.Controls.SpellingReform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSpellingReform(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, System::Windows::Controls::SpellingReform value);" />
      <MemberSignature Language="F#" Value="static member SetSpellingReform : System.Windows.Controls.Primitives.TextBoxBase * System.Windows.Controls.SpellingReform -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetSpellingReform (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Windows.Controls.SpellingReform" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">맞춤법 검사기를 적용할 텍스트 편집 컨트롤입니다. 예제 컨트롤에는 <see cref="T:System.Windows.Controls.TextBox" /> 및 <see cref="T:System.Windows.Controls.RichTextBox" />가 있습니다.</param>
        <param name="value">맞춤법 개정 규칙을 결정하는 <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" /> 값입니다.</param>
        <summary>맞춤법 검사기에서 사용하는 맞춤법 개정 규칙을 결정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드에 의해 액세스 되는 맞춤법 개정 규칙은 1990 년대의 프랑스어 및 독일어 맞춤법 개정을 가리킵니다. 다른 언어를 사용 하 여 사용할 경우 효과가 없습니다.  
  
 이 메서드는 연결 된 속성 사용에 대 한 활성화 합니다 <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> 속성에서 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReform">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.SpellingReform SpellingReform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.SpellingReform SpellingReform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberSignature Language="VB.NET" Value="Public Property SpellingReform As SpellingReform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::SpellingReform SpellingReform { System::Windows::Controls::SpellingReform get(); void set(System::Windows::Controls::SpellingReform value); };" />
      <MemberSignature Language="F#" Value="member this.SpellingReform : System.Windows.Controls.SpellingReform with get, set" Usage="System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.SpellingReform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>맞춤법 검사기에서 사용하는 맞춤법 개정 규칙을 가져오거나 설정합니다.</summary>
        <value>맞춤법 검사기에서 사용하는 맞춤법 개정 규칙입니다. 기본값은 프랑스어의 경우 <see cref="F:System.Windows.Controls.SpellingReform.PreAndPostreform" />이고 독일어의 경우 <see cref="F:System.Windows.Controls.SpellingReform.Postreform" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에 의해 결정 되는 맞춤법 개정 규칙을 프랑스어 및 독일어 맞춤법 개정을 가리킵니다. 다른 언어에 사용 되는 경우에이 속성을 사용 해도 없습니다 효과가 없습니다.  
  
 이 종속성 속성에는 다음과 같은 특수 한 쓰기 전용 연결 된 속성 사용법입니다. 합니다 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 속성을 설정 하는 것에 대 한 구문은 `<` *textBoxBaseClass* **SpellCheck.SpellingReform**`="`*enumValue* `" .../>`, 여기서 *textBoxBaseClass* 에서 파생 된 클래스에 대 한 개체 요소 <xref:System.Windows.Controls.Primitives.TextBoxBase>, 및 *enumValue* 의 값에 대 한 문자열 이름인는 <xref:System.Windows.Controls.SpellingReform> 열거형입니다. 코드에서 연결된 된 속성으로 속성을 설정 하려면 참조는 <xref:System.Windows.Controls.SpellCheck.SetSpellingReform%2A> 메서드. 일치 하는 방법이 `GetSpellingReform` 접근자입니다. 값을 가져오려면 현재 <xref:System.Windows.Controls.SpellCheck> 에서 개체를 <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> 속성을 다음 값을 가져올 합니다 <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> 는 속성 <xref:System.Windows.Controls.SpellCheck>합니다.  
  
<a name="dependencyPropertyInfo_SpellingReform"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.Controls.SpellCheck.SpellingReformProperty>|  
|메타 데이터 속성 설정 `true`|없음|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SpellingReformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SpellingReformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SpellingReformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SpellingReformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SpellingReformProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>