<Type Name="UpdateSourceExceptionFilterCallback" FullName="System.Windows.Data.UpdateSourceExceptionFilterCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b715c214c4452338e4dca1c03eb939da6f68b56c" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51910017" /></Metadata><TypeSignature Language="C#" Value="public delegate object UpdateSourceExceptionFilterCallback(object bindExpression, Exception exception);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed UpdateSourceExceptionFilterCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.UpdateSourceExceptionFilterCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function UpdateSourceExceptionFilterCallback(bindExpression As Object, exception As Exception) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ UpdateSourceExceptionFilterCallback(System::Object ^ bindExpression, Exception ^ exception);" />
  <TypeSignature Language="F#" Value="type UpdateSourceExceptionFilterCallback = delegate of obj * Exception -&gt; obj" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="bindExpression" Type="System.Object" />
    <Parameter Name="exception" Type="System.Exception" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="bindExpression">예외를 포함하는 개체입니다.</param>
    <param name="exception">발생한 예외입니다.</param>
    <summary>바인딩 소스 값을 업데이트하는 동안 발생한 예외를 처리하는 메서드를 나타냅니다. <see cref="T:System.Windows.Controls.ExceptionValidationRule" />과 함께 사용해야 합니다.</summary>
    <returns>일반적으로 다음 중 하나인 개체입니다. 
 <list type="table"><listheader><term> 값 
 </term><description> 설명 
 </description></listheader><item><term><see langword="null" /></term><description> 모든 예외를 무시합니다. 기본 동작(<see cref="T:System.Windows.Data.UpdateSourceExceptionFilterCallback" />이 없는 경우)은 예외가 있는 <see cref="T:System.Windows.Controls.ValidationError" />를 만들어 바인딩된 요소의 <see cref="P:System.Windows.Controls.Validation.Errors" /> 컬렉션에 추가하는 것입니다.  
  
 </description></item><item><term> 모든 개체 
 </term><description> <see cref="T:System.Windows.Controls.ValidationError" />가 해당 개체로 설정된 <see cref="P:System.Windows.Controls.ValidationError.ErrorContent" /> 개체를 만듭니다.  
  
<see cref="T:System.Windows.Controls.ValidationError" /> 개체가 바인딩된 요소의 <see cref="P:System.Windows.Controls.Validation.Errors" /> 컬렉션에 추가됩니다.  
  
 </description></item><item><term> <see cref="T:System.Windows.Controls.ValidationError" /> 개체입니다. 
 </term><description> <see cref="T:System.Windows.Data.BindingExpression" /> 또는 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 개체를 <see cref="P:System.Windows.Controls.ValidationError.BindingInError" />로 설정합니다. <see cref="T:System.Windows.Controls.ValidationError" /> 개체가 바인딩된 요소의 <see cref="P:System.Windows.Controls.Validation.Errors" /> 컬렉션에 추가됩니다.  
  
 </description></item></list></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 연결한 경우는 <xref:System.Windows.Controls.ExceptionValidationRule> 사용 하 여 프로그램 <xref:System.Windows.Data.Binding> 사용 하는 옵션이 있는 개체는 <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> 예외를 처리 하기 위한 사용자 지정 논리를 제공 하도록이 콜백을 설정 하는 속성입니다. 이 콜백은 바인딩 엔진은 바인딩 소스 값을 업데이트 하는 경우 예외가 발생할 때마다 호출 됩니다.  
  
 경우는 <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> 에 지정 되어 있지는 <xref:System.Windows.Data.Binding>, 바인딩 엔진에서 만드는 <xref:System.Windows.Controls.ValidationError> 예외를 사용 하 여에 추가 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType> 바인딩된 요소의 컬렉션입니다.  
  
   
  
## Examples  
 합니다 <xref:System.Windows.Controls.TextBox.Text%2A> 속성 중 <xref:System.Windows.Controls.TextBox> 소스 속성에 데이터 바인딩된 `Age3` 형식의 `int`합니다. <xref:System.Windows.Controls.ExceptionValidationRule> 원본 속성 (예: 사용자가 값을 정수로 변환할 수 없는) 업데이트 하는 동안 throw 된 예외에 대해 검사 합니다.  
  
 [!code-xaml[BindValidation#tbExceptionFilter](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#tbexceptionfilter)]  
  
 이러한 예외를 처리 하는 사용자 지정 논리를 제공 하는 옵션이 있습니다. 다음 예제에서는 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> 속성을 설정 하는 <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>:  
  
 [!code-csharp[BindValidation#filtercallback](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#filtercallback)]  
  
 다음은 예제 구현의 <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>:  
  
 [!code-csharp[BindValidation#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#handler)]  
  
 전체 샘플을 참조 하세요 [바인딩 유효성 검사 샘플](https://go.microsoft.com/fwlink/?LinkID=159972)합니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.Data.MultiBinding.UpdateSourceExceptionFilter" />
  </Docs>
</Type>