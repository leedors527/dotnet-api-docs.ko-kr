<Type Name="ChartSerializer" FullName="System.Windows.Forms.DataVisualization.Charting.ChartSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8573baa6020b61d3e4c0ecf2599a558b6690ed7d" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56401759" /></Metadata><TypeSignature Language="C#" Value="public class ChartSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChartSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DataVisualization.Charting.ChartSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class ChartSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChartSerializer" />
  <TypeSignature Language="F#" Value="type ChartSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Format")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> 컨트롤의 serialization을 사용합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 클래스는으로 노출 되는 <xref:System.Windows.Forms.DataVisualization.Charting.Chart.Serializer%2A> 루트 속성 <xref:System.Windows.Forms.DataVisualization.Charting.Chart> 클래스.  
  
 Serialization 차트의 상태를 저장 하 고 또한 차트를 serialize 된 데이터를 로드 하는 옵션을 제공 합니다. 차트의 데이터를 포함 하 여 모든 차트 속성 유지할 수 있습니다. 또한 직렬화로 표시 된 모든 차트 속성을 재설정할 수 있습니다.  
  
 사용자 정의 뷰 상태를 관리 하는 경우이 클래스를 사용할 필요에 따라 수 있습니다. 중 해당 `Load` 메서드는 보기 상태를 지정 하 고 중 하나를 로드할 수는 `Save` 보기 상태를 설정할 때에 메서드를 사용할 수 있습니다.  
  
 XML 또는 이진 형식 데이터를 저장할 직렬화 수입니다. XML이 기본적으로 사용 하지만 사용 하 여 형식을 변경할 수 있습니다는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Format%2A> 속성입니다.  
  
 차트 속성 저장 되 고 사용 하 여 로드 된 `Save` 및 `Load` 메서드를 각각. 기본이 아닌 값이 있는 속성에만 저장 됨을 note 합니다. 데이터를 저장할 수 있습니다 및/또는 스트림 파일을 사용 하 여 로드 <xref:System.IO.TextWriter>, <xref:System.IO.TextReader>를 <xref:System.Xml.XmlWriter> 고 <xref:System.Xml.XmlReader> 개체입니다. 저장 및/또는 개체를 사용 하 여 데이터 로드에서 파생 하는 경우는 <xref:System.IO.TextReader>, <xref:System.IO.TextWriter>를 <xref:System.Xml.XmlReader> 또는 <xref:System.Xml.XmlWriter> 클래스, 데이터 형식의 XML 이어야 합니다.  
  
 다음은 직렬화 가능한 데이터를 정의 하는 데 기본 고급에서 세 가지 기술을 설명 합니다. 수 있다는 것도 불가능 데이터를 정의 하는 참고 합니다. 이 기술은 다음 단락에 설명 되어 있습니다.  
  
-   Serialize 된 <xref:System.Windows.Forms.DataVisualization.Charting.Chart> 를 사용 하 여를 `Save` 및 `Load` 메서드, 속성을 지정 하지 않고. 차트 데이터를 포함 하는 기본이 아닌 값을 사용 하 여 모든 차트 속성을 직렬화 됩니다.  
  
-   지정 된 차트 속성을 serialize 된 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성입니다. <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성 범주 데이터, 모양 등으로 serialize 될 차트 속성을 그룹화 합니다. 형태의 <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea> 고 <xref:System.Windows.Forms.DataVisualization.Charting.Series> 개체는 자동으로 serialize; serialize 된 데이터를 기존 차트 영역 및 로드 하는 경우 계열에 적용 됩니다.  
  
> [!IMPORTANT]
>  합니다 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성은 내부적으로 구현 합니다 <xref:System.Windows.Forms.DataVisualization.Charting.Chart> 컨트롤을 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 속성  
  
-   지정 된 차트 속성의 serialization을 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 속성입니다. 직렬화 할 수 있는 모든 차트 속성의 쉼표로 구분 된 목록입니다. 이 속성을 명시적 값을 설정한 후 것은 저장할 모든 속성을 지정 하는 개발자의 책임입니다. 달리 말해서는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성, 차트 영역과 일련의 이름을 유지 되지 것입니다 자동으로 합니다. 합니다 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 고 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 속성 함께에서 사용할 수도 있습니다. 그러나 했는지 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 그렇지 않은 경우 지정 된 차트 속성 설정 되 면 연결 된 자체는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성을 재정의 합니다.  
  
 특정 속성을 serialize 하지 못하게 하려면 사용 된 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성입니다. 하나의 속성이 설정 된 경우 직렬화 및 비 직렬화 하는 일반적인 경우 와일드 카드를 사용 하는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 속성이 우선 합니다. 그러나 우선 순위에 얼마나 많은 와일드 카드 속성을 지정 했을 때 사용한 달라 집니다.  
  
 기본적으로 직렬화 속성 로드 되기 전에 기본값으로 재설정 됩니다. 사용 하 여이 동작을 변경할 수는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A> 속성입니다. <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Reset%2A> 메서드를 명시적으로 기본값으로 차트 속성을 다시 설정 사용할 수도 있습니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Content">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.SerializationContents Content { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.SerializationContents Content" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content" />
      <MemberSignature Language="VB.NET" Value="Public Property Content As SerializationContents" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::SerializationContents Content { System::Windows::Forms::DataVisualization::Charting::SerializationContents get(); void set(System::Windows::Forms::DataVisualization::Charting::SerializationContents value); };" />
      <MemberSignature Language="F#" Value="member this.Content : System.Windows.Forms.DataVisualization.Charting.SerializationContents with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Windows.Forms.DataVisualization.Charting.SerializationContents), "Default")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.SerializationContents</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>serialize될 차트 콘텐츠의 형식을 가져오거나 설정합니다.</summary>
        <value>로드, 저장 또는 다시 설정 작업 중에 serialize될 차트 콘텐츠를 나타내는 <see cref="T:System.Windows.Forms.DataVisualization.Charting.SerializationContents" /> 열거형 값입니다. 기본적으로 데이터를 비롯하여 기본값이 아닌 차트 속성이 모두 유지됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 모든 차트 속성을 직렬화할지 같은 경우에 `Save` 및 `Load` 메서드를 호출 합니다. 사용 하 여 serialize 된 항목을 통해 효과적, 제공 된 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성입니다. <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 하 고 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성와 함께 사용할 수도 있습니다는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성입니다.  
  
 > [!IMPORTANT] 
 > <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성에는 "모양"으로 직렬화 해야 하는 등의 차트 특성의 형식을 확인으로 내부적으로 구현 실제로 됩니다는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 속성입니다. 즉, 해당 설정을 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성과 설정한를 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 속성 하면를 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성 값은 무시 하지 않는 한 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 연결 합니다. 아래 샘플 코드에이 절차의 예제를 참조 하세요.  
  
 설정한 경우에 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성을 모든 <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea> 및 <xref:System.Windows.Forms.DataVisualization.Charting.Series> 개체 이름을 자동으로 serialize 될;이 차트 영역 및 계열에 관련 된 serialize 된 데이터를 로드할 때 기존 개체에 적용 됨을 의미 합니다.  
  
 모든 부하이 속성에 영향을 줍니다 설정을 저장 하 고 작업을 다시 설정.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.SerializationFormat Format { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.SerializationFormat Format" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Format" />
      <MemberSignature Language="VB.NET" Value="Public Property Format As SerializationFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::SerializationFormat Format { System::Windows::Forms::DataVisualization::Charting::SerializationFormat get(); void set(System::Windows::Forms::DataVisualization::Charting::SerializationFormat value); };" />
      <MemberSignature Language="F#" Value="member this.Format : System.Windows.Forms.DataVisualization.Charting.SerializationFormat with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Format" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Windows.Forms.DataVisualization.Charting.SerializationFormat), "Xml")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.SerializationFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>차트가 serialize될 때 사용되는 서식을 가져오거나 설정합니다.</summary>
        <value>serialize된 데이터의 서식을 나타내는 <see cref="T:System.Windows.Forms.DataVisualization.Charting.SerializationFormat" /> 열거형 값입니다. 기본값은 XML입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터를 XML 또는 이진 형식으로 serialize 할 수 있습니다. 이진 형식은 압축되며 XML보다 적은 스토리지가 사용됩니다. 그러나 XML은 사람이 읽을 수 있는 텍스트 형식입니다.  
  
 Serialize 된 데이터를 로드 하거나 저장 하는 형식은 XML 이어야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContentString">
      <MemberSignature Language="C#" Value="protected string GetContentString (System.Windows.Forms.DataVisualization.Charting.SerializationContents content, bool serializable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetContentString(valuetype System.Windows.Forms.DataVisualization.Charting.SerializationContents content, bool serializable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.GetContentString(System.Windows.Forms.DataVisualization.Charting.SerializationContents,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetContentString (content As SerializationContents, serializable As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::String ^ GetContentString(System::Windows::Forms::DataVisualization::Charting::SerializationContents content, bool serializable);" />
      <MemberSignature Language="F#" Value="member this.GetContentString : System.Windows.Forms.DataVisualization.Charting.SerializationContents * bool -&gt; string" Usage="chartSerializer.GetContentString (content, serializable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Windows.Forms.DataVisualization.Charting.SerializationContents" />
        <Parameter Name="serializable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="content">serialize 가능한 콘텐츠입니다.</param>
        <param name="serializable">serialize 가능한 문자열을 가져오려면 <see langword="true" />이고, serialize 불가능한 문자열을 가져오려면 <see langword="false" />입니다.</param>
        <summary>특정 플래그 값에 따라 serialize 가능하거나 불가능한 클래스 및/또는 속성 이름을 반환합니다.</summary>
        <returns>serialize 가능하거나 불가능한 클래스 및/또는 속성 이름을 나타내는 <see langword="string" /> 값입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsResetWhenLoading">
      <MemberSignature Language="C#" Value="public bool IsResetWhenLoading { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsResetWhenLoading" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading" />
      <MemberSignature Language="VB.NET" Value="Public Property IsResetWhenLoading As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsResetWhenLoading { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsResetWhenLoading : bool with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>로드하기 전에 개체 속성을 기본값으로 다시 설정할지 여부를 나타내는 플래그를 가져오거나 설정합니다.</summary>
        <value>로드하기 전에 개체 속성을 기본값으로 다시 설정하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemplateMode">
      <MemberSignature Language="C#" Value="public bool IsTemplateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemplateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsTemplateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property IsTemplateMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTemplateMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsTemplateMode : bool with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsTemplateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>차트 직렬 변환기가 템플릿 생성 모드에서 작동 중인지 여부를 나타내는 플래그를 가져오거나 설정합니다.</summary>
        <value>차트 직렬 변환기가 템플릿 생성 모드에서 작동 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknownAttributeIgnored">
      <MemberSignature Language="C#" Value="public bool IsUnknownAttributeIgnored { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnknownAttributeIgnored" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsUnknownAttributeIgnored" />
      <MemberSignature Language="VB.NET" Value="Public Property IsUnknownAttributeIgnored As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnknownAttributeIgnored { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsUnknownAttributeIgnored : bool with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsUnknownAttributeIgnored" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>예외를 throw하지 않고 알 수 없는 XML 속성과 요소를 무시할지 여부를 나타내는 플래그를 가져오거나 설정합니다.</summary>
        <value>예외를 throw하지 않고 알 수 없는 XML 속성과 요소를 무시하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> 컨트롤에 serialize된 데이터를 로드합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.Load : System.IO.Stream -&gt; unit" Usage="chartSerializer.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><see cref="T:System.IO.Stream" /> 클래스에서 파생된 개체(예: <see cref="T:System.IO.MemoryStream" /> 개체)입니다.</param>
        <summary><see cref="T:System.IO.Stream" /> 클래스에서 파생된 개체의 컨트롤에 serialize된 데이터를 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Serialize 된 데이터를 로드 하려면이 메서드는 <xref:System.Windows.Forms.DataVisualization.Charting.Chart> 제어 합니다.  
  
 로드 작업이 발생 하는 경우 직렬화 가능 속성을 기본적으로 먼저 다시 설정 됩니다 기본값으로 지속형된 값으로 설정 하기 전에 저장 하는 경우. 이 동작을 변경 하려면 사용 된 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A> 속성입니다.  
  
 기본적으로 모든 직렬화 된 차트 속성 로드 됩니다. Serialize 된 특정 속성을 로드 하려면 설정 합니다 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> , <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 또는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성 데이터를 로드 하기 전에 합니다.  
  
 사용 하 여 데이터를 저장할 때 유의 한 `Save` 실제로 메서드를 기본이 아닌 값이 있는 속성만 직렬화 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Load(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Load : System.IO.TextReader -&gt; unit" Usage="chartSerializer.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">추상 <see cref="T:System.IO.StringReader" /> 클래스에서 파생된 <see cref="T:System.IO.TextReader" /> 등의 판독기입니다.</param>
        <summary><see cref="T:System.IO.TextReader" /> 클래스에서 파생된 판독기 개체의 컨트롤에 serialize된 데이터를 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Serialize 된 데이터를 로드 하려면이 메서드는 <xref:System.Windows.Forms.DataVisualization.Charting.Chart> 제어 합니다.  
  
 로드 작업이 발생 하는 경우 기본적으로 직렬화 가능 속성은 먼저 다시 설정 기본값으로 지속형된 값으로 설정 하기 전에 저장 하는 경우. 이 동작을 변경 하려면 사용 된 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A> 속성입니다.  
  
 기본적으로 모든 직렬화 된 차트 속성 로드 됩니다. 설정 하 여 합니다 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A>, <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 또는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성을 속성의 특정 집합을 로드할 수 있습니다.  
  
 이 정의 사용 하는 경우로 설정 된 형식으로는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Format%2A> 속성인 XML 이어야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.Load : string -&gt; unit" Usage="chartSerializer.Load fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">serialize된 데이터를 저장하는 데 사용되는 파일의 상대 또는 절대 경로입니다. 상대 경로가 지정된 경우 경로는 현재 디렉터리를 기준으로 합니다.</param>
        <summary>디스크에 저장된 serialize된 데이터를 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> 컨트롤에 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Serialize 된 데이터를 로드 하려면이 메서드는 <xref:System.Windows.Forms.DataVisualization.Charting.Chart> 제어 합니다.  
  
 로드 작업이 발생 하는 경우 직렬화 가능 속성을 기본적으로 먼저 다시 설정 됩니다 기본값으로 지속형된 값으로 설정 하기 전에 저장 하는 경우. 이 동작을 변경 하려면 사용 된 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A> 속성입니다.  
  
 기본적으로 모든 직렬화 된 차트 속성 로드 됩니다. Serialize 된 특정 속성을 로드 하려면 설정 합니다 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> , <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 또는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성 데이터를 로드 하기 전에 합니다.  
  
 사용 하 여 데이터를 저장할 때 유의 한 `Save` 실제로 메서드를 기본이 아닌 값이 있는 속성만 직렬화 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader -&gt; unit" Usage="chartSerializer.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">지속된 데이터를 읽어올 개체입니다. 개체가 <see cref="T:System.Xml.XmlReader" /> 클래스에서 파생되며, .NET 개체 또는 사용자 정의 개체일 수 있습니다.</param>
        <summary><see cref="T:System.Xml.XmlReader" /> 클래스에서 파생된 개체의 컨트롤에 serialize된 데이터를 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Serialize 된 데이터를 로드 하려면이 메서드는 <xref:System.Windows.Forms.DataVisualization.Charting.Chart> 제어 합니다.  
  
 로드 작업이 발생 하는 경우 기본적으로 직렬화 가능 속성은 먼저 다시 설정 기본값으로 지속형된 값으로 설정 하기 전에 저장 하는 경우. 이 동작을 변경 하려면 사용 된 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A> 속성입니다.  
  
 기본적으로 모든 직렬화 된 차트 속성 로드 됩니다. 설정한 경우에 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A>, <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 또는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성을 속성의 특정 집합을 로드할 수 있습니다.  
  
 이 정의 사용 하면 형식의 XML 이어야 합니다. 형식으로 변경할 수 있습니다는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Format%2A> 속성입니다.  
  
 단순성 사용에 대 한 XML 형식으로 텍스트 파일을 사용 하 여 작업할 때의 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Load%2A> 메서드 대신 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NonSerializableContent">
      <MemberSignature Language="C#" Value="public string NonSerializableContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NonSerializableContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent" />
      <MemberSignature Language="VB.NET" Value="Public Property NonSerializableContent As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NonSerializableContent { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NonSerializableContent : string with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>serialize되지 않을 차트 콘텐츠를 가져오거나 설정합니다.</summary>
        <value>serialize되지 않을 차트 속성을 나타내는 쉼표로 구분된 <see langword="string" /> 식입니다. 구문은 "Class.Property[,Class.Property]"입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 모든 차트 속성 수는 경우 직렬화를 `Save` 및 `Load` 메서드를 호출 합니다. 사용할 수는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성을 serialize 할 함께 사용 하 여 차트 특성을 제한 합니다 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 및 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성.  
  
  이 속성 결정 차트 특성을 serialize 되지 않습니다. 동일한 방식으로 문자열 식에서 와일드 카드를 사용할 수는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 속성입니다. 예를 들어 제외할 모든 차트 `BackColor` 이 속성을 설정 하는 직렬화에서 속성 "\*합니다. BackColor "입니다.  
  
 경우에 따라 속성 와일드 카드를 사용할 때 일반적인 되를 serialize 및 직렬화 되지 않은 모두 수 나 설정할 수 있습니다. 합니다 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 식에 비해 낮은 우선 순위에는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 식입니다. 그러나 와일드 카드를 사용 하는 문자열 식에 작은 가중치 지정는 note 합니다. 예를 들어 경우는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 속성이 "\*합니다. BackColor"및 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성이 <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackColor%2A>모든 `BackColor` 속성을 제외 하 고 <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea> serialize 될 개체입니다.  
  
 경우는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성이 설정 되어, 우선 순위에 얼마나 많은 와일드 카드를 사용 하는 종속 된 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 식입니다. 예를 들어 설정를 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성을 <xref:System.Windows.Forms.DataVisualization.Charting.SerializationContents.Appearance> 하면를 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 속성을 포함 하는 "\*. 다시\*"식입니다. 경우는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성이 "\*합니다. 다시\*"모든 `Back\*` 속성을 같은 차트 `BackColor`, `BackGradient`등, 직렬화 됩니다. 왜냐하면 합니다 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 속성 값에 비해 더 높은 우선 순위에는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성.  
  
 로드 하 고 작업을 다시 설정 하는 모든 저장,이 속성에 영향을 줍니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="chartSerializer.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>serialize되도록 표시된 모든 차트 속성을 다시 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로이 메서드가 모든 차트 속성을 기본값으로 다시 설정합니다.  
  
 차트 속성을 기본값으로 다시 설정 됩니다을 제한 하려면 사용 합니다 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A>, <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 고 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성입니다.  
  
 이 메서드는 라고도 자동으로 때를 `Load` 메서드를 사용 하며 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsResetWhenLoading%2A> 속성이 `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>기본값이 아닌 값을 가진 차트 속성을 저장합니다. 데이터를 비롯한 모든 차트 속성을 serialize할 수 있습니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Save(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.Stream -&gt; unit" Usage="chartSerializer.Save stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><see cref="T:System.IO.Stream" />과 같이 <see cref="T:System.IO.MemoryStream" /> 클래스에서 파생된 개체이며 차트 속성을 저장하는 데 사용됩니다.</param>
        <summary>기본값이 아닌 값을 가진 차트 데이터 및 속성을 <see cref="T:System.IO.Stream" /> 클래스에서 파생되는 개체에 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로이 메서드가 호출 될 때 데이터 요소를 포함 하는 기본이 아닌 값을 사용 하 여 모든 차트 속성 직렬화 됩니다. Serialize 될 차트 특성을 제어 합니다 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A>, <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 및 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성입니다.  
  
 이 메서드를 모양 속성을 템플릿으로 저장에 사용 된 경우는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsTemplateMode%2A> 의 속성을 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer> 개체 먼저 설정 됩니다 `true` 이 메서드를 호출 하기 전에 합니다.  
  
 차트의 템플릿으로 serialization 템플릿이 아닌 serialization;에서 다르게 발생 모양 속성을 중점적으로 직렬화 합니다.  
  
 템플릿으로으로 serialize 될 때를 <xref:System.Windows.Forms.DataVisualization.Charting.Chart.LoadTemplate%2A> 메서드를 사용 하 여를 차트에 대 한 모양 속성을 제공 하기 위해 템플릿을 로드할 수 있습니다.  
  
 템플릿은 사용자 지정 색상표를 시뮬레이션 하기 위해 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Save(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.Save : System.IO.TextWriter -&gt; unit" Usage="chartSerializer.Save writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" />와 같이 <see cref="T:System.IO.StringWriter" /> 클래스에서 파생된 개체이며 차트 속성을 저장하는 데 사용됩니다.</param>
        <summary>기본값이 아닌 값을 가진 차트 데이터 및 속성을 <see cref="T:System.IO.TextWriter" /> 클래스에서 파생되는 지정된 개체에 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로이 메서드가 호출 될 때 데이터 요소를 포함 하는 기본이 아닌 값을 사용 하 여 모든 차트 속성 직렬화 됩니다. 컨트롤 차트 특성으로 serialize 하는 사용 하는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A>, <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 및 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성입니다.  
  
 이 정의 사용 하면 형식의 XML 이어야 합니다. 형식을 사용 하 여 설정할 수는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Format%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="chartSerializer.Save fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">serialize된 데이터를 저장하는 데 사용되는 파일의 상대 또는 절대 경로입니다. 상대 경로가 지정된 경우 경로는 현재 디렉터리를 기준으로 합니다.</param>
        <summary>기본값이 아닌 값을 가진 차트 데이터 및 속성을 지정된 파일에 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로이 메서드가 호출 될 때 데이터 요소를 포함 하는 기본이 아닌 값을 사용 하 여 모든 차트 속성 직렬화 됩니다. 사용 하 여 직렬화 되도록 차트 특성을 제어 하는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A>, <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 및 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성입니다.  
  
 기본적으로 데이터를 XML 형식으로 저장 됩니다. 이진 형식으로 데이터를 저장 하려면 사용 된 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Format%2A> 속성입니다.  
  
 파일이 저장 된 디렉터리에 대 한 쓰기 권한을 설정 해야 하는 참고 합니다. 기본적으로 애플리케이션의 Bin 폴더입니다.  
  
 모양 속성을 템플릿으로 저장 하려면이 메서드는 사용 중인 경우 확인 합니다 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.IsTemplateMode%2A> 먼저 속성이 `true` 이 메서드를 호출 하기 전에 합니다.  
  
 차트의 템플릿으로 serialization 템플릿 serialization 모양 속성에 중점을 두기 때문에 주로 템플릿이 아닌 serialization에서 다르게 진행 됩니다.  
  
 템플릿으로으로 serialize 될 때를 <xref:System.Windows.Forms.DataVisualization.Charting.Chart.LoadTemplate%2A> 메서드를 사용 하 여를 차트에 대 한 모양 속성을 제공 하기 위해 템플릿을 로드할 수 있습니다.  
  
 템플릿은 사용자 지정 색상표를 시뮬레이션 하기 위해 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Save(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.Save : System.Xml.XmlWriter -&gt; unit" Usage="chartSerializer.Save writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.Xml.XmlWriter" /> 속성을 저장하는 데 사용되는 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" />에서 파생된 개체입니다.</param>
        <summary>기본값이 아닌 값을 가진 차트 데이터 및 속성을 <see cref="T:System.Xml.XmlWriter" /> 클래스에서 파생되는 지정된 개체에 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로이 메서드가 호출 될 때 데이터 요소를 포함 하는 기본이 아닌 값을 사용 하 여 모든 차트 속성 직렬화 됩니다. 컨트롤 차트 특성으로 serialize 하는 사용 하는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A>, <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 및 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성입니다.  
  
 이 정의 사용 하면 형식의 XML 이어야 합니다. 형식으로 변경할 수 있습니다는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Format%2A> 속성입니다.  
  
 단순성 사용에 대 한 XML 형식으로 텍스트 파일을 사용 하 여 작업할 때의 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Save%2A> 메서드 대신 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializableContent">
      <MemberSignature Language="C#" Value="public string SerializableContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SerializableContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent" />
      <MemberSignature Language="VB.NET" Value="Public Property SerializableContent As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SerializableContent { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SerializableContent : string with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>serialize할 수 있는 차트 속성을 가져오거나 설정합니다.</summary>
        <value>serialize될 차트 속성을 나타내는 쉼표로 구분된 <see langword="string" /> 식입니다. 구문은 "Class.Property[,Class.Property]"입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 모든 차트 속성 수는 경우 직렬화를 `Save` 및 `Load` 메서드를 호출 합니다. 사용할 수는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성을 serialize 할 함께 사용 하 여 차트 특성을 제한 합니다 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 및 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성.  
  
 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 속성 serialize 될 차트 특성을 결정 합니다. 동일한 방식으로 문자열 식에서 와일드 카드를 사용할 수는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성입니다. 예를 들어, serialize 할 모든 차트 `BackColor` 이 속성을 설정 하는 속성을 "*. BackColor "입니다.  
  
 경우 <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea> 및/또는 <xref:System.Windows.Forms.DataVisualization.Charting.Series> 자식 속성을 지정 하면 다음 모든 이름이 <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea> 하 고 <xref:System.Windows.Forms.DataVisualization.Charting.Series> 지속된 된 데이터를 기존에 적용할 수 있도록 개체도 지정 해야 합니다 <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea> 및 <xref:System.Windows.Forms.DataVisualization.Charting.Series> 개체 즉, "Series.Name" 및 "ChartArea.Name" 식을 지정 해야 합니다. 아래 샘플 코드에이 절차의 예제를 참조 하세요. 마찬가지로, 여러 차트 영역을 사용 하는 경우는 <xref:System.Windows.Forms.DataVisualization.Charting.Series.ChartArea%2A> 속성을 표시 하는 모든 <xref:System.Windows.Forms.DataVisualization.Charting.Series> 도 저장 해야 합니다.  
  
 경우에 따라 속성 와일드 카드를 사용할 때 일반적인 되를 serialize 및 직렬화 되지 않은 모두 수 나 설정할 수 있습니다. 합니다 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 식에 비해 낮은 우선 순위에는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 식입니다. 그러나 와일드 카드를 사용 하는 문자열 식에 작은 가중치 지정는 note 합니다. 예를 들어 경우는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 속성이 "*. BackColor"및 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.NonSerializableContent%2A> 속성이 <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea.BackColor%2A>, 모든 B`ackColor` 속성을 제외 하 고 <xref:System.Windows.Forms.DataVisualization.Charting.ChartArea> serialize 될 개체입니다.  
  
 설정 하는 경우는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성을 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 속성은 내부적으로 설정 됩니다. 경우는 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.Content%2A> 속성이 이미 설정 되어 있지만 다른 속성 serialize 될, 연결할 있는지 확인 해야 합니다 <xref:System.Windows.Forms.DataVisualization.Charting.ChartSerializer.SerializableContent%2A> 속성 추가 속성을 지정 하는 경우. 아래 샘플 코드에이 절차의 예제를 참조 하세요.  
  
 로드 하 고 작업을 다시 설정 하는 모든 저장,이 속성에 영향을 줍니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>