<Type Name="ContextMenu" FullName="System.Windows.Forms.ContextMenu">
  <Metadata><Meta Name="ms.openlocfilehash" Value="23e7471891f364d15b71744b3cb11af61f116105" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57914837" /></Metadata><TypeSignature Language="C#" Value="public class ContextMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContextMenu extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ContextMenu" />
  <TypeSignature Language="VB.NET" Value="Public Class ContextMenu&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContextMenu : System::Windows::Forms::Menu" />
  <TypeSignature Language="F#" Value="type ContextMenu = class&#xA;    inherit Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Popup")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>바로 가기 메뉴를 나타냅니다. <see cref="T:System.Windows.Forms.ContextMenuStrip" />은 이전 버전의 <see cref="T:System.Windows.Forms.ContextMenu" /> 컨트롤을 대체하고 확장한 컨트롤이지만 이전 버전과의 호환성 및 앞으로의 사용 가능성을 고려하여 <see cref="T:System.Windows.Forms.ContextMenu" />를 유지하도록 선택할 수 있습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ContextMenu> 클래스 컨트롤 또는 폼의 영역 위로 마우스 오른쪽 단추를 클릭할 때 표시 될 수 있는 바로 가기 메뉴를 나타냅니다. 바로 가기 메뉴는 일반적으로 다른 메뉴 항목을 결합 하는 데 사용 됩니다는 <xref:System.Windows.Forms.MainMenu> 응용 프로그램의 컨텍스트에서 사용자에 대 한 유용한 양식의 합니다. 예를 들어,에 할당 된 바로 가기 메뉴를 사용할 수 있습니다는 <xref:System.Windows.Forms.TextBox> 컨트롤 또는 텍스트 복사 및 붙여넣기에 대 한 클립보드 기능 내에서 텍스트 찾기 텍스트의 글꼴을 변경 하는 것에 대 한 메뉴 항목을 제공 하는 컨트롤입니다. 새로 표시할 수도 있습니다 <xref:System.Windows.Forms.MenuItem> 바로 가기 메뉴에서 내에 없는 개체를 <xref:System.Windows.Forms.MainMenu> 적합 하지 않은 경우 특정 명령을 제공 하는 <xref:System.Windows.Forms.MainMenu> 표시할 합니다.  
  
 일반적으로 바로 가기 메뉴를 사용자 컨트롤 또는 양식 자체를 통해 마우스 오른쪽 단추를 클릭할 때 표시 됩니다. 표시 컨트롤 및 <xref:System.Windows.Forms.Form> 가 <xref:System.Windows.Forms.Control.ContextMenu%2A> 바인딩되는 속성을 <xref:System.Windows.Forms.ContextMenu> 바로 가기 메뉴를 표시 하는 컨트롤 클래스. 하나 이상의 컨트롤을 사용 하 여 수를 <xref:System.Windows.Forms.ContextMenu>입니다. 사용할 수는 <xref:System.Windows.Forms.ContextMenu.SourceControl%2A> 속성을 컨트롤에 관련 된 태스크를 수행 하기 위해 또는 컨트롤에 대해 표시 되는 바로 가기 메뉴를 수정 하려면 마지막 바로 가기 메뉴를 표시 한 컨트롤을 결정 합니다.  
  
 확인 표시를 설정, 항목을 사용 하지 않도록 설정 하 고, 메뉴 사용자에 게 표시 되기 전에 다른 메뉴 작업을 수행 하기 위해 바로 가기 메뉴가 표시 되는 시기를 알려면 좋습니다. 처리할 수 있습니다는 <xref:System.Windows.Forms.ContextMenu.Popup> 바로 가기 메뉴를 표시 되는 경우를 결정 하는 이벤트입니다.  
  
> [!NOTE]
>  다시 사용할 수 있도록 <xref:System.Windows.Forms.MenuItem> 에 표시 되는 개체를 <xref:System.Windows.Forms.MainMenu> 에서 사용 하기 위해를 <xref:System.Windows.Forms.ContextMenu>를 사용 하 여 메뉴의 복사본을 만들어야 합니다를 <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> 메서드의 <xref:System.Windows.Forms.MenuItem> 클래스입니다. 단일 메뉴 항목 및 해당 하위 메뉴 항목을 병합할 수도 있습니다 <xref:System.Windows.Forms.MenuItem> 를 사용 하 여 개체를 <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> 메서드를 <xref:System.Windows.Forms.MenuItem> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에 대 한 이벤트 처리기를 만듭니다는 <xref:System.Windows.Forms.ContextMenu.Popup> 의 이벤트는 <xref:System.Windows.Forms.ContextMenu>합니다. 이벤트 처리기의 코드를 사용 하면 두 컨트롤의 결정을 <xref:System.Windows.Forms.PictureBox> 라는 `pictureBox1` 및 <xref:System.Windows.Forms.TextBox> 라는 `textBox1` 바로 가기 메뉴를 표시 하는 컨트롤입니다. 발생 하는 컨트롤에 따라 합니다 <xref:System.Windows.Forms.ContextMenu> 컨트롤 바로 가기 메뉴를 표시 하려면 적절 한 추가 <xref:System.Windows.Forms.MenuItem> 개체는 <xref:System.Windows.Forms.ContextMenu>합니다. 이 예에서는 인스턴스의 있어야 합니다 <xref:System.Windows.Forms.ContextMenu> 라는 클래스를 `contextMenu1`양식 내에서 정의 된 합니다. 이 예제에서는 또한 있어야를 <xref:System.Windows.Forms.TextBox> 및 <xref:System.Windows.Forms.PictureBox> 를 폼에 추가 합니다 <xref:System.Windows.Forms.Control.ContextMenu%2A> 이러한 컨트롤의 속성 `contextMenu1`.  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Menu" />
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="T:System.Windows.Forms.MainMenu" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ContextMenu" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContextMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContextMenu();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>지정된 메뉴 항목을 사용하지 않고 <see cref="T:System.Windows.Forms.ContextMenu" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 버전의 생성자를 사용한 후에 메뉴 항목을 추가할 수 있습니다는 <xref:System.Windows.Forms.ContextMenu> 를 사용 하 여는 <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> 메서드를 <xref:System.Windows.Forms.Menu.MenuItemCollection> 클래스입니다. 액세스할 수 있습니다 합니다 <xref:System.Windows.Forms.Menu.MenuItemCollection> 를 통해를 <xref:System.Windows.Forms.Menu.MenuItems%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Menu.MenuItemCollection" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContextMenu (System.Windows.Forms.MenuItem[] menuItems);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] menuItems) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (menuItems As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContextMenu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ menuItems);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ContextMenu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.ContextMenu" Usage="new System.Windows.Forms.ContextMenu menuItems" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="menuItems" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="menuItems">바로 가기 메뉴에 추가할 메뉴 항목을 나타내는 <see cref="T:System.Windows.Forms.MenuItem" /> 개체의 배열입니다.</param>
        <summary>지정된 <see cref="T:System.Windows.Forms.ContextMenu" /> 개체의 집합을 사용하여 <see cref="T:System.Windows.Forms.MenuItem" />클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 버전의 생성자를 사용 하 여 만들려는 <xref:System.Windows.Forms.ContextMenu> 해당 메뉴 항목이 만들어질 때 지정한 포함 된 합니다. 이 버전의 생성자를 사용한 후에 추가 메뉴 항목을 추가할 수 있습니다는 <xref:System.Windows.Forms.ContextMenu> 를 사용 하 여는 <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> 메서드를 <xref:System.Windows.Forms.Menu.MenuItemCollection> 클래스입니다. 액세스할 수 있습니다 합니다 <xref:System.Windows.Forms.Menu.MenuItemCollection> 를 통해를 <xref:System.Windows.Forms.Menu.MenuItems%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 바로 가기 메뉴를 생성 및 사용 된 <xref:System.Windows.Forms.ContextMenu.Show%2A> 메서드. 예제를 실행 하려면 Button1 이라는 단추를 포함 하는 폼에 다음 코드를 붙여 넣습니다. 모든 이벤트의 이벤트 처리 메서드를 사용 하 여 연결 되도록 합니다.  
  
 [!code-cpp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ContextMenu.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Collapse As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Collapse;" />
      <MemberSignature Language="F#" Value="member this.Collapse : EventHandler " Usage="member this.Collapse : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>바로 가기 메뉴가 축소될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.ContextMenu.Collapse> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.ContextMenu> 라는 `ContextMenu1`합니다. 연결 된 이벤트 처리기는 확인 된 <xref:System.Windows.Forms.ContextMenu.Collapse> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#170](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#170)]
 [!code-vb[System.Windows.Forms.EventExamples#170](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.OnCollapse(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCollapse (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCollapse(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCollapse : EventArgs -&gt; unit&#xA;override this.OnCollapse : EventArgs -&gt; unit" Usage="contextMenu.OnCollapse e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary><see cref="E:System.Windows.Forms.ContextMenu.Collapse" /> 이벤트를 발생시킵니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPopup">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.OnPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPopup(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPopup : EventArgs -&gt; unit&#xA;override this.OnPopup : EventArgs -&gt; unit" Usage="contextMenu.OnPopup e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary><see cref="E:System.Windows.Forms.ContextMenu.Popup" /> 이벤트를 발생시킵니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Popup">
      <MemberSignature Language="C#" Value="public event EventHandler Popup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Popup" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ContextMenu.Popup" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Popup As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Popup;" />
      <MemberSignature Language="F#" Value="member this.Popup : EventHandler " Usage="member this.Popup : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>바로 가기 메뉴가 표시되기 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트를 사용 하 여 초기화 하는 <xref:System.Windows.Forms.MenuItem> 표시 되기 전에 개체입니다. 예를 들어, 사용 하는 경우는 <xref:System.Windows.Forms.ContextMenu> 3에 대 한 <xref:System.Windows.Forms.TextBox> 제어 하에 특정 메뉴 항목을 사용 하지 않도록 설정 하려면 합니다 <xref:System.Windows.Forms.ContextMenu> 에 따라 <xref:System.Windows.Forms.TextBox> 는 바로 가기 메뉴를 표시 하는,이 이벤트에 대 한 이벤트 처리기를 만들 수 있습니다. 사용할 수 있습니다는 <xref:System.Windows.Forms.ContextMenu.SourceControl%2A> 속성을 결정 <xref:System.Windows.Forms.TextBox> 표시 되려고 합니다 <xref:System.Windows.Forms.ContextMenu> 적절 한 사용 하지 않도록 설정 하 고 <xref:System.Windows.Forms.MenuItem> 개체.  
  
 이벤트 처리에 대한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md) 을 참조하십시오.  
  
   
  
## Examples  
 다음 코드 예제에 대 한 이벤트 처리기를 만듭니다는 <xref:System.Windows.Forms.ContextMenu.Popup> 의 이벤트는 <xref:System.Windows.Forms.ContextMenu>합니다. 이벤트 처리기의 코드를 사용 하면 두 컨트롤의 결정을 <xref:System.Windows.Forms.PictureBox> 라는 `pictureBox1` 및 <xref:System.Windows.Forms.TextBox> 라는 `textBox1` 바로 가기 메뉴를 표시 하는 컨트롤입니다. 발생 하는 컨트롤에 따라 합니다 <xref:System.Windows.Forms.ContextMenu> 컨트롤 바로 가기 메뉴를 표시 하려면 적절 한 추가 <xref:System.Windows.Forms.MenuItem> 개체는 <xref:System.Windows.Forms.ContextMenu>합니다. 이 예에서는 인스턴스의 있어야 합니다 <xref:System.Windows.Forms.ContextMenu> 라는 클래스를 `contextMenu1`양식 내에서 정의 된 합니다. 이 예제에서는 또한 있어야를 <xref:System.Windows.Forms.TextBox> 및 <xref:System.Windows.Forms.PictureBox> 를 폼에 추가 합니다 <xref:System.Windows.Forms.Control.ContextMenu%2A> 이러한 컨트롤의 속성 `contextMenu1`.  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData, System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData, class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys,System.Windows.Forms.Control)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData, System::Windows::Forms::Control ^ control);" />
      <MemberSignature Language="F#" Value="override this.ProcessCmdKey :  * System.Windows.Forms.Keys * System.Windows.Forms.Control -&gt; bool" Usage="contextMenu.ProcessCmdKey (msg, keyData, control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="control" Type="System.Windows.Forms.Control" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="msg">처리할 창 메시지를 나타내며 참조에 의해 전달되는 <see cref="T:System.Windows.Forms.Message" />입니다.</param>
        <param name="keyData">처리할 키를 나타내는 <see cref="T:System.Windows.Forms.Keys" /> 값 중 하나입니다.</param>
        <param name="control">명령 키가 적용될 컨트롤입니다.</param>
        <summary>명령 키를 처리합니다.</summary>
        <returns>컨트롤이 문자를 처리하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 명령 키를 처리 하기 위해 메시지를 전처리 하는 동안 호출 됩니다. 명령 키가 일반 입력된 키 보다 항상 우선 하는 키입니다. 명령 키의 예로 가속기 및 바로 가기 메뉴를 들 수 있습니다. 메서드를 반환 해야 합니다 `true` 명령 키를 처리 했음을 나타내기 위해 또는 `false` 키 명령 키 임을 나타냅니다. 이 메서드는 컨트롤은 ActiveX 컨트롤 또는 Windows Forms 응용 프로그램에서 호스트 되는 경우에 호출 됩니다.  
  
 <xref:System.Windows.Forms.ContextMenu.ProcessCmdKey%2A> 메서드는 컨트롤에 있는지 여부를 먼저 확인을 <xref:System.Windows.Forms.ContextMenu>, 그럴 경우 사용 하도록 설정 하 고는 <xref:System.Windows.Forms.ContextMenu> 명령 키를 처리 하는 데. 부모에 전달 된 키에 명령 키가 메뉴 바로 가기 컨트롤에 부모를 <xref:System.Windows.Forms.ContextMenu.ProcessCmdKey%2A> 메서드. 이렇게 하면은 키는 "버블링" 컨트롤 계층 구조는 명령입니다. 사용자가 누른 키 외에도 키 데이터도 나타냅니다에서 보조키를 눌렀는지 있는 경우 키와 같은 시간입니다. 보조키는 SHIFT, CTRL 및 ALT 키를 포함 합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">비관리 코드를 호출할 즉각적인 호출자가입니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides"><para>재정의 하는 경우는 <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> 파생된 클래스에서 메서드를 컨트롤을 반환 해야 <see langword="true" /> 키를 처리 했음을 나타냅니다. 기본 클래스의 호출 결과 컨트롤에 의해 처리 되지 않는 키에 대 한 <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> 메서드 반환 되어야 합니다. 컨트롤을 거의 경우 어느 해야이 메서드를 재정의 합니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContextMenu.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.ContextMenu.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤의 텍스트가 오른쪽에서 왼쪽으로 표시되는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Windows.Forms.RightToLeft" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에 메뉴가 오른쪽에서 왼쪽으로 기록 되는 언어를 지원할 수 있습니다. 이 속성 설정 된 경우 `RightToLeft.Yes`, 메뉴 항목 텍스트를 오른쪽에서 왼쪽으로 기본값 대신 표시 됩니다.  
  
> [!NOTE]
>  오른쪽에서 왼쪽 맞춤을 사용 하도록 설정 하면 Windows Forms 컨트롤에 미치는 영향에 대 한 자세한 내용은 참조는 <xref:System.Windows.Forms.Control.RightToLeft%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">속성에 할당된 값이 <see cref="T:System.Windows.Forms.RightToLeft" /> 열거형의 올바른 멤버가 아닌 경우</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Show">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 위치에 바로 가기 메뉴를 표시합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (System.Windows.Forms.Control control, System.Drawing.Point pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class System.Windows.Forms.Control control, valuetype System.Drawing.Point pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show(System::Windows::Forms::Control ^ control, System::Drawing::Point pos);" />
      <MemberSignature Language="F#" Value="member this.Show : System.Windows.Forms.Control * System.Drawing.Point -&gt; unit" Usage="contextMenu.Show (control, pos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="pos" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="control">이 바로 가기 메뉴가 연결된 컨트롤을 지정하는 <see cref="T:System.Windows.Forms.Control" />입니다.</param>
        <param name="pos">메뉴가 표시될 좌표를 지정하는 <see cref="T:System.Drawing.Point" />입니다. 이 좌표는 <paramref name="control" /> 매개 변수에서 지정된 컨트롤의 클라이언트 좌표에 대한 상대 좌표로 지정됩니다.</param>
        <summary>지정된 위치에 바로 가기 메뉴를 표시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 <xref:System.Windows.Forms.ContextMenu> 컨트롤 또는 폼의 영역에서 마우스 오른쪽 단추를 클릭할 때 표시 되는 <xref:System.Windows.Forms.ContextMenu> 에 바인딩됩니다. 수동으로 특정 위치에 바로 가기 메뉴를 표시 하 고 특정 컨트롤에 바인딩할이 메서드를 사용할 수 있습니다. 이 메서드는 메뉴가 해제 될 때까지 반환 하지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 바로 가기 메뉴를 생성 및 사용 된 <xref:System.Windows.Forms.ContextMenu.Show%2A> 메서드. 예제를 실행 하려면 Button1 이라는 단추를 포함 하는 폼에 다음 코드를 붙여 넣습니다. 모든 이벤트의 이벤트 처리 메서드를 사용 하 여 연결 되도록 합니다.  
  
 [!code-cpp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">컨트롤의 핸들이 없거나 컨트롤이 표시되지 않는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (System.Windows.Forms.Control control, System.Drawing.Point pos, System.Windows.Forms.LeftRightAlignment alignment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class System.Windows.Forms.Control control, valuetype System.Drawing.Point pos, valuetype System.Windows.Forms.LeftRightAlignment alignment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.LeftRightAlignment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show(System::Windows::Forms::Control ^ control, System::Drawing::Point pos, System::Windows::Forms::LeftRightAlignment alignment);" />
      <MemberSignature Language="F#" Value="member this.Show : System.Windows.Forms.Control * System.Drawing.Point * System.Windows.Forms.LeftRightAlignment -&gt; unit" Usage="contextMenu.Show (control, pos, alignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="pos" Type="System.Drawing.Point" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="alignment" Type="System.Windows.Forms.LeftRightAlignment" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="control">이 바로 가기 메뉴가 연결된 컨트롤을 지정하는 <see cref="T:System.Windows.Forms.Control" />입니다.</param>
        <param name="pos">메뉴가 표시될 좌표를 지정하는 <see cref="T:System.Drawing.Point" />입니다. 이 좌표는 <paramref name="control" /> 매개 변수에서 지정된 컨트롤의 클라이언트 좌표에 대한 상대 좌표로 지정됩니다.</param>
        <param name="alignment"><paramref name="pos" /> 매개 변수에 상대적인 컨트롤의 맞춤을 지정하는 <see cref="T:System.Windows.Forms.LeftRightAlignment" />입니다.</param>
        <summary>지정된 맞춤을 사용하여 지정된 위치에 바로 가기 메뉴를 표시합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control SourceControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control SourceControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContextMenu.SourceControl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ SourceControl { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SourceControl : System.Windows.Forms.Control" Usage="System.Windows.Forms.ContextMenu.SourceControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>바로 가기 메뉴를 표시하는 컨트롤을 가져옵니다.</summary>
        <value>바로 가기 메뉴를 표시하는 컨트롤을 나타내는 <see cref="T:System.Windows.Forms.Control" />입니다. 바로 가기 메뉴를 표시하는 컨트롤이 없으면 속성이 <see langword="null" />을 반환합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 사용 하면 제어 하는 현재 표시를 확인할 수 있습니다에 정의 된 바로 가기 메뉴를 <xref:System.Windows.Forms.ContextMenu>입니다. 바로 가기 메뉴를 현재 표시 되지 않으면, 마지막으로 바로 가기 메뉴를 표시 한 컨트롤을 확인 하려면이 속성을 사용할 수 있습니다. 이 속성을 사용할 수는 <xref:System.Windows.Forms.ContextMenu.Popup> 이벤트 컨트롤에 적절 한 메뉴 항목을 표시 하도록 합니다. 또한 바로 가기 메뉴에 표시 되는 메뉴 명령과 사용 하 여 연관 된 태스크를 수행 하는 메서드를 컨트롤에 대 한 참조를 전달 하려면이 속성을 사용할 수 있습니다. 있으므로 <xref:System.Windows.Forms.Form> 클래스에서 상속 <xref:System.Windows.Forms.Control>, 경우에이 속성을 사용할 수 있습니다는 <xref:System.Windows.Forms.ContextMenu> 형식과 연결 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에 대 한 이벤트 처리기를 만듭니다는 <xref:System.Windows.Forms.ContextMenu.Popup> 의 이벤트는 <xref:System.Windows.Forms.ContextMenu>합니다. 이벤트 처리기의 코드를 사용 하면 두 컨트롤의 결정을 <xref:System.Windows.Forms.PictureBox> 라는 `pictureBox1` 및 <xref:System.Windows.Forms.TextBox> 라는 `textBox1` 바로 가기 메뉴를 표시 하는 컨트롤입니다. 발생 하는 컨트롤에 따라 합니다 <xref:System.Windows.Forms.ContextMenu> 컨트롤 바로 가기 메뉴를 표시 하려면 적절 한 추가 <xref:System.Windows.Forms.MenuItem> 개체는 <xref:System.Windows.Forms.ContextMenu>합니다. 이 예에서는 인스턴스의 있어야 합니다 <xref:System.Windows.Forms.ContextMenu> 라는 클래스를 `contextMenu1`양식 내에서 정의 된 합니다. 이 예제에서는 또한 있어야를 <xref:System.Windows.Forms.TextBox> 및 <xref:System.Windows.Forms.PictureBox> 를 폼에 추가 합니다 <xref:System.Windows.Forms.Control.ContextMenu%2A> 이러한 컨트롤의 속성 `contextMenu1`.  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>