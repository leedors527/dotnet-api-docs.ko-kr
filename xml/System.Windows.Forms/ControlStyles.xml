<Type Name="ControlStyles" FullName="System.Windows.Forms.ControlStyles">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d3fb1ee20da0a8b989a0aaabb24acd73d784b2ee" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56361126" /></Metadata><TypeSignature Language="C#" Value="public enum ControlStyles" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ControlStyles extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ControlStyles" />
  <TypeSignature Language="VB.NET" Value="Public Enum ControlStyles" />
  <TypeSignature Language="C++ CLI" Value="public enum class ControlStyles" />
  <TypeSignature Language="F#" Value="type ControlStyles = " />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>컨트롤의 스타일 및 동작을 지정합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 컨트롤 기능을 지정이 열거형에 다양 한 속성 및 메서드를 사용 합니다. 컨트롤을 호출 하 여 스타일을 설정할 수 있습니다.는 <xref:System.Windows.Forms.Control.SetStyle%2A> 메서드와 해당 전달 <xref:System.Windows.Forms.ControlStyles> 비트 (또는 비트) 및 비트가 설정 되도록는 부울 값입니다. 예를 들어, Visual Basic 코드의 다음 줄은 이중 버퍼링을 사용 합니다.  
  
```  
myControl.SetStyle(UserPaint Or AllPaintingInWmPaint Or DoubleBuffer, True)  
```  
  
 AllPaintingInWmPaint 비트 설정 된 경우 `true`, WM_ERASEBKGND가 무시 되는 창 메시지와 <xref:System.Windows.Forms.Control.OnPaintBackground%2A> 고 <xref:System.Windows.Forms.Control.OnPaint%2A> WM_PAINT 창 메시지에서 직접 메서드 호출 됩니다. 이 일반적으로 다른 컨트롤과 컨트롤에 WM_ERASEBKGND 창 메시지를 전송 하지 않는 한 깜박임을 줄입니다. SupportsTransparentBackColor; 비슷합니다 의사 (pseudo) 투명 효과 달성 하기 위해 WM_ERASEBKGRND 창 메시지를 보낼 수 있습니다. 예를 들어, 한 <xref:System.Windows.Forms.ToolBar> 평면 모양으로 표시를 사용 하 여이 작업을 수행 합니다.  
  
 이중 버퍼링를 완전히 활성화 하려면 OptimizedDoubleBuffer 및 AllPaintingInWmPaint 비트를 설정할 수 있습니다 `true`합니다. 그러나는 이중 버퍼링을 사용 하도록 설정 하는 것에 대 한 동일한 결과 생성 하는 것이 좋습니다 설정 하는 <xref:System.Windows.Forms.Control.DoubleBuffered%2A> 컨트롤에 대 한 속성 `true`합니다.  
  
 SupportsTransparentBackColor 비트 설정 된 경우 `true`, 및 <xref:System.Windows.Forms.Control.BackColor%2A> 알파 구성 요소가 255 미만인 색으로 설정 되어 <xref:System.Windows.Forms.Control.OnPaintBackground%2A> 배경을 그릴 부모 컨트롤을 요청 하 여 투명도 시뮬레이션 합니다. 진정한 투명성 아닙니다.  
  
> [!NOTE]
>  부모 컨트롤 간의 다른 컨트롤의 경우 현재 컨트롤은 컨트롤 가운데에 표시 되지 않습니다.  
  
 UserMouse 비트로 설정 되 면 `true`, 다음 메서드는 계속 호출: <xref:System.Windows.Forms.Control.OnMouseDown%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.OnMouseUp%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.OnMouseEnter%2A?displayProperty=nameWithType>를 <xref:System.Windows.Forms.Control.OnMouseMove%2A?displayProperty=nameWithType>를 <xref:System.Windows.Forms.Control.OnMouseHover%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.OnMouseLeave%2A?displayProperty=nameWithType>, 및 <xref:System.Windows.Forms.Control.OnMouseWheel%2A?displayProperty=nameWithType>합니다.  
  
 컨트롤을 클릭할 시키려면 비트 설정 된 경우 경우 `true` 는 <xref:System.Windows.Forms.Control.OnClick%2A?displayProperty=nameWithType> 메서드가 호출 되 고 발생을 <xref:System.Windows.Forms.Control.Click?displayProperty=nameWithType> 이벤트. 컨트롤을 두 번 클릭, 시간과 시키려면와 StandardDoubleClick 비트가 설정 되어 `true`, 클릭에 전달 되는 <xref:System.Windows.Forms.Control.DoubleClick> 이벤트. 그런 다음 <xref:System.Windows.Forms.Control.OnDoubleClick%2A?displayProperty=nameWithType> 메서드가 호출 되 고 발생 된 <xref:System.Windows.Forms.Control.DoubleClick?displayProperty=nameWithType> 이벤트입니다. 그러나 컨트롤을 호출할 수 <xref:System.Windows.Forms.Control.OnClick%2A> 또는 <xref:System.Windows.Forms.Control.OnDoubleClick%2A> 직접 시키려면 및 StandardDoubleClick에 관계 없이 비트 값입니다. 컨트롤에 대 한 자세한 내용은 클릭 고 두 번 클릭 동작을 표시 합니다 <xref:System.Windows.Forms.Control.Click?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.Control.DoubleClick?displayProperty=nameWithType> 항목입니다.  
  
 UseTextForAccessibility 비트가 설정 된 컨트롤의 값이 있는 시점과 `Text` 속성을 제어 하는 값 `Text` 속성 컨트롤의 기본 Active Accessibility 이름 및 바로 가기 키를 결정 합니다. 그렇지 않으면 이전 텍스트 <xref:System.Windows.Forms.Label> 컨트롤 대신 사용 됩니다. 이 스타일은 기본적으로 설정 됩니다. 등의 특정 기본 제공 컨트롤 형식은 <xref:System.Windows.Forms.TextBox> 및 <xref:System.Windows.Forms.ComboBox>,이 스타일을 다시 설정 되도록는 `Text` Active Accessibility 하 여 해당 컨트롤의 속성이 사용 되지 것입니다.  
  
   
  
## Examples  
 다음 예제를 사용 하는 방법을 보여 줍니다 <xref:System.Windows.Forms.ControlStyles> 사용 하 여는 <xref:System.Windows.Forms.Control.StyleChanged> 이벤트입니다.  
  
 [!code-cpp[Control_StyleChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_StyleChanged/CPP/control_stylechanged.cpp#1)]
 [!code-csharp[Control_StyleChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_StyleChanged/CS/control_stylechanged.cs#1)]
 [!code-vb[Control_StyleChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_StyleChanged/VB/control_stylechanged.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>표준 Windows Forms 컨트롤에서 상속 하 고 변경 합니다 <see cref="F:System.Windows.Forms.ControlStyles.StandardClick" /> 또는 <see cref="F:System.Windows.Forms.ControlStyles.StandardDoubleClick" /> 비트 값을 <see langword="true" /> 예기치 않은 동작이 발생할 수 있습니다 또는 영향을 주지 않을 전혀 컨트롤을 지원 하지 않는 경우의 <see cref="E:System.Windows.Forms.Control.Click" /> 또는 <see cref="E:System.Windows.Forms.Control.DoubleClick" /> 이벤트입니다.</para></block>
    <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
    <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
  </Docs>
  <Members>
    <Member MemberName="AllPaintingInWmPaint">
      <MemberSignature Language="C#" Value="AllPaintingInWmPaint" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles AllPaintingInWmPaint = int32(8192)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint" />
      <MemberSignature Language="VB.NET" Value="AllPaintingInWmPaint" />
      <MemberSignature Language="C++ CLI" Value="AllPaintingInWmPaint" />
      <MemberSignature Language="F#" Value="AllPaintingInWmPaint = 8192" Usage="System.Windows.Forms.ControlStyles.AllPaintingInWmPaint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>8192</MemberValue>
      <Docs>
        <summary><see langword="true" />이면 컨트롤은 깜빡임을 줄이기 위해 WM_ERASEBKGND 창 메시지를 무시합니다. 이 스타일은 <see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /> 비트가 <see langword="true" />로 설정된 경우에만 적용되어야 합니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="CacheText">
      <MemberSignature Language="C#" Value="CacheText" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles CacheText = int32(16384)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.CacheText" />
      <MemberSignature Language="VB.NET" Value="CacheText" />
      <MemberSignature Language="C++ CLI" Value="CacheText" />
      <MemberSignature Language="F#" Value="CacheText = 16384" Usage="System.Windows.Forms.ControlStyles.CacheText" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>16384</MemberValue>
      <Docs>
        <summary><see langword="true" />이면 컨트롤은 필요할 때마다 <see cref="P:System.Windows.Forms.Control.Handle" />에서 텍스트를 가져오지 않고 텍스트 복사본을 유지합니다. 이 스타일의 기본값은 <see langword="false" />입니다. 이 동작에 의해 성능은 향상되지만 텍스트를 동기화 상태로 유지하기가 어렵습니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="ContainerControl">
      <MemberSignature Language="C#" Value="ContainerControl" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles ContainerControl = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.ContainerControl" />
      <MemberSignature Language="VB.NET" Value="ContainerControl" />
      <MemberSignature Language="C++ CLI" Value="ContainerControl" />
      <MemberSignature Language="F#" Value="ContainerControl = 1" Usage="System.Windows.Forms.ControlStyles.ContainerControl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><see langword="true" />이면 컨트롤이 컨테이너와 유사한 컨트롤입니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffer">
      <MemberSignature Language="C#" Value="DoubleBuffer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles DoubleBuffer = int32(65536)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.DoubleBuffer" />
      <MemberSignature Language="VB.NET" Value="DoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="DoubleBuffer" />
      <MemberSignature Language="F#" Value="DoubleBuffer = 65536" Usage="System.Windows.Forms.ControlStyles.DoubleBuffer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>65536</MemberValue>
      <Docs>
        <summary><see langword="true" />이면 그리기가 버퍼에서 수행되고 완료된 후에 결과가 화면에 출력됩니다. 이중 버퍼링은 컨트롤을 다시 그릴 때 발생하는 깜박임을 방지합니다. <see cref="F:System.Windows.Forms.ControlStyles.DoubleBuffer" />를 <see langword="true" />로 설정한 경우 <see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /> 및 <see cref="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint" />도 <see langword="true" />로 설정해야 합니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="EnableNotifyMessage">
      <MemberSignature Language="C#" Value="EnableNotifyMessage" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles EnableNotifyMessage = int32(32768)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.EnableNotifyMessage" />
      <MemberSignature Language="VB.NET" Value="EnableNotifyMessage" />
      <MemberSignature Language="C++ CLI" Value="EnableNotifyMessage" />
      <MemberSignature Language="F#" Value="EnableNotifyMessage = 32768" Usage="System.Windows.Forms.ControlStyles.EnableNotifyMessage" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>32768</MemberValue>
      <Docs>
        <summary><see langword="true" />이면 <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />로 전송되는 모든 메시지에 대해 <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> 메서드가 호출됩니다. 이 스타일의 기본값은 <see langword="false" />입니다. <see cref="F:System.Windows.Forms.ControlStyles.EnableNotifyMessage" />는 부분 신뢰 환경에서 작동하지 않습니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="FixedHeight">
      <MemberSignature Language="C#" Value="FixedHeight" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles FixedHeight = int32(64)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.FixedHeight" />
      <MemberSignature Language="VB.NET" Value="FixedHeight" />
      <MemberSignature Language="C++ CLI" Value="FixedHeight" />
      <MemberSignature Language="F#" Value="FixedHeight = 64" Usage="System.Windows.Forms.ControlStyles.FixedHeight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>64</MemberValue>
      <Docs>
        <summary><see langword="true" />이면 컨트롤은 자동으로 크기가 조정될 때 높이가 고정됩니다. 예를 들어 레이아웃 작업이 새 <see cref="T:System.Drawing.Font" />를 수용하도록 컨트롤의 크기를 변경하려고 할 경우 컨트롤의 <see cref="P:System.Windows.Forms.Control.Height" />는 그대로 유지됩니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="FixedWidth">
      <MemberSignature Language="C#" Value="FixedWidth" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles FixedWidth = int32(32)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.FixedWidth" />
      <MemberSignature Language="VB.NET" Value="FixedWidth" />
      <MemberSignature Language="C++ CLI" Value="FixedWidth" />
      <MemberSignature Language="F#" Value="FixedWidth = 32" Usage="System.Windows.Forms.ControlStyles.FixedWidth" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>32</MemberValue>
      <Docs>
        <summary><see langword="true" />이면 컨트롤은 자동으로 크기가 조정될 때 너비가 고정됩니다. 예를 들어 레이아웃 작업이 새 <see cref="T:System.Drawing.Font" />를 수용하도록 컨트롤의 크기를 변경하려고 할 경우 컨트롤의 <see cref="P:System.Windows.Forms.Control.Width" />는 그대로 유지됩니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="Opaque">
      <MemberSignature Language="C#" Value="Opaque" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles Opaque = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.Opaque" />
      <MemberSignature Language="VB.NET" Value="Opaque" />
      <MemberSignature Language="C++ CLI" Value="Opaque" />
      <MemberSignature Language="F#" Value="Opaque = 4" Usage="System.Windows.Forms.ControlStyles.Opaque" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary><see langword="true" />이면 컨트롤은 불투명하게 그려지고 배경은 그려지지 않습니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="OptimizedDoubleBuffer">
      <MemberSignature Language="C#" Value="OptimizedDoubleBuffer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles OptimizedDoubleBuffer = int32(131072)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
      <MemberSignature Language="VB.NET" Value="OptimizedDoubleBuffer" />
      <MemberSignature Language="C++ CLI" Value="OptimizedDoubleBuffer" />
      <MemberSignature Language="F#" Value="OptimizedDoubleBuffer = 131072" Usage="System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>131072</MemberValue>
      <Docs>
        <summary><see langword="true" />이면 컨트롤은 화면에 직접 그려지지 않고 먼저 버퍼에 그려지므로 깜빡임을 줄일 수 있습니다. 이 속성을 <see langword="true" />로 설정하는 경우 <see cref="F:System.Windows.Forms.ControlStyles.AllPaintingInWmPaint" />도 <see langword="true" />로 설정해야 합니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="ResizeRedraw">
      <MemberSignature Language="C#" Value="ResizeRedraw" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles ResizeRedraw = int32(16)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.ResizeRedraw" />
      <MemberSignature Language="VB.NET" Value="ResizeRedraw" />
      <MemberSignature Language="C++ CLI" Value="ResizeRedraw" />
      <MemberSignature Language="F#" Value="ResizeRedraw = 16" Usage="System.Windows.Forms.ControlStyles.ResizeRedraw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary><see langword="true" />이면 컨트롤은 크기가 조정될 때 다시 그려집니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="Selectable">
      <MemberSignature Language="C#" Value="Selectable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles Selectable = int32(512)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.Selectable" />
      <MemberSignature Language="VB.NET" Value="Selectable" />
      <MemberSignature Language="C++ CLI" Value="Selectable" />
      <MemberSignature Language="F#" Value="Selectable = 512" Usage="System.Windows.Forms.ControlStyles.Selectable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>512</MemberValue>
      <Docs>
        <summary><see langword="true" />이면 컨트롤이 포커스를 받을 수 있습니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="StandardClick">
      <MemberSignature Language="C#" Value="StandardClick" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles StandardClick = int32(256)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.StandardClick" />
      <MemberSignature Language="VB.NET" Value="StandardClick" />
      <MemberSignature Language="C++ CLI" Value="StandardClick" />
      <MemberSignature Language="F#" Value="StandardClick = 256" Usage="System.Windows.Forms.ControlStyles.StandardClick" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary><see langword="true" />이면 컨트롤은 표준 <see cref="E:System.Windows.Forms.Control.Click" /> 동작을 구현합니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="StandardDoubleClick">
      <MemberSignature Language="C#" Value="StandardDoubleClick" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles StandardDoubleClick = int32(4096)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.StandardDoubleClick" />
      <MemberSignature Language="VB.NET" Value="StandardDoubleClick" />
      <MemberSignature Language="C++ CLI" Value="StandardDoubleClick" />
      <MemberSignature Language="F#" Value="StandardDoubleClick = 4096" Usage="System.Windows.Forms.ControlStyles.StandardDoubleClick" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>4096</MemberValue>
      <Docs>
        <summary><see langword="true" />이면 컨트롤은 표준 <see cref="E:System.Windows.Forms.Control.DoubleClick" /> 동작을 구현합니다. 이 스타일은 <see cref="F:System.Windows.Forms.ControlStyles.StandardClick" /> 비트가 <see langword="true" />로 설정되지 않으면 무시됩니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="SupportsTransparentBackColor">
      <MemberSignature Language="C#" Value="SupportsTransparentBackColor" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles SupportsTransparentBackColor = int32(2048)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.SupportsTransparentBackColor" />
      <MemberSignature Language="VB.NET" Value="SupportsTransparentBackColor" />
      <MemberSignature Language="C++ CLI" Value="SupportsTransparentBackColor" />
      <MemberSignature Language="F#" Value="SupportsTransparentBackColor = 2048" Usage="System.Windows.Forms.ControlStyles.SupportsTransparentBackColor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>2048</MemberValue>
      <Docs>
        <summary><see langword="true" />이면 컨트롤은 투명도를 시뮬레이트하기 위해 알파 구성 요소가 255 미만인 <see cref="P:System.Windows.Forms.Control.BackColor" />를 수락합니다. <see cref="F:System.Windows.Forms.ControlStyles.UserPaint" /> 비트가 <see langword="true" />로 설정되고 부모 컨트롤이 <see cref="T:System.Windows.Forms.Control" />에서 파생될 경우에만 투명도가 시뮬레이트됩니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="UserMouse">
      <MemberSignature Language="C#" Value="UserMouse" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles UserMouse = int32(1024)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.UserMouse" />
      <MemberSignature Language="VB.NET" Value="UserMouse" />
      <MemberSignature Language="C++ CLI" Value="UserMouse" />
      <MemberSignature Language="F#" Value="UserMouse = 1024" Usage="System.Windows.Forms.ControlStyles.UserMouse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>1024</MemberValue>
      <Docs>
        <summary><see langword="true" />이면 컨트롤은 자체 마우스 처리를 수행하고 마우스 이벤트가 운영 체제에 의해 처리되지 않습니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="UserPaint">
      <MemberSignature Language="C#" Value="UserPaint" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles UserPaint = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.UserPaint" />
      <MemberSignature Language="VB.NET" Value="UserPaint" />
      <MemberSignature Language="C++ CLI" Value="UserPaint" />
      <MemberSignature Language="F#" Value="UserPaint = 2" Usage="System.Windows.Forms.ControlStyles.UserPaint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><see langword="true" />이면 운영 체제에서 컨트롤을 그리지 않고 컨트롤이 자체적으로 그려집니다. <see langword="false" />이면 <see cref="E:System.Windows.Forms.Control.Paint" /> 이벤트가 발생하지 않습니다. 이 스타일은 <see cref="T:System.Windows.Forms.Control" />에서 파생된 클래스에만 적용됩니다.</summary>
      </Docs>
    </Member>
    <Member MemberName="UseTextForAccessibility">
      <MemberSignature Language="C#" Value="UseTextForAccessibility" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Windows.Forms.ControlStyles UseTextForAccessibility = int32(262144)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ControlStyles.UseTextForAccessibility" />
      <MemberSignature Language="VB.NET" Value="UseTextForAccessibility" />
      <MemberSignature Language="C++ CLI" Value="UseTextForAccessibility" />
      <MemberSignature Language="F#" Value="UseTextForAccessibility = 262144" Usage="System.Windows.Forms.ControlStyles.UseTextForAccessibility" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlStyles</ReturnType>
      </ReturnValue>
      <MemberValue>262144</MemberValue>
      <Docs>
        <summary>컨트롤의 <c>Text</c> 속성 값을 설정한 경우 컨트롤의 기본 Active Accessibility 이름 및 바로 가기 키를 결정한다고 지정합니다.</summary>
      </Docs>
    </Member>
  </Members>
</Type>