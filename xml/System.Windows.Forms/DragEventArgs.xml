<Type Name="DragEventArgs" FullName="System.Windows.Forms.DragEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3913b1e5cb1e335c97107f8e0cc542272f28d8d6" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65015761" /></Metadata><TypeSignature Language="C#" Value="public class DragEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DragEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DragEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DragEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DragEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type DragEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>데이터를 제공 합니다 <see cref="E:System.Windows.Forms.Control.DragDrop" />, <see cref="E:System.Windows.Forms.Control.DragEnter" />, 또는 <see cref="E:System.Windows.Forms.Control.DragOver" /> 이벤트입니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Control.DragDrop> 이벤트는 사용자 개체를 컨트롤 위로 끌어서 다음 마우스 단추를 해제 하 여 컨트롤에 끌어다 놓으면 하 여 끌어서 놓기 작업을 완료할 때 발생 합니다. <xref:System.Windows.Forms.Control.DragEnter> 이벤트는 마우스를 사용 하 여 개체를 끄는 동안 마우스 포인터를 컨트롤을 이동할 때 발생 합니다. <xref:System.Windows.Forms.Control.DragOver> 이벤트 마우스를 사용 하 여 개체를 끄는 동안 마우스 포인터를 컨트롤 위로 이동할 때 발생 합니다.  
  
 <xref:System.Windows.Forms.DragEventArgs> 개체가이 이벤트와 연결 된 모든 데이터가; SHIFT, CTRL 및 ALT 키의 현재 상태는 마우스 포인터의 위치를 지정 하 고 원본 및 대상의 끌기 이벤트에서 끌어서 놓기 효과 허용 합니다.  
  
 이벤트 모델에 대 한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 두는 끌어서 놓기 작업을 보여 줍니다. <xref:System.Windows.Forms.ListBox> 컨트롤입니다. 예제에서는 호출을 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 끌기 작업이 시작 될 때 메서드. 마우스를 이동 하는 경우 끌기 작업이 시작 둘 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> 하는 동안 마우스 위치에서의 <xref:System.Windows.Forms.Control.MouseDown> 이벤트입니다. 합니다 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 메서드를 사용 하는 동안 끌어서 항목의 인덱스를 확인 합니다 `MouseDown` 이벤트입니다.  
  
 또한이 사용자 지정 커서를 사용 하 여 끌어서 놓기 작업에 대 한 예제입니다. 이 예제에서는 두 개의 가정 커서 파일인 `3dwarro.cur` 및 `3dwno.cur`, 사용자 지정 끌기에 대 한 애플리케이션 디렉터리에 있으며 놓기 없음 커서를 각각. 사용자 지정 커서를 사용할 경우는 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 확인란이 선택 되어 있습니다. 에 설정 된 사용자 지정 커서를 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트 처리기입니다.  
  
 키보드 상태에서 평가 되는 <xref:System.Windows.Forms.Control.DragOver> 오른쪽에 대 한 이벤트 처리기 `ListBox`결정 끌기 작업을 SHIFT, CTRL, ALT 또는 CTRL + ALT 키의 상태에 따라 합니다. 위치는 `ListBox` 하는 동안 결정 됩니다 드롭다운 수행 되는 `DragOver` 이벤트입니다. 데이터 삭제 없는 경우는 `String`, 해당 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 로 설정 된 <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>합니다. 드롭다운의 상태에 표시 됩니다는 마지막으로, 합니다 `DropLocationLabel` <xref:System.Windows.Forms.Label>합니다.  
  
 데이터를 오른쪽에 대 한 drop `ListBox` 에서 결정 됩니다는 <xref:System.Windows.Forms.Control.DragDrop> 이벤트 처리기 및 `String` 값에 적절 한 위치에 추가 됩니다는 `ListBox`. 끌기 작업 이동 폼의 범위를 벗어나는 경우에서 끌어서 놓기 작업이 취소 되는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트 처리기입니다.  
  
 이 코드 예제에서는 사용 하 여는 <xref:System.Windows.Forms.DragEventArgs> 클래스입니다. 참조 된 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 전체 코드 예제에 대 한 메서드.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 다음 예제에서는 어떻게 <xref:System.Windows.Forms.DragEventArgs> 원본 및 끌어서 놓기 작업의 대상 간에 전달 됩니다. 이 예제는 <xref:System.Windows.Forms.ListBox> 컨트롤은 데이터의 원본 및 <xref:System.Windows.Forms.RichTextBox> 컨트롤은 대상입니다. 가정 된 <xref:System.Windows.Forms.ListBox> 컨트롤 유효한 파일 이름 목록으로 채워진 합니다. 끌면에서 표시 된 파일 이름 중 하나는 <xref:System.Windows.Forms.ListBox> 컨트롤을 <xref:System.Windows.Forms.RichTextBox> 제어 파일에 참조 된 열입니다.  
  
 작업에서 시작 되는 <xref:System.Windows.Forms.ListBox> 컨트롤의 MouseDown 이벤트입니다. 에 <xref:System.Windows.Forms.RichTextBox.DragEnter> 이벤트 처리기를 사용 하 여는 <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> 데이터 형식 인지 확인 하는 메서드는를 <xref:System.Windows.Forms.RichTextBox> 컨트롤에 표시할 수 있으며 설정한를 <xref:System.Windows.Forms.DragDropEffects> 소스 제어에서 해당 데이터를 지정 하는 속성을 복사 해야 대상 컨트롤입니다. 마지막으로 <xref:System.Windows.Forms.RichTextBox> 컨트롤의 DragDrop 이벤트 처리기에서 사용 된 <xref:System.Windows.Forms.IDataObject.GetData%2A> 열려는 파일 이름을 검색 하는 방법.  
  
 [!code-cpp[RichTextDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextDragDrop/CS/form1.cs#1)]
 [!code-vb[RichTextDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextDragDrop/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DragDropEffects" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
    <altmember cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.DragOver" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DragEventArgs (System.Windows.Forms.IDataObject data, int keyState, int x, int y, System.Windows.Forms.DragDropEffects allowedEffect, System.Windows.Forms.DragDropEffects effect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.IDataObject data, int32 keyState, int32 x, int32 y, valuetype System.Windows.Forms.DragDropEffects allowedEffect, valuetype System.Windows.Forms.DragDropEffects effect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (data As IDataObject, keyState As Integer, x As Integer, y As Integer, allowedEffect As DragDropEffects, effect As DragDropEffects)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DragEventArgs(System::Windows::Forms::IDataObject ^ data, int keyState, int x, int y, System::Windows::Forms::DragDropEffects allowedEffect, System::Windows::Forms::DragDropEffects effect);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.DragEventArgs : System.Windows.Forms.IDataObject * int * int * int * System.Windows.Forms.DragDropEffects * System.Windows.Forms.DragDropEffects -&gt; System.Windows.Forms.DragEventArgs" Usage="new System.Windows.Forms.DragEventArgs (data, keyState, x, y, allowedEffect, effect)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="System.Windows.Forms.IDataObject" />
        <Parameter Name="keyState" Type="System.Int32" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="allowedEffect" Type="System.Windows.Forms.DragDropEffects" />
        <Parameter Name="effect" Type="System.Windows.Forms.DragDropEffects" />
      </Parameters>
      <Docs>
        <param name="data">이 이벤트와 관련된 데이터입니다.</param>
        <param name="keyState">Shift, Ctrl 및 Alt 키의 현재 상태입니다.</param>
        <param name="x">픽셀 단위로 나타낸 마우스의 x 좌표입니다.</param>
        <param name="y">픽셀 단위로 나타낸 마우스 포인터의 y 좌표입니다.</param>
        <param name="allowedEffect"><see cref="T:System.Windows.Forms.DragDropEffects" /> 값 중 하나입니다.</param>
        <param name="effect"><see cref="T:System.Windows.Forms.DragDropEffects" /> 값 중 하나입니다.</param>
        <summary><see cref="T:System.Windows.Forms.DragEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="AllowedEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects AllowedEffect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects AllowedEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.AllowedEffect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowedEffect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects AllowedEffect { System::Windows::Forms::DragDropEffects get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowedEffect : System.Windows.Forms.DragDropEffects" Usage="System.Windows.Forms.DragEventArgs.AllowedEffect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>끌기 이벤트의 작성기 또는 소스에서 허용하는 끌어서 놓기 작업을 가져옵니다.</summary>
        <value><see cref="T:System.Windows.Forms.DragDropEffects" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 컨트롤을 호출 하 여 끌어서 놓기 작업을 시작 하는 경우는 <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=nameWithType> 메서드, 작업의 허용 되는 효과 지정 합니다. 예를 들어 소스에서 파일을 끌어서 놓을 때 파일이 읽기 전용(또는 CD와 같은 읽기 전용 스토리지 매체)인 경우 소스에서는 파일을 대상으로 복사할 수 있지만 전송되지는 않음을 나타냅니다.  
  
 끌어 온된 데이터에 대 한 작업을 수행 하기 전에 작업은 허용 되도록이 속성을 검사 해야 합니다.  
  
   
  
## Examples  
 다음 예제에서는 두는 끌어서 놓기 작업을 보여 줍니다. <xref:System.Windows.Forms.ListBox> 컨트롤입니다. 예제에서는 호출을 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 끌기 작업이 시작 될 때 메서드. 마우스를 이동 하는 경우 끌기 작업이 시작 둘 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> 하는 동안 마우스 위치에서의 <xref:System.Windows.Forms.Control.MouseDown> 이벤트입니다. 합니다 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 메서드를 사용 하는 동안 끌어서 항목의 인덱스를 확인 합니다 `MouseDown` 이벤트입니다.  
  
 또한이 사용자 지정 커서를 사용 하 여 끌어서 놓기 작업에 대 한 예제입니다. 이 예제에서는 두 개의 가정 커서 파일인 `3dwarro.cur` 및 `3dwno.cur`, 사용자 지정 끌기에 대 한 애플리케이션 디렉터리에 있으며 놓기 없음 커서를 각각. 사용자 지정 커서를 사용할 경우는 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 확인란이 선택 되어 있습니다. 에 설정 된 사용자 지정 커서를 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트 처리기입니다.  
  
 키보드 상태에서 평가 되는 <xref:System.Windows.Forms.Control.DragOver> 오른쪽에 대 한 이벤트 처리기 `ListBox`결정 끌기 작업을 SHIFT, CTRL, ALT 또는 CTRL + ALT 키의 상태에 따라 합니다. 위치는 `ListBox` 하는 동안 결정 됩니다 드롭다운 수행 되는 `DragOver` 이벤트입니다. 데이터 삭제 없는 경우는 `String`, 해당 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 로 설정 된 <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>합니다. 드롭다운의 상태에 표시 됩니다는 마지막으로, 합니다 `DropLocationLabel` <xref:System.Windows.Forms.Label>합니다.  
  
 데이터를 오른쪽에 대 한 drop `ListBox` 에서 결정 됩니다는 <xref:System.Windows.Forms.Control.DragDrop> 이벤트 처리기 및 `String` 값에 적절 한 위치에 추가 됩니다는 `ListBox`. 끌기 작업 이동 폼의 범위를 벗어나는 경우에서 끌어서 놓기 작업이 취소 되는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트 처리기입니다.  
  
 이 코드 예제에서는 사용 하 여는 <xref:System.Windows.Forms.DragEventArgs> 클래스입니다. 참조 된 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 전체 코드 예제에 대 한 메서드.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IDataObject Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IDataObject Data" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As IDataObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IDataObject ^ Data { System::Windows::Forms::IDataObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : System.Windows.Forms.IDataObject" Usage="System.Windows.Forms.DragEventArgs.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IDataObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>가져옵니다는 <see cref="T:System.Windows.Forms.IDataObject" /> 이 이벤트와 연결 된 데이터를 포함 하는 합니다.</summary>
        <value>이 이벤트와 관련된 데이터입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트 처리기의 본문에서 사용할 수는 <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> 데이터는 데이터를 끄는 컨트롤의 형식 요구 사항과 일치 하는지 여부를 결정 하는 방법입니다. 형식 요구 사항에 맞게 데이터를 변환할 것인지 여부를 지정할 수도 있습니다. 끌어 온된 데이터 형식 요구 사항을 충족 하는 경우 사용 된 <xref:System.Windows.Forms.IDataObject.GetData%2A> 데이터를 검색 하는 방법입니다.  
  
   
  
## Examples  
 다음 예제에서는 두는 끌어서 놓기 작업을 보여 줍니다. <xref:System.Windows.Forms.ListBox> 컨트롤입니다. 예제에서는 호출을 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 끌기 작업이 시작 될 때 메서드. 마우스를 이동 하는 경우 끌기 작업이 시작 둘 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> 하는 동안 마우스 위치에서의 <xref:System.Windows.Forms.Control.MouseDown> 이벤트입니다. 합니다 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 메서드를 사용 하는 동안 끌어서 항목의 인덱스를 확인 합니다 `MouseDown` 이벤트입니다.  
  
 또한이 사용자 지정 커서를 사용 하 여 끌어서 놓기 작업에 대 한 예제입니다. 이 예제에서는 두 개의 가정 커서 파일인 `3dwarro.cur` 및 `3dwno.cur`, 사용자 지정 끌기에 대 한 애플리케이션 디렉터리에 있으며 놓기 없음 커서를 각각. 사용자 지정 커서를 사용할 경우는 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 확인란이 선택 되어 있습니다. 에 설정 된 사용자 지정 커서를 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트 처리기입니다.  
  
 키보드 상태에서 평가 되는 <xref:System.Windows.Forms.Control.DragOver> 오른쪽에 대 한 이벤트 처리기 `ListBox`결정 끌기 작업을 SHIFT, CTRL, ALT 또는 CTRL + ALT 키의 상태에 따라 합니다. 위치는 `ListBox` 하는 동안 결정 됩니다 드롭다운 수행 되는 `DragOver` 이벤트입니다. 데이터 삭제 없는 경우는 `String`, 해당 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 로 설정 된 <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>합니다. 드롭다운의 상태에 표시 됩니다는 마지막으로, 합니다 `DropLocationLabel` <xref:System.Windows.Forms.Label>합니다.  
  
 데이터를 오른쪽에 대 한 drop `ListBox` 에서 결정 됩니다는 <xref:System.Windows.Forms.Control.DragDrop> 이벤트 처리기 및 `String` 값에 적절 한 위치에 추가 됩니다는 `ListBox`. 끌기 작업 이동 폼의 범위를 벗어나는 경우에서 끌어서 놓기 작업이 취소 되는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트 처리기입니다.  
  
 이 코드 예제에서는 사용 하 여는 <xref:System.Windows.Forms.DragEventArgs> 클래스입니다. 참조 된 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 전체 코드 예제에 대 한 메서드.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.IDataObject" />
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DragDropEffects Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DragDropEffects Effect { System::Windows::Forms::DragDropEffects get(); void set(System::Windows::Forms::DragDropEffects value); };" />
      <MemberSignature Language="F#" Value="member this.Effect : System.Windows.Forms.DragDropEffects with get, set" Usage="System.Windows.Forms.DragEventArgs.Effect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>끌어서 놓기 작업에서 대상 놓기 결과를 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Windows.Forms.DragDropEffects" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 적용 되는 효과 끌어서 놓기 작업의 대상에 대 한 마우스 커서를 결정 합니다. 발생 하는 작업에 사용자에 게 피드백을 제공 하는 데 유용 합니다. 원본에서 파일을 끌 때 CTRL 키를 누르면 지정 하는 예를 들어 <xref:System.Windows.Forms.DragDropEffects.Copy?displayProperty=nameWithType> 나타내는 대상 복사 작업을 수행 하려고 합니다.  
  
 끌기 작업에 대 한 사용자 지정 커서를 사용 하려면 참조 <xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 다음 예제에서는 두는 끌어서 놓기 작업을 보여 줍니다. <xref:System.Windows.Forms.ListBox> 컨트롤입니다. 예제에서는 호출을 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 끌기 작업이 시작 될 때 메서드. 마우스를 이동 하는 경우 끌기 작업이 시작 둘 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> 하는 동안 마우스 위치에서의 <xref:System.Windows.Forms.Control.MouseDown> 이벤트입니다. 합니다 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 메서드를 사용 하는 동안 끌어서 항목의 인덱스를 확인 합니다 `MouseDown` 이벤트입니다.  
  
 또한이 사용자 지정 커서를 사용 하 여 끌어서 놓기 작업에 대 한 예제입니다. 이 예제에서는 두 개의 가정 커서 파일인 `3dwarro.cur` 및 `3dwno.cur`, 사용자 지정 끌기에 대 한 애플리케이션 디렉터리에 있으며 놓기 없음 커서를 각각. 사용자 지정 커서를 사용할 경우는 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 확인란이 선택 되어 있습니다. 에 설정 된 사용자 지정 커서를 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트 처리기입니다.  
  
 키보드 상태에서 평가 되는 <xref:System.Windows.Forms.Control.DragOver> 오른쪽에 대 한 이벤트 처리기 `ListBox`결정 끌기 작업을 SHIFT, CTRL, ALT 또는 CTRL + ALT 키의 상태에 따라 합니다. 위치는 `ListBox` 하는 동안 결정 됩니다 드롭다운 수행 되는 `DragOver` 이벤트입니다. 데이터 삭제 없는 경우는 `String`, 해당 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 로 설정 된 <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>합니다. 드롭다운의 상태에 표시 됩니다는 마지막으로, 합니다 `DropLocationLabel` <xref:System.Windows.Forms.Label>합니다.  
  
 데이터를 오른쪽에 대 한 drop `ListBox` 에서 결정 됩니다는 <xref:System.Windows.Forms.Control.DragDrop> 이벤트 처리기 및 `String` 값에 적절 한 위치에 추가 됩니다는 `ListBox`. 끌기 작업 이동 폼의 범위를 벗어나는 경우에서 끌어서 놓기 작업이 취소 되는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트 처리기입니다.  
  
 이 코드 예제에서는 사용 하 여는 <xref:System.Windows.Forms.DragEventArgs> 클래스입니다. 참조 된 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 전체 코드 예제에 대 한 메서드.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DragDropEffects" />
      </Docs>
    </Member>
    <Member MemberName="KeyState">
      <MemberSignature Language="C#" Value="public int KeyState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.KeyState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyState As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyState { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyState : int" Usage="System.Windows.Forms.DragEventArgs.KeyState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 단추의 상태뿐 아니라 Shift, Ctrl 및 Alt 키의 현재 상태를 가져옵니다.</summary>
        <value>Shift, Ctrl 및 Alt 키와 마우스 단추의 현재 상태입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특정 키의 상태에 따라 끌어서 놓기 작업의 효과 만들 수 있습니다. 예를 들어, 끌어서 놓기 작업 동안 CTRL 또는 SHIFT 키를 누르면 여부에 따라 데이터 이동 또는 복사를 결정할 수 있습니다.  
  
 에 설정 된 비트를 <xref:System.Windows.Forms.DragEventArgs.KeyState%2A> 키 또는 작업 중에 누른 마우스 단추 속성을 식별 합니다. 예를 들어 마우스 왼쪽된 단추를 누르는 경우 첫 번째 비트를 <xref:System.Windows.Forms.DragEventArgs.KeyState%2A> 속성을 설정 합니다. 지정된 된 키 상태에 대 한 테스트 하려면 비트 AND 연산자를 사용할 수 있습니다.  
  
 다음 표에 지정된 된 이벤트에 사용 되는 값을 보여 줍니다.  
  
|값|Key|  
|-----------|---------|  
|1 (비트 0)|마우스 왼쪽된 단추입니다.|  
|2 (비트 1)|마우스 오른쪽 단추입니다.|  
|4 (비트 2)|SHIFT 키입니다.|  
|8 (3 비트)|CTRL 키입니다.|  
|16 (4 비트)|마우스 가운데 단추입니다.|  
|32 (5 비트)|ALT 키입니다.|  
  
   
  
## Examples  
 다음 예제에서는 두는 끌어서 놓기 작업을 보여 줍니다. <xref:System.Windows.Forms.ListBox> 컨트롤입니다. 예제에서는 호출을 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 끌기 작업이 시작 될 때 메서드. 마우스를 이동 하는 경우 끌기 작업이 시작 둘 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> 하는 동안 마우스 위치에서의 <xref:System.Windows.Forms.Control.MouseDown> 이벤트입니다. 합니다 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 메서드를 사용 하는 동안 끌어서 항목의 인덱스를 확인 합니다 `MouseDown` 이벤트입니다.  
  
 또한이 사용자 지정 커서를 사용 하 여 끌어서 놓기 작업에 대 한 예제입니다. 이 예제에서는 두 개의 가정 커서 파일인 `3dwarro.cur` 및 `3dwno.cur`, 사용자 지정 끌기에 대 한 애플리케이션 디렉터리에 있으며 놓기 없음 커서를 각각. 사용자 지정 커서를 사용할 경우는 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 확인란이 선택 되어 있습니다. 에 설정 된 사용자 지정 커서를 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트 처리기입니다.  
  
 키보드 상태에서 평가 되는 <xref:System.Windows.Forms.Control.DragOver> 오른쪽에 대 한 이벤트 처리기 `ListBox`결정 끌기 작업을 SHIFT, CTRL, ALT 또는 CTRL + ALT 키의 상태에 따라 합니다. 위치는 `ListBox` 하는 동안 결정 됩니다 드롭다운 수행 되는 `DragOver` 이벤트입니다. 데이터 삭제 없는 경우는 `String`, 해당 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 로 설정 된 <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>합니다. 드롭다운의 상태에 표시 됩니다는 마지막으로, 합니다 `DropLocationLabel` <xref:System.Windows.Forms.Label>합니다.  
  
 데이터를 오른쪽에 대 한 drop `ListBox` 에서 결정 됩니다는 <xref:System.Windows.Forms.Control.DragDrop> 이벤트 처리기 및 `String` 값에 적절 한 위치에 추가 됩니다는 `ListBox`. 끌기 작업 이동 폼의 범위를 벗어나는 경우에서 끌어서 놓기 작업이 취소 되는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트 처리기입니다.  
  
 이 코드 예제에서는 사용 하 여는 <xref:System.Windows.Forms.DragEventArgs> 클래스입니다. 참조 된 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 전체 코드 예제에 대 한 메서드.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public int X { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.X" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property X As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int X { int get(); };" />
      <MemberSignature Language="F#" Value="member this.X : int" Usage="System.Windows.Forms.DragEventArgs.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>화면 좌표로 나타낸 마우스 포인터의 x좌표를 가져옵니다.</summary>
        <value>픽셀 단위로 나타낸 마우스 포인터의 x좌표입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 두는 끌어서 놓기 작업을 보여 줍니다. <xref:System.Windows.Forms.ListBox> 컨트롤입니다. 예제에서는 호출을 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 끌기 작업이 시작 될 때 메서드. 마우스를 이동 하는 경우 끌기 작업이 시작 둘 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> 하는 동안 마우스 위치에서의 <xref:System.Windows.Forms.Control.MouseDown> 이벤트입니다. 합니다 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 메서드를 사용 하는 동안 끌어서 항목의 인덱스를 확인 합니다 `MouseDown` 이벤트입니다.  
  
 또한이 사용자 지정 커서를 사용 하 여 끌어서 놓기 작업에 대 한 예제입니다. 이 예제에서는 두 개의 가정 커서 파일인 `3dwarro.cur` 및 `3dwno.cur`, 사용자 지정 끌기에 대 한 애플리케이션 디렉터리에 있으며 놓기 없음 커서를 각각. 사용자 지정 커서를 사용할 경우는 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 확인란이 선택 되어 있습니다. 에 설정 된 사용자 지정 커서를 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트 처리기입니다.  
  
 키보드 상태에서 평가 되는 <xref:System.Windows.Forms.Control.DragOver> 오른쪽에 대 한 이벤트 처리기 `ListBox`결정 끌기 작업을 SHIFT, CTRL, ALT 또는 CTRL + ALT 키의 상태에 따라 합니다. 위치는 `ListBox` 하는 동안 결정 됩니다 드롭다운 수행 되는 `DragOver` 이벤트입니다. 데이터 삭제 없는 경우는 `String`, 해당 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 로 설정 된 <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>합니다. 드롭다운의 상태에 표시 됩니다는 마지막으로, 합니다 `DropLocationLabel` <xref:System.Windows.Forms.Label>합니다.  
  
 데이터를 오른쪽에 대 한 drop `ListBox` 에서 결정 됩니다는 <xref:System.Windows.Forms.Control.DragDrop> 이벤트 처리기 및 `String` 값에 적절 한 위치에 추가 됩니다는 `ListBox`. 끌기 작업 이동 폼의 범위를 벗어나는 경우에서 끌어서 놓기 작업이 취소 되는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트 처리기입니다.  
  
 이 코드 예제에서는 사용 하 여는 <xref:System.Windows.Forms.DragEventArgs> 클래스입니다. 참조 된 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 전체 코드 예제에 대 한 메서드.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public int Y { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DragEventArgs.Y" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Y As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Y { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Y : int" Usage="System.Windows.Forms.DragEventArgs.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>화면 좌표로 나타낸 마우스 포인터의 y좌표를 가져옵니다.</summary>
        <value>픽셀 단위로 나타낸 마우스 포인터의 y좌표입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 두는 끌어서 놓기 작업을 보여 줍니다. <xref:System.Windows.Forms.ListBox> 컨트롤입니다. 예제에서는 호출을 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 끌기 작업이 시작 될 때 메서드. 마우스를 이동 하는 경우 끌기 작업이 시작 둘 <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> 하는 동안 마우스 위치에서의 <xref:System.Windows.Forms.Control.MouseDown> 이벤트입니다. 합니다 <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> 메서드를 사용 하는 동안 끌어서 항목의 인덱스를 확인 합니다 `MouseDown` 이벤트입니다.  
  
 또한이 사용자 지정 커서를 사용 하 여 끌어서 놓기 작업에 대 한 예제입니다. 이 예제에서는 두 개의 가정 커서 파일인 `3dwarro.cur` 및 `3dwno.cur`, 사용자 지정 끌기에 대 한 애플리케이션 디렉터리에 있으며 놓기 없음 커서를 각각. 사용자 지정 커서를 사용할 경우는 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> 확인란이 선택 되어 있습니다. 에 설정 된 사용자 지정 커서를 <xref:System.Windows.Forms.Control.GiveFeedback> 이벤트 처리기입니다.  
  
 키보드 상태에서 평가 되는 <xref:System.Windows.Forms.Control.DragOver> 오른쪽에 대 한 이벤트 처리기 `ListBox`결정 끌기 작업을 SHIFT, CTRL, ALT 또는 CTRL + ALT 키의 상태에 따라 합니다. 위치는 `ListBox` 하는 동안 결정 됩니다 드롭다운 수행 되는 `DragOver` 이벤트입니다. 데이터 삭제 없는 경우는 `String`, 해당 <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> 로 설정 된 <xref:System.Windows.Forms.DragDropEffects.None?displayProperty=nameWithType>합니다. 드롭다운의 상태에 표시 됩니다는 마지막으로, 합니다 `DropLocationLabel` <xref:System.Windows.Forms.Label>합니다.  
  
 데이터를 오른쪽에 대 한 drop `ListBox` 에서 결정 됩니다는 <xref:System.Windows.Forms.Control.DragDrop> 이벤트 처리기 및 `String` 값에 적절 한 위치에 추가 됩니다는 `ListBox`. 끌기 작업 이동 폼의 범위를 벗어나는 경우에서 끌어서 놓기 작업이 취소 되는 <xref:System.Windows.Forms.Control.QueryContinueDrag> 이벤트 처리기입니다.  
  
 이 코드 예제에서는 사용 하 여는 <xref:System.Windows.Forms.DragEventArgs> 클래스입니다. 참조 된 <xref:System.Windows.Forms.Control.DoDragDrop%2A> 전체 코드 예제에 대 한 메서드.  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.DragEventArgs.X" />
      </Docs>
    </Member>
  </Members>
</Type>