<Type Name="FileDialog" FullName="System.Windows.Forms.FileDialog">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e300f05b109a370852ab45fbb5b0c36f07768f88" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56399315" /></Metadata><TypeSignature Language="C#" Value="public abstract class FileDialog : System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit FileDialog extends System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.FileDialog" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class FileDialog&#xA;Inherits CommonDialog" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileDialog abstract : System::Windows::Forms::CommonDialog" />
  <TypeSignature Language="F#" Value="type FileDialog = class&#xA;    inherit CommonDialog" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.CommonDialog</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("FileOk")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("FileName")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>파일을 선택할 수 있는 대화 상자를 표시합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog> 에 대 한 일반적인 동작을 포함 하는 추상 클래스는 <xref:System.Windows.Forms.OpenFileDialog> 고 <xref:System.Windows.Forms.SaveFileDialog> 클래스입니다. 직접 사용할 수 없습니다 있지만 이러한 두 클래스에 대 한 일반적인 동작을 포함 합니다. 인스턴스를 만들 수 없습니다. <xref:System.Windows.Forms.FileDialog>합니다. 클래스는 public으로 선언 되어, 있지만 내부 추상 메서드를 포함 하는 대로에서 상속할 수 없습니다. 사용 하 여 선택 하거나 파일을 저장 하는 대화 상자를 만들려면 <xref:System.Windows.Forms.OpenFileDialog> 또는 <xref:System.Windows.Forms.SaveFileDialog>합니다.  
  
 <xref:System.Windows.Forms.FileDialog> 모달 대화 상자. 따라서 표시 된 사용자가 파일을 선택 될 때까지 애플리케이션의 나머지 부분을 차단 됩니다. 대화 상자를 모달 형식으로 표시 되 면 (키보드나 마우스 클릭)을 입력 하지 않고 대화 상자에서 개체를 제외 하 고 발생할 수 있습니다. 프로그램을 숨기 거 나 닫기 호출 프로그램에 입력 하기 전에 대화 상자 (일반적으로 일부 사용자 작업에 대 한 응답)에서 발생할 수 있습니다.  
  
> [!CAUTION]
>  파생 된 클래스를 사용 하는 경우 <xref:System.Windows.Forms.FileDialog>와 같은 <xref:System.Windows.Forms.OpenFileDialog> 및 <xref:System.Windows.Forms.SaveFileDialog>, 절대 경로가 들어 있는 문자열 리터럴을 사용 하지 마십시오. 다음 표에 설명 된 방법 중 하나 이상을 사용 하 여 경로 동적으로 가져오는 대신 합니다.  
  
 파일이 아니라 폴더를 선택 하려면 사용 하 여 사용자를 사용 하도록 설정 하려는 경우는 <xref:System.Windows.Forms.FolderBrowserDialog>합니다.  
  
 애플리케이션, 애플리케이션을 사용 하 여 연결 된 데이터 저장 되는 방법 및 파일 시스템에 액세스 하기 위한 이유의 유형에 따라 여러 가지 가능한 디렉터리 경로 만들 수 있습니다. 다음 표에서 경로 동적으로 만드는 기술을 보여 줍니다.  
  
|경로 또는 프로그램 범주|클래스 및 멤버를 사용 하 여|  
|------------------------------|------------------------------|  
|Program Files, 내 문서, 데스크톱 등과 같은 표준 Windows 경로|합니다 <xref:System.Environment?displayProperty=nameWithType> 클래스는 해당 정적 메서드를 통해 이러한 항목에 대 한 가장 완벽 한 소스와 같은 <xref:System.Environment.SystemDirectory%2A>, 또는 <xref:System.Environment.GetFolderPath%2A> 메서드 중 하나를 사용 하 여는 <xref:System.Environment.SpecialFolder> 열거형 값입니다.|  
|현재 애플리케이션과 관련 된 경로|합니다 <xref:System.Windows.Forms.Application> 클래스에 정적 멤버와 같은 특정 경로 가져오려면 <xref:System.Windows.Forms.Application.StartupPath%2A>를 <xref:System.Windows.Forms.Application.ExecutablePath%2A>, <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>, 및 <xref:System.Windows.Forms.Application.CommonAppDataPath%2A>합니다.<br /><br /> 합니다 <xref:System.IO.Path.GetTempPath%2A> 메서드는 <xref:System.IO.Path?displayProperty=nameWithType> 임시 폴더의 경로 반환 합니다.<br /><br /> <xref:System.IO.Directory.GetCurrentDirectory%2A> 메서드는 <xref:System.IO.Directory?displayProperty=nameWithType> 클래스 애플리케이션의 현재 실행 중인 디렉터리를 반환 합니다.<br /><br /> 합니다 <xref:System.IO.DriveInfo.RootDirectory%2A> 의 속성을 <xref:System.IO.DriveInfo> 클래스는 지정된 된 드라이브의 루트 디렉터리를 나타냅니다.|  
|애플리케이션 설정으로 저장 된 경로|래퍼 클래스의 속성 설정에서 파생 된 해당 애플리케이션에 액세스할 <xref:System.Configuration.ApplicationSettingsBase>합니다. 자세한 내용은 [Windows Forms에 대 한 애플리케이션 설정을](~/docs/framework/winforms/advanced/application-settings-for-windows-forms.md)합니다.|  
|레지스트리 스토리지|일부 애플리케이션 레지스트리의 디렉터리 정보를 저장 합니다. <xref:System.Windows.Forms.Application> 클래스에는 <xref:System.Windows.Forms.Application.CommonAppDataPath%2A> 하 고 <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A> 속성을 확인 하는 <xref:Microsoft.Win32.RegistryKey> 값.|  
|ClickOnce 응용 프로그램|ClickOnce 애플리케이션을 사용 하 여 <xref:System.Windows.Forms.Application> 와 같은 클래스 멤버 <xref:System.Windows.Forms.Application.UserAppDataPath%2A>, ClickOnce 데이터 디렉터리에 대 한 포인터를 반환 됩니다는 합니다. 자세한 내용은 [로컬 및 ClickOnce 애플리케이션의 원격 데이터 액세스](https://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)합니다.|  
|국가별 애플리케이션|국가별 애플리케이션에 대 한 상대 경로 부분 문자열의 리소스 애플리케이션에서 사용 하 여 검색 된 <xref:System.Resources.ResourceReader?displayProperty=nameWithType> 클래스입니다. 전역화 및 지역화 하는 방법에 대 한 자세한 내용은 항목을 참조 하세요 [전역화 및 지역화](~/docs/standard/globalization-localization/index.md)합니다.|  
  
 전체 경로 작성 될 수 있습니다 설명한 기술 중 하나 이상을 사용 하 여 확인할 수 있습니다. 예를 들어를 <xref:System.Environment.GetFolderPath%2A> 메서드 내 문서 폴더의 경로를 가져오는 데 사용할 수 있습니다 다음 상대 하위 디렉터리 부분을 추가할 애플리케이션 설정을 사용할 수 있습니다.  
  
 합니다 <xref:System.IO.Path?displayProperty=nameWithType> 반면 절대 및 상대 경로 문자열 조작을 지원 하기 위해 정적 멤버를 포함 하는 클래스를 <xref:System.IO.File?displayProperty=nameWithType> 및 <xref:System.IO.Directory?displayProperty=nameWithType> 클래스에는 실제로 각각 파일 및 디렉터리를 조작 하는 정적 멤버입니다.  
  
> [!IMPORTANT]
>  애플리케이션의 사용자 폴더를 변경 하는 경우는 <xref:System.Windows.Forms.FileDialog>, 애플리케이션에 대 한 현재 작업 디렉터리에서 지정 된 위치로 설정 됩니다는 <xref:System.Windows.Forms.FileDialog>합니다. 이 방지 하려면 설정 합니다 <xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A> 속성을 `true`입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 합니다 <xref:System.Windows.Forms.OpenFileDialog> 구현의 <xref:System.Windows.Forms.FileDialog> 하 고 만들기, 속성, 설정 및 대화 상자를 표시를 보여 줍니다. 이 예제에서는 사용 합니다 <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> 대화 상자를 표시 하 고 반환 하는 메서드는 <xref:System.Windows.Forms.DialogResult>합니다. 예제에 사용 하 여 폼이 필요를 <xref:System.Windows.Forms.Button> 배치 및 <xref:System.IO> 네임 스페이스에 추가 합니다.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.CommonDialog" />
    <altmember cref="T:System.Windows.Forms.OpenFileDialog" />
    <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
    <altmember cref="T:System.Windows.Forms.FolderBrowserDialog" />
    <altmember cref="T:System.IO.Path" />
    <altmember cref="T:System.IO.File" />
    <altmember cref="T:System.IO.Directory" />
    <altmember cref="T:System.Environment" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:Microsoft.Win32.Registry" />
    <altmember cref="T:System.Resources.ResourceReader" />
  </Docs>
  <Members>
    <Member MemberName="AddExtension">
      <MemberSignature Language="C#" Value="public bool AddExtension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AddExtension" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.AddExtension" />
      <MemberSignature Language="VB.NET" Value="Public Property AddExtension As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AddExtension { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AddExtension : bool with get, set" Usage="System.Windows.Forms.FileDialog.AddExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>확장명을 생략한 경우 대화 상자가 파일 이름에 확장명을 자동으로 추가할지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>확장명을 생략한 경우 대화 상자가 파일 이름에 확장명을 추가하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파일 이름에 추가할 확장 현재 선택된 된 파일 필터 및 값에 종속 된 <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> 속성입니다.  
  
 경우는 <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> 속성은 `true`, 대화 상자는 기존 파일과 일치 하는 현재 파일 필터에서 첫 번째 확장 프로그램을 추가 합니다. 대화 상자에서 지정 된 확장명 추가 파일이 현재 파일 필터와 일치 하는 경우는 <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> 속성입니다.  
  
 경우는 <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> 속성은 `false`, 대화 상자가 현재 파일 필터에서 첫 번째 유효한 파일 이름 확장명을 추가 합니다. 현재 파일 필터에 없는 유효한 파일 이름 확장명, 대화 상자에서 지정 된 확장명 추가 <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">경우 확장을 추가 하는 것에 대 한 사용자 생략 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
        <altmember cref="P:System.Windows.Forms.FileDialog.FilterIndex" />
      </Docs>
    </Member>
    <Member MemberName="AutoUpgradeEnabled">
      <MemberSignature Language="C#" Value="public bool AutoUpgradeEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoUpgradeEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.AutoUpgradeEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoUpgradeEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoUpgradeEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoUpgradeEnabled : bool with get, set" Usage="System.Windows.Forms.FileDialog.AutoUpgradeEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>[!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]에서 실행되는 경우 이 <see cref="T:System.Windows.Forms.FileDialog" /> 인스턴스에서 모양 및 동작을 자동으로 업그레이드할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>[!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]에서 실행되는 경우 이 <see cref="T:System.Windows.Forms.FileDialog" /> 인스턴스에서 모양 및 동작을 자동으로 업그레이드하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성이 `false`는 <xref:System.Windows.Forms.FileDialog> 클래스를 [!INCLUDE[winxp](~/includes/winxp-md.md)]-의 모양 및 동작 스타일 [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]합니다.  
  
 [!INCLUDE[winxp](~/includes/winxp-md.md)],이 속성에 영향을 주지 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckFileExists">
      <MemberSignature Language="C#" Value="public virtual bool CheckFileExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckFileExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CheckFileExists" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CheckFileExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CheckFileExists { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckFileExists : bool with get, set" Usage="System.Windows.Forms.FileDialog.CheckFileExists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>존재하지 않는 파일 이름을 지정할 때 대화 상자에 경고가 표시되는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>존재하지 않는 파일 이름을 지정할 때 대화 상자에 경고가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본값은 `true` 를 상속 하는 것에 대 한 <xref:System.Windows.Forms.OpenFileDialog> 하 고 `false` 는 상속을 위한 <xref:System.Windows.Forms.SaveFileDialog>합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일이 이미 있는 경우 경고를 표시 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckPathExists" />
      </Docs>
    </Member>
    <Member MemberName="CheckPathExists">
      <MemberSignature Language="C#" Value="public bool CheckPathExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckPathExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CheckPathExists" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckPathExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckPathExists { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckPathExists : bool with get, set" Usage="System.Windows.Forms.FileDialog.CheckPathExists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>존재하지 않는 경로를 지정할 때 대화 상자에 경고가 표시되는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>존재하지 않는 경로를 지정할 때 대화 상자에 경고가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">사용자가 이미 존재 하는 경로 지정 하는 경우 경고를 표시 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
      </Docs>
    </Member>
    <Member MemberName="CustomPlaces">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CustomPlaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomPlaces As FileDialogCustomPlacesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FileDialogCustomPlacesCollection ^ CustomPlaces { System::Windows::Forms::FileDialogCustomPlacesCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomPlaces : System.Windows.Forms.FileDialogCustomPlacesCollection" Usage="System.Windows.Forms.FileDialog.CustomPlaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FileDialogCustomPlacesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.Forms.FileDialog" /> 인스턴스의 사용자 지정 위치 컬렉션을 가져옵니다.</summary>
        <value>이 <see cref="T:System.Windows.Forms.FileDialog" /> 인스턴스의 사용자 지정 위치 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[winxp](~/includes/winxp-md.md)],이 속성에 영향을 주지 없습니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Windows.Forms.FileDialog.CustomPlaces%2A> 컬렉션입니다. 이 예제를 실행 하려면 호출을 Windows Form에 다음 코드를 붙여 넣습니다 `InitializeDialogAndButton` 폼의 생성자에서 또는 <xref:System.Windows.Forms.Form.Load> 이벤트 처리 메서드.  
  
 [!code-csharp[System.Windows.Forms.FileDialogCommonPlaces#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialogCommonPlaces/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialogCommonPlaces#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialogCommonPlaces/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultExt">
      <MemberSignature Language="C#" Value="public string DefaultExt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultExt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.DefaultExt" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultExt As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultExt { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultExt : string with get, set" Usage="System.Windows.Forms.FileDialog.DefaultExt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>기본 확장명을 가져오거나 설정합니다.</summary>
        <value>기본 파일 이름 확장명입니다. 반환되는 문자열에는 마침표가 포함되지 있지 않습니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 애플리케이션의 사용자가 확장명 없이 파일 이름을 지정 하는 경우는 <xref:System.Windows.Forms.FileDialog> 파일 이름 확장명을 추가 합니다. 사용 되는 확장에 의해 결정 됩니다 합니다 <xref:System.Windows.Forms.FileDialog.Filter%2A> 고 <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> 속성입니다. 필터를 선택한 경우에 <xref:System.Windows.Forms.FileDialog> 필터 확장을 지정 하 고 해당 확장을 사용 합니다. 선택한 필터 확장을 대신 와일드 카드를 사용 하는 경우 다음에 지정 된 확장 된 <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> 속성을 사용 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=nameWithType> 스트림과 메서드. 사용 하는 방법도 보여 줍니다 합니다 <xref:System.Windows.Forms.FileDialog.FileName%2A>, <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>를 <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>, 및 <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType> 멤버입니다.  
  
 이 프로젝트에 복사할 때 실행할 준비가 되는 전체 예제입니다.  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DereferenceLinks">
      <MemberSignature Language="C#" Value="public bool DereferenceLinks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DereferenceLinks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.DereferenceLinks" />
      <MemberSignature Language="VB.NET" Value="Public Property DereferenceLinks As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DereferenceLinks { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DereferenceLinks : bool with get, set" Usage="System.Windows.Forms.FileDialog.DereferenceLinks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>대화 상자가 바로 가기(.lnk)의 위치 또는 바로 가기가 참조하는 파일의 위치를 반환할지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>대화 상자에서 바로 가기가 참조하는 파일의 위치를 반환하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">속성을 설정 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="EventFileOk">
      <MemberSignature Language="C#" Value="protected static readonly object EventFileOk;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly object EventFileOk" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.FileDialog.EventFileOk" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly EventFileOk As Object " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly System::Object ^ EventFileOk;" />
      <MemberSignature Language="F#" Value=" staticval mutable EventFileOk : obj" Usage="System.Windows.Forms.FileDialog.EventFileOk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Windows.Forms.FileDialog.FileOk" /> 이벤트를 소유합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FileName" />
      <MemberSignature Language="VB.NET" Value="Public Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string with get, set" Usage="System.Windows.Forms.FileDialog.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>파일 대화 상자에서 선택한 파일 이름을 포함하는 문자열을 가져오거나 설정합니다.</summary>
        <value>파일 대화 상자에서 선택된 파일 이름입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파일 이름에는 파일 경로 및 확장을 모두 포함 됩니다. 이 메서드는 빈 문자열이 반환 없는 파일을 선택 하는 경우 ("").  
  
 사용 될 때 합니다 <xref:System.Windows.Forms.SaveFileDialog> 클래스를이 속성에서 사용 될 때 저장 되 고 파일을 나타내는 <xref:System.Windows.Forms.OpenFileDialog> 열려 있는 파일을 나타내는 클래스입니다.  
  
 이 속성에는 선택한 파일 이름을 수만 있습니다. 사용 하 여 다중 선택 대화 상자에서 선택한 모든 파일의 이름이 포함 된 배열을 반환 하려는 경우 <xref:System.Windows.Forms.FileDialog.FileNames%2A>합니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=nameWithType> 및 <xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=nameWithType> 스트림과 메서드. 사용 하는 방법도 보여 줍니다 합니다 <xref:System.Windows.Forms.FileDialog.FileName%2A>, <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>를 <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>, 및 <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType> 멤버입니다.  
  
 이 프로젝트에 복사할 때 실행할 준비가 되는 전체 예제입니다.  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">가져오기 또는 파일 이름을 설정 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileNames" />
        <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
        <altmember cref="T:System.Windows.Forms.OpenFileDialog" />
      </Docs>
    </Member>
    <Member MemberName="FileNames">
      <MemberSignature Language="C#" Value="public string[] FileNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] FileNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FileNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ FileNames { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileNames : string[]" Usage="System.Windows.Forms.FileDialog.FileNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>대화 상자에서 선택한 모든 파일의 파일 이름을 가져옵니다.</summary>
        <value>대화 상자에서 선택한 모든 파일의 이름을 포함하는 <see cref="T:System.String" /> 형식의 배열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 각 파일 이름에는 파일 경로 및 확장을 모두 포함 됩니다. 없는 파일을 선택 하는 경우이 메서드는 빈 배열을 반환 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 다양 한 이미지를 선택 하 고 표시를 사용 하면 <xref:System.Windows.Forms.PictureBox> 양식의 컨트롤입니다. 초기화를 보여 줍니다는 <xref:System.Windows.Forms.OpenFileDialog>설정 합니다 <xref:System.Windows.Forms.FileDialog.Title%2A> 및 <xref:System.Windows.Forms.FileDialog.Filter%2A> 속성 및 설정 하 여 여러 파일을 선택할 수 있도록를 <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A> 속성을 true로 합니다. 이 코드 예제에서는 양식에 이미 있다고 가정를 <xref:System.Windows.Forms.OpenFileDialog> 컨트롤인 `openFileDialog1`, <xref:System.Windows.Forms.Button> 라는 `SelectFileButton`, 및 <xref:System.Windows.Forms.FlowLayoutPanel> 라는 `flowLayoutPanel1`.  
  
 [!code-csharp[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">가져올 파일 이름을 지정 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /></permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileName" />
      </Docs>
    </Member>
    <Member MemberName="FileOk">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler FileOk;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler FileOk" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.FileDialog.FileOk" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FileOk As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ FileOk;" />
      <MemberSignature Language="F#" Value="member this.FileOk : System.ComponentModel.CancelEventHandler " Usage="member this.FileOk : System.ComponentModel.CancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>사용자가 파일 대화 상자의 **열기** 또는 **저장** 단추를 클릭할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트를 처리 하는 방법에 대 한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하 여 보여 줍니다.는 <xref:System.Windows.Forms.FileDialog.FileNames%2A> 속성을 처리 합니다 <xref:System.Windows.Forms.FileDialog.FileOk> 이벤트 및 사용 하 여는 <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> 메서드. 예제를 실행 하는 경우 선택할 수 있는 그래픽 파일을 <xref:System.Windows.Forms.OpenFileDialog> 개체입니다. 선택한 파일 형태로 표시 됩니다. <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> 메서드를 사용 하면 그래픽 파일을 열어 각 폼을 다시 그리도록 합니다. 포함 된 폼에서이 예제에서는 다음 코드를 붙여넣고를 실행 하는 <xref:System.Windows.Forms.PictureBox> 라는 `PictureBox1`, <xref:System.Windows.Forms.OpenFileDialog> 라는 `OpenFileDialog1`, 및 <xref:System.Windows.Forms.Button> 라는 `fileButton`합니다. 호출 된 `InitializePictureBox` 하 고 `InitializeOpenFileDialog` 폼의 생성자에서 메서드 또는 `Load` 메서드. 예제를 실행할 때 단추를 클릭 하 여 대화 상자를 표시 합니다.  
  
 [!code-cpp[System.Windows.Forms.FileDialog#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#1)]
 [!code-csharp[System.Windows.Forms.FileDialog#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialog#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public string Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Filter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Filter : string with get, set" Usage="System.Windows.Forms.FileDialog.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>대화 상자에서 "파일 형식으로 저장" 또는 "파일 형식" 상자에 표시되는 선택 옵션을 결정하는 현재 파일 이름 필터 문자열을 가져오거나 설정합니다.</summary>
        <value>대화 상자에서 사용할 수 있는 파일 필터링 옵션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 각 필터링 옵션에 대 한 필터 문자열에 세로 막대 뒤의 필터에 대 한 설명을 포함 (&#124;) 및 필터 패턴입니다. 다양 한 필터링 옵션에 대 한 문자열을 세로 막대로 구분 됩니다.  
  
 다음은 필터 문자열의 예입니다.  
  
 `Text files (*.txt)|*.txt|All files (*.*)|*.*`  
  
 예를 들어 파일 형식의 세미콜론으로 구분 하 여 필터에 여러 필터 패턴을 추가할 수 있습니다.  
  
 `Image Files(*.BMP;*.JPG;*.GIF)|*.BMP;*.JPG;*.GIF|All files (*.*)|*.*`  
  
 사용 된 <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> 사용자에 게 첫 번째는 필터링 옵션을 설정 하는 속성이 표시 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 합니다 <xref:System.Windows.Forms.OpenFileDialog> 구현의 <xref:System.Windows.Forms.FileDialog> 하 고 만들기, 속성, 설정 및 대화 상자를 표시를 보여 줍니다. 이 예제에서는 사용 합니다 <xref:System.Windows.Forms.FileDialog.Filter%2A> 및 <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> 속성을 사용자에 대 한 필터의 목록을 제공 합니다. 예제에 사용 하 여 폼이 필요를 <xref:System.Windows.Forms.Button> 배치 및 <xref:System.IO> 네임 스페이스에 추가 합니다.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Filter" /> 형식이 잘못된 경우</exception>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.FileDialog.FilterIndex" />
      </Docs>
    </Member>
    <Member MemberName="FilterIndex">
      <MemberSignature Language="C#" Value="public int FilterIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FilterIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FilterIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FilterIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.FilterIndex : int with get, set" Usage="System.Windows.Forms.FileDialog.FilterIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>파일 대화 상자에서 현재 선택한 필터의 인덱스를 가져오거나 설정합니다.</summary>
        <value>파일 대화 상자에서 현재 선택한 필터의 인덱스를 포함하는 값입니다. 기본값은 1입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> 사용자에 게 첫 번째는 필터링 옵션을 설정 하는 속성이 표시 됩니다. 값을 사용할 수도 있습니다 <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> 후 선택 된 필터에 따라 특수 한 파일 작업을 수행 하려면 파일 대화 상자를 표시 합니다.  
  
> [!NOTE]
>  첫 번째 필터 항목의 인덱스 값은 1입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 합니다 <xref:System.Windows.Forms.OpenFileDialog> 구현의 <xref:System.Windows.Forms.FileDialog> 하 고 만들기, 속성, 설정 및 대화 상자를 표시를 보여 줍니다. 이 예제에서는 사용 합니다 <xref:System.Windows.Forms.FileDialog.Filter%2A> 및 <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> 속성을 사용자에 대 한 필터의 목록을 제공 합니다. 예제에 사용 하 여 폼이 필요를 <xref:System.Windows.Forms.Button> 배치 및 <xref:System.IO> 네임 스페이스에 추가 합니다.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="HookProc">
      <MemberSignature Language="C#" Value="protected override IntPtr HookProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int HookProc(native int hWnd, int32 msg, native int wparam, native int lparam) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HookProc (hWnd As IntPtr, msg As Integer, wparam As IntPtr, lparam As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="F#" Value="override this.HookProc : nativeint * int * nativeint * nativeint -&gt; nativeint" Usage="fileDialog.HookProc (hWnd, msg, wparam, lparam)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wparam" Type="System.IntPtr" />
        <Parameter Name="lparam" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWnd">대화 상자 창에 대한 핸들입니다.</param>
        <param name="msg">대화 상자에서 받은 메시지입니다.</param>
        <param name="wparam">메시지에 대한 추가 정보입니다.</param>
        <param name="lparam">메시지에 대한 추가 정보입니다.</param>
        <summary>파일 대화 상자에 특정 기능을 추가하도록 재정의된 일반 대화 상자의 후크 프로시저를 정의합니다.</summary>
        <returns>기본 대화 상자 프로시저가 메시지를 처리하면 0을 반환하고, 메시지를 무시하면 0이 아닌 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 후크 프로시저에는 사용자를를 연결 하거나 다른 루틴을 디버깅 하거나 기능을 향상 하기 위해 애플리케이션 또는 루틴을 삽입할 수 있습니다.  
  
 기본적으로 후크 프로시저 화면 WM_INITDIALOG 메시지에 대 한 응답에서 대화 상자를 배치 합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>재정의 하는 경우 <see cref="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> 메서드.</para></block>
      </Docs>
    </Member>
    <Member MemberName="InitialDirectory">
      <MemberSignature Language="C#" Value="public string InitialDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InitialDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.InitialDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InitialDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InitialDirectory : string with get, set" Usage="System.Windows.Forms.FileDialog.InitialDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>파일 대화 상자가 표시하는 초기 디렉터리를 가져오거나 설정합니다.</summary>
        <value>파일 대화 상자가 처음에 표시하는 디렉터리입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A> 속성은 일반적으로 다음 원본 중 하나를 사용 하 여 설정 합니다.  
  
-   마지막 디렉터리 또는 파일 작업에서 유지 프로그램에서 이전에 사용한 경로입니다.  
  
-   경로 애플리케이션 설정 같은 영구 소스에서 읽기를 <xref:Microsoft.Win32.Registry> 또는 애플리케이션에서 문자열 리소스입니다.  
  
-   표준 Windows 시스템 및 사용자 경로 Program Files, 내 문서, 내 음악, 등 (사용 하 여 가져올 수는 <xref:System.Environment.GetFolderPath%2A> 메서드)  
  
-   현재 애플리케이션의 시작 디렉터리 관련 경로 (에서 속성을 사용 하 여 가져올 수는 <xref:System.Windows.Forms.Application> 개체).  
  
 동적 경로 만드는 방법에 대 한 자세한 내용은 참조는 <xref:System.Windows.Forms.FileDialog> 클래스 개요입니다.  
  
 [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]이면 <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A> 설정 된 디렉터리 경로 방금 대신 전체 파일 이름으로 초기 디렉터리는 애플리케이션 경로 또는 올 사용자 마지막으로 선택한 디렉터리로 파일을 기본입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 합니다 <xref:System.Windows.Forms.OpenFileDialog> 구현의 <xref:System.Windows.Forms.FileDialog> 하 고 만들기, 속성, 설정 및 대화 상자를 표시를 보여 줍니다. 이 예제에서는 사용 된 <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A> 초기 디렉터리 대화 상자는 사용자에 게 표시 되 면 가장 설정 속성. 예제에 사용 하 여 폼이 필요를 <xref:System.Windows.Forms.Button> 배치 및 <xref:System.IO> 네임 스페이스에 추가 합니다.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">초기 디렉터리를 설정 해야 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.RestoreDirectory" />
        <altmember cref="T:Microsoft.Win32.Registry" />
        <altmember cref="T:System.Windows.Forms.Application" />
        <altmember cref="T:System.Environment" />
        <altmember cref="T:System.IO.Path" />
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="protected virtual IntPtr Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Instance" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Instance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Instance As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr Instance { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Instance : nativeint" Usage="System.Windows.Forms.FileDialog.Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>응용 프로그램의 Win32 인스턴스 핸들을 가져옵니다.</summary>
        <value>응용 프로그램의 Win32 인스턴스 핸들입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFileOk">
      <MemberSignature Language="C#" Value="protected void OnFileOk (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnFileOk(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnFileOk (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnFileOk(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnFileOk : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="fileDialog.OnFileOk e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.CancelEventArgs" />입니다.</param>
        <summary><see cref="E:System.Windows.Forms.FileDialog.FileOk" /> 이벤트를 발생시킵니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.FileDialog.FileOk" />
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="protected int Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Options" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Options" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Options As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int Options { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : int" Usage="System.Windows.Forms.FileDialog.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.FileDialog" />를 초기화할 값을 가져옵니다.</summary>
        <value><see cref="T:System.Windows.Forms.FileDialog" />를 초기화하는 내부 값의 비트 조합입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog.Options%2A> Win32를 사용 하 여 파일 대화 상자를 초기화 하는 데 사용 하는 플래그에 해당 하는 속성입니다. 속성을 사용 합니다 <xref:System.Windows.Forms.FileDialog> 가져오기 옵션을 설정 하는 클래스입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberSignature Language="F#" Value="override this.Reset : unit -&gt; unit" Usage="fileDialog.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>모든 속성을 기본값으로 다시 설정합니다.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>재정의 하는 경우 <see cref="M:System.Windows.Forms.FileDialog.Reset" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Windows.Forms.CommonDialog.Reset" /> 메서드.</para></block>
      </Docs>
    </Member>
    <Member MemberName="RestoreDirectory">
      <MemberSignature Language="C#" Value="public bool RestoreDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RestoreDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.RestoreDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property RestoreDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RestoreDirectory { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RestoreDirectory : bool with get, set" Usage="System.Windows.Forms.FileDialog.RestoreDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>대화 상자를 닫기 전에 대화 상자에서 디렉터리를 이전에 선택한 디렉터리로 복원할지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>파일을 검색하는 동안 디렉터리를 변경한 경우 대화 상자에서 현재 디렉터리가 이전에 선택한 디렉터리로 복원되면 <see langword="true" />이고, 복원되지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는 합니다 <xref:System.Windows.Forms.OpenFileDialog> 구현의 <xref:System.Windows.Forms.FileDialog> 하 고 만들기, 속성, 설정 및 대화 상자를 표시를 보여 줍니다. 예제에서는 <xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A> 속성 대화 상자를 닫을 때 이전에 선택한 디렉터리로 복원 되었는지 확인 합니다. 예제에 사용 하 여 폼이 필요를 <xref:System.Windows.Forms.Button> 배치 및 <xref:System.IO> 네임 스페이스에 추가 합니다.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">속성을 설정 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.InitialDirectory" />
      </Docs>
    </Member>
    <Member MemberName="RunDialog">
      <MemberSignature Language="C#" Value="protected override bool RunDialog (IntPtr hWndOwner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool RunDialog(native int hWndOwner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.RunDialog(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RunDialog (hWndOwner As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool RunDialog(IntPtr hWndOwner);" />
      <MemberSignature Language="F#" Value="override this.RunDialog : nativeint -&gt; bool" Usage="fileDialog.RunDialog hWndOwner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWndOwner" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWndOwner">일반 대화 상자에 대한 소유자 창의 창 핸들을 나타내는 값입니다.</param>
        <summary>일반 대화 상자를 지정합니다.</summary>
        <returns>파일을 열 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 구현을 제공 <xref:System.Windows.Forms.CommonDialog.RunDialog%2A>에 사용자가 파일 대화 상자가 호출 될 때 호출 되 고 <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A>입니다.  
  
 파생된 클래스에서 <xref:System.Windows.Forms.OpenFileDialog> 하 고 <xref:System.Windows.Forms.SaveFileDialog> 잘못 된 파일 이름이 <xref:System.Exception> 발생할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowHelp">
      <MemberSignature Language="C#" Value="public bool ShowHelp { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHelp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ShowHelp" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowHelp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowHelp { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowHelp : bool with get, set" Usage="System.Windows.Forms.FileDialog.ShowHelp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>**도움말** 단추가 파일 대화 상자에 표시되는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>대화 상자에 도움말 단추가 포함되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.Control.HelpRequested> 클릭할 때 이벤트가 발생 합니다 **도움말** 단추.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportMultiDottedExtensions">
      <MemberSignature Language="C#" Value="public bool SupportMultiDottedExtensions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportMultiDottedExtensions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Property SupportMultiDottedExtensions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportMultiDottedExtensions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SupportMultiDottedExtensions : bool with get, set" Usage="System.Windows.Forms.FileDialog.SupportMultiDottedExtensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>대화 상자에서 파일 확장명이 여러 개인 파일의 표시 및 저장을 지원하는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>대화 상자에서 여러 개의 파일 확장명을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우에 따라 사용자가 열고 여러 파일 이름 확장명을 사용 하는 파일을 저장 합니다. 애플리케이션 매니페스트 파일 예를 들어, 사용한는 [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] 배포 기술 엔드 복잡 한 파일 이름 확장명에 ". exe.manifest"입니다. 이 속성을 설정 `true` 설정할 수 있습니다는 <xref:System.Windows.Forms.FileDialog.Filter%2A> 속성을 여러 개의 점을 확장 합니다.  
  
 경우 <xref:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions%2A> 됩니다 `false`에 대 한 여러 개의 점을 확장을 할당할 <xref:System.Windows.Forms.FileDialog.Filter%2A>, 같은 파생 컨트롤 <xref:System.Windows.Forms.SaveFileDialog> 만 사용 하 여 문자열에서 마지막으로 확장 됩니다. 대신 ".manifest"를 사용 하는 예를 들어, ". exe.manifest"입니다.  
  
   
  
## Examples  
 확장을 사용 하 여 파일을 저장 하는 다음 코드 예제에서는 ". data.txt"입니다. 이 코드 예제에서는 애플리케이션 호스트를 <xref:System.Windows.Forms.SaveFileDialog> 라는 `saveFileDialog1` 와 <xref:System.Windows.Forms.Button> 라는 `button1`합니다.  
  
 [!code-csharp[SupportMultiDottedExtensions#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SupportMultiDottedExtensions/CS/Form1.cs#1)]
 [!code-vb[SupportMultiDottedExtensions#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SupportMultiDottedExtensions/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Forms.FileDialog.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>파일 대화 상자 제목을 가져오거나 설정합니다.</summary>
        <value>파일 대화 상자 제목입니다. 기본값은 빈 문자열("")입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 문자열은 대화 상자의 제목 표시줄에 배치 됩니다. 제목 빈 문자열인 경우 "다른 이름으로 저장" 또는 "열린" 중 하나를 기본 제목으로 사용 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 초기화 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.OpenFileDialog>설정 합니다 <xref:System.Windows.Forms.FileDialog.Title%2A> 및 <xref:System.Windows.Forms.FileDialog.Filter%2A> 속성 및 설정 하 여 여러 파일을 선택할 수 있도록는 <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A?displayProperty=nameWithType> 속성을 true로 합니다. 이 예제를 실행 하려면 다음 코드를 포함 하는 폼에 붙여를 <xref:System.Windows.Forms.OpenFileDialog> 라는 `OpenFileDialog1` 와 <xref:System.Windows.Forms.Button> 라는 `fileButton`합니다. 호출 된 `InitializeOpenFileDialog` 폼의 생성자 또는 `Load` 메서드. 또한이 예제는 `Click` 의 이벤트를 `Button` 컨트롤 예제에 정의 된 이벤트 처리기에 연결 된.  
  
 [!code-cpp[System.Windows.Forms.FileDialog#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#6)]
 [!code-csharp[System.Windows.Forms.FileDialog#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#6)]
 [!code-vb[System.Windows.Forms.FileDialog#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#6)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 대화 상자 제목을 설정 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="fileDialog.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 개체의 문자열 버전을 제공합니다.</summary>
        <returns>이 개체의 문자열 버전입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateNames">
      <MemberSignature Language="C#" Value="public bool ValidateNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ValidateNames" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateNames As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateNames { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateNames : bool with get, set" Usage="System.Windows.Forms.FileDialog.ValidateNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>대화 상자에서 유효한 Win32 파일 이름만 사용할 수 있는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>대화 상자에서 유효한 Win32 파일 이름만 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 편집 컨트롤 항목이 들어 있지만 공백을 클릭 하면 **확인**, 여부 유효한 지 여부를 대화 상자에 파일 이름을 반환 합니다. 기본 확장명 없음 텍스트에 추가 됩니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">속성을 설정 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>