<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="107b075d1988af8904fd028834582734403a58f8" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65015638" /></Metadata><TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>데이터를 전송 하기 위한 형식 독립적 메커니즘을 제공 합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IDataObject` 인터페이스를 사용 합니다 <xref:System.Windows.Forms.Clipboard> 클래스 및 끌어서 놓기 작업 합니다.  
  
 클래스에서 구현 되는 경우는 <xref:System.Windows.Forms.IDataObject> 메서드 클래스의 인스턴스에서 여러 형식의 데이터를 저장 하는 데 사용할 수 있습니다. 둘 이상의 형식으로 데이터를 저장 하면 대상 애플리케이션을 모를 수도 형식 요구 사항을 가진가 저장된 된 데이터를 검색할 수 있습니다. 인스턴스의 데이터를 저장 하 <xref:System.Windows.Forms.IDataObject>를 호출 합니다 <xref:System.Windows.Forms.IDataObject.SetData%2A> 메서드 데이터 형식을 지정 하 고는 `format` 매개 변수. 설정 된 `autoConvert` 매개 변수를 `false` 경우 원하지 않는 저장 된 데이터를 검색할 때 다른 형식으로 변환할 수 있습니다. 호출할 <xref:System.Windows.Forms.IDataObject.SetData%2A> 인스턴스 중 하나에서 여러 번 <xref:System.Windows.Forms.IDataObject> 둘 이상의 형식에 데이터를 저장 합니다.  
  
 저장 된 데이터를 검색 하는 <xref:System.Windows.Forms.IDataObject> 호출 하 여를 <xref:System.Windows.Forms.IDataObject.GetData%2A> 에서 서식 메서드 및 데이터를 지정 하는 `format` 매개 변수. 설정 합니다 `autoConvert` 매개 변수를 `false` 만 지정 된 형식으로 저장 된 데이터를 검색 합니다. 저장 된 데이터가 지정 된 형식으로 변환 하려면 설정 `autoConvert` 하 `true`, 또는 사용 하지 마십시오 `autoConvert`합니다.  
  
 저장 된 데이터의 형식을 결정 하는 <xref:System.Windows.Forms.IDataObject>, 다음을 사용 하 여 <xref:System.Windows.Forms.IDataObject> 메서드.  
  
-   호출 된 <xref:System.Windows.Forms.IDataObject.GetFormats%2A> 는 데이터를 사용할 수 있는 모든 형식의 배열을 검색 하는 방법입니다. 설정 된 `autoConvert` 매개 변수를 `false` 저장 되는 데이터 형식만 가져오려고 합니다. 설정 데이터를 사용할 수 있는 모든 형식을 가져오려고 `autoConvert` 에 `true`, 또는이 매개 변수를 사용 하지 마십시오.  
  
-   호출 된 <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> 저장 된 데이터를 특정 형식으로 사용할 수 있는지 확인 하는 방법입니다. 지정 된 형식으로 변환할 데이터를 저장된 하지 않으려면 설정 합니다 `autoConvert` 매개 변수를 `false`입니다.  
  
 참조 된 <xref:System.Windows.Forms.DataObject> 이 인터페이스의 구현에 대 한 클래스입니다. 참조 된 <xref:System.Windows.Forms.DataFormats> 미리 정의 된에 대 한 클래스 <xref:System.Windows.Forms.Clipboard> 데이터 형식입니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정 된 데이터 형식에 연결 된 데이터를 검색 합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">검색할 데이터의 형식입니다. 참조 <see cref="T:System.Windows.Forms.DataFormats" /> 미리 정의 된 형식에 대 한 합니다.</param>
        <summary>지정 된 데이터 형식에 연결 된 데이터를 검색 합니다.</summary>
        <returns>지정된 된 형식과 연관 된 데이터 또는 <see langword="null" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 형식의 데이터를 찾을 수 없으면, 데이터 형식으로 변환 하려고 합니다. 이 메서드가 반환 하는 경우 데이터 지정 된 형식으로 변환할 수 없습니다, `null`합니다.  
  
 데이터 연결 된 또는 형식으로 변환할 수 있는지 여부를 결정할 호출 <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> 호출 하기 전에 <xref:System.Windows.Forms.IDataObject.GetData%2A>입니다. 호출 <xref:System.Windows.Forms.IDataObject.GetFormats%2A> 이 인스턴스에 저장 된 데이터에 대 한 올바른 형식의 목록을입니다.  
  
> [!NOTE]
>  데이터는 변환이 가능 하도록 지정 합니다. 저장 된 경우 및 요청된 된 형식으로 저장 된 형식과 호환 되는 경우 다른 형식으로 변환할 수 있습니다. 유니코드 텍스트로 변환할 수로 저장 된 데이터 예  
  
 이 메서드를 구현 하는 것을 참조 하세요. <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 <xref:System.Windows.Forms.DataObject> 클래스를 구현 하는 `IDataObject,` 의 사용을 보여 합니다 `GetData` 메서드. 에 저장 된 데이터를 검색 하는 메서드는 `myDataObject`와 연결 된 된 `Text` 형식입니다. 이 예제에서는 이미 만들었다고 가정를 <xref:System.Windows.Forms.Form> 라는 `Form1` 와 <xref:System.Windows.Forms.TextBox> 라는 `textBox1`합니다.  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : Type -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format"><see cref="T:System.Type" /> 검색할 데이터의 형식을 나타내는입니다. 참조 <see cref="T:System.Windows.Forms.DataFormats" /> 미리 정의 된 형식에 대 한 합니다.</param>
        <summary>지정 된 클래스 형식과 관련 된 데이터를 검색 합니다.</summary>
        <returns>지정된 된 형식과 연관 된 데이터 또는 <see langword="null" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 지정 된 형식의 데이터를 찾을 수 없으면, 데이터 형식으로 변환 하려고 합니다. 이 메서드가 반환 하는 경우 데이터 지정 된 형식으로 변환할 수 없습니다, `null`합니다.  
  
 데이터 연결 된 또는 형식으로 변환할 수 있는지 여부를 결정할 호출 <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> 호출 하기 전에 <xref:System.Windows.Forms.IDataObject.GetData%2A>입니다. 호출 <xref:System.Windows.Forms.IDataObject.GetFormats%2A> 이 인스턴스에 저장 된 데이터에 대 한 올바른 형식의 목록을입니다.  
  
> [!NOTE]
>  데이터는 변환이 가능 하도록 지정 합니다. 저장 된 경우 및 요청된 된 형식으로 저장 된 형식과 호환 되는 경우 다른 형식으로 변환할 수 있습니다. 유니코드 텍스트로 변환할 수로 저장 된 데이터 예  
  
 이 메서드를 구현 하는 것을 참조 하세요. <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 <xref:System.Windows.Forms.DataObject> 클래스를 구현 하는 `IDataObject`의 사용을 보여 합니다 `GetData` 메서드. 저장 된 데이터를 검색 하는 메서드는 `myObject`, 특정 형식으로 연결 되는 `myType`합니다. 검색된 된 데이터 형식의 메시지 상자에 표시 됩니다. 이 예제에서는 이미 만들었다고 가정 된 <xref:System.Windows.Forms.Form> 라는 `Form1`합니다.  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string * bool -&gt; obj" Usage="iDataObject.GetData (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">검색할 데이터의 형식입니다. 참조 <see cref="T:System.Windows.Forms.DataFormats" /> 미리 정의 된 형식에 대 한 합니다.</param>
        <param name="autoConvert"><see langword="true" /> 지정된 된 형식으로 데이터를 변환할 그렇지 않으면 <see langword="false" />합니다.</param>
        <summary>데이터 형식으로 변환할지 여부를 결정 하는 부울을 사용 하 여, 지정 된 데이터 형식과 연결 된 데이터를 검색 합니다.</summary>
        <returns>지정된 된 형식과 연관 된 데이터 또는 <see langword="null" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 `autoConvert` 매개 변수는 `true` 이 메서드가 지정 된 형식의 데이터를 찾을 수 없습니다, 데이터 형식으로 변환 하려고 합니다. 지정 된 형식으로 데이터를 변환할 수 없는 경우 또는 사용 하 여 데이터를 저장 한 경우는 `autoConvert` 매개 변수 설정 `false`,이 메서드가 반환 `null`합니다.  
  
 경우는 `autoConvert` 매개 변수는 `false`,이 메서드는 지정 된 형식의 데이터를 반환 또는 `null` 없으면이 형식의 데이터가 없습니다.  
  
 데이터 연결 된 또는 형식으로 변환할 수 있는지 여부를 결정할 호출 <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> 호출 하기 전에 <xref:System.Windows.Forms.IDataObject.GetData%2A>입니다. 호출 <xref:System.Windows.Forms.IDataObject.GetFormats%2A> 이 인스턴스에 저장 된 데이터에 대 한 올바른 형식의 목록을입니다.  
  
> [!NOTE]
>  데이터는 변환이 가능 하도록 지정 합니다. 저장 된 경우 및 요청된 된 형식으로 저장 된 형식과 호환 되는 경우 다른 형식으로 변환할 수 있습니다. 유니코드 텍스트로 변환할 수로 저장 된 데이터 예  
  
 이 메서드를 구현 하는 것을 참조 하세요. <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 <xref:System.Windows.Forms.DataObject> 클래스를 구현 하는 `IDataObject`의 사용을 보여 합니다 `GetData` 메서드. 에 저장 된 데이터를 검색 하는 예제는 `DataObject`를 사용 하 여는 `autoConvert` 데이터 형식을 변환할 것인지 여부를 지정 하려면 매개 변수입니다. 첫째, `myDataObject` 텍스트 데이터를 사용 하 여 만들어집니다. 다음 예제에서는 데이터를 검색 하는 두 번 시도 합니다. 첫 번째 시도에서는 문자열 집합을 형식으로 지정 된 `autoConvert` 매개 변수를 `false`입니다. 이 시도 실패 하며 결과 "#1 메시지입니다." 라는 레이블이 지정 된 메시지 상자에 표시 됩니다. 예제에서는 두 번째 시도 사용 하 여 동일한 데이터를 검색 합니다 `autoConvert` 매개 변수 설정 `true`합니다. 이 평가판에 성공 하 고 결과 "#2 메시지입니다." 라는 레이블이 지정 된 메시지 상자에 표시 됩니다. 예제에서는 만들었다고 가정 된 <xref:System.Windows.Forms.Form> 라는 `Form1`합니다.  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이 인스턴스에 저장 된 데이터가 지정 된 형식과 연결 되는지 여부를 결정 합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">확인할 형식입니다. 참조 <see cref="T:System.Windows.Forms.DataFormats" /> 미리 정의 된 형식에 대 한 합니다.</param>
        <summary>이 인스턴스에 저장 된 데이터 연결 된 또는 지정된 된 형식으로 변환할 수 있는지 여부를 결정 합니다.</summary>
        <returns><see langword="true" /> 이 인스턴스와 연관 된 또는에 지정된 된 형식으로 변환할 수 데이터에 저장 하는 경우 그렇지 않으면 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 형식이 있는지 여부를 확인 하려면이 메서드를 호출 <xref:System.Windows.Forms.DataObject> 호출 하기 전에 <xref:System.Windows.Forms.IDataObject.GetData%2A>입니다. 호출 <xref:System.Windows.Forms.IDataObject.GetFormats%2A> 이 인스턴스에 사용할 수 있는 형식에 대 한 합니다.  
  
> [!NOTE]
>  데이터는 변환이 가능 하도록 지정 합니다. 저장 된 경우 및 요청된 된 형식으로 저장 된 형식과 호환 되는 경우 다른 형식으로 변환할 수 있습니다. 유니코드 텍스트로 변환할 수로 저장 된 데이터 예  
  
 이 메서드를 구현 하는 것을 참조 하세요. <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 <xref:System.Windows.Forms.DataObject> 클래스를 구현 하는 `IDataObject`의 사용을 보여 합니다 `GetDataPresent` 메서드. 문자열을 사용 하 여 데이터 개체를 만들면 먼저 및 `Text` 형식입니다. 데이터에 있는지 확인 한 다음는 `Text` 서식을 지정 하 고 메시지 상자에 결과 표시 합니다. 예제에서는 만들었다고 가정 된 <xref:System.Windows.Forms.Form> 라는 `Form1`합니다.  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : Type -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format"><see cref="T:System.Type" /> 확인할 형식을 나타내는입니다. 참조 <see cref="T:System.Windows.Forms.DataFormats" /> 미리 정의 된 형식에 대 한 합니다.</param>
        <summary>이 인스턴스에 저장 된 데이터 연결 된 또는 지정된 된 형식으로 변환할 수 있는지 여부를 결정 합니다.</summary>
        <returns><see langword="true" /> 이 인스턴스와 연관 된 또는에 지정된 된 형식으로 변환할 수 데이터에 저장 하는 경우 그렇지 않으면 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 형식이 있는지 여부를 확인 하려면이 메서드를 호출 <xref:System.Windows.Forms.DataObject> 호출 하기 전에 <xref:System.Windows.Forms.IDataObject.GetData%2A>입니다. 호출 <xref:System.Windows.Forms.IDataObject.GetFormats%2A> 이 인스턴스에 사용할 수 있는 형식에 대 한 합니다.  
  
> [!NOTE]
>  데이터는 변환이 가능 하도록 지정 합니다. 저장 된 경우 및 요청된 된 형식으로 저장 된 형식과 호환 되는 경우 다른 형식으로 변환할 수 있습니다. 유니코드 텍스트로 변환할 수로 저장 된 데이터 예  
  
 이 메서드를 구현 하는 것을 참조 하세요. <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 <xref:System.Windows.Forms.DataObject> 클래스를 구현 하는 `IDataObject`의 사용을 보여 합니다 `GetDataPresent` 메서드. 먼저, 구성 요소를 만듭니다 (`myComponent`) 데이터 개체에 저장 합니다 (`myDataObject`). 지정 된 데이터를 저장 되는지 여부를 확인 한 다음 `myDataObject`합니다. 테스트 결과가 `true`, 메시지 상자에 결과 표시 하 고 텍스트 상자에 데이터 형식을 표시 합니다. 이 예제에서는 이미 만들었다고 가정를 <xref:System.Windows.Forms.Form> 라는 `Form1` 와 <xref:System.Windows.Forms.TextBox> 라는 `textBox1`합니다.  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string * bool -&gt; bool" Usage="iDataObject.GetDataPresent (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">확인할 형식입니다. 참조 <see cref="T:System.Windows.Forms.DataFormats" /> 미리 정의 된 형식에 대 한 합니다.</param>
        <param name="autoConvert"><see langword="true" /> 이 인스턴스에서 데이터 저장 여부를 결정할 수 변환할 지정된 된 형식으로 <see langword="false" /> 지정 된 형식의 데이터 인지 확인 합니다.</param>
        <summary>이 인스턴스에 저장 된 데이터가 데이터 형식으로 변환할지 여부를 결정 하는 부울 값을 사용 하 여 지정된 된 형식으로 사용 하 여 연결 되는지 여부를 결정 합니다.</summary>
        <returns><see langword="true" /> 데이터, 또는에 지정된 된 형식으로 변환할 수 하는 경우 그렇지 않으면 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 형식이 있는지 여부를 확인 하려면이 메서드를 호출 <xref:System.Windows.Forms.DataObject> 호출 하기 전에 <xref:System.Windows.Forms.IDataObject.GetData%2A>입니다. 호출 <xref:System.Windows.Forms.IDataObject.GetFormats%2A> 이 인스턴스에 사용할 수 있는 형식에 대 한 합니다.  
  
 이 메서드가 반환 `true` 때:  
  
-   합니다 `autoConvert` 매개 변수는 `true` 데이터가 적절 한 형식으로 변환할 수 있는 형식 및 합니다.  
  
-   `autoConvert` 매개 변수는 `false` 이며 데이터를 적절 한 형식입니다.  
  
 이 메서드가 반환 `false` 때:  
  
-   `autoConvert` 매개 변수가 `true` 하 고이 메서드가 지정 된 형식의 데이터를 찾을 수 없습니다 및 데이터 지정된 된 형식으로 변환할 수 없는 또는 데이터를 사용 하 여 저장 `autoConvert` 로 설정 `false`합니다.  
  
-   합니다 `autoConvert` 매개 변수는 `false`, 이며이 인스턴스에서 지정 된 형식의 데이터가 존재 하지 않습니다.  
  
> [!NOTE]
>  데이터는 변환이 가능 하도록 지정 합니다. 저장 된 경우 및 요청된 된 형식으로 저장 된 형식과 호환 되는 경우 다른 형식으로 변환할 수 있습니다. 유니코드 텍스트로 변환할 수로 저장 된 데이터 예  
  
 이 메서드를 구현 하는 것을 참조 하세요. <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 <xref:System.Windows.Forms.DataObject> 클래스를 구현 하는 `IDataObject`의 사용을 보여 합니다 `GetDataPresent` 메서드. 첫째, 데이터 개체를 만듭니다 (`myDataObject`) 문자열을 사용 하 고 `Text` 형식입니다. 개체와 연결 된 데이터를 쿼리 한 다음 합니다 `Text` 형식으로 사용 하 여는 `autoConvert` 매개 변수 설정 `false`합니다. 이 시도 실패 하며 결과 "#1 메시지입니다." 라는 레이블이 지정 된 메시지 상자에 표시 됩니다. 두 번째 시도 설정 합니다 `autoConvert` 매개 변수를 `true`입니다. 이 평가판에 성공 하 고 결과 "#2 메시지입니다." 라는 레이블이 지정 된 메시지 상자에 표시 됩니다. 예제에서는 만들었다고 가정 된 <xref:System.Windows.Forms.Form> 라는 `Form1`합니다.  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이 인스턴스에 저장 된 데이터와 관련 되어 있거나 변환 될 수 있는 모든 형식의 목록을 반환 합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; string[]" Usage="iDataObject.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 인스턴스에 저장 된 데이터와 관련 되어 있거나 변환 될 수 있는 모든 형식의 목록을 반환 합니다.</summary>
        <returns>이 개체에 저장 된 데이터에서 지원 되는 모든 형식의 목록을 나타내는 이름의 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하기 전에 지원 되는 데이터 형식을 가져오려고 합니다 <xref:System.Windows.Forms.IDataObject.GetData%2A> 메서드. 참조 된 <xref:System.Windows.Forms.DataFormats> 미리 정의 된 형식에 대 한 클래스입니다.  
  
> [!NOTE]
>  데이터는 변환이 가능 하도록 지정 합니다. 저장 된 경우 및 요청된 된 형식으로 저장 된 형식과 호환 되는 경우 다른 형식으로 변환할 수 있습니다. 유니코드 텍스트로 변환할 수로 저장 된 데이터 예  
  
 이 메서드를 구현 하는 것을 참조 하세요. <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 <xref:System.Windows.Forms.DataObject> 클래스를 구현 하는 `IDataObject`의 사용을 보여 합니다 `GetFormats` 메서드. 첫째, 데이터 개체를 만듭니다 (`myDataObject`) 문자열을 사용 하 고 `Text` 형식입니다. 그런 다음 모든 데이터 형식 및 데이터 개체의 데이터 변환 형식 검색 하 고 메시지 상자에 결과 목록이 표시 됩니다. 이 예에서는 만들었다고 가정 된 <xref:System.Windows.Forms.Form> 라는 `Form1`합니다.  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : bool -&gt; string[]" Usage="iDataObject.GetFormats autoConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert"><see langword="true" /> 모든 형식을 검색 하려면이 인스턴스에 저장 된 데이터와 관련 되어 있거나 변환할 수 있습니다. <see langword="false" /> 네이티브 데이터 형식만 검색 하려면.</param>
        <summary>이 인스턴스에 저장 된 데이터와 연결 된 또는 부울 값을 사용 하 여 형식을 모든 데이터를 변환할 수 있는 형식 또는 네이티브 데이터를 검색할 수 있는지 여부를 확인으로 변환 될 수 있는 모든 형식의 목록을 가져옵니다.</summary>
        <returns>이 개체에 저장 된 데이터에서 지원 되는 모든 형식의 목록을 나타내는 이름의 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하기 전에 지원 되는 데이터 형식을 가져오려고 합니다 <xref:System.Windows.Forms.IDataObject.GetData%2A> 메서드. 참조 된 <xref:System.Windows.Forms.DataFormats> 미리 정의 된 형식에 대 한 클래스입니다.  
  
> [!NOTE]
>  데이터는 변환이 가능 하도록 지정 합니다. 저장 된 경우 및 요청된 된 형식으로 저장 된 형식과 호환 되는 경우 다른 형식으로 변환할 수 있습니다. 유니코드 텍스트로 변환할 수로 저장 된 데이터 예  
  
 이 메서드를 구현 하는 것을 참조 하세요. <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 <xref:System.Windows.Forms.DataObject> 클래스를 구현 하는 `IDataObject`의 사용을 보여 합니다 `GetFormats` 메서드. 첫째, 데이터 개체를 만듭니다 (`myDataObject`) 문자열을 사용 하 고 `UnicodeText` 형식입니다. 다음 두 쿼리를 데이터와 관련 된 형식을 가져올 수 있습니다. 첫 번째 쿼리에서 설정 합니다 `autoConvert` 매개 변수를 `false` :이 경우 데이터의 네이티브 형식에만 반환 됩니다. 두 번째 쿼리에서 설정 합니다 `autoConvert` 매개 변수를 `true`는 데이터를 변환할 수 있는 형식을 포함 하는 형식 목록을 가져옵니다. 각각의 경우에서 메시지 상자에 결과 목록이 표시 됩니다. 이 예에서는 만들었다고 가정 된 <xref:System.Windows.Forms.Form> 라는 `Form1`합니다.  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 된 데이터 및 관련 된 형식을이 인스턴스에 저장합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : obj -&gt; unit" Usage="iDataObject.SetData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">데이터 저장소입니다.</param>
        <summary>형식에 대해 데이터 클래스를 사용 하 여이 인스턴스에서 지정된 된 데이터를 저장 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 형식은 데이터 클래스에서 파생 됩니다.  
  
 이 메서드를 사용 하 여 저장 된 데이터를 검색할 때 호환 형식으로 변환할 수 있습니다.  
  
 이 메서드를 구현 하는 것을 참조 하세요. <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 <xref:System.Windows.Forms.DataObject> 클래스를 구현 하는 `IDataObject`의 사용을 보여 합니다 `SetData` 메서드. 먼저, 구성 요소를 만듭니다 (`myComponent`) 데이터 개체에 저장 합니다 (`myDataObject`). 그런 다음 지정 된 데이터를 데이터 개체에 저장 됩니다 및 메시지 상자에 결과 표시 하는지 여부를 확인 합니다. 예제에서는 만들었다고 가정 된 <xref:System.Windows.Forms.Form> 라는 `Form1`합니다.  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">데이터와 관련된 형식입니다. 참조 <see cref="T:System.Windows.Forms.DataFormats" /> 미리 정의 된 형식에 대 한 합니다.</param>
        <param name="data">데이터 저장소입니다.</param>
        <summary>지정된 된 데이터 및 관련 된 형식을이 인스턴스에 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대상 애플리케이션의 형식을 모르는 경우이 메서드를 사용 하 여 여러 형식의 데이터를 저장할 수 있습니다.  
  
 이 메서드를 사용 하 여 저장 된 데이터를 검색할 때 호환 형식으로 변환할 수 있습니다.  
  
 이 메서드를 구현 하는 것을 참조 하세요. <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 <xref:System.Windows.Forms.DataObject> 클래스를 구현 하는 `IDataObject`의 사용을 보여 합니다 `SetData` 메서드. 첫째, 데이터 개체를 만듭니다 (`myDataObject`) 지정 하는 개체의 문자열을 가져와 `UnicodeText` 형식입니다. 지정 하는 개체에 저장 된 데이터를 검색 한 다음 합니다 `Text` 형식으로 데이터를 변환할 수 있도록 합니다 `Text` 형식입니다. 결과 메시지 상자에 표시 됩니다. 이 예에서는 만들었다고 가정 된 <xref:System.Windows.Forms.Form> 라는 `Form1`합니다.  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : Type * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format"><see cref="T:System.Type" /> 데이터와 관련 된 형식을 나타내는입니다. 참조 <see cref="T:System.Windows.Forms.DataFormats" /> 미리 정의 된 형식에 대 한 합니다.</param>
        <param name="data">데이터 저장소입니다.</param>
        <summary>지정된 된 데이터 및 해당 관련 된 클래스 형식을이 인스턴스에 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대상 애플리케이션의 형식을 모르는 경우이 메서드를 사용 하 여 여러 형식의 데이터를 저장할 수 있습니다.  
  
 이 메서드를 사용 하 여 저장 된 데이터를 검색할 때 호환 형식으로 변환할 수 있습니다.  
  
 이 메서드를 구현 하는 것을 참조 하세요. <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 <xref:System.Windows.Forms.DataObject> 클래스를 구현 하는 `IDataObject`의 사용을 보여 합니다 `SetData` 메서드. 구성 요소를 먼저 만듭니다 (`myComponent`) 데이터 개체에 저장 합니다 (`myDataObject`)를 사용 하 여 `myType` 데이터 형식을 지정 합니다. 그런 다음 지정 된 형식의 데이터 개체에 저장 됩니다 하 고 메시지 상자에 결과 표시 하는지 여부를 확인 합니다. 예제에서는 만들었다고 가정 된 <xref:System.Windows.Forms.Form> 라는 `Form1`합니다.  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * bool * obj -&gt; unit" Usage="iDataObject.SetData (format, autoConvert, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">데이터와 관련된 형식입니다. 참조 <see cref="T:System.Windows.Forms.DataFormats" /> 미리 정의 된 형식에 대 한 합니다.</param>
        <param name="autoConvert"><see langword="true" /> 데이터를 다른 형식으로 변환할 수 있게 하려면 그렇지 않으면 <see langword="false" />합니다.</param>
        <param name="data">데이터 저장소입니다.</param>
        <summary>데이터를 다른 형식으로 변환할 수 있는지 여부를 지정 하는 부울 값을 사용 하 여이 인스턴스에서 지정된 된 데이터 및 관련 된 형식을 저장 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대상 애플리케이션의 형식을 모르는 경우이 메서드를 사용 하 여 여러 형식의 데이터를 저장할 수 있습니다.  
  
 이 메서드를 구현 하는 것을 참조 하세요. <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>합니다.  
  
   
  
## Examples  
 이 예제에서는 합니다 <xref:System.Windows.Forms.DataObject> 클래스를 구현 하는 `IDataObject`의 사용을 보여 합니다 `SetData` 메서드. 첫째, 데이터 개체를 만듭니다 (`myDataObject`) 가져와 `UnicodeText` 문자열을 합니다 `autoConvert` 매개 변수 설정 `false`합니다. 그런 다음 개체에 저장 된 데이터와 연결 된 사용자를 검색 하 고 메시지 상자에 결과 표시 합니다. 데이터 연결 된 유일한 형식은 `UnicodeText` 형식입니다. 이 예에서는 만들었다고 가정 된 <xref:System.Windows.Forms.Form> 라는 `Form1`합니다.  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>