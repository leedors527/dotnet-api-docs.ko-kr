<Type Name="KeyEventArgs" FullName="System.Windows.Forms.KeyEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="99c726a26a3a3ac82563e7cf9921fd0fd947b78f" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65015539" /></Metadata><TypeSignature Language="C#" Value="public class KeyEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.KeyEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type KeyEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>데이터를 제공 합니다 <see cref="E:System.Windows.Forms.Control.KeyDown" /> 또는 <see cref="E:System.Windows.Forms.Control.KeyUp" /> 이벤트입니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.KeyEventArgs>, 각 키를 누르고 전달 되는지 보조키 (CTRL, ALT 및 SHIFT) 동시에 눌렀는지 여부를 지정 하는 <xref:System.Windows.Forms.Control.KeyDown> 또는 <xref:System.Windows.Forms.Control.KeyUp> 이벤트입니다.  
  
 <xref:System.Windows.Forms.Control.KeyDown> 이벤트 모든 키를 누를 때 발생 합니다. <xref:System.Windows.Forms.Control.KeyUp> 이벤트 키를 놓을 때 발생 합니다. 중복 <xref:System.Windows.Forms.Control.KeyDown> 키를 누르고, 있지만 한 볼륨만 경우 이벤트가 발생할 키를 반복할 때마다 <xref:System.Windows.Forms.Control.KeyUp> 키를 놓을 때 이벤트가 생성 됩니다.  
  
 <xref:System.Windows.Forms.Control.KeyPress> 이벤트는 키를 누를 경우에 발생 합니다. <xref:System.Windows.Forms.KeyPressEventArgs> 각 함께 전달 되 면 <xref:System.Windows.Forms.Control.KeyPress> 이벤트 키를 누를 때마다 결과로 구성 된 문자를 지정 합니다.  
  
 이벤트 모델에 대 한 자세한 내용은 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 키 누름의 상태를 검색 하는 방법을 보여 줍니다.  
  
 **예제 1**  
  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Windows.Forms.Control.KeyDown> 이벤트는 <xref:System.Windows.Forms.Help> 팝업 스타일 애플리케이션의 사용자에 게 도움말을 표시 하는 클래스입니다. 이 예제에서는 사용을 <xref:System.Windows.Forms.KeyEventArgs> 속성 한정자 키를 사용 하 여 F1 키를 눌러 모든 변형에 대해 필터링 할 이벤트 처리기 메서드에 전달 합니다. 모든 키보드 한정자를 포함 하는 f1 변형을 누를 때 합니다 <xref:System.Windows.Forms.Help> 클래스는 비슷한 팝업 창이 표시는 <xref:System.Windows.Forms.ToolTip>, 컨트롤 근처 합니다. Alt+f2를 누를 경우 추가 정보를 사용 하 여 여러 도움말 팝업이 표시 됩니다.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **예제 2**  
  
 다음 예제에서는 사용자가 ALT + E를 누른 여부와 마우스 포인터가 있는 경우를 결정을 <xref:System.Windows.Forms.TreeNode>를 편집 하면 <xref:System.Windows.Forms.TreeNode>합니다.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 **예제 3**  
  
 다음 예제에서는 사용자 숫자가 아닌 키를 눌렀는지 여부를 결정 하 고 그렇다면 취소는 <xref:System.Windows.Forms.Control.KeyPress> 를 사용 하 여 이벤트를 <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> 속성.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
    <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
    <altmember cref="T:System.Windows.Forms.KeyPressEventArgs" />
    <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyEventArgs (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.KeyEventArgs.#ctor(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keyData As Keys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyEventArgs(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.KeyEventArgs : System.Windows.Forms.Keys -&gt; System.Windows.Forms.KeyEventArgs" Usage="new System.Windows.Forms.KeyEventArgs keyData" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> CTRL, SHIFT 및 ALT 키를 동시에 눌렀는지 여부를 나타내는 보조키 플래그를 사용 하 여 결합 된 키를 눌렀는지를 나타내는입니다. 가능한 값을 가져오는 적용 비트 OR (|) 연산자의 상수를는 <see cref="T:System.Windows.Forms.Keys" /> 열거형입니다.</param>
        <summary><see cref="T:System.Windows.Forms.KeyEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.KeyPressEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Alt">
      <MemberSignature Language="C#" Value="public virtual bool Alt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Alt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Alt" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Alt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Alt { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Alt : bool" Usage="System.Windows.Forms.KeyEventArgs.Alt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Alt 키를 눌렀는지를 나타내는 값을 가져옵니다.</summary>
        <value><see langword="true" /> ALT 키를 눌렀으면; 그렇지 않으면 <see langword="false" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 **예제 1**  
  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Windows.Forms.Control.KeyDown> 이벤트는 <xref:System.Windows.Forms.Help> 팝업 스타일 애플리케이션의 사용자에 게 도움말을 표시 하는 클래스입니다. 이 예제에서는 사용을 <xref:System.Windows.Forms.KeyEventArgs> 속성 한정자 키를 사용 하 여 F1 키를 눌러 모든 변형에 대해 필터링 할 이벤트 처리기 메서드에 전달 합니다. 모든 키보드 한정자를 포함 하는 f1 변형을 누를 때 합니다 <xref:System.Windows.Forms.Help> 클래스는 비슷한 팝업 창이 표시는 <xref:System.Windows.Forms.ToolTip>, 컨트롤 근처 합니다. Alt+f2를 누를 경우 추가 정보를 사용 하 여 여러 도움말 팝업이 표시 됩니다.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **예제 2**  
  
 다음 예제에서는 사용자가 ALT + E를 누른 여부와 마우스 포인터가 있는 경우 결정 <xref:System.Windows.Forms.TreeNode>는 편집할 수 있도록 <xref:System.Windows.Forms.TreeNode>입니다.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public bool Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Control" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Control As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Control { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Control : bool" Usage="System.Windows.Forms.KeyEventArgs.Control" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ctrl 키를 눌렀는지를 나타내는 값을 가져옵니다.</summary>
        <value><see langword="true" /> CTRL 키를 눌렀으면; 그렇지 않으면 <see langword="false" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Windows.Forms.Control.KeyDown> 이벤트는 <xref:System.Windows.Forms.Help> 팝업 스타일 애플리케이션의 사용자에 게 도움말을 표시 하는 클래스입니다. 이 예제에서는 사용을 <xref:System.Windows.Forms.KeyEventArgs> 속성 한정자 키를 사용 하 여 F1 키를 눌러 모든 변형에 대해 필터링 할 이벤트 처리기 메서드에 전달 합니다. 모든 키보드 한정자를 포함 하는 f1 변형을 누를 때 합니다 <xref:System.Windows.Forms.Help> 클래스는 비슷한 팝업 창이 표시는 <xref:System.Windows.Forms.ToolTip>, 컨트롤 근처 합니다. Alt+f2를 누를 경우 추가 정보를 사용 하 여 여러 도움말 팝업이 표시 됩니다.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Windows.Forms.KeyEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이벤트가 처리되었는지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see langword="true" /> 컨트롤을 무시 하려면의 기본 처리 합니다. 그렇지 않으면 <see langword="false" /> 를 기본 컨트롤 처리기에 이벤트를 전달할 수도 있습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> 되는 Windows Forms 내의 다른 컨트롤 별로 다르게 구현 합니다. 같은 컨트롤에 대 한 <xref:System.Windows.Forms.TextBox> 서브 클래스 네이티브 Win32 컨트롤, 주요 메시지를 기본 네이티브 컨트롤에 전달 되지 않습니다 의미로 해석 됩니다. 설정 하는 경우 `Handled` 에서 true로는 <xref:System.Windows.Forms.TextBox>에서 컨트롤 키 누름을 통과 하지 못합니다 `events` 기본 Win32 텍스트 상자 컨트롤을는 계속 표시 하는 사용자가 입력 한 문자.  
  
 현재 컨트롤 키 누름을 사용 하 여 수신 하지 못하도록 하려는 경우는 <xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 사용자 숫자가 아닌 키를 눌렀는지 여부를 결정 하 고 그렇다면 취소는 <xref:System.Windows.Forms.Control.KeyPress> 를 사용 하 여 이벤트를 <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> 속성.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="KeyCode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys KeyCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys KeyCode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyCode As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys KeyCode { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyCode : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.KeyCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>에 대 한 키보드 코드를 가져옵니다을 <see cref="E:System.Windows.Forms.Control.KeyDown" /> 또는 <see cref="E:System.Windows.Forms.Control.KeyUp" /> 이벤트입니다.</summary>
        <value><see cref="T:System.Windows.Forms.Keys" /> 이벤트에 대 한 키 코드에 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.KeyEventArgs.KeyCode%2A> 속성을 키를 눌렀는지 확인 합니다.  
  
 **예제 1**  
  
 다음 코드 예제를 사용 하는 방법에 설명 합니다 <xref:System.Windows.Forms.Control.KeyDown> 이벤트는 <xref:System.Windows.Forms.Help> 팝업 스타일 애플리케이션의 사용자에 게 도움말을 표시 하는 클래스입니다. 이 예제에서는 사용을 <xref:System.Windows.Forms.KeyEventArgs> 속성 한정자 키를 사용 하 여 F1 키를 눌러 모든 변형에 대해 필터링 할 이벤트 처리기 메서드에 전달 합니다. 모든 키보드 한정자를 포함 하는 f1 변형을 누를 때 합니다 <xref:System.Windows.Forms.Help> 클래스는 비슷한 팝업 창이 표시는 <xref:System.Windows.Forms.ToolTip>, 컨트롤 근처 합니다. Alt+f2를 누를 경우 추가 정보를 사용 하 여 여러 도움말 팝업이 표시 됩니다.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **예제 2**  
  
 다음 예제에서는 사용자가 ALT + E를 누른 여부와 마우스 포인터가 있는 경우를 결정을 <xref:System.Windows.Forms.TreeNode>를 편집 하면 <xref:System.Windows.Forms.TreeNode>합니다.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 **예제 3**  
  
 다음 예제에서는 사용자 숫자가 아닌 키를 눌렀는지 여부를 결정 하 고 그렇다면 취소는 <xref:System.Windows.Forms.Control.KeyPress> 를 사용 하 여 이벤트를 <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> 속성.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyData" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      </Docs>
    </Member>
    <Member MemberName="KeyData">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys KeyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys KeyData" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyData As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys KeyData { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyData : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.KeyData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>에 대 한 키 데이터를 가져옵니다을 <see cref="E:System.Windows.Forms.Control.KeyDown" /> 또는 <see cref="E:System.Windows.Forms.Control.KeyUp" /> 이벤트입니다.</summary>
        <value><see cref="T:System.Windows.Forms.Keys" /> 동시에 누른 CTRL, SHIFT 및 ALT 키의 조합을 나타내는 보조키 플래그와 함께 누른 키에 대 한 키 코드를 나타내는입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 상수를 사용할 수 있습니다 <xref:System.Windows.Forms.Keys> 에서 정보를 추출 하 여 <xref:System.Windows.Forms.KeyEventArgs.KeyData%2A> 속성입니다. 비트 AND 연산자를 사용 하 여 반환 되는 데이터를 비교할 <xref:System.Windows.Forms.KeyEventArgs.KeyData%2A> 의 상수를 사용 하 여 <xref:System.Windows.Forms.Keys> 사용자가 누른 키에 대 한 정보를 얻을 수 있습니다. 특정 한정자 키를 눌렀는지 여부를 확인 하려면 사용 합니다 <xref:System.Windows.Forms.KeyEventArgs.Control%2A>, <xref:System.Windows.Forms.KeyEventArgs.Shift%2A>, 및 <xref:System.Windows.Forms.KeyEventArgs.Alt%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다. 다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#48)]
 [!code-vb[System.Windows.Forms.EventExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      </Docs>
    </Member>
    <Member MemberName="KeyValue">
      <MemberSignature Language="C#" Value="public int KeyValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyValue As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyValue { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyValue : int" Usage="System.Windows.Forms.KeyEventArgs.KeyValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>에 대 한 키보드 값을 가져옵니다를 <see cref="E:System.Windows.Forms.Control.KeyDown" /> 또는 <see cref="E:System.Windows.Forms.Control.KeyUp" /> 이벤트입니다.</summary>
        <value>정수 표현 된 <see cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" /> 속성입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면에서 상속 되는 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.Control>와 같은 <xref:System.Windows.Forms.Button> 또는 <xref:System.Windows.Forms.ComboBox>합니다. 다음 인스턴스 이름을 `Control1` 이벤트 처리기를 연결 된 확인 된 <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#48)]
 [!code-vb[System.Windows.Forms.EventExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyData" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modifiers As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys Modifiers { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>에 대 한 보조키 플래그를 가져옵니다을 <see cref="E:System.Windows.Forms.Control.KeyDown" /> 또는 <see cref="E:System.Windows.Forms.Control.KeyUp" /> 이벤트입니다. 보조키 플래그는 누른 Ctrl, Shift 및 Alt 키의 조합을 나타냅니다.</summary>
        <value><see cref="T:System.Windows.Forms.Keys" /> 하나 이상의 보조키 플래그를 나타내는 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 특정 한정자 키를 눌렀는지 여부를 확인 하려면 사용 합니다 <xref:System.Windows.Forms.KeyEventArgs.Control%2A>, <xref:System.Windows.Forms.KeyEventArgs.Shift%2A>, 및 <xref:System.Windows.Forms.KeyEventArgs.Alt%2A> 속성입니다. 보조키 플래그를 사용 하 여 결합할 수 비트 OR.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Forms.KeyEventArgs.Modifiers%2A> 속성을 기본 키와 보조 키를 눌렀는지 확인 합니다.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="Shift">
      <MemberSignature Language="C#" Value="public virtual bool Shift { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Shift" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Shift" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Shift As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Shift { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Shift : bool" Usage="System.Windows.Forms.KeyEventArgs.Shift" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Shift 키를 눌렀는지를 나타내는 값을 가져옵니다.</summary>
        <value><see langword="true" /> SHIFT 키를 눌렀으면; 그렇지 않으면 <see langword="false" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 사용자가 F1 키를 사용 하 여 Shift 키를 누른 여부와 도움말을 표시 하는 경우를 결정 합니다.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="SuppressKeyPress">
      <MemberSignature Language="C#" Value="public bool SuppressKeyPress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SuppressKeyPress" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Property SuppressKeyPress As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SuppressKeyPress { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SuppressKeyPress : bool with get, set" Usage="System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>키 이벤트를 내부 컨트롤에 전달할지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see langword="true" /> 키 이벤트 컨트롤에 보내지 않아야 하는 경우 그렇지 않으면 <see langword="false" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 할당할 수 있습니다 `true` 와 같은 이벤트 처리기에서이 속성에 <xref:System.Windows.Forms.Control.KeyDown> 사용자 입력을 방지 하기 위해.  
  
 설정 <xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A> 하 `true` 작업도 <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> 에 `true`입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 숫자 키 입력을 도달 하지 못하도록 방지 합니다 <xref:System.Windows.Forms.TextBox> 제어 라는 `textBox1`합니다.  
  
 [!code-csharp[KeyEventArgs.SuppressKeyPress#1](~/samples/snippets/csharp/VS_Snippets_Winforms/keyeventargs.suppresskeypress/cs/form1.cs#1)]
 [!code-vb[KeyEventArgs.SuppressKeyPress#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/keyeventargs.suppresskeypress/vb/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Handled" />
      </Docs>
    </Member>
  </Members>
</Type>