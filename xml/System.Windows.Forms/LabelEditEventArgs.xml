<Type Name="LabelEditEventArgs" FullName="System.Windows.Forms.LabelEditEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ac0c1a4d06a43e8a9959887a2b0b0779f1ffa38d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39978964" /></Metadata><TypeSignature Language="C#" Value="public class LabelEditEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LabelEditEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.LabelEditEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LabelEditEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LabelEditEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type LabelEditEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" /> 및 <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.LabelEditEventArgs> 인덱스 및 캡션을 지정을 <xref:System.Windows.Forms.ListViewItem> 사용자가 편집한 후. 또한이 클래스는 제공 된 <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A> 속성입니다. 이 속성을 사용할 수는 <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> 레이블을 편집에서 사용자를 방지 하기 위해 이벤트 처리기입니다. 사용할 수도 있습니다는 <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> 레이블을 반환 하는 변경 내용이 되돌리려면 이벤트 처리기를 원래 값이 있습니다. 변경 내용을 커밋하기 전에 사용자 입력 유효성을 검사 하려는 경우에 유용 합니다.  
  
> [!NOTE]
>  때문에 합니다 <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> 이벤트 수행 레이블 편집 호출 커밋되기 전에 <xref:System.Windows.Forms.ListView.Sort%2A?displayProperty=nameWithType> 이 이벤트 처리기에서 메서드는 원래 값을 사용 하 여 항목을 정렬 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 처리를 <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> 이벤트 및 사용 하는 <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A> 및 <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A> 속성입니다. 예제를 실행 하려면 다음 코드를 포함 하는 폼의 붙여를 <xref:System.Windows.Forms.ListView> 라는 컨트롤 `ListView1` 있고 적어도 3 개 항목으로 채워집니다. 모든 이벤트의 이벤트 처리 메서드를 사용 하 여 연결 되도록 합니다.  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListView" />
    <altmember cref="T:System.Windows.Forms.ListViewItem" />
    <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
    <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.LabelEditEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LabelEditEventArgs (int item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LabelEditEventArgs.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LabelEditEventArgs(int item);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.LabelEditEventArgs : int -&gt; System.Windows.Forms.LabelEditEventArgs" Usage="new System.Windows.Forms.LabelEditEventArgs item" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">편집할 레이블을 포함하는 <see cref="T:System.Windows.Forms.ListViewItem" />의 인덱스이며 0에서 시작합니다.</param>
        <summary>편집할 <see cref="T:System.Windows.Forms.LabelEditEventArgs" />에 대한 지정된 인덱스를 사용하여 <see cref="T:System.Windows.Forms.ListViewItem" />의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 발생 하는 경우이 생성자를 사용할 수 있습니다는 <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> 또는 <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> 이벤트의 특정 목록 항목을 지정 하려면 런타임에 <xref:System.Windows.Forms.ListView> 편집 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LabelEditEventArgs (int item, string label);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 item, string label) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LabelEditEventArgs.#ctor(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item As Integer, label As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LabelEditEventArgs(int item, System::String ^ label);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.LabelEditEventArgs : int * string -&gt; System.Windows.Forms.LabelEditEventArgs" Usage="new System.Windows.Forms.LabelEditEventArgs (item, label)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="item" Type="System.Int32" />
        <Parameter Name="label" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="item">편집할 레이블을 포함하는 <see cref="T:System.Windows.Forms.ListViewItem" />의 인덱스이며 0에서 시작합니다.</param>
        <param name="label"><see cref="T:System.Windows.Forms.ListViewItem" />의 레이블에 할당된 새 텍스트입니다.</param>
        <summary>편집 중인 <see cref="T:System.Windows.Forms.LabelEditEventArgs" />에 지정된 인덱스 및 <see cref="T:System.Windows.Forms.ListViewItem" />의 레이블에 대한 새 텍스트를 사용하여 <see cref="T:System.Windows.Forms.ListViewItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 발생 하는 경우이 생성자를 사용할 수 있습니다는 <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> 또는 <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> 런타임에 목록 항목을 지정 하는 이벤트를 <xref:System.Windows.Forms.ListView> 편집 합니다. 생성자도 지정할 수 있습니다 새 텍스트 레이블의 연관 된 <xref:System.Windows.Forms.ListViewItem>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public bool CancelEdit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LabelEditEventArgs.CancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Property CancelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CancelEdit { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CancelEdit : bool with get, set" Usage="System.Windows.Forms.LabelEditEventArgs.CancelEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListViewItem" />의 레이블에 대한 변경 내용을 취소해야 할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Windows.Forms.ListViewItem" />의 레이블에 대한 편집 작업을 취소해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 레이블에 대 한 변경 내용을 취소 하려면이 속성을 사용할 수는 <xref:System.Windows.Forms.ListViewItem> 원래 텍스트를 되돌리는 것입니다. 항목의 캡션을 애플리케이션의 요구 사항을 충족 하지 않는 값으로 변경 되지 않도록 방지 하기 위해이 속성을 사용 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 처리를 <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> 이벤트 및 사용 하는 <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A> 및 <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A> 속성입니다. 예제를 실행 하려면 ListView 컨트롤 ListView1 라는 및 3 개 이상의 항목으로 채워진를 포함 하는 폼에 다음 코드를 붙여 넣습니다. 모든 이벤트의 이벤트 처리 메서드를 사용 하 여 연결 되도록 합니다.  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public int Item { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Item" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LabelEditEventArgs.Item" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Item { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Item : int" Usage="System.Windows.Forms.LabelEditEventArgs.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>편집할 레이블을 포함하는 <see cref="T:System.Windows.Forms.ListViewItem" />의 0부터 시작하는 인덱스를 가져옵니다.</summary>
        <value><see cref="T:System.Windows.Forms.ListViewItem" />의 인덱스이며 0에서 시작합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는 처리를 <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> 이벤트 및 사용 하는 <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A> 및 <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A> 속성입니다. 예제를 실행 하려면 ListView 컨트롤 ListView1 라는 및 3 개 이상의 항목으로 채워진를 포함 하는 폼에 다음 코드를 붙여 넣습니다. 모든 이벤트의 이벤트 처리 메서드를 사용 하 여 연결 되도록 합니다.  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LabelEditEventArgs.Label" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Label : string" Usage="System.Windows.Forms.LabelEditEventArgs.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListViewItem" />의 레이블에 할당된 새 텍스트를 가져옵니다.</summary>
        <value><see cref="T:System.Windows.Forms.ListViewItem" />과 연결할 새 텍스트입니다. 텍스트가 변경되지 않을 경우에는 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는이 멤버를 사용 하는 방법을 보여 줍니다. 예제에서는 이벤트 처리기에서 보고서를 <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> 이벤트입니다. 이 보고서를 통해 이벤트 발생 하 고 도움이 될 수 있습니다 디버깅 하는 경우를 학습할 수 있습니다. 자주 발생 하는 이벤트 또는 여러 이벤트를 보고 하려면 바꾸는 것이 좋습니다 <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> 사용 하 여 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 줄에 메시지를 추가 또는 <xref:System.Windows.Forms.TextBox>합니다.  
  
 예제 코드를 실행 하려면 형식의 인스턴스를 포함 하는 프로젝트에 붙여넣습니다 <xref:System.Windows.Forms.ListView> 라는 `ListView1`합니다. 연결 된 이벤트 처리기는 확인 된 <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> 이벤트입니다.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#463](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#463)]
 [!code-vb[System.Windows.Forms.EventExamples#463](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#463)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>