<Type Name="CanExecuteRoutedEventArgs" FullName="System.Windows.Input.CanExecuteRoutedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c93e873dfc59237cc43cc3fd1e3b457affa50a83" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="59014797" /></Metadata><TypeSignature Language="C#" Value="public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CanExecuteRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CanExecuteRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class CanExecuteRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventArgs = class&#xA;    inherit RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> 및 <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> 라우트된 이벤트에 대한 데이터를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 명령 소스 일반적으로 이러한를 <xref:System.Windows.Controls.MenuItem>를 호출 합니다는 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드를 <xref:System.Windows.Input.RoutedCommand> 명령 수 또는 현재 명령 대상에서 실행할 수 없습니다.  하는 경우 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 로 설정 된 `false` 이벤트 처리기에서 명령 소스 비활성화 됩니다.  예를 들어 경우는 <xref:System.Windows.Controls.MenuItem> 명령 및 명령에 대 한 명령 소스는 현재 명령 대상에서 실행할 수 없습니다 작동 하는 경우 <xref:System.Windows.Controls.MenuItem> 아웃 자체 회색으로 표시 됩니다.  
  
 <xref:System.Windows.Input.ICommand.CanExecuteChanged> 이벤트 명령이 실행의 기능이 변경 될 수 있습니다 하는 경우 명령 소스를에 알립니다.  
  
   
  
## Examples  
 다음 예에서는 만듭니다는 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> 반환 하는 `true` 명령 대상이 제어 하는 경우에 합니다.  먼저 <xref:System.Windows.RoutedEventArgs.Source%2A> 로 캐스팅 되는 <xref:System.Windows.Controls.Control>합니다.  경우 <xref:System.Windows.RoutedEventArgs.Source%2A> 은 <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 로 설정 되어 `true`이 고, 그렇지 않으면로 설정 됩니다 `false`합니다.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanExecute" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Property CanExecute As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanExecute { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanExecute : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 이벤트와 연결된 <see cref="T:System.Windows.Input.RoutedCommand" />를 명령 대상에서 실행할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>명령 대상에서 이벤트를 실행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 와 같은 많은 명령 소스 <xref:System.Windows.Controls.MenuItem> 및 <xref:System.Windows.Controls.Button>를 사용 하지 않는 경우 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 는 `false` 시기를 사용 하도록 설정 하 고는 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 는 `true`합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> 만 반환 하는 명령 대상 컨트롤이 면 true입니다.  첫 번째는 <xref:System.Windows.RoutedEventArgs.Source%2A> 캐스팅 된 이벤트 데이터는 <xref:System.Windows.Controls.Control>합니다.  경우는 <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 로 설정 되어 `true`이 고, 그렇지 않으면로 설정 되어 `false`합니다.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 이벤트와 연결된 명령을 가져옵니다.</summary>
        <value>해당 명령입니다. 명령이 사용자 지정 명령이 아닌 경우에는 일반적으로 <see cref="T:System.Windows.Input.RoutedCommand" />입니다. 기본값은 없습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 명령에 대 한 자세한 내용은 참조는 [명령 개요](~/docs/framework/wpf/advanced/commanding-overview.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> 여러 명령을 처리 합니다.  경우는 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> 속성이 합니다 <xref:System.Windows.Input.MediaCommands.Play%2A> 명령 및 메서드 `IsPlaying` 반환 `false`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 로 설정 되어 `true`고, 그렇지 않으면 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 로 설정 된 `false`.  경우는 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> 속성이 합니다 <xref:System.Windows.Input.MediaCommands.Stop%2A> 명령 및 메서드 `IsPlaying` 반환 `true`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 로 설정 되어 `true`고, 그렇지 않으면 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 로 설정 된 `false`.  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="ContinueRouting">
      <MemberSignature Language="C#" Value="public bool ContinueRouting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueRouting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueRouting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContinueRouting { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueRouting : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>명령을 호출한 입력 라우트된 이벤트가 요소 트리를 통해 계속 라우트해야 할지 여부를 결정합니다.</summary>
        <value>라우트된 이벤트를 요소 트리를 통해 계속 라우트해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.   기본값은 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="canExecuteRoutedEventArgs.InvokeEventHandler (genericHandler, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameter : obj" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>명령별 데이터를 가져옵니다.</summary>
        <value>명령 데이터입니다.  기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 명령 매개 변수는 사용 하 여 실행 될 때 명령에 특정 정보를 전달 합니다.  데이터 유형의 명령에 의해 정의 됩니다.  
  
 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> 수 `null`입니다. 많은 명령을 처리 하지 않거나 명령 매개 변수를 예상 합니다.  
  
   
  
## Examples  
 다음 예제를 사용 하 여 표시를 <xref:System.Windows.Controls.Button> 사용자 지정 명령에 대 한 명령 소스로.  <xref:System.Windows.Input.ICommandSource.Command%2A> 의 속성을 <xref:System.Windows.Controls.Button> 를 custom으로 설정 된 <xref:System.Windows.Input.RoutedCommand> 호출 `customCommand` 및 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> 값을 전달 하는 데 사용 되는 <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> 속성을 <xref:System.Windows.Controls.Slider> 컨트롤.  바인딩할 데이터 바인딩을 사용 하 여 성과 이룰 이것이 합니다 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> 에 <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> 속성입니다.  바인딩 식에서 변환기는 사용자 지정 <xref:System.Windows.Data.IValueConverter> 변환 <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> 에 <xref:System.Int32> 에 바인딩하기 전에 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>합니다.  
  
 [!code-xaml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml#invalidatesampleslidercommandparameter)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>