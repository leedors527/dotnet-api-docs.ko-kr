<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a252bc967121eea51fe378caf080a9b7c5a519bc" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37505121" /></Metadata><TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CanExecuteRoutedEventHandler(sender As Object, e As CanExecuteRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CanExecuteRoutedEventHandler(System::Object ^ sender, CanExecuteRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventHandler = delegate of obj * CanExecuteRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">처리기를 호출하고 있는 명령 대상입니다.</param>
    <param name="e">이벤트 데이터입니다.</param>
    <summary><see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> 이벤트 소스에 연결 된 명령을 명령 대상에서 실행할 수 있는지 여부를 결정 합니다. 명령에 명령 소스를 대상으로 지정 하는 경우 대상 정보를 통해 얻을 수 있습니다 `sender`합니다. 경우는 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 를 설정 하지 않으면 키보드 포커스가 있는 요소가 대상 이며 통해 얻을 수 있습니다 `sender`합니다.  대상에서 명령을 실행할 수 있는지 판단 되 면 해당 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> 속성에 설정할 `true`이 고, 그렇지 않으면로 설정 `false`합니다.  
  
 명령, 원본 및 대상 확인 하기 위해 이벤트 데이터에 의존할 필요가 없습니다. 이 훨씬 어렵습니다 명령 구조는 이벤트의 연속 잠재적인 대상에서 동일한 명령을 실행 하려면 명령 라우팅에 광범위 하 게 의존 하는 경우 알려진된 가능한 명령 호출 처리기의 사용을 제한할 수 있습니다. 경로입니다.  
  
   
  
## Examples  
 에서는 다음 예제는 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> 설정 하는 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 에 `true`입니다.  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  </Docs>
</Type>