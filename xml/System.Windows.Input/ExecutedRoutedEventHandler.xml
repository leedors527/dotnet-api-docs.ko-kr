<Type Name="ExecutedRoutedEventHandler" FullName="System.Windows.Input.ExecutedRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5cb12a2cc5ed353d695ecbf78462a4227628d38d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37505199" /></Metadata><TypeSignature Language="C#" Value="public delegate void ExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExecutedRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ExecutedRoutedEventHandler(sender As Object, e As ExecutedRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ExecutedRoutedEventHandler(System::Object ^ sender, ExecutedRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type ExecutedRoutedEventHandler = delegate of obj * ExecutedRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">이벤트 처리기가 연결된 개체입니다.</param>
    <param name="e">이벤트 데이터입니다.</param>
    <summary>관련 연결된 이벤트뿐만 아니라 <see cref="E:System.Windows.Input.CommandBinding.Executed" /> 및 <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> 라우트된 이벤트를 처리할 메서드를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 대리자에 대 한 구현 논리가 포함 된 <xref:System.Windows.Input.RoutedCommand>합니다.  명령의 구현 논리 분리를 사용 하면 다양 한 원본 및 형식에서 호출할 명령을 하 고 명령 논리를 중앙 집중식을 활성화 합니다.  
  
 이 대리자에도 사용 됩니다 <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> 하 고 <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>에 연결 된 이벤트는는 <xref:System.Windows.Input.CommandManager> 많은 명령 인프라를 구현 하는 클래스입니다. 가장 유용한 처리기를 처리할 수는 <xref:System.Windows.Input.CommandBinding.Executed> 특정 이벤트 <xref:System.Windows.Input.CommandBinding>아닌 근무 보다는 <xref:System.Windows.Input.CommandManager> 수준입니다.  
  
 내 <xref:System.Windows.Input.ExecutedRoutedEventArgs>, 다음 속성은 일반적으로 관심 실행된 명령에서 발생 하는 라우트된 이벤트에 대 한 이벤트 처리기를 작성 하는 경우:  
  
-   <xref:System.Windows.RoutedEventArgs.Source%2A> 대상 명령이 실행 된 위치를 보고 합니다. 명령이 실행 되 면 생각할 수 있습니다도 <xref:System.Windows.RoutedEventArgs.Source%2A> 더 일반적으로 라우트된 이벤트 관점에서 라우트된 이벤트를 발생 시킨 개체입니다.  
  
-   <xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> 명령 실행을 보고 합니다. 이 속성은 명령 바인딩을 사용 하는 경우 및 잠재적으로 여러 명령을 처리 하는 처리기를 작성 하는 경우에 유용 합니다.  
  
-   <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> 실행 명령에 의해 전달 된 명령 관련 매개 변수를 보고 합니다. 일부 명령을 사용 하거나 명령 관련 매개 변수가 필요 합니다.  
  
-   <xref:System.Windows.RoutedEventArgs.Handled%2A> 실행된 된 명령에서 발생 하는 라우트된 이벤트가 경로의 다른 요소에서 이미 처리 되었는지 여부를 보고 합니다. 라우트된 이벤트 처리기에 대 한 것이 좋습니다 설정 하는 이벤트를 처리 하는 경우 의미 있는 작업을 수행 하는 처리기가 <xref:System.Windows.RoutedEventArgs.Handled%2A> 에 `true`입니다. 이 이벤트는 다시 경로 따라 추가로 처리에서 이벤트에 대 한 일반적인 처리기를 방지 합니다. 라우트된 이벤트를 처리 하는 방법은 참조 하세요 [라우트된 이벤트 것으로 표시를 처리 및 클래스 처리](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)합니다.  
  
 이 대리자에 대 한 처리기 나타냅니다 <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> 및 <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType>, 이벤트에 연결 되는 <xref:System.Windows.Input.CommandManager> 많은 명령 인프라를 구현 하는 클래스입니다. 가장 유용한 처리기를 처리할 수는 <xref:System.Windows.Input.CommandBinding.Executed> 특정 이벤트 <xref:System.Windows.Input.CommandBinding>아닌 근무 보다는 <xref:System.Windows.Input.CommandManager> 수준입니다.  
  
 명령에 대한 자세한 내용은 [명령 개요](~/docs/framework/wpf/advanced/commanding-overview.md)를 참조하세요.  
  
   
  
## Examples  
 이 예제에서는 <xref:System.Windows.Input.ExecutedRoutedEventHandler> 명령이 실행 될 때 대상의 시각적 속성을 설정 하는 합니다. 이 예제에서는 또한는 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> 동일한 명령에 대 한 합니다.  
  
 [!code-csharp[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/Custom_RoutedCommand/CSharp/Window1.xaml.cs#custom_routedcommandhandlers)]
 [!code-vb[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Custom_RoutedCommand/visualbasic/window1.xaml.vb#custom_routedcommandhandlers)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  </Docs>
</Type>