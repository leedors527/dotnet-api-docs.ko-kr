<Type Name="InputManager" FullName="System.Windows.Input.InputManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5c1edbd39c805e1eaeb7cc871a350adf19d7cc4a" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65004733" /></Metadata><TypeSignature Language="C#" Value="public sealed class InputManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InputManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InputManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputManager sealed : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type InputManager = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>WPF(Windows Presentation Foundation)에서 모든 입력 시스템을 관리합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Windows.Input.InputManager> 클래스는 모든 입력된 시스템을 조정 하는 일을 담당 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]합니다.  
  
 필터는 수신 하는 모든 코드 <xref:System.Windows.Input.InputManager.PreProcessInput> 또는 <xref:System.Windows.Input.InputManager.PostProcessInput>합니다.  필터 입력된 준비 영역을 수정할 수 있습니다.  
  
 모니터는 모든 코드를 수신 하는 <xref:System.Windows.Input.InputManager.PreNotifyInput> 또는 <xref:System.Windows.Input.InputManager.PostNotifyInput>합니다.  모니터는 입력된 준비 영역을 수정할 수 없습니다.  
  
 <xref:System.Windows.Input.InputManager> 입력된 준비 영역을 제어 합니다.  에 입력을 처리 하는 준비 영역 입력된 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 이벤트입니다.  
  
 입력 처리는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 다음 단계에서:  
  
1.  전처리 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PreProcessInput> 이벤트입니다.  
  
2.  미리 알림 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PreNotifyInput> 이벤트입니다.  
  
3.  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 입력 이벤트가 발생 합니다.  
  
4.  후 알림 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PostNotifyInput> 이벤트입니다.  
  
5.  후 처리 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PostProcessInput> 이벤트입니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.StagingAreaInputItem" />
    <altmember cref="T:System.Windows.Input.ProcessInputEventArgs" />
    <altmember cref="T:System.Windows.Input.PreProcessInputEventArgs" />
    <altmember cref="T:System.Windows.Input.NotifyInputEventArgs" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.InputManager Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.InputManager Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputManager.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Current As InputManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::InputManager ^ Current { System::Windows::Input::InputManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Windows.Input.InputManager" Usage="System.Windows.Input.InputManager.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>가져옵니다는 <see cref="T:System.Windows.Input.InputManager" /> 현재 스레드와 연결 합니다.</summary>
        <value>입력된 관리자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 클래스는 인터넷 영역에서 사용할 수 없습니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">에 현재 입력된 관리자를 시작 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="EnterMenuMode">
      <MemberSignature Language="C#" Value="public event EventHandler EnterMenuMode;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EnterMenuMode" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.InputManager.EnterMenuMode" />
      <MemberSignature Language="VB.NET" Value="Public Event EnterMenuMode As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ EnterMenuMode;" />
      <MemberSignature Language="F#" Value="member this.EnterMenuMode : EventHandler " Usage="member this.EnterMenuMode : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤을 호출 하 여 메뉴 모드를 시작할 때 발생 합니다 <see cref="M:System.Windows.Input.InputManager.PushMenuMode(System.Windows.PresentationSource)" /> 메서드.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 입력된 관리자의 메뉴 모드를 입력 하는 컨트롤에 응답할이 이벤트와 대리자를 등록 하는 구성 요소입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestInvalidatedAsync">
      <MemberSignature Language="C#" Value="public event EventHandler HitTestInvalidatedAsync;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HitTestInvalidatedAsync" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.InputManager.HitTestInvalidatedAsync" />
      <MemberSignature Language="VB.NET" Value="Public Event HitTestInvalidatedAsync As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ HitTestInvalidatedAsync;" />
      <MemberSignature Language="F#" Value="member this.HitTestInvalidatedAsync : EventHandler " Usage="member this.HitTestInvalidatedAsync : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>적중 테스트의 결과 수 변경 될 때 발생 합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputProviders">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection InputProviders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection InputProviders" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputManager.InputProviders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputProviders As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ICollection ^ InputProviders { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputProviders : System.Collections.ICollection" Usage="System.Windows.Input.InputManager.InputProviders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컬렉션을 가져옵니다 <see cref="P:System.Windows.Input.InputManager.InputProviders" /> 등록 된 <see cref="T:System.Windows.Input.InputManager" />합니다.</summary>
        <value>컬렉션 입력을 제공합니다.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">에 입력된 된 공급자의 컬렉션을 가져옵니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="IsInMenuMode">
      <MemberSignature Language="C#" Value="public bool IsInMenuMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInMenuMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputManager.IsInMenuMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInMenuMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInMenuMode { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInMenuMode : bool" Usage="System.Windows.Input.InputManager.IsInMenuMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>나타내는 값을 가져옵니다 여부를이 <see cref="T:System.Windows.Interop.ComponentDispatcher" /> 가 메뉴 모드에 있습니다.</summary>
        <value><see langword="true" /> 이 경우 <see cref="T:System.Windows.Interop.ComponentDispatcher" /> 가 메뉴 모드에이 고, 그렇지 <see langword="false" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Windows.Input.InputManager.IsInMenuMode%2A> 속성이 반환 `true` 모든 메뉴, 진행 되 고 반환 하는 경우 `false` 열려 있지 않은 경우.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeaveMenuMode">
      <MemberSignature Language="C#" Value="public event EventHandler LeaveMenuMode;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LeaveMenuMode" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.InputManager.LeaveMenuMode" />
      <MemberSignature Language="VB.NET" Value="Public Event LeaveMenuMode As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LeaveMenuMode;" />
      <MemberSignature Language="F#" Value="member this.LeaveMenuMode : EventHandler " Usage="member this.LeaveMenuMode : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤을 호출 하 여 메뉴 모드를 벗어날 때 발생 합니다 <see cref="M:System.Windows.Input.InputManager.PopMenuMode(System.Windows.PresentationSource)" /> 메서드.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 입력된 관리자의 메뉴 모드를 종료 하는 컨트롤에 응답 하도록이 이벤트와 대리자를 등록 하는 구성 요소입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MostRecentInputDevice">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputDevice MostRecentInputDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputDevice MostRecentInputDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputManager.MostRecentInputDevice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MostRecentInputDevice As InputDevice" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputDevice ^ MostRecentInputDevice { System::Windows::Input::InputDevice ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MostRecentInputDevice : System.Windows.Input.InputDevice" Usage="System.Windows.Input.InputManager.MostRecentInputDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>가장 최근 입력 이벤트와 연결된 입력 디바이스를 나타내는 값을 가져옵니다.</summary>
        <value>입력 디바이스입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopMenuMode">
      <MemberSignature Language="C#" Value="public void PopMenuMode (System.Windows.PresentationSource menuSite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PopMenuMode(class System.Windows.PresentationSource menuSite) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputManager.PopMenuMode(System.Windows.PresentationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PopMenuMode (menuSite As PresentationSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PopMenuMode(System::Windows::PresentationSource ^ menuSite);" />
      <MemberSignature Language="F#" Value="member this.PopMenuMode : System.Windows.PresentationSource -&gt; unit" Usage="inputManager.PopMenuMode menuSite" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuSite" Type="System.Windows.PresentationSource" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="menuSite">종료할 메뉴입니다.</param>
        <summary>메뉴 모드를 종료할 구성 요소에 의해 호출 됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 구성 요소는 입력된 관리자의 메뉴 모드를 종료 하려면이 메서드를 호출 합니다. `menuSite` 창 메시지에 대 한 권한 있는 액세스를 해제 합니다.  
  
 이 메서드를 호출 하면 감소 시키기 위해 열기 메뉴의 내부 수가 및 설정 합니다 <xref:System.Windows.Input.InputManager.IsInMenuMode%2A> 속성을 `false`이면이 마지막 메뉴를 닫습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="menuSite" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="PostNotifyInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.NotifyInputEventHandler PostNotifyInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.NotifyInputEventHandler PostNotifyInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.InputManager.PostNotifyInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PostNotifyInput As NotifyInputEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::NotifyInputEventHandler ^ PostNotifyInput;" />
      <MemberSignature Language="F#" Value="member this.PostNotifyInput : System.Windows.Input.NotifyInputEventHandler " Usage="member this.PostNotifyInput : System.Windows.Input.NotifyInputEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>add: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>remove: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.NotifyInputEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>후에 발생 합니다 <see cref="E:System.Windows.Input.InputManager.PreNotifyInput" /> 처리기는 입력 및 해당 처리를 완료 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 이벤트가 발생 한 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모니터는 모든 코드를 수신 하는 <xref:System.Windows.Input.InputManager.PreNotifyInput> 또는 <xref:System.Windows.Input.InputManager.PostNotifyInput>합니다.  모니터는 입력된 준비 영역을 수정할 수 없습니다.  
  
 에 연결 된 처리기 <xref:System.Windows.Input.InputManager.PostNotifyInput> 시스템에서 사용자가 추가 된 처리기 처리기 보다 먼저 호출 되는 있도록 반대 순서로 호출 됩니다.  
  
 입력 처리는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 다음 단계에서:  
  
1.  전처리 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PreProcessInput> 이벤트입니다.  
  
2.  미리 알림 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PreNotifyInput> 이벤트입니다.  
  
3.  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 입력 이벤트가 발생 합니다.  
  
4.  후 알림 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PostNotifyInput> 이벤트입니다.  
  
5.  후 처리 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PostProcessInput> 이벤트입니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">에 더하거나 이벤트 처리기를 제거 합니다.  연관 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Windows.Input.NotifyInputEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="PostProcessInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ProcessInputEventHandler PostProcessInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ProcessInputEventHandler PostProcessInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.InputManager.PostProcessInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PostProcessInput As ProcessInputEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::ProcessInputEventHandler ^ PostProcessInput;" />
      <MemberSignature Language="F#" Value="member this.PostProcessInput : System.Windows.Input.ProcessInputEventHandler " Usage="member this.PostProcessInput : System.Windows.Input.ProcessInputEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>add: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>remove: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ProcessInputEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>후에 발생 합니다 <see cref="E:System.Windows.Input.InputManager.PreNotifyInput" /> 처리기 입력 처리를 완료 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 필터는 수신 하는 모든 코드 <xref:System.Windows.Input.InputManager.PreProcessInput> 또는 <xref:System.Windows.Input.InputManager.PostProcessInput>합니다.  필터 입력된 준비 영역을 수정할 수 있습니다.  
  
 에 연결 된 처리기 <xref:System.Windows.Input.InputManager.PostProcessInput> 시스템에서 사용자가 추가 된 처리기 처리기 보다 먼저 호출 되는 있도록 반대 순서로 호출 됩니다.  
  
 입력 처리는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 다음 단계에서:  
  
1.  전처리 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PreProcessInput> 이벤트입니다.  
  
2.  미리 알림 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PreNotifyInput> 이벤트입니다.  
  
3.  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 입력 이벤트가 발생 합니다.  
  
4.  후 알림 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PostNotifyInput> 이벤트입니다.  
  
5.  후 처리 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PostProcessInput> 이벤트입니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">에 더하거나 이벤트 처리기를 제거 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Windows.Input.ProcessInputEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="PreNotifyInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.NotifyInputEventHandler PreNotifyInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.NotifyInputEventHandler PreNotifyInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.InputManager.PreNotifyInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreNotifyInput As NotifyInputEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::NotifyInputEventHandler ^ PreNotifyInput;" />
      <MemberSignature Language="F#" Value="member this.PreNotifyInput : System.Windows.Input.NotifyInputEventHandler " Usage="member this.PreNotifyInput : System.Windows.Input.NotifyInputEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>add: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>remove: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.NotifyInputEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>발생 경우를 <see cref="E:System.Windows.Input.InputManager.PreProcessInput" /> 처리기 처리를 마치면 입력, 입력 작업이 취소 되지 경우.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모니터는 모든 코드를 수신 하는 <xref:System.Windows.Input.InputManager.PreNotifyInput> 또는 <xref:System.Windows.Input.InputManager.PostNotifyInput>합니다.  모니터는 입력된 준비 영역을 수정할 수 없습니다.  
  
 에 연결 된 처리기 <xref:System.Windows.Input.InputManager.PreNotifyInput> 시스템에서 사용자가 추가 된 처리기 처리기 보다 먼저 호출 되는 있도록 반대 순서로 호출 됩니다.  
  
 입력 처리는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 다음 단계에서:  
  
1.  전처리 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PreProcessInput> 이벤트입니다.  
  
2.  미리 알림 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PreNotifyInput> 이벤트입니다.  
  
3.  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 입력 이벤트가 발생 합니다.  
  
4.  후 알림 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PostNotifyInput> 이벤트입니다.  
  
5.  후 처리 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PostProcessInput> 이벤트입니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">에 더하거나 이벤트 처리기를 제거 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Windows.Input.NotifyInputEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="PreProcessInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.PreProcessInputEventHandler PreProcessInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.PreProcessInputEventHandler PreProcessInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.InputManager.PreProcessInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreProcessInput As PreProcessInputEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::PreProcessInputEventHandler ^ PreProcessInput;" />
      <MemberSignature Language="F#" Value="member this.PreProcessInput : System.Windows.Input.PreProcessInputEventHandler " Usage="member this.PreProcessInput : System.Windows.Input.PreProcessInputEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>add: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>remove: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.PreProcessInputEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>발생 경우를 <see cref="T:System.Windows.Input.InputManager" /> 입력된 항목 처리를 시작 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 필터는 수신 하는 모든 코드 <xref:System.Windows.Input.InputManager.PreProcessInput> 또는 <xref:System.Windows.Input.InputManager.PostProcessInput>합니다.  필터 입력된 준비 영역을 수정할 수 있습니다.  
  
 에 연결 된 처리기 <xref:System.Windows.Input.InputManager.PreProcessInput> 시스템에서 사용자가 추가 된 처리기 처리기 보다 먼저 호출 되는 있도록 반대 순서로 호출 됩니다.  
  
 호출 <xref:System.Windows.Input.PreProcessInputEventArgs.Cancel%2A> 에 <xref:System.Windows.Input.PreProcessInputEventArgs> 에 전달 되는 <xref:System.Windows.Input.PreProcessInputEventHandler> 입력 처리를 취소 합니다.  
  
 입력 처리는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 다음 단계에서:  
  
1.  전처리 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PreProcessInput> 이벤트입니다.  
  
2.  미리 알림 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PreNotifyInput> 이벤트입니다.  
  
3.  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 입력 이벤트가 발생 합니다.  
  
4.  후 알림 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PostNotifyInput> 이벤트입니다.  
  
5.  후 처리 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PostProcessInput> 이벤트입니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">에 더하거나 이벤트 처리기를 제거 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Windows.Input.PreProcessInputEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="PrimaryKeyboardDevice">
      <MemberSignature Language="C#" Value="public System.Windows.Input.KeyboardDevice PrimaryKeyboardDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.KeyboardDevice PrimaryKeyboardDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputManager.PrimaryKeyboardDevice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrimaryKeyboardDevice As KeyboardDevice" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::KeyboardDevice ^ PrimaryKeyboardDevice { System::Windows::Input::KeyboardDevice ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PrimaryKeyboardDevice : System.Windows.Input.KeyboardDevice" Usage="System.Windows.Input.InputManager.PrimaryKeyboardDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>기본 키보드 디바이스를 가져옵니다.</summary>
        <value>키보드 디바이스입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.Keyboard" />
      </Docs>
    </Member>
    <Member MemberName="PrimaryMouseDevice">
      <MemberSignature Language="C#" Value="public System.Windows.Input.MouseDevice PrimaryMouseDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.MouseDevice PrimaryMouseDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputManager.PrimaryMouseDevice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrimaryMouseDevice As MouseDevice" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::MouseDevice ^ PrimaryMouseDevice { System::Windows::Input::MouseDevice ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PrimaryMouseDevice : System.Windows.Input.MouseDevice" Usage="System.Windows.Input.InputManager.PrimaryMouseDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>기본 마우스 디바이스를 가져옵니다.</summary>
        <value>마우스 디바이스입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.Mouse" />
      </Docs>
    </Member>
    <Member MemberName="ProcessInput">
      <MemberSignature Language="C#" Value="public bool ProcessInput (System.Windows.Input.InputEventArgs input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ProcessInput(class System.Windows.Input.InputEventArgs input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputManager.ProcessInput(System.Windows.Input.InputEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessInput (input As InputEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ProcessInput(System::Windows::Input::InputEventArgs ^ input);" />
      <MemberSignature Language="F#" Value="member this.ProcessInput : System.Windows.Input.InputEventArgs -&gt; bool" Usage="inputManager.ProcessInput input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Windows.Input.InputEventArgs" />
      </Parameters>
      <Docs>
        <param name="input">처리할 입력입니다.</param>
        <summary>지정된 된 입력을 동기적으로 처리합니다.</summary>
        <returns><see langword="true" /> 입력된 이벤트가 처리 된 경우 그렇지 않으면 <see langword="false" />합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 필터는 수신 하는 모든 코드 <xref:System.Windows.Input.InputManager.PreProcessInput> 또는 <xref:System.Windows.Input.InputManager.PostProcessInput>합니다.  필터 입력된 준비 영역을 수정할 수 있습니다.  
  
 모니터는 모든 코드를 수신 하는 <xref:System.Windows.Input.InputManager.PreNotifyInput> 또는 <xref:System.Windows.Input.InputManager.PostNotifyInput>합니다.  모니터는 입력된 준비 영역을 수정할 수 없습니다.  
  
 지정된 된 입력 모든 필터 및 모니터를 통해 처리 되 고 적절 한 요소로 입력된 이벤트에 마지막으로 디스패치 됩니다.  
  
 입력 처리는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 다음 단계에서:  
  
1.  전처리 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PreProcessInput> 이벤트입니다.  
  
2.  미리 알림 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PreNotifyInput> 이벤트입니다.  
  
3.  [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 입력 이벤트가 발생 합니다.  
  
4.  후 알림 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PostNotifyInput> 이벤트입니다.  
  
5.  후 처리 단계입니다.  입력된 관리자 발생을 <xref:System.Windows.Input.InputManager.PostProcessInput> 이벤트입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" />가 <see langword="null" />인 경우</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">지정된 된 입력을 처리 합니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="PushMenuMode">
      <MemberSignature Language="C#" Value="public void PushMenuMode (System.Windows.PresentationSource menuSite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PushMenuMode(class System.Windows.PresentationSource menuSite) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputManager.PushMenuMode(System.Windows.PresentationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PushMenuMode (menuSite As PresentationSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PushMenuMode(System::Windows::PresentationSource ^ menuSite);" />
      <MemberSignature Language="F#" Value="member this.PushMenuMode : System.Windows.PresentationSource -&gt; unit" Usage="inputManager.PushMenuMode menuSite" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuSite" Type="System.Windows.PresentationSource" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="menuSite">입력.</param>
        <summary>메뉴 모드를 시작할 구성 요소에 의해 호출 됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 구성 요소 입력된 관리자의 메뉴 모드를 시작 하려면이 메서드를 호출 합니다. `menuSite` 창 메시지에 대 한 권한 있는 액세스를 가져옵니다. 이 메서드를 호출 하면 증가 열기 메뉴의 내부 수가 및 설정 합니다 <xref:System.Windows.Input.InputManager.IsInMenuMode%2A> 속성을 `true`이면이 첫 번째 메뉴를 엽니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="menuSite" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>