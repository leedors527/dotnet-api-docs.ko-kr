<Type Name="KeyGesture" FullName="System.Windows.Input.KeyGesture">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c0fcef4401a44729f37aa4c6278d1a7b97a6c45a" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55315743" /></Metadata><TypeSignature Language="C#" Value="public class KeyGesture : System.Windows.Input.InputGesture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyGesture extends System.Windows.Input.InputGesture" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyGesture" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyGesture&#xA;Inherits InputGesture" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyGesture : System::Windows::Input::InputGesture" />
  <TypeSignature Language="F#" Value="type KeyGesture = class&#xA;    inherit InputGesture" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputGesture</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>명령을 호출하는 데 사용할 수 있는 키보드 조합을 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에는 <xref:System.Windows.Input.KeyGesture> 하나를 사용 하 여 연결 해야 <xref:System.Windows.Input.ModifierKeys>합니다. 이 규칙에 대 한 예외는 기능 키와 숫자 키패드의 키를 유효한 수 <xref:System.Windows.Input.KeyGesture> 자체적으로 합니다. 예를 들어, 만들 수 있습니다는 <xref:System.Windows.Input.KeyGesture> 에서 키 X를 사용 하는 F12 키만 사용 하 여는 <xref:System.Windows.Input.KeyGesture> 한정자 키를 사용 하 여 쌍으로 연결할 수 있어야 합니다.  
  
 일반적으로 수 있습니다.  
  
 사용할 수는 <xref:System.Windows.Input.KeyBinding> 바인딩할를 <xref:System.Windows.Input.KeyGesture> 에 <xref:System.Windows.Input.ICommand>명령이 호출 될 수 있도록 때는 <xref:System.Windows.Input.KeyGesture> 발생 합니다.  
  
 에 대 한 <xref:System.Windows.Input.KeyGesture> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 일반적으로 설정 된 속성을, 사용 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 는 <xref:System.Windows.Input.KeyBinding.Gesture%2A>, 표준 키와 보조 키 제스처를 나타내는 위치 하는 경우. 설정할 수도 있습니다는 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 속성을 함수 키 또는 한정자 키 조합입니다. 그러나는 것이 설정에 자주 합니다 <xref:System.Windows.Input.KeyBinding.Key%2A> 의도 한 명령 바인딩이 없는 한정자를 사용 하 여 함수 키 이면 속성 또는 <xref:System.Windows.Input.KeyBinding.Modifiers%2A> 의도 한 명령 바인딩 한정자 키만에 대 한 경우.  
  
<a name="xamlAttributeUsage_KeyGesture"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object property="oneOrMoreModifierKeys+key"/>  
- or -  
<object property="functionKey"/>  
```  
  
<a name="xamlValues_KeyGesture"></a>   
## <a name="xaml-values"></a>XAML 값  
 `functionKey`  
 <xref:System.Windows.Input.Key>  
  
 단일 키 값, 함수 키 (F1-12) 또는 숫자 키패드 키 중 하나 여야 합니다.  
  
 `oneOrMoreModifierKeys`  
 정의한 하나 이상의 보조 키를 <xref:System.Windows.Input.ModifierKeys> 열거형, "+" 문자를 사용 하 여 구분 합니다.  
  
 `key`  
 <xref:System.Windows.Input.Key>  
  
 단일 키 값입니다.  
  
   
  
## Examples  
 다음 예제에서는 바인딩하는 방법을 보여줍니다 합니다 <xref:System.Windows.Input.ApplicationCommands.Close%2A> 명령을 <xref:System.Windows.Input.KeyGesture> 사용 하 여를 <xref:System.Windows.Input.KeyBinding>입니다.  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 다음 예제에서는 사용 하는 방법을 보여 줍니다 <xref:System.Windows.Input.KeyGesture> 에서 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]합니다. [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 사용량 직접 선언 하지는 `<KeyGesture>` 요소입니다. 개체 요소 사용 가능 하므로 <xref:System.Windows.Input.KeyGesture> 공용 기본 생성자를 노출 하지 않습니다. 대신를 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 전체를 선언 하려면 typeconverter 동작을 사용 하는 사용량 <xref:System.Windows.Input.KeyGesture> 인라인으로 `Gesture` 특성 값입니다.  
  
 [!code-xaml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyBinding" />
    <altmember cref="T:System.Windows.Input.MouseBinding" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.InputGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Input.KeyGesture" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="key">이 제스처와 연결된 키입니다.</param>
        <summary>지정된 <see cref="T:System.Windows.Input.KeyGesture" />를 사용하여 <see cref="T:System.Windows.Input.Key" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에는 <xref:System.Windows.Input.KeyGesture> 하나를 사용 하 여 연결 해야 <xref:System.Windows.Input.ModifierKeys>합니다.  이 규칙에 대 한 예외는 기능 키와 숫자 키패드의 키를 유효한 수 <xref:System.Windows.Input.KeyGesture> 자체적으로 합니다.  
  
   
  
## Examples  
 다음 예제에서는 만들려면이 생성자를 사용 하는 방법을 보여 줍니다를 <xref:System.Windows.Input.KeyGesture> 와 연결 된 <xref:System.Windows.Input.KeyBinding>.  <xref:System.Windows.Input.KeyBinding> 에 추가 되는 <xref:System.Windows.Input.InputBindingCollection> 의 <xref:System.Windows.Window>합니다.  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithnomodifier)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithnomodifier)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="key" />은 유효한 <see cref="T:System.Windows.Input.Key" />이 아닙니다.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" />은 유효한 <see cref="T:System.Windows.Input.KeyGesture" />이 아닙니다.</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key * System.Windows.Input.ModifierKeys -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture (key, modifiers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="key">제스처와 연결된 키입니다.</param>
        <param name="modifiers">제스처와 연결된 보조키입니다.</param>
        <summary>지정된 <see cref="T:System.Windows.Input.KeyGesture" /> 및 <see cref="T:System.Windows.Input.Key" />를 사용하여 <see cref="T:System.Windows.Input.ModifierKeys" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에는 <xref:System.Windows.Input.KeyGesture> 하나를 사용 하 여 연결 해야 <xref:System.Windows.Input.ModifierKeys>합니다. 이 규칙에 대 한 예외는 기능 키와 숫자 키패드의 키를 유효한 수 <xref:System.Windows.Input.KeyGesture> 자체적으로 합니다.  
  
   
  
## Examples  
 다음 예제에서는 만들려면이 생성자를 사용 하는 방법을 보여 줍니다를 <xref:System.Windows.Input.KeyGesture> 와 연결 된 <xref:System.Windows.Input.KeyBinding>. <xref:System.Windows.Input.KeyBinding> 에 추가 되는 <xref:System.Windows.Input.InputBindingCollection> 의 <xref:System.Windows.Window>합니다.  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers" />는 유효한 <see cref="T:System.Windows.Input.ModifierKeys" />가 아닙니다.  
  
또는 
 <paramref name="key" />은 유효한 <see cref="T:System.Windows.Input.Key" />이 아닙니다.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" />와 <paramref name="modifiers" />가 유효한 <see cref="T:System.Windows.Input.KeyGesture" />를 만들지 않는 경우</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers, string displayString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyGesture(System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers, System::String ^ displayString);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyGesture : System.Windows.Input.Key * System.Windows.Input.ModifierKeys * string -&gt; System.Windows.Input.KeyGesture" Usage="new System.Windows.Input.KeyGesture (key, modifiers, displayString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
        <Parameter Name="displayString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">제스처와 연결된 키입니다.</param>
        <param name="modifiers">제스처와 연결된 보조키입니다.</param>
        <param name="displayString"><see cref="T:System.Windows.Input.KeyGesture" />의 문자열 표현입니다.</param>
        <summary>지정한 <see cref="T:System.Windows.Input.KeyGesture" />, <see cref="T:System.Windows.Input.Key" />와 표시 문자열을 사용하여 <see cref="T:System.Windows.Input.ModifierKeys" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Windows.Input.KeyGesture.DisplayString%2A> 속성을 `displayString` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers" />는 유효한 <see cref="T:System.Windows.Input.ModifierKeys" />가 아닙니다.  
  
또는 
 <paramref name="key" />은 유효한 <see cref="T:System.Windows.Input.Key" />이 아닙니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="displayString" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="key" />와 <paramref name="modifiers" />가 유효한 <see cref="T:System.Windows.Input.KeyGesture" />를 만들지 않는 경우</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="DisplayString">
      <MemberSignature Language="C#" Value="public string DisplayString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.DisplayString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayString : string" Usage="System.Windows.Input.KeyGesture.DisplayString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.Input.KeyGesture" />에 대한 문자열 표현을 가져옵니다.</summary>
        <value>이 <see cref="T:System.Windows.Input.KeyGesture" />에 대한 표시 문자열입니다. 기본값은 <see cref="F:System.String.Empty" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 표시 문자열 생성자에서 설정 되지 않은, 경우 빈 문자열이 반환 됩니다.  
  
 이 속성이 비어 있는 경우는 <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A> 에서 만든 문자열을 반환 하는 메서드를 <xref:System.Windows.Input.KeyGesture.Key%2A> 및 <xref:System.Windows.Input.KeyGesture.Modifiers%2A>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="GetDisplayStringForCulture">
      <MemberSignature Language="C#" Value="public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetDisplayStringForCulture(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDisplayStringForCulture (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetDisplayStringForCulture(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetDisplayStringForCulture : System.Globalization.CultureInfo -&gt; string" Usage="keyGesture.GetDisplayStringForCulture culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">문화권별 정보입니다.</param>
        <summary><see cref="T:System.Windows.Input.KeyGesture" />를 표시하는 데 사용할 수 있는 문자열을 반환합니다.</summary>
        <returns>표시할 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 표시 문자열을 문자열이 반환 하는 생성자에 의해 설정 된 경우 문자열을 만들어이 고, 그렇지 합니다 <xref:System.Windows.Input.KeyGesture.Key%2A> 하 고 <xref:System.Windows.Input.KeyGesture.Modifiers%2A> 제어 필요한 변환을 모두 사용 하 여 지정 된 <xref:System.Globalization.CultureInfo> 개체입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Windows.Input.Key" Usage="System.Windows.Input.KeyGesture.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.Input.KeyGesture" />와 연결된 키를 가져옵니다.</summary>
        <value>제스처와 연결된 키입니다.  기본값은 <see cref="F:System.Windows.Input.Key.None" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에는 <xref:System.Windows.Input.KeyGesture> 하나를 사용 하 여 연결 해야 <xref:System.Windows.Input.ModifierKeys>합니다.  이 규칙에 대 한 예외는 기능 키와 숫자 키패드의 키를 유효한 수 <xref:System.Windows.Input.KeyGesture> 자체적으로 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Matches(object targetElement, class System.Windows.Input.InputEventArgs inputEventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Matches(System::Object ^ targetElement, System::Windows::Input::InputEventArgs ^ inputEventArgs);" />
      <MemberSignature Language="F#" Value="override this.Matches : obj * System.Windows.Input.InputEventArgs -&gt; bool" Usage="keyGesture.Matches (targetElement, inputEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetElement" Type="System.Object" />
        <Parameter Name="inputEventArgs" Type="System.Windows.Input.InputEventArgs" />
      </Parameters>
      <Docs>
        <param name="targetElement">대상입니다.</param>
        <param name="inputEventArgs">이 제스처와 비교할 입력 이벤트 데이터입니다.</param>
        <summary>이 <see cref="T:System.Windows.Input.KeyGesture" />가 지정한 <see cref="T:System.Windows.Input.InputEventArgs" /> 개체와 연결된 입력과 일치하는지 여부를 확인합니다.</summary>
        <returns>이벤트 데이터가 이 <see cref="T:System.Windows.Input.KeyGesture" />와 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `targetElement` 특정 요소에는 명령을 호출할지 여부에 보다 구체적인 결정을 내리는 데 사용할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 테스트 하는 방법을 보여 줍니다 여부를 <xref:System.Windows.Input.KeyGesture> 의 인스턴스와 연결 된 입력과 일치 하는 <xref:System.Windows.Input.InputEventArgs>. A <xref:System.Windows.UIElement.KeyDown> 이벤트 데이터와 비교 하는 이벤트 처리기가 만들어집니다 합니다 <xref:System.Windows.Input.KeyGesture> 사용 하 여를 <xref:System.Windows.Input.KeyGesture.Matches%2A> 메서드.  
  
 [!code-csharp[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keydownhandlerkeygesturematches)]
 [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keydownhandlerkeygesturematches)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ModifierKeys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyGesture.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Input.ModifierKeys" Usage="System.Windows.Input.KeyGesture.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.Input.KeyGesture" />와 연결된 보조키를 가져옵니다.</summary>
        <value>제스처와 연결된 보조키입니다. 기본값은 <see cref="F:System.Windows.Input.ModifierKeys.None" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에는 <xref:System.Windows.Input.KeyGesture> 하나를 사용 하 여 연결 해야 <xref:System.Windows.Input.ModifierKeys>합니다. 이 규칙에 대 한 예외는 기능 키와 숫자 키패드의 키를 유효한 수 <xref:System.Windows.Input.KeyGesture> 자체적으로 합니다. 예를 들어, 만들 수 있습니다는 <xref:System.Windows.Input.KeyGesture> 에서 키 X를 사용 하는 F12 키만 사용 하 여는 <xref:System.Windows.Input.KeyGesture> 한정자 키를 사용 하 여 쌍으로 연결할 수 있어야 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
  </Members>
</Type>