<Type Name="ManipulationDelta" FullName="System.Windows.Input.ManipulationDelta">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8b0a48875a97e5f72317831a9e6c1caea75c593f" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39991596" /></Metadata><TypeSignature Language="C#" Value="public class ManipulationDelta" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ManipulationDelta extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ManipulationDelta" />
  <TypeSignature Language="VB.NET" Value="Public Class ManipulationDelta" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManipulationDelta" />
  <TypeSignature Language="F#" Value="type ManipulationDelta = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>조작 이벤트가 발생할 때 누적된 변환 데이터를 포함합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.ManipulationDelta> 클래스 조작의 위치 변경에 대 한 정보를 포함 합니다.  [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 으로 해석 된 <xref:System.Windows.Input.ManipulationDelta.Translation%2A>, <xref:System.Windows.Input.ManipulationDelta.Expansion%2A>, 또는 <xref:System.Windows.Input.ManipulationDelta.Rotation%2A>합니다. 경우는 <xref:System.Windows.UIElement.ManipulationDelta> 에서 이벤트가 발생을 <xref:System.Windows.UIElement>에서 속성을 사용를 <xref:System.Windows.Input.ManipulationDelta> 조작할 수 해야 하는 개체를 변환 하는 개체입니다.  합니다 <xref:System.Windows.Input.ManipulationDeltaEventArgs> 형식의 두 가지 속성을 제공 하는 클래스 <xref:System.Windows.Input.ManipulationDelta>: <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> 고 <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>입니다.  
  
 조작에 대 한 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  조작에 응답 하는 애플리케이션 예제를 보려면 [연습: 만드는 첫 번째 터치 애플리케이션](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 이벤트 처리기는 <xref:System.Windows.UIElement.ManipulationDelta> 이벤트입니다.  예제에 적용 됩니다는 <xref:System.Windows.Input.ManipulationDelta.Translation%2A>, <xref:System.Windows.Input.ManipulationDelta.Scale%2A>, 및 <xref:System.Windows.Input.ManipulationDelta.Rotation%2A> 이동, 크기 조정 및 회전 속성을 <xref:System.Windows.Shapes.Rectangle>. 이 예제는에서 더 큰 예제의 일부 [연습: 만드는 첫 번째 터치 애플리케이션](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManipulationDelta (System.Windows.Vector translation, double rotation, System.Windows.Vector scale, System.Windows.Vector expansion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Vector translation, float64 rotation, valuetype System.Windows.Vector scale, valuetype System.Windows.Vector expansion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDelta.#ctor(System.Windows.Vector,System.Double,System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (translation As Vector, rotation As Double, scale As Vector, expansion As Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManipulationDelta(System::Windows::Vector translation, double rotation, System::Windows::Vector scale, System::Windows::Vector expansion);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.ManipulationDelta : System.Windows.Vector * double * System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Input.ManipulationDelta" Usage="new System.Windows.Input.ManipulationDelta (translation, rotation, scale, expansion)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="translation" Type="System.Windows.Vector" />
        <Parameter Name="rotation" Type="System.Double" />
        <Parameter Name="scale" Type="System.Windows.Vector" />
        <Parameter Name="expansion" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="translation">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]에서 조작의 선형 동작입니다.</param>
        <param name="rotation">조작의 회전(도)입니다.</param>
        <param name="scale">조작의 크기가 승수로 조정된 양입니다.</param>
        <param name="expansion">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]에서 조작의 크기가 조정된 양입니다.</param>
        <summary><see cref="T:System.Windows.Input.ManipulationDelta" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expansion">
      <MemberSignature Language="C#" Value="public System.Windows.Vector Expansion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Vector Expansion" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDelta.Expansion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Expansion As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Vector Expansion { System::Windows::Vector get(); };" />
      <MemberSignature Language="F#" Value="member this.Expansion : System.Windows.Vector" Usage="System.Windows.Input.ManipulationDelta.Expansion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]에서 조작의 크기가 조정된 양을 가져오거나 설정합니다.</summary>
        <value>[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]에서 조작의 크기가 조정된 양입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Windows.Input.ManipulationDelta.Scale%2A> 및 <xref:System.Windows.Input.ManipulationDelta.Expansion%2A> 속성 둘 다 보고서 크기 조정 조작 합니다.  둘 사이의 차이점은 값이 보고 되는 방법입니다.  합니다 <xref:System.Windows.Input.ManipulationDelta.Expansion%2A> 속성의 크기 조정 조작 보고 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]합니다. <xref:System.Windows.Input.ManipulationDelta.Scale%2A> 속성 승수 값을 보고 합니다.  경우 <xref:System.Windows.Input.ManipulationDelta.Scale%2A> 이 0.5 이면 50% 크기를 줄이면 조작 해석 됩니다.  경우 <xref:System.Windows.Input.ManipulationDelta.Scale%2A> 가 2 이면 조작 100% 크기를 늘리면로 해석 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotation">
      <MemberSignature Language="C#" Value="public double Rotation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Rotation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDelta.Rotation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rotation As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Rotation { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Rotation : double" Usage="System.Windows.Input.ManipulationDelta.Rotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>조작의 회전(도)을 가져오거나 설정합니다.</summary>
        <value>조작의 회전(도)입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.ManipulationDelta.Rotation%2A> 속성을 조작 회전 축을 중심으로 해석 됩니다 하는 방식을 보고 합니다.  축은 일반적으로 조작을 시작 하는 연락처의 두 점 사이의 지점입니다.  
  
   
  
## Examples  
 다음 예제에서는 이벤트 처리기는 <xref:System.Windows.UIElement.ManipulationDelta> 이벤트입니다.  예제에 적용 됩니다는 <xref:System.Windows.Input.ManipulationDelta.Translation%2A>, <xref:System.Windows.Input.ManipulationDelta.Scale%2A>, 및 <xref:System.Windows.Input.ManipulationDelta.Rotation%2A> 이동, 크기 조정 및 회전 속성을 <xref:System.Windows.Shapes.Rectangle>. 이 예제는에서 더 큰 예제의 일부 [연습: 만드는 첫 번째 터치 애플리케이션](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public System.Windows.Vector Scale { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Vector Scale" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDelta.Scale" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scale As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Vector Scale { System::Windows::Vector get(); };" />
      <MemberSignature Language="F#" Value="member this.Scale : System.Windows.Vector" Usage="System.Windows.Input.ManipulationDelta.Scale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>조작의 크기가 승수로 조정된 양을 가져오거나 설정합니다.</summary>
        <value>조작의 크기가 조정된 양입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Windows.Input.ManipulationDelta.Scale%2A> 및 <xref:System.Windows.Input.ManipulationDelta.Expansion%2A> 속성 둘 다 보고서 크기 조정 조작 합니다.  둘 사이의 차이점은 값이 보고 되는 방법입니다.  <xref:System.Windows.Input.ManipulationDelta.Scale%2A> 속성 승수 값을 보고 합니다.  경우 <xref:System.Windows.Input.ManipulationDelta.Scale%2A> 이 0.5 이면 50% 크기를 줄이면 조작 해석 됩니다.  경우 <xref:System.Windows.Input.ManipulationDelta.Scale%2A> 가 2 이면 조작 100% 크기를 늘리면로 해석 됩니다. 합니다 <xref:System.Windows.Input.ManipulationDelta.Expansion%2A> 속성의 크기 조정 조작 보고 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]합니다.  
  
   
  
## Examples  
 다음 예제에서는 이벤트 처리기는 <xref:System.Windows.UIElement.ManipulationDelta> 이벤트입니다.  예제에 적용 됩니다는 <xref:System.Windows.Input.ManipulationDelta.Translation%2A>, <xref:System.Windows.Input.ManipulationDelta.Scale%2A>, 및 <xref:System.Windows.Input.ManipulationDelta.Rotation%2A> 이동, 크기 조정 및 회전 속성을 <xref:System.Windows.Shapes.Rectangle>. 이 예제는에서 더 큰 예제의 일부 [연습: 만드는 첫 번째 터치 애플리케이션](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Translation">
      <MemberSignature Language="C#" Value="public System.Windows.Vector Translation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Vector Translation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDelta.Translation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Translation As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Vector Translation { System::Windows::Vector get(); };" />
      <MemberSignature Language="F#" Value="member this.Translation : System.Windows.Vector" Usage="System.Windows.Input.ManipulationDelta.Translation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>조작의 선형 동작을 가져오거나 설정합니다.</summary>
        <value>[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]에서 조작의 선형 동작입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.ManipulationDelta.Translation%2A> 속성 조작은 화면의 가로 및 세로로 이동으로 해석 하는 방식을 보고 합니다.  
  
   
  
## Examples  
 다음 예제에서는 이벤트 처리기는 <xref:System.Windows.UIElement.ManipulationDelta> 이벤트입니다.  예제에 적용 됩니다는 <xref:System.Windows.Input.ManipulationDelta.Translation%2A>, <xref:System.Windows.Input.ManipulationDelta.Scale%2A>, 및 <xref:System.Windows.Input.ManipulationDelta.Rotation%2A> 이동, 크기 조정 및 회전 속성을 <xref:System.Windows.Shapes.Rectangle>. 이 예제는에서 더 큰 예제의 일부 [연습: 만드는 첫 번째 터치 애플리케이션](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>