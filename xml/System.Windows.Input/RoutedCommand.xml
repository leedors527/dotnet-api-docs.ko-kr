<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7bcc65f4670032f76e334bbfdf2d2694cf8291d0" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56398002" /></Metadata><TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <TypeSignature Language="F#" Value="type RoutedCommand = class&#xA;    interface ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:System.Windows.Input.ICommand" />를 구현하고 요소 트리를 통해 라우트되는 명령을 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 및 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드를 <xref:System.Windows.Input.RoutedCommand> 일반적인 경우 처럼 명령에 대 한 애플리케이션 논리가 포함 되어 있지 않습니다 <xref:System.Windows.Input.ICommand>, 하지만 이러한 방법을 사용 하 여 개체를 찾는 요소 트리를 탐색 하는 이벤트를 발생 하는 아니라는 <xref:System.Windows.Input.CommandBinding>.  연결 된 이벤트 처리기는 <xref:System.Windows.Input.CommandBinding> 명령 논리를 포함 합니다.  
  
 합니다 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드를 발생 시킵니다 합니다 <xref:System.Windows.Input.CommandManager.PreviewExecuted> 및 <xref:System.Windows.Input.CommandManager.Executed> 이벤트입니다.  합니다 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드를 발생 시킵니다 합니다 <xref:System.Windows.Input.CommandManager.PreviewCanExecute> 및 <xref:System.Windows.Input.CommandManager.CanExecute> 이벤트입니다.  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
 \<*object* *property*="*predefinedCommandName*"/>  
  
또는
  
 \<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/>  
  
또는
  
 \<*object* *property*="{ *customClassName*.*customCommandName*}"/>  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a>XAML 값  
 *predefinedClassName*  
 미리 정의 된 명령 클래스 중 하나입니다.  
  
 *predefinedCommandName*  
 미리 정의 된 명령 중 하나입니다.  
  
 *customClassName*  
 사용자 지정 명령을 포함 하는 사용자 지정 클래스입니다. 사용자 지정 클래스는 일반적으로 필요는 `xlmns` 매핑 접두사를 참조 하세요 [XAML 네임 스페이스 및 WPF XAML에 대 한 매핑을 Namespace](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)합니다.  
  
 *customCommandName*  
 사용자 지정 명령입니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Input.RoutedCommand" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Input.RoutedCommand" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">serialization에 대해 선언된 이름입니다.</param>
        <param name="ownerType">명령을 등록할 형식입니다.</param>
        <summary>지정된 이름과 소유자 형식을 사용하여 <see cref="T:System.Windows.Input.RoutedCommand" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="ownerType" />가 <see langword="null" />입니다.</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.RoutedCommand : string * Type * System.Windows.Input.InputGestureCollection -&gt; System.Windows.Input.RoutedCommand" Usage="new System.Windows.Input.RoutedCommand (name, ownerType, inputGestures)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name">serialization에 대해 선언된 이름입니다.</param>
        <param name="ownerType">명령을 등록할 형식입니다.</param>
        <param name="inputGestures">이 명령과 연결된 기본 입력 제스처입니다.</param>
        <summary>지정된 이름, 소유자 형식 및 제스처 컬렉션을 사용하여 <see cref="T:System.Windows.Input.RoutedCommand" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="name" />의 길이가 0인 경우 
또는 
 <paramref name="ownerType" />가 <see langword="null" />입니다.</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.CanExecute : obj * System.Windows.IInputElement -&gt; bool" Usage="routedCommand.CanExecute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">사용자 정의 데이터 형식입니다.</param>
        <param name="target">명령 대상입니다.</param>
        <summary>이 <see cref="T:System.Windows.Input.RoutedCommand" />가 현재 상태에서 실행될 수 있는지 여부를 확인합니다.</summary>
        <returns>현재 명령 대상에서 명령을 실행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 있는지 여부를 확인 하는 실제 논리를 <xref:System.Windows.Input.RoutedCommand> 현재 실행할 수 있습니다 명령 대상에 포함 되지 않은 합니다 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드를 대신 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 발생 시킵니다를 <xref:System.Windows.Input.CommandManager.PreviewCanExecute> 및 <xref:System.Windows.Input.CommandManager.CanExecute> 터널링 및 버블링 이벤트 요소 포함 하는 개체를 찾는 트리는 <xref:System.Windows.Input.CommandBinding>합니다.  경우는 <xref:System.Windows.Input.CommandBinding> 에 대 한 <xref:System.Windows.Input.RoutedCommand> 발견 되 면 해당 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> 연결할 <xref:System.Windows.Input.CommandBinding> 라고 합니다.  지 여부를 결정 하는 것에 대 한 프로그래밍 논리를 제공 하는 이러한 처리기는 <xref:System.Windows.Input.RoutedCommand> 여부 실행할 수 있습니다.  
  
 <xref:System.Windows.Input.CommandManager.PreviewCanExecute> 및 <xref:System.Windows.Input.CommandManager.PreviewExecuted> 에서 이벤트 발생을 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>입니다.  경우는 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 에 설정 되어 있지는 <xref:System.Windows.Input.ICommandSource>의 <xref:System.Windows.Input.CommandManager.PreviewCanExecute> 및 <xref:System.Windows.Input.CommandManager.CanExecute> 키보드 포커스가 있는 요소에서 이벤트가 발생 합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.Windows.Input.ICommand.CanExecuteChanged> 이벤트 처리기의 사용자 지정 구현에서 <xref:System.Windows.Input.ICommandSource>합니다.  
  
 `this.Command` 이 예제는 <xref:System.Windows.Input.ICommandSource.Command%2A> 속성에는 <xref:System.Windows.Input.ICommandSource>합니다.  명령이 아닌 경우 `null`, 명령으로 캐스팅 됩니다는 <xref:System.Windows.Input.RoutedCommand>합니다.  명령이 <xref:System.Windows.Input.RoutedCommand>, 해당 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드는 전달 합니다 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 및 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>합니다.  명령이 없는 경우는 <xref:System.Windows.Input.RoutedCommand>로 캐스팅 되는 <xref:System.Windows.Input.ICommand> 및 <xref:System.Windows.Input.ICommand.CanExecute%2A> 메서드는 전달는 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>합니다.  
  
 경우는 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드가 반환 되는 `true`, 다음 컨트롤 사용. 그렇지 않으면 컨트롤은 사용 하지 않도록 설정 합니다.  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="target" />가 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />가 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberSignature Language="F#" Value="member this.CanExecuteChanged : EventHandler " Usage="member this.CanExecuteChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.Input.ICommand.CanExecuteChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>명령 관리자가 명령 소스에 대한 변경 내용을 감지하는 경우 발생합니다. 이러한 변경 내용은 대개 현재 명령 대상에서 명령을 실행해야 하는지 여부에 영향을 줍니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.RoutedCommand> 수신 대기 하는 <xref:System.Windows.Input.CommandManager.RequerySuggested> 이벤트에 의해 발생 하는 <xref:System.Windows.Input.CommandManager>합니다. <xref:System.Windows.Input.CommandManager.RequerySuggested> 조건이 충족 될 때마다 이벤트가 발생 하는지 여부를 변경할 수 있는 키보드 포커스 변경과 같은 명령을 실행 해야 합니다.  명령의 받을 때 합니다 <xref:System.Windows.Input.CommandManager.RequerySuggested> 이벤트를 발생 시킵니다는 <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> 이벤트입니다.  이 이벤트 및 쿼리에 대 한 명령 소스를 수신 하는 일반적으로 <xref:System.Windows.Input.RoutedCommand> 의 방식으로 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드.  대부분의 명령 소스 명령을 실행할 수 없습니다, 명령 바인딩 부분 경우 비활성화 됩니다.  이 예로 경우는 <xref:System.Windows.Controls.MenuItem> 명령을 실행할 수 없습니다 경우 회색으로 합니다.  
  
 상황에 따라는 <xref:System.Windows.Input.CommandManager> 는 명령을 실행 하는 기능을 변경 하는 상태 변경을 인식 하지 못합니다.  이러한 경우 할 수 있습니다는 <xref:System.Windows.Input.CommandManager> 발생 하는 <xref:System.Windows.Input.CommandManager.RequerySuggested> 호출 하 여 이벤트를 <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> 메서드를이 하면를 <xref:System.Windows.Input.RoutedCommand> 시키려면는 <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> 이벤트.  
  
   
  
## Examples  
 다음 예제는 <xref:System.Windows.Input.ICommand.CanExecuteChanged> 이벤트 처리기의 사용자 지정 구현에서 <xref:System.Windows.Input.ICommandSource>합니다.  
  
 `this.Command` 이 예제는 <xref:System.Windows.Input.ICommandSource.Command%2A> 속성에는 <xref:System.Windows.Input.ICommandSource>합니다.  명령이 아닌 경우 `null`, 명령으로 캐스팅 됩니다는 <xref:System.Windows.Input.RoutedCommand>합니다.  명령이 <xref:System.Windows.Input.RoutedCommand>, 해당 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드는 전달 합니다 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 및 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>합니다.  명령이 없는 경우는 <xref:System.Windows.Input.RoutedCommand>로 캐스팅 되는 <xref:System.Windows.Input.ICommand> 및 <xref:System.Windows.Input.ICommand.CanExecute%2A> 메서드는 전달는 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>합니다.  
  
 경우는 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드가 반환 되는 `true`, 그런 다음 컨트롤은 사용할 수 있습니다; 컨트롤이 비활성화 되어이 고, 그렇지 합니다.  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberSignature Language="F#" Value="member this.Execute : obj * System.Windows.IInputElement -&gt; unit" Usage="routedCommand.Execute (parameter, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">처리기에 전달되는 사용자 정의 매개 변수입니다.</param>
        <param name="target">명령 처리기를 찾을 요소입니다.</param>
        <summary>현재 명령 대상에서 <see cref="T:System.Windows.Input.RoutedCommand" />를 실행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 실행 하는 실제 논리는 <xref:System.Windows.Input.RoutedCommand> 에 포함 되어 있지는 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드.  <xref:System.Windows.Input.RoutedCommand.Execute%2A> 발생 시킵니다를 <xref:System.Windows.Input.CommandManager.PreviewExecuted> 및 <xref:System.Windows.Input.CommandManager.Executed> 사용 하 여 개체를 찾는 트리 요소를 통해 터널링 및 버블링 이벤트는 <xref:System.Windows.Input.CommandBinding>합니다.  경우는 <xref:System.Windows.Input.CommandBinding> 에 대 한 <xref:System.Windows.Input.RoutedCommand> 발견 되 면 해당 <xref:System.Windows.Input.ExecutedRoutedEventHandler> 연결할 <xref:System.Windows.Input.CommandBinding> 라고 합니다.  수행 하는 프로그래밍 논리를 제공 하는 이러한 처리기는 <xref:System.Windows.Input.RoutedCommand>합니다.  
  
 <xref:System.Windows.Input.CommandManager.PreviewExecuted> 및 <xref:System.Windows.Input.CommandManager.Executed> 에서 이벤트 발생을 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>입니다.  경우는 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 에 설정 되어 있지는 <xref:System.Windows.Input.ICommandSource>의 <xref:System.Windows.Input.CommandManager.PreviewExecuted> 및 <xref:System.Windows.Input.CommandManager.Executed> 키보드 포커스가 있는 요소에서 이벤트가 발생 합니다.  
  
   
  
## Examples  
 다음 예제는 사용자 지정 구현을에서 <xref:System.Windows.Input.ICommandSource> 샘플입니다.  
  
 `this.Command` 이 예의 Command 속성에는 <xref:System.Windows.Input.ICommandSource>합니다.  명령으로 캐스팅 됩니다 명령을 null이 아닌 경우는 <xref:System.Windows.Input.RoutedCommand>합니다.  경우는 <xref:System.Windows.Input.RoutedCommand>, 해당 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 전달 합니다 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 및 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>합니다.  명령이 없는 경우는 <xref:System.Windows.Input.RoutedCommand>로 캐스팅 되는 <xref:System.Windows.Input.ICommand> 및 <xref:System.Windows.Input.ICommand.Execute%2A> 메서드는 전달는 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>합니다.  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="target" />가 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />가 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputGestures : System.Windows.Input.InputGestureCollection" Usage="System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 명령과 연결된 <see cref="T:System.Windows.Input.InputGesture" /> 개체의 컬렉션을 가져옵니다.</summary>
        <value>입력 제스처입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 새 추가 하는 방법을 보여 줍니다 <xref:System.Windows.Input.MouseGesture> 에 <xref:System.Windows.Input.RoutedCommand>합니다.  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.Input.RoutedCommand.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>명령 이름을 가져옵니다.</summary>
        <value>명령 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 참조 하는 경우이 속성을 사용할 수는 <xref:System.Windows.Input.RoutedCommand> 에서 [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>명령에 등록된 형식을 가져옵니다.</summary>
        <value>명령 소유자의 형식입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Input.ICommand.CanExecute(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">명령에 사용된 데이터입니다.  명령에서 데이터를 전달할 필요가 없으면 이 개체를 <see langword="null" />로 설정할 수 있습니다.</param>
        <summary>이 멤버에 대한 설명은 <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />를 참조하십시오.</summary>
        <returns>이 명령을 실행할 수 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Windows.Input.RoutedCommand> 인스턴스가 <xref:System.Windows.Input.ICommand> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Input.ICommand.Execute(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">명령에 사용된 데이터입니다.  명령에서 데이터를 전달할 필요가 없으면 이 개체를 <see langword="null" />로 설정할 수 있습니다.</param>
        <summary>이 멤버에 대한 설명은 <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />를 참조하십시오.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Windows.Input.RoutedCommand> 인스턴스가 <xref:System.Windows.Input.ICommand> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
   
  
## Examples  
 참고 항목  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>