<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f4336638cdf2fb1c5cf7d47bec3e51e24af0b3fb" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64994518" /></Metadata><TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WindowInteropHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowInteropHelper sealed" />
  <TypeSignature Language="F#" Value="type WindowInteropHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>WPF(Windows Presentation Foundation) 및 Win32 코드 사이의 상호 운용을 지원합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 내부 액세스 하려면 호출자는이 클래스의 멤버를 통해 합니다 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND 및 부모 HWND의를 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>합니다.  이러한 멤버를 통해 적절 한 보안 검사가 수행 됩니다.  
  
 해당 HWND 기반 보다 구체적인 개체를 해야 할 때마다이 클래스를 사용 합니다.  
  
 예제 시나리오는 호스트 해야 하는 경우는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 대화 상자는 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] 애플리케이션입니다. 초기화 된 <xref:System.Windows.Interop.WindowInteropHelper> 사용 하 여를 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 대화 상자 창 개체입니다. 얻을 수 있습니다를 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 에서 창 핸들 (HWND)를 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> 속성에 대 한 소유자를 지정 합니다 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 창을 <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> 속성. 다음 코드 예제를 사용 하는 방법을 보여 줍니다 <xref:System.Windows.Interop.WindowInteropHelper> 호스팅하는 경우는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 대화 상자는 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] 애플리케이션입니다.  
  
 [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 이 클래스에 의해 지원 되는 다른 시나리오를 가져오는 것을 <xref:System.Windows.Interop.HwndSource> 에서 개체를 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> 개체. 합니다 <xref:System.Windows.Interop.HwndSource> 직접 처리할 수 있습니다 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] 를 통해 메시지를 <xref:System.Windows.Interop.HwndSource.AddHook%2A> 메서드. 사용 하 여 <xref:System.Windows.Interop.HwndSource> 하 고 <xref:System.Windows.Interop.HwndSource.AddHook%2A> 대신를 <xref:System.Windows.Window> 메시지만 해당 기능이 나에서 처리를 계속 처리할 수 있습니다 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]합니다. 만들기는 <xref:System.Windows.Interop.WindowInteropHelper> 사용 하 여는 <xref:System.Windows.Window> 소스 다음 호출 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> 에 <xref:System.Windows.Interop.WindowInteropHelper> 에서 HWND를 가져오려면 <xref:System.Windows.Interop.HwndSource>합니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowInteropHelper(System::Windows::Window ^ window);" />
      <MemberSignature Language="F#" Value="new System.Windows.Interop.WindowInteropHelper : System.Windows.Window -&gt; System.Windows.Interop.WindowInteropHelper" Usage="new System.Windows.Interop.WindowInteropHelper window" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 창 개체입니다.</param>
        <summary>새 인스턴스를 초기화 합니다 <see cref="T:System.Windows.Interop.WindowInteropHelper" /> 지정 된 클래스 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 창입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 창 대화 상자 또는 그렇지 않은 경우에 적합 하지 않은 범위 내에서 호스트 되는 창 수를 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] 애플리케이션입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function EnsureHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr EnsureHandle();" />
      <MemberSignature Language="F#" Value="member this.EnsureHandle : unit -&gt; nativeint" Usage="windowInteropHelper.EnsureHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>HWND가 아직 생성 되지 경우 창의 HWND를 만듭니다.</summary>
        <returns><see cref="T:System.IntPtr" /> HWND를 나타내는입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> 관리 되는 실제 표시에서 창 핸들 (HWND) 만들기를 분리 하려는 경우 메서드 <xref:System.Windows.Window>합니다. 자동화 클라이언트는 창을 표시 하지 않고도 해당 작업을 수행할 수 있는 경우에 유용 합니다.  
  
 네이티브 창의 아직 만들지 않은 경우이 메서드는 네이티브 창의 집합 만듭니다는 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> 속성과 HWND 반환 합니다. 네이티브 창의 이미 생성 된 경우에 기존 네이티브 창의 핸들이 반환 됩니다.  
  
 네이티브 창의이 메서드를 호출 하는 결과로 만들어지는 경우는 <xref:System.Windows.Window.SourceInitialized> 이벤트가 발생 합니다.  
  
 쿼리는 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> 후에는 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> 메서드는 기존 창 핸들을 반환 합니다. 시각적 트리 후까지 창에 연결 되어 있지는 <xref:System.Windows.Window.Show%2A> 메서드가 호출 됩니다.  
  
 호출 된 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> 메서드가 여러 번 만들어지지는지 않습니다 새 창 핸들입니다. 호출 된 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> 메서드를 호출 하 여 핸들을 이미 만든 경우는 <xref:System.Windows.Window.Show%2A> 메서드는 새 창 핸들을 만들지 않습니다. 핸들이 없는 경우에 기본 창이 만들어집니다 때는 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> 메서드가 호출 됩니다.  
  
 창 설정 된 속성은 p/invoke를 통해 네이티브 창의 Api를 사용 하 여 Api 관리 되는 창에 나타나지 않을 수 있습니다. 예를 들어, 후 네이티브 MS_EX_TOPMOST 플래그를 사용 하 여 맨 위 수 기간을 설정 하는 경우는 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> 메서드가 호출 되는 <xref:System.Windows.Window.Topmost%2A> 속성 기본 설정을 반영 하도록 보장 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">만들고 창 핸들에 액세스 합니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.Interop.WindowInteropHelper" />를 만드는 데 사용되는 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 창에 대한 창 핸들을 가져옵니다.</summary>
        <value>[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 창 핸들 (HWND)입니다.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">창 핸들을 가져옵니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Owner { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : nativeint with get, set" Usage="System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 소유자 창의 핸들을 가져오거나 설정합니다.</summary>
        <value>소유자 창 핸들 (HWND)입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 설정 하 여 windows 부모를 재지정할 수 있습니다. 일반 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] 프로그래밍, 이미 사용 중인 windows 부모 재지정 하지 않습니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">가져오거나 설정할 속성 값이 있습니다. 연결 된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>