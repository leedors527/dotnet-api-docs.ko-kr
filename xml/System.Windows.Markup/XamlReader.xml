<Type Name="XamlReader" FullName="System.Windows.Markup.XamlReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b22c826a543d05a1a2fac984e24ff64c3bfb8c40" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57939412" /></Metadata><TypeSignature Language="C#" Value="public class XamlReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader" />
  <TypeSignature Language="F#" Value="type XamlReader = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>WPF 기본 XAML 판독기 및 연결된 XAML 개체 기록기를 사용하여 XAML 입력을 읽고 개체 그래프를 만듭니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 동기 <xref:System.Windows.Markup.XamlReader.Load%2A> 메서드는 정적 이지만 비동기 <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> 메서드 정적 이며 인스턴스는 <xref:System.Windows.Markup.XamlReader> 클래스를 사용 합니다.  
  
 출력을 `Load` 메서드는 생성된 된 개체 트리 또는 개체 그래프의 루트 개체를 나타내는 단일 개체입니다. 개체에서 만든 그래프 <xref:System.Windows.Markup.XamlReader> 일반적으로 런타임에 WPF 응용 프로그램의 기존 개체 트리에 추가 됩니다. 그렇지 않은 경우 새 개체 그래프 WPF 응용 프로그램 모델의 목적에 대 한 연결이 끊어진 것으로 간주 됩니다. 즉, 렌더링 하지 않습니다 하 고 적용할 수 없습니다 액세스를 사용 하 여 개체 트리 기법으로 WPF 응용 프로그램의 기본 개체 트리 (예를 들어 Api <xref:System.Windows.FrameworkElement.FindName%2A>, <xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>). 개체 트리 개념에 대 한 자세한 내용은 참조 하세요. [WPF의 트리](~/docs/framework/wpf/advanced/trees-in-wpf.md)합니다.  
  
 <xref:System.Windows.Markup.XamlReader> 다음과 같은 기본 시나리오를 지원합니다.  
  
-   **복제 개체 팩터리**: 추가적인 메커니즘 없이 참조 형식이 일반적으로 포함할 수 없습니다 WPF 개체 트리에서 둘 이상의 위치에. (공유에 대 한 지원을 제공 하거나 WPF에서 다시 사용 하는 추가 메커니즘의 예로 기반으로 하는 개체 <xref:System.Windows.Freezable>와 같은 일반적으로 공유할 수 있는 개체에 대 한 지원이 <xref:System.Windows.Media.Brush> 에서 항목으로 참조 되는 <xref:System.Windows.ResourceDictionary>.) 사용 하 여 개체를 serialize 할 개체 트리는 이미 있는 개체를 복제 하는 한 가지 방법은 <xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=nameWithType>합니다. 사용할 직렬화 된 문자열 입력에 대 한 호출 <xref:System.Windows.Markup.XamlReader.Load%2A>, 스트림 또는 <xref:System.Xml.XmlReader> 중간자로 합니다.  
  
-   **적시에 정보를 기반으로 개체 생성**: 런타임에 바인딩 또는 사용자가 제공한 입력 기존 개체의 상태를 변경 하는 다른 방법은 많습니다. 예를 들어 둘 이상의 속성을 설정 하려면 동일한 값을 사용 하거나 데이터 바인딩을 사용할 수 있습니다. 여기서도 만들 개체의 형식이 결정할 수 있는 런타임 시 또는 사용자 상호 작용 시나리오에 있는 경우 다음 개체를 만드는 이러한 문자열을 작성 하 여 있지만 <xref:System.Windows.Markup.XamlReader.Load%2A> 입력 유용한 기술 경우가 많습니다.  
  
-   **기존 리소스 기술을 사용 하 여**: <xref:System.IO.Stream> 형식에서 자주 사용 됩니다 다른 프레임 워크 또는 기술 응용 프로그램 경계를 넘어 데이터 나 개체를 전송 하는 것에 대 한 또는 이와 유사한 상황에 대 한 합니다. 사용할 수는 <xref:System.IO.Stream> 저장소나 결국 응용 프로그램의 일부로 개체를 만드는 데 사용 하는 XAML 형식의 데이터를 가져오는 방법입니다.  
  
-   **고정된 문서:** 응용 프로그램 WPF 응용 프로그램 개체 트리를 UI에 포함 하기 위해 로컬 또는 다운로드 한 XPS 문서를 로드할 수 있습니다.  
  
> [!NOTE]
>  이 설명서를 따라 개체 트리로 달리 개체 그래프를 설명합니다. 엄격한 부모-자식 관계를 항상 없으므로 런타임 WPF 응용 프로그램의 런타임 개체 관계에서 개체 그래프를 보다 광범위 하 게 해당 용어는 합니다. 그러나 WPF에 두 개의 다른 트리 개념화 Api도 포함 되어 있으므로 (<xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>) 트리 메타포 WPF의 대부분의 실제 사례를 적절 하 게 계속 적용 합니다. 그러나 XAML 언어 관점에서 개체 그래프 대개는 가장 좋은 방법은 생각 하는 XAML에서 개체가 생성 되는 방법에 대 한 XAML 언어 자체 반드시 지정 하지 않으므로 관계를 자세히 제공 하는 도우미 클래스 방법론에는 트리 구조 다시입니다.  
  
## <a name="code-access-security-loose-xaml-and-xamlreader"></a>코드 액세스 보안, 느슨한 XAML 및 XamlReader  
 XAML은 개체 인스턴스화 및 실행을 직접적으로 나타내는 태그 언어입니다. 따라서 XAML에서 만든 요소에는 생성된 해당 코드가 수행하는 것과 마찬가지로 시스템 리소스(예: 네트워크 액세스, 파일 시스템 IO)와 상호 작용하는 동일한 기능이 있습니다.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 지원 합니다 [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] 보안 프레임 워크 [!INCLUDE[TLA#tla_cas](~/includes/tlasharptla-cas-md.md)]합니다. 즉, 인터넷 영역에서 실행되는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 콘텐츠는 실행 권한이 줄어듭니다. 이때 "느슨한 XAML"(컴파일되지 않은 XAML의 페이지가 로드 시 XAML 뷰어에 의해 해석됨) 및 [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]는 일반적으로 이 인터넷 영역에서 실행되며 같은 권한 집합을 사용합니다.  하지만 완전히 신뢰할 수 있는 애플리케이션으로 로드된 XAML은 시스템 리소스에 대해 호스팅 애플리케이션과 동일한 액세스 권한을 가집니다. 자세한 내용은 [WPF 부분 신뢰 보안](~/docs/framework/wpf/wpf-partial-trust-security.md)을 참조하세요.  
  
 에 대 한 이러한 문 미치는 <xref:System.Windows.Markup.XamlReader> 응용 프로그램 디자인 로드 하려는 XAML에 대 한 신뢰 결정을 내려야 하는 합니다. 신뢰할 수 없는 XAML을 로드 하는 경우에 결과 개체 그래프를 로드 하는 방법에 대 한 고유한 샌드 박싱 기술을 구현 하는 것이 좋습니다.  
  
 <xref:System.Windows.Markup.XamlReader> 부분 신뢰 코드로 호출할 수도 있습니다. 이 경우 코드 액세스 보안에 대 한 인터넷 보안 영역 적용 됩니다. 인터넷 보안 영역에서 유효 하지 않으면 로드 된 XAML에서 XAML 구문 분석 예외를 throw 됩니다. XBAP 및 플랫폼 수준에서 부분 신뢰를 수 있는 경우도 있는 <xref:System.Windows.Markup.XamlReader> 일부인 실행의 명시적 부분 신뢰로 호출 된 대로 동일한 예외 동작 하 게 합니다.  
  
## <a name="wpf-xaml-xaml-readerswriters-and-xaml-language-versioning"></a>WPF XAML, XAML 판독기/기록기 및 XAML 언어 버전 관리  
 XAML2009와 같은 언어 기능에 포함 [X:reference](~/docs/framework/xaml-services/x-reference-markup-extension.md) 하 고 [X:factorymethod](~/docs/framework/xaml-services/x-factorymethod-directive.md)합니다. 시그니처를 사용할 수 있습니다 `Load` 또는 `Parse` 이러한 기능을 사용 하는 XAML을 로드 합니다. 그러나 이러한 언어 기능은 태그를 컴파일해야 하는 XAML에 대 한 지원 되지 않습니다 (에 대 한 XAML 같은 **페이지** 는 WPF 응용 프로그램 또는 빌드 작업에서 태그 컴파일 작업을 포함 하는 모든 XAML에서 빌드 작업).  
  
 WPF 형식 및 WPF 기술 일반적 WPF 내부 요소에 대 한 액세스를 사용 하는 개념을 지원 합니다. 예를 들어 WPF 종속성 속성을 구현 하는 방법을 효율적으로 형식 멤버 조회에 대 한 내부 기술에 의존 합니다. 이러한 내부 요소에 대 한 액세스 읽기 및 쓰기에 제공 된 Api XAML으로 사용 됩니다 <xref:System.Windows.Markup.XamlWriter> 하 고 <xref:System.Windows.Markup.XamlReader> 에서 <xref:System.Windows.Markup> 네임 스페이스 및 PresentationFramework 어셈블리입니다. 그러나 하위 수준 XAML 판독기 및 XAML 작성기에서 System.Xaml 어셈블리로 마이그레이션 되었습니다 (클래스 기반 <xref:System.Xaml.XamlReader?displayProperty=nameWithType>, <xref:System.Xaml.XamlWriter?displayProperty=nameWithType>) WPF 내부 구조에 대 한 액세스 권한이 없습니다. 모든 WPF 특정 어셈블리에 System.Xaml에는 종속성이 있습니다. WPF 내부 구조에 대 한 액세스를 하지 않고 System.Xaml 판독기 및 작성기 올바르게 로드할 수 없습니다 또는 모든 WPF 저장 형식 또는 형식에 따라 WPF 형식입니다. 특히 System.Xaml 판독기 및 작성기 지원 속성 저장소 또는 WPF 스타일, 리소스 사전 및 템플릿을 사용 하는 방법의 모든 세부 사항을 WPF 종속성 속성과 같은 개념을 이해 하지 않습니다. 따라서는 선택할 수 있습니다.  
  
-   WPF 형식을 로드 하는 경우 어떤 방식으로든에서 BAML 양식에서 XAML을 사용 하는, PresentationFramework XAML 판독기 및 XAML 작성기를 사용 합니다.  
  
-   모든 WPF 형식 또는 BAML 양식의 XAML 사용 하지 않고도 다른 특정 기술을 XAML 판독기 또는 XAML 작성기 구현 프레임 워크에 관련 된 이유로 사용 하지 않는 경우 System.Xaml XAML 판독기 및 XAML 작성기를 사용 합니다.  
  
## <a name="systemxaml-backing-implementation-in-net-4"></a>System.Xaml 구현은.NET 4의 백업  
 <xref:System.Windows.Markup.XamlReader> WPF 프레임 워크 수준 XAML 파서에 대 한 호출 가능 API 화면이입니다. 동일한 기본 XAML 파서를 로드 하 고 대상으로 하는 WPF 응용 프로그램에 대 한 구문 분석 하는 런타임에 XAML 성능도 [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] 고 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]입니다.  
  
 대상으로 하는 경우 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], 외부 API는 동일 하지만 구현의 일부는 기반을 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 다양 한 XAML을 구문 분석의 기술 및 보고 측면을 개선 하는 System.Xaml 어셈블리에 일반 XAML 구현 합니다. 대상 지정 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 포함 하 여 System.Xaml 참조 및 구현의 세부 사항으로 System.Xaml에서 보고 된 예외가 발생할 때는 형식을 정의 하는 것은 아닙니다.  
  
## Examples  
 다음 예제는 <xref:System.Windows.Controls.Button> 사용 하 여 문자열을 <xref:System.Windows.Markup.XamlWriter> 클래스.  문자열은 다음 다시 로드를 <xref:System.Windows.Controls.Button> 정적을 사용 하 여 <xref:System.Windows.Markup.XamlReader.Load%2A> 메서드를 <xref:System.Windows.Markup.XamlReader> 클래스입니다.  
  
 [!code-csharp[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.XamlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Markup.XamlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : unit -&gt; unit" Usage="xamlReader.CancelAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 보류 중인 비동기 로드 작업이 있으면 중단합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.CancelAsync%2A> 비동기 작업입니다. 따라서 일부 로드 작업이 중단 될 전에 발생할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWpfSchemaContext">
      <MemberSignature Language="C#" Value="public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xaml.XamlSchemaContext GetWpfSchemaContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.GetWpfSchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetWpfSchemaContext () As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xaml::XamlSchemaContext ^ GetWpfSchemaContext();" />
      <MemberSignature Language="F#" Value="static member GetWpfSchemaContext : unit -&gt; System.Xaml.XamlSchemaContext" Usage="System.Windows.Markup.XamlReader.GetWpfSchemaContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xaml.XamlSchemaContext" />에 대한 WPF 스키마 컨텍스트 설정을 나타내는 <see cref="T:System.Windows.Markup.XamlReader" /> 개체를 반환합니다.</summary>
        <returns><see cref="T:System.Xaml.XamlSchemaContext" />에 대한 WPF 스키마 컨텍스트 설정을 나타내는 <see cref="T:System.Windows.Markup.XamlReader" /> 개체입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XAML 입력을 읽고 해당 개체 트리의 루트를 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">스트림 형식으로 로드할 XAML입니다.</param>
        <summary>지정된 <see cref="T:System.IO.Stream" />에서 XAML 입력을 읽고 해당 개체 트리의 루트인 <see cref="T:System.Object" />를 반환합니다.</summary>
        <returns>만든 개체 트리의 루트에 있는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 저장 하는 다음 예제는 <xref:System.Windows.Controls.Button> 에 <xref:System.IO.MemoryStream> 사용 하 여를 <xref:System.Windows.Markup.XamlWriter> 클래스입니다. 스트림에 다음 다시 로드를 <xref:System.Windows.Controls.Button> 정적을 사용 하 여 <xref:System.Windows.Markup.XamlReader.Load%2A> 메서드를 <xref:System.Windows.Markup.XamlReader> 클래스입니다.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />가 <see langword="null" />입니다.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XamlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xaml.XamlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xaml.XamlReader" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Xaml.XamlReader" /> 개체입니다. 입력 XAML을 사용하여 초기화되어야 합니다.</param>
        <summary>제공된 <see cref="T:System.Xaml.XamlReader" />에서 XAML 입력을 읽고 해당 개체 트리의 루트인 개체를 반환합니다.</summary>
        <returns>만든 개체 트리의 루트인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 입력 <xref:System.Xaml.XamlReader> 수 <xref:System.Windows.Baml2006.Baml2006Reader>입니다. 런타임 시 또는 지역화 도구를 위해 BAML에 로드 하는 방법입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">XML 형식으로 로드하기 위해 이미 XAML 입력을 로드한 <see cref="T:System.Xml.XmlReader" />입니다.</param>
        <summary>지정된 <see cref="T:System.Xml.XmlReader" />에서 XAML 입력을 읽고 해당 개체 트리의 루트인 개체를 반환합니다.</summary>
        <returns>만든 개체 트리의 루트인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제는 <xref:System.Windows.Controls.Button> 사용 하 여 문자열을 <xref:System.Windows.Markup.XamlWriter> 클래스.  문자열은 다음 다시 로드를 <xref:System.Windows.Controls.Button> 정적을 사용 하 여 <xref:System.Windows.Markup.XamlReader.Load%2A> 메서드를 <xref:System.Windows.Markup.XamlReader> 클래스입니다.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" />가 <see langword="null" />입니다.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">로드할 XAML 입력이 들어 있는 스트림입니다.</param>
        <param name="parserContext">파서에서 사용하는 컨텍스트 정보입니다.</param>
        <summary>지정된 <see cref="T:System.IO.Stream" />에서 XAML 입력을 읽고 해당 개체 트리의 루트인 개체를 반환합니다.</summary>
        <returns>만든 개체 트리의 루트인 개체입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />가 <see langword="null" />입니다.  
  
또는 
 <paramref name="parserContext" />가 <see langword="null" />입니다.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadAsync">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XAML 태그를 읽고 지정된 태그의 루트에 해당하는 개체를 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream -&gt; obj" Usage="xamlReader.LoadAsync stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">로드할 XAML 입력이 들어 있는 스트림입니다.</param>
        <summary>지정된 <see cref="T:System.IO.Stream" />에서 XAML 입력을 읽고 해당 개체 트리의 루트를 반환합니다.</summary>
        <returns>만든 개체 트리의 루트인 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 XAML 로드 작업은 루트 개체 순수 하 게 하는 개체를 반환 처음 됩니다. 비동기적으로 XAML을 구문 분석 한 다음 계속 되 고 루트 아래의 모든 자식 개체가 채워집니다. 이 동작 및 해당 개체 수명의 개념 WPF와의 상호 작용을 처리 하는 일반적인 WPF XAML 대조적입니다. 일반적인 (비동기가 아닌) 상호 작용 요소를 반환 하 고 로드 된 것으로 보고 하기 전에 모든 자식 컬렉션을 포함 하 여 개체의 모든 속성이 채워집니다. 해당 동작 상향식 방법론을 사용할 수 있으려면 마지막 개체인는 루트 개체 트리를 만드는 것과 같습니다.  
  
 일반적으로 WPF 응용 프로그램의 개체 트리의 특정 위치에 반환된 된 개체 할당, 콘텐츠는 기술 자료를 사용 하 여 계속 채워지고 및 전체가 UI의 일부로 노출 되는 경우에 증분 레이아웃 업데이트를 발생할 수 있습니다. 따라서 일반적인 격리 또는 XAML에서 비동기적으로 로드 된 모든 개체를 가상화 하 고 경우 알림을 응용 프로그램별 논리 또는 응용 프로그램 상태를 사용 하는 <xref:System.Windows.Markup.XamlReader.LoadCompleted> 처리 됩니다.  
  
 되려면에서 <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> 입력을 비동기적으로 XAML을 로드 하려면 입력 XAML 루트 요소 특성 및 값을 포함 해야 합니다 `x:SynchronousMode="Async"`합니다. 값은 대/소문자입니다. XAML 입력된 루트에 없으면 `x:SynchronousMode="Async"`예외가 throw 되 고 호출은 동기 로드로 처리 됩니다 (참조 <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>).  
  
 인스턴스당 하나의 비동기 로드 작업을 <xref:System.Windows.Markup.XamlReader> 클래스는 한 번에 수행할 수 있습니다.  동일한 인스턴스에서 둘 이상의 비동기 작업을 시도 하는 경우는 <xref:System.Windows.Markup.XamlReader> 클래스는 <xref:System.InvalidOperationException> throw 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException">여러 로드 조작은 동일한 <see cref="T:System.Windows.Markup.XamlReader" />로 동시에 보류됩니다.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.Xml.XmlReader -&gt; obj" Usage="xamlReader.LoadAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">이미 XAML 입력을 로드한/읽은 기존 <see cref="T:System.Xml.XmlReader" />입니다.</param>
        <summary>지정된 <see cref="T:System.Xml.XmlReader" />에서 XAML 입력을 읽고 해당 개체 트리의 루트를 반환합니다.</summary>
        <returns>만든 개체 트리의 루트입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 XAML 로드 작업은 루트 개체 순수 하 게 하는 개체를 반환 처음 됩니다. 비동기적으로 XAML을 구문 분석 한 다음 계속 되 고 루트 아래의 모든 자식 개체가 채워집니다. 이 동작 및 해당 개체 수명의 개념 WPF와의 상호 작용을 처리 하는 일반적인 WPF XAML 대조적입니다. 일반적인 (비동기가 아닌) 상호 작용 요소를 반환 하 고 로드 된 것으로 보고 하기 전에 모든 자식 컬렉션을 포함 하 여 개체의 모든 속성이 채워집니다. 해당 동작 상향식 방법론을 사용할 수 있으려면 마지막 개체인는 루트 개체 트리를 만드는 것과 같습니다.  
  
 일반적으로 반환 된 개체를 할당 합니다 <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> 일부 위치로 응용 프로그램의 개체 트리는 콘텐츠 정보를 사용 하 여 계속 채워지고 및 전체가의 일부로 노출 되는 경우 증분 레이아웃 업데이트가 발생할 수는 UI입니다. 따라서 일반적인 격리 또는 XAML에서 비동기적으로 로드 된 모든 개체를 가상화 하 고 경우 알림을 응용 프로그램별 논리 또는 응용 프로그램 상태를 사용 하는 <xref:System.Windows.Markup.XamlReader.LoadCompleted> 처리 됩니다.  
  
 되려면에서 <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> XAML 입력을 비동기적으로 로드할 XAML 태그의 루트 요소 특성 및 값을 포함 해야 합니다 `x:SynchronousMode="Async"`합니다. 값은 대/소문자입니다. XAML 태그 루트에 없으면 `x:SynchronousMode="Async"`예외가 throw 되지 고 호출은 동기 로드로 대신 처리 됩니다 (참조 <xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>).  
  
 인스턴스당 하나의 비동기 로드 작업을 <xref:System.Windows.Markup.XamlReader> 클래스는 한 번에 수행할 수 있습니다.  동일한 인스턴스에서 둘 이상의 비동기 작업을 시도 하는 경우는 <xref:System.Windows.Markup.XamlReader> 클래스는 <xref:System.InvalidOperationException> throw 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException">여러 로드 조작은 동일한 <see cref="T:System.Windows.Markup.XamlReader" />를 사용하여 동시에 수행됩니다.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="xamlReader.LoadAsync (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">로드할 XAML 입력이 들어 있는 스트림입니다.</param>
        <param name="parserContext">파서에서 사용하는 컨텍스트 정보입니다.</param>
        <summary>지정된 <see cref="T:System.IO.Stream" />에서 XAML 입력을 읽고 해당 개체 트리의 루트를 반환합니다.</summary>
        <returns>만든 개체 트리의 루트입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비동기 XAML 로드 작업은 루트 개체 순수 하 게 하는 개체를 반환 처음 됩니다. 비동기적으로 XAML을 구문 분석 한 다음 계속 되 고 루트 아래의 모든 자식 개체가 채워집니다. 이 동작 및 해당 개체 수명의 개념 WPF와의 상호 작용을 처리 하는 일반적인 WPF XAML 대조적입니다. 일반적인 (비동기가 아닌) 상호 작용 요소를 반환 하 고 로드 된 것으로 보고 하기 전에 모든 자식 컬렉션을 포함 하 여 개체의 모든 속성이 채워집니다. 해당 동작 상향식 방법론을 사용할 수 있으려면 마지막 개체인는 루트 개체 트리를 만드는 것과 같습니다.  
  
 일반적으로 응용 프로그램의 개체 트리의 특정 위치에 반환된 된 개체 할당, 콘텐츠는 기술 자료를 사용 하 여 계속 채워지고 및 전체가 UI의 일부로 노출 되는 경우에 증분 레이아웃 업데이트를 발생할 수 있습니다. 따라서 일반적인 격리 또는 XAML에서 비동기적으로 로드 된 모든 개체를 가상화 하 고 경우 알림을 응용 프로그램별 논리 또는 응용 프로그램 상태를 사용 하는 <xref:System.Windows.Markup.XamlReader.LoadCompleted> 처리 됩니다.  
  
 되려면에서 <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> 태그를 비동기적으로 로드 하려면 XAML 태그의 루트 요소 특성 및 값을 포함 해야 합니다 `x:SynchronousMode="Async"`합니다. 값은 대/소문자입니다. XAML 태그 루트에 없으면 `x:SynchronousMode="Async"`예외가 throw 되 고 호출은 동기 로드로 처리 됩니다 (참조 <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>).  
  
 인스턴스당 하나의 비동기 로드 작업을 <xref:System.Windows.Markup.XamlReader> 클래스는 한 번에 수행할 수 있습니다.  동일한 인스턴스에서 둘 이상의 비동기 작업을 시도 하는 경우는 <xref:System.Windows.Markup.XamlReader> 클래스는 <xref:System.InvalidOperationException> throw 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException">여러 로드 조작은 동일한 <see cref="T:System.Windows.Markup.XamlReader" />를 사용하여 동시에 수행됩니다.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Markup.XamlReader.LoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadCompleted As AsyncCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ LoadCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " Usage="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>비동기 로드 작업이 완료되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.LoadCompleted> 비동기 로드 작업을 중단 하는 경우에 발생 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 텍스트 문자열에서 태그를 읽고 지정된 태그의 루트에 해당하는 개체를 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse xamlText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlText">단일 텍스트 문자열인 입력 XAML입니다.</param>
        <summary>지정된 텍스트 문자열에서 XAML 입력을 읽고 지정된 태그의 루트에 해당하는 개체를 반환합니다.</summary>
        <returns>만든 개체 트리의 루트입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 구현 호출 하 여 <xref:System.Windows.Markup.XamlReader.Load%2A> 문자열에서 스트림을 만든 후에 내부적으로 합니다. 참조 <xref:System.Windows.Markup.XamlReader.Load%2A> 가능한 예외와 같은 추가 정보.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse (xamlText, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="xamlText">단일 텍스트 문자열인 입력 XAML입니다.</param>
        <param name="parserContext">파서에서 사용하는 컨텍스트 정보입니다.</param>
        <summary>지정된 <see cref="T:System.Windows.Markup.ParserContext" />를 사용하여 지정된 텍스트 문자열에서 XAML 태그를 읽고 지정된 태그의 루트에 해당하는 개체를 반환합니다.</summary>
        <returns>만든 개체 트리의 루트입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 구현 호출 하 여 <xref:System.Windows.Markup.XamlReader.Load%2A> 문자열에서 스트림을 만든 후에 내부적으로 합니다. 참조 <xref:System.Windows.Markup.XamlReader.Load%2A> 가능한 예외와 같은 추가 정보.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>