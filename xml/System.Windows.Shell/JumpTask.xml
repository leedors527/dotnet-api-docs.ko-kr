<Type Name="JumpTask" FullName="System.Windows.Shell.JumpTask">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1eb9421dd934a9074c6836b3fb2b5fd147caf844" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39870752" /></Metadata><TypeSignature Language="C#" Value="public class JumpTask : System.Windows.Shell.JumpItem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JumpTask extends System.Windows.Shell.JumpItem" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Shell.JumpTask" />
  <TypeSignature Language="VB.NET" Value="Public Class JumpTask&#xA;Inherits JumpItem" />
  <TypeSignature Language="C++ CLI" Value="public ref class JumpTask : System::Windows::Shell::JumpItem" />
  <TypeSignature Language="F#" Value="type JumpTask = class&#xA;    inherit JumpItem" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Shell.JumpItem</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Windows 7 작업 표시줄 점프 목록에서 애플리케이션에 대한 바로 가기를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Shell.JumpTask> 응용 프로그램에 바로 가기로 생각할 수 있습니다. 실행 파일의 경로를 설정 하 여 지정 된 <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> 속성입니다. 경우는 <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> 암시 되어 현재 실행 중인 프로세스의 경로 설정 하지 않으면. 선택적으로 지정할 수 있습니다 <xref:System.Windows.Shell.JumpTask.Arguments%2A> 시작 시 애플리케이션에 전달 합니다.  
  
 와 같은 기본 표시 속성을 설정할 수 있습니다 <xref:System.Windows.Shell.JumpTask.Title%2A>, <xref:System.Windows.Shell.JumpTask.Description%2A>, 및 <xref:System.Windows.Shell.JumpTask.IconResourcePath%2A> 점프 목록에 작업의 모양을 지정할 수 있습니다. 사용 하는 아이콘을 <xref:System.Windows.Shell.JumpTask> 네이티브 리소스로 사용할 수 있어야 합니다. 오프셋을 지정 하 여 사용할 지정할 여러 아이콘 리소스 DLL 또는 실행 파일에서 사용할 수 있는 경우는 <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> 속성입니다.  
  
 기본적으로 <xref:System.Windows.Shell.JumpTask> 에 배치 됩니다 합니다 **작업** 범주 점프 목록입니다. 설정 하 여 태스크의 사용자 지정 그룹화를 지정할 수 있습니다는 <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> 속성입니다.  
  
 만들어 점프 목록에서 항목을 시각적으로 구분할 수 있습니다는 <xref:System.Windows.Shell.JumpTask> 없는 <xref:System.Windows.Shell.JumpTask.Title%2A> 및 <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> 지정 합니다. 이 빈 <xref:System.Windows.Shell.JumpTask> 점프 목록에 가로 선으로 표시 됩니다. 이 경우 다른 속성을 설정할 수 있지만 영향을 주지는 없습니다.  
  
   
  
## Examples  
 다음 예제에서는 선언 하는 방법을 보여 줍니다는 <xref:System.Windows.Shell.JumpTask> 태그에서입니다. 합니다 <xref:System.Windows.Shell.JumpTask> 라는 텍스트 파일을 엽니다 `readme.txt` 메모장 애플리케이션에서입니다.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 다음 예제에서는 구성 방법을 보여 줍니다는 <xref:System.Windows.Shell.JumpTask> 코드에서입니다. <xref:System.Windows.Shell.JumpTask> 계산기 응용 프로그램을 엽니다.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Shell.JumpPath" />
    <altmember cref="T:System.Windows.Shell.JumpList" />
    <altmember cref="E:System.Windows.Shell.JumpList.JumpItemsRejected" />
    <altmember cref="E:System.Windows.Application.Startup" />
    <altmember cref="P:System.Windows.StartupEventArgs.Args" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JumpTask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpTask.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JumpTask();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Shell.JumpTask" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationPath">
      <MemberSignature Language="C#" Value="public string ApplicationPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.ApplicationPath" />
      <MemberSignature Language="VB.NET" Value="Public Property ApplicationPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ApplicationPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationPath : string with get, set" Usage="System.Windows.Shell.JumpTask.ApplicationPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>애플리케이션의 경로를 가져오거나 설정합니다.</summary>
        <value>애플리케이션의 경로입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> 속성을 지정 하지 않으면 다음 현재 실행 중인 프로세스의 경로 인 것으로 간주 합니다. 애플리케이션 자체가 아닌 실행 파일에 대 한 작업을 포함할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 선언 하는 방법을 보여 줍니다는 <xref:System.Windows.Shell.JumpTask> 태그에서입니다. 합니다 <xref:System.Windows.Shell.JumpTask> 라는 텍스트 파일을 엽니다 `readme.txt` 메모장 애플리케이션에서입니다.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 다음 예제에서는 구성 방법을 보여 줍니다는 <xref:System.Windows.Shell.JumpTask> 코드에서입니다. <xref:System.Windows.Shell.JumpTask> 계산기 응용 프로그램을 엽니다.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public string Arguments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Arguments" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Arguments" />
      <MemberSignature Language="VB.NET" Value="Public Property Arguments As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Arguments { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Arguments : string with get, set" Usage="System.Windows.Shell.JumpTask.Arguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>시작 시 애플리케이션에 전달되는 인수를 가져오거나 설정합니다.</summary>
        <value>시작 시 애플리케이션에 전달되는 인수입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 선언 하는 방법을 보여 줍니다는 <xref:System.Windows.Shell.JumpTask> 태그에서입니다. 합니다 <xref:System.Windows.Shell.JumpTask> 라는 텍스트 파일을 엽니다 `readme.txt` 메모장 애플리케이션에서입니다.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Application.Startup" />
        <altmember cref="P:System.Windows.StartupEventArgs.Args" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.Windows.Shell.JumpTask.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>점프 목록에서 작업의 도구 설명에 표시되는 텍스트를 가져오거나 설정합니다.</summary>
        <value>작업의 도구 설명에 표시되는 텍스트입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 선언 하는 방법을 보여 줍니다는 <xref:System.Windows.Shell.JumpTask> 태그에서입니다. 합니다 <xref:System.Windows.Shell.JumpTask> 라는 텍스트 파일을 엽니다 `readme.txt` 메모장 애플리케이션에서입니다.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 다음 예제에서는 구성 방법을 보여 줍니다는 <xref:System.Windows.Shell.JumpTask> 코드에서입니다. <xref:System.Windows.Shell.JumpTask> 계산기 응용 프로그램을 엽니다.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IconResourceIndex">
      <MemberSignature Language="C#" Value="public int IconResourceIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IconResourceIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.IconResourceIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property IconResourceIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IconResourceIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IconResourceIndex : int with get, set" Usage="System.Windows.Shell.JumpTask.IconResourceIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>리소스에 포함된 아이콘의 0부터 시작하는 인덱스를 가져오거나 설정합니다.</summary>
        <value>아이콘의 0부터 시작하는 인덱스이거나, 아이콘이 사용되지 않는 경우 -1입니다. 기본값은 0입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하는 아이콘을 <xref:System.Windows.Shell.JumpTask> 네이티브 리소스로 사용할 수 있어야 합니다. 오프셋을 지정 하 여 사용할 지정할 여러 아이콘 DLL 또는 실행 파일에서 사용할 수 있는 경우는 <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> 속성입니다.  
  
 없음 아이콘 리소스를 지정 하거나 지정 된 아이콘을 찾을 수 없으면 표준 시스템 아이콘이 표시 됩니다. 아이콘 없음 표시 되도록 지정 하려면 설정의 <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> 속성을-1입니다.  
  
   
  
## Examples  
 다음 예제에서는 선언 하는 방법을 보여 줍니다는 <xref:System.Windows.Shell.JumpTask> 태그에서입니다. 합니다 <xref:System.Windows.Shell.JumpTask> 라는 텍스트 파일을 엽니다 `readme.txt` 메모장 애플리케이션에서입니다.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Shell.JumpTask.IconResourcePath" />
      </Docs>
    </Member>
    <Member MemberName="IconResourcePath">
      <MemberSignature Language="C#" Value="public string IconResourcePath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IconResourcePath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.IconResourcePath" />
      <MemberSignature Language="VB.NET" Value="Public Property IconResourcePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IconResourcePath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IconResourcePath : string with get, set" Usage="System.Windows.Shell.JumpTask.IconResourcePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>점프 목록에 표시할 아이콘이 들어 있는 리소스의 경로를 가져오거나 설정합니다.</summary>
        <value>아이콘이 포함된 리소스의 경로입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하는 아이콘을 <xref:System.Windows.Shell.JumpTask> 네이티브 리소스로 사용할 수 있어야 합니다. 오프셋을 지정 하 여 사용할 지정할 여러 아이콘 DLL 또는 실행 파일에서 사용할 수 있는 경우는 <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> 속성입니다.  
  
 없음 아이콘 리소스를 지정 하거나 지정 된 아이콘을 찾을 수 없으면 표준 시스템 아이콘이 표시 됩니다. 아이콘 없음 표시 되도록 지정 하려면 설정의 <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> 속성을-1입니다.  
  
   
  
## Examples  
 다음 예제에서는 선언 하는 방법을 보여 줍니다는 <xref:System.Windows.Shell.JumpTask> 태그에서입니다. 합니다 <xref:System.Windows.Shell.JumpTask> 라는 텍스트 파일을 엽니다 `readme.txt` 메모장 애플리케이션에서입니다.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 다음 예제에서는 구성 방법을 보여 줍니다는 <xref:System.Windows.Shell.JumpTask> 코드에서입니다. <xref:System.Windows.Shell.JumpTask> 계산기 응용 프로그램을 엽니다.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Shell.JumpTask.IconResourceIndex" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Shell.JumpTask.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>점프 목록의 작업에 표시되는 텍스트를 가져오거나 설정합니다.</summary>
        <value>점프 목록의 작업에 표시되는 텍스트입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 <xref:System.Windows.Shell.JumpTask.Title%2A> 에 대 한 속성을 설정 해야 합니다 <xref:System.Windows.Shell.JumpTask> 클릭할 수 있는 태스크로 점프 목록에 표시 합니다.  
  
 만들어 항목을 점프 목록에서 시각적으로 구분할 수 또는 <xref:System.Windows.Shell.JumpTask> 없는 <xref:System.Windows.Shell.JumpTask.Title%2A> 및 <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> 지정 합니다. 이 빈 <xref:System.Windows.Shell.JumpTask> 점프 목록에 가로 선으로 표시 됩니다. 이 경우 다른 속성을 설정할 수 있지만 영향을 주지는 없습니다.  
  
   
  
## Examples  
 다음 예제에서는 선언 하는 방법을 보여 줍니다는 <xref:System.Windows.Shell.JumpTask> 태그에서입니다. 합니다 <xref:System.Windows.Shell.JumpTask> 텍스트 파일 이름을 엽니다 `readme.txt` 메모장 애플리케이션에서 합니다.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 다음 예제에서는 구성 방법을 보여 줍니다는 <xref:System.Windows.Shell.JumpTask> 코드에서입니다. <xref:System.Windows.Shell.JumpTask> 계산기 응용 프로그램을 엽니다.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkingDirectory">
      <MemberSignature Language="C#" Value="public string WorkingDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WorkingDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.WorkingDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkingDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ WorkingDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WorkingDirectory : string with get, set" Usage="System.Windows.Shell.JumpTask.WorkingDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>시작 시 애플리케이션의 작업 디렉터리를 가져오거나 설정합니다.</summary>
        <value>시작 시의 애플리케이션 작업 디렉터리입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 선언 하는 방법을 보여 줍니다는 <xref:System.Windows.Shell.JumpTask> 태그에서입니다. 합니다 <xref:System.Windows.Shell.JumpTask> 라는 텍스트 파일을 엽니다 `readme.txt` 메모장 애플리케이션에서입니다.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>