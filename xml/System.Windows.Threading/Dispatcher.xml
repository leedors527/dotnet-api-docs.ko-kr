<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata><Meta Name="ms.openlocfilehash" Value="18dc89f39ea48d18d1f39bfc56029ea7661b1625" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57911579" /></Metadata><TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <TypeSignature Language="F#" Value="type Dispatcher = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>스레드에 대한 작업 항목 큐를 관리하는 서비스를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.Dispatcher> 특정 스레드에 대 한 작업 항목의 우선 순위가 지정 된 큐를 유지 합니다.  
  
 경우는 <xref:System.Windows.Threading.Dispatcher> 만들어집니다 스레드에서 유일한 되기 <xref:System.Windows.Threading.Dispatcher> 스레드를 사용 하 여 연결 될 수 있는 경우에를 <xref:System.Windows.Threading.Dispatcher> 종료 됩니다.  
  
 가져오려고 하는 경우는 <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> 현재 스레드에 대 한 및 <xref:System.Windows.Threading.Dispatcher> 스레드를 사용 하 여 연결 되지를 <xref:System.Windows.Threading.Dispatcher> 만들어집니다. A <xref:System.Windows.Threading.Dispatcher> 만들 때 만들어집니다는 <xref:System.Windows.Threading.DispatcherObject>합니다. 만드는 경우는 <xref:System.Windows.Threading.Dispatcher> 백그라운드 스레드에서 사용할 발송자 스레드를 종료 하기 전에 종료 해야 합니다.  
  
 경우는 <xref:System.Windows.Threading.Dispatcher> 종료는 다운을 시작할 수 없습니다.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], <xref:System.Windows.Threading.DispatcherObject> 만 액세스할 수는 <xref:System.Windows.Threading.Dispatcher> 연관 된 합니다.  예를 들어, 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> 연관 된 합니다 <xref:System.Windows.Threading.Dispatcher> 에 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 스레드.  액세스 하는 백그라운드 스레드를 위해를 <xref:System.Windows.Controls.ContentControl.Content%2A> 의 속성을 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다를 <xref:System.Windows.Threading.Dispatcher> 연관를 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 스레드.  사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.  작업의 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 하는 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 반환 된 상태 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.  
  
 모든에서 메서드의 <xref:System.Windows.Threading.Dispatcher>, 제외 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>는 자유 스레드이므로 합니다.  
  
 파생 된 개체 <xref:System.Windows.Threading.DispatcherObject> 스레드 선호도 있습니다.  
  
 파생 된 개체 <xref:System.Windows.Freezable> 는 자유 스레드는 고정 되어 있는 경우.  자세한 내용은 [Freezable 개체 개요](~/docs/framework/wpf/advanced/freezable-objects-overview.md)를 참조하세요.  
  
   
  
## Examples  
 다음 예제에 작업을 배치 하는 방법을 보여 줍니다는 <xref:System.Windows.Threading.Dispatcher>합니다.  이 예제의 전체 소스 코드를 보려면 [장기 실행 계산 샘플을 사용 하 여 단일 스레드 응용 프로그램](https://go.microsoft.com/fwlink/?LinkID=160038)합니다.  
  
 먼저, 인수를 받지 않는 대리자를 만듭니다.  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 다음으로, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 라고 합니다.  이 호출을 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 두 개의 매개 변수:로 설정 된 우선 순위 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, 및 대리자의 인스턴스를 통해 전달 된 콜백을 `NextPrimeDelegate`합니다.  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038">장기 실행 계산 샘플을 사용 하 여 단일 스레드 응용 프로그램</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 대리자를 비동기적으로 실행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.  예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.  콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.  사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.  작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 반환 된 <xref:System.Windows.Threading.DispatcherOperation> 있는 경우 대리자가 큐에서 이벤트 대리자와 상호 작용 하는 데 사용할 수 있습니다.  
  
 합니다 <xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.  
  
-   변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의 보류 중인 실행의 이벤트 큐에 있습니다.  
  
-   대리자를 이벤트 큐에서 제거합니다.  
  
-   반환할 대리자를 기다리는 중입니다.  
  
-   실행 후 대리자를 반환 하는 값을 가져오기  
  
 여러 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 동시 호출 <xref:System.Windows.Threading.DispatcherPriority>, 호출 된 순서 대로 실행 됩니다.  
  
 하는 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 반환 된 상태 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><paramref name="args" />에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
        <param name="args">주어진 메서드에 인수로 전달하는 개체의 배열입니다. <see langword="null" />일 수 있습니다.</param>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 만들어진 스레드에서 지정된 인수를 사용하여 지정된 대리자를 비동기적으로 실행합니다.</summary>
        <returns><see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.  
  
-   변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의 보류 중인 실행의 이벤트 큐에 있습니다.  
  
-   대리자를 이벤트 큐에서 제거합니다.  
  
-   반환할 대리자를 기다리는 중입니다.  
  
-   실행 후 대리자를 반환 하는 값을 가져오기  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다. 예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다. 콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된. 사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다. 작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 하는 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 반환 된 상태 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</param>
        <param name="method">인수가 없는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 대리자를 비동기적으로 실행합니다.</summary>
        <returns><see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 여러 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 동시 호출 <xref:System.Windows.Threading.DispatcherPriority>, 호출 된 순서 대로 실행 됩니다.  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 반환 된 <xref:System.Windows.Threading.DispatcherOperation> 있는 경우 대리자가 큐에서 이벤트 대리자와 상호 작용 하는 데 사용할 수 있습니다.  
  
 합니다 <xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.  
  
-   변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의 보류 중인 실행의 이벤트 큐에 있습니다.  
  
-   대리자를 이벤트 큐에서 제거합니다.  
  
-   반환할 대리자를 기다리는 중입니다.  
  
-   실행 후 대리자를 반환 하는 값을 가져오기  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.  예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.  콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.  사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.  작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 하는 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 반환 된 상태 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.  
  
   
  
## Examples  
 다음 예제에 작업을 배치 하는 방법을 보여 줍니다는 <xref:System.Windows.Threading.Dispatcher>합니다.  이 예제의 전체 소스 코드를 보려면 [장기 실행 계산 샘플을 사용 하 여 단일 스레드 응용 프로그램](https://go.microsoft.com/fwlink/?LinkID=160038)합니다.  
  
 먼저, 인수를 받지 않는 대리자를 만듭니다.  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 다음으로, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 라고 합니다.  때문에 모든 <xref:System.Windows.Threading.DispatcherObject> 속성이 반환 하는 <xref:System.Windows.Threading.Dispatcher> 원하는와 연결 됩니다 <xref:System.Windows.Threading.Dispatcher> 쿼리하여 가져오고를 <xref:System.Windows.Threading.DispatcherObject>,이 경우에 <xref:System.Windows.Controls.Button> 라는 `startStopButton`합니다.   에 대 한 호출 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> 두 개의 매개 변수:로 설정 된 우선 순위 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, 및 대리자의 인스턴스를 통해 전달 된 콜백을 `NextPrimeDelegate`합니다.  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />은 유효한 <see cref="T:System.Windows.Threading.DispatcherPriority" />이 아닙니다.</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038">장기 실행 계산 샘플을 사용 하 여 단일 스레드 응용 프로그램</related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><paramref name="args" />에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</param>
        <param name="args">주어진 메서드에 인수로 전달하는 개체의 배열입니다. <see langword="null" />일 수 있습니다.</param>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 만들어진 스레드에서 지정된 우선 순위에 지정된 인수를 사용하여 지정된 대리자를 비동기적으로 실행합니다.</summary>
        <returns><see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.  
  
-   변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의 보류 중인 실행의 이벤트 큐에 있습니다.  
  
-   대리자를 이벤트 큐에서 제거합니다.  
  
-   반환할 대리자를 기다리는 중입니다.  
  
-   실행 후 대리자를 반환 하는 값을 가져오기  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다. 예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다. 콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된. 사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다. 작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 하는 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 반환 된 상태 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</param>
        <param name="method">인수를 하나 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
        <param name="arg">지정된 메서드에 인수로 전달하는 개체입니다.</param>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 비동기적으로 실행합니다.</summary>
        <returns><see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Arg` 수 `null` 경우 인수가 필요 하지 않습니다.  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 반환 된 <xref:System.Windows.Threading.DispatcherOperation> 있는 경우 대리자가 큐에서 이벤트 대리자와 상호 작용 하는 데 사용할 수 있습니다.  
  
 합니다 <xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.  
  
-   변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의 보류 중인 실행의 이벤트 큐에 있습니다.  
  
-   대리자를 이벤트 큐에서 제거합니다.  
  
-   반환할 대리자를 기다리는 중입니다.  
  
-   실행 후 대리자를 반환 하는 값을 가져오기  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.  예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.  콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.  사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.  작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 여러 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 동시 호출 <xref:System.Windows.Threading.DispatcherPriority>, 호출 된 순서 대로 실행 됩니다.  
  
 하는 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 반환 된 상태 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.  
  
   
  
## Examples  
 다음 예제에 작업을 배치 하는 방법을 보여 줍니다는 <xref:System.Windows.Threading.Dispatcher>합니다.  
  
 먼저 하나의 인수 즉,이 경우 문자열에서에서 허용 하는 대리자를 만듭니다.  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 다음으로, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> 라고 합니다.  때문에 모든 <xref:System.Windows.Threading.DispatcherObject> 속성이 반환 하는 <xref:System.Windows.Threading.Dispatcher> 원하는와 연결 됩니다 <xref:System.Windows.Threading.Dispatcher> 쿼리하여 가져오고를 <xref:System.Windows.Threading.DispatcherObject>,이 경우에 <xref:System.Windows.Controls.Grid> 라는 `tomorrowsWeather`합니다. 에 대 한 호출 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> 3 개의 매개 변수:로 설정 된 우선 순위 <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; 대리자의 인스턴스를 통해 전달 된 콜백 `OneArgDelegate`; 및 명명 된 문자열 `weather`, 콜백에 대 한 인수는 합니다.  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />은 유효한 <see cref="T:System.Windows.Threading.DispatcherPriority" />이 아닙니다.</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038">장기 실행 계산 샘플을 사용 하 여 단일 스레드 응용 프로그램</related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</param>
        <param name="method">인수를 여러 개 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
        <param name="arg">지정된 메서드에 인수로 전달하는 개체입니다.</param>
        <param name="args">지정된 메서드에 인수로 전달하는 개체의 배열입니다.</param>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수 배열을 사용하여 지정된 우선 순위에 있는 지정된 대리자를 비동기적으로 실행합니다.</summary>
        <returns><see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />가 호출된 후 즉시 반환되며, <see cref="T:System.Windows.Threading.Dispatcher" /> 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `arg` 매개 변수 수 `null` 경우 인수가 필요 하지 않습니다.  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 반환 된 <xref:System.Windows.Threading.DispatcherOperation> 있는 경우 대리자가 큐에서 이벤트 대리자와 상호 작용 하는 데 사용할 수 있습니다.  
  
 합니다 <xref:System.Windows.Threading.DispatcherOperation> 에서 반환 된 개체 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 와 같은 지정된 된 대리자와 상호 작용 하는 여러 가지 방법으로 사용할 수 있습니다.  
  
-   변경 된 <xref:System.Windows.Threading.DispatcherPriority> 대리자의 보류 중인 실행의 이벤트 큐에 있습니다.  
  
-   대리자를 이벤트 큐에서 제거합니다.  
  
-   반환할 대리자를 기다리는 중입니다.  
  
-   실행 후 대리자를 반환 하는 값을 가져오기  
  
 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 비동기적입니다. 따라서 제어가 반환 즉시 호출 하는 개체를 호출한 후 됩니다.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.  예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.  콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.  사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.  작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 여러 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 동시 호출 <xref:System.Windows.Threading.DispatcherPriority>, 호출 된 순서 대로 실행 됩니다.  
  
 하는 경우 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 라고 하는 <xref:System.Windows.Threading.Dispatcher> 는 종료 반환 된 상태 속성 <xref:System.Windows.Threading.DispatcherOperation> 로 설정 된 <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="T:System.Windows.Threading.DispatcherPriority" />가 올바른 속성이 아닌 경우</exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038">장기 실행 계산 샘플을 사용 하 여 단일 스레드 응용 프로그램</related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.BeginInvokeShutdown : System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.BeginInvokeShutdown priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">Dispatcher 종료를 시작하는 우선 순위입니다.</param>
        <summary>비동기적으로 <see cref="T:System.Windows.Threading.Dispatcher" /> 종료를 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> 무제한 UI 권한을 요청 합니다.  
  
 경우는 <xref:System.Windows.Threading.Dispatcher> 종료를 시작 합니다 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트가 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 된 `true`.  
  
 <xref:System.Windows.Threading.Dispatcher> 종료 되지 않는 완전히 이벤트 큐 해제 될 때까지 합니다.  
  
 Dispatcher 종료를 완료 하는 경우를 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트가 발생 하며 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성 `true`.  
  
 종료 프로세스 시작 되 면 모든 보류 중인 작업 항목이 큐에서 중단 됩니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">발송자를 종료 합니다.  연관 된 열거형:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcher.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>호출 스레드가 이 <see cref="T:System.Windows.Threading.Dispatcher" />에 연결된 스레드인지 여부를 확인합니다.</summary>
        <returns>호출 스레드가 이 <see cref="T:System.Windows.Threading.Dispatcher" />에 연결된 스레드이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 만 <xref:System.Windows.Threading.Dispatcher> 는 <xref:System.Windows.Threading.DispatcherObject> 만들어집니다 개체에 액세스할 수 있습니다.  사용 하 여 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 다른 스레드에서 개체를 액세스할 수 있습니다.  
  
 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 모든 스레드에서 호출할 수 있습니다.  
  
 간의 차이 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 및 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 됩니다 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 호출 스레드에 있는지에 대 한 액세스를 나타내는 부울 값을 반환 합니다 <xref:System.Windows.Threading.Dispatcher> 및 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 예외를 throw 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 스레드가에 대 한 액세스에 있는지 확인 하는 <xref:System.Windows.Controls.Button>합니다.  <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 메서드를 <xref:System.Windows.Threading.Dispatcher> 연관는 <xref:System.Windows.Controls.Button> 스레드가 액세스할 수 있는지 확인 하기 위해 호출 됩니다.  호출 스레드를 액세스할 수 있는 경우는 <xref:System.Windows.Threading.Dispatcher>, <xref:System.Windows.Controls.Button> 의 멤버에 액세스 하 여 업데이트 됩니다는 <xref:System.Windows.Controls.Button>이 고, 그렇지 않으면 허용 되는 대리자를를 <xref:System.Windows.Controls.Button> 인수로 배치를 <xref:System.Windows.Threading.Dispatcher>합니다.  합니다 <xref:System.Windows.Threading.Dispatcher> 업데이트 작업을 위임 하는 <xref:System.Windows.Controls.Button>합니다.  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스레드에 연결된 Dispatcher가 없는 경우 현재 실행 중인 스레드에 대한 <see cref="T:System.Windows.Threading.Dispatcher" />를 가져와서 새 <see cref="T:System.Windows.Threading.Dispatcher" />를 만듭니다.</summary>
        <value>현재 스레드에 연결된 Dispatcher입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Threading.Dispatcher> 현재 스레드와 연결 되지 않은 새 <xref:System.Windows.Threading.Dispatcher> 만들어집니다.  이것은 <xref:System.Windows.Threading.Dispatcher.FromThread%2A> 메서드의 경우가 아닙니다.  <xref:System.Windows.Threading.Dispatcher.FromThread%2A> 돌아갑니다 `null` 가 없는 경우 지정 된 스레드와 연결 된 디스패처입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberSignature Language="F#" Value="member this.DisableProcessing : unit -&gt; System.Windows.Threading.DispatcherProcessingDisabled" Usage="dispatcher.DisableProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" /> 큐 프로세스를 비활성화합니다.</summary>
        <returns>Dispatcher 처리를 다시 활성화하는 데 사용되는 구조체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 디스패처 처리를 비활성화는 관련 되지 않은 재입력 가능성을 제거 하기 위한 고급 메서드입니다.  
  
 처리를 사용 하지 않도록 설정의 효과 다음과 같습니다.  
  
-   CLR 잠금 메시지를 내부적으로 펌프 되지 됩니다.  
  
-   <xref:System.Windows.Threading.DispatcherFrame> 개체는 푸시할 수 없습니다.  
  
-   메시지 처리를 허용 되지 않습니다.  
  
 합니다 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 구조체입니다 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 디스패처 처리를 다시 사용 하도록 호출 될 때 반환을 사용할 수 있습니다.  호출 <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> 에 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 구조에는 다시 처리할 수 있도록 합니다.  
  
 <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 스레드에서 호출할 수 있습니다는 <xref:System.Windows.Threading.Dispatcher> 연관 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 디스패처 처리를 사용 하지 않도록 설정 하 고 다시 디스패처 처리를 사용 하도록 설정 하는 방법을 보여 줍니다.  <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 호출 되는 **를 사용 하 여** 문입니다.  <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> 반환를 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 하는 경우 삭제 된 개체와 사용 되는 구조는 **를 사용 하 여** 완료 차단 합니다.  때 <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> 라고 하는 <xref:System.Windows.Threading.DispatcherProcessingDisabled> 구조 디스패처 처리를 다시 사용할 수 있습니다.  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberSignature Language="F#" Value="static member ExitAllFrames : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ExitAllFrames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>중첩된 프레임을 포함하여 모든 프레임을 종료하도록 요청합니다.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">이 메서드를 호출 합니다. 연관 된 열거형:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberSignature Language="F#" Value="static member FromThread : System.Threading.Thread -&gt; System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.FromThread thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread"><see cref="T:System.Windows.Threading.Dispatcher" />를 가져올 스레드입니다.</param>
        <summary>지정된 스레드에 대한 <see cref="T:System.Windows.Threading.Dispatcher" />를 가져옵니다.</summary>
        <returns><paramref name="thread" />에 대한 Dispatcher입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 디스패처를 지정 된 스레드를 사용할 수 없는 경우 `null` 반환 됩니다.  
  
 <xref:System.Windows.Threading.Dispatcher.FromThread%2A> 만들어지지는지 않습니다를 <xref:System.Windows.Threading.Dispatcher> 되지 않은 스레드에서 <xref:System.Windows.Threading.Dispatcher>합니다.   새 <xref:System.Windows.Threading.Dispatcher> 이미 있지 않은 스레드에서 만들어진를 <xref:System.Windows.Threading.Dispatcher> 가져오려고 시도 하는 경우를 <xref:System.Windows.Threading.Dispatcher> 사용 하 여는 <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownFinished : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 완전히 종료되었는지 여부를 확인합니다.</summary>
        <value>Dispatcher가 완전히 종료되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Threading.Dispatcher> 종료를 시작 합니다 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트가 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 된 `true`.  
  
 <xref:System.Windows.Threading.Dispatcher> 이벤트 큐 해제 될 때까지 완전히 종료 되지 않습니다.  
  
 Dispatcher 종료를 완료 하는 경우를 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트가 발생 하며 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성 `true`.  
  
 종료 프로세스 시작 되 면 모든 보류 중인 작업 항목이 큐에서 중단 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownStarted : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 종료되었는지 여부를 확인합니다.</summary>
        <value><see cref="T:System.Windows.Threading.Dispatcher" />가 종료되기 시작했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Threading.Dispatcher> 종료를 시작 합니다 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트가 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 된 `true`.  
  
 <xref:System.Windows.Threading.Dispatcher> 종료 되지 않는 완전히 이벤트 큐 해제 될 때까지 합니다.  
  
 Dispatcher 종료를 완료 하는 경우를 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트가 발생 하며 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성 `true`.  
  
 종료 프로세스 시작 되 면 모든 보류 중인 작업 항목이 큐에서 중단 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hooks : System.Windows.Threading.DispatcherHooks" Usage="System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />에 대한 추가 이벤트 정보를 제공하는 후크 컬렉션을 가져옵니다.</summary>
        <value>이 <see cref="T:System.Windows.Threading.Dispatcher" />에 연결된 후크입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherHooks> 클래스에 대 한 추가 이벤트 정보를 제공 합니다 <xref:System.Windows.Threading.Dispatcher>, 경우와 같이 <xref:System.Windows.Threading.Dispatcher> 활성 상태가 아닙니다 작업이 완료 된 경우 또는 합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">이 속성을 가져오는 합니다.  연관 된 열거형:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 대리자를 동기적으로 실행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.  예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.  콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.  사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.  작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 대리자를 배치를 <xref:System.Windows.Threading.Dispatcher> 언제 <xref:System.Windows.Threading.DispatcherPriority.Normal> 사용 하 여 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>입니다.  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action -&gt; unit" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
        <summary><see cref="T:System.Action" />가 연결된 스레드에서 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</param>
        <summary><see cref="T:System.Action" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><paramref name="args" />에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
        <param name="args">주어진 메서드에 인수로 전달하는 개체의 배열입니다. <see langword="null" />일 수 있습니다.</param>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 대리자를 동기적으로 실행합니다.</summary>
        <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다. 예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다. 콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된. 사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다. 작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</param>
        <param name="method">인수가 없는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</summary>
        <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.  예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.  콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.  사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.  작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 대리자를 배치를 <xref:System.Windows.Threading.Dispatcher> 언제 <xref:System.Windows.Threading.DispatcherPriority.Normal> 사용 하 여 <xref:System.Windows.Threading.Dispatcher.Invoke%2A>입니다.  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="priority" />가 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />가 올바른 속성이 아닌 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</param>
        <param name="cancellationToken">동작을 취소할지 여부를 나타내는 개체입니다.</param>
        <summary><see cref="T:System.Action" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><paramref name="args" />에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
        <param name="timeout">작업이 완료될 때까지 대기하는 최대 시간입니다.</param>
        <param name="args">주어진 메서드에 인수로 전달하는 개체의 배열입니다. <see langword="null" />일 수 있습니다.</param>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위의 지정된 기간 내에서 지정된 대리자를 동기적으로 실행합니다.</summary>
        <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다. 예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다. 콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된. 사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다. 작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><paramref name="args" />에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</param>
        <param name="args">주어진 메서드에 인수로 전달하는 개체의 배열입니다. <see langword="null" />일 수 있습니다.</param>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</summary>
        <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다. 예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다. 콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된. 사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다. 작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</param>
        <param name="method">인수를 하나 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
        <param name="arg">지정된 메서드에 인수로 전달하는 개체입니다.</param>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</summary>
        <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Arg` 수 `null` 인수가 필요 하지 않은 경우  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.  예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.  콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.  사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.  작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="priority" />가 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />가 올바른 속성이 아닌 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</param>
        <param name="timeout">작업이 완료될 때까지 대기하는 최대 시간입니다.</param>
        <param name="method">인수가 없는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 만들어진 스레드에서 지정된 제한 시간 값을 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</summary>
        <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.  예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.  콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.  사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.  작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</param>
        <param name="cancellationToken">동작을 취소할지 여부를 나타내는 개체입니다.</param>
        <param name="timeout">작업이 시작될 때까지 대기하는 최소 시간입니다.</param>
        <summary><see cref="T:System.Action" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><paramref name="args" />에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
        <param name="timeout">작업이 완료될 때까지 대기하는 최대 시간입니다.</param>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</param>
        <param name="args">주어진 메서드에 인수로 전달하는 개체의 배열입니다. <see langword="null" />일 수 있습니다.</param>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위의 지정된 기간 내에서 지정된 대리자를 동기적으로 실행합니다.</summary>
        <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다. 예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다. 콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된. 사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다. <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다. 작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</param>
        <param name="method">인수를 여러 개 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
        <param name="arg">지정된 메서드에 인수로 전달하는 개체입니다.</param>
        <param name="args">주어진 메서드에 인수로 전달하는 개체의 배열입니다.</param>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</summary>
        <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Arg` 수 `null` 인수가 필요 하지 않은 경우  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.  예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.  콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.  사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.  작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="priority" />가 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />가 올바른 속성이 아닌 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</param>
        <param name="timeout">작업이 완료될 때까지 대기하는 최대 시간입니다.</param>
        <param name="method">인수를 여러 개 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
        <param name="arg">지정된 메서드에 인수로 전달하는 개체입니다. 인수가 필요하지 않으면 <see langword="null" />일 수 있습니다.</param>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</summary>
        <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Arg` 수 `null` 인수가 필요 하지 않은 경우  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.  예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.  콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.  사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.  작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="priority" />가 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />가 올바른 속성이 아닌 경우</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐의 다른 보류 중인 작업에 상대적인 우선 순위로, 이 순위에 따라 지정된 메서드가 호출됩니다.</param>
        <param name="timeout">작업이 완료될 때까지 대기하는 최대 시간입니다.</param>
        <param name="method">인수를 여러 개 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
        <param name="arg">지정된 메서드에 인수로 전달하는 개체입니다.</param>
        <param name="args">지정된 메서드에 인수로 전달하는 개체의 배열입니다.</param>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</summary>
        <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Arg` 수 `null` 인수가 필요 하지 않은 경우.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에서 만든 스레드만 <xref:System.Windows.Threading.DispatcherObject> 해당 개체에 액세스할 수 있습니다.  예를 들어 주 UI 스레드에서 분리 된 백그라운드 스레드에서의 콘텐츠를 업데이트할 수 없습니다는 <xref:System.Windows.Controls.Button> UI 스레드에서 만들어진 합니다.  콘텐츠 속성을 액세스 하는 백그라운드 스레드를 위해 합니다 <xref:System.Windows.Controls.Button>, 백그라운드 스레드 작업을 위임 해야 합니다는 <xref:System.Windows.Threading.Dispatcher> UI 스레드와 연결 된.  사용 하 여 이렇게 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>합니다.  <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 및 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 는 비동기적입니다.  작업의 이벤트 큐에 추가 되는 <xref:System.Windows.Threading.Dispatcher> 지정 된 <xref:System.Windows.Threading.DispatcherPriority>합니다.  
  
 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 동기식 작업입니다. 따라서 컨트롤 콜백이 반환 될 때까지 호출 하는 개체를 반환 하지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="priority" />가 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />은 유효한 <see cref="T:System.Windows.Threading.DispatcherPriority" />이 아닙니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="method" />가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; -&gt; 'Result" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">지정된 대리자의 반환 값 형식입니다.</typeparam>
        <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
        <summary><see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환한 값 `callback`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">지정된 대리자의 반환 값 형식입니다.</typeparam>
        <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</param>
        <summary><see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환한 값 `callback`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">지정된 대리자의 반환 값 형식입니다.</typeparam>
        <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</param>
        <param name="cancellationToken">작업을 취소할지 여부를 나타내는 개체입니다.</param>
        <summary><see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환한 값 `callback`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">지정된 대리자의 반환 값 형식입니다.</typeparam>
        <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</param>
        <param name="cancellationToken">작업을 취소할지 여부를 나타내는 개체입니다.</param>
        <param name="timeout">작업이 시작될 때까지 대기하는 최소 시간입니다.</param>
        <summary><see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환한 값 `callback`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 대리자를 비동기적으로 실행합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
        <summary><see cref="T:System.Action" />가 연결된 스레드에서 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</summary>
        <returns><see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</param>
        <summary><see cref="T:System.Action" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</summary>
        <returns><see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</param>
        <param name="cancellationToken">동작을 취소할지 여부를 나타내는 개체입니다.</param>
        <summary><see cref="T:System.Action" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</summary>
        <returns><see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">지정된 대리자의 반환 값 형식입니다.</typeparam>
        <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
        <summary><see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</summary>
        <returns><see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">지정된 대리자의 반환 값 형식입니다.</typeparam>
        <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</param>
        <summary><see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</summary>
        <returns><see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">지정된 대리자의 반환 값 형식입니다.</typeparam>
        <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
        <param name="priority"><see cref="T:System.Windows.Threading.Dispatcher" />에서 보류 중인 다른 작업에 맞춰 어떤 순서로 지정된 콜백을 호출할지를 결정하는 우선 순위입니다.</param>
        <param name="cancellationToken">작업을 취소할지 여부를 나타내는 개체입니다.</param>
        <summary><see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</summary>
        <returns><see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberSignature Language="F#" Value="member this.InvokeShutdown : unit -&gt; unit" Usage="dispatcher.InvokeShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />의 종료 프로세스를 동기적으로 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> 무제한 UI 권한을 요청 합니다.  
  
 경우는 <xref:System.Windows.Threading.Dispatcher> 종료를 시작 합니다 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트가 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 된 `true`.  
  
 <xref:System.Windows.Threading.Dispatcher> 종료 되지 않는 완전히 이벤트 큐 해제 될 때까지 합니다.  
  
 Dispatcher 종료를 완료 하는 경우를 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트가 발생 하며 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성 `true`.  
  
 종료 프로세스 시작 되 면 모든 보류 중인 작업 항목이 큐에서 중단 됩니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">발송자를 종료 합니다.  연관 된 열거형:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberSignature Language="F#" Value="static member PushFrame : System.Windows.Threading.DispatcherFrame -&gt; unit" Usage="System.Windows.Threading.Dispatcher.PushFrame frame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame">처리할 Dispatcher의 프레임입니다.</param>
        <summary>실행 루프로 들어갑니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherFrame> 보류 중인 작업 항목을 처리 하는 루프를 나타냅니다.  
  
 디스패처 루프에서 작업 항목 큐를 처리합니다.  루프는 프레임으로 참조 됩니다.  초기 루프는 일반적으로 시작 된 응용 프로그램에서 호출 하 여 <xref:System.Windows.Threading.Dispatcher.Run%2A>입니다.  
  
 <xref:System.Windows.Threading.Dispatcher.PushFrame%2A> 매개 변수가 나타내는 루프로 `frame`합니다.  루프의 각 반복에서는 <xref:System.Windows.Threading.Dispatcher> 확인 합니다 <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> 속성을는 <xref:System.Windows.Threading.DispatcherFrame> 중지할지 또는 루프를 계속할지 여부를 결정 하는 클래스.  
  
 <xref:System.Windows.Threading.DispatcherFrame> 허용 합니다 <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> 속성을 명시적으로 설정 해야 하며 준수를 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 속성에는 <xref:System.Windows.Threading.Dispatcher>.  즉 합니다 <xref:System.Windows.Threading.Dispatcher> 종료를 시작, 기본값을 사용 하는 프레임 <xref:System.Windows.Threading.DispatcherFrame> 구현 종료 하려면 중첩 된 모든 프레임을 사용 하도록 설정 하는 종료 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Threading.DispatcherFrame> 와 비슷한 결과 달성 하는 [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> 메서드.  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="frame" />가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />가 <see langword="true" />인 경우  
  
또는 
 <paramref name="frame" />이 다른 <see cref="T:System.Windows.Threading.Dispatcher" />에서 실행 중인 경우  
  
또는 
Dispatcher 처리가 비활성화된 경우</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">에 실행 프레임을 푸시합니다.  연관 된 열거형:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />의 이벤트 큐에서 기본 실행 프레임을 푸시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.Dispatcher> 루프의 이벤트 큐를 처리 합니다.  루프는 프레임으로 참조 됩니다.  초기 루프는 일반적으로 시작 된 응용 프로그램에서 호출 하 여 <xref:System.Windows.Threading.Dispatcher.Run%2A>입니다.  
  
 기본 실행 프레임까지 계속 됩니다는 <xref:System.Windows.Threading.Dispatcher> 종료 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberSignature Language="F#" Value="member this.ShutdownFinished : EventHandler " Usage="member this.ShutdownFinished : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 종료되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때의 종료 프로세스를 <xref:System.Windows.Threading.Dispatcher> 시작 되는 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트가 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 된 `true`합니다.  
  
 <xref:System.Windows.Threading.Dispatcher> 이벤트 큐 해제 될 때까지 완전히 종료 되지 않습니다.  
  
 Dispatcher 종료를 완료 하는 경우를 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트가 발생 하며 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성 `true`.  
  
 종료 프로세스 시작 되 면 모든 보류 중인 작업 항목이 큐에서 중단 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberSignature Language="F#" Value="member this.ShutdownStarted : EventHandler " Usage="member this.ShutdownStarted : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Threading.Dispatcher" />가 종료되기 시작하면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때의 종료 프로세스를 <xref:System.Windows.Threading.Dispatcher> 시작 되는 <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> 이벤트가 발생 및 <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> 로 설정 된 `true`합니다.  
  
 <xref:System.Windows.Threading.Dispatcher> 이벤트 큐 해제 될 때까지 완전히 종료 되지 않습니다.  
  
 Dispatcher 종료를 완료 하는 경우를 <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> 이벤트가 발생 하며 <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> 속성 `true`.  
  
 종료 프로세스 시작 되 면 모든 보류 중인 작업 항목이 큐에서 중단 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Thread : System.Threading.Thread" Usage="System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드를 가져옵니다.</summary>
        <value>스레드입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 또는 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />를 통해 대리자를 실행하는 동안 스레드 예외가 throw되고 catch되지 않으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트는의 방식으로 대리자를 실행 하는 동안 throw 된 예외가 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 포착 되지 않으면.  
  
 처리기를 표시할 수 예외를 처리 하는 대로 호출 되는 내부 예외 처리기 것을 방지할.  
  
 이 이벤트에 대 한 이벤트 처리기는 발생 하는 모든 보조 예외 만들기를 방지 하 고 catch 하려면 신중 하 게 작성 되어야 합니다. 메모리를 할당 하거나 리소스 집약적 작업 처리기에서 수행 하지 않도록 하는 것이 좋습니다.  
  
 합니다 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 이벤트 발생 시 키 지 하는 방법을 제공 합니다 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 이벤트입니다.  합니다 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 이벤트가 먼저 발생 경우 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> 에 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> 로 설정 되어 `false`, <xref:System.Windows.Threading.Dispatcher.UnhandledException> 이벤트 발생 하지 것입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberSignature Language="F#" Value="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " Usage="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>필터 단계에서 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 또는 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />를 통해 대리자를 실행하는 동안 스레드 예외가 throw되고 catch되지 않으면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 방식으로 대리자를 실행 하는 동안 발생 하는 예외에 대 한 필터 단계 중에이 이벤트가 <xref:System.Windows.Threading.Dispatcher.Invoke%2A> 또는 <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 고 포착 되지 않으면.  
  
 호출 스택 (첫째 예외)이이 지점에서 스택이 아닌 경우  
  
 이 이벤트에 대 한 이벤트 처리기는 발생 하는 모든 보조 예외 만들기를 방지 하 고 catch 하려면 신중 하 게 작성 되어야 합니다.  메모리를 할당 하거나 리소스 집약적 작업 처리기에서 수행 하지 않도록 하는 것이 좋습니다.  
  
 합니다 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 이벤트 발생 시 키 지 하는 방법을 제공 합니다 <xref:System.Windows.Threading.Dispatcher.UnhandledException> 이벤트입니다.  합니다 <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> 이벤트가 먼저 발생 경우 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> 에 <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> 로 설정 되어 `false`, <xref:System.Windows.Threading.Dispatcher.UnhandledException> 이벤트 발생 하지 것입니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">에 더하거나이 이벤트에 대 한 처리기를 제거 합니다.  연관 된 열거형:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="static member ValidatePriority : System.Windows.Threading.DispatcherPriority * string -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ValidatePriority (priority, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority">확인할 우선 순위입니다.</param>
        <param name="parameterName">우선 순위가 잘못된 경우 발생하는 예외에서 반환되는 문자열입니다.</param>
        <summary>지정된 <see cref="T:System.Windows.Threading.DispatcherPriority" />가 유효한 우선 순위인지 여부를 확인합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />은 유효한 <see cref="T:System.Windows.Threading.DispatcherPriority" />이 아닙니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcher.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>호출 스레드가 이 <see cref="T:System.Windows.Threading.Dispatcher" />에 액세스할 수 있는지 여부를 확인합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스레드만 합니다 <xref:System.Windows.Threading.Dispatcher> 만들어집니다에 액세스할 수는 <xref:System.Windows.Threading.Dispatcher>합니다.  
  
 이 메서드는 공용입니다. 따라서 모든 스레드 수 확인 권한을 있는지 확인 합니다 <xref:System.Windows.Threading.Dispatcher>합니다.  
  
 간의 차이 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 및 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 됩니다 <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> 호출 스레드를 권한이 없는 경우 부울 값을 반환 합니다 <xref:System.Windows.Threading.Dispatcher> 및 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 예외를 throw 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 스레드가 스레드에 액세스할 수 있는지 여부를 결정 하는 <xref:System.Windows.Controls.Button> 만들어진 합니다.  로 캐스팅 되는 인수로 서 개체를 사용 하는 메서드를 <xref:System.Windows.Controls.Button>입니다.  <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> 메서드를 <xref:System.Windows.Threading.Dispatcher> 의 <xref:System.Windows.Controls.Button> 스레드가 액세스할 수 있는지 확인 하기 위해 호출 됩니다.  
  
 호출 스레드를 액세스할 수 있는 경우는 <xref:System.Windows.Threading.Dispatcher>, <xref:System.Windows.Controls.Button> 만의 멤버에 액세스 하 여 업데이트 되는 <xref:System.Windows.Controls.Button>합니다.  
  
 호출 스레드에서 액세스 되지 않은 경우는 <xref:System.InvalidOperationException> throw 됩니다.  이 예제에서는 예외를 catch 하 고 허용 되는 대리자를 푸시를 <xref:System.Windows.Controls.Button> 인수로는 <xref:System.Windows.Threading.Dispatcher> 의 <xref:System.Windows.Controls.Button>합니다.  이 <xref:System.Windows.Threading.Dispatcher> 는 업데이트 작업 수행을 <xref:System.Windows.Controls.Button>입니다.  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">호출 스레드에서 이 <see cref="T:System.Windows.Threading.Dispatcher" />에 액세스할 수 없는 경우</exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>현재 디스패처에 비동기적으로 제어를 다시 제공하여 다른 이벤트를 처리할 수 있는 기회를 디스패처에 제공하는 awaitable 개체를 만듭니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 디스패처에 비동기적으로 제어를 다시 제공하여 다른 이벤트를 처리할 수 있는 기회를 디스패처에 제공하는 awaitable 개체를 만듭니다.</summary>
        <returns>현재 디스패처에 제어를 비동기적으로 다시 제공하여 디스패처가 다른 이벤트를 처리할 수 있도록 기회를 제공하는 awaitable 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 다른 이벤트를 처리할 같은 다른 작업을 수행할 수 있도록 현재 디스패처에 실행 제어가 일시적으로 해제할 수 있는 방법을 제공 합니다. 사용 된 `await`, 또는 `Await` Visual Basic의 경우 현재 디스패처에 제어를 반환 하는 반환 값에 연산자. 경우에이 메서드를 사용 하 여 앱을 앱에는 많은 UI 스레드에서 작업을 수행 하는 동안 이벤트를 처리 하는 데 수 있도록 하려면. 예를 들어, 컨트롤을 업데이트 하는 장기 실행 루프에서이 메서드를 사용할 수 있습니다.  
  
 이 메서드는 호출에 해당 하는 <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> 메서드와 전달 <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="static member Yield : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="priority">연속 예약할 우선 순위입니다.</param>
        <summary>현재 디스패처에 비동기적으로 제어를 다시 제공하여 다른 이벤트를 처리할 수 있는 기회를 디스패처에 제공하는 awaitable 개체를 만듭니다.  이 메서드의 결과를 기다리는 코드에 제어를 반환할 때 발생하는 작업은 지정된 우선 순위를 사용하여 예약됩니다.</summary>
        <returns>현재 디스패처에 제어를 비동기적으로 다시 제공하여 디스패처가 다른 이벤트를 처리할 수 있도록 기회를 제공하는 awaitable 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 다른 이벤트를 처리할 같은 다른 작업을 수행할 수 있도록 현재 디스패처에 실행 제어가 일시적으로 해제할 수 있는 방법을 제공 합니다. 사용 된 `await`, 또는 `Await` Visual Basic의 경우 현재 디스패처에 제어를 반환 하는 반환 값에 연산자. 경우에이 메서드를 사용 하 여 앱을 앱에는 많은 UI 스레드에서 작업을 수행 하는 동안 이벤트를 처리 하는 데 수 있도록 하려면. 예를 들어, 컨트롤을 업데이트 하는 장기 실행 루프에서이 메서드를 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>