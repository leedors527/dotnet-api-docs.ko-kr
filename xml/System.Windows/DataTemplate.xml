<Type Name="DataTemplate" FullName="System.Windows.DataTemplate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e1be32bee3ca5612f323121520537a6e04cc0a03" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56373380" /></Metadata><TypeSignature Language="C#" Value="public class DataTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DataTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplate&#xA;Inherits FrameworkTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplate : System::Windows::FrameworkTemplate" />
  <TypeSignature Language="F#" Value="type DataTemplate = class&#xA;    inherit FrameworkTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("DataTemplateKey")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>데이터 개체의 표시 구조에 대해 설명합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할를 <xref:System.Windows.DataTemplate> 데이터 개체의 시각화를 지정 합니다. <xref:System.Windows.DataTemplate> 개체는 바인딩하는 경우에 특히 유용 프로그램 <xref:System.Windows.Controls.ItemsControl> 와 같은 <xref:System.Windows.Controls.ListBox> 전체 컬렉션에. 특정 명령 없이 <xref:System.Windows.Controls.ListBox> 컬렉션에서 개체의 문자열 표현을 표시 합니다. 이 경우 사용할 수 있습니다는 <xref:System.Windows.DataTemplate> 데이터 개체의 모양을 정의할 수 있습니다. 내용의 프로그램 <xref:System.Windows.DataTemplate> 데이터 개체의 시각적 구조가 됩니다.  
  
 자세한 내용은 참조 하세요. [데이터 템플릿 개요](~/docs/framework/wpf/data/data-templating-overview.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 만드는 방법을 보여 줍니다는 <xref:System.Windows.DataTemplate> 인라인 합니다. 합니다 <xref:System.Windows.DataTemplate> 각 데이터 항목 3으로 나타나도록 지정 <xref:System.Windows.Controls.TextBlock> 내의 요소는 <xref:System.Windows.Controls.StackPanel>합니다. 이 예제에서는 데이터 개체는 라는 클래스 `Task`합니다. 각 <xref:System.Windows.Controls.TextBlock> 의 속성에이 템플릿의 바인딩되는 `Task` 클래스입니다.  
  
 [!code-xaml[DataTemplatingIntro_snip#Inline](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#inline)]  
  
 보다 일반적인 정의 하는 것을 <xref:System.Windows.DataTemplate> 다음 예제와 같이 개체를 다시 사용할 수 있도록 리소스 섹션에서:  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#AsResource](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#asresource)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 이제 다음 예제와 같이 `myTaskTemplate`을 리소스로 사용할 수 있습니다.  
  
 [!code-xaml[DataTemplatingIntro_snip#MyTaskTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#mytasktemplate)]  
  
 전체 샘플을 보려면 [Introduction to Data Templating Sample](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/DataTemplatingIntro)(데이터 템플릿 샘플 소개)을 참조하세요.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Data.Binding" />
    <altmember cref="T:System.Windows.Controls.DataTemplateSelector" />
    <altmember cref="T:System.Windows.HierarchicalDataTemplate" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=163703">데이터 바인딩 데모</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.DataTemplate" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.DataTemplate" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplate (object dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataType As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplate(System::Object ^ dataType);" />
      <MemberSignature Language="F#" Value="new System.Windows.DataTemplate : obj -&gt; System.Windows.DataTemplate" Usage="new System.Windows.DataTemplate dataType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataType">템플릿이 개체 데이터에 사용되는 경우 이것은 데이터 개체의 형식 이름입니다.</param>
        <summary>지정된 <see cref="T:System.Windows.DataTemplate" /> 속성을 사용하여 <see cref="P:System.Windows.DataTemplate.DataType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클래스의 형식 이름으로 참조를 사용 합니다 [X:type 태그 확장](~/docs/framework/xaml-services/x-type-markup-extension.md)합니다. 에 대 한 템플릿이 사용 되는 경우 [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] 데이터, 데이터의 태그 이름을 나타내는 문자열입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataTemplateKey">
      <MemberSignature Language="C#" Value="public object DataTemplateKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataTemplateKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.DataTemplateKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataTemplateKey As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataTemplateKey { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataTemplateKey : obj" Usage="System.Windows.DataTemplate.DataTemplateKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.DataTemplate" />의 기본 키를 가져옵니다.</summary>
        <value><see cref="T:System.Windows.DataTemplate" />의 기본 키입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 하지 않은 경우는 [X:key 지시문](~/docs/framework/xaml-services/x-key-directive.md) 에 <xref:System.Windows.DataTemplate> 제공 되는 <xref:System.Windows.ResourceDictionary>는 <xref:System.Windows.DataTemplate.DataTemplateKey%2A> 키로 사용 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public object DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataType { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataType : obj with get, set" Usage="System.Windows.DataTemplate.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.DataTemplate" />이 사용되는 형식을 가져오거나 설정합니다.</summary>
        <value>기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 매우 유사 합니다 <xref:System.Windows.Style.TargetType%2A> 의 속성을 <xref:System.Windows.Style> 클래스. 지정 하지 않고 데이터 형식으로이 속성을 설정 하는 경우는 `x:Key`, <xref:System.Windows.DataTemplate> 해당 형식의 데이터 개체에 자동으로 적용 됩니다. 이렇게 할 때를 `x:Key` 암시적으로 설정 됩니다. 따라서이 할당 하는 경우 <xref:System.Windows.DataTemplate> 는 `x:Key` 값을 암시적 재정의 `x:Key` 및 <xref:System.Windows.DataTemplate> 자동으로 적용할 수는 없습니다.  
  
 참고는 바인딩하는 경우는 <xref:System.Windows.Controls.ContentControl> 컬렉션에 `Task` 개체를 <xref:System.Windows.Controls.ContentControl> 사용 하지 않습니다는 <xref:System.Windows.DataTemplate> 자동으로 합니다. 왜냐하면의 바인딩에서 <xref:System.Windows.Controls.ContentControl> 전체 컬렉션 또는 개별 개체에 바인딩할 인지 구분 하기 위해 더 많은 정보가 필요 합니다. 경우에 <xref:System.Windows.Controls.ContentControl> 의 선택 영역 추적는 <xref:System.Windows.Controls.ItemsControl> 형식을 설정할 수 있습니다를 <xref:System.Windows.Data.Binding.Path%2A> 의 속성을 <xref:System.Windows.Controls.ContentControl> 바인딩할 "`/`" 현재 항목에 관심이 나타내려면. 예는 [방법: 컬렉션 및 선택에 따라 표시 정보에 바인딩](~/docs/framework/wpf/data/how-to-bind-to-a-collection-and-display-information-based-on-selection.md)합니다. 지정 해야 하는 고, 그렇지 합니다 <xref:System.Windows.DataTemplate> 명시적으로 설정 하 여는 <xref:System.Windows.Controls.ContentControl.ContentTemplate%2A> 속성입니다.  
  
 합니다 <xref:System.Windows.DataTemplate.DataType%2A> 속성은 경우에 특히 유용는 <xref:System.Windows.Data.CompositeCollection> 다양 한 유형의 데이터 개체입니다.  
  
 이 속성에서 기본 네임 스페이스에 없는 XML 요소를 대상으로 하는 경우 네임 스페이스 또는 네임 스페이스 지정자를 사용 하 여 요소 이름 앞에 야 합니다. XML에 대 한 LINQ를 통해 노출 하는 XML 네임 스페이스 중괄호 이스케이프 시퀀스 앞에 괄호로 나타납니다.  
  
```xaml  
<DataTemplate DataType="{}{http://myNamespace}Details">  
```  
  
 XPath를 통해 노출 하는 xml에서 요소 이름 앞에 네임 스페이스 지정자의 인스턴스로 설정 하 여 <xref:System.Windows.Data.XmlNamespaceMapping>:  
  
```xaml  
<DataTemplate DataType="mn:Details">  
```  
  
<a name="xamlAttributeUsage_DataType"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object DataType="typeName"/>  
```  
  
<a name="xamlValues_DataType"></a>   
## <a name="xaml-values"></a>XAML 값  
 *typeName*  
 템플릿이 개체 데이터에 사용 되는, 하는 경우이 속성 (예: string) 데이터 개체의 형식 이름을 포함 합니다. 클래스의 형식 이름으로 참조를 사용 합니다 [X:type 태그 확장](~/docs/framework/xaml-services/x-type-markup-extension.md)합니다. 에 대 한 템플릿이 사용 되는 경우 [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] 데이터를이 속성에 XML 요소 이름을 포함 합니다. XML 요소에 대해 기본이 아닌 네임 스페이스를 지정 하는 방법에 대 한 자세한 설명서 설명을 참조 하세요.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160009">데이터 템플릿 샘플 소개</related>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.DataTemplate.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>하나 이상의 조건에 따라 속성 값을 적용하거나 작업을 수행하는 트리거의 컬렉션을 가져옵니다.</summary>
        <value>트리거 개체의 컬렉션입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터 템플릿 내에서 트리거를 만드는 경우 트리거 setter 데이터 템플릿의 범위 내에 있는 속성을 설정 해야 합니다. 그렇지 않은 경우 데이터를 포함 하는 형식을 대상으로 하는 스타일을 사용 하는 트리거를 만드는 더 적합 한 수 있습니다. 예를 들어, 바인딩하는 경우는 <xref:System.Windows.Controls.ListBox> 컨트롤 컨테이너는 <xref:System.Windows.Controls.ListBoxItem> 개체입니다. 범위에 있지 않은 속성을 설정 하려면 트리거를 사용 하는 경우는 <xref:System.Windows.DataTemplate>, 더 적합할 수 있습니다는 <xref:System.Windows.Controls.ListBoxItem> 스타일 및 스타일 내에서 트리거를 만듭니다. 자세한 내용은 DataTemplate에 속한 항목을 참조 하세요? 에 [데이터 템플릿 개요](~/docs/framework/wpf/data/data-templating-overview.md)합니다.  
  
> [!NOTE]
>  이 속성 설정할 수 있습니다 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 또는 컬렉션 개체에 액세스 하 고 추가 등의 다양 한 메서드를 사용 하 여 컬렉션 구문을 표시 합니다. 컬렉션 개체 자체를 액세스 하는 속성은 읽기 전용, 컬렉션 자체는 읽기 / 쓰기입니다.  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>XAML 속성 요소 사용  
  
```  
<object>  
  <object.Triggers>  
    OneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>XAML 값  
 *OneOrMoreTriggers*  
 0 개 이상의 <xref:System.Windows.TriggerBase> 개체입니다.  
  
   
  
## Examples  
 다음 <xref:System.Windows.DataTemplate> 사용을 보여 줍니다는 <xref:System.Windows.DataTemplate.Triggers%2A> 속성입니다.  
  
 [!code-xaml[DataBindingLab#AuctionItemDataTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#auctionitemdatatemplate)]  
  
 전체 샘플을 참조 하세요 [데이터 바인딩 데모](https://go.microsoft.com/fwlink/?LinkID=163703)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DataTrigger" />
        <altmember cref="T:System.Windows.MultiDataTrigger" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160009">데이터 템플릿 샘플 소개</related>
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ValidateTemplatedParent (templatedParent As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ValidateTemplatedParent(System::Windows::FrameworkElement ^ templatedParent);" />
      <MemberSignature Language="F#" Value="override this.ValidateTemplatedParent : System.Windows.FrameworkElement -&gt; unit" Usage="dataTemplate.ValidateTemplatedParent templatedParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">이 템플릿이 적용되는 요소입니다.</param>
        <summary>규칙 집합에 대해 템플릿 부모를 확인합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드는 다음 규칙을 사용합니다.  
  
-   합니다 `templatedParent` null이 아닌 <xref:System.Windows.FrameworkElement>합니다.  
  
-   합니다 <xref:System.Windows.DataTemplate> 에 적용 되어야 합니다는 <xref:System.Windows.Controls.ContentPresenter>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>