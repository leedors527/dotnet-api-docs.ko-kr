<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3cd6fbb925314b32cf6f09ce204f5374db64928c" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39765182" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>읽기 전용 종속성 속성에 대해 제한적인 쓰기 권한을 제공하기 위한 종속성 속성 식별자를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey> 인스턴스 메서드를 사용 하 여 종속성 속성 등록 호출의 반환 값으로 얻습니다 <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> 또는 <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>합니다.  
  
 종속성 속성을 등록 하는 형식을 사용할 수는 <xref:System.Windows.DependencyPropertyKey> 에 대 한 호출 <xref:System.Windows.DependencyObject.SetValue%2A> 및 <xref:System.Windows.DependencyObject.ClearValue%2A> 클래스 논리의 일부로 속성의 값을 조정 하는 합니다. 키의 액세스 수준을 허용 하는 경우 관련된 클래스도 사용할 수는 키와 종속성 속성입니다. 예를 들어 내부로 키를 선언할 수 있으며 동일한 어셈블리 내의 다른 형식 종속성 속성을 설정할 수도 있습니다.  
  
 <xref:System.Windows.DependencyPropertyKey> 반환 된 읽기 전용 종속성 속성 등록 해야 하지 public으로 설정 하기 때문에 키가 노출 속성을 설정할 수 있는, 따라서 읽기 전용 종속성 속성으로 등록 하는 시점을 더 어렵게 만든다는 점입니다. 또한 키가 노출 간에 불일치가 발생 사용할 수 있는 종속성 속성 동작 및 해당 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 은 잘못 된 클래스 디자인 속성 래퍼 구현 합니다.  
  
 자체 키를 노출 하는 대신 노출 해야 합니다 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> 값을 <xref:System.Windows.DependencyPropertyKey> 으로 `public static readonly` <xref:System.Windows.DependencyProperty> 클래스에서. 이 통해 반환할 속성을 올바른 종속성 속성 식별자를 특정 로컬 설정 값을 열거 하는 등 속성 시스템 작업 수 있습니다. 그러나 가져온 따라서 식별자 없는의 전체 기능을 <xref:System.Windows.DependencyProperty> 많은 속성 시스템 작업에 대 한 합니다.  
  
   
  
## Examples  
 다음 예에서는 읽기 전용 종속성 속성을 등록 하 고 다른 클래스 멤버에 대 한 두 가지 용도로 키를 사용 합니다: get "래퍼"를 구현 하 고 계산을 기반으로 값을 설정 하는 보호 된 확인 작업에 대 한 식별자로 다른 속성 값입니다.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 특수 읽기 전용 종속성 속성 식별자와 연결된 종속성 속성 식별자를 가져옵니다.</summary>
        <value>관련 종속성 속성 식별자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> 값 참여 공통 속성 시스템 작업을 사용 하 여 동일한 인터페이스의 일부 사용 되는 읽기-쓰기 종속성 속성에 대 한 읽기 전용 속성의 식별자를 사용 하도록 설정 합니다.  
  
 읽기 전용 종속성 속성의 get 속성 접근자를 구현 하기 위해 만들고 노출 된 <xref:System.Windows.DependencyProperty> 클래스에 대 한 식별자입니다. 이 두 가지 용도로 사용 됩니다.  
  
-   사용자 고유의 클래스 요구는 <xref:System.Windows.DependencyProperty> 속성 래퍼에 대 한 get 접근자를 구현 하기 위해 식별자입니다. 사용할 합니다 <xref:System.Windows.DependencyProperty> 에 대 한 매개 변수로 <xref:System.Windows.DependencyObject.GetValue%2A> get 접근자를 구현 하는 호출 합니다.  
  
-   <xref:System.Windows.DependencyProperty> 식별자는 메타 데이터에 의존 하는 다른 메서드는 표준 양식에서 액세스할 수 있도록 속성 시스템에 종속성 속성을 노출 합니다. 예를 들어 호출 하면 <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> 일부 <xref:System.Windows.DependencyObject> 식별자를 로컬에서 설정한 속성 (값 및 식별자)의 열거형을 가져옵니다 읽기 전용 종속성 속성에 대 한 반환에 <xref:System.Windows.DependencyProperty> 키 대신 값입니다. 노출 되지 않은 한 <xref:System.Windows.DependencyProperty> 식별자 어떤 방식으로 읽기 전용 종속성 속성 보안 증가 하지 않고, 복잡 해질 후속 파생 된 클래스 및 클래스 인스턴스에 대 한 속성을 포함 하는 작업 효과가 있습니다.  
  
 노출 하는 <xref:System.Windows.DependencyProperty> 호출 클래스에 대해 식별자 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> 키에서 직접. 이 값을 사용 하 여 만들려는 `public static readonly` <xref:System.Windows.DependencyProperty> 대응 하는 클래스에 대 한 식별자는 <xref:System.Windows.DependencyPropertyKey>.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> 노출 하는 <xref:System.Windows.DependencyProperty> 식별자 (`AquariumGraphicProperty`)에 대 한는 `AquariumGraphic` 클래스에 대 한 읽기 전용 종속성 속성입니다. 또한이 예제에서는 합니다 <xref:System.Windows.DependencyPropertyKey> (멤버로 내부) 만들기 및 get 접근자를 `AquariumGraphic`입니다.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">이 종속성 속성에 대해 지정되어 있으며 메타데이터를 재정의해야 하는 형식입니다.</param>
        <param name="typeMetadata">이 형식에 대해 제공되는 메타데이터입니다.</param>
        <summary>이 종속성 속성 식별자가 나타내는 읽기 전용 종속성 속성의 메타데이터를 재정의합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 읽기 전용 종속성 속성 메타 데이터 재정의 읽기-쓰기 종속성 속성 메타 데이터를 재정의 하는 것과 비슷한 이유로 수행 이며 키 수준에서 액세스를 제한 하기 때문에 메타 데이터에 지정 된 동작 (집합 동작을 변경할 수 있습니다. default 값, 예를 들어).  
  
 읽기-쓰기 종속성 속성을 사용 하 여 읽기 전용 종속성 속성 메타 데이터 재정의 수행 해야 해당 속성을 사용 하 여 속성 시스템에서 이전 처럼 (이 매월에 등록 하는 개체의 해당 특정 인스턴스를 속성은 인스턴스화합니다). 에 대 한 호출 <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> 서 자신을 제공 하는 형식의 정적 생성자 내에 수행 해야 합니다 `forType` 이 메서드 또는 해당 클래스에 대 한 해당 초기화 매개 변수입니다.  
  
 이 메서드를 효과적으로 전달 합니다 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 전달 하는 메서드는 <xref:System.Windows.DependencyPropertyKey> 인스턴스로 키 매개 변수.  
  
   
  
## Examples  
 다음 예제에서는 클래스에서 상속 되는 기존 읽기 전용 종속성 속성에 대 한 메타 데이터를 재정의 합니다. 이 경우 시나리오 목표는 기본 속성 메타 데이터에 없는 강제 값 콜백을 추가할 이었습니다. 적절 한 메타 데이터 재정의 일반적으로 다른 이유 중 하나에 대 한 메타 데이터를 재정의할 수도 있습니다 (기본값 변경, 추가 <xref:System.Windows.FrameworkPropertyMetadataOptions> 값 등.)  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">읽기-쓰기 종속성 속성의 메타데이터를 재정의한 경우. 이 시그니처를 사용하여 이 작업을 수행할 수 없습니다.</exception>
        <exception cref="T:System.ArgumentException">제공된 형식에 있는 속성에 메타데이터가 이미 설정된 경우</exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>