<Type Name="FrameworkElement" FullName="System.Windows.FrameworkElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="30ff09b9cba587ac52db66b9075f6423b923d728" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57921264" /></Metadata><TypeSignature Language="C#" Value="public class FrameworkElement : System.Windows.UIElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkElement extends System.Windows.UIElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkElement" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkElement&#xA;Inherits UIElement&#xA;Implements IFrameworkInputElement, IQueryAmbient, ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkElement : System::Windows::UIElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement, System::Windows::Markup::IQueryAmbient" />
  <TypeSignature Language="F#" Value="type FrameworkElement = class&#xA;    inherit UIElement&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface ISupportInitialize&#xA;    interface IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IFrameworkInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.UsableDuringInitialization(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.XmlLangProperty("Language")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>WPF(Windows Presentation Foundation) 요소에 WPF 프레임워크 수준의 속성, 이벤트 및 메서드 집합을 제공합니다. 이 클래스는 <see cref="T:System.Windows.UIElement" />에 정의된 WPF 코어 수준의 API를 기반으로 하여 제공된 WPF 프레임워크 수준의 구현을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement> WPF 프레임 워크 수준 요소 클래스와 WPF 핵심 수준 집합 간의 연결 지점이 <xref:System.Windows.UIElement> 프레젠테이션 서비스입니다. 이러한 개념에 대 한 자세한 내용은 참조 하세요. [WPF 아키텍처](~/docs/framework/wpf/advanced/wpf-architecture.md)합니다.  
  
 <xref:System.Windows.FrameworkElement> 확장 <xref:System.Windows.UIElement> 다음과 같은 기능을 추가 합니다.  
  
-   **레이아웃 시스템 정의**: <xref:System.Windows.FrameworkElement> 가상 멤버로 정의 된 메서드를 특정 WPF 프레임 워크 수준 구현에 대 한 특정 제공 <xref:System.Windows.UIElement>합니다. 가장 주목할 만한 <xref:System.Windows.FrameworkElement> 특정 WPF 핵심 수준 레이아웃 재정의가 봉인 하 고 대신 파생 클래스는 WPF 프레임 워크 수준 해당 하는 대신 재정의할를 제공 합니다. 예를 들어 <xref:System.Windows.FrameworkElement> 봉인 <xref:System.Windows.UIElement.ArrangeCore%2A> 제공 하지만 <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>합니다. WPF 프레임 워크 수준에는 전체 레이아웃 시스템을 하나라도 렌더링할 수 있는 위치에 이러한 변경 내용을 반영 <xref:System.Windows.FrameworkElement> 클래스를 파생 합니다. WPF에는 일반 구조체는 멤버 수준, 특정 핵심 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 기반된 레이아웃 솔루션 이기는 하지만 실제 엔진 레이아웃 시스템에 정의 되어 있지 않습니다. 자세한 내용은 [레이아웃](~/docs/framework/wpf/advanced/layout.md)을 참조하세요.  
  
-   **논리 트리:** 일반 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 프로그래밍 모델은 종종 요소 트리 되 측면에서 표현 됩니다. 논리 트리를 요소 트리 표현 및 태그에는 트리 정의 구현에 대 한 지원이 함께 제공 되는 지원의 <xref:System.Windows.FrameworkElement> 수준입니다. 참고 하지만 <xref:System.Windows.FrameworkElement> 의도적으로 콘텐츠 모델을 정의 하지 않습니다 하 고 파생된 클래스에는 책임을 유지 합니다. 자세한 내용은 [WPF의 트리](~/docs/framework/wpf/advanced/trees-in-wpf.md)를 참조하세요.  
  
-   **개체 수명 이벤트:** 요소 초기화 될 때 알고 있어야 유용 (생성자가 호출) 요소가 처음 로드할 때 논리적 트리 또는 합니다. <xref:System.Windows.FrameworkElement> 개체 수명 관련 된 다른 자식 요소를 추가 하는 등의 요소를 포함 하는 코드 숨김 작업에 대 한 유용한 후크를 제공 하는 여러 이벤트를 정의 합니다. 자세한 내용은 [개체 수명 이벤트](~/docs/framework/wpf/advanced/object-lifetime-events.md)합니다.  
  
-   **데이터 바인딩 및 동적 리소스 참조에 대 한 지원:** 데이터 바인딩 및 리소스에 대 한 속성 수준 지원을 구현한 합니다 <xref:System.Windows.DependencyProperty> 클래스 및 속성 시스템에 있지만으로 저장 되는 멤버 값을 확인할 수 있는 기능에는 <xref:System.Windows.Expression> (프로그래밍 구문을 모두의 기반이 되는 데이터 바인딩 및 동적 리소스)에 의해 구현 됩니다 <xref:System.Windows.FrameworkElement>합니다. 자세한 내용은 [데이터 바인딩 개요](~/docs/framework/wpf/data/data-binding-overview.md) 하 고 [XAML 리소스](~/docs/framework/wpf/advanced/xaml-resources.md)합니다.  
  
-   **스타일:** <xref:System.Windows.FrameworkElement> 정의 <xref:System.Windows.FrameworkElement.Style%2A> 속성입니다. 그러나 <xref:System.Windows.FrameworkElement> 지원 템플릿 정의 또는 데코레이터를 지원 되지 않습니다. 이러한 기능을 같은 컨트롤 클래스를 통해 도입 <xref:System.Windows.Controls.Control> 및 <xref:System.Windows.Controls.ContentControl>합니다.  
  
-   **자세한 애니메이션 지원:** 일부 애니메이션 지원을 WPF 핵심 수준에서 이미 정의 되었습니다 하지만 <xref:System.Windows.FrameworkElement> 를 구현 하 여이 확장 <xref:System.Windows.FrameworkElement.BeginStoryboard%2A> 및 멤버를 관련 됩니다.  
  
 클래스 계층 구조에서 볼 수 있듯이 많은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 클래스에서 파생 <xref:System.Windows.FrameworkElement>로 직접 또는 중간 기본 클래스를 통해 같은 <xref:System.Windows.Controls.Panel> 또는 <xref:System.Windows.Controls.Control>합니다.  
  
 사용 하려는 경우 <xref:System.Windows.FrameworkElement> 를 기본 클래스로 하려는 경우 먼저 기존 파생된 클래스를 검사 합니다. <xref:System.Windows.FrameworkElement> 다양 한 기본 시나리오에 대 한 지원을 제공 하지만 또한 다양 한 기능을 만드는 데 사용할 수 있는 문서 블록의 점에서 "요소의" 바람직하지 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 에서 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]합니다. 예를 들어 한 <xref:System.Windows.FrameworkElement> true 모든 콘텐츠 모델을 정의 하지 않습니다 <xref:System.Windows.FrameworkElement> 기본 클래스를 만들 수 있는 속성을 정의 하지 않습니다 하는 대로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 자식 요소입니다. 확인 하려는 특히 <xref:System.Windows.Controls.Control> 고 <xref:System.Windows.Controls.ContentControl>입니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.FrameworkElement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeight">
      <MemberSignature Language="C#" Value="public double ActualHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualHeight { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualHeight : double" Usage="System.Windows.FrameworkElement.ActualHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 렌더링된 높이를 가져옵니다.</summary>
        <value>요소의 높이([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]의 값)입니다. 기본값은 0입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 다른 높이 입력 및 레이아웃 시스템에 따라 계산된 된 값입니다. 값을 실제 렌더링 단계에 따라 레이아웃 시스템 자체적으로 설정 되 고 같은 속성의 설정 값 뒤에 약간 지연 될 수 있습니다 <xref:System.Windows.FrameworkElement.Height%2A> 입력된 변경의 기준인 합니다.  
  
 때문에 <xref:System.Windows.FrameworkElement.ActualHeight%2A> 은 계산된 된 값 수는 여러 개 있을 수 있습니다 또는 보고 변경 하 여 다양 한 작업의 결과로 레이아웃 시스템에서. 레이아웃 시스템은 자식 요소에 필요한 측정 공간, 부모 요소에 의한 제약 조건 등을 계산할 수도 있습니다.  
  
 이 속성을 설정할 수 없습니다 있지만 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]를 만드는 데 사용할 수는 <xref:System.Windows.Trigger> 스타일의 값으로.  
  
<a name="dependencyPropertyInfo_ActualHeight"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.ActualHeightProperty>|  
|메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 다음 예제에서는 다양 한 높이 속성을 표시합니다.  
  
 [!code-csharp[HeightMinHeightMaxHeight#3](~/samples/snippets/csharp/VS_Snippets_Wpf/HeightMinHeightMaxHeight/CSharp/Window1.xaml.cs#3)]
 [!code-vb[HeightMinHeightMaxHeight#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HeightMinHeightMaxHeight/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.ActualHeight" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidth">
      <MemberSignature Language="C#" Value="public double ActualWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualWidth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualWidth { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualWidth : double" Usage="System.Windows.FrameworkElement.ActualWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 렌더링된 너비를 가져옵니다.</summary>
        <value>요소의 너비([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]의 값)입니다. 기본값은 0입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 다른 너비 입력 및 레이아웃 시스템에 따라 계산된 된 값입니다. 값을 실제 렌더링 단계에 따라 레이아웃 시스템 자체적으로 설정 되 고 같은 속성의 설정 값 뒤에 약간 지연 될 수 있습니다 <xref:System.Windows.FrameworkElement.Width%2A> 입력된 변경의 기준인 합니다.  
  
 때문에 <xref:System.Windows.FrameworkElement.ActualWidth%2A> 은 계산된 된 값 수는 여러 개 있을 수 있습니다 또는 보고 변경 하 여 다양 한 작업의 결과로 레이아웃 시스템에서. 레이아웃 시스템은 자식 요소에 필요한 측정 공간, 부모 요소에 의한 제약 조건 등을 계산할 수도 있습니다.  
  
 이 속성을 설정할 수 없습니다 있지만 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]를 만드는 데 사용할 수는 <xref:System.Windows.Trigger> 스타일의 값으로.  
  
<a name="dependencyPropertyInfo_ActualWidth"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.ActualWidthProperty>|  
|메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 다음 예제에서는 다양 한 너비 속성을 표시합니다.  
  
 [!code-csharp[WidthMinWidthMaxWidth#3](~/samples/snippets/csharp/VS_Snippets_Wpf/WidthMinWidthMaxWidth/CSharp/Window1.xaml.cs#3)]
 [!code-vb[WidthMinWidthMaxWidth#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WidthMinWidthMaxWidth/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.ActualWidth" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void AddLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.AddLogicalChild : obj -&gt; unit" Usage="frameworkElement.AddLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">추가할 자식 요소입니다.</param>
        <summary>제공된 개체를 이 요소의 논리적 트리에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요소의 논리적 자식 요소를 나타내는 개체에는 컬렉션의 구현에이 메서드를 사용 합니다. Changed 이벤트, 생성자 또는 컬렉션 형식 자체 내에서 처리 하는 클래스 또는 속성 getter 및 setter에서 자식 요소 컬렉션에 대 한 컬렉션 유지 관리를 수행할 수 있습니다.  
  
 컨트롤 작성자에 대 한이 수준에서 논리 트리를 조작 하지 않는 좋습니다를 사용할 수 있는 기본 컨트롤 클래스에 대 한 콘텐츠 모델의 제어 시나리오에 적합 합니다. 하위 수준 클래스는 것이 좋습니다 <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, 및 <xref:System.Windows.Controls.HeaderedItemsControl>합니다. 이러한 클래스는 전용 통해 논리적 트리에서 자식 요소의 특정 적용을 사용 하 여 콘텐츠 모델을 제공 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]에서 일반적으로 사용 가능한 다른 기능에 대 한 지원 뿐만 아니라는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 템플릿 통한 스타일 지정과 같은 컨트롤입니다. 사용 하는 방법에 대 한 자세한 내용은 <xref:System.Windows.FrameworkElement.LogicalChildren%2A> 하 고 <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>를 참조 하세요 [WPF의 트리](~/docs/framework/wpf/advanced/trees-in-wpf.md)합니다.  
  
 <xref:System.Windows.FrameworkElement.AddLogicalChild%2A> 다른 프로세스에 의해 논리적 트리 반복 중일 때 한 번에 호출 되는 경우 예외가 throw 될 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 구현 하는 `Child` 사용자 지정 속성 <xref:System.Windows.FrameworkElement> 수행 하는 자체 시각적 계층 구현 합니다. 속성 setter는 이전 값을 논리적 트리를 뿐만 아니라 클래스 관련 시각적 컬렉션에서 제거 값이 변경 되도록 설계 되었습니다. 속성 값을 캐시 하 고, 논리적 트리와 시각적 사용자 지정 컬렉션에 새 값을 추가한.  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyTemplate">
      <MemberSignature Language="C#" Value="public bool ApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyTemplate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ApplyTemplate();" />
      <MemberSignature Language="F#" Value="member this.ApplyTemplate : unit -&gt; bool" Usage="frameworkElement.ApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>필요한 경우 현재 템플릿의 시각적 트리를 작성하고 시각적 트리가 이 호출로 다시 작성되었는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>시각적 개체가 트리에 추가되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 응용 프로그램 요소의 시각적 트리 완료 되었음을 보장 하기 위해이 메서드를 호출할 수 있습니다. 이 보장 단계는 코드는 트리의 자식 요소를 확인 해야 할 경우 할 수 있습니다. 호출 하는 응용 프로그램 내에서 일반적인 요소 논리 <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> 템플릿을 적용할 요소는 적절 한 시점에 수명에 자동으로 하므로, 필요 하지 않습니다.  
  
 <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> 모든 측정값에 대해 호출 되는 WPF 프레임 워크 수준 레이아웃 시스템으로 전달 합니다.  
  
 <xref:System.Windows.FrameworkElement> 파생된 클래스에서 사용할 수는 <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> 클래스 처리기가이 메서드가 명시적으로 호출 된 경우 또는 레이아웃 시스템에서 알림을 받을 수 있습니다. <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> 템플릿을 완전히 생성 되 고 논리 트리와 연결 된 후 호출 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ControlTemplate" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected override sealed void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="frameworkElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">이 요소에서 자신과 자식을 정렬하는 데 사용해야 하는 부모 내의 마지막 영역입니다.</param>
        <summary><see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />(<see cref="T:System.Windows.UIElement" />에 가상 항목으로 정의되어 있음)를 구현하고 구현을 봉인합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 봉인 되어 있습니다. 요소 레이아웃의 정렬 단계에 맞게 사용자 지정 요소에 논리를 재정의 하기 위해 프로그램 <xref:System.Windows.FrameworkElement> 파생된 클래스에서 재정의 해야 <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size finalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ArrangeOverride (finalSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size ArrangeOverride(System::Windows::Size finalSize);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.ArrangeOverride finalSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="finalSize">이 요소에서 자신과 자식을 정렬하는 데 사용해야 하는 부모 내의 마지막 영역입니다.</param>
        <summary>파생 클래스에서 재정의하는 경우 자식 요소를 배치하고 <see cref="T:System.Windows.FrameworkElement" /> 파생 클래스에 대한 크기를 결정합니다.</summary>
        <returns>사용되는 실제 크기입니다.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>레이아웃 처리의 정렬 단계를 사용자 지정 하려는 컨트롤 작성자는이 메서드를 재정의 해야 합니다. 구현 패턴을 호출 해야 합니다 <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> 각 표시 되는 자식 요소 및 원하는 최종 크기가 각 자식 요소에 대 한 패스를 <paramref name="finalRect" /> 매개 변수입니다. 부모 요소를 호출 해야 <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> 각 자식 그렇지 않은 경우 자식 요소를 렌더링 되지 것입니다.  
  
대부분의 파생된 클래스는이 메서드의 구현을 제공합니다. 대표적인: <see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />하십시오 <see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /> 고 <see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />입니다.</para></block>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="frameworkElement.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 요소의 초기화 프로세스를 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 노출 하거나 요소가 요소 트리에 연결 되지 않는 방식으로 조정 하는 경우 개별 요소에서이 메서드를 호출할 수 있습니다. 예를 들어 만들었을 수 있습니다 새 <xref:System.Windows.FrameworkElement>, 논리적 트리에 아직 연결 하지 했으며 있지만. 또는 요소가 그 자식 요소를 논리적 트리 창 또는 응용 프로그램 페이지에 연결 되어 있지 않을 수 있습니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>요소는 요소를 로드 프로세스 중 초기화 되기 전에 발생 해야 하는 특수 한 처리를 제공 하려면이 메서드를 구현 합니다.  
  
구현 (기본값) 기본 구현을 초기화를 추적 하기 위해 일부 내부 플래그를 설정 하기 때문에 기본 구현을 호출 해야 합니다. 한 가지 구현을 후크로 생성자에 의해 이미 활성화 되지 않은 사용자 고유의 개인 클래스 초기화 루틴에이 메서드를 사용 하는 것입니다.  
  
기본 구현 하는 경우 예외가 throw 됩니다 <see cref="M:System.Windows.FrameworkElement.BeginInit" /> 라고 여러 번 같은 요소에서 이전 <see cref="M:System.Windows.FrameworkElement.EndInit" /> 호출 합니다.</para></block>
        <altmember cref="M:System.Windows.FrameworkElement.EndInit" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginStoryboard">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>제공된 Storyboard에 포함된 작업 시퀀스를 시작합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard -&gt; unit" Usage="frameworkElement.BeginStoryboard storyboard" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
      </Parameters>
      <Docs>
        <param name="storyboard">시작할 Storyboard입니다.</param>
        <summary>제공된 Storyboard에 포함된 작업 시퀀스를 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가장 일반적인 애니메이션 시나리오에서이 메서드를 사용 하지 마십시오. 일반적으로 <xref:System.Windows.Media.Animation.Storyboard> 또는 <xref:System.Windows.Media.Animation.BeginStoryboard> 태그 및 다음 요소에 배치는 <xref:System.Windows.EventTrigger> 요소 콘텐츠입니다. 이벤트에 의해 트리거되면 다음 애니메이션 실행 됩니다. 대부분의 컨트롤 측면을 <xref:System.Windows.Media.Animation.Storyboard> 태그에서 노출 된 속성을 통해 해결할 수 있습니다.  
  
 사용 하지 않는 서명에 대 한 합니다 `isControllable`, 매개 변수를 해당 매개 변수를 지정 하는 경우 또는 `false`, 연결 된 애니메이션 타임 라인 시계 애니메이션 "Fill" 기간에 도달 하는 즉시 제거 됩니다. 따라서 애니메이션을 한 번 실행 한 후에 다시 시작할 수 없습니다. 애니메이션 제어 수도 있어야 스토리 보드를 [X:name 지시문](~/docs/framework/xaml-services/x-name-directive.md) 코드에서 참조 하 여 액세스할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 검색 된 <xref:System.Windows.Media.Animation.Storyboard> 리소스에서는 실행 하 고 <xref:System.Windows.Media.Animation.Storyboard> 내부 이벤트를 처리 하는 클래스를가 하는 경우.  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="storyboard">시작할 Storyboard입니다.</param>
        <param name="handoffBehavior">Storyboard에 설명되어 있는 속성에 이미 애니메이션이 적용되어 있는 경우에 사용할 동작을 설명하는 열거형의 값입니다.</param>
        <summary>속성에 이미 애니메이션이 적용되어 있는 경우 수행할 작업에 대해 지정된 옵션을 사용하여 제공된 Storyboard에 포함된 작업 시퀀스를 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가장 일반적인 애니메이션 시나리오에서이 메서드를 사용 하지 마십시오. 일반적으로 <xref:System.Windows.Media.Animation.Storyboard> 또는 <xref:System.Windows.Media.Animation.BeginStoryboard> 태그 및 다음 요소에 배치는 <xref:System.Windows.EventTrigger> 요소 콘텐츠입니다. 이벤트에 의해 트리거되면 다음 애니메이션 실행 됩니다. 대부분의 컨트롤 측면을 <xref:System.Windows.Media.Animation.Storyboard> 태그에서 노출 된 속성을 통해 해결할 수 있습니다.  
  
 사용 하지 않는 서명에 대 한 합니다 `isControllable`, 매개 변수를 해당 매개 변수를 지정 하는 경우 또는 `false`, 연결 된 애니메이션 타임 라인 시계 애니메이션 "Fill" 기간에 도달 하는 즉시 제거 됩니다. 따라서 애니메이션을 한 번 실행 한 후에 다시 시작할 수 없습니다. 애니메이션 제어 수도 있어야 스토리 보드를 [X:name 지시문](~/docs/framework/xaml-services/x-name-directive.md) 코드에서 참조 하 여 액세스할 수 있습니다.  
  
 핸드 오프 동작 특성으로 지정할 수 있습니다 <xref:System.Windows.Media.Animation.BeginStoryboard>합니다.  
  
## <a name="using-the-compose-handoffbehavior"></a>사용 하 여 Compose HandoffBehavior  
 적용 하는 경우는 <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, 또는 <xref:System.Windows.Media.Animation.AnimationClock> 사용 하 여 속성에는 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>모든 <xref:System.Windows.Media.Animation.Clock> 개체 속성과 연관 된 이전에 시스템 리소스를 소비 계속; 타이밍 시스템에서 시계를 자동으로 제거 하지 않습니다.  
  
 사용 하 여 많은 수의 clock 적용 하는 경우 성능 문제를 방지 하려면 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>를 완성 한 후 애니메이션된 속성에서 구성 중인 클록을 제거 해야 합니다. 클록을 제거 하는 방법은 여러 가지가 있습니다.  
  
-   속성에서 모든 클록을 제거 하려면 사용 합니다 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> 또는 <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> 애니메이션된 개체의 메서드. 첫 번째 매개 변수로 애니메이션 효과가 적용 되는 속성을 지정 하 고 `null` 두 번째입니다. 이 속성에서 모든 애니메이션 클록을 제거합니다.  
  
-   특정 제거할 <xref:System.Windows.Media.Animation.AnimationClock> 클록 목록에서 사용 하 여는 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 의 속성을 <xref:System.Windows.Media.Animation.AnimationClock> 검색할를 <xref:System.Windows.Media.Animation.ClockController>, 호출를 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> 메서드의 <xref:System.Windows.Media.Animation.ClockController>합니다. 이 일반적으로 수행 된 <xref:System.Windows.Media.Animation.Clock.Completed> 클록에 대 한 이벤트 처리기입니다. 루트 클록만 하 여 제어 될 수는 <xref:System.Windows.Media.Animation.ClockController>; <xref:System.Windows.Media.Animation.Clock.Controller%2A> 자식 클록의 속성을 반환 `null`합니다. 또한는 <xref:System.Windows.Media.Animation.Clock.Completed> 클록의 유효 기간 무제한 인 경우 이벤트가 발생 하지 않습니다.  이 경우 사용자 호출 시기를 결정 해야 <xref:System.Windows.Media.Animation.ClockController.Remove%2A>합니다.  
  
 이것은 주로 수명이 긴 개체에 대한 애니메이션에서 문제가 됩니다.  개체는 가비지 수집 되 면 해당 클록도 연결이 끊어집니다 및 가비지 수집 합니다.  
  
 클록 개체에 대 한 자세한 내용은 참조 하세요. [애니메이션 및 타이밍 시스템 개요](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 검색 된 <xref:System.Windows.Media.Animation.Storyboard> 리소스에서는 실행 하 고 <xref:System.Windows.Media.Animation.Storyboard> 내부 이벤트를 처리 하는 클래스를가 하는 경우.  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storyboard">시작할 Storyboard입니다.</param>
        <param name="handoffBehavior">Storyboard에 설명되어 있는 속성에 이미 애니메이션이 적용되어 있는 경우에 사용할 동작을 설명하는 열거형의 값입니다.</param>
        <param name="isControllable">애니메이션을 시작한 후 제어(일시 중지)할 수 있는지 여부를 선언합니다.</param>
        <summary>애니메이션이 시작된 후 제어하기 위한 지정된 상태를 사용하여 제공된 Storyboard에 포함된 작업 시퀀스를 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가장 일반적인 애니메이션 시나리오에서이 메서드를 사용 하지 마십시오. 일반적으로 <xref:System.Windows.Media.Animation.Storyboard> 또는 <xref:System.Windows.Media.Animation.BeginStoryboard> 태그 및 다음 요소에 배치는 <xref:System.Windows.EventTrigger> 요소 콘텐츠입니다. 이벤트에 의해 트리거되면 다음 애니메이션 실행 됩니다. 대부분의 컨트롤 측면을 <xref:System.Windows.Media.Animation.Storyboard> 태그에서 노출 된 속성을 통해 해결할 수 있습니다.  
  
 사용 하지 않는 서명에 대 한 합니다 `isControllable`, 매개 변수를 해당 매개 변수를 지정 하는 경우 또는 `false`, 연결 된 애니메이션 타임 라인 시계 애니메이션 "Fill" 기간에 도달 하는 즉시 제거 됩니다. 따라서 애니메이션을 한 번 실행 한 후에 다시 시작할 수 없습니다. 애니메이션 제어 수도 있어야 스토리 보드를 [X:name 지시문](~/docs/framework/xaml-services/x-name-directive.md) 코드에서 참조 하 여 액세스할 수 있습니다.  
  
 핸드 오프 동작 특성으로 지정할 수 있습니다 <xref:System.Windows.Media.Animation.BeginStoryboard>합니다.  
  
## <a name="using-the-compose-handoffbehavior"></a>사용 하 여 Compose HandoffBehavior  
 적용 하는 경우는 <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, 또는 <xref:System.Windows.Media.Animation.AnimationClock> 사용 하 여 속성에는 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>모든 <xref:System.Windows.Media.Animation.Clock> 개체 속성과 연관 된 이전에 시스템 리소스를 소비 계속; 타이밍 시스템에서 시계를 자동으로 제거 하지 않습니다.  
  
 사용 하 여 많은 수의 clock 적용 하는 경우 성능 문제를 방지 하려면 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>를 완성 한 후 애니메이션된 속성에서 구성 중인 클록을 제거 해야 합니다. 클록을 제거 하는 방법은 여러 가지가 있습니다.  
  
-   속성에서 모든 클록을 제거 하려면 사용 합니다 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> 또는 <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> 애니메이션된 개체의 메서드. 첫 번째 매개 변수로 애니메이션 효과가 적용 되는 속성을 지정 하 고 `null` 두 번째입니다. 이 속성에서 모든 애니메이션 클록을 제거합니다.  
  
-   특정 제거할 <xref:System.Windows.Media.Animation.AnimationClock> 클록 목록에서 사용 하 여는 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 의 속성을 <xref:System.Windows.Media.Animation.AnimationClock> 검색할를 <xref:System.Windows.Media.Animation.ClockController>, 호출를 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> 메서드의 <xref:System.Windows.Media.Animation.ClockController>합니다. 이 일반적으로 수행 된 <xref:System.Windows.Media.Animation.Clock.Completed> 클록에 대 한 이벤트 처리기입니다. 루트 클록만 하 여 제어 될 수는 <xref:System.Windows.Media.Animation.ClockController>; <xref:System.Windows.Media.Animation.Clock.Controller%2A> 자식 클록의 속성을 반환 `null`합니다. 또한는 <xref:System.Windows.Media.Animation.Clock.Completed> 클록의 유효 기간 무제한 인 경우 이벤트가 발생 하지 않습니다.  이 경우 사용자 호출 시기를 결정 해야 <xref:System.Windows.Media.Animation.ClockController.Remove%2A>합니다.  
  
 이것은 주로 수명이 긴 개체에 대한 애니메이션에서 문제가 됩니다.  개체는 가비지 수집 되 면 해당 클록도 연결이 끊어집니다 및 가비지 수집 합니다.  
  
 클록 개체에 대 한 자세한 내용은 참조 하세요. [애니메이션 및 타이밍 시스템 개요](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup BindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup BindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.BindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ BindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingGroup : System.Windows.Data.BindingGroup with get, set" Usage="System.Windows.FrameworkElement.BindingGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소에 사용되는 <see cref="T:System.Windows.Data.BindingGroup" />을 가져오거나 설정합니다.</summary>
        <value>요소에 사용되는 <see cref="T:System.Windows.Data.BindingGroup" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingGroup> 개체의 여러 속성의 값 유효성 검사에 사용할 수 있습니다. 예를 들어 응용 프로그램 주소를 입력 하 라는 메시지를 다음 형식의 개체를 채웁니다 `Address`, 속성이 있는 `Street`, `City`, `ZipCode`, 및 `Country`, 값을 사용 하는 사용자 제공 합니다. 응용 프로그램에 4 개를 포함 하는 패널 <xref:System.Windows.Controls.TextBox> 개체의 속성 중 하나에 바인딩되는 컨트롤입니다. 사용할 수는 <xref:System.Windows.Controls.ValidationRule> 에 <xref:System.Windows.Data.BindingGroup> 유효성을 검사 하는 `Address` 개체. 예를 들어를 <xref:System.Windows.Controls.ValidationRule> 우편 주소의 국가 대 한 유효한 지 확인할 수 있습니다.  
  
 자식 요소에서 상속 된 <xref:System.Windows.Data.BindingGroup> 다른 상속 가능한 속성에서와 마찬가지로 해당 부모 요소에서.  
  
<a name="dependencyPropertyInfo_BindingGroup"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.BindingGroupProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 다음 예제는 사용자가 값과 동일 하 게 두 개체의 속성을 설정 하는지 여부를 확인 하는 응용 프로그램의 일부입니다. 첫 번째 예제에서는 두 개의 <xref:System.Windows.Controls.TextBox> 각각 서로 다른 데이터 원본에 바인딩된 컨트롤입니다. <xref:System.Windows.Controls.StackPanel> 에 <xref:System.Windows.Data.BindingGroup> 를 포함 하는 <xref:System.Windows.Controls.ValidationRule> 두 문자열이 같은지를 확인 하는.  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupComplete](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupcomplete)]  
  
 다음 예제는 <xref:System.Windows.Controls.ValidationRule> 앞의 예제를 사용 하는 합니다.  에 <xref:System.Windows.Controls.ValidationRule.Validate%2A> 메서드 재정의 예제에서 각 원본 개체를 가져옵니다는 <xref:System.Windows.Data.BindingGroup> 개체 속성이 같은지 여부를 확인 합니다.  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 호출 하는 <xref:System.Windows.Controls.ValidationRule>를 호출 합니다 <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> 메서드.  다음 예제에서는 <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> 단추 클릭 이벤트가 발생 합니다.  
  
 [!code-csharp[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#updatesourcesclick)]
 [!code-vb[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#updatesourcesclick)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroupProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BindingGroupProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BindingGroupProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BindingGroupProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BindingGroupProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BindingGroupProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.BindingGroup" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BringIntoView">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>이 요소를 포함된 스크롤 가능한 영역 내에서 뷰에 표시하려고 합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView();" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : unit -&gt; unit" Usage="frameworkElement.BringIntoView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 요소를 포함된 스크롤 가능한 영역 내에서 뷰에 표시하려고 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 발생을 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 현재 요소에서 발생 하는 이벤트입니다. 이 이벤트가 발생 하 여 처리할 수 있도록는 <xref:System.Windows.Controls.ScrollViewer>, 또는 파생 또는 유사한 클래스입니다. 예상 된 동작을 이벤트 데이터를 처리 됨으로 표시 부모 요소에는 이벤트를 처리 하는 이벤트의 소스에 포함 된 논리를 통해 보기에 표시 되는 <xref:System.Windows.Controls.ScrollViewer> 제어 합니다. 모두를 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 이벤트 또는 <xref:System.Windows.FrameworkElement.BringIntoView%2A> 방법에 대 한 성공 또는 실패를 이외의 이벤트는 일반적으로 표시 된 처리에 성공 정보를 전송 합니다. 다음과 같은 오류와 같은 요소 설정의 포함할 수 있습니다 <xref:System.Windows.UIElement.Visibility%2A> 이외의 일부 값 되 <xref:System.Windows.Visibility.Visible>합니다.  
  
 지정 하지 않는 서명을 사용 하는 경우는 `targetRectangle`, 전체 요소 크기를 다음 (해당 <xref:System.Windows.UIElement.RenderSize%2A>) 볼 수 있게 됩니다.  
  
 이 메서드를 호출 하 여 잠재적으로 호출 <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> 요소가 포함 된 부모 스크롤 가능한 영역에서 합니다. 이 요소는 스크롤 가능한 영역에 포함 되지 않은 경우는 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 이벤트는 발생 하지만 이벤트 수신기를 찾지 있기 때문에 영향을 주지 않습니다 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 때마다 응답 하는 응용 프로그램 탐색 이벤트에 대 한 처리기를 구현 합니다 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] 탐색 중인 조각에 포함 되어 있습니다. 조각에 명명 된는 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] 해시 기호 다음 (#), 구현 되는 동작으로 인해 프레임 내에서 보기로 스크롤할 요소가 있습니다. <xref:System.Windows.FrameworkElement.BringIntoView%2A> 및 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 예제에서는 스크롤 동작을 요청 합니다.  
  
 [!code-csharp[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/csharp/VS_Snippets_Wpf/FragmentNavigationSample/CSharp/MainWindow.xaml.cs#febringintoview)]
 [!code-vb[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FragmentNavigationSample/VisualBasic/MainWindow.xaml.vb#febringintoview)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView (System.Windows.Rect targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView(valuetype System.Windows.Rect targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView (targetRectangle As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView(System::Windows::Rect targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : System.Windows.Rect -&gt; unit" Usage="frameworkElement.BringIntoView targetRectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetRectangle" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="targetRectangle">뷰에 함께 표시할 요소의 지정된 크기입니다.</param>
        <summary>이 요소의 제공된 영역 크기를 요소가 포함된 스크롤 가능 영역 내에서 뷰에 표시하려고 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하 여 발생을 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 현재 요소에서 발생 하는 이벤트입니다. 이 이벤트가 발생 하 여 처리할 수 있도록는 <xref:System.Windows.Controls.ScrollViewer>, 또는 파생 또는 유사한 클래스입니다. 예상 된 동작을 이벤트 데이터를 처리 됨으로 표시 부모 요소에는 이벤트를 처리 하는 이벤트의 소스에 포함 된 논리를 통해 보기에 표시 되는 <xref:System.Windows.Controls.ScrollViewer> 제어 합니다. 모두를 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 이벤트 또는 <xref:System.Windows.FrameworkElement.BringIntoView%2A> 방법에 대 한 성공 또는 실패를 이외의 이벤트는 일반적으로 표시 된 처리에 성공 정보를 전송 합니다. 다음과 같은 오류와 같은 요소 설정의 포함할 수 있습니다 <xref:System.Windows.UIElement.Visibility%2A> 이외의 일부 값 되 <xref:System.Windows.Visibility.Visible>합니다.  
  
 지정 하지 않는 서명을 사용 하는 경우는 `targetRectangle`, 전체 요소 크기를 다음 (해당 <xref:System.Windows.UIElement.RenderSize%2A>) 볼 수 있게 됩니다.  
  
 이 메서드를 호출 하 여 잠재적으로 호출 <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> 요소가 포함 된 부모 스크롤 가능한 영역에서 합니다. 이 요소는 스크롤 가능한 영역에 포함 되지 않은 경우는 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 이벤트는 발생 하지만 이벤트 수신기를 찾지 있기 때문에 영향을 주지 않습니다 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 제한 된 스크롤 영역에는 큰 그래픽 페이지의 단추에 큰 그래픽의 특정 영역에 뷰를 스크롤 하는 처리기.  
  
 [!code-xaml[BaseElementsSmorgasbord#BringIntoViewRectMarkup](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml#bringintoviewrectmarkup)]  
  
 [!code-csharp[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#bringintoviewrectcode)]
 [!code-vb[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#bringintoviewrectcode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.FlowDocumentScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ContextMenu ^ ContextMenu { System::Windows::Controls::ContextMenu ^ get(); void set(System::Windows::Controls::ContextMenu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenu : System.Windows.Controls.ContextMenu with get, set" Usage="System.Windows.FrameworkElement.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소 내에서 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]를 통해 상황에 맞는 메뉴가 요청될 때마다 표시되는 상황에 맞는 메뉴 요소를 가져오거나 설정합니다.</summary>
        <value>이 요소에 할당된 상황에 맞는 메뉴입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ContextMenu> 자체는 <xref:System.Windows.FrameworkElement> 파생 클래스 이므로 기술적으로 가능 <xref:System.Windows.Controls.ContextMenu> 자체에 <xref:System.Windows.FrameworkElement.ContextMenu%2A> 속성입니다. 그러나이 사용자는 혼란 스러운 상황에 맞는 메뉴 환경을 만들고이 방법은 권장 되지 않습니다.  
  
<a name="dependencyPropertyInfo_ContextMenu"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.ContextMenuProperty>|  
|메타 데이터 속성 설정 `true`|없음|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuClosing As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuClosing;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소의 상황에 맞는 메뉴를 닫기 직전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 닫히지 않도록 하려면 상황에 맞는 메뉴는 이벤트 처리기로 표시 해야 처리.  
  
 이 이벤트를 사용 하는 <xref:System.Windows.EventTrigger> 스타일에서 이벤트의 기본 서비스의 정의 참조 해야 합니다.  
  
 [!code-xaml[CorePseudocode#FEContextMenuClosing](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuclosing)]  
  
 (이 사용 되므로 필요한에서 이벤트를 구현 <xref:System.Windows.FrameworkElement> 는 노출은 기본 서비스 이벤트 매핑되지 않는 경우는 <xref:System.Windows.FrameworkElement.ContextMenuClosing> 식별자를 트리거로 사용할 수 있도록).  
  
 <xref:System.Windows.Controls.ContextMenu> 자체는 <xref:System.Windows.FrameworkElement> 클래스를 파생 하지만 <xref:System.Windows.FrameworkElement.ContextMenuClosing> 이벤트 발생 하지 것입니다 상황에 맞는 메뉴에서 직접. 대신 속성으로 상황에 맞는 메뉴를 "소유" 하 고 사용자 UI에서 상황에 맞는 메뉴 닫기가 시도 하는 경우에 발생 하는 요소에서 이벤트가 발생 합니다. 그러나 있기 <xref:System.Windows.Controls.ContextMenu> 자체에 <xref:System.Windows.FrameworkElement.ContextMenu%2A> 속성 (중첩 된 상황에 맞는 메뉴). 이 경우에 <xref:System.Windows.Controls.ContextMenu> 실제로 소유 하 고 중첩 된 <xref:System.Windows.Controls.ContextMenu> 및 중첩 된 상황에 맞는 메뉴를 되는 이벤트의 원본과 이벤트를 발생 시킬 수 있습니다.  
  
 <xref:System.Windows.Controls.ContextMenu> 클래스 자체에 비슷한 이벤트 (<xref:System.Windows.Controls.ContextMenu.Closed>) 하지만 <xref:System.Windows.Controls.ContextMenu.Closed> 이벤트 수는 없습니다 사용자 작업을 취소할 수 있는 기회입니다.  
  
<a name="routedEventInfo_ContextMenuClosing"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   재정의 <xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuOpening As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuOpening;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소의 상황에 맞는 메뉴를 열 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 상황에 맞는 메뉴를 열고 수동으로, 처리 된 것으로 이벤트 처리기 관련 이벤트를 표시 해야 합니다. 이 고, 그렇지의 기존 값을 <xref:System.Windows.FrameworkElement.ContextMenu%2A> 속성이 자동으로 상황에 맞는 메뉴를 열려면 사용 됩니다. 이벤트를 처리 된 기본 작업을 효과적으로 취소 하 고 수 값을 다시 설정할 수는 <xref:System.Windows.FrameworkElement.ContextMenu%2A> 속성 연 다음 새 <xref:System.Windows.Controls.ContextMenu>합니다. 그러나 고려해 야 타이밍 문제가 있습니다. 통해 상황에 맞는 메뉴를 완전히 바꾸기 위해는 <xref:System.Windows.FrameworkElement.ContextMenuOpening> 처리기 초기 상황에 맞는 메뉴 아니어야 null 이거나 비어 있습니다. 또는 이벤트를 처리 하 여 수동으로 새 상황에 맞는 메뉴를 엽니다 해야 할 수 있습니다. 자세한 내용은 [방법: ContextMenuOpening 이벤트 처리](~/docs/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event.md)합니다.  
  
 이 이벤트를 사용 하는 <xref:System.Windows.EventTrigger> 스타일에서 기본 연결 된 이벤트를 참조 해야 합니다.  
  
 [!code-xaml[CorePseudocode#FEContextMenuOpening](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuopening)]  
  
 (이 사용 되므로 필요한에서 이벤트를 구현 <xref:System.Windows.FrameworkElement> 는 노출은 기본 서비스 이벤트 매핑되지 않는 경우는 <xref:System.Windows.FrameworkElement.ContextMenuOpening> 식별자 트리거에서 사용할 수 있도록).  
  
 <xref:System.Windows.Controls.ContextMenu> 자체는 <xref:System.Windows.FrameworkElement> 파생 클래스 이지만 원본으로 열려는 상황에 맞는 메뉴에서이 이벤트를 발생 하지 것입니다. 속성으로 상황에 맞는 메뉴를 "소유" 하 고 사용자 UI에서 상황에 맞는 메뉴를 열려고 할 때만 발생 하는 요소에서 이벤트가 발생 합니다. 있기 <xref:System.Windows.Controls.ContextMenu> 자체에 <xref:System.Windows.FrameworkElement.ContextMenu%2A> 속성인 있지만이 시나리오를 방지 해야 (세부 정보를 참조 하세요. <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>).  
  
 합니다 <xref:System.Windows.Controls.ContextMenu> 자체 클래스에 비슷한 이벤트 (<xref:System.Windows.Controls.ContextMenu.Opened>) 하지만 <xref:System.Windows.Controls.ContextMenu.Opened> 사용자 작업을 취소할 기회가 제공 되지 않습니다.  
  
<a name="routedEventInfo_ContextMenuOpening"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   재정의 <xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContextMenuProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContextMenuProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContextMenuProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.ContextMenu" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Cursor ^ Cursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Input.Cursor with get, set" Usage="System.Windows.FrameworkElement.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마우스 포인터가 이 요소 위에 있을 때 표시되는 커서를 가져오거나 설정합니다.</summary>
        <value>표시할 커서입니다. 기본값은 이 종속성 속성마다 <see langword="null" />로 정의됩니다. 그러나 런타임 시 실제 기본값은 다양한 요소에서 비롯됩니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에이 속성을 설정 하면 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]의 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 프로세서에 대 한 형식 변환에 의존 합니다 <xref:System.Windows.Input.Cursor> 문자열을 평가 하는 클래스입니다. 제공된 된 문자열을 평가할지를 <xref:System.Windows.Input.CursorType> 값입니다. 자세한 내용은 <xref:System.Windows.Input.Cursor>를 참조하세요.  
  
 이 속성으로 설정 된 커서는 마우스 포인터가이 요소 위에 있을 때 표시 되지 것입니다 하는지 여부의 값에 따라 달라 집니다 이기도 합니다 <xref:System.Windows.FrameworkElement.ForceCursor%2A> 속성입니다. 또한는 활성 끌기, 마우스 캡처, 컨트롤 및 등과 내의 텍스트 편집 모드와 같은 이벤트 관련 고려 사항을이 속성에 지정 된 값 보다 높은 우선 순위를 사용 하 여 커서를 적용도 됩니다.  
  
 로 설정, 최종 기본적으로이 속성을 설정 하는 동작으로 되돌리려면 `null` 다시 합니다.  
  
 `null` 기본값인은 실제 커서 값 결정 여기 지연 되 고이 다른 곳에서 가져와야 하는 의미입니다. 제공 되지 않는 경우 소스에서 프로그래밍 방식으로 값을 기본 커서는 위에 시각적으로 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 응용 프로그램 화살표를 수 있습니다. 그러나 일시적인 커서 변경 사항으로 설정 되어 있지는 <xref:System.Windows.FrameworkElement.Cursor%2A> 를 통해 전달 될 때 요소의 값입니다. <xref:System.Windows.FrameworkElement.Cursor%2A> 속성은 유일한 보고서 null이 아닌 경우에 실제로 설정 된, 예를 들어 코드 또는 스타일을 통해 값입니다. 위에 마우스를 움직일 때마다를 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 발생을 <xref:System.Windows.UIElement.QueryCursor> 이벤트입니다. 이 이벤트는 버블링, 및 경로 따라 모든 요소는 이벤트를 처리 하 고이 이벤트의 인수를 통해 커서의 값을 설정 합니다. 대부분의 경우에서 명확한 시각적으로 커서를 생성 하는 메커니즘입니다. 경우는 <xref:System.Windows.UIElement.QueryCursor> 처리기는 커서 결과 반환한 다음 이벤트 처리 되 고 변경 된 값 인수에는 팩트의 값 보다 우선 합니다 <xref:System.Windows.FrameworkElement.Cursor%2A> 모든 수준에서 속성 하지 않는 한 <xref:System.Windows.FrameworkElement.ForceCursor%2A> 설정 됩니다.  
  
 사용자 지정 커서를 만드는 경우가, 일반적으로 설정한 경우이 속성의 정적 속성 값에는 <xref:System.Windows.Input.Cursors> 클래스입니다. 설정 <xref:System.Windows.FrameworkElement.Cursor%2A> 코드에서 다음 중 하나 필요로 합니다.  
  
-   호출 된 <xref:System.Windows.Input.Cursor> 을 가져올 생성자는 <xref:System.Windows.Input.Cursor> 인스턴스. 두 서명을 <xref:System.Windows.Input.Cursor> 스트림이나 파일을 만들고 있는 대비 하 여 생성자가 사용 하 여는 <xref:System.Windows.Input.Cursor> 사용자 지정 커서에 대 한 개체입니다.  
  
-   사용 하 여는 <xref:System.Windows.Input.CursorConverter> 클래스 및 해당 <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> 하 여 커서를 지정 하는 방법 <xref:System.Windows.Input.CursorType>, 또는으로 계산 되는 문자열을 <xref:System.Windows.Input.CursorType>, 캐스팅을 반환 하 고 <xref:System.Windows.Input.Cursor>.  
  
 설정 된 <xref:System.Windows.Input.Cursor> 사용자 지정 값으로 설정 되지 않은 부분 신뢰 합니다. 사용자 지정 커서에 대 한 자세한 내용은 참조 하세요. [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
<a name="dependencyPropertyInfo_Cursor"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.CursorProperty>|  
|메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 다음 예에서는 의도적으로 커서 그래픽을 설정 하는 방법을 보여 줍니다.  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
        <altmember cref="P:System.Windows.FrameworkElement.ForceCursor" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="CursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.CursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.CursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.Cursor" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContext">
      <MemberSignature Language="C#" Value="public object DataContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DataContext" />
      <MemberSignature Language="VB.NET" Value="Public Property DataContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataContext { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataContext : obj with get, set" Usage="System.Windows.FrameworkElement.DataContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>데이터 바인딩에 참여할 때 요소에 대한 데이터 컨텍스트를 가져오거나 설정합니다.</summary>
        <value>데이터 컨텍스트로 사용할 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *데이터 컨텍스트* 는 요소가 바인딩 뿐만 아니라 경로 같은 바인딩의 다른 특성에 사용 되는 데이터 원본에 대 한 부모 요소 로부터 정보를 상속할 수 있도록 하는 개념입니다.  
  
 데이터 컨텍스트 개체의 속성 바인딩을 사용 하 여.NET 개체를 직접 설정할 수 있습니다. 데이터 컨텍스트 설정할 수 있습니다 또는 한 <xref:System.Windows.Data.DataSourceProvider> 개체입니다.  
  
 속성 값이 종속성 속성을 상속 합니다. 자식 요소에 대 한 다른 값이 없는 경우 <xref:System.Windows.FrameworkElement.DataContext%2A> 속성 시스템에는 값을 설정 하는 다음 지역 값 또는 스타일을 통해 설정 된 <xref:System.Windows.FrameworkElement.DataContext%2A> 이 값이 할당 된 가장 가까운 부모 요소의 값입니다.  
  
 다음 속성 중 하나를 사용할 수는 또는 <xref:System.Windows.Data.Binding> 클래스 바인딩 소스를 명시적으로 지정 합니다.
  
    - <xref:System.Windows.Data.Binding.ElementName%2A>.
    - <xref:System.Windows.Data.Binding.Source%2A>.
    - <xref:System.Windows.Data.Binding.RelativeSource%2A>. 
  
  자세한 내용은 [방법: 바인딩 소스 지정](~/docs/framework/wpf/data/how-to-specify-the-binding-source.md)합니다.  
  
 XAML에 <xref:System.Windows.FrameworkElement.DataContext%2A> 가장 일반적으로는 <xref:System.Windows.Data.Binding> 선언 합니다. 속성 요소 구문이 나 특성 구문을 사용할 수 있습니다. 특성 구문 예제에서는이 페이지에 표시 됩니다. 설정 하려면 코드를 사용할 수도 있습니다 <xref:System.Windows.FrameworkElement.DataContext%2A>합니다.  
  
 <xref:System.Windows.FrameworkElement.DataContext%2A> 여기서 한 상황에 맞는 바인딩할 수 있습니다 다른 시나리오를 용이 하 게 바인딩할 수 있는 속성이입니다. 그러나에 바인딩하는 경우 <xref:System.Windows.FrameworkElement.DataContext%2A>, 순환 바인딩 참조를 만들지 않도록 주의 해야 (바인딩하지 마십시오를 <xref:System.Windows.FrameworkElement.DataContext%2A> 속성 값 상속 특성으로 인해 작업을 수행 하는 것이 불가능는 자신에 게는 <xref:System.Windows.FrameworkElement.DataContext%2A> 속성).  
  
<a name="xamlPropertyElementUsage_DataContext"></a>   
## <a name="xaml-property-element-usage"></a>XAML 속성 요소 사용  
  
```  
<object>  
  <object.DataContext>  
    <dataContextObject />  
  </object.DataContext>  
</object>  
```  
  
<a name="xamlAttributeUsage_DataContext"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object DataContext="bindingUsage"/>  
- or -  
<object DataContext="{resourceExtension contextResourceKey}"/>  
```  
  
<a name="xamlValues_DataContext"></a>   
## <a name="xaml-values"></a>XAML 값  
 *dataContextObject*  
 부모 요소 내에서 모든 바인딩에 대 한 데이터 컨텍스트로 사용 되는 직접 포함 된 개체입니다. 이 개체는 일반적으로 <xref:System.Windows.Data.Binding> 또는 다른 <xref:System.Windows.Data.BindingBase> 클래스를 파생 합니다. 또는 원시 데이터 바인딩에 사용할 모든 개체 형식의 실제 나중에 정의 된 바인딩을 사용 하 여 여기에서 배치 수 있습니다.  
  
 *bindingUsage*  
 적절 한 데이터 컨텍스트를으로 계산 되는 바인딩 사용 합니다. 자세한 내용은 [Binding 태그 확장](~/docs/framework/wpf/advanced/binding-markup-extension.md)을 참조하세요.  
  
 *resourceExtension*  
 다음 중 하나: [ `StaticResource` ](~/docs/framework/wpf/advanced/staticresource-markup-extension.md) 하거나 [ `DynamicResource` ](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md)합니다. 리소스에서 사용 되는 개체로 정의 하는 원시 데이터를 참조할 때 사용 됩니다. 참조 [XAML 리소스](~/docs/framework/wpf/advanced/xaml-resources.md)합니다.  
  
 *contextResourceKey*  
 내에서 요청 된 개체에 대 한 키 식별자는 <xref:System.Windows.ResourceDictionary>합니다.  
  
<a name="dependencyPropertyInfo_DataContext"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.DataContextProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 다음 예제에서는 데이터 컨텍스트 바인딩에 대해 작동 하는 방법을 보여 줍니다. 및 바인딩된 속성의 특정 값을 정의 하는 정보를 제공 합니다.  
  
 [!code-xaml[MasterDetail#DataContextProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty)]  
[!code-xaml[MasterDetail#DataContextProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty2)]  
[!code-xaml[MasterDetail#DataContextProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler DataContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.DataContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataContextChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ DataContextChanged;" />
      <MemberSignature Language="F#" Value="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 데이터 컨텍스트가 변경될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터 컨텍스트 및 데이터 바인딩에 설명은 참조 하세요. [데이터 바인딩 개요](~/docs/framework/wpf/data/data-binding-overview.md)합니다.  
  
> [!IMPORTANT]
>  경우는 <xref:System.Windows.FrameworkElement.DataContext%2A> 요소를 변경 하는이 요소에 모든 데이터 바인딩된 속성은 잠재적으로 영향을 받습니다. 이 데이터 컨텍스트를 상속 하는 논리 트리에서 현재 요소의 자식 요소인 모든 요소 및 현재 요소 자체에 적용 됩니다. 이러한 모든 기존 바인딩 다시 새 해석 해야 <xref:System.Windows.FrameworkElement.DataContext%2A> 고 바인딩 결과 다시 평가 됩니다. 데이터 바인딩 엔진의 발생을 기준으로 이러한 재계산이의 순서는 결정적이 지 않습니다.는 <xref:System.Windows.FrameworkElement.DataContextChanged> 이벤트입니다. 재계산이 조합 또는 이벤트 후 이벤트 전에 발생할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.DataContext" />
      </Docs>
    </Member>
    <Member MemberName="DataContextProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DataContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DataContextProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DataContextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataContextProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ DataContextProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DataContextProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DataContextProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.DataContext" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKey">
      <MemberSignature Language="C#" Value="protected internal object DefaultStyleKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultStyleKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property DefaultStyleKey As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ DefaultStyleKey { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultStyleKey : obj with get, set" Usage="System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>테마 스타일을 사용하거나 정의할 때 이 컨트롤에 대한 스타일을 참조하는 데 사용할 키를 가져오거나 설정합니다.</summary>
        <value>스타일 키입니다. 테마 스타일 조회의 일부로 올바르게 작동하려면 이 값은 스타일이 지정되는 컨트롤의 <see cref="T:System.Type" />이어야 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 일반적으로 직접 속성 접근자의 통해 설정 되지 않습니다. 새로 만들 때마다이 종속성 속성의 형식별 메타 데이터 재정의 대신 <xref:System.Windows.FrameworkElement> 클래스를 파생 합니다. 컨트롤을 파생 시킬 때 호출 된 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 에 대해 메서드를 <xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> 컨트롤의 정적 생성자 내에서 식별자를 파생 클래스 (또는 해당 하는 클래스 초기화).  
  
 컨트롤을 일반적으로 자체 형식으로이 속성의 기본값을 재정의 하지만 일부 경우에 사용할 수도에서 테마 사전 스타일 존재 하는 기본 형식입니다. 이 기본 컨트롤의 컨트롤 템플릿에 해당 파생된 컨트롤의 시각적 표시를 완전히 정의 및 파생된 형식에서 노출 하는 모든 추가 멤버 컨트롤 템플릿의 일부로 추가 요소를 필요로 하지 않는 경우에 실제.  
  
 테마 스타일을 사용 하지 않도록 의도적으로 컨트롤을 설정 합니다 <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> 속성을 `true`입니다.  
  
<a name="dependencyPropertyInfo_DefaultStyleKey"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 다음 예제에 설명에 나와 있는 종속성 속성 메타 데이터 재정의 사용을 보여 줍니다. 이 코드는 사용자 지정 컨트롤 클래스를 정의 `NumericUpDown` 전용된 컨트롤 라이브러리 어셈블리에서 사용할 수 있습니다. 그림된 정적 생성자는 일부 개인 초기화 함수를 참조, 클래스 처리기를 등록 (또 다른 일반적인 컨트롤 서브클래싱 시나리오; 참조 [라우트된 이벤트 것으로 표시를 처리 및 클래스 처리](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)) 마지막으로 재정의 된 <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> 종속성 속성 메타 데이터에는 `NumericUpDown` 클래스. <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> 일부 임의 스타일이 지정 되지 않은 컨트롤의 스타일을 조회 하는 테마 스타일 시스템을 사용 하는 규칙의 의도 한 키로 자체 형식이 항상 반환 합니다. 전체 샘플은 또한 해당 키에서 참조 되는 실제 컨트롤의 테마 스타일을 정의 참조 [테마 및 UI 자동화 지원 샘플이 있는 NumericUpDown 사용자 지정 컨트롤](https://go.microsoft.com/fwlink/?LinkID=160025)합니다.  
  
 [!code-csharp[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown2.cs)]
 [!code-vb[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown2.vb)]  

  이 예제에 대 한 전체 소스 코드는 모두 GitHub에서 사용할 수 있습니다 [ C# ](https://github.com/dotnet/samples/tree/master/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary) 하 고 [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary)합니다.

 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160025">테마 및 UI 자동화 지원 샘플이 있는 NumericUpDown 사용자 지정 컨트롤</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKeyProperty">
      <MemberSignature Language="C#" Value="protected internal static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly static initonly class System.Windows.DependencyProperty DefaultStyleKeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared ReadOnly DefaultStyleKeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="protected public: static initonly System::Windows::DependencyProperty ^ DefaultStyleKeyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultStyleKeyProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="frameworkElement.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>요소에 대한 초기화 프로세스가 완료되었음을 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하는 경우 <xref:System.Windows.FrameworkElement.BeginInit%2A> 이전에 호출 기본 구현 시킵니다는 <xref:System.Windows.FrameworkElement.Initialized> 이벤트입니다. 그렇지 않은 경우, <xref:System.Windows.FrameworkElement.BeginInit%2A> 를 호출 하지 않았습니다 것일 수도 여부 결정 <xref:System.Windows.FrameworkElement.BeginInit%2A> 가 호출 되 면 <xref:System.Windows.FrameworkElement.Initialized> 발생 하지 않습니다 대신 예외가 발생 하 고 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">요소에 대해 이전에 <see cref="M:System.Windows.FrameworkElement.EndInit" />를 호출하지 않고 <see cref="M:System.Windows.FrameworkElement.BeginInit" />를 호출한 경우</exception>
        <block subset="none" type="overrides"><para>요소를 로드 프로세스 동안 요소를 초기화할 때 발생 해야 하는 특수 한 처리를 제공 하려면이 메서드를 구현 합니다.  
  
구현 (기본값) 기본 구현을 초기화를 추적 하기 위해 일부 내부 플래그를 설정 하기 때문에 기본 구현을 호출 해야 합니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.FindName : string -&gt; obj" Usage="frameworkElement.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">요청한 요소의 이름입니다.</param>
        <summary>제공된 식별자 이름의 요소를 찾습니다.</summary>
        <returns>요청한 요소입니다. 일치하는 요소가 없으면 <see langword="null" />일 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요소에 자식 요소가 있으면 이러한 자식 요소는 요청 된 명명 된 요소에 대 한 모든 검색된을 재귀적으로 합니다.  
  
 <xref:System.Windows.FrameworkElement.FindName%2A> 현재 요소의 네임 스페이스 내에서 작동 합니다. 자세한 내용은 참조 하세요 [WPF XAML 이름 범위](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
        <related type="Article" href="https://msdn.microsoft.com/library/b7e61222-e8cf-48d2-acd0-6df3b7685d48">X:name 특성</related>
      </Docs>
    </Member>
    <Member MemberName="FindResource">
      <MemberSignature Language="C#" Value="public object FindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.FindResource : obj -&gt; obj" Usage="frameworkElement.FindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">요청된 리소스의 키 식별자입니다.</param>
        <summary>지정된 키를 사용하여 리소스를 검색하고 요청된 리소스가 없으면 예외를 throw합니다.</summary>
        <returns>요청된 리소스입니다. 제공된 키를 포함하는 리소스가 없으면 예외가 throw됩니다. 예외가 발생하면 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 값도 반환될 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  찾을 수 없는 키에 대 한이 메서드를 호출 하면 예외가 throw 됩니다. 경우 원하지 않는 호출에서 발생 하는 예외를 처리할 <xref:System.Windows.FrameworkElement.FindResource%2A>, 호출 <xref:System.Windows.FrameworkElement.TryFindResource%2A> 대신 합니다. <xref:System.Windows.FrameworkElement.TryFindResource%2A> 반환 `null` 요청된 된 리소스를 찾을 수 없으면 시점과 예외를 throw 하지 않습니다.  
  
 리소스를 호출 하는 요소에 없는 경우 검색된 다음 다음 응용 프로그램을 다음 테마 및 마지막으로 시스템 리소스를 논리적 트리에서 부모 요소는 합니다. 이 조회 방법론은 태그에 대 한 동적 리소스 참조 여 리소스를 요청 하는 경우 트리를 검색 하는 방법을 동일 합니다. 리소스 조회에 대 한 자세한 내용은 참조 하세요. [XAML 리소스](~/docs/framework/wpf/advanced/xaml-resources.md)합니다.  
  
 일반적으로 즉시 캐스팅 하는 <xref:System.Windows.FrameworkElement.FindResource%2A> 반환 값 속성의 형식에는 반환 되는 리소스 값을 사용 하 여 설정 합니다.  
  
 리소스 키 필요가 없는 문자열입니다. 예를 들어 컨트롤 테마 수준으로 지정에 대 한 스타일을 <xref:System.Type> 컨트롤 및 응용 프로그램 또는 페이지 스타일에 대 한 컨트롤 일반적으로 사용 하 여이 동일한 키 규칙입니다. 세부 정보를 참조 하세요 [스타일 및 템플릿](~/docs/framework/wpf/controls/styling-and-templating.md) 하거나 [XAML 리소스](~/docs/framework/wpf/advanced/xaml-resources.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 명명 된 리소스를 가져오고 속성에 맞게 적절 한 형식으로 캐스팅 합니다.  
  
 [!code-csharp[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertiesOvwSupport/CSharp/page3.xaml.cs#resourceproceduralget)]
 [!code-vb[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertiesOvwSupport/visualbasic/page3.xaml.vb#resourceproceduralget)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException"><paramref name="resourceKey" />가 발견되었거나 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 이벤트에 대한 이벤트 처리기가 존재하지 않습니다.  
  
또는 
 <paramref name="resourceKey" />가 발견되지 않았으며 <see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> 이벤트에서 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 속성이 <see langword="false" />입니다.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="resourceKey" />가 <see langword="null" />입니다.</exception>
        <altmember cref="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FlowDirection">
      <MemberSignature Language="C#" Value="public System.Windows.FlowDirection FlowDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FlowDirection FlowDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FlowDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property FlowDirection As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FlowDirection FlowDirection { System::Windows::FlowDirection get(); void set(System::Windows::FlowDirection value); };" />
      <MemberSignature Language="F#" Value="member this.FlowDirection : System.Windows.FlowDirection with get, set" Usage="System.Windows.FrameworkElement.FlowDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>텍스트 및 다른 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 요소가 해당 레이아웃을 제어하는 부모 요소 안에서 표시되는 방향을 가져오거나 설정합니다.</summary>
        <value>텍스트 및 기타 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 요소가 열거형의 값으로 해당 부모 요소 안에서 표시되는 방향입니다. 기본값은 <see cref="F:System.Windows.FlowDirection.LeftToRight" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 종속성 속성 사용 설정 된 <xref:System.Windows.FrameworkElement.FlowDirection%2A> 이 요소에 있습니다. 속성 값 상속을 설정으로 인해 <xref:System.Windows.FrameworkElement.FlowDirection%2A> 요소에 설정 될 수 있습니다 <xref:System.Windows.FrameworkElement.FlowDirection%2A> 설정 되지 않은 모든 자식 요소 <xref:System.Windows.FrameworkElement.FlowDirection%2A> 로컬로 또는 다른 방법을 통해 스타일과 같은 합니다.  
  
 이 속성은 하지 자동 설정 모든 응용 프로그램 문화권 정보의 일부로 요소는 반드시 문화권 정보에 의해 포함 된 일반 흐름 방향을 따릅니다는 콘텐츠를 포함 될 수 있으므로 합니다. 전역화 고려 사항에 대 한 자세한 내용은 참조 하세요. [WPF의 전역화](~/docs/framework/wpf/advanced/globalization-for-wpf.md)합니다.  
  
 이 속성은 정의 된 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 접근자 속성을 종속성 속성으로 작동 하도록 합니다. 그러나도 등록 연결, 연결된 된 속성으로도 할 수 있도록 합니다. 연결 된 등록은 주로 속성 값 상속 지원 되지만 연결 된 속성을 true로 속성을 사용할 수도 있습니다. 연결 된 속성은 관련 흐름 방향을 설정 하려는 개체에만 <xref:System.Windows.FrameworkElement> 부모 요소가 하면 레이아웃을 수행 하는 되지 자체는 <xref:System.Windows.FrameworkElement>, 없고 이미 정의 된 보다 직접적 `FlowDirection` 속성입니다. (같은 흐름의 일부 문서 클래스 <xref:System.Windows.Documents.Block> 하 고 <xref:System.Windows.Documents.Inline> 자체 정의 `FlowDirection`,이 속성도 흐름 방향을 설정 수 있습니다. 속성 값이 다음 읽기 최종 콘텐츠 호스트에서 연결 된 속성 사용 하지 않고도.)  
  
<a name="xamlAttributeUsage_FlowDirection"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
 \<*object* **FlowDirection**="<xref:System.Windows.FlowDirection>"/>  
  
<a name="xamlTextUsage_FlowDirection"></a>   
## <a name="xaml-text-usage"></a>XAML 텍스트 사용  
 되지 않는 클래스에서이 속성을 설정할 수도 있습니다 <xref:System.Windows.FrameworkElement> 파생 클래스에서 다음과 같은 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 연결 된 속성 사용:  
  
 `<` *object* `FrameworkElement.`**FlowDirection**="<xref:System.Windows.FlowDirection>`"/>`  
  
<a name="dependencyPropertyInfo_FlowDirection"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.FlowDirectionProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 이 속성은 종속성 속성과 연결된 된 속성입니다. 설명을 참조 하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FlowDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FlowDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FlowDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FlowDirectionProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FlowDirectionProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style FocusVisualStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style FocusVisualStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusVisualStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ FocusVisualStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FocusVisualStyle : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>키보드 포커스를 캡처할 때 이 요소에 적용되는 모양, 효과 또는 기타 스타일 특성을 사용자 지정할 수 있는 속성을 가져오거나 설정합니다.</summary>
        <value>포커스에 적용하려는 스타일입니다. 종속성 속성에 선언된 기본값은 빈 정적 <see cref="T:System.Windows.Style" />입니다. 그러나 런타임 시 유효 값은 대체로(항상 그렇지는 않음) 컨트롤에 대한 테마 지원에서 제공되는 스타일입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 시각적 모양에 영향을 줍니다 하지만 나타내지 않는 <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> 메타 데이터에서입니다. 시각적 모양 변경 이벤트 구동 모든 시간에 적용 되지 않을 수 고 따라서은 일반적으로 보고 메타 데이터의 시각적 개체 또는 레이아웃 정보가 때문입니다.  
  
 개념적으로 컨트롤에 적용 되는 포커스의 시각적 동작 컨트롤 간에 일관 된 있어야 합니다. 일관성을 적용 하는 가장 적절 한 방법은 전체 테마를 작성 하는 경우에 포커스 비주얼 스타일을 변경 하는 경우 테마의 일부가 아니라 개별 컨트롤 스타일에서이 속성을 설정할 수는 없습니다. 컨트롤별 동작을 의도적으로 일관 된 테마를 하려는 경우 더 좋은 방법은 사용 하는 것 트리거 스타일의 개별 입력된 상태 속성에 대 한 같은 <xref:System.Windows.UIElement.IsFocused%2A> 또는 <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>, 하지 않는 방식으로 작업을 수행 하 고 모든 기존 포커스 비주얼 스타일을 사용 하 여 시각적 방해 합니다. 디자인 의도 대 한 자세한 내용은 <xref:System.Windows.FrameworkElement.FocusVisualStyle%2A> 및 대체 내용은 속성을 집중 [컨트롤 및 FocusVisualStyle의 포커스 스타일 지정](~/docs/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle.md)합니다.  
  
<a name="xamlAttributeUsage_FocusVisualStyle"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object FocusVisualStyle="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_FocusVisualStyle"></a>   
## <a name="xaml-property-element-usage"></a>XAML 속성 요소 사용  
  
<a name="xamlValues_FocusVisualStyle"></a>   
## <a name="xaml-values"></a>XAML 값  
 *resourceExtension*  
 다음 중 하나:, 또는 합니다. 참조 [XAML 리소스](~/docs/framework/wpf/advanced/xaml-resources.md)합니다.  
  
 *styleResourceKey*  
 요청 되는 스타일을 식별 하는 키입니다. 키의 기존 리소스에 참조를 <xref:System.Windows.ResourceDictionary>입니다.  
  
> [!NOTE]
>  속성 요소 구문은 기술적으로 가능 하지만 권장 하지는 않습니다. 참조 [인라인 스타일 및 템플릿](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)합니다. 사용 하 여 바인딩 참조 또는 <xref:System.Windows.Data.Binding> 가능 하지만 일반적이 지 않은 이기도 합니다.  
  
<a name="dependencyPropertyInfo_FocusVisualStyle"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>|  
|메타 데이터 속성 설정 `true`|없음|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusVisualStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusVisualStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusVisualStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusVisualStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursor">
      <MemberSignature Language="C#" Value="public bool ForceCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ForceCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForceCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ForceCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ForceCursor : bool with get, set" Usage="System.Windows.FrameworkElement.ForceCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.FrameworkElement" />가 <see cref="P:System.Windows.FrameworkElement.Cursor" /> 속성에서 선언된 커서를 렌더링하도록 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]에 명령할 것인지를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>이 요소 위에 있을 때 커서에 대한 현재 <see cref="P:System.Windows.FrameworkElement.Cursor" /> 설정(모든 자식 요소 포함)을 사용하여 커서가 표시되도록 하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 설정 하는 경우 `true` 자식 요소에서 설정한의 커서 설정을 재정의 합니다. 이렇게 하면 응용 프로그램에서 일반적 이므로 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 자식 요소는 커서를 지정 하려는 경우에 특히 사용자에 대해 혼동 될 수 있습니다. 설정 <xref:System.Windows.FrameworkElement.ForceCursor%2A> 컨트롤 서브클래싱 또는 합성 시나리오에 더 적합 합니다.  
  
<a name="dependencyPropertyInfo_ForceCursor"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.ForceCursorProperty>|  
|메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 다음 예제에서는 커서 값을 강제로 수행 합니다.  
  
 [!code-xaml[ForceCursor#ForceCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/ForceCursor/CS/default.xaml#forcecursor)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="ForceCursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForceCursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForceCursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForceCursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForceCursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ForceCursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.ForceCursor" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBindingExpression (dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetBindingExpression : System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.GetBindingExpression dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">바인딩을 가져올 대상 <see cref="T:System.Windows.DependencyProperty" />입니다.</param>
        <summary>지정된 속성의 바인딩을 나타내는 <see cref="T:System.Windows.Data.BindingExpression" />을 반환합니다.</summary>
        <returns>대상 속성에 활성 바인딩이 있으면 <see cref="T:System.Windows.Data.BindingExpression" />을 반환하고, 그렇지 않으면 <see langword="null" />을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 반환 값을 확인 `null` 속성에 활성 바인딩이 있는지 여부를 확인 하 여 기술입니다.  
  
 이 메서드는 실제로 편리한 래퍼를 <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType> 메서드. <xref:System.Windows.FrameworkElement.GetBindingExpression%2A> 현재 인스턴스를 전달 하며 `dp` 매개 변수를 <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.BindingOperations" />
      </Docs>
    </Member>
    <Member MemberName="GetFlowDirection">
      <MemberSignature Language="C#" Value="public static System.Windows.FlowDirection GetFlowDirection (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.FlowDirection GetFlowDirection(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFlowDirection (element As DependencyObject) As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::FlowDirection GetFlowDirection(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetFlowDirection : System.Windows.DependencyObject -&gt; System.Windows.FlowDirection" Usage="System.Windows.FrameworkElement.GetFlowDirection element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="P:System.Windows.FrameworkElement.FlowDirection" />을 반환할 요소입니다.</param>
        <summary>지정된 <see cref="T:System.Windows.DependencyObject" />에 대한 <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 연결된 속성의 값을 설정합니다.</summary>
        <returns>열거형 값인 요청된 흐름 방향입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드의 주요 목적은 대 한 연결 된 속성 구문을 지원 하는 것은 <xref:System.Windows.FrameworkElement.FlowDirection%2A> 속성에서 자식 요소의 제공된 된 <xref:System.Windows.FrameworkElement> 해당 부모 요소 내에서 정렬에 대 한 흐름 방향을 지정 하 합니다. 현재 값을 검색할 <xref:System.Windows.FrameworkElement>를 직접 사용 하 여 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 접근자 <xref:System.Windows.FrameworkElement.FlowDirection%2A>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="frameworkElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">시각적 표시를 수행하는 요소 부분의 크기입니다.</param>
        <summary>클리핑 마스크의 기하 도형을 반환합니다. 이 마스크는 레이아웃 시스템에서 사용 가능한 표시 공간보다 큰 요소를 정렬하려고 하면 적용됩니다.</summary>
        <returns>클리핑 기하 도형입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 여백에서 차감 합니다 `layoutSlotSize` 레이아웃 시스템 동작의 일부로.  
  
 반환 된 null 참조 클리핑은 발생을 나타냅니다. 기본 구현에서는 항상 반환 `null` 때 <xref:System.Windows.UIElement.ClipToBounds%2A> 는 `false`합니다. 이 메서드는 <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType>를 재정의합니다. <xref:System.Windows.FrameworkElement> 구현을 사용 하 여 <xref:System.Windows.FrameworkElement.MaxHeight%2A> 및 <xref:System.Windows.FrameworkElement.MaxWidth%2A> 해당 계산에서 합니다. 여러 하위 클래스 <xref:System.Windows.FrameworkElement> 다시이 메서드를 재정의 합니다. <xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>에서 반환을 항상 재정의 `null` 표시기 경우가 많기 때문에 의도적으로 일반적인 범위 외부에 있습니다. <xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> 및 <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType> 반환 `null` 하는 경우 <xref:System.Windows.UIElement.ClipToBounds%2A> 는 `false`합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>기본 구현에서는 항상 반환 <see langword="null" /> 때 <see cref="P:System.Windows.UIElement.ClipToBounds" /> 는 <see langword="false" />합니다. 재정의 된 관계 및 파생된 클래스 및 기본 클래스 대신 해당 레이아웃 논리의 용도 따라 예외가 있지만 일반적으로이 동작을 유지 하기 위해 예상 됩니다.</para></block>
        <altmember cref="P:System.Windows.UIElement.Clip" />
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="GetTemplateChild">
      <MemberSignature Language="C#" Value="protected internal System.Windows.DependencyObject GetTemplateChild (string childName);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Windows.DependencyObject GetTemplateChild(string childName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetTemplateChild (childName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Windows::DependencyObject ^ GetTemplateChild(System::String ^ childName);" />
      <MemberSignature Language="F#" Value="member this.GetTemplateChild : string -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetTemplateChild childName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="childName">찾을 자식의 이름입니다.</param>
        <summary>인스턴스화된 <see cref="T:System.Windows.Controls.ControlTemplate" />의 시각적 트리에서 명명된 요소를 반환합니다.</summary>
        <returns>요청한 요소입니다. 요청된 이름이 요소가 없으면 <see langword="null" />일 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 템플릿 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 은 자체 포함 된 이름 범위에 있어야 합니다. 템플릿을 다시 사용 되며 템플릿에 정의 된 이름이 없는 고유 하 게 남아 각 컨트롤의 여러 인스턴스는 해당 템플릿을 인스턴스화할 때 때문입니다. 호출 된 <xref:System.Windows.FrameworkElement.GetTemplateChild%2A> 인스턴스화된 후 템플릿에서 제공 되는 개체에 대 한 참조를 반환 하는 방법입니다. 사용할 수 없습니다는 <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> 때문에 서식 파일에서 항목을 찾을 방법 <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> 범위 보다 일반적인에서 작동 하 고 간의 연결이 <xref:System.Windows.Controls.ControlTemplate> 클래스 자체 및 인스턴스화된 템플릿이 적용 되 면 합니다.  
  
 <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> 이 방법으로 동일한 기능을 제공합니다. <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> 대신 공용 보호 되 고 사용 하 여 명명 된 항목에 찾고 요소 내에서 서식 파일에 액세스할 수 있는 올바른 이름-범위 고려 사항입니다. 사용 하 여 <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> 해야 할 때 부모 컨트롤 외부에서 요소를 가져옵니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkTemplate.FindName(System.String,System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal override System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>시각적 부모가 없는 경우 이 요소에 대한 대체 논리 부모를 반환합니다.</summary>
        <returns>이 메서드의 WPF 프레임워크 수준 구현에 시각적 부모가 아닌 연결이 있을 때마다 <see langword="null" /> 이외의 값을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType>를 재정의합니다. 기본값 <xref:System.Windows.FrameworkElement> 구현은 시작 하는 것과 동일한 결과 즉 예상된 단일 시각적 부모는 <xref:System.Windows.FrameworkElement.Parent%2A> 값입니다. 파생된 클래스 구현을 대체 부모 관계를 반환할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetVisualChild">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Visual GetVisualChild (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Visual GetVisualChild(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetVisualChild (index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Visual ^ GetVisualChild(int index);" />
      <MemberSignature Language="F#" Value="override this.GetVisualChild : int -&gt; System.Windows.Media.Visual" Usage="frameworkElement.GetVisualChild index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">컬렉션에서 요청된 자식 요소의 인덱스(0부터 시작)입니다.</param>
        <summary><see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" />를 재정의하며, 자식 요소 컬렉션에서 지정된 인덱스의 자식을 반환합니다.</summary>
        <returns>요청된 자식 요소입니다. <see langword="null" />을 반환하면 안 됩니다. 지정된 인덱스가 범위를 벗어난 경우 예외가 발생합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 <xref:System.Windows.FrameworkElement> 구현만 유효한 인덱스는 0입니다. 콘텐츠 모델에 <xref:System.Windows.FrameworkElement.GetVisualChild%2A> 0 개 이상의 자식 요소 컬렉션이 아닌를 지원 합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용자 지정 표시기에서 선언 된 값을 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Media.VisualCollection> 여러 시각적 자식에 대 한 유지 관리 합니다. 이러한 값의 재정의 통해 보고 됩니다 <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> 고 <xref:System.Windows.FrameworkElement.GetVisualChild%2A>입니다.  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>이 구현 시각적 자식 요소의 설명이 포함 된 컬렉션을 유지 하지 않는 요소에만 유효 합니다. 이러한 컬렉션에 있는 모든 요소는이 메서드를 재정의 하 고 해당 요소에서 지원 되는 자식 요소 컬렉션에서 해당 인덱스에 인덱스를 매핑합니다 해야 합니다. 범위는 0에서 인덱스 <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> (-1)는 유효한 요소를 반환 해야 다른 모든 인덱스는 범위를 벗어난 예외를 throw 해야 합니다. 자식 컬렉션을에 지 및 재정의 된 요소 형식의 예로 <see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /> 둘 이상의 가능한 자식 반환 하려면 <see cref="T:System.Windows.Controls.Panel" />합니다.  
  
기본 구현은 <see cref="T:System.Windows.FrameworkElement" /> visual 자식 노드가 한 개만 가정 합니다. 전달 된 모든 값 <paramref name="index" /> 아닌 0을 사용 하면 예외가 throw 됩니다. 데코레이터, 표시기 또는 특수 한 렌더링을 사용 하 여 요소와 같은 몇 가지 공통 요소를 재정의 합니다 <see cref="T:System.Windows.FrameworkElement" /> 구현의 (중간 기본 클래스에서 구현). 다른 컬렉션을 허용 하는 반면 일부 구현에서는 여전히 한 시각적 자식을 적용 합니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Height : double with get, set" Usage="System.Windows.FrameworkElement.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>제안된 요소 높이를 가져오거나 설정합니다.</summary>
        <value>요소의 높이([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])입니다. 기본값은 <see cref="F:System.Double.NaN" />입니다. 이 값은 0.0보다 크거나 같아야 합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Height%2A> 쓰기 가능한 세 가지 속성 중 하나인 <xref:System.Windows.FrameworkElement> 높이 정보를 지정 하는 합니다. 다른 두 가지 <xref:System.Windows.FrameworkElement.MinHeight%2A> 고 <xref:System.Windows.FrameworkElement.MaxHeight%2A>입니다. 간에 충돌이 발생 하는 경우 이러한 값을 실제 높이 결정에 대 한 응용 프로그램의 순서는 첫 번째 <xref:System.Windows.FrameworkElement.MinHeight%2A> 다음을 적용할 수 해야 <xref:System.Windows.FrameworkElement.MaxHeight%2A>, 마지막으로, 범위 안에 있으면 <xref:System.Windows.FrameworkElement.Height%2A>합니다.  
  
 이 요소가 다른 요소 내에서 자식 요소 이면이 속성 값으로 설정한 실제로 제안 된 값입니다. 레이아웃 시스템 뿐만 아니라 부모 요소의 특정 레이아웃 논리 값 입력으로 사용 된 바인딩이 아닌 레이아웃 과정입니다. 실질적으로 <xref:System.Windows.FrameworkElement> 는 거의 항상 다른; 자식 요소가 설정 하는 경우에 합니다 <xref:System.Windows.FrameworkElement.Height%2A> 에서 <xref:System.Windows.Window>합니다. (에 대 한 <xref:System.Windows.Window>, 응용 프로그램을 호스트 하는 값이 기본 응용 프로그램 모델의 기본 렌더링 가정은 Hwnd를 만드는 하는 경우 사용 됩니다.)  
  
 또한 허용 가능한 <xref:System.Double> 값이이 속성 일 수도 있습니다 <xref:System.Double.NaN?displayProperty=nameWithType>합니다. 코드에서 자동 크기 조정 동작을 지정 하는 방법입니다. [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 는 값을 설정 하면 문자열 "Auto" (대/소문자 구분) 자동 크기 조정 동작을 사용 하도록 설정 합니다. 자동 크기 조정 동작 요소를 사용할 수 있는 높이 맞게 채워짐을 나타냅니다. 그러나 특정 컨트롤 크기 조정 동작은 특히 다시 사용 하도록 설정 하지 않은 자동 사용 하지 않도록 설정 됩니다는 기본 테마 스타일을 통해 기본 값 제공 하는 자주 note 합니다.  
  
 이 속성의 반환 값에 설정 된 값과 항상 동일 합니다. 반대로, 값은 <xref:System.Windows.FrameworkElement.ActualHeight%2A> 다를 수 있습니다. 이 발생할 수 있습니다 하거나 정적으로 몇 가지 이유로 권장 되는 크기를 거부 하는 레이아웃 또는 일시적으로 합니다. 속성 시스템의 집합을 기준으로 레이아웃 시스템 자체적으로 비동기적으로 작동 <xref:System.Windows.FrameworkElement.Height%2A> 한 특정 크기 조정 속성 변경 내용을 아직 처리 되지 않을 수 있습니다.  
  
 에 대 한 값 제한 합니다 <xref:System.Double> 값에 의해 적용 되는 <xref:System.Windows.ValidateValueCallback> 메커니즘입니다. 잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.  
  
 유효성 검사 외에도 비결 정적 상한 값에 바인딩된 <xref:System.Windows.FrameworkElement.Height%2A> 레이아웃 시스템에 적용 되는 (이 매우 큰 숫자로 보다 큰 <xref:System.Single.MaxValue?displayProperty=nameWithType> 하지만 미만의 <xref:System.Double.MaxValue?displayProperty=nameWithType>). 이 경계를 초과 하는 경우 요소는 렌더링 되지 않으며, 예외가 throw 되지 않습니다. 설정 하지 않으면 <xref:System.Windows.FrameworkElement.Height%2A> 비결 정적 상한 값이 초과 가능한 시각적 표시, 또는 사용자의 최대 크기 보다 훨씬 큰 값으로.  
  
<a name="xamlAttributeUsage_Height"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object Height="double"/>  
- or -  
<object Height="qualifiedDouble"/>  
- or -  
<object Height="Auto"/>  
```  
  
<a name="xamlValues_Height"></a>   
## <a name="xaml-values"></a>XAML 값  
 *double*  
 <xref:System.Double>  
  
 문자열 표현 된 <xref:System.Double> 0.0 보다 크거나 같은 값입니다. 상한 정보에 대한 설명을 참조하세요. 이 값으로 해석 되는 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 측정 합니다. 문자열 소수점이 하를 명시적으로 포함 되지 해야 합니다. 예를 들어 값 `1` 허용 됩니다.  
  
 *qualifiedDouble*  
 A *이중* 단위 선언 문자열 중 하나에서 다음 위에서 설명한 대로 값: `px`, `in`, `cm`, `pt`합니다.  
  
 `px` (기본값) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` 인치; 1에서 96px = =  
  
 `cm` 센티미터; 1cm==(96/2.54) px  
  
 `pt` 포인트; 1pt==(96/72) px  
  
 **자동**  
 자동 크기 조정 동작을 사용 하도록 설정 합니다. 설명 부분을 참조하세요.  
  
<a name="dependencyPropertyInfo_Height"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.HeightProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.ActualHeight" />
      </Docs>
    </Member>
    <Member MemberName="HeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.Height" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.HorizontalAlignment HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.HorizontalAlignment HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalAlignment As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::HorizontalAlignment HorizontalAlignment { System::Windows::HorizontalAlignment get(); void set(System::Windows::HorizontalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalAlignment : System.Windows.HorizontalAlignment with get, set" Usage="System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>패널 또는 항목 컨트롤 같은 부모 요소에 구성되어 있을 경우 이 요소에 적용되는 가로 맞춤 특징을 가져오거나 설정합니다.</summary>
        <value>열거형 값인 가로 맞춤 설정입니다. 기본값은 <see cref="F:System.Windows.HorizontalAlignment.Stretch" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때 <xref:System.Windows.FrameworkElement.Height%2A> 하 고 <xref:System.Windows.FrameworkElement.Width%2A> 속성 요소에 명시적으로 설정 하 고 이러한 측정 레이아웃 중 더 높은 우선 일반적인 설정의 효과 취소 합니다 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> 하려면 <xref:System.Windows.HorizontalAlignment.Stretch>합니다.  
  
 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> 가 [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 란 실제로 종속성 속성에 대 한 속성 접근자입니다. 이 특정 종속성 속성에는 상당히 자주 해당 "기본값"이 서브클래싱된 요소, 특히 컨트롤에서에서 서로 다르게 설정 되어 있습니다. 일반적으로이 두 가지 방법 중 하나에서 발생 합니다: 종속성 속성은 특정 서브 클래스를 하지만, 해당 기본값을 설정 하는 것에 대 한 다른 메타 데이터에 다시 등록 또는 해당 종속성 속성 값을 다르게 설정 하는 기본 스타일이 적용 되 고 있습니다. 예를 들어, 명백한 "기본값인" <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> 에 대 한는 <xref:System.Windows.Controls.Label> 컨트롤이 <xref:System.Windows.HorizontalAlignment.Left>경우에 <xref:System.Windows.Controls.Label> 상속 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> 에서 직접 <xref:System.Windows.FrameworkElement>입니다. 기본 스타일 내에서 다시 설정 된 값 때문에 이것이 <xref:System.Windows.Controls.Label>, 스타일의 컨트롤 템플릿 내에서.  
  
 <xref:System.Windows.Controls.Canvas> 사용 하지 않습니다 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> 때문에 레이아웃을 구성할 때 <xref:System.Windows.Controls.Canvas> 절대 위치 설정을 기반으로 합니다.  
  
 상속 되는 경우 <xref:System.Windows.Controls.Label> 또는 파생 클래스 <xref:System.Windows.Controls.Label> 되도록이 종속성 속성의 기본값을 재정의 <xref:System.Windows.HorizontalAlignment.Left>합니다.  
  
<a name="dependencyPropertyInfo_HorizontalAlignment"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HorizontalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HorizontalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HorizontalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HorizontalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HorizontalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritanceBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Windows.InheritanceBehavior InheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.InheritanceBehavior InheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property InheritanceBehavior As InheritanceBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Windows::InheritanceBehavior InheritanceBehavior { System::Windows::InheritanceBehavior get(); void set(System::Windows::InheritanceBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.InheritanceBehavior : System.Windows.InheritanceBehavior with get, set" Usage="System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.InheritanceBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>속성 값 상속, 리소스 키 조회 및 RelativeSource FindAncestor 조회를 위한 범위 제한을 가져오거나 설정합니다.</summary>
        <value>열거형 값입니다. 기본값은 <see cref="F:System.Windows.InheritanceBehavior.Default" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요소에 특정 경계 집합 트리 <xref:System.Windows.FrameworkElement.InheritanceBehavior%2A> 의도적으로 응용 프로그램 리소스를 확인 하거나 현재 요소를 쿼리에서 RelativeSource FindAncestor 조회를 방지 하기 위해 force 리소스 조회에 상속 동작의 범위를 제한 하려면 또는 더 이상입니다. RelativeSource FindAncestor 조회 바인딩을 사용 하는 경우 발생을 <xref:System.Windows.Data.RelativeSource> 있는 해당 <xref:System.Windows.Data.RelativeSource.Mode%2A> 속성이로 설정 된 <xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType> 값.  
  
 이 속성을 설정 하려면 파생된 클래스를 사용 하도록 하려는 경우 이렇게 해야 정적 생성자 내에서 또는 다른 초기화 루틴입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Frame" />
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.FrameworkElement" />가 초기화될 때 발생합니다. 이 이벤트는 <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> 속성의 값이 <see langword="false" />(정의되지 않음)에서 <see langword="true" />로 변경되는 경우와 일치합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트 됩니다 될 때마다 발생 합니다 <xref:System.Windows.FrameworkElement.EndInit%2A> 또는 <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> 메서드를 호출 합니다. 두 방법 중 하나에 대 한 호출 또는 응용 프로그램 코드에서 나올 수는 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 프로세서 동작 때를 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 페이지를 처리 합니다.  
  
 처리 하도록 선택 했는지 여부 <xref:System.Windows.FrameworkElement.Loaded> 또는 <xref:System.Windows.FrameworkElement.Initialized> 요구 사항에 따라 달라 집니다. 요소 속성을 읽이 필요가 없습니다, 하는 경우 속성을 다시 설정 하려고 하 고 모든 레이아웃 정보가 필요 하지 않은 <xref:System.Windows.FrameworkElement.Initialized> 더 나은 이벤트 동작을 수행할 수 있습니다. 가능 요소의 모든 속성이 필요 하 고 레이아웃을 다시 설정할 수 있는 속성을 설정 하는 경우 <xref:System.Windows.FrameworkElement.Loaded> 더 나은 이벤트 동작을 수행할 수 있습니다. 처리기에 필요한 새로운 레이아웃 전달을는 레이아웃 시스템에서 해석 되는 모든 속성이 다시 설정 하는 경우 재입력 주의 해야 합니다. (확인 해야 하는 <xref:System.Windows.FrameworkPropertyMetadata> 속성에는 새 레이아웃을 요구할 수의 확실 하지 않은 경우에 속성 값 변경 된 경우에 전달 합니다.)  
  
 개체에 대 한 이벤트 시퀀스에 대 한 자세한 내용은 <xref:System.Windows.FrameworkElement>에 여러 개의 관련 응용 프로그램 및 요소 클래스를 참조 하 고 [개체 수명 이벤트](~/docs/framework/wpf/advanced/object-lifetime-events.md)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InputScope">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputScope InputScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputScope InputScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InputScope" />
      <MemberSignature Language="VB.NET" Value="Public Property InputScope As InputScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputScope ^ InputScope { System::Windows::Input::InputScope ^ get(); void set(System::Windows::Input::InputScope ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputScope : System.Windows.Input.InputScope with get, set" Usage="System.Windows.FrameworkElement.InputScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.FrameworkElement" />에서 사용되는 입력에 대한 컨텍스트를 가져오거나 설정합니다.</summary>
        <value>대체 입력 메서드에서 입력이 해석되는 방법을 수정하는 입력 범위입니다. 기본값은 <see langword="null" />(명령의 기본 처리 결과)입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 속성 값이 종속성 속성을 상속 합니다. 자식 요소에 대 한 다른 값이 없는 경우 <xref:System.Windows.FrameworkElement.InputScope%2A> 속성 시스템에는 값을 설정 하는 다음 지역 값 또는 스타일을 통해 설정 된 <xref:System.Windows.FrameworkElement.InputScope%2A> 이 값이 할당 된 가장 가까운 상위 요소의 값입니다.  
  
 하지만 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 구문 사용은 나열 되 고 구문적으로,이 속성 설정 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 흔하지 않습니다.  
  
<a name="dependencyPropertyInfo_InputScope"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.InputScopeProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputScope" />
        <altmember cref="T:System.Windows.IInputElement" />
      </Docs>
    </Member>
    <Member MemberName="InputScopeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty InputScopeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty InputScopeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InputScopeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ InputScopeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable InputScopeProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.InputScope" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Windows.FrameworkElement.IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 프로세서에서 처리하는 동안 또는 해당 <see cref="M:System.Windows.FrameworkElement.EndInit" /> 메서드를 명시적으로 호출하여 이 요소가 초기화되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>요소가 앞서 언급한 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 처리 또는 메서드 호출마다 초기화되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성 수도 `true` 경우이 요소에 옮겨졌습니다 논리 트리 내에서 새 부모 요소에 있고 따라서 요소가 다시 로드 되도록 합니다.  
  
 이 속성은 또한 사용 중인 경우에 유용 <xref:System.Windows.FrameworkElement.BeginInit%2A> 고 <xref:System.Windows.FrameworkElement.EndInit%2A>입니다. 로드 하는 논리 트리의 요소를 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 프로세서 초기화할 보장 합니다. 논리 트리에 없는 요소 초기화 되 면 <xref:System.Windows.FrameworkElement.EndInit%2A> 라고 합니다. 모든 특수 처리 없을 경우에서 <xref:System.Windows.FrameworkElement.BeginInit%2A> 및 <xref:System.Windows.FrameworkElement.EndInit%2A>,이 생성자는 초기화 된 결과 반환 하는 즉시 발생 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : bool" Usage="System.Windows.FrameworkElement.IsLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>표시를 위해 이 요소를 로드했는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>현재 요소가 요소 트리에 연결되어 있으면 <see langword="true" />이고, 요소가 로드된 요소 트리에 연결되지 않았으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 새로 생성 된 <xref:System.Windows.FrameworkElement>,이 속성이 시작 `false`를 그대로 유지 됩니다 `true` 로 설정 된 후 `true`요소는 이후에 코드에서 연결 된 논리 트리에서 제거 되는 경우에 합니다. `true` 요소 프레젠테이션 엔진에 로드 될 때 상태는 일반 프레젠테이션 논리에 의해 설정 됩니다.  
  
 일반적으로 로드 된 요소는 렌더링 전부는 아니지만 <xref:System.Windows.FrameworkElement> 파생된 클래스에는 프레젠테이션 및와 같은 다른 속성 <xref:System.Windows.UIElement.Visibility%2A> 프레젠테이션에 영향을 줄 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 두 명의 처리기를 구현: 처리 하는 하나는 <xref:System.Windows.FrameworkElement.Loaded> 이므로 페이지 루트 요소를 로드 이벤트의 의미 이기 때문에 특정 루트 요소의 이벤트입니다. 사용자 정의 컨트롤을 호출 하는 다른 처리기 후크된 <xref:System.Windows.FrameworkElement.IsLoaded%2A> 보증할 루트 요소에 로드 합니다. 처리기 모두 자식 요소를 새 데이터로 채울 (표시 되지 않음) 동일한 함수를 호출 합니다.  
  
 [!code-csharp[GroupBoxExample#FEIsLoaded](~/samples/snippets/csharp/VS_Snippets_Wpf/GroupBoxExample/CSharp/Page1.xaml.cs#feisloaded)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::XmlLanguage ^ Language { System::Windows::Markup::XmlLanguage ^ get(); void set(System::Windows::Markup::XmlLanguage ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : System.Windows.Markup.XmlLanguage with get, set" Usage="System.Windows.FrameworkElement.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소에 적용되는 지역화/세계화 언어 정보를 가져오거나 설정합니다.</summary>
        <value>이 요소에 대한 언어 정보입니다. 기본값은 해당 <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 값이 문자열 "en-US"로 설정된 <see cref="T:System.Windows.Markup.XmlLanguage" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 RFC 3066 표준을 수행 하는 문자열 형식입니다. 예를 들어, 미국 영어는 "EN-US"입니다. 값 및 형식에 대 한 자세한 내용은 참조 하세요. <xref:System.Windows.Markup.XmlLanguage>합니다.  
  
 속성 값이 종속성 속성을 상속 합니다. 자식 요소에 대 한 다른 값이 없는 경우 <xref:System.Windows.FrameworkElement.Language%2A> 를 통해 로컬 값 또는 스타일 설정 속성 시스템은 값을 설정할 수는 <xref:System.Windows.FrameworkElement.Language%2A> 이 값이 할당 된 가장 가까운 상위 요소의 값입니다.  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] 일반적인 의미를 정의 합니다 `xml:lang` 특성입니다. <xref:System.Windows.FrameworkElement.Language%2A> 기본적으로 종속성 속성으로이 특성의 의미를 표시합니다. <xref:System.Windows.FrameworkElement.Language%2A> 프로그래밍 방식으로 조정할 수 있습니다 하 고 대응 하는 방식으로 속성 시스템 값 상속에 참여할 수 있습니다 하는 방법을 `xml:lang` 특성의 자식 요소 범위를 상속할 수 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]입니다. 설정 하는 경우 <xref:System.Windows.FrameworkElement.Language%2A>, 해당 값이 적용 됩니다는 `xml:lang` 이전 값을 덮어씁니다. 자세한 내용은 [xml: lang XAML 처리](~/docs/framework/xaml-services/xml-lang-handling-in-xaml.md)합니다.  
  
<a name="dependencyPropertyInfo_CultureInfo"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.LanguageProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LanguageProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LanguageProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LanguageProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LanguageProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LanguageProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LanguageProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LanguageProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.Language" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform LayoutTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform LayoutTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LayoutTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property LayoutTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ LayoutTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LayoutTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.FrameworkElement.LayoutTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>레이아웃을 수행할 때 이 요소에 적용해야 하는 그래픽 변환을 가져오거나 설정합니다.</summary>
        <value>이 요소가 사용해야 하는 변환입니다. 기본값은 <see cref="P:System.Windows.Media.Transform.Identity" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 와 달리 <xref:System.Windows.UIElement.RenderTransform%2A>, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 레이아웃의 결과는 영향이 있습니다.  
  
 변환 설정 크기 조정 및 회전의 강력한 기능을 제공 합니다. 그러나 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 무시 <xref:System.Windows.Media.TranslateTransform> 작업 합니다. 왜냐하면 자식 요소에 대 한 레이아웃 시스템 동작을 <xref:System.Windows.FrameworkElement> 레이아웃에 확장 또는 회전 요소의 위치와 부모 요소의 좌표 시스템에 있는 오프셋을 자동으로 수정 합니다.  
  
 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 레이아웃 시스템 전체 패스를 필요 하지 않은 시나리오에서 호출 하면 응용 프로그램 성능 저하 시킬 수 있습니다. 적용 하는 경우를 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 에 <xref:System.Windows.Controls.Panel.Children%2A> 의 컬렉션을 <xref:System.Windows.Controls.Panel>레이아웃 시스템에 의해 새로운 단계가 트리거하는, 및 모든 화면 트리거되고 되어 다시 정렬 개체가. 전체 응용 프로그램을 업데이트 하는 경우 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)],이 기능은 수 있습니다 정확 하 게 해야 합니다. 그러나 전체 레이아웃 단계에 필요 하지 않은 경우 사용 하 여는 <xref:System.Windows.UIElement.RenderTransform%2A> 속성 레이아웃 시스템을 호출 하지 않습니다 하 고, 되므로 일반적으로이 시나리오에 더 적합 합니다.  
  
 예제 시나리오는 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 유용한 포함: 포커스를 편집 동작 등을 제공 (확대) 요소 크기를 조정 하는 가로에서 세로로 또는 반대로 메뉴 구성 요소 같은 요소를 회전 합니다.  
  
<a name="dependencyPropertyInfo_LayoutTransform"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.LayoutTransformProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 다음 예제에 적용 하는 방법을 보여 줍니다는 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 요소입니다. 이 예에서는 인스턴스를 만듭니다 <xref:System.Windows.Controls.Button> 부모 내에서 호스트 및 <xref:System.Windows.Controls.Grid>합니다. 또한 사용 하 여는 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 적용할 속성을 <xref:System.Windows.Media.RotateTransform> 에 <xref:System.Windows.Controls.Button>합니다.  
  
 [!code-cpp[LayoutTransform#1](~/samples/snippets/cpp/VS_Snippets_Wpf/LayoutTransform/CPP/LayoutTransform.cpp#1)]
 [!code-csharp[LayoutTransform#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LayoutTransform/CSharp/LayoutTransform.cs#1)]
 [!code-vb[LayoutTransform#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LayoutTransform/VisualBasic/LayoutTransform.vb#1)]
 [!code-xaml[LayoutTransform#1](~/samples/snippets/xaml/VS_Snippets_Wpf/LayoutTransform/XAML/default.xaml#1)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=158252">2 차원 변환 샘플</related>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LayoutTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LayoutTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LayoutTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LayoutTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LayoutTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.LayoutTransform" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Loaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Loaded;" />
      <MemberSignature Language="F#" Value="member this.Loaded : System.Windows.RoutedEventHandler " Usage="member this.Loaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소를 배치하고 렌더링하여 상호 작용할 준비가 되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Loaded> 일반적으로 마지막 이벤트에서에서 발생 요소 초기화 시퀀스입니다. 후에 항상 발생 됩니다 <xref:System.Windows.FrameworkElement.Initialized>합니다. 처리 하도록 선택 했는지 여부 <xref:System.Windows.FrameworkElement.Loaded> 또는 <xref:System.Windows.FrameworkElement.Initialized> 요구 사항에 따라 달라 집니다. 요소 속성을 읽이 필요가 없습니다, 하는 경우 속성을 다시 설정 하려고 하 고 모든 레이아웃 정보가 필요 하지 않은 <xref:System.Windows.FrameworkElement.Initialized> 더 나은 이벤트 동작을 수행할 수 있습니다. 가능 요소의 모든 속성이 필요 하 고 레이아웃을 다시 설정할 수 있는 속성을 설정 하는 경우 <xref:System.Windows.FrameworkElement.Loaded> 더 나은 이벤트 동작을 수행할 수 있습니다. 처리기에 필요한 새로운 레이아웃 전달을는 레이아웃 시스템에서 해석 되는 모든 속성이 다시 설정 하는 경우 재입력 주의 해야 합니다. (확인 해야 하는 <xref:System.Windows.FrameworkPropertyMetadata> 속성에는 새 레이아웃을 요구할 수의 확실 하지 않은 경우에 속성 값 변경 된 경우에 전달 합니다.)  
  
 개체에 대 한 이벤트 시퀀스에 대 한 자세한 내용은 <xref:System.Windows.FrameworkElement>에 여러 개의 관련 응용 프로그램 및 요소 클래스를 참조 하 고 [개체 수명 이벤트](~/docs/framework/wpf/advanced/object-lifetime-events.md)합니다.  
  
 직접 라우트된 이벤트에 대 한 경로 따르지, 발생 하는 동일한 요소 내 에서만 처리 됩니다. 라우트된 이벤트는 라우트된 이벤트 동작은 다른 지원지 않습니다 직접: 액세스할 수 있는 처리기 컬렉션을 지원 하며으로 사용할 수는 <xref:System.Windows.EventTrigger> 스타일에서입니다.  
  
 <xref:System.Windows.FrameworkElement.Loaded> 및 <xref:System.Windows.FrameworkElement.Unloaded> 시스템 사용자가 시작한 테마 변경으로 인해 컨트롤에서 발생할 수 있습니다. 테마를 변경 하면 컨트롤 템플릿 및 차례로 언로드하고 다시 로드 하기 위해 전체 컨트롤이 포함 된 시각적 트리를 무효화 합니다. 따라서 <xref:System.Windows.FrameworkElement.Loaded> 만 페이지를 처음 로드할 때 페이지 탐색을 통해 되려면 가정할 수 없습니다.  
  
<a name="routedEventInfo_Loaded"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.LoadedEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="LoadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LoadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LoadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LoadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LoadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LoadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LoadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.LoadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Windows.FrameworkElement.Loaded" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.FrameworkElement.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 논리적 자식 요소에 대한 열거자를 가져옵니다.</summary>
        <value>이 요소의 논리적 자식 요소에 대한 열거자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.LogicalChildren%2A> 자식 요소를 반복할 수 있습니다. 이 정의 된 전용된 컬렉션을 필요는 없지만 여전히 특히 둘 이상의 자식 요소가 포함 될 수 있는 요소에 대 한 유용한 <xref:System.Windows.FrameworkContentElement> 자식 요소입니다.  
  
 사용 하는 방법에 대 한 자세한 내용은 <xref:System.Windows.FrameworkElement.LogicalChildren%2A> 하 고 <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>를 참조 하세요 [WPF의 트리](~/docs/framework/wpf/advanced/trees-in-wpf.md)합니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c5358e14-d24c-44c7-b5eb-6062a4fd981c">x:Array 태그 확장</related>
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Margin { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberSignature Language="F#" Value="member this.Margin : System.Windows.Thickness with get, set" Usage="System.Windows.FrameworkElement.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소의 바깥쪽 여백을 가져오거나 설정합니다.</summary>
        <value>요소에 대한 여백 값을 제공합니다. 기본값은 모든 속성이 0과 같은 <see cref="T:System.Windows.Thickness" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 여백은이 요소와 레이아웃을 만드는 경우 인접 하는 다른 요소 사이의 간격을 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]입니다. 공유 요소 (예: 다른 요소는 공통 부모 컨트롤의 컬렉션에 있는) 피어 요소 수 또는이 요소의 부모를 수도 있습니다.  
  
 <xref:System.Windows.FrameworkElement.Margin%2A> 으로 설정 됩니다는 <xref:System.Windows.Thickness> 구조 아니라 숫자로 여백을 비대칭으로 설정할 수 있도록 합니다. 합니다 <xref:System.Windows.Thickness> 구조체 자체 비대칭 지정할 수 있도록 문자열 형식 변환을 지원 <xref:System.Windows.FrameworkElement.Margin%2A> 에서 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 특성도 구문.  
  
 0이 아닌 여백은 요소 레이아웃의 바깥쪽에 공간 <xref:System.Windows.FrameworkElement.ActualWidth%2A> 고 <xref:System.Windows.FrameworkElement.ActualHeight%2A>입니다.  
  
 여백은 레이아웃; 형제 요소에 대 한 추가 예를 들어 인접 가장자리 30 여백을 모두 설정 하는 인접 요소 두 개는 60 사이 공백 것입니다.  
  
 여백이 설정 되어 있는 요소는 일반적으로 지정 된 크기를 제한 하지 <xref:System.Windows.FrameworkElement.Margin%2A> 경우 할당 된 사각형 공간 크기가 작아 여백 및 요소 콘텐츠 영역에 대 한 합니다. 대신 레이아웃을 계산할 때 요소의 콘텐츠 영역에 제한이 적용 됩니다. 여백 제한이 적용 되는 유일한 경우 0으로 이미 제한 된 콘텐츠는 이기도 합니다.  
  
<a name="xamlAttributeUsage_Margin"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object Margin="left,top,right,bottom"/>  
- or -  
<object Margin="left,top"/>  
- or -  
<object Margin="thicknessReference"/>  
```  
  
<a name="xamlPropertyElementUsage_Margin"></a>   
## <a name="xaml-property-element-usage"></a>XAML 속성 요소 사용  
  
```  
<object>  
  <object.Margin>  
    <Thickness Left="left" Top="top" Right="right" Bottom="bottom"/>  
  </object.Margin>  
</object>  
```  
  
<a name="xamlValues_Margin"></a>   
## <a name="xaml-values"></a>XAML 값  
 *left, top, right, bottom*  
 0 사이의 숫자 값 및 <xref:System.Double.PositiveInfinity> 의 네 가지 가능한 차원 속성을 지정 하는 한 <xref:System.Windows.Thickness> 구조입니다.  
  
 특성을 사용 대칭적 및 논리적으로 제공 된 순서에 적용 되는 약어 값을 수락도 합니다. 예를 들어 `Margin="20"` 의미로 해석 됩니다는 <xref:System.Windows.Thickness> 20으로 설정 하는 모든 속성을 사용 하 여 합니다. `Margin="20,50"` 의미로 해석 됩니다는 <xref:System.Windows.Thickness> 사용 하 여 <xref:System.Windows.Thickness.Left%2A> 및 <xref:System.Windows.Thickness.Right%2A> 을 20으로 설정 하 고 <xref:System.Windows.Thickness.Top%2A> 및 <xref:System.Windows.Thickness.Bottom%2A> 50으로 설정 합니다.  
  
 기본 단위를 <xref:System.Windows.Thickness> 측정값은 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]합니다. 단위 형식 문자열을 추가 하 여 다른 단위를 지정할 수도 있습니다 `cm`, `in`, 또는 `pt` 모든 측정 합니다.  
  
 숫자 값으로 제공 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 특성 지정할 필요는 없습니다 소수점이 하 (0 허용 되는, 0.0으로 지정할 필요가 없습니다.). 에 대 한 자세한 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 사용량 참조 <xref:System.Windows.Thickness>합니다.  
  
 *thicknessReference*  
 기존 개체 참조가 <xref:System.Windows.Thickness>합니다. 이 수는 `}`, a 또는 `}` 참조 합니다. 에 대 한 자세한 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 사용량 참조 <xref:System.Windows.Thickness>합니다.  
  
<a name="dependencyPropertyInfo_Margin"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.MarginProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Thickness" />
      </Docs>
    </Member>
    <Member MemberName="MarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MarginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MarginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MarginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MarginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MarginProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MarginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.Margin" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public double MaxHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxHeight : double with get, set" Usage="System.Windows.FrameworkElement.MaxHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소의 최대 높이 제약 조건을 가져오거나 설정합니다.</summary>
        <value>요소의 최고 높이([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])입니다. 기본값은 <see cref="F:System.Double.PositiveInfinity" />입니다. 이 값은 0.0보다 크거나 같은 임의의 값일 수 있습니다. <see cref="F:System.Double.PositiveInfinity" />도 유효합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 세 가지 속성 중 하나에 <xref:System.Windows.FrameworkElement> 높이 정보를 지정 하는 합니다. 다른 두 가지 <xref:System.Windows.FrameworkElement.MinHeight%2A> 고 <xref:System.Windows.FrameworkElement.Height%2A>입니다.  이러한 값 간에 충돌이 발생 하는 경우를 실제 높이 결정에 대 한 응용 프로그램의 순서 <xref:System.Windows.FrameworkElement.MinHeight%2A> 다음을 적용할 수 있어야 <xref:System.Windows.FrameworkElement.MaxHeight%2A>, 마지막으로 범위 내에 있는 이러한 각 경우 <xref:System.Windows.FrameworkElement.Height%2A>합니다.  
  
 에 대 한 값 제한 합니다 <xref:System.Double> 값에 의해 적용 되는 <xref:System.Windows.ValidateValueCallback> 메커니즘입니다. 잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.  
  
<a name="xamlAttributeUsage_MaxHeight"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object MaxHeight="double"/>  
- or -  
<object MaxHeight ="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxHeight"></a>   
## <a name="xaml-values"></a>XAML 값  
 *double*  
 <xref:System.Double>  
  
 문자열 표현 된 <xref:System.Double> 0.0 보다 크거나 같은 값입니다. 이것은 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 측정 합니다. 문자열 소수점이 하를 명시적으로 포함 되지 해야 합니다. 예를 들어 값 `1` 허용 됩니다.  
  
 동일한 <xref:System.Double> 적용을 사용 해야 한다는 점을 제외 하 고 속성 값 섹션에서 설명한 대로 제한 된 범위 [X:static 태그 확장명](~/docs/framework/xaml-services/x-static-markup-extension.md) 값을 명시적으로 설정 해야 하는 경우 <xref:System.Double.PositiveInfinity>합니다.  
  
 *qualifiedDouble*  
 A *이중* 단위 선언 문자열 중 하나에서 다음 위에서 설명한 대로 값: `px`, `in`, `cm`, `pt`합니다.  
  
 `px` (기본값) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` 인치; 1에서 96px = =  
  
 `cm` 센티미터; 1cm==(96/2.54) px  
  
 `pt` 포인트; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MaxHeight"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.MaxHeightProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.MaxHeight" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public double MaxWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxWidth : double with get, set" Usage="System.Windows.FrameworkElement.MaxWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소의 최대 너비 제약 조건을 가져오거나 설정합니다.</summary>
        <value>요소의 최대 너비([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])입니다. 기본값은 <see cref="F:System.Double.PositiveInfinity" />입니다. 이 값은 0.0보다 크거나 같은 임의의 값일 수 있습니다. <see cref="F:System.Double.PositiveInfinity" />도 유효합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 세 가지 속성 중 하나에 <xref:System.Windows.FrameworkElement> 너비 정보를 지정 하는 합니다. 다른 두 가지 <xref:System.Windows.FrameworkElement.MinWidth%2A> 고 <xref:System.Windows.FrameworkElement.Width%2A>입니다. 이러한 값 간에 충돌이 발생 하는 경우를 실제 너비가 결정에 대 한 응용 프로그램의 순서 <xref:System.Windows.FrameworkElement.MinWidth%2A> 다음을 적용할 수 있어야 <xref:System.Windows.FrameworkElement.MaxWidth%2A>, 마지막으로 범위 내에 있는 이러한 각 경우 <xref:System.Windows.FrameworkElement.Width%2A>합니다.  
  
 에 대 한 값 제한 합니다 <xref:System.Double> 값에 의해 적용 되는 <xref:System.Windows.ValidateValueCallback> 메커니즘입니다. 잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.  
  
<a name="xamlAttributeUsage_MaxWidth"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object MaxWidth="double"/>  
- or -  
<object MaxWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MaxWidth"></a>   
## <a name="xaml-values"></a>XAML 값  
 *double*  
 <xref:System.Double>  
  
 문자열 표현 된 <xref:System.Double> 0.0 보다 크거나 같은 값입니다. 이것은 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 측정 합니다. 문자열 소수점이 하를 명시적으로 포함 되지 해야 합니다. 예를 들어 값 `1` 허용 됩니다.  
  
 동일 <xref:System.Double> 적용을 사용 해야 한다는 점을 제외 하 고 속성 값 섹션에서 설명한 대로 제한 된 범위 [X:static 태그 확장](~/docs/framework/xaml-services/x-static-markup-extension.md) 값을 설정 하려면 <xref:System.Double.PositiveInfinity>합니다.  
  
 *qualifiedDouble*  
 A *이중* 단위 선언 문자열 중 하나에서 다음 위에서 설명한 대로 값: `px`, `in`, `cm`, `pt`합니다.  
  
 `px` (기본값) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` 인치; 1에서 96px = =  
  
 `cm` 센티미터; 1cm==(96/2.54) px  
  
 `pt` 포인트; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MaxWidth"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.MaxWidthProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.MaxWidth" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected override sealed System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">부모 요소가 자식 요소에 제공할 수 있는 사용 가능한 크기입니다.</param>
        <summary><see cref="T:System.Windows.FrameworkElement" />에 대한 기본 측정 단계 레이아웃 시스템 동작을 구현합니다.</summary>
        <returns>레이아웃에서 이 요소에 필요한 크기입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 재정의 <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType> WPF 핵심 수준 및 WPF 프레임 워크 수준 레이아웃 측정 구현을 연결 합니다. <xref:System.Windows.FrameworkElement> 구현 메서드를 봉인 합니다. WPF 프레임 워크 수준에서 작성 하는 모든 요소의 측정값 전달 레이아웃 동작을 조정 하려면 재정의 <xref:System.Windows.FrameworkElement.MeasureOverride%2A> 대신 합니다. 조정 측정 처리 단계에서 의도적으로 나 있지 않은 WPF 프레임 워크 수준에서 사용 하 여 요소의 레이아웃 동작 <xref:System.Windows.FrameworkElement>를 재정의 <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureOverride availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">이 요소가 자식 요소에 제공할 수 있는 사용 가능한 크기입니다. 값으로 무한대를 지정하면 사용할 수 있는 콘텐츠에 따라 요소 크기가 지정됩니다.</param>
        <summary>파생 클래스에서 재정의된 경우 자식 요소에 필요한 레이아웃의 크기를 측정하고 <see cref="T:System.Windows.FrameworkElement" /> 파생 클래스의 크기를 결정합니다.</summary>
        <returns>이 요소에서 자식 요소 크기 계산에 따라 레이아웃 중에 필요하다고 결정하는 크기입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 재정의 <xref:System.Windows.FrameworkElement.MeasureOverride%2A> 에 참여 하는 대로 요소에 대 한 사용자 지정 레이아웃 크기 조정 동작을 구현 하는 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 레이아웃 시스템입니다. 구현을 다음을 수행 해야 합니다.  
  
1.  요소의 특정 레이아웃, 호출의 일부인 자식 컬렉션을 반복 <xref:System.Windows.UIElement.Measure%2A> 각 자식 요소에 있습니다.  
  
2.  즉시 <xref:System.Windows.UIElement.DesiredSize%2A> 자식 (후 속성으로 설정 됩니다 <xref:System.Windows.UIElement.Measure%2A> 라고).  
  
3.  자식 요소의 측정값에 따라 부모 net 원하는 크기를 계산 합니다.  
  
 반환 값 <xref:System.Windows.FrameworkElement.MeasureOverride%2A> 다음 현재 요소의 부모 요소에 대 한 입력 측정 되는 요소 자체의 원하는 크기 여야 합니다. 페이지의 루트 요소에 도달할 때까지 레이아웃 시스템을 통해 이와 동일한 프로세스가 계속 됩니다.  
  
 이 과정에서 자식 요소를 반환할 수 있습니다 더 큰 <xref:System.Windows.UIElement.DesiredSize%2A> 초기 보다 크기가 `availableSize` 자식 요소가 더 많은 공간을 원한다는 것을 나타냅니다. 이 누적 주문의 특정 방식으로 또는 임의 개수의 측정 또는 콘텐츠 정렬에 대 한 솔루션을 설정 하 여 부모 컨트롤 크기를 조정 하 여 스크롤 가능한 영역을 도입 하 여 개발자 고유의 구현에서 처리 될 수 있습니다.  
  
> [!IMPORTANT]
>  요소를 호출 해야 <xref:System.Windows.UIElement.Measure%2A> 이 프로세스 중 각 자식에 그렇지 않으면 자식 요소를 됩니다 하지 수 올바르게 크기 또는 정렬 합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>다음 비 컴파일 코드는이 구현 패턴을 보여 줍니다.  <c>원하는</c> 고유한 요소를 정의 해야 하는 자식 항목의 열거 가능한 컬렉션 속성을 나타냅니다. 속성을 원하는 이름을 지정할 수 있습니다. <c>원하는</c> 이 예제의 목적에 대 한 자리 표시자 이름인 <c>원하는</c> 아닙니다는 [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] 제공한 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 명명 패턴의 전체 또는 일부입니다. 
  
[! 코드 csharp[CorePseudocode #FEMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#femeasureoverride)] [! 코드 vb[CorePseudocode #FEMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#femeasureoverride)]</para></block>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public double MinHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MinHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinHeight : double with get, set" Usage="System.Windows.FrameworkElement.MinHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소의 최소 높이 제약 조건을 가져오거나 설정합니다.</summary>
        <value>요소의 최소 높이([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])입니다. 기본값은 0.0입니다. 이 값은 0.0보다 크거나 같은 임의의 값일 수 있습니다. 그러나 <see cref="F:System.Double.PositiveInfinity" /> 및 <see cref="F:System.Double.NaN" />은 올바르지 않습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 세 가지 속성 중 하나에 <xref:System.Windows.FrameworkElement> 높이 정보를 지정 하는 합니다.  다른 두 가지 <xref:System.Windows.FrameworkElement.Height%2A> 고 <xref:System.Windows.FrameworkElement.MaxHeight%2A>입니다. 이러한 값 간에 충돌이 발생 하는 경우를 실제 높이 결정에 대 한 응용 프로그램의 순서 <xref:System.Windows.FrameworkElement.MinHeight%2A> 다음을 적용할 수 있어야 <xref:System.Windows.FrameworkElement.MaxHeight%2A>, 마지막으로 범위 내에 있는 이러한 각 경우 <xref:System.Windows.FrameworkElement.Height%2A>합니다.  
  
 에 대 한 값 제한 합니다 <xref:System.Double> 값에 의해 적용 되는 <xref:System.Windows.ValidateValueCallback> 메커니즘입니다. 잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.  
  
<a name="xamlAttributeUsage_MinHeight"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object MinHeight="double"/>  
- or -  
<object MinHeight="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinHeight"></a>   
## <a name="xaml-values"></a>XAML 값  
 *double*  
 <xref:System.Double>  
  
 문자열 표현 된 <xref:System.Double> 0.0 보다 크거나 같은 값입니다. 이것은 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 측정 합니다. 문자열 소수점이 하를 명시적으로 포함 되지 해야 합니다. 예를 들어 값 `1` 허용 됩니다.  
  
 동일한 <xref:System.Double> 속성 값 섹션에서 설명한 것 처럼 범위 제한 사항이 적용 됩니다.  
  
 *qualifiedDouble*  
 A *이중* 단위 선언 문자열 중 하나에서 다음 위에서 설명한 대로 값: `px`, `in`, `cm`, `pt`합니다.  
  
 `px` (기본값) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` 인치; 1에서 96px = =  
  
 `cm` 센티미터; 1cm==(96/2.54) px  
  
 `pt` 포인트; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MinHeight"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.MinHeightProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.MinHeight" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public double MinWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinWidth : double with get, set" Usage="System.Windows.FrameworkElement.MinWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소의 최소 너비 제약 조건을 가져오거나 설정합니다.</summary>
        <value>요소의 최소 너비([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])입니다. 기본값은 0.0입니다. 이 값은 0.0보다 크거나 같은 임의의 값일 수 있습니다. 그러나 <see cref="F:System.Double.PositiveInfinity" /> 및 <see cref="F:System.Double.NaN" />은 올바르지 않습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 세 가지 속성 중 하나에 <xref:System.Windows.FrameworkElement> 너비 정보를 지정 하는 합니다.  다른 두 가지 <xref:System.Windows.FrameworkElement.Width%2A> 고 <xref:System.Windows.FrameworkElement.MaxWidth%2A>입니다.  이러한 값 간에 충돌이 발생 하는 경우를 실제 너비가 결정에 대 한 응용 프로그램의 순서 <xref:System.Windows.FrameworkElement.MinWidth%2A> 다음을 적용할 수 있어야 <xref:System.Windows.FrameworkElement.MaxWidth%2A>, 마지막으로 범위 내에 있는 이러한 각 경우 <xref:System.Windows.FrameworkElement.Width%2A>합니다.  
  
 에 대 한 값 제한 합니다 <xref:System.Double> 값에 의해 적용 되는 <xref:System.Windows.ValidateValueCallback> 메커니즘입니다. 잘못 된 값을 설정 하려고 하면 런타임 예외가 throw 됩니다.  
  
<a name="xamlAttributeUsage_MinWidth"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object MinWidth="double"/>  
- or -  
<object MinWidth="qualifiedDouble"/>  
```  
  
<a name="xamlValues_MinWidth"></a>   
## <a name="xaml-values"></a>XAML 값  
 *double*  
 <xref:System.Double>  
  
 문자열 표현 된 <xref:System.Double> 0.0 보다 크거나 같은 값입니다. 이것은 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 측정 합니다. 문자열 소수점이 하를 명시적으로 포함 되지 해야 합니다. 예를 들어 값 `1` 허용 됩니다.  
  
 동일한 <xref:System.Double> 속성 값 섹션에서 설명한 것 처럼 범위 제한 사항이 적용 됩니다.  
  
 *qualifiedDouble*  
 A *이중* 단위 선언 문자열 중 하나에서 다음 위에서 설명한 대로 값: `px`, `in`, `cm`, `pt`합니다.  
  
 `px` (기본값) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` 인치; 1에서 96px = =  
  
 `cm` 센티미터; 1cm==(96/2.54) px  
  
 `pt` 포인트; 1pt==(96/72) px  
  
<a name="dependencyPropertyInfo_MinWidth"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.MinWidthProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.MinWidth" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="frameworkElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">포커스를 이동할 방향(열거형의 값)입니다.</param>
        <summary>키보드 포커스를 이 요소 반대쪽에 있는 다른 요소를 향해 제공된 이동 방향으로 이동합니다.</summary>
        <returns>포커스가 이동되었으면 <see langword="true" />를 반환하고, 지정된 방향에 대상 요소가 없거나 대상 요소에 키보드 포커스를 설정할 수 없으면 <see langword="false" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 구현을 재정의 <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType> 메서드를 봉인 합니다.  
  
   
  
## Examples  
 다음 예제에서는 몇 가지 가능한 단추 입력을 처리 하는 처리기를 구현 합니다. 각 단추 나타냅니다 가능한 <xref:System.Windows.Input.FocusNavigationDirection>합니다. 처리기를 호출 하 고 현재 키보드 포커스가 있는 요소를 추적 <xref:System.Windows.FrameworkElement.MoveFocus%2A> 적절 한을 지정 하 여 해당 요소에 대 <xref:System.Windows.Input.FocusNavigationDirection> 에 대 한 초기화로는 <xref:System.Windows.Input.TraversalRequest> 제공 하는 매개 변수를 입력 합니다.  
  
 [!code-csharp[FocusSample#FocusSampleMoveFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)]
 [!code-vb[FocusSample#FocusSampleMoveFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.FrameworkElement.Name" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IFrameworkInputElement.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.DesignerSerializationOptions(System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0">
          <AttributeName>System.Windows.Markup.DesignerSerializationOptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소를 식별하는 이름을 가져오거나 설정합니다. 이 이름은 생성된 후 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 프로세서에서 처리하는 동안 이벤트 처리기 코드 등의 코드 숨김에서 태그 요소를 참조할 수 있도록 참조를 제공합니다.</summary>
        <value>요소의 이름을 나타내며 기본값은 빈 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 가장 일반적인 사용법을 지정 하는 것을 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 태그 특성으로 요소 이름입니다.  
  
 이 속성은 기본적으로 설정 하는 WPF 프레임 워크 수준 편의 속성을 제공 합니다 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [X:name 지시문](~/docs/framework/xaml-services/x-name-directive.md)합니다.  
  
 이름은 이름 범위 내에서 고유 해야 합니다. 자세한 내용은 [WPF XAML 이름 범위](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)합니다.  
  
 가져오기는 <xref:System.Windows.FrameworkElement.Name%2A> 코드에서 요소를 만드는 경우 일반적인 아닙니다. 코드에 적절 한 참조가 이미 있는 경우 메서드를 호출 하기만 하면 및 요소에서 속성 참조는 일반적으로 필요 하지는 <xref:System.Windows.FrameworkElement.Name%2A>합니다. 이 예외는 경우는 <xref:System.Windows.FrameworkElement.Name%2A> 문자열에 일부 오버 로드 된 즉, 예를 들어에서 해당 이름을 표시 하는 데 유용 하 고 있으면 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]합니다. 설정 된 <xref:System.Windows.FrameworkElement.Name%2A> 코드 숨김 파일에서 경우 원래 <xref:System.Windows.FrameworkElement.Name%2A> 태그에서 설정 된도 권장 되지 않습니다 하 고 로드 한 후 속성을 변경를 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 원래 개체 참조를 변경 되지 것입니다. 개체 참조를 구문 분석 중에 기본 이름 범위를 명시적으로 만든 경우에 생성 됩니다. 명시적으로 호출 해야 합니다 <xref:System.Windows.FrameworkElement.RegisterName%2A> 에 대 한 효과적인 변경 되도록는 <xref:System.Windows.FrameworkElement.Name%2A> 이미 로드 된 요소의 속성입니다.  
  
 하나 주목할 만한에서는 설정 경우 <xref:System.Windows.FrameworkElement.Name%2A> 코드에서 런타임 시 참조할 수 있도록 요소는 스토리 보드를 실행에 대 한 이름을 등록할 때입니다. 이름을 등록할 수 있습니다, 전에를 인스턴스화할 때 할당 해야 할 수는 <xref:System.Windows.NameScope> 인스턴스. 예제 섹션을 참조 하거나 [스토리 보드 개요](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)합니다.  
  
 설정 <xref:System.Windows.FrameworkElement.Name%2A> 코드에서 제한적으로 응용 프로그램을 하지만 여는 요소 가져오기 <xref:System.Windows.FrameworkElement.Name%2A> 더 일반적입니다. 하나의 특정 시나리오는 응용 프로그램 페이지가 응용 프로그램을 다시 로드 런타임 코드는 반드시 코드 숨김 페이지에 대해 정의 되지 않았고 탐색 모델을 지 원하는 경우입니다. 유틸리티 메서드 <xref:System.Windows.FrameworkElement.FindName%2A>에서 사용할 수 있는 <xref:System.Windows.FrameworkElement>, 모든 요소를 찾을 수 있습니다 <xref:System.Windows.FrameworkElement.Name%2A> 해당 요소에 대 한 논리 트리에서 필요에 따라는 트리를 재귀적으로 검색 합니다. 사용할 수 있습니다는 <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> 의 정적 메서드 <xref:System.Windows.LogicalTreeHelper>도 적용 되는 <xref:System.Windows.FrameworkElement.Name%2A> 인수로 문자열입니다.  
  
 일반적으로 사용 되는 루트 요소 (<xref:System.Windows.Window>하십시오 <xref:System.Windows.Controls.Page> 예를 들어) 인터페이스를 구현 <xref:System.Windows.Markup.INameScope>합니다. 이 인터페이스의 구현은 이름이 해당 범위 내에서 명확 해야 하는 적용 되어야 합니다. 이 인터페이스를 정의 하는 루트 요소에는 모든 네임 스페이스 동작 경계를 정의할 수도 관련 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]합니다.  
  
 <xref:System.Windows.FrameworkElement.Name%2A> 속성이 다른 프로세스에 대 한 식별자로도 제공 됩니다. 예를 들어 합니다 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 자동화 모델에서 사용할 <xref:System.Windows.FrameworkElement.Name%2A> 클라이언트 및 공급자에 대 한 AutomationId로 합니다.  
  
 사용 되는 문자열 값 <xref:System.Windows.FrameworkElement.Name%2A> 내부에서 부여 된 몇 가지 제한이 [X:name 지시문](~/docs/framework/xaml-services/x-name-directive.md) 정의한는 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 사양입니다. 가장 주목할 만한를 <xref:System.Windows.FrameworkElement.Name%2A> 문자 또는 밑줄 (_)를 시작 해야 하며 문자, 숫자 또는 밑줄만 포함 해야 합니다. 자세한 내용은 [WPF XAML 이름 범위](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)합니다.  
  
 <xref:System.Windows.FrameworkElement.Name%2A> 애니메이션을 적용할 수 있는 거의 종속성 속성 중 하나입니다 (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> 는 `true` 메타 데이터에서) 이름 자체를 애니메이션 대상으로 하는 것에 대 한 중요 한 이기 때문입니다. 데이터 바인딩을 <xref:System.Windows.FrameworkElement.Name%2A> 기술적으로 가능 하기 때문에 매우 드문 경우 이지만 데이터 바인딩된 <xref:System.Windows.FrameworkElement.Name%2A> 속성의 기본 의도 한 목적으로 사용 될 수 없습니다: 코드 숨김에 대 한 식별자 연결점을 제공 합니다.  
  
<a name="dependencyPropertyInfo_Name"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.NameProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.Windows.FrameworkElement.Name%2A> 코드에서 속성 다음 이름을 새로 만든에 등록 <xref:System.Windows.NameScope> 를 호출 하 여 <xref:System.Windows.FrameworkElement.RegisterName%2A>입니다. 여기서 설명 하는 기술을 요구 사항 스토리 보드를 사용 하 여 애니메이션 효과 적용 하 여 대상으로 하는 스토리 보드 필요 하기 때문에 <xref:System.Windows.FrameworkElement.Name%2A>, 및 개체 참조에 의해 대상으로 지정할 수 없습니다.  
  
 [!code-csharp[animateHeight_procedural#FEName](~/samples/snippets/csharp/VS_Snippets_Wpf/animateHeight_procedural/CSharp/AnimatedHeightExample.cs#fename)]
 [!code-vb[animateHeight_procedural#FEName](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateHeight_procedural/visualbasic/animatedheightexample.vb#fename)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.NameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ NameProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable NameProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.NameProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.Name" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public virtual void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnApplyTemplate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnApplyTemplate();" />
      <MemberSignature Language="F#" Value="abstract member OnApplyTemplate : unit -&gt; unit&#xA;override this.OnApplyTemplate : unit -&gt; unit" Usage="frameworkElement.OnApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 재정의된 경우 응용 프로그램 코드 또는 내부 프로세스에서 <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />을 호출할 때마다 호출됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다.  
  
 템플릿은 요소의 완성 된 시각적 트리의 Template 속성에서 제공 되는 섹션을 <xref:System.Windows.Style> 요소에 적용 되는 합니다. 자세한 내용은 [스타일 지정 및 템플릿](~/docs/framework/wpf/controls/styling-and-templating.md)을 참조하세요.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>파생 클래스의 <see cref="T:System.Windows.FrameworkElement" /> 여러 가지 가능한 시나리오에 대 한 알림으로이 메서드를 사용할 수 있습니다. 
-시각적 요소 트리로의 나머지 부분을 작성 하는 코드의 고유한 구현을 호출할 수 있습니다.  
  
-템플릿에서 제공 되는 명명 된 요소에 대 한 참조를 가져오는 것과 같은 적용 된 템플릿의 시각적 트리에 의존 하는 코드를 실행할 수 있습니다.  
  
-템플릿의 시각적 트리 완료 된 후에 의미가 있는 서비스를 제공할 수 있습니다.  
  
-상태 및 기타 요인에 종속 되어 있는 템플릿 내에서 요소의 속성을 설정할 수 있습니다. 예를 들어 속성 값은 부모 요소를 파악 하 여만 검색할 수 있습니다 또는 클래스에 공통 된 템플릿을 사용 하 여 특정 파생 된 경우.  
  
구현자는 고유한 구현 하기 전에 기본 구현을 호출 항상 해야 합니다. <see cref="T:System.Windows.FrameworkElement" /> 자체 기본값이 없는 구현이 아니라 중간 클래스 수 있습니다.  
  
 <see cref="T:System.Windows.Controls.Control" /> 재정의 유사한 제공 <see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />합니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuClosing(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuClosing (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuClosing(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트에 대한 데이터를 제공합니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> 라우트된 이벤트가 해당 경로에서 이 클래스에 도달할 때마다 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 이 메서드를 구현 하는 중간 클래스에서 상속 하는 경우에 기본 구현을 호출 해야 합니다.  
  
 이 메서드는 다소 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드: 파생 된 클래스는 인스턴스 처리기 대신 클래스 처리기를 사용 하 여 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다. 이벤트 인수를 원본 되려면 구현 해야 하므로 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 했을 수 있으므로 On * 메서드는 구현 패턴은 라우트된 이벤트에 대 한 다른 계정에는 속성 (및 대부분의 경우에서에서는 이벤트가 다시 발생 하지 않아야). 서브 클래스 <xref:System.Windows.FrameworkElement> 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 잠재적 시나리오 중 하나는 이벤트의 인수를 의도적으로 처리 된 것으로 이벤트를 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuOpening (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuOpening(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.RoutedEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> 라우트된 이벤트가 해당 경로에서 이 클래스에 도달할 때마다 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 이 메서드를 구현 하는 중간 클래스에서 상속 하는 경우에 기본 구현을 호출 해야 합니다.  
  
 이 메서드는 다소 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드: 파생 된 클래스는 인스턴스 처리기 대신 클래스 처리기를 사용 하 여 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다. 이벤트 인수를 원본 되려면 구현 해야 하므로 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 했을 수 있으므로 On * 메서드는 구현 패턴은 라우트된 이벤트에 대 한 다른 계정에는 속성 (및 대부분의 경우에서에서는 이벤트가 다시 발생 하지 않아야). 서브 클래스 <xref:System.Windows.FrameworkElement> 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 잠재적 시나리오 중 하나는 이벤트의 인수를 의도적으로 처리 된 것으로 이벤트를 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="frameworkElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.RoutedEventArgs" />입니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.UIElement.GotFocus" /> 이벤트가 해당 경로에서 이 요소에 도달할 때마다 호출됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일부 다른 달리 * 기본 요소에 의해 노출 되는 메서드 <xref:System.Windows.FrameworkElement.OnGotFocus%2A> 기본 구현이 없는 합니다. 특히, 기본 요소의 다음 수준에서 null 구현을 재정의 하는 구현에 해당 <xref:System.Windows.UIElement.OnGotFocus%2A>합니다. 를 호출 하면 <xref:System.Windows.FrameworkElement.OnGotFocus%2A> 키보드 포커스로 인해 현재 요소에서 이벤트 발생 하는 경우에서이 요소에 적절 한 포커스 동작을 설정 합니다. <xref:System.Windows.FrameworkElement.OnGotFocus%2A> 처리기 이벤트 인수를 처리, 포커스가 현재 요소에 설정 된 경우에 표시 되지 않습니다. 이벤트의 소스는 현재 요소가 아닌 트리의 다른 요소를 처리기는 일어나지 않습니다.  
  
 프로그램 요소에 대 한 기본 포커스 동작을 변경 하지만 이러한 방식으로 포커스 동작을 변경 수행할 수 있습니다 더 잘 전혀 포커스 가능 요소를 허용 하지 않도록 하려면이 메서드를 재정의할 수 있습니다 (참조 <xref:System.Windows.UIElement.Focusable%2A>).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>인수에서 처리 하는 이벤트를 표시 하려는 경우에 요소 트리의 다른 부모 요소에서 이벤트 처리에 대 한 영향을 인식 해야 합니다. 이 처리기는 버블링 라우팅을 사용 하는 이벤트에 역할을 하므로 현재 포커스를 설정 <paramref name="sender" /> 는 이벤트당 인수 적합 하지 는지 않습니다. 포커스 또는 부모 요소에 특정 컨트롤 합치기에 따라 복합 자식 요소를 이동 해야 합니다. 처리 된 것으로 포커스 이벤트를 표시 하므로 전체 이벤트 라우트되는 시각적 트리를 작성 하는 컨트롤의 합치기의 일부인 경우만 권장 됩니다.</para></block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="OnInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialized : EventArgs -&gt; unit&#xA;override this.OnInitialized : EventArgs -&gt; unit" Usage="frameworkElement.OnInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.RoutedEventArgs" />입니다.</param>
        <summary><see cref="E:System.Windows.FrameworkElement.Initialized" /> 이벤트를 발생시킵니다. 이 메서드는 내부적으로 <see cref="P:System.Windows.FrameworkElement.IsInitialized" />가 <see langword="true" />로 설정될 때마다 호출됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 특정 * 메서드는 클래스 처리기 후크를 하지 않습니다. 따르지도 않습니다 정확 하 게 설정 된 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 에 * 메서드 규칙이이 메서드를 재정의 하 고 기본 구현을 호출 하지 일치 하는 이벤트를 표시 될 수 있습니다.  
  
 <xref:System.Windows.FrameworkElement.IsInitialized%2A> 속성은 읽기 전용으로 설정할 수 없습니다 때문 <xref:System.Windows.FrameworkElement.IsInitialized%2A> 초기화 동작을 강제 합니다. 초기화 상태 설정은 에서만 수행할 수는 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 프레임 워크입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>이 가상 메서드를 기본 구현하면 위에서 설명한 것처럼 이벤트가 발생합니다. 이 동작을 유지하려면 재정의 과정에서 기본 구현을 호출해야 합니다. 기본 구현을 호출 하지 않으면 뿐만 아니라 발생 하지 않을 합니다 <see cref="E:System.Windows.FrameworkElement.Initialized" /> 예상 되는 일반적으로 이벤트를 <see cref="T:System.Windows.FrameworkElement" /> 파생 클래스 이지만 두 가지 중요 한 스타일 및 테마 스타일 초기화 작업을 표시 하지 않을 수도 됩니다 이 기본 구현에 의해 구현 됩니다.</para></block>
        <altmember cref="M:System.Windows.FrameworkElement.OnApplyTemplate" />
        <altmember cref="E:System.Windows.FrameworkElement.Initialized" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="frameworkElement.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">기존 값과 새 값 그리고 변경된 속성을 설명하는 이벤트 데이터입니다.</param>
        <summary>이 <see cref="T:System.Windows.FrameworkElement" />에서 종속성 속성의 유효 값이 업데이트될 때마다 호출됩니다. 변경된 특정 종속성 속성이 인수 매개 변수에서 보고됩니다. <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />를 재정의합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 속성 변경 내용 또는 무효화를 검색 하려면이 메서드를 사용 하는 것이 없습니다. 대신 것은 일반적인 무효화 패턴의 수정에 대 한 속성의 광범위 한 분류에 대 한 특정 정보가 알려져 있는 경우.  
  
 이 메서드 개체의 수명 동안 여러 번 호출 될 수도 있습니다. 따라서 특정 속성의 메타 데이터를 무시 하 고 다음 연결 성능을 높일 수 있습니다 <xref:System.Windows.CoerceValueCallback> 또는 <xref:System.Windows.PropertyChangedCallback> 개별 속성에 대 한 함수입니다. 하지만 경우이 메서드를 사용 하는를 <xref:System.Windows.FrameworkElement> 많은 값을 상호 연관 된 종속성 속성을 포함 하는 렌더링 동작을 다시 실행 해야 다양 한 관련 속성 무효화의 경우와 같은 논리를 포함 하는 경우 또는 합니다.  
  
 점이 동일 하 게 명명 된 `OnPropertyChanged` 다른 시그니처가 있는 메서드 (매개 변수 형식은 <xref:System.ComponentModel.PropertyChangedEventArgs>)는 다양 한 클래스에 나타날 수 있습니다. 있는지 `OnPropertyChanged` 데이터 개체 알림에 사용 되 고 계약의 일부인 <xref:System.ComponentModel.INotifyPropertyChanged>합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>구현에서 첫 번째 작업으로 기본 구현에서는 항상 호출 합니다. 이렇게 하지 않으면 전체 없게 되므로 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 속성 시스템에 잘못 된 값을 보고 합니다. 특정 <see cref="T:System.Windows.FrameworkElement" /> 구현은 다양 한 표시 되는 사용자 인터페이스에 영향을 주는 속성에 대 한 적절 한 상태를 유지 관리를 담당 이기도 합니다. 여기에 적절 한 시간에 스타일을 지정 하는 변경 내용에 따라 시각적 트리를 무효화 합니다.</para></block>
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo sizeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnRenderSizeChanged (sizeInfo As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ sizeInfo);" />
      <MemberSignature Language="F#" Value="override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="frameworkElement.OnRenderSizeChanged sizeInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeInfo" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="sizeInfo">변경과 관련한 이전 크기와 새 크기의 세부 정보입니다.</param>
        <summary>지정된 정보를 최종적인 이벤트 데이터의 일부로 사용하여 <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>를 재정의합니다. 다시 설정 되며이 메서드를 호출 하는 경우는 <xref:System.Windows.FrameworkElement.ActualWidth%2A> 속성을 <xref:System.Windows.FrameworkElement.ActualHeight%2A> 속성 중 하나 또는 모두로 지정 된 내용에 따라 제공 된 인수를 변경 하 고는 하면 항상 이벤트를 발생 시킵니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>일반적인 레이아웃 시나리오에 대 한이 메서드를 재정의 하지 마십시오. 레이아웃 시스템은 가능한 모든 레이아웃 정렬에 대 한 측정 사례를 고려 하 여 의도적으로 비동기 방식으로 작동 합니다. 메서드를 재정의 하는 레이아웃 시스템 <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> 고 <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> 필요한 레이아웃 사용자 지정에 대 한 일반적으로 충분 합니다. <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> 가상으로 노출 됩니다. 재정의할 수 있습니다 <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> 재 컴퍼지션에 대 한 응답에서 런타임 동작 변경 입력 컨트롤과 결합 하는 이벤트에 관련 된 예외적인 경우에 대 한 수정 하려면 정확 하지 않은 레이아웃 정보를 제공 될 수 있습니다.  
  
파생된 클래스 (보호 되지만 선택 되지 않았습니다)에서이 메서드를 재정의할 수 있습니다. 항상 기본 WPF 프레임 워크 수준 렌더링 동작을 사용 하지 않도록 설정 하는 매우 구체적인 이유가 없으면 위에서 언급 한 동작을 유지 하는 기본 구현을 호출 합니다. 실패를 발생 시키려면는 <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> 이벤트 비표준 레이아웃 동작 표준 WPF 프레임 워크 수준 레이아웃 시스템 구현을 사용 하는 경우 발생 합니다.</para></block>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStyleChanged(class System.Windows.Style oldStyle, class System.Windows.Style newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStyleChanged (oldStyle As Style, newStyle As Style)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStyleChanged(System::Windows::Style ^ oldStyle, System::Windows::Style ^ newStyle);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit&#xA;override this.OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit" Usage="frameworkElement.OnStyleChanged (oldStyle, newStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldStyle" Type="System.Windows.Style" />
        <Parameter Name="newStyle" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="oldStyle">이전 스타일입니다.</param>
        <param name="newStyle">새 스타일입니다.</param>
        <summary>이 요소에 사용하는 스타일이 변경되어 레이아웃이 무효화되면 호출됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 스타일 변경 조건 정보는 내부 플래그를 설정 하는 기본 구현입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>일반적으로이 메서드를 재정의할 필요가 없습니다. 측정값을 포함 하는 스타일을 변경 또는 변경 구현 하는 일반적인 가정 하 고, 다른 렌더링 주기를 트리거할지 이미 정렬 <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />, 또는 기본값입니다. 재정의 <see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /> 적합할 경우에 <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />  /  <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> 구현 된 최적화 하거나 부분 업데이트를 지 원하는 있지만 보다 직접적 스타일에 변경 내용을 적용 하려고 합니다. (부분 업데이트에 대 한 증분 여러 호출을 방지 하기 위해 것 <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> 고 <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> 모든 자식 요소에 대해).</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipClosing(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipClosing (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipClosing(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트에 대한 데이터를 제공합니다.</param>
        <summary>처리되지 않은 <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> 라우트된 이벤트가 해당 경로에서 이 클래스에 도달할 때마다 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 이 메서드를 구현 하는 중간 클래스에서 상속 하는 경우에 기본 구현을 호출 해야 합니다.  
  
 이 메서드는 다소 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드: 파생 된 클래스는 인스턴스 처리기 대신 클래스 처리기를 사용 하 여 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다. 이벤트 인수를 원본 되려면 구현 해야 하므로 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 했을 수 있으므로 On * 메서드는 구현 패턴은 라우트된 이벤트에 대 한 다른 계정에는 속성 (및 대부분의 경우에서에서는 이벤트가 다시 발생 하지 않아야). 서브 클래스 <xref:System.Windows.FrameworkElement> 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 잠재적 시나리오 중 하나는 이벤트의 인수를 의도적으로 처리 된 것으로 이벤트를 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipOpening(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipOpening (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipOpening(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트에 대한 데이터를 제공합니다.</param>
        <summary><see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> 라우트된 이벤트가 해당 경로에서 이 클래스에 도달할 때마다 호출됩니다. 이 이벤트에 대한 클래스 처리를 추가하려면 이 메서드를 구현합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 구현이 없습니다. 이 메서드를 구현 하는 중간 클래스에서 상속 하는 경우에 기본 구현을 호출 해야 합니다.  
  
 이 메서드는 다소 비슷합니다 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 패턴에서 * 메서드: 파생 된 클래스는 인스턴스 처리기 대신 클래스 처리기를 사용 하 여 일치 하는 이벤트를 처리 하는 방법을 제공 합니다. 이 경우 일치 하는 이벤트는 라우트된 이벤트가입니다. 이벤트 인수를 원본 되려면 구현 해야 하므로 처리기를 호출 하는 요소가 아닌 자식 요소에 의해 발생 했을 수 있으므로 On * 메서드는 구현 패턴은 라우트된 이벤트에 대 한 다른 계정에는 속성 (및 대부분의 경우에서에서는 이벤트가 다시 발생 하지 않아야). 서브 클래스 <xref:System.Windows.FrameworkElement> 경로 따라 이벤트를 받으면 전용 클래스 처리기 메서드를 호출할 수 있습니다. 하나의 잠재적인 시나리오는 이벤트의 인수를 사용 하 고 경로 줄이기 위해 처리 된 것으로 의도적으로 이벤트를 표시 하는 것입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="frameworkElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">이전 부모 요소입니다. 요소가 이전에 시각적 부모를 포함하지 않았음을 나타내기 위해 <see langword="null" />이 될 수 있습니다.</param>
        <summary>시각적 트리에서 이 요소의 부모가 변경될 때 호출됩니다. <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />를 재정의합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 시각적 트리는 컬렉션과 같은 시각적으로 렌더링 되지 않는 요소를 생략 하기 때문에 잠재적으로 다른 논리적 트리는 하 고 해당 테마 및 스타일 합치기를 기준으로 일부 요소를 확장 합니다. 자세한 내용은 [WPF의 트리](~/docs/framework/wpf/advanced/trees-in-wpf.md)를 참조하세요.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>새 부모에 대 한 쿼리, 다양 한 초기화 이벤트를 발생 시키는 및 초기화 상태에 대 한 내부 플래그를 설정 합니다.이 가상 메서드의 기본 구현 된 <see cref="T:System.Windows.FrameworkElement" /> 적절 하 게 합니다. 마지막으로으로 선언 된 연속적인 기본 구현을 호출 <see cref="T:System.Windows.UIElement" />를 차례로 호출 하는 기준 <see cref="T:System.Windows.Media.Visual" />입니다. 항상이 동작을 유지 하는 기본 구현을 호출, 그렇지 않으면 다른 요소의 자식으로 선언 하는 경우이 요소에 대 한 요소 트리 동작 하지 않을 예상 대로입니다.  
  
몇 가지 기존 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 클래스 예를 들어이 메서드를 재정의 합니다. <see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />, <see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />합니다. 가장 일반적인 시나리오 새 부모 특정 형식 되도록 적용 하는 것입니다. 새 부모 형식 테스트를 통과 하지 못하면 예외를 throw 할 수 있습니다. 이 시나리오의 특수 버전 목록 항목 및 메뉴 항목에 사용할 수 없는 부모 외부 visual 저장 하기에 적절 한 컬렉션을 소유 하는 구현에 존재 합니다. Note "일반" 마이그레이션된다 하지 않고 일시적으로 요소를 부모 재지정에 의존 하는 디자이너 시나리오 수 있으므로 이러한 경우 반드시 예외를 발생 하 고 하지 않습니다.  
  
일반적으로 루트 요소와 같은 특정 요소에서이 메서드를 재정의 <see cref="T:System.Windows.Window" />합니다. 또 다른 경우에는 있지만 태그에서는 루트 요소는 요소는 자동 생성 컴파일된 논리 트리의 큰 인프라 (같은 <see cref="T:System.Windows.Controls.Page" />). 합니다 <see cref="T:System.Windows.Window" /> 고 <see cref="T:System.Windows.Controls.Page" /> 구현에서는 메서드가 봉인 합니다.</para></block>
        <altmember cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyle">
      <MemberSignature Language="C#" Value="public bool OverridesDefaultStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesDefaultStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesDefaultStyle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesDefaultStyle { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesDefaultStyle : bool with get, set" Usage="System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소가 테마 스타일의 스타일 속성을 포함할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>이 요소가 테마 스타일 속성을 사용하지 않으면 <see langword="true" />입니다. 이 경우 스타일에서 생성되는 모든 속성은 로컬 응용 프로그램 스타일에서 가져오며, 테마 스타일 속성은 적용되지 않습니다. 응용 프로그램 스타일이 먼저 적용된 다음 응용 프로그램 스타일에 구체적으로 설정되어 있지 않은 속성에 대해 테마 스타일이 적용되면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 가장 일반적인 사용법은 테마가 지정 된 스타일을 제공 하는 스타일의 setter 내에서 간접적으로 사용 합니다.  
  
> [!IMPORTANT]
>  설정 하는 경우 <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> 에 `true` 컨트롤에 표시 되지 것입니다 테마 스타일에 의해 제공 된 기본 컨트롤 템플릿이 있습니다. 콘텐츠 프레 젠 터와 기본 제공 하는 다른 복합 요소를 일반적으로 컨트롤 템플릿에 포함 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 기능 및 컨트롤에 대 한 시각화 합니다. 기본 테마 스타일과 동일한 기능을 지원 하려면 컨트롤을 원한다 면 동일한 구조를 복제 하는 컨트롤 템플릿 사용 하 여 대체 스타일을 제공 해야 합니다. 자세한 내용은 [컨트롤 제작 개요](~/docs/framework/wpf/controls/control-authoring-overview.md)를 참조하십시오.  
  
<a name="dependencyPropertyInfo_OverridesDefaultStyle"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OverridesDefaultStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OverridesDefaultStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OverridesDefaultStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OverridesDefaultStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 논리적 부모 요소를 가져옵니다.</summary>
        <value>이 요소의 논리적 부모입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.Parent%2A> 않을 `null` 요소 인스턴스화 되었지만 하지만 결국 페이지 루트 수준 요소 또는 응용 프로그램 개체에 연결 되는 모든 논리적 트리에 연결 되지 않은 경우에서.  
  
 요소의 논리적 부모 응용 프로그램의 기능에 따라 변경 될 수 있습니다 하 고이 속성의 값을 유지 하면 해당 변경 내용이 반영 되지 note 합니다. 필요한 직전에 일반적으로 값을 가져옵니다 해야 합니다.  
  
 참조 [WPF의 트리](~/docs/framework/wpf/advanced/trees-in-wpf.md) 논리 트리 순회에 대 한 자세한 내용 및 시나리오에 대 한 위치를 사용 하 여 <xref:System.Windows.FrameworkElement.Parent%2A> 부모 요소의 기술로 검색 적합 합니다.  
  
 속성 엔진은 잠재적으로 다시 계산 요소의 모든 속성 값 부모가 때 일부 속성 논리 트리를 통해 값을 상속 하기 때문에 합니다. <xref:System.Windows.FrameworkElement.DataContext%2A> 적용 되는 바인딩 요소는 부모를 재지정할 경우 변경할 수도 있습니다에 대 한 합니다.  
  
 요소의 부모는 일반적으로을 통해 변경할 컬렉션 조작, 전용을 사용 하 여 추가 또는 제거 메서드 또는 요소의 콘텐츠 속성을 설정 합니다.  
  
 사용에 대 한 가장 일반적인 시나리오는 <xref:System.Windows.FrameworkElement.Parent%2A> 참조를 가져온 다음 가져온 후 다양 한 속성이 <xref:System.Windows.FrameworkElement> 부모 개체에서 속성 값입니다. 템플릿에 대해서는 <xref:System.Windows.FrameworkElement.Parent%2A> 템플릿의 결국 됩니다 `null`합니다. 이 지점을 벗어나 템플릿을 실제로 적용 되는 논리 트리로 확장을 사용 하 여 <xref:System.Windows.FrameworkElement.TemplatedParent%2A>입니다.  
  
 이 속성은 논리적 트리 부모와에서 다른 경우의 시각적 트리 부모를 보고 하지 note 합니다. 시각적 트리 부모 일반 응용 프로그램의 경우 일반적으로 중요 되지 않지만 특정 시각적 수준 사례에 대 한 원하는 부모 요소가 있을 수 있습니다. <xref:System.Windows.Media.VisualTreeHelper>을 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 요소의 부모를 확인 하 고 다음 부모 개체에서 속성 값을 사용 하 여 일치 하 고 자식 요소의 속성을 설정 하는 코드를 보여 줍니다. 이 경우 이들은 렌더링 크기에 영향을 주는 속성입니다.  
  
 [!code-csharp[GeometryDesigner#FEParentProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryDesigner/CSharp/Window1.xaml.cs#feparentproperty)]
 [!code-vb[GeometryDesigner#FEParentProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryDesigner/visualbasic/window1.xaml.vb#feparentproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.TemplatedParent" />
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="ParentLayoutInvalidated">
      <MemberSignature Language="C#" Value="protected internal virtual void ParentLayoutInvalidated (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void ParentLayoutInvalidated(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub ParentLayoutInvalidated (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void ParentLayoutInvalidated(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit&#xA;override this.ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit" Usage="frameworkElement.ParentLayoutInvalidated child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">변경을 보고하는 자식 요소입니다.</param>
        <summary><see cref="T:System.Windows.FrameworkElement" />의 특수화된 하위 클래스에서 증분 레이아웃 구현을 지원합니다. 레이아웃 중 자식 요소에서 부모의 측정 또는 정렬 전달에 영향을 미치는 것으로 표시된 메타데이터의 속성을 무효화한 경우 <see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" />가 호출됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 요소에 자식 요소는 일부 속성 무효화 및 속성으로 표시 되어 있으면 <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> 또는 <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> 등록 하는 동안 속성 메타 데이터에이 메서드가 호출 됩니다. 메서드 호출에는이 요소 레이아웃의 부분 (증분) 업데이트를 지 원하는 경우 특정 자식 요소에 다시 측정 해야 부모 요소를 알립니다.  
  
 기본적으로 <xref:System.Windows.FrameworkElement> 증분 레이아웃을 지원 하지 않습니다 고는 <xref:System.Windows.FrameworkElement> 이 클래스 메서드는 기본 구현이 없습니다. 시나리오는이 메서드를 재정의 해야 하지만 기본 레이아웃 시스템 동작을 수정 해야 하기 때문에 일반적이 지 않습니다.  
  
 WPF 프레임 워크 수준 레이아웃 시스템 보다 더 제한적인 가능한 자식 요소에 대 한 형식 제한을 클래스의 경우에 이러한 구현 방식을 사용할 수 있습니다. 이러한 사용자 지정 요소, 특성으로 인해 속성 변경 내용은 지연 시킬 수 의도적으로 일부 사용자 지정 레이아웃 동작을 구현 하는 경우. 예를 들어 특정 종류의 변경은 일반적으로 다른 레이아웃이 전달 될 수 패스 렌더링 되는 자식 요소를 최적화 하려고 하는 측정값/정렬 메서드 재정의 지연 시킬 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="frameworkElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">예상 포커스 변경을 결정할 방향입니다.</param>
        <summary>제공된 포커스 이동 방향에 대해 이 요소를 기준으로 포커스를 받을 다음 요소를 결정하며 실제로 포커스를 이동하지는 않습니다.</summary>
        <returns>포커스를 실제로 이동하면 포커스가 이동할 다음 요소입니다. 제공된 방향에 대해 이 요소를 기준으로 포커스를 이동할 수 없는 경우 <see langword="null" />이 반환될 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.MoveFocus%2A> 실제로 포커스를 이동 하는 관련된 방법이입니다.  
  
   
  
## Examples  
 다음 예제에서는 몇 가지 가능한 단추 입력 가능한 나타내는 각 단추를 처리 하는 처리기 구현 <xref:System.Windows.Input.FocusNavigationDirection>합니다. 처리기를 호출 하 고 현재 키보드 포커스가 있는 요소를 추적 <xref:System.Windows.FrameworkElement.PredictFocus%2A> 해당 요소에 적절 한 지정 <xref:System.Windows.Input.FocusNavigationDirection> 에 대 한 초기화로는 <xref:System.Windows.Input.TraversalRequest> 제공 하는 매개 변수를 입력 합니다. 해당 요소를 이동 하는 대신 <xref:System.Windows.FrameworkElement.MoveFocus%2A> 것, 처리기 시각화를 위해 예측된 포커스 대상의 실제 크기를 변경 합니다.  
  
 [!code-csharp[FocusSample#FEPredictFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#fepredictfocus)]
 [!code-vb[FocusSample#FEPredictFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#fepredictfocus)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="T:System.Windows.Input.TraversalRequest" />에서 <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" /> 중 한 방향을 지정합니다. 이러한 방향은 <see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />에 사용할 수 없지만 <see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />에는 사용할 수 있습니다.</exception>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="member this.RegisterName : string * obj -&gt; unit" Usage="frameworkElement.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">지정된 이름-개체 매핑에 사용할 이름입니다.</param>
        <param name="scopedElement">매핑을 위한 개체입니다.</param>
        <summary><see cref="T:System.Windows.NameScope" /> 등록 메서드에 대한 액세스를 간소화하는 접근자를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 호출에 대 한 편의 메서드 <xref:System.Windows.NameScope.RegisterName%2A>합니다. 구현은 해당 발견할 때까지 부모 요소로 라우트됩니다 확인 됩니다 <xref:System.Windows.NameScope> 를 구현 하는 요소를 검색 하 여 액세스할 수 있는 구현 <xref:System.Windows.Markup.INameScope>합니다. 이름 범위에 대 한 자세한 내용은 참조 하세요. [WPF XAML 이름 범위](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md)합니다.  
  
 호출 <xref:System.Windows.FrameworkElement.RegisterName%2A> 코드에서 만들 때 응용 프로그램에 대 한 애니메이션 스토리 보드를 올바르게 연결 하기 위해 필요 합니다. Storyboard 속성 키 중 하나 이므로 <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, 런타임 이름 조회를 사용 하 여 대상 요소에 대 한 참조를 수행할 수 있게 되는 대신 합니다. 해당 요소는 코드에서 참조 하 여 액세스할 수 있는 경우에 마찬가지입니다. 스토리 보드 대상에 대 한 이름을 등록 해야 하는 이유는 무엇에 대 한 자세한 내용은 참조 하세요. [스토리 보드 개요](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)합니다.  
  
   
  
## Examples  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/ScopeExample.cs#namescopeexample)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/scopeexample.vb#namescopeexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.NameScope.RegisterName(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void RemoveLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RemoveLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RemoveLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RemoveLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.RemoveLogicalChild : obj -&gt; unit" Usage="frameworkElement.RemoveLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child">제거할 요소입니다.</param>
        <summary>이 요소의 논리적 트리에서 제공된 개체를 제거합니다. 이 삭제 작업과 동기화된 상태를 유지하기 위해 <see cref="T:System.Windows.FrameworkElement" />가 영향을 받는 논리적 트리 부모 포인터를 업데이트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요소의 논리적 자식을 나타내는 개체에는 컬렉션의 구현에이 메서드를 사용 합니다. 속성 getter 또는 setter의 클래스 처리기에서이 작업을 수행할 수 있습니다 `Changed` 이벤트, 생성자 컬렉션 내에서 형식 자체 또는 합니다.  
  
 컨트롤 작성자에 대 한이 수준에서 논리 트리를 조작 하지 않는 좋습니다, 제공 된 기본 컨트롤 클래스의 정적 콘텐츠 모델이 모두 적절 한. 하위 수준 클래스는 것이 좋습니다 <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, 및 <xref:System.Windows.Controls.HeaderedItemsControl>합니다. 이러한 클래스는 전용 통해 논리적 자식의 특정 적용을 사용 하 여 콘텐츠 모델을 제공 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]에서 일반적으로 사용 가능한 다른 기능에 대 한 지원 뿐만 아니라는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 템플릿 통한 스타일 지정과 같은 컨트롤입니다.  
  
   
  
## Examples  
 다음 예제에서는 구현 하는 `Child` 사용자 지정 속성 <xref:System.Windows.FrameworkElement> 수행 하는 자체 시각적 계층 구현 합니다. 속성의 setter는 이전 값을 논리적 트리를 뿐만 아니라 클래스 관련 시각적 컬렉션에서 제거 값이 변경 되도록 설계 되었습니다. 값은 캐시 및 한 새 값을 표준 WPF 프레임 워크 수준 논리적 트리 및 사용자 지정 시각적 컬렉션에 추가 됩니다.  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoView">
      <MemberSignature Language="C#" Value="public event System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RequestBringIntoView As RequestBringIntoViewEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RequestBringIntoViewEventHandler ^ RequestBringIntoView;" />
      <MemberSignature Language="F#" Value="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " Usage="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RequestBringIntoViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />가 이 요소에 대해 호출될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트는 부모 나타냅니다 <xref:System.Windows.Controls.ScrollViewer> (또는 파생 클래스) 발생 하는 요소는 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 이벤트 표시할 스크롤할 수 있는 지역 내에서. 합니다 <xref:System.Windows.Controls.ScrollViewer> 표시는 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 이벤트를 처리 하는 이벤트의 클래스 처리를 사용 하 여 합니다. 일반적 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 데이터가 표시 되지 않아야 스크롤 영역을 제어 하는 클래스에 의해으로 처리 하는 이벤트 인스턴스 처리기를 호출 하는 요소의 원하는 목표를 방해 이렇게 <xref:System.Windows.FrameworkElement.BringIntoView%2A>합니다.  
  
<a name="routedEventInfo_RequestBringIntoView"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>|  
|라우팅 전략|버블링|  
|대리자|<xref:System.Windows.RequestBringIntoViewEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoViewEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent RequestBringIntoViewEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent RequestBringIntoViewEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RequestBringIntoViewEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ RequestBringIntoViewEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable RequestBringIntoViewEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resources : System.Windows.ResourceDictionary with get, set" Usage="System.Windows.FrameworkElement.Resources" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Markup.IHaveResources.Resources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>로컬로 정의된 리소스 사전을 가져오거나 설정합니다.</summary>
        <value>현재 로컬로 정의된 리소스의 사전입니다. 각 리소스에는 키로 액세스할 수 있습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 완전히 또는 부분적으로 정의할 수 있는 리소스가 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 속성 요소로 일반적으로 생성 되 고 개별 페이지 또는 응용 프로그램의 루트 요소에는 일반적으로 합니다. 이 수준에서 리소스 사전 배치 쉽게 페이지의 개별 자식 요소 (또는 응용 프로그램의 경우에는 페이지)를 찾을 수 있습니다. 대부분의 응용 프로그램 시나리오에서 스타일 리소스 사전 내의 개체 요소로 정의 되어 권장 또는 전체 스타일 리소스는 자체 포함 될 수 있도록 외부 리소스로 정의 됩니다 (이 통해 별도 디자이너 책임을 편집 해야 하는 물리적 파일을 구분 하 여 개발자의 책임).  
  
 이 속성 요소 내에서 직접 선언 된 리소스 사전만 반환 하는 참고 합니다. 이 자식 요소를 위쪽으로 재귀적으로 검색 각 부모 요소에 정의 된 리소스를 액세스할 수 있는 실제 리소스 조회 프로세스와 다릅니다.  
  
 리소스의 리소스 만들어졌는지 수 있지만 컬렉션 내에서 코드에 의해 참조 될 수도 있습니다 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 확실 하 게 액세스할 수 없게 됩니다까지 후 <xref:System.Windows.FrameworkElement.Loaded> 사전을 선언 하는 요소에 의해 발생 합니다. 리소스 아니라 비동기적으로 구문 분석은 실제로 <xref:System.Windows.FrameworkElement.Loaded> 이벤트는 참조할 수 있는 보증을 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 리소스를 정의 합니다. 따라서 일반적으로 액세스 해야 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 정의의 일부로 런타임 코드 또는 다른 리소스 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 스타일 또는 특성 값에 대 한 리소스 확장 참조와 같은 기술입니다. 코드를 통해 리소스에 액세스 하는 경우 기본적으로 한 것과 동일에서 수행 하는 참조 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]합니다.  
  
 기본 <xref:System.Windows.ResourceDictionary> 추가, 제거 또는 코드를 사용 하 여 컬렉션 내에서 리소스를 쿼리 하는 데 필요한 메서드를 지원 합니다. 합니다 <xref:System.Windows.FrameworkElement.Resources%2A> 속성을 완전히 새로운 또는 다른 요소의 리소스 컬렉션을 교체 하는 시나리오를 지원 하기 위해 설정할 수 <xref:System.Windows.ResourceDictionary>입니다.  
  
 에 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 표시 된 구문에 대 한 요소가 포함 되지 않습니다는 <xref:System.Windows.ResourceDictionary>합니다. 이 한 예로 암시적 컬렉션 구문을 사용 합니다. 컬렉션 요소를 나타내는 태그를 생략할 수 있습니다. 항목 컬렉션에 추가 된 요소 대신 지정 됩니다. 암시적 컬렉션에 대 한 자세한 내용은 및 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]를 참조 하세요 [XAML 구문 정보](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md)합니다. 한 가지 경우 위치는 <xref:System.Windows.ResourceDictionary> 병합된 된 사전을 도입 하는 경우에서 많은 경우 일반적으로는 자식 요소가 없는 요소는 명시적으로 지정 되어 <xref:System.Windows.ResourceDictionary>입니다. 자세한 내용은 참조 하세요 [리소스 사전을 병합](~/docs/framework/wpf/advanced/merged-resource-dictionaries.md)입니다.  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a>XAML 속성 요소 사용  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a>XAML 값  
 *oneOrMoreResourceElements*  
 하나 이상의 개체 요소를 각각 정의 하는 리소스입니다. 각 리소스 속성 요소에서 각 <xref:System.Windows.ResourceDictionary> 에 대 한 고유한 값을 가져야 합니다는 [X:key 지시문](~/docs/framework/xaml-services/x-key-directive.md)에서 값을 검색할 때 고유 키로 사용 되는 <xref:System.Windows.ResourceDictionary>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Application.Resources" />
        <related type="Article" href="https://msdn.microsoft.com/library/1985cd45-f197-42d5-b75e-886add64b248">X:key 특성</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBinding">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 종속성 속성에 대해 이 요소에 바인딩을 연결합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression SetBinding(class System.Windows.DependencyProperty dp, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, path As String) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * string -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.SetBinding (dp, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dp">바인딩을 설정할 대상 속성을 식별합니다.</param>
        <param name="path">바인딩에 사용할 소스 속성 이름 또는 속성의 경로입니다.</param>
        <summary>데이터 소스에 대한 경로 정규화로 제공된 소스 속성 이름을 기반으로 이 요소에 바인딩을 연결합니다.</summary>
        <returns>바인딩 상태를 기록합니다. 이 반환 값은 오류 검사에 유용할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 호출에 대 한 편의 메서드 <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>는 현재 인스턴스를 전달 하는 합니다 <xref:System.Windows.DependencyObject>, 새 만들고 <xref:System.Windows.Data.Binding> 제공 된 기준 `path` 매개 변수. 이 서명은 간단한 기본 바인딩을 설정 하는 경우에 편리 합니다. 기본이 아닌 조건에 대 한 바인딩 속성을 지정 하거나 사용 하는 경우는 <xref:System.Windows.Data.MultiBinding> 또는 <xref:System.Windows.Data.PriorityBinding>를 사용 해야는 <xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> 서명 합니다.  
  
   
  
## Examples  
 다음 예제에서는 특정 경로 사용 하 여 바인딩을 설정 합니다.  
  
 [!code-csharp[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#setbindingpath)]
 [!code-vb[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#setbindingpath)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * System.Windows.Data.BindingBase -&gt; System.Windows.Data.BindingExpressionBase" Usage="frameworkElement.SetBinding (dp, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="dp">바인딩을 설정해야 하는 속성을 식별합니다.</param>
        <param name="binding">데이터 바인딩의 고유 정보를 나타냅니다.</param>
        <summary>제공된 바인딩 개체를 기반으로 하여 이 요소에 바인딩을 연결합니다.</summary>
        <returns>바인딩 상태를 기록합니다. 이 반환 값은 오류 검사에 유용할 수 있습니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 호출에 대 한 편의 메서드 <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>는 현재 인스턴스를 전달 하는 <xref:System.Windows.DependencyObject>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFlowDirection">
      <MemberSignature Language="C#" Value="public static void SetFlowDirection (System.Windows.DependencyObject element, System.Windows.FlowDirection value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFlowDirection(class System.Windows.DependencyObject element, valuetype System.Windows.FlowDirection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetFlowDirection (element As DependencyObject, value As FlowDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetFlowDirection(System::Windows::DependencyObject ^ element, System::Windows::FlowDirection value);" />
      <MemberSignature Language="F#" Value="static member SetFlowDirection : System.Windows.DependencyObject * System.Windows.FlowDirection -&gt; unit" Usage="System.Windows.FrameworkElement.SetFlowDirection (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.FlowDirection" />
      </Parameters>
      <Docs>
        <param name="element">흐름 방향을 지정하는 요소입니다.</param>
        <param name="value">방향을 지정하는 열거형 값입니다.</param>
        <summary>제공된 요소에 대한 <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 연결된 속성의 값을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 연결 된 속성 구문을 지원 합니다 <xref:System.Windows.FrameworkElement.FlowDirection%2A> 속성에서 자식 요소의 제공된 된 <xref:System.Windows.FrameworkElement> 해당 부모 요소 내에서 정렬에 대 한 흐름 방향을 지정 하 합니다. 현재 값을 설정 하려면 <xref:System.Windows.FrameworkElement>를 직접 사용 하 여 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 접근자 <xref:System.Windows.FrameworkElement.FlowDirection%2A>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="SetResourceReference">
      <MemberSignature Language="C#" Value="public void SetResourceReference (System.Windows.DependencyProperty dp, object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceReference(class System.Windows.DependencyProperty dp, object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceReference (dp As DependencyProperty, name As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceReference(System::Windows::DependencyProperty ^ dp, System::Object ^ name);" />
      <MemberSignature Language="F#" Value="member this.SetResourceReference : System.Windows.DependencyProperty * obj -&gt; unit" Usage="frameworkElement.SetResourceReference (dp, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">리소스가 바인딩될 속성입니다.</param>
        <param name="name">리소스의 이름입니다.</param>
        <summary>지정된 이름으로 리소스를 검색하고 지정된 속성에 대해 해당 리소스에 리소스 참조를 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 리소스 참조를 사용 하 여 비슷합니다는 [DynamicResource 태그 확장](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md) 태그에서입니다. 리소스 참조를 런타임에 지연 기준으로 지정된 된 속성의 값을 제공 하는 내부 식을 만듭니다. 리소스 사전 내부 이벤트를 통해 변경 된 값을 나타냅니다 때마다 또는 현재 요소의 부모를 재지정할 때마다 식을 다시 계산 됩니다 (부모 변경 사전 조회 경로 변경 됩니다).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.Application.Resources" />
        <altmember cref="P:System.Windows.FrameworkElement.Resources" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeResources">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeResources" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeResources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeResources();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeResources : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>serialization 프로세스에서 <see cref="P:System.Windows.FrameworkElement.Resources" /> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns><see cref="P:System.Windows.FrameworkElement.Resources" /> 속성 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 돌아갑니다 `true` 로컬에 하나 이상의 키가 지정 된 리소스와 <xref:System.Windows.FrameworkElement.Resources%2A>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStyle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeStyle" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeStyle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeStyle();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeStyle : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>serialization 프로세스에서 <see cref="P:System.Windows.FrameworkElement.Style" /> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns><see cref="P:System.Windows.FrameworkElement.Style" /> 속성 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 돌아갑니다 `true` 경우는 <xref:System.Windows.Style> 로컬로 설정 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTriggers">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTriggers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTriggers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeTriggers" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTriggers () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTriggers();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeTriggers : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeTriggers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>serialization 프로세스에서 <see cref="P:System.Windows.FrameworkElement.Triggers" /> 속성의 콘텐츠를 serialize해야 하는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns><see cref="P:System.Windows.FrameworkElement.Triggers" /> 속성 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 반환 `true` 경우는 <xref:System.Windows.FrameworkElement.Triggers%2A> 속성은 로컬로 설정 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.SizeChangedEventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.SizeChangedEventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SizeChanged As SizeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::SizeChangedEventHandler ^ SizeChanged;" />
      <MemberSignature Language="F#" Value="member this.SizeChanged : System.Windows.SizeChangedEventHandler " Usage="member this.SizeChanged : System.Windows.SizeChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> 또는 <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> 속성 값을 변경할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 직접 라우트된 이벤트에 대 한 경로 따르지, 발생 하는 동일한 요소 내 에서만 처리 됩니다. 라우트된 이벤트는 라우트된 이벤트 동작은 다른 지원지 않습니다 직접: 액세스할 수 있는 처리기 컬렉션을 지원 하며으로 사용할 수는 <xref:System.Windows.EventTrigger> 스타일에서입니다.  
  
 레이아웃 시스템 내에서 속성을 읽는 <xref:System.Windows.SizeChangedEventArgs> 를 고려할지 여부를 보고 크기 변화를 중요 한 결정이 이벤트의 인수 클래스입니다. 이 레이아웃 시스템 또는 이전 및 새 높이 또는 너비 값 간의 않는 시각적으로 차이로 인해 레이아웃 변경을 적용 하지 않으려면 컨트롤별 레이아웃 구현을 허용 합니다. 차이로 반올림 또는 동일한 결과 부동 소수점 데이터 형식 계산 때문일 수 있습니다.  
  
<a name="routedEventInfo_SizeChanged"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.SizeChangedEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.SizeChangedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Height" />
        <altmember cref="P:System.Windows.FrameworkElement.Width" />
      </Docs>
    </Member>
    <Member MemberName="SizeChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SizeChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SizeChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SizeChangedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeChangedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Windows.FrameworkElement.SizeChanged" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ SourceUpdated;" />
      <MemberSignature Language="F#" Value="member this.SourceUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.SourceUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 기존 속성 바인딩에 대해 소스 값이 변경될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Data.Binding.SourceUpdated> 이벤트에 의해 발생 하는 <xref:System.Windows.Data.Binding> 이 요소와 연결 합니다.  
  
<a name="xamlAttributeUsage_SourceUpdated"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object SourceUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.SourceUpdated" />
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Style Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ Style { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Style : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>렌더링될 때 이 요소에서 사용할 스타일을 가져오거나 설정합니다.</summary>
        <value>있는 경우 요소에 대해 적용된 기본값이 아닌 스타일입니다. 그렇지 않으면 <see langword="null" />입니다. 기본 생성된 <see cref="T:System.Windows.FrameworkElement" />의 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 컨트롤에 대 한 현재 스타일은 종종 컨트롤 테마에서 기본 스타일을 제공한 또는 스타일에서 리소스가 페이지나 응용 프로그램 수준 (암시적 스타일)에서 일반적으로 컨트롤 형식에 적용 합니다. 이 속성은 설정 하거나 반환 하지 기본 (테마) 스타일 않지만 암시적 스타일 또는 요소에 역할을 하는 명시적 스타일을 반환 합니다. 암시적 또는 명시적 스타일의 경우 중요 하지 않습니다 스타일은 지정 된 이름이 든 리소스로 로컬로 정의 합니다.  
  
 스타일 정의는 몇 가지 제한 사항이 있습니다. 전체를 다시 설정할 수 있습니다 <xref:System.Windows.FrameworkElement.Style%2A> 속성을 새 <xref:System.Windows.Style> 언제 든 지는 이렇게 하면 레이아웃이 다시 강제 됩니다. 그러나 가능한 한 즉시 로드 된 요소에 의해 해당 스타일 사용 하 게 되는 <xref:System.Windows.Style> 고려해 야 봉인 합니다. 사용 중인 스타일의 개별 속성을 변경 하는 동안 (컬렉션 내에서 아무 것도 같은 <xref:System.Windows.Style.Setters%2A>) 예외를 throw 합니다. 태그에 정의 된 스타일 (리소스)에 대 한 리소스 사전에서 로드 된 또는 인라인 스타일) (에 포함 된 페이지가 로드 되는 즉시 사용 중인 것으로 간주 됩니다.  
  
 <xref:System.Windows.FrameworkElement.Style%2A> 특별 한 우선 순위를 사용 하 여 종속성 속성이입니다. 로컬에서 설정 스타일은 일반적으로 가장 높은 우선 순위로 속성 시스템으로 작동 합니다. 경우는 <xref:System.Windows.FrameworkElement.Style%2A> 이 시점에서 해당 형식을 지정 하는 로컬 또는 응용 프로그램 리소스에서 암시적 스타일에 대 한 속성 시스템이 확인 하는 로드 하는 동안 null입니다. 이 단계를 수행 하면 스타일은 여전히 null을 프레젠테이션 용도로 동작 스타일을 일반적으로 전환 되는 경우 기본 (테마) 스타일의 기본 스타일에 반환 되지 않습니다는 <xref:System.Windows.FrameworkElement.Style%2A> 속성 값입니다. 참조 [종속성 속성 값 우선 순위](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md) 하거나 [스타일 및 템플릿](~/docs/framework/wpf/controls/styling-and-templating.md)합니다.  
  
<a name="xamlAttributeUsage_Style"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object Style="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_Style"></a>   
## <a name="xaml-property-element-usage"></a>XAML 속성 요소 사용  
  
<a name="xamlValues_Style"></a>   
## <a name="xaml-values"></a>XAML 값  
 *resourceExtension*  
 다음 중 하나:, 또는 합니다. 참조 [XAML 리소스](~/docs/framework/wpf/advanced/xaml-resources.md)합니다.  
  
 *styleResourceKey*  
 요청 되는 스타일을 식별 하는 키입니다. 키의 기존 리소스에 참조를 <xref:System.Windows.ResourceDictionary>입니다.  
  
> [!NOTE]
>  속성 요소 구문은 기술적으로 가능 하지만 대부분의 스타일에 대 한 권장 하지는 않습니다. 참조 [인라인 스타일 및 템플릿](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)합니다. 사용 하 여 바인딩 참조 또는 <xref:System.Windows.Data.Binding> 가능 하지만 일반적이 지 않은 이기도 합니다.  
  
<a name="dependencyPropertyInfo_Style"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.StyleProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 다음 예제에서는 리소스 사전에 스타일을 정의 합니다.  
  
 [!code-xaml[FEResource#StyleProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty)]  
[!code-xaml[FEResource#StyleProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty2)]  
[!code-xaml[FEResource#StyleProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty3)]  
[!code-xaml[FEResource#StyleProperty4](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.StyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable StyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.StyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.Style" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="propertyName">요청된 앰비언트 속성의 이름입니다.</param>
        <summary>이 멤버에 대한 설명을 보려면 <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> 메서드를 참조하세요.</summary>
        <returns><paramref name="propertyName" />을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.Windows.FrameworkElement> 인스턴스가 <xref:System.Windows.Markup.IQueryAmbient> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.FrameworkElement.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 대한 사용자 지정 정보를 저장하는 데 사용할 수 있는 임의의 개체 값을 가져오거나 설정합니다.</summary>
        <value>원하는 값입니다. 이 속성에는 기본값이 없습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 다른 Microsoft 프로그래밍 모델에서 응용 프로그램 또는 Windows Forms에 대 한 Visual Basic과 같은 태그 속성과 비슷합니다. <xref:System.Windows.FrameworkElement.Tag%2A> 에 대 한 일부 기본 사용자 지정 정보를 저장할 수 있는 기존 속성 위치를 제공 하려는 <xref:System.Windows.FrameworkElement> 하지 않고도 하위 요소.  
  
 속성 요소 사용 설정 하기 위해 사용 해야 하는 개체를 사용 하는이 속성을 하기 때문에 <xref:System.Windows.FrameworkElement.Tag%2A> , 문자열 등의 알려진된 기본 제공 형식 변환기를 사용 하 여 개체 이외의 값으로 XAML의 속성입니다. 이 방식으로 사용 되는 개체 일반적으로 표준 WPF 네임 스페이스에 포함 되지 않은 하 고 따라서 XAML 요소로 소개 하기 위해 외부 네임 스페이스에 네임 스페이스 매핑을 필요할 수 있습니다. 세부 정보를 참조 하세요. [XAML 네임 스페이스 및 WPF XAML에 대 한 매핑 Namespace](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md) 하 고 [XAML 및 WPF에 대 한 사용자 지정 클래스](~/docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md)합니다.  
  
<a name="dependencyPropertyInfo_Tag"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.TagProperty>|  
|메타 데이터 속성 설정 `true`|없음|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="TagProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TagProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TagProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.TagProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TagProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TagProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TagProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.TagProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.Tag" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TargetUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ TargetUpdated;" />
      <MemberSignature Language="F#" Value="member this.TargetUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.TargetUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 속성 바인딩에 대한 대상 값이 변경되면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트에 대 한 별칭을 만듭니다는 <xref:System.Windows.Data.Binding.TargetUpdated> 이벤트에 의해 발생 하는 <xref:System.Windows.Data.Binding> 이 요소와 연결 합니다. 이 일반적으로 해당 바인딩이 양방향 바인딩으로 바인딩된 종속성 속성은는 이전 속성 값이 이제 유효성 검사 또는 속성 또는 데이터 원본을 지 원하는 캐싱 구성표에 따라 유효한 의미 합니다.  
  
 이벤트 데이터를 사용 합니다 <xref:System.Windows.FrameworkElement.TargetUpdated> 대상 값이 업데이트를 보고 하는 특정 속성을 결정 하는 이벤트입니다.  
  
<a name="xamlAttributeUsage_TargetUpdated"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object TargetUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.TargetUpdated" />
      </Docs>
    </Member>
    <Member MemberName="TemplatedParent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject TemplatedParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject TemplatedParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.TemplatedParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemplatedParent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ TemplatedParent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemplatedParent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.TemplatedParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소의 템플릿 부모에 대한 참조를 가져옵니다. 요소가 템플릿을 통해 만들어지지 않은 경우에는 이 속성이 관련이 없습니다.</summary>
        <value>요소입니다 <see cref="T:System.Windows.FrameworkTemplate" /> <see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> 이 요소를 만들 수 있습니다. 이 값은 대개 <see langword="null" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkElement.TemplatedParent%2A> 대개 `null` 응용 프로그램 태그 또는 코드에서 생성 된 개체에 대 한 합니다. 템플릿을 통해 직접 해당 개체를 만들기 때문입니다. 루트, 논리적 트리를 탐색 하 여 가져온 개체 참조 또는 일반적인 이름으로 참조 템플릿에서 제공 되지 않습니다.  
  
 인 사례 <xref:System.Windows.FrameworkElement.TemplatedParent%2A> 아닐 `null` 사용 하 여 시각적 트리를 탐색 하기 낮은 수준의 특정 입력 이벤트 적중 테스트, 이벤트 처리 등의 작업을 포함 <xref:System.Windows.Media.VisualTreeHelper>, 또는 열거자를 사용 하 여 작업에 제공 된 요소를 반환 하는 템플릿에서 합니다. 또 다른 경우는 명시적으로 호출 하는 경우 <xref:System.Windows.FrameworkTemplate.FindName%2A> 기존에 대해 <xref:System.Windows.FrameworkTemplate> 되며 반환된 된 개체를 사용 하 여 작업 합니다.  
  
 템플릿은 실제로 공유 개체를 서식 파일의 내용을 한 번만 생성 됩니다. 따라서 템플릿에서 생성 된 요소에 대 한 개체 참조를 가져온 경우 명확한 논리 트리의 페이지 루트까지 도달 하지 않습니다를 알 수 있습니다. 이러한 템플릿 참조 페이지의 논리 트리에 연결 하려면 가져와야는 <xref:System.Windows.FrameworkElement.TemplatedParent%2A> 값 및 계속를 원하는 대로 해당 요소 트리를 탐색 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public object ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ToolTip { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTip : obj with get, set" Usage="System.Windows.FrameworkElement.ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.ToolTip)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]에서 이 요소에 대해 표시되는 도구 설명 개체를 가져오거나 설정합니다.</summary>
        <value>도구 설명 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 값 형식인 경우 <xref:System.Windows.Controls.ToolTip>, 해당 값은에서 사용할 도구 설명의 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]합니다.  다른 형식의 값이 있으면 해당 값으로 사용할 합니다 *콘텐츠* 에 대 한는 <xref:System.Windows.Controls.ToolTip> 제공 (생성 된) 시스템에서. 자세한 내용은 <xref:System.Windows.Controls.ToolTipService>를 참조하십시오. 추가적으로 사용자 지정할 수 있는 연결 된 속성을 제공 하는 서비스 클래스는 <xref:System.Windows.Controls.ToolTip>합니다.  
  
<a name="xamlAttributeUsage_ToolTip"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object ToolTip="toolTipContent"/>  
```  
  
<a name="xamlPropertyElementUsage_ToolTip"></a>   
## <a name="xaml-property-element-usage"></a>XAML 속성 요소 사용  
  
```  
<object>  
  <object.ToolTip>  
    <ToolTip .../>  
  </object.ToolTip>  
</object>  
- or -  
<object>  
  <object.ToolTip>  
    toolTipObjectContent  
  </object.ToolTip>  
</object>  
```  
  
<a name="xamlValues_ToolTip"></a>   
## <a name="xaml-values"></a>XAML 값  
 *toolTipContent*  
 에 대 한 표시 텍스트를가 하는 문자열을 <xref:System.Windows.FrameworkElement.ToolTip%2A>입니다.  
  
 *toolTipObjectContent*  
 에 대 한 내용으로 사용 해야 하는 개체 요소 형식에 제공 된 일부 개체는 <xref:System.Windows.FrameworkElement> 합니다. 일반적을 <xref:System.Windows.FrameworkElement> 또는 다른 요소에 대 한 레이아웃 합성을 만드는 <xref:System.Windows.FrameworkElement.ToolTip%2A>, 최종적으로 합치기 내에 텍스트 콘텐츠를 포함 합니다. 이 사용법에서 합니다 <xref:System.Windows.Controls.ToolTip> 요소가 만들어집니다 구문 분석 된에서 암시적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], 및 *toolTipObjectContent* 내용으로 설정 되어 해당 <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> 속성.  
  
 <`ToolTip` .../>  
 <xref:System.Windows.Controls.ToolTip>을 참조하세요.  
  
<a name="dependencyPropertyInfo_ToolTip"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.ToolTipProperty>|  
|메타 데이터 속성 설정 `true`|없음|  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.Controls.ToolTip> 코드 및 집합에는 <xref:System.Windows.FrameworkElement.ToolTip%2A> 속성을를 <xref:System.Windows.Controls.Primitives.StatusBar> 컨트롤입니다.  
  
 [!code-csharp[StatusBar#MakeProgressBar](~/samples/snippets/csharp/VS_Snippets_Wpf/StatusBar/CSharp/Window1.xaml.cs#makeprogressbar)]
 [!code-vb[StatusBar#MakeProgressBar](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StatusBar/visualbasic/window1.xaml.vb#makeprogressbar)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipClosing As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipClosing;" />
      <MemberSignature Language="F#" Value="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소의 도구 설명을 닫기 직전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 표시 된 <xref:System.Windows.FrameworkElement.ToolTipClosing> 이벤트를 처리 됨으로 도구 설명 닫기 취소 되지 않습니다. 도구 설명이 표시 되 면 도구 설명 닫기 에서만 수행 됩니다 UI 사용 하 여 사용자 상호 작용에 응답 합니다.  
  
 이 이벤트는 <xref:System.Windows.EventTrigger> 스타일에서입니다. 이 이벤트의 식별자 필드 다시 사용 하 여 서비스 수준 이벤트에 대 한 추가/제거 이벤트 메서드를 노출 하지 않는 서비스에서 구현 때문입니다.  
  
<a name="routedEventInfo_ToolTipClosing"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.ToolTipClosingEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   재정의 <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipOpening As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipOpening;" />
      <MemberSignature Language="F#" Value="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소의 도구 설명이 열리면 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ui에서 처리기에 대 한 도구 설명이 표시 되지 않게 <xref:System.Windows.FrameworkElement.ToolTipOpening> 표시할 수는 <xref:System.Windows.Controls.ToolTipEventArgs> 이벤트 데이터를 처리 합니다. 그렇지 않은 경우는 도구 설명이 표시 됩니다, 값을 사용 하 여 <xref:System.Windows.FrameworkElement.ToolTip%2A> 도구 설명 콘텐츠로 속성. 다른 가능한 시나리오는 값을 다시 설정 하는 처리기를 작성할 수 있습니다는 <xref:System.Windows.FrameworkElement.ToolTip%2A> 도구 설명이 표시 되는 바로 전에 이벤트 원본에 있는 요소에 대 한 속성입니다.  
  
 <xref:System.Windows.FrameworkElement.ToolTipOpening> 경우 발생 하지 것입니다 값 <xref:System.Windows.FrameworkElement.ToolTip%2A> 는 `null` 또는 기타 수단을 해제 합니다. 의도적으로 설정 하지 마세요 <xref:System.Windows.FrameworkElement.ToolTip%2A> 에 `null` 도구 설명이 열려 또는;이 도구 설명 닫기의 결과 없습니다 열고 UI에는 원하지 않는 시각적 요소가 만들어집니다 대신 합니다.  
  
 합니다 <xref:System.Windows.FrameworkElement.ToolTipOpening> 이벤트 일 수 없습니다는 <xref:System.Windows.EventTrigger> 스타일에서입니다. 이 이벤트의 식별자 필드 다시 사용 하 여 서비스 수준 이벤트에 대 한 추가/제거 이벤트 메서드를 노출 하지 않는 서비스에서 구현 때문입니다.  
  
<a name="routedEventInfo_ToolTipOpening"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   재정의 <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> 파생된 클래스에서이 이벤트에 대 한 클래스 처리를 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ToolTipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ToolTipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ToolTipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.ToolTip" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.FrameworkElement.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소에 직접 설정되거나 자식 요소에 설정된 트리거의 컬렉션을 가져옵니다.</summary>
        <value><see cref="T:System.Windows.Trigger" /> 개체의 강력한 형식의 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  이 속성 설정할 수 있습니다 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 컬렉션 개체에 액세스 하 고 추가 등의 다양 한 메서드를 사용 하 여 또는 컬렉션 구문을 표시 합니다. 컬렉션 개체 자체를 액세스 하는 속성은 읽기 전용, 컬렉션 자체는 읽기 / 쓰기입니다. 속성이 루트 요소에만 있습니다. 찾거나 다른 곳에서 설정 하려고 하면 예외가 throw 됩니다.  
  
 이 속성은이 요소에서 사용에서 하는 스타일의 일부로 존재 하는 트리거를 검사할 수 없습니다. 만 문자 그대로 태그 또는 코드에서 컬렉션에 추가 된 트리거의 컬렉션을 보고 합니다. 요소 일반적으로 이러한 요소가 없는 기본적으로 기존 (템플릿을 통해 예를 들어); 대신 스타일에서 설정 컨트롤 합치기에서 제공 하는 트리거에 대 한 보다 일반적인 것입니다.  
  
 동작 측면에서 (선언 된 요소에서 생성 되는 효과 설정 하려는 시도 <xref:System.Windows.FrameworkElement.Triggers%2A> 컬렉션), 트리거 조건 및 트리거 영향이이 요소에 있을 수 있습니다 또는 논리적 트리에서 자식 요소에 있을 수 있습니다. 와 같은 수명 이벤트를 사용 하는 경우 <xref:System.Windows.FrameworkElement.Loaded> 이 컬렉션을 가져오려면 자식 요소의 트리거 아직 없을 수 있습니다 완전히 로드 및 컬렉션은 런타임 시 실제로 것 보다 더 작은 됩니다.  
  
 요소에 설정 된 트리거의 컬렉션만 지원 합니다. 이때 <xref:System.Windows.EventTrigger>에서 속성 트리거는 없습니다 (<xref:System.Windows.Trigger>). 속성 트리거를 필요로 하는 경우 스타일 또는 템플릿 내에 배치한 하며 그런 다음 해당 스타일 또는 템플릿 요소에 할당 하거나 통해 직접는 <xref:System.Windows.FrameworkElement.Style%2A> 속성 또는 암시적 스타일 참조를 통해 간접적으로 합니다.  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>XAML 속성 요소 사용  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>XAML 값  
 *oneOrMoreTriggers*  
 하나 이상의 정의 <xref:System.Windows.EventTrigger> 요소입니다. 이러한 각 트리거는 올바른 스토리 보드 작업 및 참조를 포함 해야 합니다. 참고가이 컬렉션 페이지의 루트 요소에만 설정할 수 있습니다. 자세한 내용은 [스토리보드 개요](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)를 참조하세요.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="TryFindResource">
      <MemberSignature Language="C#" Value="public object TryFindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TryFindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ TryFindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.TryFindResource : obj -&gt; obj" Usage="frameworkElement.TryFindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey">찾을 리소스의 키 식별자입니다.</param>
        <summary>지정된 키를 사용하여 리소스를 검색하고 해당 리소스를 반환합니다(있는 경우).</summary>
        <returns>찾은 리소스이거나, 제공된 <paramref name="key" />에 리소스가 없으면 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 리소스를 호출 하는 요소에 없는 경우 논리 트리를 통해 부모 리소스 트리를 위쪽으로 검색, 트리는 동일한 방식에서 리소스 검색된 경우 요청한 키 런타임 시. 메서드는 반환 `null` 시 트리의 기존 조건 당 리소스 트리의 해당 키의 리소스가 존재 했던 경우에 있는 <xref:System.Windows.FrameworkElement.TryFindResource%2A> 라고 합니다.  
  
 일반적으로 즉시 캐스팅 반환 되는 리소스 값으로 설정 하 려 했던는 속성의 형식으로 반환 합니다.  
  
 <xref:System.Windows.FrameworkElement.FindResource%2A> 메서드가 비슷한 동작을 제외 하 고 제공 된 키를 포함 하는 리소스가 반환 된 경우 예외가 throw 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 집합 클릭 되는 단추 리소스 정의 브러시로 배경이 구할 수 있는 호출 하 여는 단추 처리기로 구현 됩니다 <xref:System.Windows.FrameworkElement.TryFindResource%2A> 자체입니다. 이 구현에서는 요소 트리 및 리소스를 찾습니다 (리소스 자체에 정의 된 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 이며 표시 되지 않습니다).  
  
 [!code-csharp[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#fetryfindresource)]
 [!code-vb[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#fetryfindresource)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Unloaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unloaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Unloaded;" />
      <MemberSignature Language="F#" Value="member this.Unloaded : System.Windows.RoutedEventHandler " Usage="member this.Unloaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>로드된 요소의 요소 트리에서 요소를 제거할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 직접 라우트된 이벤트에 대 한 경로 따르지, 발생 하는 동일한 요소 내 에서만 처리 됩니다. 라우트된 이벤트는 라우트된 이벤트 동작은 다른 지원지 않습니다 직접: 액세스할 수 있는 처리기 컬렉션을 지원 하며으로 사용할 수는 <xref:System.Windows.EventTrigger> 스타일에서입니다.  
  
 <xref:System.Windows.FrameworkElement.Loaded> 및 <xref:System.Windows.FrameworkElement.Unloaded> 시스템 사용자가 시작한 테마 변경으로 인해 컨트롤에서 발생할 수 있습니다. 테마를 변경 하면 컨트롤 템플릿 및 차례로 언로드하고 다시 로드 하기 위해 전체 컨트롤이 포함 된 시각적 트리를 무효화 합니다. 따라서 <xref:System.Windows.FrameworkElement.Unloaded> 페이지 외부로 탐색에만 발생 하도록 가정할 수 없습니다.  
  
 <xref:System.Windows.FrameworkElement.Unloaded> 응용 프로그램 종료를 시작한 후에 이벤트가 발생 하지 않습니다. 조건을 정의한 경우 응용 프로그램이 종료 된 <xref:System.Windows.Application.ShutdownMode%2A> 속성 발생 합니다. 에 대 한 처리기 내에서 정리 코드를 배치 하는 경우는 <xref:System.Windows.FrameworkElement.Unloaded> 과 같은 이벤트를 <xref:System.Windows.Window> 또는 <xref:System.Windows.Controls.UserControl>, 것을 호출할 수 없습니다 예상 대로입니다.  
  
<a name="routedEventInfo_Unloaded"></a>   
## <a name="routed-event-information"></a>라우팅 이벤트 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.UnloadedEvent>|  
|라우팅 전략|직접|  
|대리자|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="UnloadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent UnloadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent UnloadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnloadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ UnloadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnloadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="E:System.Windows.FrameworkElement.Unloaded" /> 라우트된 이벤트를 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 라우트된 이벤트가 등록될 때 라우트된 이벤트 식별자가 생성됩니다. 이러한 식별자에는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가하기 위한 유틸리티 메서드가 포함됩니다. 이러한 식별자를 사용하여 클래스 처리기를 추가할 수 있습니다.  
  
 라우트된 이벤트 등록에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>를 참조하세요. 라우트된 이벤트 식별자를 사용하여 클래스 처리기를 추가하는 방법에 대한 자세한 내용은 <xref:System.Windows.EventManager.RegisterClassHandler%2A>를 참조하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.UnregisterName : string -&gt; unit" Usage="frameworkElement.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">현재 범위에서 제거할 이름-개체 쌍의 이름입니다.</param>
        <summary><see cref="T:System.Windows.NameScope" /> 등록 취소 메서드에 대한 액세스를 간소화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 만 하면 등록을 취소할 이름을 다시 동일한 이름 가진 다른 요소를 등록 하려는 경우.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultStyle">
      <MemberSignature Language="C#" Value="public void UpdateDefaultStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateDefaultStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UpdateDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateDefaultStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateDefaultStyle();" />
      <MemberSignature Language="F#" Value="member this.UpdateDefaultStyle : unit -&gt; unit" Usage="frameworkElement.UpdateDefaultStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>기본 스타일을 현재 <see cref="T:System.Windows.FrameworkElement" />에 다시 적용합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRounding">
      <MemberSignature Language="C#" Value="public bool UseLayoutRounding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseLayoutRounding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberSignature Language="VB.NET" Value="Public Property UseLayoutRounding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseLayoutRounding { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseLayoutRounding : bool with get, set" Usage="System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>레이아웃 중에 이 요소의 크기와 위치에 레이아웃 반올림을 적용해야 하는지를 표시하는 값을 가져오거나 설정합니다.</summary>
        <value>레이아웃 반올림이 적용되는 경우 <see langword="true" />이고, 그렇지 않은 경우 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> 요소에 대 한 속성은 `true`, 하는 동안 계산 되는 모든 비정 수 픽셀 값을 <xref:System.Windows.UIElement.Measure%2A> 및 <xref:System.Windows.UIElement.Arrange%2A> 전달 전체 픽셀 값으로 반올림 됩니다.  
  
 이 속성은 자식 요소에 의해 상속 됩니다.  
  
> [!NOTE]
>  설정 해야 <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> 에 `true` 루트 요소입니다. 부모 좌표로; 자식 좌표를 추가 하는 레이아웃 시스템 따라서 부모 좌표를 픽셀 경계에 없는 경우 자식 좌표가 픽셀 경계에 있습니다. 경우 <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> 루트에 설정, 설정할 수 없습니다. <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> 자식에 원하는 효과 가져옵니다.  
  
 픽셀 경계에 개체를 그리기는 지 장치 픽셀 가운데 떨어질 때 앤티 앨리어싱으로 인해 생성 되는 반투명 가장자리를 제거 합니다. 다음 그림에서는 장치 픽셀 가운데에 있는 단일 픽셀 너비 줄의 출력을 보여줍니다. 왼쪽에 있는 줄 레이아웃 반올림을 사용 하지 않는 이며 앤티 앨리어싱된 합니다. 오른쪽의 선 레이아웃 반올림을 사용 합니다.  
  
 ![방지&#45;단일 픽셀 선에 비교한 앨리어싱된 선입니다. ] (~/add/media/pixelsnaplinecompare.PNG "단일 픽셀 선에 비교한 앤티 앨리어싱된 선입니다.")  
  
 레이아웃 반올림을 사용 하는 경우 및 <xref:System.Windows.GridUnitType.Star> 크기 조정, 레이아웃 시스템 사소한 차이에 만듭니다 하위 픽셀 렌더링 하지 않으려면 열 또는 행 측정 합니다. 예를 들어 눈금 크기의 3 개의 열을 사용 하 여 100의 전체 너비에 <xref:System.Windows.GridUnitType.Star>된 33.3의 같은 너비는 세 개의 열을 만드는 대신, 레이아웃 시스템 33 및 너비는 34는 너비가 있는 2 열을 만듭니다.  
  
> [!NOTE]
>  .NET 4.6에서 테두리가 있는 컨트롤에 클리핑 인스턴스를 줄이기 위해 반올림 하는 레이아웃으로 변경 되었습니다. 기본적으로이 기능에는 대상 프레임 워크가.NET Framework 4.6 이상이 경우 활성화 됩니다. 이전 버전의 framework 대상으로 하는 응용 프로그램 app.config 파일에 다음 설정을 추가 하 여 새 동작을 옵트인 수 있습니다.: `<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>` 응용 프로그램은.NET Framework 4.6에서 실행 중인 경우 설정은만 적용이 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 효과 보여 줍니다.는 <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> 속성이 단일 픽셀 너비 줄에 있습니다. 왼쪽에 있는 줄 레이아웃 반올림을 사용 하지 않으며 오른쪽에 있는 줄 레이아웃 반올림을 사용 합니다. 창 크기를 느리게 조정 하는 경우 해당 레이아웃 반올림이 적용 차이 볼 수 있습니다.  
  
```xaml  
  
<Page x:Class="LayoutRounding.Lines"  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
    Title="Lines" Name="linesPage"  
    >  
  <StackPanel Width="150"  Margin="7" Orientation="Horizontal">  
    <!-- Single pixel line with layout rounding turned OFF.-->  
    <Rectangle UseLayoutRounding="False"  
       Width="45.5" Margin="10" Height="1" Fill="Red"/>  
    <!-- Single pixel line with layout rounding turned ON.-->  
    <Rectangle UseLayoutRounding="True"  
      Width="45.5" Margin="10" Height="1" Fill="Red"/>  
  </StackPanel>  
  <!-- Background Grid -->  
  <Page.Background>  
    <DrawingBrush  Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">  
      <DrawingBrush.Drawing>  
        <DrawingGroup>  
          <GeometryDrawing Brush="White">  
            <GeometryDrawing.Geometry>  
              <RectangleGeometry Rect="0,0,1,1" />  
            </GeometryDrawing.Geometry>  
          </GeometryDrawing>  
          <GeometryDrawing Geometry="M0,0 L1,0 1,0.1, 0,0.1Z " Brush="#CCCCFF" />  
          <GeometryDrawing Geometry="M0,0 L0,1 0.1,1, 0.1,0Z" Brush="#CCCCFF" />  
        </DrawingGroup>  
      </DrawingBrush.Drawing>  
    </DrawingBrush>  
  </Page.Background>  
</Page>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRoundingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UseLayoutRoundingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UseLayoutRoundingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UseLayoutRoundingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UseLayoutRoundingProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UseLayoutRoundingProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.VerticalAlignment VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.VerticalAlignment VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalAlignment As VerticalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VerticalAlignment VerticalAlignment { System::Windows::VerticalAlignment get(); void set(System::Windows::VerticalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.VerticalAlignment : System.Windows.VerticalAlignment with get, set" Usage="System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VerticalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>패널 또는 항목 컨트롤 같은 부모 요소에 구성되어 있을 경우 이 요소에 적용되는 세로 맞춤 특징을 가져오거나 설정합니다.</summary>
        <value>세로 맞춤 설정입니다. 기본값은 <see cref="F:System.Windows.VerticalAlignment.Stretch" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때 <xref:System.Windows.FrameworkElement.Height%2A> 하 고 <xref:System.Windows.FrameworkElement.Width%2A> 속성 요소에 명시적으로 설정 하 고 이러한 측정 레이아웃 우선이 속성을 설정 하 여 일반적인 효과 취소 <xref:System.Windows.VerticalAlignment.Stretch>합니다.  
  
 <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> 가 [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 란 실제로 종속성 속성에 대 한 속성 접근자입니다. 이 특정 종속성 속성에는 상당히 자주 해당 "기본값"이 파생 된 요소 클래스, 특히 컨트롤에서에서 서로 다르게 설정에 있습니다. 일반적으로이 두 가지 방법 중 하나에서 발생 합니다: 특정 파생 클래스 이지만, 해당 기본값을 설정 하는 것에 대 한 메타 데이터는 다른 종속성 속성이 다시 등록 또는 해당 종속성 속성 값을 다르게 설정 하는 기본 스타일이 적용 되 고 있습니다. 예를 들어, 명백한 "기본값인" <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> 에 대 한는 <xref:System.Windows.Controls.ComboBoxItem> 컨트롤이 <xref:System.Windows.VerticalAlignment.Center>경우에 <xref:System.Windows.Controls.ComboBoxItem> 상속 <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> 에서 직접 <xref:System.Windows.FrameworkElement>입니다. 기본 스타일 내에서 다시 설정 된 값 때문에 이것이 <xref:System.Windows.Controls.ComboBoxItem>, 스타일의 컨트롤 템플릿 내에서.  
  
 <xref:System.Windows.Controls.Canvas> 사용 하지 않습니다 <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> 때문에 레이아웃을 구성할 때 <xref:System.Windows.Controls.Canvas> 절대 위치 설정을 기반으로 합니다.  
  
 상속 되는 경우 <xref:System.Windows.Controls.ComboBoxItem> 파생 클래스 또는 <xref:System.Windows.Controls.ComboBoxItem> 되도록이 속성의 기본값을 재정의 <xref:System.Windows.VerticalAlignment.Center>합니다.  
  
<a name="dependencyPropertyInfo_VerticalAlignment"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VerticalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VerticalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VerticalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VerticalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VerticalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualChildrenCount">
      <MemberSignature Language="C#" Value="protected override int VisualChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisualChildrenCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property VisualChildrenCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int VisualChildrenCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.VisualChildrenCount : int" Usage="System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 요소 내 시각적 자식 요소의 수를 가져옵니다.</summary>
        <value>이 요소에 대한 시각적 자식 요소의 수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Windows.FrameworkElement> 구현의 <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> 항상 하나 또는 0을 반환 합니다. 하나를 초과할 수 있는 시각적 자식 컬렉션을 유지 관리 하는 클래스는 모두이 속성을 재정의 해야 하 고 <xref:System.Windows.FrameworkElement.GetVisualChild%2A>입니다.  
  
 이 속성은 레이아웃 재정의 구현 하는 목적에 대 한 현재 자식 컬렉션의 상한값을 확인 하려면 일반적으로 사용 됩니다 (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>).  
  
   
  
## Examples  
 다음 예제에서는 사용자 지정 표시기에서 선언 된 값을 사용 하는 방법을 보여 줍니다.는 <xref:System.Windows.Media.VisualCollection> 의 재정의 통해 여러 시각적 자식에 대 한 유지 관리 하 고 이러한 보고서에 값 <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> 및 <xref:System.Windows.FrameworkElement.GetVisualChild%2A>합니다.  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>클래스를 지 원하는 경우 둘 이상의 시각적 자식 자식 요소 컬렉션에서 해당 컬렉션의 요소 수를 반환 하도록이 속성을 재정의 합니다. 컬렉션 개체 자체를 반환 하는 경우에이 작업을 수행 해야 합니다. WPF 프레임 워크 수준의 요소 레이아웃 논리 가정 모든 요소를 통해 올바른 개수가 반환 하도록 해당 <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> 속성입니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Width : double with get, set" Usage="System.Windows.FrameworkElement.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소의 너비를 가져오거나 설정합니다.</summary>
        <value>요소의 너비([!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)])입니다. 기본값은 <see cref="F:System.Double.NaN" />입니다. 이 값은 0.0보다 크거나 같아야 합니다. 상한 정보에 대한 설명을 참조하세요.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 세 가지 속성 중 하나에 <xref:System.Windows.FrameworkElement> 너비 정보를 지정 하는 합니다.  다른 두 가지 <xref:System.Windows.FrameworkElement.MinWidth%2A> 고 <xref:System.Windows.FrameworkElement.MaxWidth%2A>입니다.  이러한 값 간에 충돌이 발생 하는 경우를 실제 너비가 결정에 대 한 응용 프로그램의 순서 <xref:System.Windows.FrameworkElement.MinWidth%2A> 다음을 적용할 수 있어야 <xref:System.Windows.FrameworkElement.MaxWidth%2A>, 마지막으로 범위 내에 있는 이러한 각 경우 <xref:System.Windows.FrameworkElement.Width%2A>합니다.  
  
 이 속성의 반환 값에 설정 된 값과 항상 동일 합니다. 반대로, 값은 <xref:System.Windows.FrameworkElement.ActualWidth%2A> 다를 수 있습니다. 레이아웃은 어떤 이유로 권장 되는 크기를 거부 있을 수 있습니다. 레이아웃 시스템 자체적으로 비동기적으로 작동 하는 속성 시스템 집합을 기준으로 또한 <xref:System.Windows.FrameworkElement.Width%2A> 한 특정 크기 조정 속성 변경 내용을 아직 처리 되지 않을 수 있습니다.  
  
 또한 허용 가능한 <xref:System.Double> 값이이 속성 일 수도 있습니다 <xref:System.Double.NaN?displayProperty=nameWithType>합니다. 자동 크기 조정 동작을 지정 하는 방법입니다. [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 는 값을 설정 하면 문자열 "Auto" (대/소문자 구분) 자동 크기 조정 동작을 사용 하도록 설정 합니다. 자동 크기 조정 동작 요소를 사용할 수 있는 너비 맞게 채워짐을 나타냅니다. 그러나 특정 컨트롤 자동 크기 조정 동작은 특히 다시 사용 하도록 설정 하지 않은 수 없게 하는 기본 스타일의 기본 값 제공 하는 자주 note 합니다.  
  
 유효성 검사 외에도 비결 정적 상한 값에 바인딩된 <xref:System.Windows.FrameworkElement.Width%2A> 레이아웃 시스템에 적용 되는 (이 매우 큰 숫자로 보다 큰 <xref:System.Single.MaxValue?displayProperty=nameWithType> 하지만 미만의 <xref:System.Double.MaxValue?displayProperty=nameWithType>). 이 경계를 초과 하는 경우 요소는 렌더링 되지 않으며, 예외가 throw 되지 않습니다. 설정 하지 않으면 <xref:System.Windows.FrameworkElement.Width%2A> 비결 정적 상한 값이 초과 가능한 시각적 표시, 또는 사용자의 최대 크기 보다 훨씬 큰 값으로.  
  
<a name="xamlAttributeUsage_Width"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object Width="double"/>  
- or -  
<object Width ="qualifiedDouble"/>  
- or -  
<object Width ="Auto"/>  
```  
  
<a name="xamlValues_Width"></a>   
## <a name="xaml-values"></a>XAML 값  
 *double*  
 <xref:System.Double>  
  
 문자열 표현 된 <xref:System.Double> 0.0 보다 크거나 같은 값입니다. 상한 정보에 대한 설명을 참조하세요. 이 값으로 해석 되는 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 측정 합니다. 문자열 소수점이 하를 명시적으로 포함 되지 해야 합니다. 예를 들어 값 `1` 허용 됩니다.  
  
 *qualifiedDouble*  
 A *이중* 단위 선언 문자열 중 하나에서 다음 위에서 설명한 대로 값: `px`, `in`, `cm`, `pt`합니다.  
  
 `px` (기본값) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` 인치; 1에서 96px = =  
  
 `cm` 센티미터; 1cm==(96/2.54) px  
  
 `pt` 포인트; 1pt==(96/72) px  
  
 `Auto`  
 자동 크기 조정 동작을 사용 하도록 설정 합니다. 설명 부분을 참조하세요.  
  
<a name="dependencyPropertyInfo_Width"></a>   
## <a name="dependency-property-information"></a>종속성 속성 정보  
  
|||  
|-|-|  
|식별자 필드|<xref:System.Windows.FrameworkElement.WidthProperty>|  
|메타 데이터 속성 설정 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.WidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.WidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.FrameworkElement.Width" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>