<Type Name="VisualState" FullName="System.Windows.VisualState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fb39d86958aa250a4d7334e24544cce355d29b6f" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55341626" /></Metadata><TypeSignature Language="C#" Value="public class VisualState : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualState extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualState" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualState&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualState : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualState = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Storyboard")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>특정 상태에 있는 컨트롤의 시각적 모양을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualState> 특정 상태에 있을 때 컨트롤의 모양을 지정 합니다. 예를 들어 경우는 <xref:System.Windows.Controls.Button> 은 눌렀을 때 해당 테두리 않을 평소 보다 다른 색입니다.  합니다 <xref:System.Windows.VisualState> 클래스에는 <xref:System.Windows.VisualState.Storyboard%2A> 컨트롤의 모양을 변경 하는 속성입니다. 컨트롤에 지정 된 상태로 전환 하는 경우는 <xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType> 속성을 <xref:System.Windows.VisualState.Storyboard%2A> 시작 합니다. 컨트롤 상태를 종료 하는 경우는 <xref:System.Windows.VisualState.Storyboard%2A> 중지 합니다.  
  
 합니다 <xref:System.Windows.VisualStateGroup.States%2A?displayProperty=nameWithType> 속성에 들어 <xref:System.Windows.VisualState> 개체입니다. <xref:System.Windows.VisualStateGroup> 개체에 추가 됩니다는 <xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=nameWithType> 연결 된 속성에 정의 된의에 <xref:System.Windows.FrameworkElement>합니다. 추가할 수 있습니다 <xref:System.Windows.VisualState> 개체를 하나 <xref:System.Windows.FrameworkElement>, 있지만 대개는에서 사용 되는 <xref:System.Windows.Controls.ControlTemplate> 의 <xref:System.Windows.Controls.Control>합니다. 만드는 방법에 대 한 자세한를 <xref:System.Windows.Controls.ControlTemplate> 하 고 <xref:System.Windows.VisualState> 기존 컨트롤에 대 한 개체 참조 [ControlTemplate을 만들어 기존 컨트롤의 모양 사용자 지정](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)합니다. 사용 하는 예제에 대 한 <xref:System.Windows.VisualState> 외부의 개체를 <xref:System.Windows.Controls.ControlTemplate>를 참조 합니다 <xref:System.Windows.VisualStateManager> 클래스입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.VisualStateGroup> 에 <xref:System.Windows.Controls.ControlTemplate> 의 <xref:System.Windows.Controls.Button> 호출 `CommonStates` 추가 <xref:System.Windows.VisualState> 개체의 상태에 대 한 `Normal`, `Pressed`, 및 `MouseOver`합니다. <xref:System.Windows.Controls.Button> 도 호출 상태를 정의 `Disabled` 제공 되는 합니다 `CommonStates` <xref:System.Windows.VisualStateGroup>, 하지만 예제에서는 간단한 설명을 위해 생략 합니다. 전체 예제를 보려면 [ControlTemplate을 만들어 기존 컨트롤의 모양 사용자 지정](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)합니다.  
  
 [!code-xaml[VSMButtonTemplate#10](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualState.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualState();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.VisualState" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualState.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.VisualState.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.VisualState" />의 이름을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Windows.VisualState" />의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 시각적 상태 요소를 전달 하 여 입력 해야 하는 것이 지정할 합니다 <xref:System.Windows.VisualState.Name%2A> 의 <xref:System.Windows.VisualState> 에 <xref:System.Windows.VisualStateManager>합니다.  
  
 때를 <xref:System.Windows.Controls.Control> 사용 하 여는 <xref:System.Windows.VisualStateManager> 에 <xref:System.Windows.Controls.ControlTemplate>, 컨트롤 작성자는 지정 해야 <xref:System.Windows.VisualState> 개체에서 찾을 수 있어야 합니다 해당 <xref:System.Windows.Controls.ControlTemplate> 배치 하 여는 <xref:System.Windows.TemplateVisualStateAttribute> 클래스 시그니처에 대. <xref:System.Windows.Controls.ControlTemplate> 작성자는 새 정의 <xref:System.Windows.VisualState> 집합과 개체를 <xref:System.Windows.VisualState.Name%2A> 속성에 지정 된 값을는 <xref:System.Windows.TemplateVisualStateAttribute.Name%2A?displayProperty=nameWithType> 속성입니다.  
  
 포함 된 컨트롤에 대 한 시각적 상태의 이름을 찾으려면 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]를 참조 하세요 [Control 스타일 및 템플릿](~/docs/framework/wpf/controls/control-styles-and-templates.md)합니다. 만드는 방법에 대 한 자세한를 <xref:System.Windows.Controls.ControlTemplate> 하 고 <xref:System.Windows.VisualState> 기존 컨트롤에 대 한 개체 참조 [ControlTemplate을 만들어 기존 컨트롤의 모양 사용자 지정](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.VisualStateGroup> 에 <xref:System.Windows.Controls.ControlTemplate> 의 <xref:System.Windows.Controls.Button> 호출 `CommonStates` 추가 <xref:System.Windows.VisualState> 개체의 상태에 대 한 `Normal`, `Pressed`, 및 `MouseOver`합니다. <xref:System.Windows.Controls.Button> 도 호출 상태를 정의 `Disabled` 제공 되는 합니다 `CommonStates` <xref:System.Windows.VisualStateGroup>, 하지만 예제에서는 간단한 설명을 위해 생략 합니다. 전체 예제를 보려면 [ControlTemplate을 만들어 기존 컨트롤의 모양 사용자 지정](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)합니다.  
  
 [!code-xaml[VSMButtonTemplate#10](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Storyboard">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Storyboard Storyboard { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Storyboard Storyboard" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualState.Storyboard" />
      <MemberSignature Language="VB.NET" Value="Public Property Storyboard As Storyboard" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Storyboard ^ Storyboard { System::Windows::Media::Animation::Storyboard ^ get(); void set(System::Windows::Media::Animation::Storyboard ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Storyboard : System.Windows.Media.Animation.Storyboard with get, set" Usage="System.Windows.VisualState.Storyboard" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Storyboard</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>컨트롤이 <see cref="T:System.Windows.Media.Animation.Storyboard" />가 나타내는 상태일 때 컨트롤의 모양을 정의하는 <see cref="T:System.Windows.VisualState" />를 가져오거나 설정합니다.</summary>
        <value>컨트롤이 <see cref="T:System.Windows.VisualState" />가 나타내는 상태일 때 컨트롤의 모양을 정의하는 스토리보드입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 컨트롤에 지정 된 상태로 전환 하는 경우는 <xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType> 속성을 <xref:System.Windows.VisualState.Storyboard%2A> 시작 합니다. 컨트롤 상태를 종료 하는 경우는 <xref:System.Windows.VisualState.Storyboard%2A> 중지 합니다.  
  
   
  
## Examples  
 다음 예제에서는 간단한 <xref:System.Windows.Controls.ControlTemplate> 에 대 한는 <xref:System.Windows.Controls.Button> 하나를 포함 하는 <xref:System.Windows.Controls.Grid>합니다.  합니다 <xref:System.Windows.VisualState> 호출 `MouseOver` 의 색을 변경 하는 스토리 보드에는 <xref:System.Windows.Controls.Grid> 를 통해 사용자가 마우스 녹색에서 빨간색 경우는 <xref:System.Windows.Controls.Button>합니다.  <xref:System.Windows.VisualState> 호출 `Normal` 포함 되어 사용자가 단추 밖으로 마우스를 이동 하는 경우는 <xref:System.Windows.Controls.Grid> 녹색으로 반환 합니다.  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>