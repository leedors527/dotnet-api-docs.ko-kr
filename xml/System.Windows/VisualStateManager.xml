<Type Name="VisualStateManager" FullName="System.Windows.VisualStateManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fdf6939baf9f6829fba034b5c7ae0428da81c32f" /><Meta Name="ms.sourcegitcommit" Value="2d0c7dc45e0d0cebcef58c1b1fb3d5c65bfaa866" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="04/11/2019" /><Meta Name="ms.locfileid" Value="59503569" /></Metadata><TypeSignature Language="C#" Value="public class VisualStateManager : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateManager extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateManager" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualStateManager&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualStateManager : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualStateManager = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>컨트롤의 상태 간 전환에 사용되는 상태 및 논리를 관리합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager> 특정 상태에 있을 때와 컨트롤 상태가 변경 될 때 컨트롤을 컨트롤의 모양에 대 한 상태를 지정할 수 있습니다. 예를 들어, 한 <xref:System.Windows.Controls.Button> 를 누를 때 보다 누를 때 이와 약간 다르게 표시 해야 할 수 있습니다. 두 개의 상태를 <xref:System.Windows.Controls.Button> 정의 누를 때 해당 하 (`"Pressed"`)이 아닐 때 및 (`"Normal"`). 상태에 있을 때 컨트롤의 모양이에 의해 정의 되는 <xref:System.Windows.VisualState>합니다. A <xref:System.Windows.VisualState> 의 컬렉션을 포함 <xref:System.Windows.Media.Animation.Storyboard> 컨트롤 상태인 경우 해당 컨트롤의 모양을 변경 하는 방법을 지정 하는 개체입니다. 설정 하 여 컨트롤에 시각적 상태를 추가 합니다 `VisualStateManager.VisualStateGroups` 컨트롤에 연결 합니다. 각 <xref:System.Windows.VisualStateGroup> 의 컬렉션을 포함 <xref:System.Windows.VisualState> 상호 배타적인 개체입니다. 즉, 컨트롤은 항상 각 정확히 하나의 상태에서 <xref:System.Windows.VisualStateGroup>합니다.  
  
 <xref:System.Windows.VisualStateManager> 컨트롤 특정 상태로 전환 하는 경우를 지정할 수 있습니다. 상태를 변경 하려면 호출 해야 하는 메서드는 시나리오에 따라 달라 집니다. 사용 하는 컨트롤을 만드는 경우는 <xref:System.Windows.VisualStateManager> 에서 해당 <xref:System.Windows.Controls.ControlTemplate>를 호출 합니다 <xref:System.Windows.VisualStateManager.GoToState%2A> 메서드. 만드는 방법에 대 한 자세한 내용은 사용 하는 컨트롤에 대해를 <xref:System.Windows.VisualStateManager>를 참조 하세요 [모양을 사용자 지정할 수는 제어 된 만들기](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md)합니다. 사용 하는 경우는 <xref:System.Windows.VisualStateManager> 외부를 <xref:System.Windows.Controls.ControlTemplate> (사용 하는 경우에 예를 들어를 <xref:System.Windows.VisualStateManager> 에 <xref:System.Windows.Controls.UserControl> 또는 단일 요소), 호출를 <xref:System.Windows.VisualStateManager.GoToElementState%2A> 메서드. 두 경우 모두는 <xref:System.Windows.VisualStateManager> 적절 하 게 시작 하 고 관련 된 상태와 연결 된 스토리 보드를 중지 하는 데 필요한 논리를 수행 합니다. 예를 들어, 컨트롤 상태를 정의 한다는 `State1` 및 `State2`, 각각에 연결 된 스토리 보드가 합니다. 컨트롤에 있으면 `State1` 전달 하 고 `State2` 하 <xref:System.Windows.VisualStateManager.GoToState%2A> 또는 <xref:System.Windows.VisualStateManager.GoToElementState%2A>의 <xref:System.Windows.VisualStateManager> 에서 스토리 보드를 시작 `State2` 에서 storyboard를 중지 하 고 `State1`.  
  
 포함 된 컨트롤 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 사용 하 여를 <xref:System.Windows.VisualStateManager> 시각적 상태를 변경 합니다. 만들 때를 <xref:System.Windows.Controls.ControlTemplate> 포함 된 컨트롤에 대 한 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]에 추가할 수 있습니다 <xref:System.Windows.VisualState> 개체를 컨트롤의 <xref:System.Windows.Controls.ControlTemplate> 특정 상태에서 컨트롤의 모양을 지정 하 합니다. 포함 된 컨트롤에 대 한 시각적 상태의 이름을 찾으려면 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]를 참조 하세요 [Control 스타일 및 템플릿](~/docs/framework/wpf/controls/control-styles-and-templates.md)합니다. 컨트롤의 논리 핸들 이외의 작업을 수행할 필요가 없습니다 있도록 상태 간 전환을 정의 합니다 <xref:System.Windows.VisualState> 새 개체 <xref:System.Windows.Controls.ControlTemplate>합니다. 기존 컨트롤에 대 한 컨트롤 템플릿을 만드는 방법에 대 한 자세한 내용은 참조 하세요. [ControlTemplate을 만들어 기존 컨트롤의 모양 사용자 지정](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)합니다.  
  
 상속 해야 상태 간 전환을 위한 자체 논리를 구현 하려는 경우 <xref:System.Windows.VisualStateManager>를 재정의 합니다 <xref:System.Windows.VisualStateManager.GoToStateCore%2A> 메서드 집합과 <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A?displayProperty=nameWithType> 연결 된 사용자 지정 논리를 사용 하는 컨트롤의 속성.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.Shapes.Rectangle> 추가 <xref:System.Windows.VisualStateGroup> 라는 `CommonStates` 에 `VisualStateManager.VisualStatesGroups` 연결 된 속성입니다. 이 예제에서는 정의 `MouseOver` 하 고 `Normal`<xref:System.Windows.VisualState> 개체는 `CommonStates`<xref:System.Windows.VisualStateGroup>합니다. 위로 마우스 포인터를 이동할 때는 <xref:System.Windows.Shapes.Rectangle>, 변경 빨간색에서 녹색로 0.5 초 이상. 사각형에서 마우스를 이동할 때는 <xref:System.Windows.Controls.Grid> 빨간색 변경 내용을 즉시 다시 합니다. 합니다 `Normal` 상태는 정의 하지 않습니다는 <xref:System.Windows.Media.Animation.Storyboard>합니다. <xref:System.Windows.Media.Animation.Storyboard> 필요 하지 않습니다 경우는 <xref:System.Windows.Shapes.Rectangle> 에서 전환를 `MouseOver` 상태를 `Normal` 상태를 <xref:System.Windows.Media.Animation.Storyboard> 에 대 한 `MouseOver` 중지 되 및 <xref:System.Windows.Media.SolidColorBrush.Color%2A> 속성에 대 한는 <xref:System.Windows.Media.SolidColorBrush> 반환 빨간색입니다.  
  
 [!code-xaml[VSMCustomControl#VSMNoTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml#vsmnotemplate)]  
  
 다음 예제에서는 이전 예제와 호출에 정의 된 이벤트 처리기를 보여 줍니다.는 <xref:System.Windows.VisualStateManager.GoToElementState%2A> 메서드 상태 사이 전환 합니다. 이전 예제에서 사각형의 일부 였던 경우를 <xref:System.Windows.Controls.ControlTemplate>에서 예제를 호출 하는 것이 <xref:System.Windows.VisualStateManager.GoToState%2A> 메서드.  
  
 [!code-csharp[VSMCustomControl#GoToElementState](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml.cs#gotoelementstate)]
 [!code-vb[VSMCustomControl#GoToElementState](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/window1.xaml.vb#gotoelementstate)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualStateManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.VisualStateManager" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManager">
      <MemberSignature Language="C#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="ILAsm" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.CustomVisualStateManager" />
      <MemberSignature Language="VB.NET" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="F#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" Usage="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>컨트롤의 상태를 전환하는 <see cref="T:System.Windows.VisualStateManager" /> 개체를 가져오거나 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 하는 경우 <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> 됩니다 `null`는 <xref:System.Windows.VisualStateManager> 상태 간에 전환 하는 자체 논리를 사용 하 여 합니다. 상태 간 전환을 위한 자체 논리를 구현 하려는 경우에서 상속 되는 클래스를 만듭니다 <xref:System.Windows.VisualStateManager> 재정의 <xref:System.Windows.VisualStateManager.GoToStateCore%2A> 메서드. 설정 사용자 지정 클래스를 사용 하는 <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> 속성을 사용자 지정 형식의 개체입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManagerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomVisualStateManagerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomVisualStateManagerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomVisualStateManagerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomVisualStateManagerProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomVisualStateManagerProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static System.Windows.VisualStateManager GetCustomVisualStateManager (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.VisualStateManager GetCustomVisualStateManager(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetCustomVisualStateManager(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomVisualStateManager (obj As FrameworkElement) As VisualStateManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::VisualStateManager ^ GetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetCustomVisualStateManager : System.Windows.FrameworkElement -&gt; System.Windows.VisualStateManager" Usage="System.Windows.VisualStateManager.GetCustomVisualStateManager obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VisualStateManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj"><see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 연결된 속성을 가져올 원본 요소입니다.</param>
        <summary><see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 연결된 속성을 가져옵니다.</summary>
        <returns>컨트롤의 상태를 전환하는 표시 상태 관리자입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVisualStateGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetVisualStateGroups (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetVisualStateGroups(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetVisualStateGroups(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetVisualStateGroups (obj As FrameworkElement) As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetVisualStateGroups(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetVisualStateGroups : System.Windows.FrameworkElement -&gt; System.Collections.IList" Usage="System.Windows.VisualStateManager.GetVisualStateGroups obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj"><see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> 연결된 속성을 가져올 원본 요소입니다.</param>
        <summary><see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> 연결된 속성을 가져옵니다.</summary>
        <returns>지정된 개체와 연결된 <see cref="T:System.Windows.VisualStateGroup" /> 개체의 컬렉션입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToElementState">
      <MemberSignature Language="C#" Value="public static bool GoToElementState (System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToElementState(class System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToElementState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToElementState (stateGroupsRoot As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToElementState(System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToElementState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToElementState (stateGroupsRoot, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stateGroupsRoot"><see cref="T:System.Windows.VisualStateManager" />가 들어 있는 루트 요소입니다.</param>
        <param name="stateName">전환되는 상태입니다.</param>
        <param name="useTransitions"><see langword="true" /> <see cref="T:System.Windows.VisualTransition" /> 개체를 사용하여 상태를 전환하고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>요소를 두 상태 간에 전환합니다. 컨트롤에서 정의하는 대신 응용 프로그램에서 정의하는 상태를 변환하려면 이 메서드를 사용합니다.</summary>
        <returns><see langword="true" /> 컨트롤이 새 상태로 성공적으로 전환되는 경우이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출를 <xref:System.Windows.VisualStateManager.GoToElementState%2A> 외부 요소에서 상태를 변경 하는 방법을 <xref:System.Windows.Controls.ControlTemplate> (사용 하는 경우에 예를 들어를 <xref:System.Windows.VisualStateManager> 에 <xref:System.Windows.DataTemplate> 또는 <xref:System.Windows.Window>). 호출 된 <xref:System.Windows.VisualStateManager.GoToState%2A> 메서드를 사용 하는 컨트롤의 상태를 변경 하는 경우는 <xref:System.Windows.VisualStateManager> 에서 해당 <xref:System.Windows.Controls.ControlTemplate>합니다.  
  
   
  
## Examples  
 다음 예제에서는 1과 100 사이의 숫자를 추측 하 라는 메시지는 응용 프로그램을 만듭니다.  사용자가 숫자를 입력 하는 경우 응용 프로그램이 너무, 너무 낮은 또는 올바른 추측 인지 여부를 나타냅니다.  다음 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 응용 프로그램에 대 한 사용자 인터페이스를 만들고 4 개의 상태를 정의 합니다. `TooLow`, `TooHigh`, `Correct`, 및 `Guessing`. 있는 응용 프로그램이 시작 되 면는 `Guessing` 상태입니다. .  
  
 [!code-xaml[VSMGoToElementState#GoToElementStateXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml#gotoelementstatexaml)]  
  
 다음 코드는 응용 프로그램의 논리를 보여 줍니다.  사용자 번호를 입력 하 고 단추를 클릭 하면 응용 프로그램 호출 <xref:System.Windows.VisualStateManager.GoToElementState%2A> 전환 `TooHigh`, `TooLow`, 또는 `Correct` 추측 하는 방법에 대 한 사용자에 게 피드백을 제공 합니다.  이 예제를 실행 하려면 호출을 `GenerateNumber` 응용 프로그램이 시작 될 때 메서드.  
  
 [!code-csharp[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml.cs#gotoelementstatecode)]
 [!code-vb[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmgotoelementstate/visualbasic/mainwindow.xaml.vb#gotoelementstatecode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" /> <see langword="null" />입니다.  
  
또는 
 <paramref name="stateName" /> <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToState">
      <MemberSignature Language="C#" Value="public static bool GoToState (System.Windows.FrameworkElement control, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToState(class System.Windows.FrameworkElement control, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToState (control As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToState(System::Windows::FrameworkElement ^ control, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToState (control, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">상태 간에 전환할 컨트롤입니다.</param>
        <param name="stateName">전환되는 상태입니다.</param>
        <param name="useTransitions"><see langword="true" /> <see cref="T:System.Windows.VisualTransition" /> 개체를 사용하여 상태를 전환하고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>두 상태 간의 컨트롤을 전환합니다. 이 메서드를 사용하여 <see cref="T:System.Windows.Controls.ControlTemplate" />이 포함된 컨트롤에서 상태를 전환합니다.</summary>
        <returns><see langword="true" /> 컨트롤이 새 상태로 성공적으로 전환되는 경우이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 된 <xref:System.Windows.VisualStateManager.GoToState%2A> 메서드를 사용 하는 컨트롤의 상태를 변경 하는 경우는 <xref:System.Windows.VisualStateManager> 에서 해당 <xref:System.Windows.Controls.ControlTemplate>합니다. 호출을 <xref:System.Windows.VisualStateManager.GoToElementState%2A> 외부 요소에서 상태를 변경 하는 방법을 <xref:System.Windows.Controls.ControlTemplate> (사용 하는 경우에 예를 들어를 <xref:System.Windows.VisualStateManager> 에서 <xref:System.Windows.Controls.UserControl> 또는 단일 요소).  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 컨트롤을 <xref:System.Windows.VisualStateManager.GoToState%2A> 메서드 상태 사이 전환 합니다. 전체 예제를 보려면 [모양을 사용자 지정할 수는 컨트롤에 만드는](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md)합니다.  
  
 [!code-csharp[VSMCustomControl#UpdateStates](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/numericupdown.cs#updatestates)]
 [!code-vb[VSMCustomControl#UpdateStates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/numericupdown.vb#updatestates)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> <see langword="null" />입니다.  
  
또는 
 <paramref name="stateName" /> <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToStateCore">
      <MemberSignature Language="C#" Value="protected virtual bool GoToStateCore (System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot, string stateName, System.Windows.VisualStateGroup group, System.Windows.VisualState state, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GoToStateCore(class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot, string stateName, class System.Windows.VisualStateGroup group, class System.Windows.VisualState state, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToStateCore(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.String,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GoToStateCore (control As FrameworkElement, stateGroupsRoot As FrameworkElement, stateName As String, group As VisualStateGroup, state As VisualState, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GoToStateCore(System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, System::Windows::VisualStateGroup ^ group, System::Windows::VisualState ^ state, bool useTransitions);" />
      <MemberSignature Language="F#" Value="abstract member GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool&#xA;override this.GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool" Usage="visualStateManager.GoToStateCore (control, stateGroupsRoot, stateName, group, state, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="group" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="state" Type="System.Windows.VisualState" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">상태 간에 전환할 컨트롤입니다.</param>
        <param name="stateGroupsRoot"><see cref="T:System.Windows.VisualStateManager" />가 들어 있는 루트 요소입니다.</param>
        <param name="stateName">변환 후 상태 이름입니다.</param>
        <param name="group">상태가 속한 <see cref="T:System.Windows.VisualStateGroup" />입니다.</param>
        <param name="state">변환 후 상태에 대한 표현입니다.</param>
        <param name="useTransitions"><see langword="true" /> <see cref="T:System.Windows.VisualTransition" /> 개체를 사용하여 상태를 전환하고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>컨트롤을 상태 간에 전환합니다.</summary>
        <returns><see langword="true" /> 컨트롤이 새 상태로 성공적으로 전환되는 경우이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager.GoToStateCore%2A> 메서드 적절 하 게 시작 하 고 전환과와 연결 된 스토리 보드를 중지 하는 데 필요한 논리를 수행 합니다. 컨트롤을 호출 하는 경우 <xref:System.Windows.VisualStateManager.GoToState%2A> 해당 상태를 변경 하는 <xref:System.Windows.VisualStateManager> 다음을 수행 합니다.  
  
-   첫 번째 경우는 <xref:System.Windows.VisualState> 에 컨트롤을 전환를 <xref:System.Windows.Media.Animation.Storyboard>, 스토리 보드를 시작 합니다. 그런 다음 경우는 <xref:System.Windows.VisualState> 가 컨트롤에서 제공 되는 <xref:System.Windows.Media.Animation.Storyboard>, 스토리 보드 끝입니다.  
  
-   컨트롤에 이미 있으면 합니다 `stateName` 상태 <xref:System.Windows.VisualStateManager.GoToState%2A> 아무 작업도 수행 하 고 반환 `true`합니다.  
  
-   경우 `stateName` 에 존재 하지 않는 합니다 <xref:System.Windows.Controls.ControlTemplate> 의 `control`, <xref:System.Windows.VisualStateManager.GoToState%2A> 아무 작업도 수행 하 고 반환 `false`합니다.  
  
 사용자 고유의 구현할 수 있습니다 <xref:System.Windows.VisualStateManager> 상태 간 전환을 위한 다른 논리를 제공 합니다. 예를 들어, 이전에 설명 된 논리를 변경할 수 있습니다 하거나 사용자 지정 애니메이션 형식 사이 전환 하는 논리를 제공할 수 있습니다.  구현 하는 <xref:System.Windows.VisualStateManager>에서 상속 되는 클래스를 만듭니다 <xref:System.Windows.VisualStateManager> 재정의 <xref:System.Windows.VisualStateManager.GoToStateCore%2A> 메서드. 설정 사용자 지정 클래스를 사용 하는 <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> 속성을 사용자 지정 형식의 개체입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanged">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanged (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanged(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanged (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanged(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanged : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanged (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup"><see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> 이벤트가 발생한 개체입니다.</param>
        <param name="oldState">컨트롤이 전환되기 전의 상태입니다.</param>
        <param name="newState">컨트롤이 전환된 후의 상태입니다.</param>
        <param name="control">상태를 전환 중인 컨트롤입니다.</param>
        <param name="stateGroupsRoot"><see cref="T:System.Windows.VisualStateManager" />가 들어 있는 루트 요소입니다.</param>
        <summary>지정한 <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> 개체에서 <see cref="T:System.Windows.VisualStateGroup" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.VisualStateGroup> 에 설정 되어 합니다 <xref:System.Windows.Controls.ControlTemplate> 컨트롤의는 `control` 매개 변수는 소유 하는 컨트롤 설정 <xref:System.Windows.Controls.ControlTemplate>.  경우는 <xref:System.Windows.VisualStateGroup> 에 설정 되어를 <xref:System.Windows.FrameworkElement>, `control` 는 `null` 사용 해야는 `stateGroupsRoot` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" /> <see langword="null" />입니다.  
  
또는 
 <paramref name="newState" /> <see langword="null" />입니다.</exception>
        <block subset="none" type="overrides"><para>재정의 하는 경우 <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> 파생된 클래스에서 호출 해야 기본 클래스 <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanging">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanging (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanging(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanging (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanging(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanging : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanging (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup"><see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> 이벤트가 발생한 개체입니다.</param>
        <param name="oldState">컨트롤이 전환되기 전의 상태입니다.</param>
        <param name="newState">컨트롤이 전환된 후의 상태입니다.</param>
        <param name="control">상태를 전환 중인 컨트롤입니다.</param>
        <param name="stateGroupsRoot"><see cref="T:System.Windows.VisualStateManager" />가 들어 있는 루트 요소입니다.</param>
        <summary>지정한 <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> 개체에서 <see cref="T:System.Windows.VisualStateGroup" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.VisualStateGroup> 에 설정 되어 합니다 <xref:System.Windows.Controls.ControlTemplate> 컨트롤의는 `control` 매개 변수는 소유 하는 컨트롤 설정 <xref:System.Windows.Controls.ControlTemplate>.  경우는 <xref:System.Windows.VisualStateGroup> 에 설정 되어를 <xref:System.Windows.FrameworkElement>, `control` 는 `null` 사용 해야는 `stateGroupsRoot` 매개 변수입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" /> <see langword="null" />입니다.  
  
또는 
 <paramref name="newState" /> <see langword="null" />입니다.</exception>
        <block subset="none" type="overrides"><para>재정의 하는 경우 <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> 파생된 클래스에서 호출 해야 기본 클래스 <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para></block>
      </Docs>
    </Member>
    <Member MemberName="SetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static void SetCustomVisualStateManager (System.Windows.FrameworkElement obj, System.Windows.VisualStateManager value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCustomVisualStateManager(class System.Windows.FrameworkElement obj, class System.Windows.VisualStateManager value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.SetCustomVisualStateManager(System.Windows.FrameworkElement,System.Windows.VisualStateManager)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCustomVisualStateManager (obj As FrameworkElement, value As VisualStateManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj, System::Windows::VisualStateManager ^ value);" />
      <MemberSignature Language="F#" Value="static member SetCustomVisualStateManager : System.Windows.FrameworkElement * System.Windows.VisualStateManager -&gt; unit" Usage="System.Windows.VisualStateManager.SetCustomVisualStateManager (obj, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
        <Parameter Name="value" Type="System.Windows.VisualStateManager" />
      </Parameters>
      <Docs>
        <param name="obj">속성을 설정할 개체입니다.</param>
        <param name="value">컨트롤의 상태를 전환하는 표시 상태 관리자입니다.</param>
        <summary><see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 연결된 속성을 설정합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroups">
      <MemberSignature Language="C#" Value="see GetVisualStateGroups" />
      <MemberSignature Language="ILAsm" Value="see GetVisualStateGroups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.VisualStateGroups" />
      <MemberSignature Language="VB.NET" Value="see GetVisualStateGroups" />
      <MemberSignature Language="F#" Value="see GetVisualStateGroups" Usage="see GetVisualStateGroups" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.VisualStateGroup" /> 개체의 컬렉션을 가져오거나 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
 
## Remarks  
 각 <xref:System.Windows.VisualStateGroup> 의 컬렉션을 포함 <xref:System.Windows.VisualState> 개체입니다. A <xref:System.Windows.VisualState> 의 컬렉션을 포함 <xref:System.Windows.Media.Animation.Storyboard> 컨트롤이 특정 상태에 있을 때 컨트롤의 모양을 변경 하는 방법을 지정 하는 개체입니다. 예를 들어, 한 <xref:System.Windows.Controls.Button> 를 누를 때 보다 누를 때 이와 약간 다르게 표시 해야 할 수 있습니다. 두 개의 상태를 <xref:System.Windows.Controls.Button> 정의 누를 때 해당 하 (`"Pressed"`)이 아닐 때 및 (`"Normal"`).  
  
 추가한 <xref:System.Windows.VisualState> 설정 하 여 컨트롤에는 <xref:System.Windows.VisualStateManager.VisualStateGroups%2A> 컨트롤에 연결 합니다. 동일한 서로 함께 사용할 수 없는 상태를 추가할 <xref:System.Windows.VisualStateGroup>합니다. 예를 들어 합니다 <xref:System.Windows.Controls.CheckBox> 에 두 개의 <xref:System.Windows.VisualStateGroup> 개체입니다. 상태를 포함 하나 `Normal`, `MouseOver`를 `Pressed`, 및 `Disabled`합니다. 다른 상태를 포함 `Checked`하십시오 `UnChecked`, 및 `Indeterminate`합니다. <xref:System.Windows.Controls.CheckBox> 상태일에서 수 있습니다 `MouseOver` 및 `UnChecked` 이와 동시에 있을 수 없습니다 있지만 `MouseOver` 및 `Pressed` 동시 상태입니다.  
  
 추가할 수는 있지만 <xref:System.Windows.VisualState> 다른 사용자의 시각적 동작을 재정의할 수 있도록 하는 특히 유용한 방법은 요소에 개체를 <xref:System.Windows.Controls.Control>합니다. 사용 하는 사용자 지정 컨트롤을 만드는 경우는 <xref:System.Windows.Controls.ControlTemplate>를 추가 하 여 컨트롤에 적용할 수는 상태를 지정할 수 있습니다는 <xref:System.Windows.TemplateVisualStateAttribute> 해당 클래스 정의에서. 그런 다음 모든 사용자가 새 <xref:System.Windows.Controls.ControlTemplate> 컨트롤을 추가할 수에 대 한 <xref:System.Windows.VisualState> 템플릿에 개체입니다. 같은 상태 <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=fullName> 동일한 속해 <xref:System.Windows.VisualStateGroup>합니다.  
  
 사용 하는 방법에 대 한 자세한 <xref:System.Windows.VisualStateGroup> 개체를 <xref:System.Windows.Controls.ControlTemplate>를 참조 하십시오 [ControlTemplate을 만들어 기존 컨트롤의 모양 사용자 지정](/dotnet/framework/wpf/controls/customizing-the-appearance-of-an-existing-control)합니다. 만드는 방법에 대 한 자세한 내용은 사용 하는 컨트롤에 대해를 <xref:System.Windows.VisualStateManager>를 참조 하세요 [모양을 사용자 지정할 수는 제어 된 만들기](/dotnet/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance)합니다.  
     
## Examples  
 다음 예제에서는 간단한 <xref:System.Windows.Controls.ControlTemplate> 에 대 한는 <xref:System.Windows.Controls.Button> 하나를 포함 하는 <xref:System.Windows.Controls.Grid>합니다. 도 포함 되어 있습니다를 <xref:System.Windows.VisualStateGroup> 라는 `CommonStates`를 정의 하는 합니다 `MouseOver` 및 `Normal` 상태입니다. <xref:System.Windows.VisualStateGroup> 역시를 <xref:System.Windows.VisualTransition> 에 대 한 0.5 초가 걸린다는 점을 지정 하는 합니다 <xref:System.Windows.Controls.Grid> 위로 마우스 포인터를 이동할 때 녹색에서 빨간색으로 변경 하려면를 <xref:System.Windows.Controls.Button>입니다.  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroupsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisualStateGroupsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisualStateGroupsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisualStateGroupsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisualStateGroupsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisualStateGroupsProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>