<Type Name="WeakEventManager+ListenerList" FullName="System.Windows.WeakEventManager+ListenerList">
  <Metadata><Meta Name="ms.openlocfilehash" Value="abfa8a8e75f10484b5998ca85474fa53c7d22a4c" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57961057" /></Metadata><TypeSignature Language="C#" Value="protected class WeakEventManager.ListenerList" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit WeakEventManager/ListenerList extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager.ListenerList" />
  <TypeSignature Language="VB.NET" Value="Protected Class WeakEventManager.ListenerList" />
  <TypeSignature Language="C++ CLI" Value="protected: ref class WeakEventManager::ListenerList" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Windows.WeakEventManager" />에 대한 수신기를 저장하기 위한 기본 제공 컬렉션 목록을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 목록에서 정의 된 유사한 멤버를 포함 하지만 <xref:System.Collections.IList> 및 <xref:System.Collections.ICollection>에 설명과 유사한 기능 인터페이스는 모두이 클래스 구현 합니다.  
  
 대부분 <xref:System.Windows.WeakEventManager> 파생된 클래스에 멤버를 사용할 필요가 없습니다 <xref:System.Windows.WeakEventManager.ListenerList>합니다. 합니다 <xref:System.Windows.WeakEventManager> 메서드 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 하 고 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 기본값을 사용 하 여 <xref:System.Windows.WeakEventManager.ListenerList> 각각에 대해 내부적으로 하나의 목록 `source`합니다.  
  
 호출 해야 <xref:System.Windows.WeakEventManager.ListenerList> 메서드는 경우에 <xref:System.Windows.WeakEventManager> 클래스에는 이벤트의 다른 조건에 대 한 계정에 만든 각 목록과 같은 이벤트 원본을 조합에 대 한 여러 목록을 유지 관리 합니다. 이 경우를 사용 하지 않을 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 및 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 구현 대신 `AddListener` 또는 `RemoveListener` 일반적으로에 추가 하는 매개 변수를 기반으로 내부 수신기 목록 중 하나에서 수신기를 실행 하려면 `AddListener` 또는 `RemoveListener`. 또한 원시 이벤트를 수신 하는 처리기 구현 간단히 호출할 수 없습니다 <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; 대신 중 이벤트의 세부 정보를 추적 하 고 사용 하 여 적절 한 목록에만 이벤트를 전달 해야 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>합니다.  
  
 다양 한 방법 <xref:System.Windows.WeakEventManager.ListenerList> 내부 목록으로 작동할 수 있도록 하 고 이벤트의 실제 배달 하는 동안 목록이 수정 되지 않도록 수 있도록 제공 됩니다.  
  
 이 구현 기법을 사용 하는 예제 클래스는 <xref:System.ComponentModel.PropertyChangedEventManager>에 대 한 나열 하는 별도 수신기를 유지 관리 `PropertyChanged` 변경 되는 속성에 따라 합니다.  
  
<a name="xamlTextUsage_ListenerList"></a>   
## <a name="xaml-text-usage"></a>XAML 텍스트 사용  
 이 클래스에서 사용할 수 없습니다 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]합니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.WeakEventManager.ListenerList" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.WeakEventManager.ListenerList" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Windows.WeakEventManager.ListenerList : int -&gt; System.Windows.WeakEventManager.ListenerList" Usage="new System.Windows.WeakEventManager.ListenerList capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">초기 목록에 할당되는 항목의 수입니다.</param>
        <summary>지정된 초기 용량을 사용하여 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.IWeakEventListener -&gt; unit" Usage="listenerList.Add listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener"><see cref="T:System.Windows.WeakEventManager.ListenerList" />에 추가할 수신기 항목입니다.</param>
        <summary><see cref="T:System.Windows.IWeakEventListener" />에 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 개체를 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 수신기 수 해야 제공 되는 개체를 <xref:System.Windows.DependencyObject> 구현 하는 합니다 <xref:System.Windows.IWeakEventListener> 인터페이스 있으며 따라서 작동 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 구현 합니다.  
  
 항상 호출 해야 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 목록 콘텐츠를 변경 하기 전에 합니다. 그렇지 않으면 목록 이벤트를 전달 하는 중일 수 있습니다 하 고 원래 잠겨 있으므로. 호출 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 입력을 변경 `list` 복제본 수 있도록 프로그램 <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> 호출 복제본에서 계속 사용할 수 있습니다. 하는 경우 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 반환 `true`, 코드의 다른 영역에서 유지 관리 하는 목록에 대 한 개인 참조를 업데이트 해야 할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : Delegate -&gt; unit" Usage="listenerList.AddHandler handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler"><see cref="T:System.Windows.WeakEventManager.ListenerList" />에 추가할 이벤트 처리기입니다.</param>
        <summary><see cref="T:System.Windows.WeakEventManager.ListenerList" />에 이벤트 처리기를 추가합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUse">
      <MemberSignature Language="C#" Value="public bool BeginUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool BeginUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginUse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BeginUse();" />
      <MemberSignature Language="F#" Value="member this.BeginUse : unit -&gt; bool" Usage="listenerList.BeginUse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>목록이 사용 중인 것으로 선언합니다. 이렇게 하면 목록 항목을 반복하는 동안 목록이 직접 변경되지 않습니다.</summary>
        <returns>목록이 이미 사용 중인 것으로 선언되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.WeakEventManager> 구현을 호출 해야 <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> 하기 전에 이벤트를 수신기에 전달할 목록을 반복 하 고 호출 해야 <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> 완료 되 면 합니다. 이 이벤트 전달을 위한 반복이 진행에서 되는 동안 목록을 수정에서 다른 호출자를 방지 합니다. 이 시간 동안은 수정 되 면 목록 복제 됩니다. 다음은 복제 되는 경우 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 반환 `true`, 즉, 마지막 배달 최근 수신기 변경 누락입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.WeakEventManager.ListenerList Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.Clone : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="listenerList.Clone " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::WeakEventManager::ListenerList ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Windows.WeakEventManager.ListenerList" />의 수정 가능한 복제본을 만듭니다.</summary>
        <returns>현재 개체의 수정 가능한 복제본입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="protected void CopyTo (System.Windows.WeakEventManager.ListenerList newList);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CopyTo(class System.Windows.WeakEventManager/ListenerList newList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CopyTo (newList As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="listenerList.CopyTo newList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newList" Type="System.Windows.WeakEventManager+ListenerList" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="newList">복사할 개체입니다.</param>
        <summary>현재 <see cref="T:System.Windows.WeakEventManager.ListenerList" />을 지정된 <see cref="T:System.Windows.WeakEventManager.ListenerList" />에 복사합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.WeakEventManager.ListenerList" />에 들어 있는 항목 수를 가져옵니다.</summary>
        <value><see cref="T:System.Windows.WeakEventManager.ListenerList" />에 들어 있는 항목 수입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="public virtual bool DeliverEvent (object sender, EventArgs args, Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeliverEvent(object sender, class System.EventArgs args, class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeliverEvent (sender As Object, args As EventArgs, managerType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DeliverEvent(System::Object ^ sender, EventArgs ^ args, Type ^ managerType);" />
      <MemberSignature Language="F#" Value="abstract member DeliverEvent : obj * EventArgs * Type -&gt; bool&#xA;override this.DeliverEvent : obj * EventArgs * Type -&gt; bool" Usage="listenerList.DeliverEvent (sender, args, managerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="args" Type="System.EventArgs" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="managerType" Type="System.Type" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sender">이벤트를 발생시킨 개체입니다.</param>
        <param name="args">이벤트 데이터를 포함하는 개체입니다.</param>
        <param name="managerType">이 메서드를 호출하는 <see cref="T:System.Windows.WeakEventManager" />의 형식입니다.</param>
        <summary><see cref="T:System.Windows.WeakEventManager.ListenerList" />에서 각 수신기에 대해 관리되는 이벤트를 전달합니다.</summary>
        <returns><see cref="T:System.Windows.WeakEventManager.ListenerList" />의 임의의 수신기가 가비지 수집된 개체를 가리키면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.WeakEventManager.ListenerList Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.WeakEventManager/ListenerList Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Windows.WeakEventManager.ListenerList" Usage="System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::WeakEventManager::ListenerList ^ Empty { System::Windows::WeakEventManager::ListenerList ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>비교 작업에 사용할 빈 목록을 나타내는 값을 가져옵니다.</summary>
        <value>빈 목록 표현입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUse">
      <MemberSignature Language="C#" Value="public void EndUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUse();" />
      <MemberSignature Language="F#" Value="member this.EndUse : unit -&gt; unit" Usage="listenerList.EndUse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />에 의해 초기화되는 잠긴 상태를 해제합니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.WeakEventManager.ListenerList" />가 비어 있는지 여부를 선언하는 값을 가져옵니다.</summary>
        <value>목록이 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 확인 여부를 <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> 0 이며 목록에서 참조 중 하나 인지 부실 이제 확인 하지 않습니다. 모든 참조는 여전히 유효한 보장, 호출 하려는 경우 <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> 목록의 빈 상태를 확인 하기 직전입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.IWeakEventListener this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IWeakEventListener Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As IWeakEventListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IWeakEventListener ^ default[int] { System::Windows::IWeakEventListener ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.IWeakEventListener" Usage="System.Windows.WeakEventManager.ListenerList.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IWeakEventListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">목록에 있는 수신기의 인덱스(0부터 시작)입니다.</param>
        <summary><see cref="T:System.Windows.WeakEventManager.ListenerList" />의 특정 수신기 항목을 가져오거나 설정합니다.</summary>
        <value>해당 인덱스의 항목이거나, 해당 인덱스에 항목이 없으면 null 참조입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForWriting">
      <MemberSignature Language="C#" Value="public static bool PrepareForWriting (ref System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool PrepareForWriting(class System.Windows.WeakEventManager/ListenerList&amp; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrepareForWriting (ByRef list As WeakEventManager.ListenerList) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool PrepareForWriting(System::Windows::WeakEventManager::ListenerList ^ % list);" />
      <MemberSignature Language="F#" Value="static member PrepareForWriting :  -&gt; bool" Usage="System.Windows.WeakEventManager.ListenerList.PrepareForWriting list" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="list">사용 상태를 확인하고 복사할 목록입니다.</param>
        <summary>지정된 목록이 사용 중인지 확인하고, 사용 중일 경우 목록 참조 매개 변수를 원본이 아닌 목록의 복사본으로 설정합니다.</summary>
        <returns>지정된 목록이 호출 시 사용 중이므로 <paramref name="list" /> 매개 변수 참조가 복사본으로 다시 설정되었으면 <see langword="true" />이고, 지정된 목록이 사용 중이 아니므로 <paramref name="list" /> 매개 변수 참조가 변경되지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정된 된 목록 (즉, 이벤트가 전달 되 고 현재)를 사용 하는 경우이 메서드를 호출 바뀝니다 입력 `list` 복제를 사용 하 여 합니다.  기존 사용자를 방해를에서 받지 않고 변경 내용 새 목록에 원래 목록에 이벤트를 배달 완료 됩니다.  
  
 메서드에서 반환 되 면 `true`, 호출자가 제공 된 목록에 더 이상 최신 상태가 아님을 나타냅니다 있기 때문에 고유한 데이터 구조를 새 목록에 삽입할 하려고 합니다.  
  
 이 메서드를 호출 <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> 내부적으로 즉시 호출 <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>합니다. 따라서 호출 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 목록에 대 한 잠금을 제공 자체 하지 않습니다. 복제본 복사를 호출한 후 보조 작업으로 이루어집니다 <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public bool Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Function Purge () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Purge();" />
      <MemberSignature Language="F#" Value="member this.Purge : unit -&gt; bool" Usage="listenerList.Purge " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>내부 참조 대상이 null 참조인 목록에서 모든 항목을 제거합니다.</summary>
        <returns>모든 항목이 제거되면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.IWeakEventListener -&gt; unit" Usage="listenerList.Remove listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">제거할 항목입니다.</param>
        <summary><see cref="T:System.Windows.WeakEventManager.ListenerList" />에서 맨 처음 발견되는 수신기 항목을 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 항상 호출 해야 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 목록 콘텐츠를 변경 하기 전에 합니다. 그렇지 않으면 목록 이벤트를 전달 하는 중일 수 있습니다 하 고 원래 잠겨 있으므로. 호출 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 입력을 변경 `list` 복제본 수 있도록 프로그램 <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> 호출 복제본에서 계속 사용할 수 있습니다. 하는 경우 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 반환 `true`, 코드의 다른 영역에서 유지 관리 하는 목록에 대 한 개인 참조를 업데이트 해야 할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveHandler(Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.RemoveHandler : Delegate -&gt; unit" Usage="listenerList.RemoveHandler handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler"><see cref="T:System.Windows.WeakEventManager.ListenerList" />에서 제거할 이벤트 처리기입니다.</param>
        <summary><see cref="T:System.Windows.WeakEventManager.ListenerList" />에서 이벤트 처리기를 제거합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>