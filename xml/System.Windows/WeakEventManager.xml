<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0b902a9b8f78c0d8e904a6bd4037d22a00c7fb84" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57941648" /></Metadata><TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WeakEventManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class WeakEventManager abstract : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type WeakEventManager = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>*약한 이벤트 패턴*에서 사용되는 이벤트 관리자에 대해 기본 클래스를 제공합니다. 이 관리자는 마찬가지로 패턴을 사용하는 이벤트(콜백)에 대해 수신기를 추가하거나 제거합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적으로 이벤트 소스에 이벤트 수신기와 독립적인 개체 수명 약한 이벤트 패턴을 사용 합니다. 디스패치 기능을 중앙 이벤트를 사용 하는 <xref:System.Windows.WeakEventManager> 수신기의 처리기를 소스 개체를 유지 하는 경우에 가비지 수집 될 수 있습니다. 반면, 사용 하 여 일반 이벤트 후크를 `+=` 연산자를 사용 하면 잠재적으로 연결이 끊긴된 소스 수신기에 대 한 참조입니다. 이렇게 하면 수신자를에서 주어진 시간에 가비지 수집 되지 않습니다.  
  
 일반적인 상황은 원본과 수신기 간의 수명 관계를 사용 하는 약한 이벤트 패턴의 경우 생성 되는 업데이트 이벤트에서 데이터 바인딩을 처리 합니다.  
  
 콜백 및 일반 이벤트에 대 한 약한 이벤트 패턴을 사용할 수도 수 있습니다.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>사용자 지정의 예 <see cref="T:System.Windows.WeakEventManager" />를 참조 하세요 [약한 이벤트 패턴](~/docs/framework/wpf/advanced/weak-event-patterns.md)합니다.</para></block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WeakEventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>파생 클래스의 생성자에서 이니셜라이저로 사용될 때 기본 클래스 값을 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEvent (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEvent(System::Object ^ sender, EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="member this.DeliverEvent : obj * EventArgs -&gt; unit" Usage="weakEventManager.DeliverEvent (sender, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">이벤트가 처리되는 개체입니다.</param>
        <param name="args">전달할 이벤트에 대한 이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>각 수신기에 대해 관리되는 이벤트를 전달합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출을 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> 추가 되거나 제거 된 이벤트 처리기 내에서 메서드를 <xref:System.Windows.WeakEventManager.StartListening%2A> 및 <xref:System.Windows.WeakEventManager.StopListening%2A> 서브 클래스의 구현.  
  
 호출 하는 경우는 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 의 메서드 프로그램 `AddListener` 구현 클래스의 이벤트를 수신 하는 수신기 목록 기본 컬렉션에서 유지 됩니다. (`AddListener` 인터페이스 또는 클래스는 계약의 일부가 아닙니다. `AddListener` 호출 하는 관리자 클래스의 메서드에 대 한 제안 된 이름이 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 이벤트에 대 한 약한 이벤트 패턴 수신기를 추가 합니다.)  
  
 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 단일 목록에 수신기를 추가합니다. 관리자 구현에 둘 이상의 이벤트당 수신기 목록을 유지 관리 하는 경우 사용 하지 마세요 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> 또는 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>합니다. 대신, 구현을 만들어야 자체 <xref:System.Windows.WeakEventManager.ListenerList> 인스턴스를 `AddListener` 적절 한 목록에 수신기를 추가 해야 하며 호출 하 여 이벤트를 적절 한 수신기 목록에 전달 해야 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEventToList (sender As Object, args As EventArgs, list As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.DeliverEventToList : obj * EventArgs * System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="weakEventManager.DeliverEventToList (sender, args, list)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEventToList(System::Object ^ sender, EventArgs ^ args, System::Windows::WeakEventManager::ListenerList ^ list);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender">이벤트가 처리되는 개체입니다.</param>
        <param name="args">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <param name="list">제공된 <see cref="T:System.Windows.WeakEventManager.ListenerList" />입니다.</param>
        <summary>제공된 목록에서 각 수신기에 대해 관리되는 이벤트를 전달합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 이벤트 데이터에 캡처되는 정보를 기반으로 별도 수신기 목록 관리자 구현에서 유지 하는 경우에 필요 합니다. 이 고급 기법을 사용 하는 경우 만들고 manager 구현의 일부로 별도 목록을 유지 관리 해야 하 고 특정 목록에 수신기를 추가 하는 방법을 제공 해야 합니다. 목록에서 구분 하기 위해 사용 하는 적절 한 목록 또는 목록에만 이벤트를 전달 하는 조건에 대해 원시 이벤트를 수신 하는 처리기 구현이 작동 해야 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetCurrentManager (managerType As Type) As WeakEventManager" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Windows::WeakEventManager ^ GetCurrentManager(Type ^ managerType);" />
      <MemberSignature Language="F#" Value="static member GetCurrentManager : Type -&gt; System.Windows.WeakEventManager" Usage="System.Windows.WeakEventManager.GetCurrentManager managerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType"><see cref="T:System.Windows.WeakEventManager" />를 가져올 형식입니다.</param>
        <summary>제공된 형식에 사용되는 <see cref="T:System.Windows.WeakEventManager" /> 구현을 반환합니다.</summary>
        <returns>일치하는 <see cref="T:System.Windows.WeakEventManager" /> 구현입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 전달 된를 사용 하 여이 메서드를 호출 하는 구현을 `managerType`합니다. 반환 된 <xref:System.Windows.WeakEventManager> 수신한 이벤트 및 호출 하는 private 클래스 처리기를 결정 하는 구분자로 사용 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Protected Property Item(source As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ source); void set(System::Object ^ source, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Windows.WeakEventManager.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">요청된 소스의 인덱스(0부터 시작)입니다.</param>
        <summary>지정된 소스에 대해 저장될 데이터를 가져오거나 설정합니다.</summary>
        <value>이 소스에 대해 관리자가 저장하는 데이터입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생된 클래스는 데이터 및이 인덱서에 저장 하는 형식을 선택할 수 있습니다. 으로 구현 됩니다. 일반적으로 <xref:System.Windows.WeakEventManager.ListenerList>, 수신기에 대 한 약한 참조의 목록입니다. 하는 경우이 유형을 변경 해야만 <xref:System.Windows.WeakEventManager.ListenerList> 형식에 필요한 정보를 포함할 수 없습니다. 재정의 해야 하는, 하는 경우는 <xref:System.Windows.WeakEventManager.Purge%2A> 메서드 기본 형식의 모든 정리를 올바르게 수행 되도록 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="abstract member NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="weakEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이벤트에 대한 수신기를 포함하는 새 개체를 반환합니다.</summary>
        <returns>이벤트에 대한 수신기를 포함하는 새 개체입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedAddHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Delegate" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source">처리기 대리자가 구독하는 소스 개체입니다.</param>
        <param name="handler"><paramref name="source" />에서 발생한 이벤트를 처리하는 대리자입니다.</param>
        <summary>지정된 대리자를 지정된 소스의 이벤트 처리기로 추가합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedAddListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">수신기를 연결할 소스입니다.</param>
        <param name="listener"><see cref="T:System.Windows.IWeakEventListener" />를 구현해야 하는 수신 클래스입니다.</param>
        <summary>제공된 수신기를 관리 중인 이벤트에 대해 제공된 소스에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Manager 클래스 내에서이 메서드를 호출 `AddListener` 메서드를 <xref:System.Windows.WeakEventManager> 구현 합니다. `AddListener` 제안 된 이름이 정적 메서드에 대 한 약한 이벤트 패턴에 대 한 수신기를 추가 하려면 다른 클래스를 사용 하도록 설정 하려면 관리자 클래스에서 정의 합니다. `AddListener` 두 매개 변수를 사용 해야 합니다: 합니다 `source` 수신기가 연결 된 경우 및 `listener` 인스턴스. 에 대 한 사용자 `AddListener` 구현, 호출을 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 메서드 매개 변수를 전달할 동일한 두에 현재 관리자.  
  
 수신기 목록 이전에 비어 있는 경우 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 호출을 <xref:System.Windows.WeakEventManager.StartListening%2A> 메서드에는 특정 호출 하는 내부적으로 <xref:System.Windows.WeakEventManager.StartListening%2A> 다형성을 통해 재정의 합니다.  
  
 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 단일 내부 수신기를 추가 <xref:System.Windows.WeakEventManager.ListenerList> 당 `source`합니다. 관리자 구현에 둘 이상의 각 이벤트 원본 조합에 대 한 수신기 목록을 유지 관리 하는 경우 사용 하지 마십시오 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>합니다. 대신 구현을 만들어야 자체 <xref:System.Windows.WeakEventManager.ListenerList> 인스턴스를 `AddListener` 적절 한 목록에 수신기를 추가 해야 하며 호출 하 여 이벤트를 적절 한 수신기 목록에 전달 해야 합니다 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> 합니다 대신이벤트<xref:System.Windows.WeakEventManager.DeliverEvent%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedRemoveHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Delegate" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source">처리기를 제거할 소스입니다.</param>
        <param name="handler"><paramref name="source" />에서 제거할 대리자입니다.</param>
        <summary>지정한 소스에서 이전에 추가한 처리기를 제거합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedRemoveListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">수신기를 제거할 소스입니다.</param>
        <param name="listener"><see cref="T:System.Windows.IWeakEventListener" />를 구현해야 하는 수신 클래스입니다.</param>
        <summary>제공된 소스에서 이전에 추가한 수신기를 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Manager 클래스 내에서이 메서드를 호출 `RemoveListener` 메서드를 <xref:System.Windows.WeakEventManager> 구현 합니다. `RemoveListener` 제안 된 이름이 정적 메서드에 대 한 약한 이벤트 패턴에 대 한 수신기를 제거 하려면 다른 클래스를 사용 하도록 설정 하려면 관리자 클래스에서 정의 합니다. `RemoveListener` 두 매개 변수를 사용 해야 합니다:는 `source` 수신기를 제거 하는 경우 및 `listener` 클래스. 에 대 한 사용자 `RemoveListener` 구현, 호출을 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 메서드 매개 변수를 전달할 동일한 두에 현재 관리자.  
  
 호출 하는 경우 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 목록에서 마지막 수신기가 제거 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 호출 합니다 <xref:System.Windows.WeakEventManager.StopListening%2A> 메서드에는 특정 호출 하는 내부적으로 <xref:System.Windows.WeakEventManager.StopListening%2A> 다형성을 통해 재정의 합니다.  
  
 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 단일 내부에서 수신기 제거 <xref:System.Windows.WeakEventManager.ListenerList> 당 `source`합니다. 관리자 구현에 둘 이상의 각 이벤트 원본 조합에 대 한 수신기 목록을 유지 관리 하는 경우 사용 하지 마십시오 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>합니다. 대신 구현을 만들어야 자체 <xref:System.Windows.WeakEventManager.ListenerList> 인스턴스를 `RemoveListener` 적절 한 목록에서 수신기를 제거 해야 하 고 호출 하 여 이벤트를 적절 한 수신기 목록에 전달 해야 합니다 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> 메서드 대신 합니다 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberSignature Language="F#" Value="abstract member Purge : obj * obj * bool -&gt; bool&#xA;override this.Purge : obj * obj * bool -&gt; bool" Usage="weakEventManager.Purge (source, data, purgeAll)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">수신 중인 이벤트의 소스입니다.</param>
        <param name="data">확인할 데이터입니다. 이 개체는 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 구현이어야 합니다.</param>
        <param name="purgeAll"><paramref name="source" /> 수신 대기를 중지하고 <paramref name="data" />에서 모든 항목을 완전히 제거하려면 <see langword="true" />입니다.</param>
        <summary>비활성 수신기 항목을 제공된 소스의 데이터 목록에서 제거합니다. 일부 항목이 실제로 목록에서 제거된 경우 <see langword="true" />를 반환합니다.</summary>
        <returns>일부 항목이 실제로 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Windows.WeakEventManager.Purge%2A> 메서드 구현이 기본 데이터가 때 항목을 모두 제거 하는 <xref:System.Windows.WeakEventManager.ListenerList>합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>에 대 한 입력 기본를 <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> 이외의 것 <see cref="T:System.Windows.WeakEventManager.ListenerList" />를 초과 하 여 데이터를 포함 하거나를 <see cref="T:System.Windows.WeakEventManager.ListenerList" />를 재정의 해야 합니다를 <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> 메서드. 재정의 대체 형식 항목 목록에 대 한 제거 동작을 제공 해야 합니다. 일반적으로 재정의 기본 구현을 호출 하지 않고 동작을 제공 해야 합니다. 특정 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 정리를 호출 해야 할 필요가 <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />합니다.</para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReadLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ ReadLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadLock : IDisposable" Usage="System.Windows.WeakEventManager.ReadLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>기본 데이터 테이블에 대해 읽기 잠금을 설정하고 <see cref="T:System.IDisposable" />을 반환합니다.</summary>
        <value>데이터 테이블 멤버에 대해 잠금을 설정한 다음 <see langword="using" /> 구문을 사용하여 적절하게 삭제할 수 있는 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생된 클래스에 포함 된 테이블에 쿼리 <xref:System.Windows.WeakEventManager.Item%2A> 내에서 항상 수행 됩니다는 `using (ReadLock) { ... }` 절 쿼리 이미 쓰기 잠금을 내의 제외 하 고 있습니다. 이러한 쿼리는 보다 복잡 한 클래스에서 지 원하는 경우에 필요할 수 있습니다 `AddListener` 구현 외의 다른 데이터를 필요로 하는 `source` 및 `listener`를 사용 하는 <xref:System.Windows.WeakEventManager.Item%2A> 추가 정보를 저장 하는 컬렉션입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Remove (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Remove(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="member this.Remove : obj -&gt; unit" Usage="weakEventManager.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">수신기 정보를 제거할 소스입니다.</param>
        <summary>지정된 소스에 대해 모든 수신기를 제거합니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ScheduleCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ScheduleCleanup();" />
      <MemberSignature Language="F#" Value="member this.ScheduleCleanup : unit -&gt; unit" Usage="weakEventManager.ScheduleCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>기본 수신기 목록에서 사용하지 않는 항목을 비우는 작업을 우선 순위가 낮은 스레드에서 수행하도록 요청합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출을 <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> 호출 하는 것과 비슷합니다는 <xref:System.Windows.WeakEventManager.Purge%2A> 스레드 우선 순위를 낮게에 현재 관리자의 목록에 메서드 사용 하 여는 `purgeAll` 매개 변수 설정 `false`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub SetCurrentManager (managerType As Type, manager As WeakEventManager)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void SetCurrentManager(Type ^ managerType, System::Windows::WeakEventManager ^ manager);" />
      <MemberSignature Language="F#" Value="static member SetCurrentManager : Type * System.Windows.WeakEventManager -&gt; unit" Usage="System.Windows.WeakEventManager.SetCurrentManager (managerType, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType">새 이벤트 관리자를 설정할 형식입니다.</param>
        <param name="manager">새 이벤트 관리자입니다.</param>
        <summary>지정된 관리자 형식에 대해 현재 관리자를 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출을 <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> 경우 해당 관리자를 초기화 하는 방법에 대 한 호출에 필요한 프로그램 `CurrentManager` 속성을는 <xref:System.Windows.WeakEventManager> 구현 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit" Usage="weakEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">수신을 시작할 소스입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 관리 중인 이벤트 수신을 시작합니다. <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 메서드를 처음으로 호출하고 나면 제공된 소스의 관련 이벤트를 처리할 때마다 관리자는 <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> 또는 <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />를 호출하는 상태여야 합니다.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 재정의에 제공 된 처리기를 추가 해야 <paramref name="source" />합니다. 처리기는 자체 관리자가 선언 됩니다. 클래스 처리기를 공용으로 해야 하 고 관리 중인 이벤트에 대 한 응답에만 호출 해야 합니다. 클래스 처리기를 호출 해야 합니다 <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> 메서드 또는 <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> 메서드 적절 하 게 합니다.</para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit" Usage="weakEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">수신을 중지할 소스입니다.</param>
        <summary>파생 클래스에서 재정의되는 경우 관리 중인 이벤트에 대해 제공된 소스에서 수신을 중지합니다.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> 구현을 통해 추가 된 클래스 처리기를 제거 해야 합니다 <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 메서드. 수신기를 제거 해도 수신기 목록 하지 지워야 합니다. 대신 클래스 처리기 (아마도 일시적으로)만 분리 해야 합니다. 다른 메서드를 같은 전체 목록을 지우는 데 사용할 수는 <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> 메서드를 <paramref name="purgeAll" /> 매개 변수 설정 <see langword="true" />합니다.</para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriteLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ WriteLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteLock : IDisposable" Usage="System.Windows.WeakEventManager.WriteLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>기본 데이터 테이블에 대해 쓰기 잠금을 설정하고 <see cref="T:System.IDisposable" />을 반환합니다.</summary>
        <value>데이터 테이블 멤버에 대해 잠금을 설정한 다음 <see langword="using" /> 구문을 사용하여 적절하게 삭제할 수 있는 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생된 클래스에서 기본 데이터 테이블에 대 한 모든 수정 해야 내에서 발생 한 `using (WriteLock) { ... }` 절. 이러한 수정 해야 할 수도 있습니다는 보다 복잡 한 클래스에서 지 원하는 경우 `AddListener` 구현 외의 다른 데이터를 필요로 하는 `source` 및 `listener`를 사용 하는 <xref:System.Windows.WeakEventManager.Item%2A> 추가 정보를 저장 하는 컬렉션.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>