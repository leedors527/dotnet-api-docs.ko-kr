<Type Name="WorkflowRuntimeService" FullName="System.Workflow.Runtime.Hosting.WorkflowRuntimeService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c7fbbd24977b76945374cd4b1082c0b7cb99c085" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51896908" /></Metadata><TypeSignature Language="C#" Value="public abstract class WorkflowRuntimeService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkflowRuntimeService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WorkflowRuntimeService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowRuntimeService abstract" />
  <TypeSignature Language="F#" Value="type WorkflowRuntimeService = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>워크플로 런타임 엔진 핵심 서비스가 파생되는 추상 기본 클래스를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 클래스에서 파생된 서비스는 워크플로 런타임 엔진으로 시작 및 중지할 수 있습니다. 그러나 서비스가 시작되거나 중지되는 순서는 결정되지 않으며, 서비스가 시작될 때 제대로 초기화되기 위해 다른 서비스 지원이 필요하거나 서비스가 중지될 때 제대로 종료되기 위해 다른 서비스 지원이 필요할 수 있습니다. 이 문제를 해결하기 위해 워크플로 런타임 엔진은 서비스를 시작 및 중지하는 2단계 메커니즘을 제공합니다. <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>이 호출되면 워크플로 런타임 엔진이 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 클래스에서 파생된 각 서비스에 대해 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 메서드를 호출합니다.  이러한 모든 서비스가 시작된 후 워크플로 런타임 엔진은 <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> 이벤트를 발생시키고, 이로 인해 각 워크플로 런타임 엔진 서비스에 대해 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> 메서드가 호출됩니다. 서비스는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> 메서드를 재정의하여 이 2단계 프로세스에 참여할 수 있습니다. 마찬가지로 <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>이 호출될 때 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 메서드, <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> 이벤트 및 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> 메서드는 이 2단계 메커니즘을 제공합니다.  State 속성은 서비스가 시작 또는 중지되고 있거나 완전히 시작 또는 중지되었는지 나타내는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState> 값을 포함합니다.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 클래스에서 파생된 서비스는 <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=nameWithType>를 호출하여 처리되지 않은 예외를 발생시키는 조건을 발견할 때 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> 이벤트를 발생시킬 수 있습니다.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> 클래스, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> 클래스, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> 클래스 및 <xref:System.Workflow.Runtime.Tracking.TrackingService> 클래스에서 파생된 서비스는 궁극적으로 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 클래스에서 파생됩니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowRuntimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WorkflowRuntimeService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 구현되는 경우에는 <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A>는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>로 초기화됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnStarted ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStarted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStarted ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStarted();" />
      <MemberSignature Language="F#" Value="abstract member OnStarted : unit -&gt; unit&#xA;override this.OnStarted : unit -&gt; unit" Usage="workflowRuntimeService.OnStarted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 워크플로 런타임 엔진이 <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Started" /> 이벤트를 발생시킬 때 호출되는 메서드를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 클래스는 워크플로 런타임 엔진이 모든 워크플로 런타임 엔진 서비스에 대한 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 메서드를 호출한 후 워크플로 런타임 엔진 서비스가 다른 서비스에 의존하는 초기화를 수행할 수 있도록 2단계 시작 메커니즘을 구현합니다. 워크플로 런타임 엔진은 모든 워크플로 런타임 엔진 서비스의 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 메서드를 호출한 후 <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> 이벤트를 발생시킵니다. <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> 메서드를 재정의하여 <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> 이벤트가 발생할 때 서비스에 필요한 최종 시작 기능을 제공할 수 있습니다. <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> 이벤트에 대한 구독 및 구독 해제는 내부적으로 처리됩니다.  
  
> [!NOTE]
>  워크플로 런타임 엔진이 시작된 후 <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>를 호출하여 서비스를 워크플로 런타임 엔진에 추가하면 워크플로 런타임 엔진이 서비스에서 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>를 호출합니다. 그러나 이 경우 <xref:System.Workflow.Runtime.WorkflowRuntime.Started> 이벤트가 이미 발생했으므로 주로 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A>에서 수행하는 초기화를 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 메서드 내부에서 수행해야 할 수도 있습니다. <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>를 테스트하여 워크플로 런타임 엔진이 시작되었는지 여부를 확인할 수 있습니다.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A>는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started>를 호출하기 전에 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A>로 설정됩니다.  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A>의 기본 구현은 아무 작업도 수행하지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStopped">
      <MemberSignature Language="C#" Value="protected virtual void OnStopped ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStopped() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStopped ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStopped();" />
      <MemberSignature Language="F#" Value="abstract member OnStopped : unit -&gt; unit&#xA;override this.OnStopped : unit -&gt; unit" Usage="workflowRuntimeService.OnStopped " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 워크플로 런타임 엔진이 <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" /> 이벤트를 발생시킬 때 호출되는 메서드를 나타냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 클래스는 워크플로 런타임 엔진이 필요한 경우 다른 서비스의 종료를 지원하기 위해 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 메서드를 호출한 후 워크플로 런타임 엔진 서비스가 일부 기능을 유지할 수 있도록 2단계 중지 메커니즘을 구현합니다. 워크플로 런타임 엔진은 모든 워크플로 런타임 엔진 서비스의 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 메서드를 호출한 후 <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> 이벤트를 발생시킵니다. <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> 메서드를 재정의하여 <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> 이벤트가 발생할 때 서비스에 필요한 최종 종료 기능을 제공할 수 있습니다. <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> 이벤트에 대한 구독 및 구독 해제는 내부적으로 처리됩니다.  
  
> [!NOTE]
>  워크플로 런타임 엔진이 실행되는 동안 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>를 호출하여 <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>를 워크플로 런타임 엔진에서 제거하면 워크플로 런타임 엔진이 서비스에서 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>을 호출합니다. 그러나 이 경우 서비스에 대해 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> 메서드가 호출되지 않습니다. 따라서 주로 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A>에서 수행되는 최종 종료 기능을 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 메서드 내부에서 수행해야 할 수도 있습니다. <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>를 테스트하여 워크플로 런타임 엔진이 실행 중인지 여부를 확인할 수 있습니다.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A>는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>를 호출하기 전에 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A>로 설정됩니다.  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A>의 기본 구현은 아무 작업도 수행하지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseServicesExceptionNotHandledEvent">
      <MemberSignature Language="C#" Value="protected void RaiseServicesExceptionNotHandledEvent (Exception exception, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseServicesExceptionNotHandledEvent(class System.Exception exception, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseServicesExceptionNotHandledEvent(Exception ^ exception, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.RaiseServicesExceptionNotHandledEvent : Exception * Guid -&gt; unit" Usage="workflowRuntimeService.RaiseServicesExceptionNotHandledEvent (exception, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="exception">처리할 수 없는 예외입니다.</param>
        <param name="instanceId">처리되지 않은 예외와 연결된 워크플로 인스턴스의 <see cref="T:System.Guid" />입니다.</param>
        <summary><see cref="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 서비스는 실행 중에 처리할 수 없는 예외를 발견할 때 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A>를 호출하여 <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=nameWithType> 이벤트를 발생시킬 수 있습니다. 처리되지 않은 예외와 연결된 워크플로 인스턴스의 <xref:System.Guid>를 전달해야 합니다. 예를 들어 타이머 서비스는 예외가 발생한 타이머와 연결된 <xref:System.Guid>를 전달할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Runtime">
      <MemberSignature Language="C#" Value="protected System.Workflow.Runtime.WorkflowRuntime Runtime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.WorkflowRuntime Runtime" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Runtime As WorkflowRuntime" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Workflow::Runtime::WorkflowRuntime ^ Runtime { System::Workflow::Runtime::WorkflowRuntime ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Runtime : System.Workflow.Runtime.WorkflowRuntime" Usage="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowRuntime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 서비스에 대한 <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />을 가져옵니다.</summary>
        <value><see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> 개체</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 런타임 엔진은 서비스에서 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>를 호출하기 전에 이 속성을 설정합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="protected internal virtual void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Start();" />
      <MemberSignature Language="F#" Value="abstract member Start : unit -&gt; unit&#xA;override this.Start : unit -&gt; unit" Usage="workflowRuntimeService.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 서비스를 시작하고 <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" />를 <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting" />으로 변경합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>이 호출될 때 <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> 클래스에서 파생된 모든 서비스에서 워크플로 런타임 엔진에 의해 호출됩니다.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>는 워크플로 런타임 엔진이 시작된 후 <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>를 호출하여 워크플로 런타임 엔진 서비스를 워크플로 런타임 엔진에 추가할 때에도 워크플로 런타임 엔진에 의해 호출됩니다. <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>의 기본 구현은 서비스가 시작되었는지 여부를 추적하며, 서비스가 이미 실행되는 동안 시작되는 경우 이 정보를 사용하여 해당 예외를 throw합니다.  
  
 이 메서드를 재정의하여 워크플로 런타임 엔진에서 서비스를 시작하도록 하는 데 필요한 추가 기능을 제공할 수 있습니다. 워크플로 런타임 엔진이 서비스에서 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>를 호출할 때 실행되는 서비스(있는 경우)에 대한 보장은 없습니다. 따라서 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 메서드에서는 다른 서비스가 제공하는 기능에 의존하지 않는 초기화만 수행해야 합니다. 여기에는 스케줄러 서비스 같은 핵심 서비스가 제공하는 기능이 포함됩니다. 워크플로 런타임 엔진은 모든 워크플로 런타임 엔진 서비스의 <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> 메서드를 호출한 후 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 이벤트를 발생시킵니다. 모든 워크플로 런타임 엔진 서비스가 시작된 후 서비스에 추가 초기화가 필요한 경우 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> 이벤트가 발생할 때 이 초기화를 수행하기 위해 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 메서드를 재정의할 수 있습니다.  
  
> [!NOTE]
>  워크플로 런타임 엔진이 시작된 후 <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>를 호출하여 서비스를 워크플로 런타임 엔진에 추가하면 워크플로 런타임 엔진이 서비스에서 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>를 호출합니다. 그러나 이 경우 <xref:System.Workflow.Runtime.WorkflowRuntime.Started> 이벤트가 이미 발생했으므로 주로 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A>에서 수행하는 초기화를 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 메서드 내부에서 수행해야 할 수도 있습니다. <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>를 테스트하여 워크플로 런타임 엔진이 시작되었는지 여부를 확인할 수 있습니다.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>는 워크플로 런타임 엔진에서만 호출되어야 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>, TerminationTrackingService에서 파생된 개체에 대해 Start 메서드를 호출하는 방법을 보여 줍니다.  이 예제는 Termination Tracking Service SDK 샘플에 포함되어 있습니다.  자세한 내용은 [종료 추적 서비스 샘플](https://msdn.microsoft.com/library/29b7c0d7-cece-4bb9-96d0-c5b6c6e14439)합니다.  
  
 [!code-csharp[WF_Samples#112](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#112)]
 [!code-vb[WF_Samples#112](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우 
또는 
서비스가 이미 시작된 경우.</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="protected System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState State" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property State As WorkflowRuntimeServiceState" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Workflow::Runtime::Hosting::WorkflowRuntimeServiceState State { System::Workflow::Runtime::Hosting::WorkflowRuntimeServiceState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState" Usage="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />의 상태를 가져옵니다.</summary>
        <value><see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 클래스는 워크플로 런타임 엔진 서비스를 시작 및 중지하기 위한 2단계 메커니즘을 구현합니다. 시작 메커니즘의 첫 번째 단계는 워크플로 런타임 엔진이 서비스에 대한 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 메서드 구현을 호출할 때 시작됩니다. 이 메서드는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>를 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A>으로 설정하는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting>의 기본 구현을 호출해야 합니다. 두 번째 단계는 워크플로 런타임 엔진이 <xref:System.Workflow.Runtime.WorkflowRuntime.Started> 이벤트를 발생시킬 때 모든 워크플로 런타임 엔진 서비스를 시작한 후에 발생합니다. <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>는 이 이벤트에 대한 구독을 내부적으로 관리하고 해당 처리기가 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A>를 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started>로 설정합니다.  
  
 워크플로 런타임 엔진 서비스를 중지하는 2단계 메커니즘은 워크플로 런타임 엔진이 서비스에 대한 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 메서드 구현을 호출할 때 시작됩니다. 이 메서드는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>를 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A>으로 설정하는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping>의 기본 구현을 호출해야 합니다. 워크플로 런타임 엔진은 모든 워크플로 런타임 엔진 서비스를 중지한 후 <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> 이벤트를 발생시킵니다. <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>는 이 이벤트에 대한 구독을 내부적으로 관리하고 해당 처리기가 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A>를 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>로 설정합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="protected internal virtual void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Stop();" />
      <MemberSignature Language="F#" Value="abstract member Stop : unit -&gt; unit&#xA;override this.Stop : unit -&gt; unit" Usage="workflowRuntimeService.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 재정의되는 경우 서비스를 중지하고 <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" />를 <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping" />으로 변경합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>이 호출될 때 <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> 클래스에서 파생된 모든 서비스에서 워크플로 런타임 엔진에 의해 호출됩니다.  <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>를 호출하여 워크플로 런타임 엔진에서 워크플로 런타임 엔진 서비스를 제거하면 워크플로 런타임 엔진이 <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>도 호출합니다 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>의 기본 구현은 서비스가 시작되었는지 여부를 추적하며, 서비스가 시작되기 전에 중지된 경우 이 정보를 사용하여 해당 예외를 throw합니다.  
  
 이 메서드를 재정의하여 워크플로 런타임 엔진에서 서비스를 중지하도록 하는 데 필요한 추가 기능을 제공할 수 있습니다. 서비스에서 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>이 호출될 때 어떠한 서비스가(있는 경우) 중지 또는 실행될지는 알 수 없습니다. 워크플로 런타임 엔진은 모든 워크플로 런타임 엔진 서비스의 <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> 메서드를 호출한 후 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 이벤트를 발생시킵니다. 모든 워크플로 런타임 엔진 서비스에 워크플로 런타임 엔진이 호출한 중지 메서드가 있을 때까지 서비스가 다른 서비스를 지원하기 위한 추가 기능을 유지해야 할 수도 있습니다. 서비스가 이러한 기능을 유지해야 하는 경우 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> 메서드를 재정의하여 <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> 이벤트가 발생할 때 서비스 중지를 완료하는 데 필요한 추가 작업을 수행할 수 있습니다.  
  
> [!NOTE]
>  워크플로 런타임 엔진이 실행되는 동안 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>를 호출하여 <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>를 워크플로 런타임 엔진에서 제거하면 워크플로 런타임 엔진이 서비스에서 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>을 호출합니다. 그러나 이 경우 서비스에 대해 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> 메서드가 호출되지 않습니다. 따라서 주로 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A>에서 수행되는 추가 종료 기능을 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 메서드 내부에서 수행해야 할 수도 있습니다. <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>를 테스트하여 워크플로 런타임 엔진이 실행 중인지 여부를 확인할 수 있습니다.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>는 워크플로 런타임 엔진에서만 호출되어야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우  
  
또는 
서비스가 시작되지 않은 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>