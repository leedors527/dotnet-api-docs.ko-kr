<Type Name="WorkflowInstance" FullName="System.Workflow.Runtime.WorkflowInstance">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3f6722f462218341de377b996c28536f8dae9901" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52222297" /></Metadata><TypeSignature Language="C#" Value="public sealed class WorkflowInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInstance extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowInstance" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInstance" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInstance sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInstance = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>워크플로 인스턴스를 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.Runtime.WorkflowInstance> 클래스는 워크플로 인스턴스 실행을 제어하는 데 사용할 수 있는 메서드와 속성을 노출합니다. 기본적으로 워크플로 런타임 엔진이 사용하는 실제 워크플로 인스턴스에 대한 프록시입니다. 호스트나 서비스는 <xref:System.Workflow.Runtime.WorkflowInstance> 클래스에 포함된 적절한 메서드를 호출하여 워크플로 인스턴스에서 작업을 수행하도록 워크플로 런타임 엔진에 지정할 수 있습니다.  요청된 작업이 잘못된 경우, 예를 들어 호스트가 이미 완료된 워크플로 인스턴스에서 <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A>를 호출하는 경우 워크플로 런타임 엔진이 해당 예외를 발생시킵니다.  
  
> [!NOTE]
>  호스트 애플리케이션의 호출이 반환되지 않아 워크플로 인스턴스가 응답하지 않는 경우 런타임을 다시 시작해야만 인스턴스를 복구할 수 있습니다. 그러나 인스턴스가 강제로 언로드, 중단 또는 일시 중단된 경우에는 <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType> 메서드를 호출하여 계속할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowInstance>를 만들고 시작하는 방법을 보여 줍니다. 또한 <xref:System.Workflow.Runtime.WorkflowRuntime> 인스턴스를 만들고 서비스를 런타임에 추가한 다음 <xref:System.Workflow.Runtime.WorkflowInstance> 개체를 만드는 권장 방법을 보여 줍니다. 이 코드에서는 <xref:System.Workflow.Runtime.WorkflowInstance> 메서드를 호출하고 이전에 만든 형식을 전달하여 <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A>를 초기화합니다. <xref:System.Workflow.Runtime.WorkflowInstance>는 <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> 메서드 호출을 사용하여 시작됩니다.  
  
 이 코드 예제는 Program.cs 파일에 있는 Canceling a Workflow SDK 샘플의 일부입니다. 자세한 내용은 [워크플로 취소 하면](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)합니다.  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
    </remarks>
    <threadsafe>이 형식은 스레드로부터 안전합니다.</threadsafe>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742169(v=vs.90)">워크플로 취소</related>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="workflowInstance.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>워크플로 인스턴스를 중단합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 인스턴스는 비동기 방식으로 중단됩니다. 즉, 워크플로 인스턴스가 중단된 후 메서드가 반환됩니다. 워크플로 런타임 엔진은 메모리의 워크플로 인스턴스를 무효화하고 <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>를 지웁니다. 워크플로 인스턴스에서 지속성 서비스를 사용한 경우 마지막 유지 지점 이후 수행된 모든 작업이 삭제됩니다. 워크플로 런타임 엔진은 워크플로 인스턴스를 중단한 후 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> 이벤트를 발생시킵니다. <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>를 호출하여 워크플로 인스턴스를 다시 로드하고 마지막 유지 지점에서 시작할 수 있습니다.  
  
 `Abort`가 단순히 메모리 내 워크플로 인스턴스를 지우는 반면 Terminate는 메모리 내 워크플로 인스턴스를 지우고 인스턴스가 메모리에서 지워졌음을 지속성 서비스에 알린다는 점에서 <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>는 `Abort`와 다릅니다. <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>의 경우 이는 해당 워크플로 인스턴스의 모든 상태 정보가 종료 시 데이터베이스에서 삭제됨을 의미합니다. 이전에 저장된 유지 지점에서 워크플로 인스턴스를 다시 로드할 수 없습니다.  
  
   
  
## Examples  
 다음 예제에서는 Workflow1 형식의 워크플로 인스턴스에서 Abort를 호출하는 방법을 보여 줍니다.  
  
 [!code-csharp[WF_Samples#13](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#13)]
 [!code-vb[WF_Samples#13](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">워크플로 런타임 엔진이 실행되고 있지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyWorkflowChanges">
      <MemberSignature Language="C#" Value="public void ApplyWorkflowChanges (System.Workflow.ComponentModel.WorkflowChanges workflowChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyWorkflowChanges(class System.Workflow.ComponentModel.WorkflowChanges workflowChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyWorkflowChanges(System::Workflow::ComponentModel::WorkflowChanges ^ workflowChanges);" />
      <MemberSignature Language="F#" Value="member this.ApplyWorkflowChanges : System.Workflow.ComponentModel.WorkflowChanges -&gt; unit" Usage="workflowInstance.ApplyWorkflowChanges workflowChanges" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowChanges" Type="System.Workflow.ComponentModel.WorkflowChanges" />
      </Parameters>
      <Docs>
        <param name="workflowChanges">워크플로 인스턴스에 대한 동적 업데이트를 지정하는 <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" />입니다.</param>
        <summary><see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> 개체에 지정된 워크플로 인스턴스 변경 내용을 적용합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 인스턴스가 아직 일시 중단되지 않은 경우 워크플로 런타임 엔진이 변경 내용을 적용하기 전에 인스턴스를 일시 중단합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Workflow.Runtime.WorkflowInstance> 개체에 ApplyWorkflowChanges를 호출하는 방법을 보여 줍니다.  이 예제는 Mainform.cs 파일에 있는 Ordering State Machine SDK 샘플의 일부입니다.  자세한 내용은 참조는 [Ordering State Machine 샘플](https://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c)합니다.  
  
 [!code-csharp[WF_Samples#89](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#89)]
 [!code-vb[WF_Samples#89](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">워크플로 런타임 엔진이 실행되고 있지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="EnqueueItem">
      <MemberSignature Language="C#" Value="public void EnqueueItem (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnqueueItem(class System.IComparable queueName, object item, class System.Workflow.Runtime.IPendingWork pendingWork, object workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnqueueItem (queueName As IComparable, item As Object, pendingWork As IPendingWork, workItem As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnqueueItem(IComparable ^ queueName, System::Object ^ item, System::Workflow::Runtime::IPendingWork ^ pendingWork, System::Object ^ workItem);" />
      <MemberSignature Language="F#" Value="member this.EnqueueItem : IComparable * obj * System.Workflow.Runtime.IPendingWork * obj -&gt; unit" Usage="workflowInstance.EnqueueItem (queueName, item, pendingWork, workItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueName" Type="System.IComparable" />
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="pendingWork" Type="System.Workflow.Runtime.IPendingWork" />
        <Parameter Name="workItem" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="queueName"><see cref="T:System.Workflow.Runtime.WorkflowQueue" />의 이름입니다.</param>
        <param name="item">큐에 삽입할 개체입니다.</param>
        <param name="pendingWork"><see cref="T:System.Workflow.Runtime.IPendingWork" />이 전달되면 발신자에게 알리는 <paramref name="item" />입니다.</param>
        <param name="workItem"><see cref="T:System.Workflow.Runtime.IPendingWork" /> 메서드에 전달할 개체입니다.</param>
        <summary>메시지를 지정된 워크플로 큐에 동기적으로 게시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `item`을 지정된 <xref:System.Workflow.Runtime.WorkflowQueue>로 보냅니다. 메시지가 전달될 때 알림을 받으려면 서비스에 <xref:System.Workflow.Runtime.IPendingWork>를 구현하고 `workItem` 및 <xref:System.Workflow.Runtime.IPendingWork> 개체를 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>으로 전달합니다. 해당 알림을 원하지 않는 경우 `Nothing` 및 `pendingWork`에 대해 null 참조(Visual Basic의 경우 `workItem`)를 전달할 수 있습니다.  
  
 메시지와 함께 예외가 발생할 때이 메서드를 사용 하 여 상태 시스템 워크플로 사용 하 여, "큐 '{0}' 사용할 수 없습니다." 이 예외는 상태 시스템의 현재 상태에서 특정 이벤트를 처리하는 방법을 모르고 있기 때문입니다. 예를 들어 현재 상태 이외의 일부 상태에 '{0}' 큐에서 나타내는 <xref:System.Workflow.Activities.EventDrivenActivity>를 포함하는 <xref:System.Workflow.Activities.HandleExternalEventActivity>가 있습니다.  
  
> [!NOTE]
>  메시지가 전송된 순서대로 워크플로 인스턴스에 메시지가 수신된다고 보장할 수는 없습니다. 예를 들어 기존 큐(큐 A)에서 메시지를 받고 있으면 워크플로가 다른 큐(큐 B)를 만들게 되고, 이 큐가 첫 번째 메시지 이후에 전송된 다른 메시지를 수신 대기하는 경우 두 번째 메시지가 먼저 도착하지만 해당 큐가 아직 만들어지지 않아서 수신되지 않을 수 있습니다. 이 문제를 방지하려면 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>를 사용하여 두 번째 큐가 있는지 확인할 때까지 두 번째 메시지를 보내지 않아야 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>을 사용하는 방법을 보여 줍니다. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> 이벤트가 발생하면 이 예제에서 정의된 `OnWorkflowIdled` 메서드가 호출됩니다. <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> 속성을 사용하여 유휴 상태인 워크플로를 확인한 다음 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> 메서드를 호출하여 워크플로 인스턴스에 대해 큐 항목 컬렉션을 가져옵니다. 이 코드는 컬렉션을 반복하여 워크플로를 유휴 상태로 만든 이벤트를 기다리고 있는 활동을 확인합니다. 그런 다음 이벤트 큐 항목의 이름과 함께 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> 메서드를 사용하여 워크플로 큐에 예외를 보냅니다.  
  
 이 코드 예제는 Program.cs 파일에 있는 Canceling a Workflow SDK 샘플의 일부입니다. 자세한 내용은 [워크플로 취소 하면](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)합니다.  
  
 [!code-csharp[WF_Samples#261](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#261)]
 [!code-vb[WF_Samples#261](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#261)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="queueName" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
        <exception cref="T:System.InvalidOperationException">워크플로 런타임 엔진이 실행되고 있지 않은 경우  
  
또는 
<see cref="T:System.Workflow.Runtime.WorkflowQueue" />에 지정된 <paramref name="queueName" />가 없는 경우  
  
또는 
<see cref="T:System.Workflow.Runtime.WorkflowQueue" />에 지정된 <paramref name="queueName" />를 사용할 수 없는 경우</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742169(v=vs.90)">워크플로 취소</related>
      </Docs>
    </Member>
    <Member MemberName="EnqueueItemOnIdle">
      <MemberSignature Language="C#" Value="public void EnqueueItemOnIdle (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnqueueItemOnIdle(class System.IComparable queueName, object item, class System.Workflow.Runtime.IPendingWork pendingWork, object workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnqueueItemOnIdle (queueName As IComparable, item As Object, pendingWork As IPendingWork, workItem As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnqueueItemOnIdle(IComparable ^ queueName, System::Object ^ item, System::Workflow::Runtime::IPendingWork ^ pendingWork, System::Object ^ workItem);" />
      <MemberSignature Language="F#" Value="member this.EnqueueItemOnIdle : IComparable * obj * System.Workflow.Runtime.IPendingWork * obj -&gt; unit" Usage="workflowInstance.EnqueueItemOnIdle (queueName, item, pendingWork, workItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueName" Type="System.IComparable" />
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="pendingWork" Type="System.Workflow.Runtime.IPendingWork" />
        <Parameter Name="workItem" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="queueName"><see cref="T:System.Workflow.Runtime.WorkflowQueue" />의 이름입니다.</param>
        <param name="item">큐에 삽입할 개체입니다.</param>
        <param name="pendingWork"><see cref="T:System.Workflow.Runtime.IPendingWork" />이 전달되면 발신자에게 알리는 <paramref name="item" />입니다.</param>
        <param name="workItem"><see cref="T:System.Workflow.Runtime.IPendingWork" /> 메서드에 전달할 개체입니다.</param>
        <summary>워크플로가 유휴 상태이면 메시지를 지정된 워크플로 큐에 게시합니다. <see cref="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" />은 워크플로가 유휴 지점에 도달할 때까지 기다리고 워크플로 스케줄러가 유휴 상태인지, 즉 실행 중인 활성 작업이 없는지 확인한 후 큐에 삽입됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 인스턴스가 유휴 상태가 될 때까지 기다린 후 `item`을 지정된 <xref:System.Workflow.Runtime.WorkflowQueue>로 보냅니다. 워크플로 인스턴스가 일시 중단된 동안 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle%2A>을 호출하면 워크플로 런타임 엔진이 <xref:System.InvalidOperationException>을 throw합니다. 메시지가 전달될 때 알림을 받으려면 서비스에 <xref:System.Workflow.Runtime.IPendingWork>를 구현하고 `workItem` 및 <xref:System.Workflow.Runtime.IPendingWork> 개체를 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>으로 전달합니다. 해당 알림을 원하지 않는 경우 `Nothing` 및 `pendingWork`에 대해 null 참조(Visual Basic의 경우 `workItem`)를 전달할 수 있습니다.  
  
 상태 시스템 워크플로 사용 하 여이 메서드를 사용 하는 경우 메시지를 포함 하는 예외가 발생할 수 있습니다 "큐 '{0}' 사용할 수 없습니다." 이 예외는 상태 시스템의 현재 상태에서 특정 이벤트를 처리하는 방법을 모르고 있기 때문입니다. 예를 들어 현재 상태 이외의 일부 상태에 '{0}' 큐에서 나타내는 <xref:System.Workflow.Activities.EventDrivenActivity>를 포함하는 <xref:System.Workflow.Activities.HandleExternalEventActivity>가 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 `EnqueueItemOnIdle` 메서드를 사용하여 정보를 워크플로 인스턴스로 보내는 방법을 보여 줍니다. 먼저 WorkflowInstance 개체를 만들어 시작한 다음 <xref:System.Workflow.Runtime.IPendingWork> 인터페이스를 구현하는 개체를 만듭니다. `EnqueueItemOnIdle` 그런 다음 라고, 큐 이름, 큐에 넣은 항목 및 pendingWork 개체의 메서드에 전달할 작업 항목에 대 한 문자열 값을 전달 합니다.  
  
 [!code-csharp[WF_Samples#12](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#12)]
 [!code-vb[WF_Samples#12](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="queueName" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
        <exception cref="T:System.InvalidOperationException">워크플로 런타임 엔진이 실행되고 있지 않은 경우  
  
또는 
워크플로 인스턴스가 일시 중단된 경우  
  
또는 
<see cref="T:System.Workflow.Runtime.WorkflowQueue" />에 지정된 <paramref name="queueName" />가 없는 경우  
  
또는 
<see cref="T:System.Workflow.Runtime.WorkflowQueue" />에 지정된 <paramref name="queueName" />를 사용할 수 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="workflowInstance.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">비교할 개체입니다.</param>
        <summary>지정된 개체가 <see cref="T:System.Workflow.Runtime.WorkflowInstance" />와 같은지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>지정된 개체가 이 <see langword="true" />과 같으면 <see cref="T:System.Workflow.Runtime.WorkflowInstance" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 개체는 <xref:System.Workflow.Runtime.WorkflowInstance> 클래스의 인스턴스여야 하고 이 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>와 동일한 <xref:System.Workflow.Runtime.WorkflowInstance>를 가져야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="workflowInstance.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 워크플로 인스턴스에 대한 해시 코드를 반환합니다.</summary>
        <returns>이 <see cref="T:System.Workflow.Runtime.WorkflowInstance" />에 대한 해시 코드입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance.GetHashCode%2A>는 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> 값을 기반으로 해시 코드를 반환합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowDefinition">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Activity GetWorkflowDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.ComponentModel.Activity GetWorkflowDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowDefinition () As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::ComponentModel::Activity ^ GetWorkflowDefinition();" />
      <MemberSignature Language="F#" Value="member this.GetWorkflowDefinition : unit -&gt; System.Workflow.ComponentModel.Activity" Usage="workflowInstance.GetWorkflowDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 워크플로 인스턴스에 대한 루트 활동을 검색합니다.</summary>
        <returns><see cref="T:System.Workflow.ComponentModel.Activity" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 루트 활동을 사용하여 워크플로의 활동 계층 구조를 탐색할 수 있습니다.  
  
 이 메서드는 스레드로부터 안전하지 않으므로 호스트가 이 메서드에 대한 호출을 동기화해야 합니다.  
  
   
  
## Examples  
 다음 예제에서는 워크플로 인스턴스에서 워크플로 정의를 검색하는 방법을 보여 줍니다.  이 예제는 Mainform.cs 파일에 있는 Ordering State Machine SDK 샘플의 일부입니다.  자세한 내용은 참조는 [Ordering State Machine 샘플](https://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c)합니다.  
  
 [!code-csharp[WF_Samples#86](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#86)]
 [!code-vb[WF_Samples#86](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#86)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowNextTimerExpiration">
      <MemberSignature Language="C#" Value="public DateTime GetWorkflowNextTimerExpiration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime GetWorkflowNextTimerExpiration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowNextTimerExpiration () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime GetWorkflowNextTimerExpiration();" />
      <MemberSignature Language="F#" Value="member this.GetWorkflowNextTimerExpiration : unit -&gt; DateTime" Usage="workflowInstance.GetWorkflowNextTimerExpiration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 <see cref="T:System.Workflow.Runtime.WorkflowInstance" />가 타이머 메시지를 전달하도록 예약된 다음 시점을 반환합니다.</summary>
        <returns>이 <see cref="P:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt" />에 타이머 메시지가 전달될 다음 <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> 시간을 나타내는 DateTime 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration%2A> 메서드를 사용하여 추가 워크플로 타이머 메시지가 큐에 삽입되는지 확인하는 방법을 보여 줍니다. 이 예제는 Program.cs 파일에 있는 WorkflowThreading SDK 샘플의 일부입니다. 자세한 내용은 [Workflow Threading 샘플](https://msdn.microsoft.com/library/5b650be7-09fa-47db-a2f6-523dc8ea5ee9)합니다.  
  
 [!code-csharp[WF_Samples#284](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#284)]
 [!code-vb[WF_Samples#284](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#284)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Workflow.Runtime.TimerEventSubscription" />
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowQueueData">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt; GetWorkflowQueueData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.Runtime.WorkflowQueueInfo&gt; GetWorkflowQueueData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflowQueueData () As ReadOnlyCollection(Of WorkflowQueueInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::Runtime::WorkflowQueueInfo ^&gt; ^ GetWorkflowQueueData();" />
      <MemberSignature Language="F#" Value="member this.GetWorkflowQueueData : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt;" Usage="workflowInstance.GetWorkflowQueueData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowQueueInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 워크플로 인스턴스와 연결된 워크플로 큐에 대해 보류 중인 항목과 구독되는 활동을 포함하는 <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /> 개체의 컬렉션을 가져옵니다.</summary>
        <returns><see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 개체의 <see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>는 이 워크플로 인스턴스와 연결된 한 워크플로 큐의 상태에 대한 정보를 각각 포함하는 <xref:System.Workflow.Runtime.WorkflowQueueInfo> 개체의 컬렉션을 반환합니다. <xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=nameWithType>는 <xref:System.Workflow.Runtime.WorkflowQueue>에 대한 보류 중인 항목을 포함하고 <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=nameWithType>는 <xref:System.Workflow.Runtime.WorkflowQueue>의 항목 전달에 대해 구독되는 활동의 목록을 포함합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> 메서드를 사용하여 <xref:System.Workflow.Runtime.WorkflowInstance> 개체와 연결된 모든 워크플로 큐의 상태 정보를 가져오는 방법을 보여 줍니다. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> 이벤트가 발생하면 이 예제에서 정의된 `OnWorkflowIdled` 메서드가 호출됩니다. <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> 속성을 사용하여 유휴 상태인 워크플로를 확인한 다음 <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> 메서드를 호출하여 워크플로 인스턴스에 대해 큐 항목 컬렉션을 가져옵니다. 이 코드는 컬렉션을 반복하여 워크플로를 유휴 상태로 만든 이벤트를 기다리고 있는 활동을 확인합니다. 그런 다음 이벤트 큐 항목의 이름과 함께 <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> 메서드를 사용하여 워크플로 큐에 예외를 보냅니다.  
  
 이 코드 예제는 Program.cs 파일에 있는 Canceling a Workflow SDK 샘플의 일부입니다. 자세한 내용은 [워크플로 취소 하면](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)합니다.  
  
 [!code-csharp[WF_Samples#261](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#261)]
 [!code-vb[WF_Samples#261](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#261)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">워크플로 런타임 엔진이 실행되고 있지 않은 경우</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742169(v=vs.90)">워크플로 취소</related>
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public Guid InstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowInstance.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceId As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid InstanceId { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceId : Guid" Usage="System.Workflow.Runtime.WorkflowInstance.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>워크플로 인스턴스의 고유 식별자를 가져옵니다.</summary>
        <value>워크플로 인스턴스의 <see cref="T:System.Guid" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>를 사용하여 워크플로 인스턴스를 참조할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> 속성을 사용하여 <xref:System.Workflow.Runtime.WorkflowInstance> 개체에 대한 정보를 가져오는 방법을 보여 줍니다. 첫 번째 코드 조각에서는 <xref:System.Workflow.Runtime.WorkflowInstance>라는 `instanceId` 변수를 만듭니다.  
  
 [!code-csharp[WF_Samples#210](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#210)]
 [!code-vb[WF_Samples#210](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#210)]  
  
 두 번째 코드 조각에서는 <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> 메서드를 호출할 때 `OrderEventArgs` 속성을 `CallBackForApproval` 생성자 호출의 첫 번째 개체로 사용합니다.  
  
 이 코드 예제는 OrderServiceImple.cs 파일에 있는 Listen SDK 샘플의 일부입니다. 자세한 내용은 [수신 샘플](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741698(v=vs.90))합니다.  
  
 [!code-csharp[WF_Samples#211](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#211)]
 [!code-vb[WF_Samples#211](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#211)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741698(v=vs.90)">Listen 샘플</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Load" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load();" />
      <MemberSignature Language="F#" Value="member this.Load : unit -&gt; unit" Usage="workflowInstance.Load " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이전에 언로드된 워크플로 인스턴스를 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A>는 동기적입니다. 워크플로 인스턴스를 로드할 수 있는 경우 워크플로 런타임 엔진이 워크플로 인스턴스를 메모리에 로드하고 예약한 후 <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A>가 반환됩니다. 지속성 서비스가 메모리의 워크플로 인스턴스를 복원한 후, 워크플로 런타임 엔진이 인스턴스를 예약하기 전에 런타임에서 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> 이벤트를 발생시킵니다.  
  
   
  
## Examples  
 다음 예제에서는 이전에 언로드된 <xref:System.Workflow.Runtime.WorkflowInstance> 개체를 로드하는 방법을 보여 줍니다.  
  
 [!code-csharp[WF_Samples#10](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#10)]
 [!code-vb[WF_Samples#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">워크플로 런타임 엔진이 실행되고 있지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ReloadTrackingProfiles">
      <MemberSignature Language="C#" Value="public void ReloadTrackingProfiles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReloadTrackingProfiles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReloadTrackingProfiles ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReloadTrackingProfiles();" />
      <MemberSignature Language="F#" Value="member this.ReloadTrackingProfiles : unit -&gt; unit" Usage="workflowInstance.ReloadTrackingProfiles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 워크플로 인스턴스에 대한 추적 프로필을 다시 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 런타임 추적 인프라는 추적 채널과 연결된 이 워크플로 인스턴스에 대한 각 <xref:System.Workflow.Runtime.Tracking.TrackingProfile>을 다시 로드합니다. 이미 일시 중단된 상태가 아니면 추적 프로필을 다시 로드하는 동안 워크플로가 런타임 추적 인프라에 의해 일시 중단됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">워크플로 런타임 엔진이 실행되고 있지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="workflowInstance.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이전에 일시 중단된 워크플로 인스턴스의 실행을 계속합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호스트는 <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A>을 호출하여 이전에 일시 중단된 워크플로 인스턴스의 실행을 계속할 수 있습니다. 워크플로 인스턴스가 일시 중단된 상태가 아니면 작업이 수행되지 않습니다. 런타임은 워크플로 인스턴스의 실행이 계속되기 직전에 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> 이벤트를 발생시킵니다.  
  
   
  
## Examples  
 다음 예제에서는 이전에 일시 중단된 워크플로 인스턴스에서 Resume을 호출하는 방법을 보여 줍니다.  이 예제는 Suspend and Terminate SDK 샘플에 포함되어 있습니다.  자세한 내용은 [Suspend and Terminate 샘플](https://msdn.microsoft.com/library/f4dffa58-d01e-44fb-b5a1-3b283d2c4517)합니다.  
  
 [!code-csharp[WF_Samples#172](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#172)]
 [!code-vb[WF_Samples#172](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#172)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">워크플로 런타임 엔진이 실행되고 있지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="workflowInstance.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>워크플로 인스턴스의 실행을 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A>는 이 워크플로 인스턴스의 루트 활동에서 <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A>를 호출합니다. <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A>에서 예외를 발견하면 종료 이유로 전달된 예외의 <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> 속성으로 <xref:System.Exception.Message%2A>를 호출하여 워크플로 인스턴스를 종료합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> 메서드를 사용하여 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowInstance>를 시작하는 방법을 보여 줍니다. 또한 <xref:System.Workflow.Runtime.WorkflowRuntime> 인스턴스를 만들고 서비스를 런타임에 추가한 다음 <xref:System.Workflow.Runtime.WorkflowInstance> 개체를 만드는 권장 방법을 보여 줍니다. 이 코드에서는 <xref:System.Type> 개체를 만들고 호스트와 연결된 워크플로 개체 중 하나로 캐스팅합니다. 그런 다음 <xref:System.Workflow.Runtime.WorkflowInstance> 메서드를 호출하고 이전에 만든 형식을 전달하여 <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A>를 초기화합니다. <xref:System.Workflow.Runtime.WorkflowInstance>는 <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> 메서드 호출을 사용하여 시작됩니다.  
  
 이 코드 예제는 Program.cs 파일에 있는 Canceling a Workflow SDK 샘플의 일부입니다. 자세한 내용은 [워크플로 취소 하면](https://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)합니다.  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">워크플로 런타임 엔진이 실행되고 있지 않은 경우  
  
또는 
워크플로 인스턴스가 이미 시작된 경우</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms742169(v=vs.90)">워크플로 취소</related>
      </Docs>
    </Member>
    <Member MemberName="Suspend">
      <MemberSignature Language="C#" Value="public void Suspend (string error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Suspend(string error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Suspend (error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Suspend(System::String ^ error);" />
      <MemberSignature Language="F#" Value="member this.Suspend : string -&gt; unit" Usage="workflowInstance.Suspend error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="error">워크플로 인스턴스를 일시 중단한 이유에 대한 설명입니다.</param>
        <summary>워크플로 인스턴스를 일시 중단합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 인스턴스는 동기 방식으로 일시 중단됩니다. 워크플로 인스턴스가 이미 일시 중단된 경우 작업이 수행되지 않습니다. 그렇지 않으면 워크플로 런타임 엔진이 워크플로 인스턴스를 일시 중단하고, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> 이벤트를 발생시키며, `reason`에 <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>을 포함하여 전달합니다.  
  
> [!NOTE]
>  <xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A>는 워크플로 인스턴스를 언로드하지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Workflow.Runtime.WorkflowInstance> 개체에서 Suspend를 호출하는 방법을 보여 줍니다.  
  
 [!code-csharp[WF_Samples#9](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#9)]
 [!code-vb[WF_Samples#9](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">워크플로 런타임 엔진이 실행되고 있지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Terminate">
      <MemberSignature Language="C#" Value="public void Terminate (string error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Terminate(string error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Terminate (error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Terminate(System::String ^ error);" />
      <MemberSignature Language="F#" Value="member this.Terminate : string -&gt; unit" Usage="workflowInstance.Terminate error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="error">워크플로 인스턴스를 종료한 이유에 대한 설명입니다.</param>
        <summary>워크플로 인스턴스를 동기 방식으로 종료합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 인스턴스는 동기 방식으로 종료됩니다. 호스트가 <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>를 호출하여 워크플로 인스턴스를 종료합니다. 워크플로 런타임 엔진은 메모리 내 워크플로 인스턴스를 지우고 인스턴스가 메모리에서 지워졌음을 지속성 서비스에 알립니다. <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>의 경우 이는 해당 워크플로 인스턴스의 모든 상태 정보가 종료 시 데이터베이스에서 삭제됨을 의미합니다. 이전에 저장된 유지 지점에서 워크플로 인스턴스를 다시 로드할 수 없습니다.  
  
 메모리 내 워크플로 인스턴스를 지우고 지속성 서비스에 종료를 알린 후 `Terminate` 메서드는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> 이벤트를 발생시키고 `reason`에 포함된 <xref:System.Exception.Message%2A>의 <xref:System.Workflow.ComponentModel.WorkflowTerminatedException> 속성에 <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>을 포함하여 전달합니다.  
  
 Terminate가 메모리 내 워크플로 인스턴스를 지우고 지속성 서비스에 종료를 알리는 반면 `Terminate`는 단순히 메모리 내 워크플로 인스턴스를 지우며 마지막 유지 지점에서 해당 인스턴스를 다시 시작할 수 있다는 점에서 <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A>는 `Abort`와 다릅니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Workflow.Runtime.WorkflowInstance> 개체에서 Terminate를 호출하는 방법을 보여 줍니다.  
  
 [!code-csharp[WF_Samples#8](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#8)]
 [!code-vb[WF_Samples#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">워크플로 런타임 엔진이 실행되고 있지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="TryUnload">
      <MemberSignature Language="C#" Value="public bool TryUnload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryUnload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.TryUnload" />
      <MemberSignature Language="VB.NET" Value="Public Function TryUnload () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryUnload();" />
      <MemberSignature Language="F#" Value="member this.TryUnload : unit -&gt; bool" Usage="workflowInstance.TryUnload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>인스턴스가 일시 중단되거나 유휴 상태이면 메모리의 워크플로 인스턴스를 지속성 저장소로 언로드합니다.</summary>
        <returns>워크플로 인스턴스가 언로드되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 인스턴스가 유휴 상태이거나 일시 중단된 경우 <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A>는 지속성 서비스를 사용하여 메모리에서 워크플로 인스턴스를 제거하고 데이터 저장소에서 지속합니다. <xref:System.Workflow.Runtime.WorkflowRuntime>에 등록된 지속성 서비스가 없으면 <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A>가 <xref:System.InvalidOperationException>을 throw합니다. 워크플로 인스턴스가 성공적으로 지속되면 런타임에서 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> 이벤트를 발생시키고 `true`를 반환합니다. 워크플로 인스턴스가 이미 언로드, 종료, 일시 중단 또는 완료된 경우 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>에서 `false`를 반환합니다.  
  
 호스트는 <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A>를 사용하여 유휴 워크플로에서 시스템 리소스를 회수할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> 이벤트가 발생할 때 TryUnload 메서드를 사용하여 워크플로를 언로드하는 방법을 보여 줍니다. 이 예제는 Program.cs 파일에 있는 Using Persistence Services SDK 샘플의 일부입니다. 자세한 내용은 [Persistence Services 샘플을 사용 하 여](https://msdn.microsoft.com/library/3176b7e7-ae49-4d5c-802b-85032d6ebde6)입니다.  
  
 [!code-csharp[WF_Samples#280](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#280)]
 [!code-vb[WF_Samples#280](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#280)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">워크플로 런타임 엔진에 등록된 지속성 서비스가 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public void Unload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowInstance.Unload" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unload ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Unload();" />
      <MemberSignature Language="F#" Value="member this.Unload : unit -&gt; unit" Usage="workflowInstance.Unload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>메모리의 워크플로 인스턴스를 지속성 저장소로 언로드합니다. 이 호출은 현재 예약된 작업이 완료된 후 또는 트랜잭션 범위의 끝까지 차단됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>는 동기적입니다. 즉, 수행하는 모든 작업을 완료한 후 반환됩니다. 워크플로 인스턴스가 유휴 상태가 아니면 인스턴스를 중단할 수 있을 때까지 런타임이 대기합니다. 현재 예약된 작업이 완료된 후에만 인스턴스를 중단할 수 있습니다. 이는 일반적으로 현재 실행 중인 활동이 해당 <xref:System.Workflow.ComponentModel.Activity.Execute%2A> 메서드에서 반환될 때입니다. 그러나 인스턴스가 <xref:System.Workflow.ComponentModel.TransactionScopeActivity>를 실행 중이면 트랜잭션 범위가 실행을 완료해야만 인스턴스를 중단할 수 있습니다. 그런 다음 Unload는 지속성 서비스를 사용하여 메모리에서 워크플로 인스턴스를 제거하고 데이터 저장소에서 지속합니다. <xref:System.Workflow.Runtime.WorkflowRuntime>에 등록된 지속성 서비스가 없으면 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>가 <xref:System.InvalidOperationException>을 throw합니다. 워크플로 인스턴스가 성공적으로 지속되면 런타임에서 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> 이벤트를 발생시킵니다.  
  
 호스트는 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>를 사용하여 유휴 워크플로에서 시스템 리소스를 회수할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> 개체에서 <xref:System.Workflow.Runtime.WorkflowInstance>를 호출하는 방법을 보여 줍니다.  
  
 [!code-csharp[WF_Samples#11](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#11)]
 [!code-vb[WF_Samples#11](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">워크플로 런타임 엔진에 등록된 지속성 서비스가 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="WorkflowRuntime">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkflowRuntime As WorkflowRuntime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::Runtime::WorkflowRuntime ^ WorkflowRuntime { System::Workflow::Runtime::WorkflowRuntime ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WorkflowRuntime : System.Workflow.Runtime.WorkflowRuntime" Usage="System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowRuntime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 워크플로 인스턴스에 대한 <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />을 가져옵니다.</summary>
        <value>이 워크플로 인스턴스가 실행 중인 실행 환경을 나타내는 <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 <xref:System.Workflow.Runtime.WorkflowRuntime> 개체의 실행 중인 <xref:System.Workflow.Runtime.WorkflowInstance>에 액세스하는 방법을 보여 줍니다.  
  
 [!code-csharp[WF_Samples#7](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#7)]
 [!code-vb[WF_Samples#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>