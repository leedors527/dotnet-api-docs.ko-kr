<Type Name="WorkflowRuntime" FullName="System.Workflow.Runtime.WorkflowRuntime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7f7231e23a0b76819757cabf698d136f3256fc40" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53505795" /></Metadata><TypeSignature Language="C#" Value="public class WorkflowRuntime : IDisposable, IServiceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WorkflowRuntime extends System.Object implements class System.IDisposable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowRuntime" />
  <TypeSignature Language="VB.NET" Value="Public Class WorkflowRuntime&#xA;Implements IDisposable, IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowRuntime : IDisposable, IServiceProvider" />
  <TypeSignature Language="F#" Value="type WorkflowRuntime = class&#xA;    interface IServiceProvider&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>워크플로 런타임 엔진이 워크플로에 대해 제공하는 구성 가능한 실행 환경을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime>은 호스트 애플리케이션 및 서비스가 워크플로 런타임 엔진을 구성 및 제어하고 워크플로 런타임 엔진 및 해당 워크플로 인스턴스 변경 내용에 대한 알림을 받는 데 필요한 기능을 노출합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> 생성자와 <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> 및 <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> 메서드를 사용하는 방법의 예제를 제공합니다. 또한 이 코드에서는 <xref:System.Workflow.Runtime.WorkflowInstance> 메서드를 사용하여 워크플로 호스트에 <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> 개체를 만드는 권장 방법을 보여 줍니다. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted>, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> 및 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> 이벤트에 대해 이벤트 처리기를 설정하는 방법도 보여 줍니다.  
  
 일부인이 코드 예제는 [워크플로 취소 하면](https://go.microsoft.com/fwlink/?LinkID=157346) 샘플입니다.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
    </remarks>
    <threadsafe>이 형식은 스레드로부터 안전합니다.</threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime>은 기본 속성 값으로 초기화되고 기본 핵심 서비스를 포함합니다. 워크플로 런타임 엔진을 추가로 구성하려는 경우 <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> 및 <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>를 사용하여 서비스를 추가 및 제거할 수 있으며 <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>을 설정할 수 있습니다. <xref:System.Workflow.Runtime.WorkflowRuntime>이 구성된 후 <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>을 호출하여 워크플로 런타임 엔진과 해당 서비스를 시작합니다.  
  
 다음 표에서는 <xref:System.Workflow.Runtime.WorkflowRuntime> 클래스의 인스턴스에 대한 초기 속성 값을 보여 줍니다.  
  
|속성|초기 값|  
|--------------|-------------------|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>|"WorkflowRuntime"|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>|`false`|  
  
 기본 핵심 서비스는 <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> 및 <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService>입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> 생성자를 사용하여 <xref:System.Workflow.Runtime.WorkflowRuntime>의 인스턴스를 만들고 해당 메서드 및 이벤트에 액세스하는 방법의 예제를 제공합니다.  
  
 일부인이 코드 예제는 [워크플로 취소 하면](https://go.microsoft.com/fwlink/?LinkID=157346) 샘플입니다.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (string configSectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string configSectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (configSectionName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime(System::String ^ configSectionName);" />
      <MemberSignature Language="F#" Value="new System.Workflow.Runtime.WorkflowRuntime : string -&gt; System.Workflow.Runtime.WorkflowRuntime" Usage="new System.Workflow.Runtime.WorkflowRuntime configSectionName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configSectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="configSectionName">애플리케이션 구성 파일에 있는 올바른 <see langword="workflowSettings" /> 섹션의 이름입니다.</param>
        <summary>애플리케이션 구성 파일의 지정된 섹션을 사용하여 <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime>은 애플리케이션 구성 파일의 `configSectionName`에 지정된 설정에 따라 초기화됩니다. `configSectionName` 유효한 같아야 `workflowSettings` 구성 파일의 섹션입니다.  
  
 워크플로 런타임 엔진은 애플리케이션 구성 파일을 사용 하 여 구성 되 면 로드 하 고에 나열 된 유형의 클래스를 인스턴스화하는 `Services` 구성 파일의 섹션입니다. 워크플로 런타임 엔진은 이러한 클래스를 생성할 때 다음 서명을 순서대로 사용하여 클래스 생성자를 찾습니다.  
  
1.  Service(WorkflowRuntime 런타임, NameValueCollection 매개 변수)  
  
2.  Service(WorkflowRuntime 런타임)  
  
3.  Service(NameValueCollection 매개 변수)  
  
4.  Service()  
  
 구성 파일에서 로드된 모든 서비스 클래스는 이러한 생성자 시그니처를 하나 이상 구현해야 합니다.  
  
 자세한 내용은 <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection>을 참조하세요.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="configSectionName" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
        <exception cref="T:System.ArgumentException">애플리케이션 구성 파일에서 올바른 <see langword="workflowSettings" /> 섹션을 찾을 수 없는 경우</exception>
        <exception cref="T:System.InvalidOperationException">이 애플리케이션 도메인에 대한 <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />이 이미 있는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.Workflow.Runtime.Configuration.WorkflowRuntimeSection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (settings As WorkflowRuntimeSection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime(System::Workflow::Runtime::Configuration::WorkflowRuntimeSection ^ settings);" />
      <MemberSignature Language="F#" Value="new System.Workflow.Runtime.WorkflowRuntime : System.Workflow.Runtime.Configuration.WorkflowRuntimeSection -&gt; System.Workflow.Runtime.WorkflowRuntime" Usage="new System.Workflow.Runtime.WorkflowRuntime settings" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="settings" Type="System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />
      </Parameters>
      <Docs>
        <param name="settings"><see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" /></param>
        <summary>지정된 <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />의 설정을 사용하여 <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 애플리케이션 구성 파일을 사용하지 않는 호스트에 대해 단일 메서드 호출을 사용하여 워크플로 런타임 엔진을 구성하는 메커니즘을 제공합니다. 애플리케이션 구성 파일을 사용하지 않는 데는 여러 가지 이유가 있을 수 있습니다. 예를 들어 호스트가 구성 파일의 사용을 허용하지 않는 환경에서 실행될 수 있습니다. 이러한 환경의 예로는 보안상의 이유로 애플리케이션 구성 파일 읽기를 허용하지 않는 신뢰할 수 있는 환경이 있습니다. 또한 호스트가 비공개 구성 메커니즘을 사용할 수 있습니다. 예를 들어 호스트가 워크플로 런타임 엔진 구성 설정을 SQL 데이터베이스에 저장할 수 있습니다.  
  
 워크플로 런타임 엔진은 <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.Services%2A?displayProperty=nameWithType>에 포함된 형식의 클래스를 로드하고 인스턴스화합니다. 워크플로 런타임 엔진은 이러한 클래스를 생성할 때 다음 서명을 순서대로 사용하여 클래스 생성자를 찾습니다.  
  
1.  Service(WorkflowRuntime 런타임, NameValueCollection 매개 변수)  
  
2.  Service(WorkflowRuntime 런타임)  
  
3.  Service(NameValueCollection 매개 변수)  
  
4.  Service()  
  
 `settings`에 지정된 모든 서비스 클래스는 이러한 생성자 시그니처를 하나 이상 구현해야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="settings" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
        <exception cref="T:System.InvalidOperationException">이 애플리케이션 도메인에 대한 <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />이 이미 있는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public void AddService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddService(object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.AddService(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddService (service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddService(System::Object ^ service);" />
      <MemberSignature Language="F#" Value="member this.AddService : obj -&gt; unit" Usage="workflowRuntime.AddService service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">추가할 서비스를 나타내는 개체입니다.</param>
        <summary>지정된 서비스를 워크플로 런타임 엔진에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 핵심 서비스를 추가하여 워크플로 런타임 엔진을 구성할 수 있습니다. 핵심 서비스는 서비스 기본 클래스인 <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> 클래스, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> 클래스, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> 클래스 및 <xref:System.Workflow.Runtime.Tracking.TrackingService> 클래스에서 파생된 서비스입니다.  핵심 서비스 워크플로 런타임 엔진이 실행 되 고 있지 않으면 추가할 수 있습니다. 즉, <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> 는 `false`합니다. <xref:System.Workflow.Runtime.WorkflowRuntime>은 호스트에서 실행 중인 애플리케이션이나 다른 워크플로에서 사용할 수 있는 다른 서비스에 대한 저장소 컨테이너로 사용될 수도 있습니다. 워크플로 런타임 엔진이 시작된 후 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 클래스에서 파생된 비핵심 서비스를 추가하면 <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>가 해당 서비스에 의해 구현된 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 메서드를 호출합니다.  
  
> [!NOTE]
>  <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>는 <xref:System.Type>이 동일한 두 개의 서비스를 <xref:System.Workflow.Runtime.WorkflowRuntime>에 추가할 수 없다는 제한을 적용합니다. 그러나 동일한 기본 클래스에서 파생된 서비스는 여러 개 추가할 수 있습니다.  <xref:System.Workflow.Runtime.WorkflowRuntime>의 서비스 기본 클래스인 <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> 클래스, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> 클래스 및 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> 클래스에서 각각 하나의 서비스만 파생될 수 있습니다.  이러한 클래스 중 하나에서 파생된 여러 서비스(예: 두 개의 지속성 서비스)를 추가하면 <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>은 <xref:System.InvalidOperationException>을 throw합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> 메서드를 사용하여 <xref:System.Workflow.Activities.ExternalDataExchangeService> 및 <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>를 워크플로 런타임 엔진에 추가하는 방법의 예제를 제공합니다.  
  
 일부인이 코드 예제는 [워크플로 취소](https://go.microsoft.com/fwlink/?LinkId=157346) 샘플입니다.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="service" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" />이 삭제된 경우</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="service" />가 워크플로 런타임 엔진에 이미 등록된 경우  
  
또는 
 <paramref name="service" />가 핵심 서비스이고 워크플로 런타임 엔진이 이미 실행 중인 경우(<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" />가 <see langword="true" />인 경우)</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateWorkflow">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 매개 변수를 사용하여 워크플로 인스턴스를 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 런타임 엔진이 시작되지 않은 경우 <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> 메서드는 <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>을 호출합니다. 가능한 예외 목록은 <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>을 참조하십시오. 워크플로 인스턴스를 만든 후 <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A?displayProperty=nameWithType> 메서드가 반환하는 <xref:System.Workflow.Runtime.WorkflowInstance> 개체에서 <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A>를 호출하여 실행을 시작합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow workflowType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="workflowType">만들 워크플로의 <see cref="T:System.Type" />입니다.</param>
        <summary>지정된 워크플로 <see cref="T:System.Type" />을 사용하여 새 워크플로 인스턴스를 만듭니다.</summary>
        <returns>만들어진 워크플로 인스턴스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance>를 만들기 전에 유효성 검사가 먼저 실행됩니다. 유효성 검사 오류가 발생하면 <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>이 throw됩니다. 단순한 시나리오에서는 문제가 없지만 서버 환경에서는 활성화가 실행될 때마다 워크플로의 유효성을 다시 검사하는 것이 불필요한 부담이 될 수 있습니다.  
  
 유효성 검사를 사용 하지 않도록 설정 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Workflow.Runtime.WorkflowInstance> 메서드를 사용하여 워크플로 호스트에 <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> 개체를 만드는 권장 방법을 보여 줍니다.  
  
 일부인이 코드 예제는 [워크플로 취소 하면](https://go.microsoft.com/fwlink/?LinkID=157346) 샘플입니다.  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="workflowType" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow workflowDefinitionReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">워크플로 정의를 포함하는 <see cref="T:System.Xml.XmlReader" />입니다.</param>
        <summary>지정된 <see cref="T:System.Xml.XmlReader" />를 사용하여 워크플로 인스턴스를 만듭니다.</summary>
        <returns>만들어진 워크플로 인스턴스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 인스턴스는 <xref:System.Xml.XmlReader>가 참조하는 XAML 워크플로 정의 파일에서 만들어집니다.  
  
 <xref:System.Workflow.Runtime.WorkflowInstance>를 만들기 전에 유효성 검사가 먼저 실행됩니다. 유효성 검사 오류가 발생하면 <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>이 throw됩니다. 단순한 시나리오에서는 문제가 없지만 서버 환경에서는 활성화가 실행될 때마다 워크플로의 유효성을 다시 검사하는 것이 불필요한 부담이 될 수 있습니다.  
  
 유효성 검사를 사용 하지 않도록 설정 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>합니다.  
  
   
  
## Examples  
 다음 예제에서는 XAML 기반 워크플로 정의가 지정된 워크플로를 만드는 방법을 보여 줍니다.  
  
```  
static void Main(string[] args)  
{  
    using (WorkflowRuntime workflowRuntime = new WorkflowRuntime())  
    {  
        AutoResetEvent waitHandle = new AutoResetEvent(false);  
        workflowRuntime.WorkflowCompleted += delegate(object sender, WorkflowCompletedEventArgs e)  
        {  
            waitHandle.Set();  
        };  
        workflowRuntime.WorkflowTerminated += delegate(object sender, WorkflowTerminatedEventArgs e)  
        {  
            Console.WriteLine(e.Exception.Message);  
            waitHandle.Set();  
        };  
  
        TypeProvider typeProvider = new TypeProvider(null);  
        // Add referenced assemblies, if needed  
        // typeProvider.AddAssembly(...);  
        workflowRuntime.AddService(typeProvider);  
  
        using (XmlReader reader = XmlReader.Create("Workflow1.xoml"))  
        {  
            WorkflowInstance instance = workflowRuntime.CreateWorkflow(reader);  
            instance.Start();  
        }  
  
        waitHandle.WaitOne();  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="workflowDefinitionReader" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" />이 삭제된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type, namedArgumentValues As Dictionary(Of String, Object)) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type * System.Collections.Generic.Dictionary&lt;string, obj&gt; -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowType, namedArgumentValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowType">만들 워크플로의 <see cref="T:System.Type" />입니다.</param>
        <param name="namedArgumentValues">워크플로에 대한 인수를 나타내는 문자열로 키가 지정된 개체의 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</param>
        <summary>지정된 워크플로 <see cref="T:System.Type" /> 및 지정된 <see cref="T:System.Collections.Generic.Dictionary`2" />에 포함된 워크플로에 대한 인수를 사용하여 워크플로 인스턴스를 만듭니다.</summary>
        <returns>만들어진 워크플로 인스턴스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance>를 만들기 전에 유효성 검사가 먼저 실행됩니다. 유효성 검사 오류가 발생하면 <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>이 throw됩니다. 단순한 시나리오에서는 문제가 없지만 서버 환경에서는 활성화가 실행될 때마다 워크플로의 유효성을 다시 검사하는 것이 불필요한 부담이 될 수 있습니다.  
  
 유효성 검사를 사용 하지 않도록 설정 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>합니다.  
  
 매개 변수를 전달의 예로 `CreateWorkflow`를 참조 하세요 [Workflow with Parameters 샘플](https://go.microsoft.com/fwlink/?LinkId=157403)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="workflowType" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type, namedArgumentValues As Dictionary(Of String, Object), instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : Type * System.Collections.Generic.Dictionary&lt;string, obj&gt; * Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowType, namedArgumentValues, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowType">만들 워크플로의 <see cref="T:System.Type" />입니다.</param>
        <param name="namedArgumentValues">워크플로에 대한 인수를 나타내는 문자열로 키가 지정된 개체의 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</param>
        <param name="instanceId">만들 특정 <see cref="T:System.Guid" />의 <see cref="T:System.Workflow.Runtime.WorkflowInstance" />입니다.</param>
        <summary>지정된 매개 변수를 사용하여 워크플로 인스턴스를 만듭니다.</summary>
        <returns>만들어진 워크플로 인스턴스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance>를 만들기 전에 유효성 검사가 먼저 실행됩니다. 유효성 검사 오류가 발생하면 <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>이 throw됩니다. 단순한 시나리오에서는 문제가 없지만 서버 환경에서는 활성화가 실행될 때마다 워크플로의 유효성을 다시 검사하는 것이 불필요한 부담이 될 수 있습니다.  
  
 유효성 검사를 사용 하지 않도록 설정 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>합니다.  
  
 `instanceId`이 로드한 모든 실행 중인 워크플로의 워크플로 <xref:System.Workflow.Runtime.WorkflowRuntime>는 고유해야 합니다. `instanceId`를 전달하여 워크플로를 만드는 경우 실행 중인 워크플로에서 이미 해당 `instanceId`를 사용 중이면 <xref:System.InvalidOperationException>이 throw됩니다.  
  
 매개 변수를 전달의 예로 `CreateWorkflow`를 참조 하세요 [Workflow with Parameters 샘플](https://go.microsoft.com/fwlink/?LinkID=157403)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="workflowType" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader, rulesReader As XmlReader, namedArgumentValues As Dictionary(Of String, Object)) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader, System::Xml::XmlReader ^ rulesReader, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader * System.Xml.XmlReader * System.Collections.Generic.Dictionary&lt;string, obj&gt; -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowDefinitionReader, rulesReader, namedArgumentValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">워크플로 정의를 포함하는 <see cref="T:System.Xml.XmlReader" />입니다.</param>
        <param name="rulesReader"><see cref="T:System.Xml.XmlReader" />입니다.</param>
        <param name="namedArgumentValues">워크플로에 대한 인수를 나타내는 문자열로 키가 지정된 개체의 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</param>
        <summary>지정된 <see cref="T:System.Xml.XmlReader" /> 개체 및 지정된 <see cref="T:System.Collections.Generic.Dictionary`2" />에 포함된 인수를 사용하여 워크플로 인스턴스를 만듭니다.</summary>
        <returns>만들어진 워크플로 인스턴스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 인스턴스는 <xref:System.Xml.XmlReader>가 참조하는 워크플로 및 `namedArgumentValues`가 제공하는 인수에서 만들어집니다.  
  
 <xref:System.Workflow.Runtime.WorkflowInstance>를 만들기 전에 유효성 검사가 먼저 실행됩니다. 유효성 검사 오류가 발생하면 <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>이 throw됩니다. 단순한 시나리오에서는 문제가 없지만 서버 환경에서는 활성화가 실행될 때마다 워크플로의 유효성을 다시 검사하는 것이 불필요한 부담이 될 수 있습니다.  
  
 유효성 검사를 사용 하지 않도록 설정 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>합니다.  
  
 매개 변수를 전달의 예로 `CreateWorkflow`를 참조 하세요 [Workflow with Parameters 샘플](https://go.microsoft.com/fwlink/?LinkID=157403)합니다.  
  
 XML에 정의 된 규칙을 사용 하 여 예제를 보려면 [IfElse with Rules 샘플](https://go.microsoft.com/fwlink/?LinkId=157404)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="workflowDefinitionReader" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" />이 삭제된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader, rulesReader As XmlReader, namedArgumentValues As Dictionary(Of String, Object), instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader, System::Xml::XmlReader ^ rulesReader, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.CreateWorkflow : System.Xml.XmlReader * System.Xml.XmlReader * System.Collections.Generic.Dictionary&lt;string, obj&gt; * Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.CreateWorkflow (workflowDefinitionReader, rulesReader, namedArgumentValues, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">워크플로 정의를 포함하는 <see cref="T:System.Xml.XmlReader" />입니다.</param>
        <param name="rulesReader"><see cref="T:System.Xml.XmlReader" />입니다.</param>
        <param name="namedArgumentValues">워크플로에 대한 인수를 나타내는 문자열로 키가 지정된 개체의 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</param>
        <param name="instanceId">만들 특정 <see cref="T:System.Guid" />의 <see cref="T:System.Workflow.Runtime.WorkflowInstance" />입니다.</param>
        <summary>지정된 매개 변수를 사용하여 워크플로 인스턴스를 만듭니다.</summary>
        <returns>만들어진 워크플로 인스턴스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowInstance>를 만들기 전에 유효성 검사가 먼저 실행됩니다. 유효성 검사 오류가 발생하면 <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>이 throw됩니다. 단순한 시나리오에서는 문제가 없지만 서버 환경에서는 활성화가 실행될 때마다 워크플로의 유효성을 다시 검사하는 것이 불필요한 부담이 될 수 있습니다.  
  
 유효성 검사를 사용 하지 않도록 설정 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>합니다.  
  
 `instanceId`이 로드한 모든 실행 중인 워크플로의 워크플로 <xref:System.Workflow.Runtime.WorkflowRuntime>는 고유해야 합니다. `instanceId`를 전달하여 워크플로를 만드는 경우 실행 중인 워크플로에서 이미 해당 `instanceId`를 사용 중이면 <xref:System.InvalidOperationException>이 throw됩니다.  
  
 매개 변수를 전달의 예로 `CreateWorkflow`를 참조 하세요 [Workflow with Parameters 샘플](https://go.microsoft.com/fwlink/?LinkID=157403)합니다.  
  
 XML에 정의 된 규칙을 사용 하 여 예제를 보려면 [IfElse with Rules 샘플](https://go.microsoft.com/fwlink/?LinkID=157404)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="workflowType" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="workflowRuntime.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Workflow.Runtime.WorkflowRuntime" />에서 사용하는 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime>을 올바르게 종료하려면 <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>을 호출한 후에 <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>만 호출해야 합니다. 이는 <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> 메서드만을 호출하면 <xref:System.Workflow.Runtime.WorkflowRuntime>이 사용할 수 없는 상태가 되기 때문입니다. <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>는 열린 파일 핸들, 데이터베이스 연결 등을 닫아 런타임이 사용하는 리소스를 확보하지만 워크플로 인스턴스 언로드, 서비스 중지 또는 <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>이 수행하는 기타 작업을 수행하지 않습니다.  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>에 사용되는 리소스를 가비지 수집기가 자동으로 해제하기 전에 호스트 애플리케이션에서 해제해야 하는 경우에만 <xref:System.Workflow.Runtime.WorkflowRuntime>를 호출해야 합니다. 에 대 한 일반 정보에 대 한 <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>를 참조 하세요 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 하 고 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> 개체에서 <xref:System.Workflow.Runtime.WorkflowRuntime>를 호출하는 방법을 보여 줍니다. 이 샘플에서 <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> 메서드는 애플리케이션의 기본 폼에 대한 FormClosing 이벤트 처리기에서 호출됩니다. 이렇게 하면 런타임에서 만들어진 개체가 애플리케이션이 종료될 때 올바르게 정리됩니다. 이 샘플은는 [Speech Application 샘플](https://go.microsoft.com/fwlink/?LinkId=157405)합니다.  
  
 [!code-csharp[WF_Samples#108](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#108)]
 [!code-vb[WF_Samples#108](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllServices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;object&gt; GetAllServices (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;object&gt; GetAllServices(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllServices (serviceType As Type) As ReadOnlyCollection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Object ^&gt; ^ GetAllServices(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="member this.GetAllServices : Type -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;obj&gt;" Usage="workflowRuntime.GetAllServices serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">서비스가 반환되기 위해 구현해야 하는 <see cref="T:System.Type" />입니다.</param>
        <summary>지정된 <see cref="T:System.Type" />을 구현하거나 해당 형식에서 파생되었으며 워크플로 런타임 엔진에 추가된 모든 서비스를 검색합니다.</summary>
        <returns>지정된 <see cref="T:System.Type" />을 구현하거나 해당 형식에서 파생된 서비스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 빈 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>은 지정된 <xref:System.Type>을 구현하거나 해당 형식에서 파생된 서비스가 워크플로 런타임 엔진에 추가되지 않았음을 나타냅니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Workflow.Runtime.WorkflowRuntime> 개체에서 지정된 유형의 모든 서비스를 검색하는 방법을 보여 줍니다.  
  
 [!code-csharp[WF_Samples#19](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#19)]
 [!code-vb[WF_Samples#19](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="serviceType" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" />이 삭제된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllServices&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; GetAllServices&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!T&gt; GetAllServices&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllServices(Of T) () As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ GetAllServices();" />
      <MemberSignature Language="F#" Value="member this.GetAllServices : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;'T&gt;" Usage="workflowRuntime.GetAllServices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">서비스 유형입니다.</typeparam>
        <summary>지정된 제네릭 형식을 구현하거나 해당 형식에서 파생되었으며 워크플로 런타임 엔진에 추가된 모든 서비스를 검색합니다.</summary>
        <returns>지정된 제네릭 형식을 구현하거나 해당 형식에서 파생된 서비스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 빈 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>은 지정된 제네릭 형식을 구현하거나 해당 형식에서 파생된 서비스가 워크플로 런타임 엔진에 추가되지 않았음을 나타냅니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Workflow.Runtime.WorkflowRuntime> 개체에서 지정된 유형의 모든 서비스를 검색하는 방법을 보여 줍니다.  
  
 [!code-csharp[WF_Samples#6](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#6)]
 [!code-vb[WF_Samples#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" />이 삭제된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetLoadedWorkflows">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetLoadedWorkflows" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLoadedWorkflows () As ReadOnlyCollection(Of WorkflowInstance)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::Runtime::WorkflowInstance ^&gt; ^ GetLoadedWorkflows();" />
      <MemberSignature Language="F#" Value="member this.GetLoadedWorkflows : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt;" Usage="workflowRuntime.GetLoadedWorkflows " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 메모리에 로드된 모든 워크플로 인스턴스를 포함하는 컬렉션을 가져옵니다.</summary>
        <returns>현재 메모리에 로드된 각 워크플로 인스턴스에 대한 <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>와 달리 이 메서드는 런타임이 시작되지 않은 경우 <xref:System.InvalidOperationException>을 throw하지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Workflow.Runtime.WorkflowRuntime> 개체에서 로드된 워크플로 컬렉션을 검색하는 방법을 보여 줍니다.  
  
 [!code-csharp[WF_Samples#18](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#18)]
 [!code-vb[WF_Samples#18](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" />이 삭제된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj&#xA;override this.GetService : Type -&gt; obj" Usage="workflowRuntime.GetService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">검색할 서비스의 <see cref="T:System.Type" />입니다.</param>
        <summary>워크플로 런타임 엔진에서 지정된 <see cref="T:System.Type" />의 서비스를 검색합니다.</summary>
        <returns>지정된 <see cref="T:System.Type" />의 서비스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정된 <xref:System.Workflow.Runtime.WorkflowRuntime.GetService%2A>에 대한 서비스가 여러 개 있으면 <xref:System.InvalidOperationException>에서 <xref:System.Type>을 throw합니다. 따라서 <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A>에 지정된 형식의 서비스가 여러 개 있을 수 있는 경우 <xref:System.Workflow.Runtime.WorkflowRuntime>의 오버로드된 메서드 중 하나를 사용해야 합니다. 예를 들어 워크플로 런타임 엔진에는 여러 개의 추적 서비스가 있을 수 있습니다. <xref:System.Workflow.Runtime.Tracking.TrackingService> 기본 클래스를 지정하여 추적 서비스를 요청하면 예외가 throw될 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="serviceType" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" />이 이미 삭제된 경우</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="serviceType" /> 형식의 서비스가 여러 개 있는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetService&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetService&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetService();" />
      <MemberSignature Language="F#" Value="member this.GetService : unit -&gt; 'T" Usage="workflowRuntime.GetService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">서비스 유형입니다.</typeparam>
        <summary>워크플로 런타임 엔진에서 지정된 제네릭 형식의 서비스를 검색합니다.</summary>
        <returns>지정된 제네릭 형식의 단일 서비스입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정된 제네릭 형식에 대한 서비스가 여러 개 있으면 <xref:System.Workflow.Runtime.WorkflowRuntime.GetService%2A>에서 <xref:System.InvalidOperationException>을 throw합니다. 따라서 <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A>에 해당 제네릭 형식의 서비스가 여러 개 있을 수 있는 경우 <xref:System.Workflow.Runtime.WorkflowRuntime>의 오버로드된 메서드 중 하나를 사용해야 합니다. 예를 들어 워크플로 런타임 엔진에는 여러 개의 추적 서비스가 있을 수 있습니다. <xref:System.Workflow.Runtime.Tracking.TrackingService> 기본 클래스를 지정하여 추적 서비스를 요청하면 예외가 throw될 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Workflow.Runtime.WorkflowRuntime> 개체에서 단일 서비스, 이 경우 <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService> 유형의 서비스를 검색하는 방법을 보여 줍니다. 이 예제에서는 합니다 [Workflow Threading 샘플](https://go.microsoft.com/fwlink/?LinkId=157350)합니다.  
  
 [!code-csharp[WF_Samples#28](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#28)]
 [!code-vb[WF_Samples#28](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" />이 이미 삭제된 경우</exception>
        <exception cref="T:System.InvalidOperationException">제네릭 형식의 서비스가 여러 개 있는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance GetWorkflow (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance GetWorkflow(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflow (instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ GetWorkflow(Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.GetWorkflow : Guid -&gt; System.Workflow.Runtime.WorkflowInstance" Usage="workflowRuntime.GetWorkflow instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId">워크플로 인스턴스의 <see cref="T:System.Guid" />입니다.</param>
        <summary>지정된 <see cref="T:System.Guid" />가 있는 워크플로 인스턴스를 검색합니다.</summary>
        <returns>지정한 <see cref="T:System.Workflow.Runtime.WorkflowInstance" />가 있는 <see cref="T:System.Guid" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `instanceId`가 현재 메모리에 없는 워크플로 인스턴스를 지정하면 워크플로 인스턴스가 메모리에 로드되고 실행이 예약됩니다. 예를 들어 워크플로 인스턴스가 중단된 후에는 <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>를 호출하여 워크플로 인스턴스를 다시 메모리에 로드할 수 있습니다. 이 경우 워크플로 인스턴스의 마지막으로 지속된 상태가 지속성 서비스에 의해 메모리에 로드됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 `ReloadWorkflow` 메서드를 호출하는 <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> 메서드를 보여 줍니다. `ReloadWorkflow` 메서드는 `Runtime` 클래스의 모든 메서드, 속성 및 이벤트에 액세스하는 <xref:System.Workflow.Runtime.WorkflowRuntime> 속성이 있는 더 큰 클래스의 일부입니다.  
  
 일부인이 코드 예제는 [Custom Persistence Service 샘플](https://go.microsoft.com/fwlink/?LinkId=157351) 샘플입니다.  
  
> [!NOTE]
>  이 예제에서 <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> 호출은 <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> 및 <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> 메서드가 동일한 내부 도우미 메서드를 사용하여 워크플로 인스턴스를 메모리에 로드하므로 중복됩니다.  
  
 [!code-csharp[WF_Samples#265](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#265)]
 [!code-vb[WF_Samples#265](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#265)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">워크플로 런타임이 시작되지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="IsStarted">
      <MemberSignature Language="C#" Value="public bool IsStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStarted" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStarted : bool" Usage="System.Workflow.Runtime.WorkflowRuntime.IsStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>워크플로 런타임 엔진이 시작되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>워크플로 런타임 엔진이 시작되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>는 워크플로 런타임 엔진 서비스가 실행 중임을 나타냅니다. <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> 됩니다 `false` 호스트 호출할 때까지 <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>입니다. 또한 호스트가 `true`을 호출할 때까지 <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>로 유지됩니다.  
  
> [!NOTE]
>  실행되는 동안에는 워크플로 런타임 엔진에 핵심 서비스를 추가할 수 없습니다. 핵심 서비스는 <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> 클래스, <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> 클래스, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> 클래스 및 <xref:System.Workflow.Runtime.Tracking.TrackingService> 클래스에서 파생된 서비스입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> 개체의 <xref:System.Workflow.Runtime.WorkflowRuntime> 속성에 액세스하는 방법을 보여 줍니다. 이 예제에서 런타임이 시작되면 메시지가 콘솔에 표시됩니다.  
  
 [!code-csharp[WF_Samples#21](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#21)]
 [!code-vb[WF_Samples#21](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowRuntime.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Workflow.Runtime.WorkflowRuntime.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Workflow.Runtime.WorkflowRuntime" />과 연결된 이름을 가져오거나 설정합니다.</summary>
        <value>이 <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />과 연결된 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정할 수 없습니다 <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A> 하는 동안 워크플로 런타임 엔진이 실행 되 고 (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> 는 `true`).  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A> 개체의 <xref:System.Workflow.Runtime.WorkflowRuntime> 속성에 액세스하는 방법을 보여 줍니다. 이 예제에서 런타임 이름은 "Main Runtime"으로 설정됩니다.  
  
 [!code-csharp[WF_Samples#20](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#20)]
 [!code-vb[WF_Samples#20](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">삭제된 <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" />에 <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />을 설정하려고 시도하는 경우</exception>
        <exception cref="T:System.InvalidOperationException">워크플로 런타임 엔진이 실행되는 동안 <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" />을 설정하려고 시도하는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveService">
      <MemberSignature Language="C#" Value="public void RemoveService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveService(object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.RemoveService(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveService (service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveService(System::Object ^ service);" />
      <MemberSignature Language="F#" Value="member this.RemoveService : obj -&gt; unit" Usage="workflowRuntime.RemoveService service" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">제거할 서비스를 나타내는 개체입니다.</param>
        <summary>워크플로 런타임 엔진에서 지정된 서비스를 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 런타임 엔진이 실행 중일 때에 핵심 서비스를 제거할 수 없습니다 (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> 는 `true`). 핵심 서비스는 <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> 클래스, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> 클래스, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> 클래스 및 <xref:System.Workflow.Runtime.Tracking.TrackingService> 클래스에서 파생된 서비스입니다.  `service`가 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 클래스에서 파생되는 경우 <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>가 구현하는 `service` 메서드를 호출합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>를 <xref:System.Workflow.Runtime.WorkflowRuntime>에 추가 및 제거합니다.  
  
 [!code-csharp[WF_Samples#16](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#16)]
 [!code-vb[WF_Samples#16](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="service" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" />이 이미 삭제된 경우</exception>
        <exception cref="T:System.InvalidOperationException">워크플로 런타임 엔진이 시작되었고(<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" />가 <see langword="true" />인 경우) <paramref name="service" />가 핵심 서비스인 경우  
  
또는 
 <paramref name="service" />가 워크플로 런타임 엔진에 등록되지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ServicesExceptionNotHandled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" />
      <MemberSignature Language="VB.NET" Value="Public Event ServicesExceptionNotHandled As EventHandler(Of ServicesExceptionNotHandledEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::ServicesExceptionNotHandledEventArgs ^&gt; ^ ServicesExceptionNotHandled;" />
      <MemberSignature Language="F#" Value="member this.ServicesExceptionNotHandled : EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; " Usage="member this.ServicesExceptionNotHandled : System.EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> 클래스에서 파생된 서비스가 <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)" />를 호출할 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 클래스에서 파생된 서비스는 처리할 수 없었던 예외가 실행 중에 발생했음을 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> 이벤트에 대한 구독자에 알리기 위해 <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> 메서드를 호출할 수 있습니다. 복구 메커니즘을 구현하기 위해 이 이벤트를 구독할 수 있습니다.  
  
 워크플로 런타임 엔진이 워크플로 인스턴스를 만들기 전에 예외가 발생하면 이 이벤트가 발생합니다. 이 시나리오에서 호스트 애플리케이션에 예외가 발생했다고 알리는 유일한 방법은 이 이벤트를 발생시키는 것입니다. 그러나 워크플로 런타임 엔진이 직접 이 이벤트를 호출하지는 않습니다. 대신 워크플로 런타임 엔진은 예외를 워크플로 인스턴스로 전달하거나, 인스턴스가 없는 경우 호출자(이 경우 이 이벤트를 발생시킨 서비스)에 예외를 다시 throw합니다. 사용자가 직접 지속성 또는 스케줄러 서비스를 만드는 경우 기본 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> 메서드를 통해 이 이벤트를 구현해야 합니다.  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> 이벤트의 경우 발신자는 <xref:System.Workflow.Runtime.WorkflowRuntime>을 포함하고 <xref:System.Workflow.Runtime.WorkflowEventArgs>는 서비스를 사용하고 있던 워크플로 인스턴스의 <xref:System.Guid>와 처리할 수 없었던 <xref:System.Exception>을 포함합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [사용 이벤트](https://go.microsoft.com/fwlink/?LinkID=157352)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. 이 코드에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled>를 이벤트 처리기인 `OnExceptionNotHandled` 메서드에 연결합니다.  
  
 일부인이 코드 예제는 [Custom Persistence Service 샘플](https://go.microsoft.com/fwlink/?LinkID=157351)합니다.  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Started">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.Started" />
      <MemberSignature Language="VB.NET" Value="Public Event Started As EventHandler(Of WorkflowRuntimeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowRuntimeEventArgs ^&gt; ^ Started;" />
      <MemberSignature Language="F#" Value="member this.Started : EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " Usage="member this.Started : System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>워크플로 런타임 엔진이 시작될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> 메서드를 발생 시킵니다 합니다 <xref:System.Workflow.Runtime.WorkflowRuntime.Started> 이벤트가 워크플로 런타임 엔진의 핵심 서비스 구성 유효성 검사가 완료 후 호출에 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 각에서 파생 되는 서비스에서 구현 하는 메서드를 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 클래스 설정 <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> 에 `true`입니다. 워크플로 런타임 엔진이 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 클래스에서 파생된 서비스를 시작하는 순서는 경우에 따라 달라지며, 이러한 워크플로 런타임 엔진 서비스 중 일부는 다른 서비스가 제공하는 기능이 있어야만 시작 작업을 완료할 수 있습니다. 워크플로 런타임 엔진 서비스는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A?displayProperty=nameWithType> 이벤트가 발생할 때 다른 워크플로 런타임 엔진 서비스의 지원이 필요한 최종 시작 작업을 수행하기 위해 <xref:System.Workflow.Runtime.WorkflowRuntime.Started> 메서드를 재정의할 수 있습니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [사용 이벤트](https://go.microsoft.com/fwlink/?LinkID=157352)합니다.  
  
   
  
## Examples  
 다음 예제에서는 이벤트 처리기가 <xref:System.Workflow.Runtime.WorkflowRuntime.Started>의 <xref:System.Workflow.Runtime.WorkflowRuntime> 이벤트에 추가됩니다. 이 예제에서 처리기는 단순한 메시지를 콘솔에 표시하는 익명 메서드입니다.  
  
 [!code-csharp[WF_Samples#15](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#15)]
 [!code-vb[WF_Samples#15](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartRuntime">
      <MemberSignature Language="C#" Value="public void StartRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.StartRuntime" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartRuntime ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartRuntime();" />
      <MemberSignature Language="F#" Value="member this.StartRuntime : unit -&gt; unit" Usage="workflowRuntime.StartRuntime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>워크플로 런타임 엔진과 워크플로 런타임 엔진 서비스를 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 올바른 핵심 서비스 집합이 있는지 확인한 다음 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 클래스에서 파생된 모든 서비스를 시작합니다.  각 핵심 서비스 중 하나만 있어야: 워크플로 `CommitWorkBatch` 에서 파생 된 서비스를 <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> 에서 파생 된 기본 클래스 및 scheduler 서비스는 <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> 기본 클래스입니다.  이러한 핵심 서비스 중 하나 또는 모두 없는 경우 워크플로 런타임 엔진에서 해당 기본 서비스를 제공 합니다. <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> 워크플로에 대 한 `CommitWorkBatch` 서비스 및 <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService> scheduler 서비스에 대 한 합니다. 지속성 서비스는 선택 사항이지만 하나의 지속성 서비스만 있을 수 있습니다. 서비스 구성의 유효성을 검사한 후 <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>은 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> 클래스에서 파생된 모든 서비스에서 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>를 호출합니다.  마지막으로 워크플로 런타임 엔진은 <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>를 설정하고 <xref:System.Workflow.Runtime.WorkflowRuntime.Started> 이벤트를 발생시킵니다.  
  
 워크플로 런타임 엔진이 시작된 후에는 핵심 서비스를 추가하거나 제거할 수 없습니다. 핵심 서비스는 <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> 클래스, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> 클래스, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> 클래스 및 <xref:System.Workflow.Runtime.Tracking.TrackingService> 클래스에서 파생된 서비스입니다.  워크플로 런타임 엔진이 실행되는 동안 <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>을 호출하면 작업이 수행되지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. 이 코드에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>가 <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> 인스턴스를 만들고 <xref:System.Workflow.Runtime.WorkflowRuntime>를 호출하여 서비스를 런타임에 추가한 후 <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>을 호출합니다. 또한 다른 처리가 발생하기 전에 <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>을 호출합니다.  
  
 일부인이 코드 예제는 [워크플로 취소 하면](https://go.microsoft.com/fwlink/?LinkId=157346) 샘플입니다.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" />이 삭제된 경우</exception>
        <exception cref="T:System.InvalidOperationException">둘 이상의 서비스 워크플로 <see langword="CommitWorkBatch" /> 서비스가 이 <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />에 등록된 경우  
  
또는 
둘 이상의 스케줄러 서비스가 이 <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />에 등록된 경우  
  
또는 
둘 이상의 지속성 서비스가 이 <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />에 등록된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Stopped">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" />
      <MemberSignature Language="VB.NET" Value="Public Event Stopped As EventHandler(Of WorkflowRuntimeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowRuntimeEventArgs ^&gt; ^ Stopped;" />
      <MemberSignature Language="F#" Value="member this.Stopped : EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " Usage="member this.Stopped : System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>워크플로 런타임 엔진이 중지될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> 메서드는 <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> 클래스에서 파생된 각 서비스가 구현하는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> 메서드를 호출한 후 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 이벤트를 발생시킵니다.  이러한 워크플로 런타임 엔진 서비스가 중지되는 순서는 경우에 따라 달라지며, 이러한 서비스 중 다른 서비스에서 사용되는 기능이 있는 일부 서비스는 다른 서비스도 중지될 때까지 해당 기능을 유지해야 할 수 있습니다. 이러한 서비스는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A?displayProperty=nameWithType> 이벤트가 발생할 때 나머지 종료 논리를 수행하기 위해 <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> 메서드를 재정의할 수 있습니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [사용 이벤트](https://go.microsoft.com/fwlink/?LinkID=157352)합니다.  
  
   
  
## Examples  
 다음 예제에서는 이벤트 처리기가 <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped>의 <xref:System.Workflow.Runtime.WorkflowRuntime> 이벤트에 추가됩니다. 이 예제에서 처리기는 단순한 메시지를 콘솔에 표시하는 익명 메서드입니다.  
  
 [!code-csharp[WF_Samples#14](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#14)]
 [!code-vb[WF_Samples#14](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopRuntime">
      <MemberSignature Language="C#" Value="public void StopRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.StopRuntime" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopRuntime ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopRuntime();" />
      <MemberSignature Language="F#" Value="member this.StopRuntime : unit -&gt; unit" Usage="workflowRuntime.StopRuntime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>워크플로 런타임 엔진과 런타임 서비스를 중지합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하면 워크플로 런타임 엔진이 각 워크플로 인스턴스 언로드, 모든에서 파생 되는 서비스를 중지 하는 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> 클래스에서 <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> 하 `false`, 시키고는 <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> 이벤트입니다.  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime>을 올바르게 종료하려면 <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>를 호출하기 전에 <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>을 호출해야 합니다.  
  
 자세한 내용은 <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> 메서드를 참조하세요.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>은 호스트가 런타임과 연결된 다른 모든 처리를 완료한 후에 호출됩니다.  
  
 일부인이 코드 예제는 [워크플로 취소 하면](https://go.microsoft.com/fwlink/?LinkId=157346) 샘플입니다.  
  
 [!code-csharp[WF_Samples#259](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#259)]
 [!code-vb[WF_Samples#259](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#259)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Workflow.Runtime.WorkflowRuntime" />이 이미 삭제된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="WorkflowAborted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowAborted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowAborted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowAborted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowAborted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>워크플로 인스턴스가 중단될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted>는 워크플로 인스턴스에 대해 보류 중인 모든 작업이 지워진 후, 워크플로 인스턴스가 메모리에서 무효화되기 전에 발생합니다. <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A?displayProperty=nameWithType>를 호출하여 워크플로 인스턴스를 중단할 수 있습니다.  
  
 이 이벤트의 경우 발신자는 <xref:System.Workflow.Runtime.WorkflowRuntime>을 포함하고 <xref:System.Workflow.Runtime.WorkflowEventArgs>는 이벤트와 연결된 <xref:System.Workflow.Runtime.WorkflowInstance>를 포함합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [사용 이벤트](https://go.microsoft.com/fwlink/?LinkId=157352)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. 이 코드에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted>를 이벤트 처리기인 `OnWorkflowAborted` 메서드에 연결합니다.  
  
 일부인이 코드 예제는 [워크플로 취소 하면](https://go.microsoft.com/fwlink/?LinkID=157346) 샘플입니다.  
  
 [!code-csharp[WF_Samples#141](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#141)]
 [!code-vb[WF_Samples#141](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#141)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowCompleted As EventHandler(Of WorkflowCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowCompletedEventArgs ^&gt; ^ WorkflowCompleted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowCompleted : EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; " Usage="member this.WorkflowCompleted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>워크플로 인스턴스가 완료될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted>는 워크플로 인스턴스가 완료된 후, 인스턴스가 메모리에서 무효화되기 전에 발생합니다.  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> 이벤트의 경우 발신자는 <xref:System.Workflow.Runtime.WorkflowRuntime>을 포함하고 <xref:System.Workflow.Runtime.WorkflowCompletedEventArgs>는 <xref:System.Workflow.Runtime.WorkflowInstance>와 해당 출력 매개 변수를 포함합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [사용 이벤트](https://go.microsoft.com/fwlink/?LinkId=157352)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. 이 코드에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted>를 이벤트 처리기인 `OnWorkflowCompleted` 메서드에 연결합니다.  
  
 일부인이 코드 예제는 [워크플로 취소 하면](https://go.microsoft.com/fwlink/?LinkId=157346) 샘플입니다.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowCreated As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowCreated;" />
      <MemberSignature Language="F#" Value="member this.WorkflowCreated : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowCreated : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>워크플로 인스턴스가 만들어질 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 런타임 엔진은 워크플로 인스턴스가 완전히 생성된 후, 활동이 처리되기 전에 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated> 이벤트를 발생시킵니다. 이 이벤트의 경우 발신자는 <xref:System.Workflow.Runtime.WorkflowRuntime>을 포함하고 <xref:System.Workflow.Runtime.WorkflowEventArgs>는 이벤트와 연결된 <xref:System.Workflow.Runtime.WorkflowInstance>를 포함합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [사용 이벤트](https://go.microsoft.com/fwlink/?LinkId=157352)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. 이 코드에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated>를 이벤트 처리기인 `OnWorkflowCreated` 메서드에 연결합니다.  
  
 일부인이 코드 예제는 [Custom Persistence Service 샘플](https://go.microsoft.com/fwlink/?LinkID=15735)합니다.  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowIdled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowIdled As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowIdled;" />
      <MemberSignature Language="F#" Value="member this.WorkflowIdled : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowIdled : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>워크플로 인스턴스가 유휴 상태에 들어갈 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 런타임 엔진은 예를 들어 워크플로가 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> 활동이 완료될 동안 기다릴 때와 같이 워크플로 인스턴스가 유휴 상태에 들어갈 때 <xref:System.Workflow.Activities.DelayActivity> 이벤트를 발생시킵니다.  
  
 이 이벤트의 경우 발신자는 <xref:System.Workflow.Runtime.WorkflowRuntime>을 포함하고 <xref:System.Workflow.Runtime.WorkflowEventArgs>는 이벤트와 연결된 <xref:System.Workflow.Runtime.WorkflowInstance>를 포함합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [사용 이벤트](https://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67(v=vs.100))합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. 이 코드에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled>를 이벤트 처리기인 `OnWorkflowIdled` 메서드에 연결합니다.  
  
 일부인이 코드 예제는 [워크플로 취소 하면](https://go.microsoft.com/fwlink/?LinkID=157346) 샘플입니다.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowLoaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowLoaded As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowLoaded;" />
      <MemberSignature Language="F#" Value="member this.WorkflowLoaded : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowLoaded : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>워크플로 인스턴스가 메모리에 로드될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>는 지속성 서비스가 워크플로 인스턴스를 복원한 후, 워크플로 런타임 엔진이 활동 실행을 시작하기 전에 발생합니다.  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> 이벤트의 경우 발신자는 <xref:System.Workflow.Runtime.WorkflowRuntime>을 포함하고 <xref:System.Workflow.Runtime.WorkflowEventArgs>는 이벤트와 연결된 <xref:System.Workflow.Runtime.WorkflowInstance>를 포함합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [사용 이벤트](https://go.microsoft.com/fwlink/?LinkID=157352)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. 이 코드에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>를 이벤트 처리기인 `OnWorkflowLoad` 메서드에 연결합니다.  
  
 일부인이 코드 예제는 [Custom Persistence Service](https://go.microsoft.com/fwlink/?LinkID=157351) 샘플입니다.  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowPersisted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowPersisted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowPersisted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowPersisted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowPersisted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>워크플로 인스턴스의 상태가 지속될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 인스턴스는 여러 가지 이유로 지속될 수 있습니다. 예를 들어 호스트가 워크플로 인스턴스에서 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType>를 호출할 수도 있고, 인스턴스가 유휴 상태가 되거나 원자성 범위가 완료되어 워크플로 런타임 엔진이 워크플로 인스턴스를 지속할 수도 있습니다. <xref:System.Workflow.Runtime.WorkflowRuntime>에 지속성 서비스가 있으면 런타임에서는 워크플로 인스턴스의 상태가 메모리에 저장된 후 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted>를 발생시킵니다. 지속성 서비스가 없어도 이 이벤트가 발생하지만 인스턴스 상태는 저장되지 않습니다. 워크플로 인스턴스가 언로드되는 중이어서 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> 이벤트가 발생하는 경우 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> 이벤트가 뒤이어 발생합니다.  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> 이벤트의 경우 발신자는 <xref:System.Workflow.Runtime.WorkflowRuntime>을 포함하고 <xref:System.Workflow.Runtime.WorkflowEventArgs>는 이벤트와 연결된 <xref:System.Workflow.Runtime.WorkflowInstance>를 포함합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [사용 이벤트](https://go.microsoft.com/fwlink/?LinkID=157352)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. 이 코드에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted>를 이벤트 처리기인 `OnWorkflowPersisted` 메서드에 연결합니다.  
  
 일부인이 코드 예제는 [Custom Persistence Service 샘플](https://go.microsoft.com/fwlink/?LinkID=15735)합니다.  
  
 [!code-csharp[WF_Samples#279](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#279)]
 [!code-vb[WF_Samples#279](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#279)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowResumed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowResumed As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowResumed;" />
      <MemberSignature Language="F#" Value="member this.WorkflowResumed : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowResumed : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>워크플로 인스턴스의 실행이 일시 중단 후에 계속될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 런타임 엔진은 워크플로 인스턴스가 예약되기 직전에 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> 이벤트를 발생시킵니다. <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> 이벤트는 일반적으로 <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType>에 대한 명시적 호출로 인해 발생합니다. 그러나 워크플로 런타임 엔진에서는 예를 들어 워크플로 변경 내용을 적용하는 등의 작업을 수행하기 위해 인스턴스를 일시적으로 중단할 수 있습니다. 이 경우 런타임에서 해당 작업을 수행한 후 워크플로 인스턴스의 실행을 다시 시작하면 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> 이벤트가 발생합니다.  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> 이벤트의 경우 발신자는 <xref:System.Workflow.Runtime.WorkflowRuntime>을 포함하고 <xref:System.Workflow.Runtime.WorkflowEventArgs>는 이벤트와 연결된 <xref:System.Workflow.Runtime.WorkflowInstance>를 포함합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [사용 이벤트](https://go.microsoft.com/fwlink/?LinkID=157352)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. 이 코드에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed>를 이벤트 처리기인 `OnWorkflowResume` 메서드에 연결합니다.  
  
 일부인이 코드 예제는 [Suspend and Terminate 샘플](https://go.microsoft.com/fwlink/?LinkId=157402)합니다.  
  
 [!code-csharp[WF_Samples#171](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#171)]
 [!code-vb[WF_Samples#171](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#171)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowStarted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowStarted;" />
      <MemberSignature Language="F#" Value="member this.WorkflowStarted : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowStarted : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>워크플로 인스턴스가 시작된 경우에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 런타임 엔진은 실행할 루트 활동을 예약하여 워크플로 인스턴스가 시작된 후에 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted> 이벤트를 발생시킵니다. 이 이벤트의 경우 발신자는 <xref:System.Workflow.Runtime.WorkflowRuntime>을 포함하고 <xref:System.Workflow.Runtime.WorkflowEventArgs>는 이벤트와 연결된 <xref:System.Workflow.Runtime.WorkflowInstance>를 포함합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [사용 이벤트](https://go.microsoft.com/fwlink/?LinkID=157352)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. 이 코드에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted>를 이벤트 처리기인 `OnWorkflowStarted` 메서드에 연결합니다.  
  
 일부인이 코드 예제는 [Host Communication 샘플](https://go.microsoft.com/fwlink/?LinkId=157406)합니다.  
  
 [!code-csharp[WF_Samples#297](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets38.cs#297)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowSuspended">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowSuspended As EventHandler(Of WorkflowSuspendedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowSuspendedEventArgs ^&gt; ^ WorkflowSuspended;" />
      <MemberSignature Language="F#" Value="member this.WorkflowSuspended : EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; " Usage="member this.WorkflowSuspended : System.EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>워크플로 인스턴스가 일시 중단될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 인스턴스는 호스트에서 <xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A> 메서드 호출을 통해, <xref:System.Workflow.ComponentModel.SuspendActivity> 활동에 의해, 또는 워크플로 런타임 엔진에 의해 암시적으로 일시 중단될 수 있습니다. 예를 들어 워크플로 런타임 엔진은 동적 변경 내용을 인스턴스에 적용할 때 인스턴스를 일시 중단합니다.  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> 이벤트의 경우 발신자는 <xref:System.Workflow.Runtime.WorkflowRuntime>을 포함하고 <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>는 인스턴스가 일시 중단된 이유를 설명하는 문자열과 <xref:System.Workflow.Runtime.WorkflowInstance>를 포함합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [사용 이벤트](https://go.microsoft.com/fwlink/?LinkID=157352)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. 이 코드에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended>를 이벤트 처리기인 `OnWorkflowSuspended` 메서드에 연결합니다.  
  
 일부인이 코드 예제는 [Suspend and Terminate 샘플](https://go.microsoft.com/fwlink/?LinkID=157402)합니다.  
  
 [!code-csharp[WF_Samples#170](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#170)]
 [!code-vb[WF_Samples#170](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowTerminated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowTerminated As EventHandler(Of WorkflowTerminatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowTerminatedEventArgs ^&gt; ^ WorkflowTerminated;" />
      <MemberSignature Language="F#" Value="member this.WorkflowTerminated : EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; " Usage="member this.WorkflowTerminated : System.EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>워크플로 인스턴스가 종료될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로는 호스트에서 <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> 메서드 호출을 통해, <xref:System.Workflow.ComponentModel.TerminateActivity> 활동에 의해, 또는 처리되지 않은 예외가 발생할 때 워크플로 런타임 엔진에 의해 종료될 수 있습니다. 워크플로 런타임 엔진은 워크플로 인스턴스가 종료된 후, 메모리에서 무효화되기 전에 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> 이벤트를 발생시킵니다.  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> 이벤트의 경우 발신자는 <xref:System.Workflow.Runtime.WorkflowRuntime>을 포함하고 <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>는 <xref:System.Workflow.Runtime.WorkflowInstance> 및 인스턴스가 종료된 이유에 대한 정보를 <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs.Exception%2A?displayProperty=nameWithType> 속성에 포함합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [사용 이벤트](https://go.microsoft.com/fwlink/?LinkID=157352)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. 이 코드에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted>를 이벤트 처리기인 `OnWorkflowCompleted` 메서드에 연결합니다.  
  
 일부인이 코드 예제는 [워크플로 취소 하면](https://go.microsoft.com/fwlink/?LinkID=157346) 샘플입니다.  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowUnloaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowUnloaded As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowUnloaded;" />
      <MemberSignature Language="F#" Value="member this.WorkflowUnloaded : EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " Usage="member this.WorkflowUnloaded : System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>워크플로 인스턴스가 메모리에서 언로드될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 워크플로 인스턴스는 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>에 대한 명시적 호출에 의해, 또는 워크플로 런타임 엔진에서 해당 의미 체계에 따라 암시적으로 언로드될 수 있습니다. 인스턴스가 유휴 상태가 되 고 런타임에 경우 워크플로 런타임 엔진에서 워크플로 인스턴스를 언로드합니다 하는 예를 들어, 한 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> 를 추가 <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle%2A> 는 `true`합니다.  
  
 워크플로 런타임 엔진은  
  
 워크플로 인스턴스의 상태가 성공적으로 지속된 후, 인스턴스가 메모리에서 무효화되기 전에 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> 이벤트를 발생시킵니다. 따라서 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> 이벤트는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> 이벤트보다 먼저 발생합니다.  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> 이벤트의 경우 발신자는 <xref:System.Workflow.Runtime.WorkflowRuntime>을 포함하고 <xref:System.Workflow.Runtime.WorkflowEventArgs>는 이벤트와 연결된 <xref:System.Workflow.Runtime.WorkflowInstance>를 포함합니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 하세요. [사용 이벤트](https://go.microsoft.com/fwlink/?LinkID=157352)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 워크플로 호스트에서 <xref:System.Workflow.Runtime.WorkflowRuntime> 기능을 사용하는 방법을 보여 줍니다. 이 코드에서는 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>를 이벤트 처리기인 `OnWorkflowUnload` 메서드에 연결합니다.  
  
 일부인이 코드 예제는 [Custom Persistence Service 샘플](https://go.microsoft.com/fwlink/?LinkID=157351)합니다.  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>