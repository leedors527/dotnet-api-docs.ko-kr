<Type Name="XmlSchemaInference" FullName="System.Xml.Schema.XmlSchemaInference">
  <Metadata><Meta Name="ms.openlocfilehash" Value="afb260928708122a09b5cd118a07269776a89c96" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58709229" /></Metadata><TypeSignature Language="C#" Value="public sealed class XmlSchemaInference" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlSchemaInference extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaInference" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlSchemaInference" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaInference sealed" />
  <TypeSignature Language="F#" Value="type XmlSchemaInference = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>XML 문서에서 XSD(XML 스키마 정의 언어) 스키마를 유추합니다. <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   알 수 없거나 신뢰할 수 없는 출처 또는 위치에서 스키마를 사용 하지 마세요. 이렇게 하면 코드의 보안이 손상 됩니다.  
> -   XML 스키마 (인라인 스키마 포함)는 서비스 거부 공격;에 기본적으로 취약 이러한 신뢰할 수 없는 시나리오에서 허용 하지 않습니다.  
> -   스키마 유효성 검사 오류 메시지 및 예외 콘텐츠 모델 또는 스키마 파일에 URI 경로 대 한 중요 한 정보를 노출할 수 있습니다. 신뢰할 수 없는 호출자에 게이 정보를 노출 하지 않도록 주의 해야 합니다.  
  
 <xref:System.Xml.Schema.XmlSchemaInference> 클래스는 <xref:System.Xml.Schema?displayProperty=nameWithType> 네임 스페이스를 사용 하면 XML 문서의 구조에서 XML 스키마 정의 언어 (XSD) 스키마를 유추할 수 있습니다. <xref:System.Xml.Schema.XmlSchemaInference> 클래스에서는 XML 문서의 유효성을 검사할 수 있는 XML 스키마를 출력합니다.  
  
 <xref:System.Xml.Schema.XmlSchemaInference> 클래스는 W3C XML 및 XML 스키마 표준을 지원 합니다. 새 스키마를 유추 하거나 기존 스키마를 구체화에 사용할 수 있습니다.  
  
   
  
## Examples  
 이 예제에서는 입력으로 XML 파일을 XML 예제를 확인할 수 있는 스키마를 생성 합니다.  
  
 [!code-cpp[XmlSchemaInferenceExamples#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaInferenceExamples/CPP/XmlSchemaInferenceExamples.cpp#1)]
 [!code-csharp[XmlSchemaInferenceExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaInferenceExamples/CS/XmlSchemaInferenceExamples.cs#1)]
 [!code-vb[XmlSchemaInferenceExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaInferenceExamples/VB/XmlSchemaInferenceExamples.vb#1)]  
  
 다음은 입력된 XML 파일입니다.  
  
 [!code-xml[XmlSchemaInferenceExamples#5](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/contosoBooks.xml#5)]  
  
 다음은 XML 문서에서 유추 된 스키마입니다.  
  
 [!code-xml[XmlSchemaInferenceExamples#6](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/contosoBooks.xsd#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaInference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaInference.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaInference();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaInference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InferSchema">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 XML 문서에서 XSD(XML 스키마 정의 언어) 스키마를 유추합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InferSchema">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet InferSchema (System.Xml.XmlReader instanceDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaSet InferSchema(class System.Xml.XmlReader instanceDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function InferSchema (instanceDocument As XmlReader) As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchemaSet ^ InferSchema(System::Xml::XmlReader ^ instanceDocument);" />
      <MemberSignature Language="F#" Value="member this.InferSchema : System.Xml.XmlReader -&gt; System.Xml.Schema.XmlSchemaSet" Usage="xmlSchemaInference.InferSchema instanceDocument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceDocument" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="instanceDocument">스키마를 유추할 XML 문서가 포함된 <see cref="T:System.Xml.XmlReader" /> 개체입니다.</param>
        <summary>지정된 <see cref="T:System.Xml.XmlReader" /> 개체에 포함된 XML 문서에서 XSD(XML 스키마 정의 언어) 스키마를 유추합니다.</summary>
        <returns>유추된 스키마가 포함된 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A> 유추 메서드 또는 XML에서 더 많은 W3C XML 스키마 정의 언어 (XSD) 스키마에 포함 된 문서 인스턴스는 <xref:System.Xml.XmlReader> 지정 된 개체입니다. 여러 스키마에서 생성 된 경우 여러 네임 스페이스의 요소와 특성을 포함 하는 XML 문서: 문서에 사용 되는 각 네임 스페이스에 대 한 합니다. 기본 스키마는 전체 XML 문서의 유효성을 검사할 수 있는 스키마 및 해당 대상 네임 스페이스는 XML 문서의 문서 요소의 네임 스페이스와 동일 합니다.  
  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A> 메서드.  
  
-   <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A> 모든 메서드가 무시 `xsi:type`를 `xsi:schemaLocation`, 또는 `xsi:noNamespaceSchemaLocation` XML 문서에는 특성입니다.  
  
-   경우는 <xref:System.Xml.XmlReader> 개체를 입력, 포함 된 형식 정보는 무시 됩니다.  
  
-   경우는 <xref:System.Xml.XmlReader> 개체가 XML 문서의 루트 요소가 없는 요소에 배치 되어 있는, 해당 요소에만 스키마를 유추 합니다. 경우는 <xref:System.Xml.XmlReader> 개체 요소에 배치 되지 않은 <xref:System.Xml.XmlReader.Read%2A> 메서드를 호출 합니다 <xref:System.Xml.XmlReader> 요소가 발견 될 때까지 매개 변수 (경우에 예를 들어 <xref:System.Xml.XmlReader.NodeType%2A> 는 <xref:System.Xml.XmlNodeType.Element>). 이 시점에서 유추 과정에서 해당 요소에서 시작 됩니다. 문서 끝까지 없는 요소가 발견 하는 경우는 <xref:System.ArgumentException> throw 됩니다.  
  
   
  
## Examples  
 이 예제에서는 입력으로 XML 파일을 XML 예제를 확인할 수 있는 스키마를 생성 합니다.  
  
 [!code-cpp[XmlSchemaInferenceExamples#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaInferenceExamples/CPP/XmlSchemaInferenceExamples.cpp#1)]
 [!code-csharp[XmlSchemaInferenceExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaInferenceExamples/CS/XmlSchemaInferenceExamples.cs#1)]
 [!code-vb[XmlSchemaInferenceExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaInferenceExamples/VB/XmlSchemaInferenceExamples.vb#1)]  
  
 다음은 입력된 XML 파일입니다.  
  
 [!code-xml[XmlSchemaInferenceExamples#5](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/contosoBooks.xml#5)]  
  
 다음은 XML 문서에서 유추 된 스키마입니다.  
  
 [!code-xml[XmlSchemaInferenceExamples#6](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/contosoBooks.xsd#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">XML 문서가 제대로 구성되지 않은 경우</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException"><see cref="T:System.Xml.XmlReader" /> 개체가 루트 노드 또는 요소에 없는 경우. 스키마를 유추하는 동안 오류가 발생합니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="InferSchema">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet InferSchema (System.Xml.XmlReader instanceDocument, System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaSet InferSchema(class System.Xml.XmlReader instanceDocument, class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function InferSchema (instanceDocument As XmlReader, schemas As XmlSchemaSet) As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchemaSet ^ InferSchema(System::Xml::XmlReader ^ instanceDocument, System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.InferSchema : System.Xml.XmlReader * System.Xml.Schema.XmlSchemaSet -&gt; System.Xml.Schema.XmlSchemaSet" Usage="xmlSchemaInference.InferSchema (instanceDocument, schemas)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceDocument" Type="System.Xml.XmlReader" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="instanceDocument">스키마를 유추할 XML 문서가 포함된 <see cref="T:System.Xml.XmlReader" /> 개체입니다.</param>
        <param name="schemas">유추된 스키마를 구체화하는 데 사용할 기존 스키마가 포함된 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다.</param>
        <summary>지정된 <see cref="T:System.Xml.XmlReader" /> 개체에 포함된 XML 문서에서 XSD(XML 스키마 정의 언어) 스키마를 유추한 후 이 스키마를 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체에서 대상 네임스페이스가 같은 기존 스키마를 사용하여 구체화합니다.</summary>
        <returns>유추된 스키마가 포함된 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A> 유추 메서드 또는 XML에서 더 많은 W3C XML 스키마 정의 언어 (XSD) 스키마에 포함 된 문서 인스턴스는 <xref:System.Xml.XmlReader> 지정 된 개체입니다. 여러 스키마 생성 된 XML 문서의 여러 네임 스페이스의 요소와 특성에 있으면: 문서에 사용 되는 각 네임 스페이스에 대 한 합니다. 기본 스키마는 전체 XML 문서의 유효성을 검사할 수 있는 스키마 및 해당 대상 네임 스페이스는 XML 문서의 문서 요소의 네임 스페이스와 동일 합니다.  
  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A> 메서드.  
  
-   <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A> 모든 메서드가 무시 `xsi:type`를 `xsi:schemaLocation`, 또는 `xsi:noNamespaceSchemaLocation` XML 문서에는 특성입니다.  
  
-   경우는 <xref:System.Xml.XmlReader> 개체를 입력, 포함 된 형식 정보는 무시 됩니다.  
  
-   경우는 <xref:System.Xml.XmlReader> 개체가 XML 문서의 루트 요소가 없는 요소에 배치 되어 있는, 해당 요소에만 스키마를 유추 합니다. 경우는 <xref:System.Xml.XmlReader> 개체 요소에 배치 되지 않은 <xref:System.Xml.XmlReader.Read%2A> 메서드를 호출 합니다 <xref:System.Xml.XmlReader> 요소가 발견 될 때까지 매개 변수 (경우에 예를 들어 <xref:System.Xml.XmlReader.NodeType%2A> 는 <xref:System.Xml.XmlNodeType.Element>). 이 시점에서 유추 과정에서 해당 요소에서 시작 됩니다. 문서 끝까지 없는 요소가 발견 하는 경우는 <xref:System.ArgumentException> throw 됩니다.  
  
-   경우는 <xref:System.Xml.Schema.XmlSchemaSet> 개체는 요소를 매개 변수로 전달 되는 <xref:System.Xml.XmlReader> 개체가 배치 되어 있는 스키마 중 하나에 정의 된를 <xref:System.Xml.Schema.XmlSchemaSet>, 유추 된 스키마에는 기존 스키마를 구체화 하는 <xref:System.Xml.Schema.XmlSchemaSet> 매개 변수 동일한 대상 네임 스페이스; 그렇지 않으면 네임 스페이스에 대 한 새 스키마를 유추 됩니다.  
  
   
  
## Examples  
 다음 예제 코드에서는 XML 문서를 입력으로 1을 1 XML 문서 유효성을 검사할 수 있는 스키마를 생성 합니다. 예제 코드를 다음 XML 문서 2 걸리고 2 XML 문서에 있는 변경 내용에 따라 1, XML 문서에서 생성 된 스키마를 구체화 합니다.  
  
 다음은 XML 문서 1입니다.  
  
 [!code-xml[XmlSchemaInferenceExamples#13](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/item1.xml#13)]  
  
 다음은 XML 문서 2입니다.  
  
 [!code-xml[XmlSchemaInferenceExamples#14](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/item2.xml#14)]  
  
 다음 예제 코드에 포함 된 첫 번째 XML 문서에서 스키마를 유추 `reader`, 다음에 포함 된 두 번째 XML 문서에 있는 변경 내용으로 유추 된 스키마를 구체화 `reader1`합니다. 예제 코드에서는 첫 번째 오버 로드 된 <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A> 오버 로드 된 두 번째 및 스키마를 유추 하는 방법 <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A> 에서 기존 스키마를 구체화 하는 메서드는 <xref:System.Xml.Schema.XmlSchemaSet> 개체입니다.  
  
 [!code-cpp[XmlSchemaInferenceExamples#4](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaInferenceExamples/CPP/XmlSchemaInferenceExamples.cpp#4)]
 [!code-csharp[XmlSchemaInferenceExamples#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaInferenceExamples/CS/XmlSchemaInferenceExamples.cs#4)]
 [!code-vb[XmlSchemaInferenceExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaInferenceExamples/VB/XmlSchemaInferenceExamples.vb#4)]  
  
 다음 스키마는 XML 문서 1에서에서 유추 된 스키마입니다.  
  
 [!code-xml[XmlSchemaInferenceExamples#15](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/InferSchema1.xml#15)]  
  
 다음 스키마는 XML 문서 2에 기반한 위 스키마의 구체화 된 버전입니다.  
  
 [!code-xml[XmlSchemaInferenceExamples#16](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/InferSchema2.xml#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">XML 문서가 제대로 구성되지 않은 경우</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException"><see cref="T:System.Xml.XmlReader" /> 개체가 루트 노드 또는 요소에 없는 경우. 스키마를 유추하는 동안 오류가 발생합니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Occurrence">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaInference.InferenceOption Occurrence { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaInference/InferenceOption Occurrence" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaInference.Occurrence" />
      <MemberSignature Language="VB.NET" Value="Public Property Occurrence As XmlSchemaInference.InferenceOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaInference::InferenceOption Occurrence { System::Xml::Schema::XmlSchemaInference::InferenceOption get(); void set(System::Xml::Schema::XmlSchemaInference::InferenceOption value); };" />
      <MemberSignature Language="F#" Value="member this.Occurrence : System.Xml.Schema.XmlSchemaInference.InferenceOption with get, set" Usage="System.Xml.Schema.XmlSchemaInference.Occurrence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaInference+InferenceOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 문서에서 유추되는 스키마 발생 선언에 영향을 주는 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 개체</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A> 속성이 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted>요소가 처음 발생 하는 XML 문서, 스키마 선언으로 유추 됩니다 `minOccurs="1"`합니다. 스키마 선언으로 유추 됩니다 특성이 발견 되 면 `use="required"`합니다.  
  
 경우는 <xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A> 속성이로 설정 되어 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed>, 스키마 요소 선언으로 유추 됩니다 `minOccurs="0"`, 특성 스키마 선언으로 유추 되 고 `use="optional"`입니다.  
  
 기본값은 <xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A> 속성은 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted>합니다.  
  
   
  
## Examples  
 항목에 미치는 영향을 보여 주는이 예제는 <xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A> 속성입니다. 예제 코드는 두 가지 방법으로 XML 파일에서 발생 유추: 완화 하 고 제한 합니다. 다음은 예제 XML 파일입니다.  
  
 [!code-xml[XmlSchemaInferenceExamples#7](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/Occurrence1.xml#7)]  
  
 다음 예제 코드에서 지시 된 <xref:System.Xml.Schema.XmlSchemaInference> 관대 한 방식으로 요소 및 특성의 발생을 유추 하는 클래스입니다.  
  
 [!code-cpp[XmlSchemaInferenceExamples#2](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaInferenceExamples/CPP/XmlSchemaInferenceExamples.cpp#2)]
 [!code-csharp[XmlSchemaInferenceExamples#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaInferenceExamples/CS/XmlSchemaInferenceExamples.cs#2)]
 [!code-vb[XmlSchemaInferenceExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaInferenceExamples/VB/XmlSchemaInferenceExamples.vb#2)]  
  
 때문에 <xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A> 속성이로 설정 된 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed>, 다음 스키마 생성 되었습니다.  
  
 [!code-xml[XmlSchemaInferenceExamples#8](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/Occurrence2.xml#8)]  
  
 위의 예제 코드를 <xref:System.Xml.Schema.XmlSchemaInference.Occurrence%2A> 속성 설정 되지 않았습니다 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed>, <xref:System.Xml.Schema.XmlSchemaInference> 클래스 기본값 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted> 다음 스키마를 생성 합니다.  
  
 [!code-xml[XmlSchemaInferenceExamples#9](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/Occurrence3.xml#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeInference">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaInference.InferenceOption TypeInference { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaInference/InferenceOption TypeInference" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaInference.TypeInference" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeInference As XmlSchemaInference.InferenceOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaInference::InferenceOption TypeInference { System::Xml::Schema::XmlSchemaInference::InferenceOption get(); void set(System::Xml::Schema::XmlSchemaInference::InferenceOption value); };" />
      <MemberSignature Language="F#" Value="member this.TypeInference : System.Xml.Schema.XmlSchemaInference.InferenceOption with get, set" Usage="System.Xml.Schema.XmlSchemaInference.TypeInference" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaInference+InferenceOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 문서에서 유추되는 형식에 영향을 주는 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 개체</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A> 속성이 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed>, 유추 된 형식의 단순 콘텐츠를 사용 하 여 XML 문서에 요소 및 특성은 항상 `xs:string`합니다. 경우는 <xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A> 속성이 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted>와 같은 보다 구체적인 형식이 유추 됩니다 `xs:date`, `xs:decimal`, `xs:unsignedByte`등입니다.  
  
 기본값은 <xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A> 속성은 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted>합니다.  
  
   
  
## Examples  
 형식 유추에 미치는 영향을 보여 주는이 예제는 <xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A> 속성입니다. 예제 코드는 두 가지 방법으로 XML 파일에서 형식을 유추: 완화 하 고 제한 합니다. 다음은 예제 XML 파일입니다.  
  
 [!code-xml[XmlSchemaInferenceExamples#10](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/TypeInference1.xml#10)]  
  
 다음 예제 코드에 지시 합니다 <xref:System.Xml.Schema.XmlSchemaInference> 유추 하는 클래스 `xs:string` 요소와 특성을 단순 내용에 대 한 합니다.  
  
 [!code-cpp[XmlSchemaInferenceExamples#3](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaInferenceExamples/CPP/XmlSchemaInferenceExamples.cpp#3)]
 [!code-csharp[XmlSchemaInferenceExamples#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaInferenceExamples/CS/XmlSchemaInferenceExamples.cs#3)]
 [!code-vb[XmlSchemaInferenceExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaInferenceExamples/VB/XmlSchemaInferenceExamples.vb#3)]  
  
 때문에 <xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A> 속성이로 설정 된 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed>, 다음 스키마 생성 되었습니다.  
  
 [!code-xml[XmlSchemaInferenceExamples#11](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/TypeInference2.xml#11)]  
  
 위의 예제 코드를 <xref:System.Xml.Schema.XmlSchemaInference.TypeInference%2A> 속성 설정 되지 않았습니다 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed>, <xref:System.Xml.Schema.XmlSchemaInference> 클래스 기본값 <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted> 다음 스키마를 생성 합니다.  
  
 [!code-xml[XmlSchemaInferenceExamples#12](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaInferenceExamples/XML/TypeInference3.xml#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>