<Type Name="XmlSchemaSet" FullName="System.Xml.Schema.XmlSchemaSet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d653d8ea89c8f3d403be0112895e62ad6b796a71" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58707892" /></Metadata><TypeSignature Language="C#" Value="public class XmlSchemaSet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSchemaSet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaSet" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSchemaSet" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaSet" />
  <TypeSignature Language="F#" Value="type XmlSchemaSet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>XSD(XML 스키마 정의 언어) 스키마의 캐시를 포함합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   알 수 없거나 신뢰할 수 없는 출처 또는 위치에서 스키마를 사용 하지 마세요. 이렇게 하면 코드의 보안이 손상 됩니다.  
> -   XML 스키마 (인라인 스키마 포함)는 서비스 거부 공격;에 기본적으로 취약 이러한 신뢰할 수 없는 시나리오에서 허용 하지 않습니다.  
> -   스키마 유효성 검사 오류 메시지 및 예외 콘텐츠 모델 또는 스키마 파일에 URI 경로 대 한 중요 한 정보를 노출할 수 있습니다. 신뢰할 수 없는 호출자에 게이 정보를 노출 하지 않도록 주의 해야 합니다.  
> -   추가 보안 고려 사항 "보안 고려 사항" 섹션에 나와 있습니다.  
  
 <xref:System.Xml.Schema.XmlSchemaSet> 캐시 또는 라이브러리 XML 스키마 정의 언어 (XSD) 스키마를 저장할 수 있습니다. <xref:System.Xml.Schema.XmlSchemaSet>은 파일 또는 URL에서 스키마에 액세스하는 대신 메모리에 있는 스키마를 캐시하여 성능을 향상시킵니다. 각 스키마 네임 스페이스 URI로 식별 되 고 위치를 지정 된 스키마 집합에 추가 될 때입니다. 사용할 합니다 <xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=nameWithType> 할당할 속성은 <xref:System.Xml.Schema.XmlSchemaSet> 개체 데이터 유효성 검사 XML 판독기를 사용 해야 합니다.  
  
## <a name="security-considerations"></a>보안 고려 사항  
  
-   알 수 없거나 신뢰할 수 없는 소스에서 스키마를 사용 하지 마세요. 이렇게 하면 코드의 보안이 손상 됩니다. 외부 네임 스페이스 또는 위치 참조를 포함, 가져오기 및 redefine 요소의 스키마를 포함 하거나 가져오는 스키마의 기본 URI를 기준으로 확인 됩니다. 예를 들어, 포함 하거나 가져오는 스키마의 기본 URI를 비어 있는 경우 또는 `null`, 외부 위치가 현재 디렉터리를 기준으로 확인 됩니다. <xref:System.Xml.XmlUrlResolver> 클래스는 외부 스키마를 해결 하려면 기본적으로 사용 됩니다. 포함, 가져오기의 해상도 사용 하지 않도록 설정 하 고 스키마의 요소를 다시 정의 설정 합니다 <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> 속성을 `null`입니다.  
  
-   합니다 <xref:System.Xml.Schema.XmlSchemaSet> 클래스가 사용 하는 <xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType> 구문 분석 하 고 XML 스키마에서 정규식과 일치 하는 클래스입니다. 유효성 검사 XML 스키마에서 정규식 패턴 패싯의 CPU 사용량이 증가 될 수 있습니다 및 고가용성 시나리오에서 피해 야 합니다.  
  
-   사용 하 여 결과로 발생 하는 예외를 <xref:System.Xml.Schema.XmlSchemaSet> 클래스와 같이 <xref:System.Xml.Schema.XmlSchemaException> 클래스에는 신뢰할 수 없는 시나리오에서 노출 되지 않아야 하는 중요 한 정보가 포함 될 수 있습니다. 예를 들어를 <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> 의 속성을 <xref:System.Xml.Schema.XmlSchemaException> 예외를 발생 시킨 스키마 파일의 URI 경로 반환 합니다. <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> 속성 신뢰할 수 없는 시나리오에서 노출 되지 않아야 합니다. 신뢰할 수 없는 시나리오에서 중요 한 정보가 노출 되지 않습니다 있도록 예외가 제대로 처리 되어야 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.Schema.XmlSchemaSet>에 저장된 스키마를 사용하여 XML 파일의 유효성을 검사합니다. XML 파일의 네임스페이스 `urn:bookstore-schema`는 <xref:System.Xml.Schema.XmlSchemaSet>에서 유효성 검사에 사용할 스키마를 식별합니다.  
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
## <a name="input"></a>입력  
 이 샘플에서는 다음 두 입력 파일을 사용합니다.  
  
 **booksSchemaFail.xml:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 **books.xsd:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
## <a name="output"></a>Output  
 유효성 검사 오류: 네임스페이스 'urn:bookstore-schema'의 요소 'book'이 잘못된 자식 요소 'author'를 가지고 있습니다. 'author' 대신 'title'이 필요합니다.  
  
 유효성 검사 오류: 네임스페이스 'urn:bookstore-schema'의 요소 'author'가 잘못된 자식 요소 'name'을 가지고 있습니다. 'name' 대신 'first-name'이 필요합니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaSet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaSet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet (System.Xml.XmlNameTable nameTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet(System::Xml::XmlNameTable ^ nameTable);" />
      <MemberSignature Language="F#" Value="new System.Xml.Schema.XmlSchemaSet : System.Xml.XmlNameTable -&gt; System.Xml.Schema.XmlSchemaSet" Usage="new System.Xml.Schema.XmlSchemaSet nameTable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nameTable">사용할 <see cref="T:System.Xml.XmlNameTable" /> 개체입니다.</param>
        <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />를 사용하여 <see cref="T:System.Xml.XmlNameTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 <see cref="T:System.Xml.XmlNameTable" /> 개체가 <see langword="null" />입니다.</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>지정된 XSD(XML 스키마 정의 언어) 스키마를 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema"><see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가할 <see cref="T:System.Xml.Schema.XmlSchema" /> 개체입니다.</param>
        <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchema" />를 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가합니다.</summary>
        <returns>스키마가 유효한 경우에는 <see cref="T:System.Xml.Schema.XmlSchema" /> 입니다. 스키마가 유효하지 않고 <see cref="T:System.Xml.Schema.ValidationEventHandler" />가 지정된 경우에는 <see langword="null" />이 반환되고 적절한 유효성 검사 이벤트가 발생합니다. 그렇지 않으면 <see cref="T:System.Xml.Schema.XmlSchemaException" />이 throw됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Xml.Schema.XmlSchema> 개체가 이미 합니다 <xref:System.Xml.Schema.XmlSchemaSet>, <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드는 아무 작업도 수행 하지.  
  
 이 메서드의 기능은 동일 합니다는 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">스키마가 유효하지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 <see cref="T:System.Xml.Schema.XmlSchema" /> 개체가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xmlSchemaSet.Add schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체</param>
        <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 모든 XSD(XML 스키마 정의 언어) 스키마를 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스키마를 추가할 수 있습니다는 <xref:System.Xml.Schema.XmlSchemaSet>, 성공적으로 전처리 되어야 합니다. 전처리는 다음 기본 작업을 수행합니다.  
  
1.  스키마는 W3C XML 스키마의 규칙에 따라 구조적 유효성을 검사 하지만 스키마는 완벽 하 게 확인 되지 않습니다.  
  
2.  내부 및 외부 스키마 구성 요소에 대 한 참조가 확인 됩니다. 성공적으로 검색 된 모든 가져오거나 포함 된 스키마에 추가 됩니다는 <xref:System.Xml.Schema.XmlSchemaSet>합니다. 가져온된 스키마는 별도 추가 됩니다 <xref:System.Xml.Schema.XmlSchema> 개체 및 포함 된 스키마에 포함 하는 부분을 내용이 <xref:System.Xml.Schema.XmlSchema>합니다.  
  
 경우는 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 의 속성을 <xref:System.Xml.Schema.XmlSchemaSet> 추가 하려면 `true`의 모든 스키마를 <xref:System.Xml.Schema.XmlSchemaSet> 추가할에 추가 됩니다는 <xref:System.Xml.Schema.XmlSchemaSet>. 경우는 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 의 속성을 <xref:System.Xml.Schema.XmlSchemaSet> 추가 하려면 `false`, 추가 되기 전에 추가 하는 각 스키마는 전처리 합니다. 새로 추가 된 스키마 중 하나가 되 면 <xref:System.Xml.Schema.XmlSchemaSet> 전처리 실패 없는 스키마가 추가 됩니다; 대신는 <xref:System.Xml.Schema.XmlSchemaException> throw 됩니다. 결과적으로, 다음 두 코드 예제에서는 같지 않습니다.  
  
```vb  
' First example  
schemaSet.Add(schemaSet1)  
  
' Second example  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    schemaSet.Add(schema)  
  
Next  
```  
  
```csharp  
// First example  
schemaSet.Add(schemaSet1);  
  
// Second example  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    schemaSet.Add(schema);  
}  
```  
  
 이전 두 코드 예제에서는 같지 않습니다. 잘못 된 스키마가 있는 경우 첫 번째 예제에서는 `schemaSet1` 및 해당 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 속성이 `false`, 없습니다 스키마에 추가 됩니다 `schemaSet`합니다. 두 번째 예제에서는 다양 한 스키마 추가할 수 있습니다 `schemaSet` 잘못 된 스키마가 발견 되 고 예외가 throw 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 추가 스키마를 보여 줍니다.는 <xref:System.Xml.Schema.XmlSchemaSet>를 추가 합니다 <xref:System.Xml.Schema.XmlSchemaSet> 새 <xref:System.Xml.Schema.XmlSchemaSet> 를 사용 하 여를 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드.  
  
```vb  
Dim schemaSet1 As XmlSchemaSet = New XmlSchemaSet  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemaSet2 As XmlSchemaSet = New XmlSchemaSet  
schemaSet2.Add(schemaSet1)  
```  
  
```csharp  
XmlSchemaSet schemaSet1 = new XmlSchemaSet();  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchemaSet schemaSet2 = new XmlSchemaSet();  
schemaSet2.Add(schemaSet1);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException"><see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 스키마가 유효하지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, string schemaUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, string schemaUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaUri As String) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::String ^ schemaUri);" />
      <MemberSignature Language="F#" Value="member this.Add : string * string -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">스키마 <paramref name="targetNamespace" /> 속성이거나, 스키마에 지정된 <paramref name="targetNamespace" />를 사용하면 <see langword="null" />입니다.</param>
        <param name="schemaUri">로드할 스키마를 지정하는 URL입니다.</param>
        <summary>지정된 URL에 있는 XSD(XML 스키마 정의 언어) 스키마를 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가합니다.</summary>
        <returns>스키마가 유효한 경우에는 <see cref="T:System.Xml.Schema.XmlSchema" /> 입니다. 스키마가 유효하지 않고 <see cref="T:System.Xml.Schema.ValidationEventHandler" />가 지정된 경우에는 <see langword="null" />이 반환되고 적절한 유효성 검사 이벤트가 발생합니다. 그렇지 않으면 <see cref="T:System.Xml.Schema.XmlSchemaException" />이 throw됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스키마를 추가할 수 있습니다는 <xref:System.Xml.Schema.XmlSchemaSet>, 성공적으로 전처리 되어야 합니다. 전처리는 다음 기본 작업을 수행합니다.  
  
1.  스키마는 W3C XML 스키마의 규칙에 따라 구조적 유효성을 검사 하지만 스키마는 완벽 하 게 확인 되지 않습니다.  
  
2.  내부 및 외부 스키마 구성 요소에 대 한 참조가 확인 됩니다. 성공적으로 검색 된 모든 가져오거나 포함 된 스키마에 추가 됩니다는 <xref:System.Xml.Schema.XmlSchemaSet>합니다. 가져온된 스키마는 별도 추가 됩니다 <xref:System.Xml.Schema.XmlSchema> 개체 및 포함 된 스키마에 포함 하는 부분을 내용이 <xref:System.Xml.Schema.XmlSchema>합니다.  
  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드.  
  
-   스키마를 추가 합니다 <xref:System.Xml.Schema.XmlSchemaSet> 동일한 대상 네임 스페이스 및 스키마 위치 URL 내에 이미 포함 하는 스키마로는 <xref:System.Xml.Schema.XmlSchemaSet> 원래 스키마 개체를 반환 합니다.  
  
-   에 새 스키마를 성공적으로 추가 되는 경우는 <xref:System.Xml.Schema.XmlSchemaSet>, <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 의 속성을 <xref:System.Xml.Schema.XmlSchemaSet> 로 설정 되어 `false`합니다.  
  
-   XML 스키마에서 발생 한 모든 포함 또는 가져오기 요소는 확인 된 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드가 호출 됩니다. 확인 실패 등 스키마 유효성 검사 경고가 요소 결과 가져올 경우 <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> 에 대 한 지정 된는 <xref:System.Xml.Schema.XmlSchemaSet> 개체 이러한 경고가 보고 되지 것입니다.  
  
-   에 이미 존재 하는 스키마와 동일한 대상 네임 스페이스를 사용 하 여 스키마를 <xref:System.Xml.Schema.XmlSchemaSet> 에 추가 되는 <xref:System.Xml.Schema.XmlSchemaSet>, 두 스키마가 추가 됩니다.  
  
    > [!NOTE]
    >  사용 되지 않는 경우 다르게이 동작 <xref:System.Xml.Schema.XmlSchemaCollection> 개체입니다.  
  
-   <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드를 <xref:System.Xml.Schema.XmlSchemaSet> 매개 변수로 대상 네임 스페이스를 지정할 필요 없이 스키마에 정의 된 대상 네임 스페이스를 사용 하는 기능에 때를 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드가 호출 됩니다. 지정 `null` 에 `targetNamespace` 의 매개 변수를 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드 지시를 <xref:System.Xml.Schema.XmlSchemaSet> 다음 코드 예제에 설명 된 대로 스키마에 정의 된 대상 네임 스페이스를 사용 하 합니다.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "books.xsd")  
  
Dim schema As XmlSchema  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
    schema.Write(Console.Out)  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "books.xsd");  
  
foreach(XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 위의 코드 예제의 `null` 로 지정 됩니다는 `targetNamespace` 매개 변수는 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드. 결과적으로 `targetNamespace` 정의 books.xml 파일을 사용 합니다. 이 예에서 호출의 결과 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드는 동일한 것 경우 http://www.contoso.com/books 로 지정 된 것을 `targetNamespace` 매개 변수입니다.  
  
-   W3C XML 스키마 정의 된 대상 네임 스페이스를 사용 하 여 스키마에 포함 될 대상 네임 스페이스가 없는 스키마를 허용 합니다. 이 경우 정의 된 대상 네임 스페이스가 없는 스키마를 포함 하 여 스키마의 대상 네임 스페이스에 강제 변환 됩니다. 포함된 된 스키마는 해당 대상 네임 스페이스 정의 처럼 처리 됩니다. 마찬가지로에 대상 네임 스페이스가 없는 스키마를 추가할 수 있습니다 합니다 <xref:System.Xml.Schema.XmlSchemaSet> 지정 된 대상 네임 스페이스로 강제로 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드를 다음 예에서 확인할 수 있습니다.  
  
```  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">  
    <xs:element name="A" type="xs:string" />  
</xs:schema>  
```  
  
 위의 스키마에 추가 되 면 합니다 <xref:System.Xml.Schema.XmlSchemaSet> 대상 네임 스페이스를 사용 하 여 http://www.contoso.com/new/targetnamespace (표시 된 대로 아래 코드에서), 대상 네임 스페이스는 스키마에 선언 된 것 처럼 처리 됩니다 것 `http://www.contoso.com/new/targetnamespace`입니다.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    Console.WriteLine(schema.TargetNamespace)     
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd");  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    Console.WriteLine(schema.TargetNamespace);  
}  
```  
  
   
  
## Examples  
 다음 코드 예제에서는 추가 합니다 http://www.contoso.com/books.xsd 스키마의 대상 네임 스페이스를 사용 하 여 http://www.contoso.com/books 에 <xref:System.Xml.Schema.XmlSchemaSet>합니다.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
```  
  
 이 예제에서는 `books.xsd` 파일을 입력으로 사용합니다.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">스키마가 유효하지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 URL이 <see langword="null" />이거나 <see cref="F:System.String.Empty" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, System.Xml.XmlReader schemaDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, class System.Xml.XmlReader schemaDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaDocument As XmlReader) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::Xml::XmlReader ^ schemaDocument);" />
      <MemberSignature Language="F#" Value="member this.Add : string * System.Xml.XmlReader -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaDocument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaDocument" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">스키마 <paramref name="targetNamespace" /> 속성이거나, 스키마에 지정된 <paramref name="targetNamespace" />를 사용하면 <see langword="null" />입니다.</param>
        <param name="schemaDocument"><see cref="T:System.Xml.XmlReader" /> 개체</param>
        <summary><see cref="T:System.Xml.XmlReader" />에 포함된 XSD(XML 스키마 정의 언어) 스키마를 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가합니다.</summary>
        <returns>스키마가 유효한 경우에는 <see cref="T:System.Xml.Schema.XmlSchema" /> 입니다. 스키마가 유효하지 않고 <see cref="T:System.Xml.Schema.ValidationEventHandler" />가 지정된 경우에는 <see langword="null" />이 반환되고 적절한 유효성 검사 이벤트가 발생합니다. 그렇지 않으면 <see cref="T:System.Xml.Schema.XmlSchemaException" />이 throw됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스키마를 추가할 수 있습니다는 <xref:System.Xml.Schema.XmlSchemaSet>, 성공적으로 전처리 되어야 합니다. 전처리는 다음 기본 작업을 수행합니다.  
  
1.  스키마는 W3C XML 스키마의 규칙에 따라 구조적 유효성을 검사 하지만 스키마는 완벽 하 게 확인 되지 않습니다.  
  
2.  내부 및 외부 스키마 구성 요소에 대 한 참조가 확인 됩니다. 성공적으로 검색 된 모든 가져오거나 포함 된 스키마에 추가 됩니다는 <xref:System.Xml.Schema.XmlSchemaSet>합니다. 가져온된 스키마는 별도 추가 됩니다 <xref:System.Xml.Schema.XmlSchema> 개체 및 포함 된 스키마에 포함 하는 부분을 내용이 <xref:System.Xml.Schema.XmlSchema>합니다.  
  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드.  
  
-   성공적으로 가져오거나에 포함 된 스키마가 포함 된 스키마를 검색 합니다 <xref:System.Xml.XmlReader> 에 추가 됩니다는 <xref:System.Xml.Schema.XmlSchemaSet>합니다.  
  
-   경우는 <xref:System.Xml.XmlReader> 루트 요소에 배치 되지 않은 <xref:System.Xml.Schema.XmlSchemaException> 현재 항목 요소가 아닌 경우 throw 됩니다. 현재 항목이 `xs:schema` 요소가, 스키마 문서를 읽기는 <xref:System.Xml.Schema.XmlSchemaSet>이 고, 그렇지 않으면는 <xref:System.Xml.Schema.XmlSchemaException> 스키마에 유효 하지 않으므로 throw 됩니다.  
  
-   경우는 <xref:System.Xml.XmlReader> 위치가 시퀀스의 첫 번째 노드만 XML 노드 시퀀스에 추가 됩니다.  
  
-   스키마에서 생성 된 경우는 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 메서드 호출의 값을 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 인라인 스키마 처리 W3C XML 스키마 문서에 적용 되지 않았으므로 속성이 무시 됩니다.  
  
-   합니다 <xref:System.Xml.XmlResolver> 의 속성을 <xref:System.Xml.XmlReader> 의 네임 스페이스 또는 스키마 위치에 대 한 참조가 include 및 import 요소를 해결 하는 데 사용 되지 않습니다. 대신를 <xref:System.Xml.XmlResolver> 의 속성을 <xref:System.Xml.Schema.XmlSchemaSet> 사용 됩니다.  
  
-   <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드를 <xref:System.Xml.Schema.XmlSchemaSet> 매개 변수로 대상 네임 스페이스를 지정할 필요 없이 스키마에 정의 된 대상 네임 스페이스를 사용 하는 기능에 때를 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드가 호출 됩니다. 지정 `null` 또는 <xref:System.String.Empty?displayProperty=nameWithType> 에 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 지시 하는 메서드는 <xref:System.Xml.Schema.XmlSchemaSet> 스키마에 정의 된 대상 네임 스페이스를 사용 하 합니다. 이 동작의 예 참조는 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드.  
  
 이 메서드의 나머지 기능은 동일 합니다는 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드.  
  
   
  
## Examples  
 다음 코드 예제에 포함 된 books.xsd 스키마를 추가 합니다 <xref:System.Xml.XmlTextReader> 의 대상 네임 스페이스를 사용 하 여 http://www.contoso.com/books 에 <xref:System.Xml.Schema.XmlSchemaSet>합니다.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", New XmlTextReader("books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", new XmlTextReader("books.xsd");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">스키마가 유효하지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 <see cref="T:System.Xml.XmlReader" /> 개체가 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompilationSettings">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property CompilationSettings As XmlSchemaCompilationSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaCompilationSettings ^ CompilationSettings { System::Xml::Schema::XmlSchemaCompilationSettings ^ get(); void set(System::Xml::Schema::XmlSchemaCompilationSettings ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompilationSettings : System.Xml.Schema.XmlSchemaCompilationSettings with get, set" Usage="System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCompilationSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" />의 <see cref="T:System.Xml.Schema.XmlSchemaSet" />를 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" />에 대한 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다. 기본값은 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 속성이 <see langword="true" />로 설정된 <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> 인스턴스입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Xml.Schema.XmlSchemaCompilationSettings> Attribution UPA (Unique Particle) 유효성 검사 옵션을 지정 하는 클래스는 <xref:System.Xml.Schema.XmlSchemaSet>합니다. UPA 유효성 검사를 사용 하도록 설정 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public void Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Sub Compile ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Compile();" />
      <MemberSignature Language="F#" Value="member this.Compile : unit -&gt; unit" Usage="xmlSchemaSet.Compile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가된 XSD(XML 스키마 정의 언어) 스키마를 하나의 논리 스키마로 컴파일합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 유효성 검사가 필요한 경우 자동으로 호출 됩니다 및 <xref:System.Xml.Schema.XmlSchemaSet> 이전에 컴파일되지 않았습니다-예를 들어 경우는 <xref:System.Xml.Schema.XmlSchemaSet> 는 입력으로 만드는 데는 <xref:System.Xml.XmlReader> 개체를 <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> 속성의는 <xref:System.Xml.XmlReaderSettings> 개체입니다. 경우는 <xref:System.Xml.Schema.XmlSchemaSet> 는 이미 컴파일된 상태에서는이 메서드가 컴파일되지 스키마입니다. 이 메서드가 성공적으로 실행 하는 경우는 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 속성이 `true`합니다.  
  
 이전에 컴파일된 스키마는 <xref:System.Xml.Schema.XmlSchemaSet> 컴파일되지 않습니다. 그러나 사용 하 여 컴파일된 스키마는 <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> 메서드는 <xref:System.Xml.Schema.XmlSchema> 다시 컴파일됩니다.  
  
> [!NOTE]
>  호출 해야 합니다 <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> 스키마 (또는 해당 포함/import)에 추가한 후 변경한 경우 메서드는 <xref:System.Xml.Schema.XmlSchemaSet>합니다. <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> 메서드는 W3C XML 스키마의 규칙에 따라 구조적 유효성에 대 한 스키마를 확인 합니다. 그러나 전체 유효성 검사를 수행 되지 않습니다. 내부 및 외부 스키마 구성 요소에 대 한 참조도 확인 합니다. 성공적으로 검색 된 모든 가져오거나 포함 된 스키마에 추가 됩니다는 <xref:System.Xml.Schema.XmlSchemaSet>합니다. 가져온된 스키마는 별도 추가 됩니다 <xref:System.Xml.Schema.XmlSchema> 개체를 포함 하는 동안 스키마를 포함 하는 부분 내용이 <xref:System.Xml.Schema.XmlSchema>합니다. 다시 처리에 대 한 호출에 성공 하면는 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 속성이 false로 설정 됩니다.  
  
   
  
## Examples  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException"><see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 스키마에 대해 유효성을 검사하고 컴파일하는 동안 오류가 발생한 경우</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XSD(XML 스키마 정의 언어) 스키마가 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 있는지 여부를 나타냅니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (targetNamespace As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="xmlSchemaSet.Contains targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">스키마 <paramref name="targetNamespace" /> 속성입니다.</param>
        <summary>지정된 대상 네임스페이스 URI가 있는 XSD(XML 스키마 정의 언어) 스키마가 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 있는지 여부를 나타냅니다.</summary>
        <returns>지정된 대상 네임스페이스 URI가 있는 스키마가 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 직접 추가 되는 스키마를 <xref:System.Xml.Schema.XmlSchemaSet> 감지한는 <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> 방법으로, 예를 들어 가져온된 스키마입니다. 결과적으로 경우에 대 한 스키마를 http://www.contoso.com/retail 네임 스페이스에 대 한 스키마를 가져오는 합니다 http://www.contoso.com/books 네임 스페이스에 추가 됩니다는 <xref:System.Xml.Schema.XmlSchemaSet>를 호출 <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> 사용 하 여 `http://www.contoso.com/books` 매개 변수로 반환 합니다 `true`합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (schema As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.Contains schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema"><see cref="T:System.Xml.Schema.XmlSchema" /> 개체</param>
        <summary>지정된 XSD(XML 스키마 정의 언어) <see cref="T:System.Xml.Schema.XmlSchema" /> 개체가 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 있는지 여부를 나타냅니다.</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchema" /> 개체가 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />이 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Xml.Schema.XmlSchema[] schemas, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Xml.Schema.XmlSchema[] schemas, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (schemas As XmlSchema(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Xml::Schema::XmlSchema ^&gt; ^ schemas, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Xml.Schema.XmlSchema[] * int -&gt; unit" Usage="xmlSchemaSet.CopyTo (schemas, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchema[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemas">개체를 복사할 대상 배열입니다.</param>
        <param name="index">복사를 시작할 배열 내의 인덱스입니다.</param>
        <summary>지정된 인덱스부터 시작하여 <see cref="T:System.Xml.Schema.XmlSchema" />의 모든 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체를 지정된 배열에 복사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 모든 복사 합니다 <xref:System.Xml.Schema.XmlSchema> 개체를 <xref:System.Xml.Schema.XmlSchemaSet> 배열의 <xref:System.Xml.Schema.XmlSchema> 개체입니다.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemas(schemaSet.Count) As XmlSchema  
schemaSet.CopyTo(schemas, 0)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchema[] schemas = new XmlSchema[schemaSet.Count];  
schemaSet.CopyTo(schemas, 0);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 논리 XSD(XML 스키마 정의 언어) 스키마의 개수를 가져옵니다.</summary>
        <value><see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 논리 스키마의 개수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 개의 스키마 네임 스페이스에 대 한 경우 `http://www.contoso.com` 에 <xref:System.Xml.Schema.XmlSchemaSet>, <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> 속성은 스키마 유효성 검사를 위해 단일 논리 스키마로 처리 됩니다 때문에 1을 반환 합니다. 그러나 경우 네임 스페이스에 대 한 스키마 `http://www.contoso.com/retail` 에 대 한 스키마를 가져올 합니다 `http://www.contoso.com/books` 네임 스페이스의 값을 <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> 속성은 2 일 수.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalAttributes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalAttributes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalAttributes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 모든 XSD(XML 스키마 정의 언어) 스키마에 있는 전역 특성을 모두 가져옵니다.</summary>
        <value>전역 특성의 컬렉션입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalElements">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalElements As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalElements { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalElements : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 모든 XSD(XML 스키마 정의 언어) 스키마에 있는 전역 요소를 모두 가져옵니다.</summary>
        <value>전역 요소의 컬렉션입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalTypes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalTypes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalTypes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalTypes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 모든 XSD(XML 스키마 정의 언어) 스키마에 있는 전역 단순 및 복합 형식을 모두 가져옵니다.</summary>
        <value>전역 단순 및 복합 형식의 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Xml.Schema.XmlSchemaSet.GlobalTypes%2A> 속성은 항상 나타내는 형식을 반환 합니다 `xs:anyType` 복합 형식입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="IsCompiled">
      <MemberSignature Language="C#" Value="public bool IsCompiled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompiled" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompiled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompiled : bool" Usage="System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 XSD(XML 스키마 정의 언어) 스키마가 컴파일되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value><see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 스키마를 마지막으로 추가하거나 제거한 후 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 스키마가 컴파일되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>에 있는 동안 스키마를 편집해도 <xref:System.Xml.Schema.XmlSchemaSet> 속성에는 영향을 주지 않습니다. <xref:System.Xml.Schema.XmlSchemaSet>에서 개별 스키마를 업데이트한 내용은 추적되지 않습니다. 결과적으로 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>에 포함된 스키마 중 하나를 변경해도 `true`에서 스키마를 추가하거나 제거하지 않으면 <xref:System.Xml.Schema.XmlSchemaSet> 속성은 <xref:System.Xml.Schema.XmlSchemaSet>일 수 있습니다.  
  
   
  
## Examples  
 예는 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 속성 참조는 <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Compile" />
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>새 XSD(XML 스키마 정의 언어) 스키마를 로드할 때 <see cref="T:System.Xml.XmlNameTable" />에서 사용하는 기본 <see cref="T:System.Xml.Schema.XmlSchemaSet" />을 가져옵니다.</summary>
        <value>원자화된 문자열 개체의 테이블입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Remove (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Remove(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Remove(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Remove schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema"><see cref="T:System.Xml.Schema.XmlSchema" />에서 제거할 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다.</param>
        <summary>지정된 XSD(XML 스키마 정의 언어) 스키마를 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 제거합니다.</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchema" />에서 제거된 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체이거나, 해당 스키마가 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스키마를 제거 합니다 <xref:System.Xml.Schema.XmlSchemaSet> 설정 합니다 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 속성을 `false`입니다.  
  
   
  
## Examples  
 다음 예제에서는 여러 스키마를 추가 하는 방법을 보여 줍니다는 <xref:System.Xml.Schema.XmlSchemaSet>를 사용 하 여 스키마 중 하나를 제거 하는 다음을 <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> 메서드.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.Remove(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.Remove(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">올바른 스키마가 아닌 경우</exception>
        <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 <see cref="T:System.Xml.Schema.XmlSchema" />이 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRecursive">
      <MemberSignature Language="C#" Value="public bool RemoveRecursive (System.Xml.Schema.XmlSchema schemaToRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveRecursive(class System.Xml.Schema.XmlSchema schemaToRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRecursive (schemaToRemove As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveRecursive(System::Xml::Schema::XmlSchema ^ schemaToRemove);" />
      <MemberSignature Language="F#" Value="member this.RemoveRecursive : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.RemoveRecursive schemaToRemove" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaToRemove" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schemaToRemove"><see cref="T:System.Xml.Schema.XmlSchema" />에서 제거할 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다.</param>
        <summary>지정된 XSD(XML 스키마 정의 언어) 스키마와 해당 스키마에 가져온 모든 스키마를 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 제거합니다.</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchema" /> 개체와 해당 개체에 가져온 모든 항목이 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> 메서드는 지정된 된 스키마와에서 가져온 모든 스키마 제거는 <xref:System.Xml.Schema.XmlSchemaSet>스키마 나 가져온된 스키마에 종속성이 없는 합니다. 스키마 나 가져온된 스키마에 대 한 종속성이 있는지를 <xref:System.Xml.Schema.XmlSchemaSet>, 아무 것도 제거 하 고 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> 반환 `false`합니다. 하는 경우 `false` 이 반환 됩니다 및 <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> 는 정의 된 종속성을 설명 하는 이벤트 처리기에 경고가 전송 됩니다.  
  
 지정된 된 스키마 다른 스키마를 가져오고 지정된 된 스키마가 이전에 제거 하는 경우는 <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> 메서드를 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> 메서드는 가져온된 스키마를 제거 하지 않습니다 하 고 반환 됩니다 `false`합니다. 예를 들어 경우 `parentSchema` 가져옵니다 `childSchema1` 하 고 `childSchema2` 를 다음 코드로 제거 됩니다 `parentSchema`에 가져오지 않는 `childSchema1` 및 `childSchema2` 스키마:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.Remove(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 다음 코드를 제거 합니다 `parentSchema` 와 가져온된 스키마:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 합니다 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> 메서드는 상태에 영향을 주지는 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 여러 스키마를 추가 하는 방법을 보여 줍니다는 <xref:System.Xml.Schema.XmlSchemaSet>를 사용 하 여 가져온 모든 스키마 및 스키마 중 하나를 제거 합니다 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> 메서드.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.RemoveRecursive(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.RemoveRecursive(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 <see cref="T:System.Xml.Schema.XmlSchema" />이 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Reprocess">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Reprocess (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Reprocess(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Reprocess (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Reprocess(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Reprocess : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Reprocess schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">다시 처리할 스키마입니다.</param>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaSet" />에 이미 있는 XSD(XML 스키마 정의 언어) 스키마를 다시 처리합니다.</summary>
        <returns>스키마가 유효한 경우에는 <see cref="T:System.Xml.Schema.XmlSchema" /> 입니다. 스키마가 유효하지 않고 <see cref="T:System.Xml.Schema.ValidationEventHandler" />가 지정된 경우에는 <see langword="null" />이 반환되고 적절한 유효성 검사 이벤트가 발생합니다. 그렇지 않으면 <see cref="T:System.Xml.Schema.XmlSchemaException" />이 throw됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스키마에서 수행 된 모든 전처리 단계가 수행 스키마를 다시 처리 하면는 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드가 호출 됩니다. 경우에 대 한 호출 <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> 성공 합니다 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 속성이 `false`.  
  
 스키마 후 다시 처리 메서드를 사용할 수는 <xref:System.Xml.Schema.XmlSchemaSet> 이 수정 된 후의 <xref:System.Xml.Schema.XmlSchemaSet> 컴파일을 수행한 합니다.  
  
> [!NOTE]
>  호출 해야 합니다 <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> 스키마 (또는 해당 포함/import)에 추가한 후 변경한 경우 메서드는 <xref:System.Xml.Schema.XmlSchemaSet>합니다. <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> 메서드는 W3C XML 스키마의 규칙에 따라 구조적 유효성에 대 한 스키마를 확인 합니다. 그러나 전체 유효성 검사를 수행 되지 않습니다. 내부 및 외부 스키마 구성 요소에 대 한 참조도 확인 합니다. 성공적으로 검색 된 모든 가져오거나 포함 된 스키마에 추가 됩니다는 <xref:System.Xml.Schema.XmlSchemaSet>합니다. 가져온된 스키마는 별도 추가 됩니다 <xref:System.Xml.Schema.XmlSchema> 개체를 포함 하는 동안 스키마를 포함 하는 부분 내용이 <xref:System.Xml.Schema.XmlSchema>합니다. 다시 처리에 대 한 호출에 성공 하면는 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 속성이 false로 설정 됩니다.  
  
   
  
## Examples  
 다음 예제에 추가할 스키마를 다시 처리는 <xref:System.Xml.Schema.XmlSchemaSet>합니다. 후를 <xref:System.Xml.Schema.XmlSchemaSet> 를 사용 하 여 컴파일된를 <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> 메서드와에 추가 된 스키마를 <xref:System.Xml.Schema.XmlSchemaSet> 수정 되는 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 속성으로 설정 됩니다 `true`되더라도에서 스키마를 <xref:System.Xml.Schema.XmlSchemaSet> 수정 되었습니다. 호출을 <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> 메서드 수행 된 모든 전처리가 수행 합니다 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 메서드 집합과 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 속성을 `false`.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
Dim schema As XmlSchema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
  
Dim element As XmlSchemaElement = New XmlSchemaElement()  
schema.Items.Add(element)  
element.Name = "book"  
element.SchemaTypeName = New XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema")  
  
schemaSet.Reprocess(schema)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
XmlSchema schema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
  
XmlSchemaElement element = new XmlSchemaElement();  
schema.Items.Add(element);  
element.Name = "book";  
element.SchemaTypeName = new XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema");  
  
schemaSet.Reprocess(schema);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">스키마가 유효하지 않은 경우</exception>
        <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 <see cref="T:System.Xml.Schema.XmlSchema" /> 개체가 <see langword="null" />입니다.</exception>
        <exception cref="T:System.ArgumentException">매개 변수로 전달된 <see cref="T:System.Xml.Schema.XmlSchema" /> 개체가 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 아직 없는 경우</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Schemas">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 XSD(XML 스키마 정의 언어) 스키마의 컬렉션을 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas();" />
      <MemberSignature Language="F#" Value="member this.Schemas : unit -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 모든 XSD(XML 스키마 정의 언어) 스키마의 컬렉션을 반환합니다.</summary>
        <returns><see cref="T:System.Collections.ICollection" />에 추가된 모든 스키마를 포함하는 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다. <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가된 스키마가 없으면 빈 <see cref="T:System.Collections.ICollection" /> 개체가 반환됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 간접적으로 추가 된 스키마를 반환 합니다.는 <xref:System.Xml.Schema.XmlSchemaSet> 가져온 때문입니다.  
  
> [!NOTE]
>  합니다 <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> 메서드는 해당 하는 합니다 <xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A> 메서드의 사용 되지 않는 <xref:System.Xml.Schema.XmlSchemaCollection>합니다.  
  
   
  
## Examples  
 다음 예제에서는 모든 스키마를 반복 하는 방법을 보여 줍니다는 <xref:System.Xml.Schema.XmlSchemaSet>합니다.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas (targetNamespace As String) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Schemas : string -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">스키마 <paramref name="targetNamespace" /> 속성입니다.</param>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 지정된 네임스페이스에 속하는 모든 XSD(XML 스키마 정의 언어) 스키마의 컬렉션을 반환합니다.</summary>
        <returns><see cref="T:System.Collections.ICollection" />에 추가되고 지정된 네임스페이스에 속하는 모든 스키마가 포함된 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체를 반환합니다. <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가된 스키마가 없으면 빈 <see cref="T:System.Collections.ICollection" /> 개체가 반환됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 `targetNamespace` 매개 변수가 `null` 또는 <xref:System.String.Empty>, 네임 스페이스가 없는 모든 스키마가 반환 됩니다.  
  
 이 메서드를 간접적으로 추가 된 스키마를 반환 합니다.는 <xref:System.Xml.Schema.XmlSchemaSet> 가져온 때문입니다.  
  
> [!NOTE]
>  합니다 <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> 메서드는 해당 하는 합니다 <xref:System.Xml.Schema.XmlSchemaCollection.Item%2A> 메서드의 사용 되지 않는 <xref:System.Xml.Schema.XmlSchemaCollection>합니다.  
  
   
  
## Examples  
 다음 예제에서는 모든 스키마를 반복 하는 방법을 보여 줍니다 합니다 http://www.contoso.com/books 네임 스페이스는 <xref:System.Xml.Schema.XmlSchemaSet>합니다.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XSD(XML 스키마 정의 언어) 스키마 유효성 검사 오류에 대한 정보를 받을 이벤트 처리기를 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스키마 유효성 검사 오류에 대 한 정보를 받기 위해 이벤트 처리기를 설정 때 합니다 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 또는 <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> 의 메서드는 <xref:System.Xml.Schema.XmlSchemaSet> 라고 합니다.  
  
 이벤트 처리기를 정의 하지 않은 경우는 <xref:System.Xml.Schema.XmlSchemaException> 유효성 검사 오류가 throw 됩니다 여기서 합니다 <xref:System.Xml.Schema.XmlSeverityType> 는 <xref:System.Xml.Schema.XmlSeverityType.Error>합니다. 사용 하 여 유효성 검사 오류에 대 한 예외가 throw 되지 않습니다는 <xref:System.Xml.Schema.XmlSeverityType> 의 <xref:System.Xml.Schema.XmlSeverityType.Warning>합니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> 스키마에 대해 XML 문서의 유효성을 검사할 때 오류 및 경고를 캡처해야 하 합니다.  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 이 예제에서는 입력으로 books.xml 파일을 사용합니다.  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 이 예제에서는 입력으로 books.xsd 파일을 사용합니다.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스키마의 include 및 import 요소에서 참조하는 네임스페이스 또는 위치를 확인하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" />를 설정합니다.</summary>
        <value>스키마의 include 및 import 요소에서 참조하는 네임스페이스 또는 위치를 확인하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Xml.XmlResolver> 의 <xref:System.Xml.Schema.XmlSchemaSet> include 및 스키마의 요소를 사용 하 여 스키마가 추가 되 든 가져올 네임 스페이스 또는 위치 참조를 확인 하는 데 사용 되는 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 또는 <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> 메서드.  
  
> [!IMPORTANT]
>  외부 네임 스페이스 또는 위치 참조를 포함, 가져오기 및 redefine 요소의 스키마를 포함 하거나 가져오는 스키마의 기본 URI를 기준으로 확인 됩니다. 예를 들어, 포함 하거나 가져오는 스키마의 기본 URI를 비어 있는 경우 또는 `null`, 외부 위치가 현재 디렉터리를 기준으로 확인 됩니다. <xref:System.Xml.XmlUrlResolver> 클래스는 외부 스키마를 해결 하려면 기본적으로 사용 됩니다. 포함, 가져오기의 해상도 사용 하지 않도록 설정 하 고 스키마의 요소를 다시 정의 설정 합니다 <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A> 속성을 `null`입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>