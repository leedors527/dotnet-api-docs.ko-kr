<Type Name="XmlSchemaValidator" FullName="System.Xml.Schema.XmlSchemaValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="04cf63d5e450e18e75c2f5a14c2218402603f8be" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58744668" /></Metadata><TypeSignature Language="C#" Value="public sealed class XmlSchemaValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlSchemaValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaValidator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlSchemaValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaValidator sealed" />
  <TypeSignature Language="F#" Value="type XmlSchemaValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>XSD(XML 스키마 정의 언어) 스키마 유효성 검사 엔진을 나타냅니다. <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> - 알 수 없거나 신뢰할 수 없는 출처 또는 위치에서 스키마를 사용 하지 마세요. 이렇게 하면 코드의 보안이 손상 됩니다.
> - XML 스키마 (인라인 스키마 포함)는 서비스 거부 공격;에 기본적으로 취약 이러한 신뢰할 수 없는 시나리오에서 허용 하지 않습니다.
> - 스키마 유효성 검사 오류 메시지 및 예외 콘텐츠 모델 또는 스키마 파일에 URI 경로 대 한 중요 한 정보를 노출할 수 있습니다. 신뢰할 수 없는 호출자에 게이 정보를 노출 하지 않도록 주의 해야 합니다.
  
 <xref:System.Xml.Schema.XmlSchemaValidator> 클래스는 밀어넣기 기반 방식으로 XML 스키마에 대해 XML 데이터의 유효성을 검사할 수 있는 효과적인 고성능 메커니즘을 제공합니다. 예를 들어, <xref:System.Xml.Schema.XmlSchemaValidator> 클래스를 사용하면 XML 문서로 serialize한 다음 유효성 검사 XML 판독기를 사용하여 문서를 다시 구문 분석할 필요 없이 내부에서 직접 XML Infoset의 유효성을 검사할 수 있습니다. <xref:System.Xml.Schema.XmlSchemaValidator> 클래스 사용자 지정 XML 데이터 원본 또는 유효성 검사 XML 작성기를 빌드하는 방법으로 유효성 검사 엔진을 빌드하는 데 사용할 수도 있습니다.  
  
 에 대 한 자세한 내용은 합니다 <xref:System.Xml.Schema.XmlSchemaValidator> 클래스를 참조 하십시오 합니다 [XmlSchemaValidator 밀어넣기 기반 유효성 검사](~/docs/standard/data/xml/xmlschemavalidator-push-based-validation.md) 항목입니다.  
  
> [!IMPORTANT]
> <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 하 고 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 의 유효성 검사 플래그는 <xref:System.Xml.Schema.XmlSchemaValidator> 개체 집합에는 기본값이 될. 또한 합니다 <xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A> 의 속성을 <xref:System.Xml.Schema.XmlSchemaValidator> 개체가 `null` 기본적으로. 결과적으로, 외부 스키마 참조를 포함 하거나 redefine 요소는 확인 되지 않습니다 기본적으로 합니다.   
  
## Examples  
 다음 예에서는 유효성을 검사 합니다 `contosoBooks.xml` 에 대 한 파일을 `contosoBooks.xsd` 스키마. 이 예제에서는 <xref:System.Xml.Serialization.XmlSerializer> 클래스를 사용하여 `contosoBooks.xml` 파일을 deserialize하고 노드 값을 <xref:System.Xml.Schema.XmlSchemaValidator> 클래스의 메서드에 전달합니다.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 이 예제에서는 `contosoBooks.xml` 파일을 입력으로 사용합니다.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 이 예제에서는 또한 `contosoBooks.xsd`를 입력으로 사용합니다.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <related type="Article" href="https://msdn.microsoft.com/library/911d4460-dd91-4958-85b2-2ca3299f9ec6">XmlSchemaValidator 푸시 기반 유효성 검사</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaValidator (System.Xml.XmlNameTable nameTable, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.IXmlNamespaceResolver namespaceResolver, System.Xml.Schema.XmlSchemaValidationFlags validationFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable, class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.IXmlNamespaceResolver namespaceResolver, valuetype System.Xml.Schema.XmlSchemaValidationFlags validationFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable, schemas As XmlSchemaSet, namespaceResolver As IXmlNamespaceResolver, validationFlags As XmlSchemaValidationFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaValidator(System::Xml::XmlNameTable ^ nameTable, System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::IXmlNamespaceResolver ^ namespaceResolver, System::Xml::Schema::XmlSchemaValidationFlags validationFlags);" />
      <MemberSignature Language="F#" Value="new System.Xml.Schema.XmlSchemaValidator : System.Xml.XmlNameTable * System.Xml.Schema.XmlSchemaSet * System.Xml.IXmlNamespaceResolver * System.Xml.Schema.XmlSchemaValidationFlags -&gt; System.Xml.Schema.XmlSchemaValidator" Usage="new System.Xml.Schema.XmlSchemaValidator (nameTable, schemas, namespaceResolver, validationFlags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
        <Parameter Name="validationFlags" Type="System.Xml.Schema.XmlSchemaValidationFlags" />
      </Parameters>
      <Docs>
        <param name="nameTable">원자화된 문자열 형식의 요소 및 특성 이름이 포함된 <see cref="T:System.Xml.XmlNameTable" /> 개체입니다.</param>
        <param name="schemas">유효성 검사에 사용할 XSD(XML 스키마 정의 언어) 스키마가 포함된 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다.</param>
        <param name="namespaceResolver">유효성을 검사하는 동안 발견된 네임스페이스를 확인하는 데 사용하는 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체입니다.</param>
        <param name="validationFlags">스키마 유효성 검사 옵션을 지정하는 <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /> 값입니다.</param>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A> 생성자입니다.  
  
-   내용의 합니다 <xref:System.Xml.Schema.XmlSchemaSet> 매개 변수는 내부에 복사 됩니다 <xref:System.Xml.Schema.XmlSchemaSet> 개체 때 합니다 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 또는 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 유효성 검사 옵션을 설정 합니다. 결과적으로, 입력 변경 <xref:System.Xml.Schema.XmlSchemaSet> 개체 유효성 검사 중에 유효성 검사의 결과 영향을 주지 않습니다.  
  
-   경우는 <xref:System.Xml.Schema.XmlSchemaSet> 지정 된 매개 변수를 컴파일되지 않은, 해당 <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> 메서드가 호출 됩니다.  
  
-   합니다 <xref:System.Xml.IXmlNamespaceResolver> 매개 변수는 유효성을 검사 하는 것이 특히 `xs:QName` 형식입니다. 합니다 <xref:System.Xml.Schema.XmlSchemaValidator> 클래스의 범위 내 네임 스페이스를 복사 하지 않습니다는 <xref:System.Xml.IXmlNamespaceResolver> 개체 하지만 대신에 대 한 참조를 보유 합니다. 이렇게 하면 새 네임 스페이스에 추가할 수 있습니다.는 <xref:System.Xml.IXmlNamespaceResolver> 유효성 검사 프로세스 중에 개체입니다.  
  
> [!IMPORTANT]
>  <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 하 고 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 의 유효성 검사 플래그는 <xref:System.Xml.Schema.XmlSchemaValidator> 개체 집합에는 기본값이 될. 또한 합니다 <xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A> 의 속성을 <xref:System.Xml.Schema.XmlSchemaValidator> 개체가 `null` 기본적으로. 결과적으로, 외부 스키마 참조를 포함 하거나 redefine 요소는 확인 되지 않습니다 기본적으로 합니다.  
  
   
  
## Examples  
 예는 <xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A> 생성자를 참조 합니다 <xref:System.Xml.Schema.XmlSchemaValidator> 클래스 참조 항목입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">지정된 매개 변수 중 하나 이상이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaException"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> 매개 변수에 포함된 스키마를 컴파일하는 동안 오류가 발생한 경우</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaSet" />
        <altmember cref="T:System.Xml.IXmlNamespaceResolver" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="AddSchema">
      <MemberSignature Language="C#" Value="public void AddSchema (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSchema(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddSchema (schema As XmlSchema)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddSchema(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.AddSchema : System.Xml.Schema.XmlSchema -&gt; unit" Usage="xmlSchemaValidator.AddSchema schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">유효성 검사에 사용되는 스키마 집합에 추가할 <see cref="T:System.Xml.Schema.XmlSchema" /> 개체입니다.</param>
        <summary>유효성 검사에 사용되는 스키마 집합에 XSD(XML 스키마 정의 언어) 스키마를 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A> 메서드.  
  
-   <xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A> 유효성을 검사할 XML 문서에 인라인 XML 스키마의 효과 시뮬레이션 하기 위해 메서드를 사용할 수 있습니다.  
  
-   <xref:System.Xml.Schema.XmlSchema> 매개 변수의 대상 네임스페이스는 이미 <xref:System.Xml.Schema.XmlSchemaValidator> 개체에 발생한 요소나 특성의 대상 네임스페이스와 달라야 합니다.  
  
-   경우는 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 유효성 검사 옵션을 설정 하지 않으면는 <xref:System.Xml.Schema.XmlSchemaValidator.AddSchema%2A> 메서드는 아무 작업도 수행 하지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">지정된 <see cref="T:System.Xml.Schema.XmlSchema" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><see cref="T:System.Xml.Schema.XmlSchema" /> 매개 변수의 대상 네임스페이스가 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 개체에서 이미 발견한 요소 또는 특성의 대상 네임스페이스와 일치하는 경우</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaException"><see cref="T:System.Xml.Schema.XmlSchema" /> 매개 변수가 잘못된 경우</exception>
        <altmember cref="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)" />
        <altmember cref="T:System.Xml.Schema.XmlSchema" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="EndValidation">
      <MemberSignature Language="C#" Value="public void EndValidation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndValidation() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndValidation ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndValidation();" />
      <MemberSignature Language="F#" Value="member this.EndValidation : unit -&gt; unit" Usage="xmlSchemaValidator.EndValidation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>유효성 검사를 끝내고 전체 XML 문서에서 identity 제약 조건을 확인합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A> 메서드는 유효성 검사를 종료 하 고 전체 XML 문서에 대 한 identity 제약 조건 확인을 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> 유효성 검사 옵션을 설정 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">XML 문서에 identity 제약 조건 오류가 있는 경우</exception>
        <altmember cref="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="GetExpectedAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaAttribute[] GetExpectedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaAttribute[] GetExpectedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExpectedAttributes () As XmlSchemaAttribute()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Xml::Schema::XmlSchemaAttribute ^&gt; ^ GetExpectedAttributes();" />
      <MemberSignature Language="F#" Value="member this.GetExpectedAttributes : unit -&gt; System.Xml.Schema.XmlSchemaAttribute[]" Usage="xmlSchemaValidator.GetExpectedAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaAttribute[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 요소 컨텍스트에 나타날 수 있는 특성을 반환합니다.</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 개체의 배열이거나, 나타날 수 있는 특성이 없는 경우 빈 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A> 메서드.  
  
-   경우는 <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A> 직후 메서드는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A> 메서드, XML 문서에 나타날 수 있는 모든 특성이 반환 됩니다.  
  
-   경우는 <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes%2A> 메서드는 하나 이상의 호출 후의 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> 메서드를 현재 요소에 대 한 유효성 검사 아직 하지 않은 특성이 반환 됩니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpectedParticles">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaParticle[] GetExpectedParticles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaParticle[] GetExpectedParticles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExpectedParticles () As XmlSchemaParticle()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Xml::Schema::XmlSchemaParticle ^&gt; ^ GetExpectedParticles();" />
      <MemberSignature Language="F#" Value="member this.GetExpectedParticles : unit -&gt; System.Xml.Schema.XmlSchemaParticle[]" Usage="xmlSchemaValidator.GetExpectedParticles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaParticle[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 요소 컨텍스트에 나타날 수 있는 파티클을 반환합니다.</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchemaParticle" /> 개체의 배열이거나, 나타날 수 있는 파티클이 없는 경우 빈 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> 메서드가 반환할 수 있는 유효한 파티클은 <xref:System.Xml.Schema.XmlSchemaElement> 및 <xref:System.Xml.Schema.XmlSchemaAny> 클래스의 인스턴스입니다.  
  
 내용 모델의 compositor가 `xs:sequence`인 경우 시퀀스에서 다음 파티클만 반환됩니다. 내용 모델의 compositor가 `xs:all` 또는 `xs:choice`인 경우 현재 요소 컨텍스트에서 따를 수 있는 유효한 파티클이 모두 반환됩니다.  
  
 예를 들어, XSD(XML 스키마 정의 언어) 스키마 및 이 스키마를 따르는 XML 문서에서 `book` 요소의 유효성을 검사한 후에는 `book` 요소가 현재 요소 컨텍스트입니다. <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> 메서드는 <xref:System.Xml.Schema.XmlSchemaElement> 요소를 나타내는 단일 `title` 개체가 포함된 배열을 반환합니다. 유효성 검사 컨텍스트가 `title` 요소인 경우 <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> 메서드는 빈 배열을 반환합니다. <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> 요소의 유효성을 검사한 후 `title` 요소의 유효성을 검사하기 전에 `description` 메서드를 호출하면 <xref:System.Xml.Schema.XmlSchemaElement> 요소를 나타내는 단일 `description` 개체가 포함된 배열이 반환됩니다. <xref:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles%2A> 요소의 유효성을 검사한 후 `description` 메서드를 호출하면 와일드카드를 나타내는 단일 <xref:System.Xml.Schema.XmlSchemaAny> 개체가 포함된 배열이 반환됩니다.  
  
```vb  
Dim reader As XmlReader =  XmlReader.Create("input.xml")   
  
Dim schemaSet As XmlSchemaSet =  New XmlSchemaSet()   
schemaSet.Add(Nothing, "schema.xsd")  
Dim manager As XmlNamespaceManager =  New XmlNamespaceManager(reader.NameTable)   
  
Dim validator As XmlSchemaValidator =  New XmlSchemaValidator(reader.NameTable,schemaSet,manager,XmlSchemaValidationFlags.None)  
validator.Initialize()  
  
validator.ValidateElement("book", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
For Each element As XmlSchemaElement In validator.GetExpectedParticles()  
    Console.WriteLine(element.Name)  
Next  
  
validator.ValidateElement("title", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
For Each element As XmlSchemaElement In validator.GetExpectedParticles()  
    Console.WriteLine(element.Name)  
Next  
validator.ValidateEndElement(Nothing)  
  
For Each element As XmlSchemaElement In validator.GetExpectedParticles()  
    Console.WriteLine(element.Name)  
Next  
  
validator.ValidateElement("description", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
validator.ValidateEndElement(Nothing)  
  
For Each particle As XmlSchemaParticle In validator.GetExpectedParticles()  
    Console.WriteLine(particle.GetType())  
Next  
  
validator.ValidateElement("namespace", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
validator.ValidateEndElement(Nothing)  
  
validator.ValidateEndElement(Nothing)  
```  
  
```csharp  
XmlReader reader = XmlReader.Create("input.xml");  
  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "schema.xsd");  
XmlNamespaceManager manager = new XmlNamespaceManager(reader.NameTable);  
  
XmlSchemaValidator validator = new XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None);  
validator.Initialize();  
  
validator.ValidateElement("book", "", null);  
  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
foreach (XmlSchemaElement element in validator.GetExpectedParticles())  
{  
    Console.WriteLine(element.Name);  
}  
  
validator.ValidateElement("title", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
foreach (XmlSchemaElement element in validator.GetExpectedParticles())  
{  
    Console.WriteLine(element.Name);  
}  
validator.ValidateEndElement(null);  
  
foreach (XmlSchemaElement element in validator.GetExpectedParticles())  
{  
    Console.WriteLine(element.Name);  
}  
  
validator.ValidateElement("description", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
validator.ValidateEndElement(null);  
  
foreach (XmlSchemaParticle particle in validator.GetExpectedParticles())  
{  
    Console.WriteLine(particle.GetType());  
}  
  
validator.ValidateElement("namespace", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
validator.ValidateEndElement(null);  
  
validator.ValidateEndElement(null);  
```  
  
 이 예제에서는 다음 XML을 입력으로 사용합니다.  
  
 `<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">`  
  
 `<xs:element name="book">`  
  
 `<xs:complexType>`  
  
 `<xs:sequence>`  
  
 `<xs:element name="title" type="xs:string" />`  
  
 `<xs:element name="description" type="xs:string" />`  
  
 `<xs:any processContents ="lax"/>`  
  
 `</xs:sequence>`  
  
 `</xs:complexType>`  
  
 `</xs:element>`  
  
 `</xs:schema>`  
  
 이 예제에서는 다음 XSD 스키마를 입력으로 사용합니다.  
  
 `<book>`  
  
 `<title>My Book</title>`  
  
 `<description>My Book's Description</description>`  
  
 `<namespace>System.Xml.Schema</namespace>`  
  
 `</book>`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaParticle" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaElement" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaAny" />
      </Docs>
    </Member>
    <Member MemberName="GetUnspecifiedDefaultAttributes">
      <MemberSignature Language="C#" Value="public void GetUnspecifiedDefaultAttributes (System.Collections.ArrayList defaultAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetUnspecifiedDefaultAttributes(class System.Collections.ArrayList defaultAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetUnspecifiedDefaultAttributes (defaultAttributes As ArrayList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetUnspecifiedDefaultAttributes(System::Collections::ArrayList ^ defaultAttributes);" />
      <MemberSignature Language="F#" Value="member this.GetUnspecifiedDefaultAttributes : System.Collections.ArrayList -&gt; unit" Usage="xmlSchemaValidator.GetUnspecifiedDefaultAttributes defaultAttributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="defaultAttributes" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="defaultAttributes">요소 컨텍스트에서 유효성 검사를 수행하는 동안 발견되지 않은 특성에 대해 <see cref="T:System.Collections.ArrayList" /> 개체로 채울 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />입니다.</param>
        <summary>기본 특성에 대한 identity 제약 조건의 유효성을 검사하고, 요소 컨텍스트에서 <see cref="T:System.Collections.ArrayList" /> 메서드를 사용하여 아직 유효성이 검사되지 않고 기본값을 사용하는 모든 특성에 대해 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 개체로 지정된 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />를 채웁니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> 메서드를 사용 하 여 현재 요소의 모든 특성을 확인 한 후 호출 되어야 합니다는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> 메서드. 유효성을 검사 중인 XML 문서에 삽입할 기본 특성을 결정하려면 <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> 메서드를 사용해야 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ArrayList" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Initialize">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 개체의 상태를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Initialize();" />
      <MemberSignature Language="F#" Value="member this.Initialize : unit -&gt; unit" Usage="xmlSchemaValidator.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 개체의 상태를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> 메서드는 생성 후 즉시 호출 하는 경우 유효한 에서만 <xref:System.Xml.Schema.XmlSchemaValidator> 개체를 호출한 후 또는 <xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A>합니다.  
  
   
  
## Examples  
 다음 예에서는 유효성을 검사 합니다 `contosoBooks.xml` 에 대 한 파일을 `contosoBooks.xsd` 스키마. 이 예제에서는 <xref:System.Xml.Serialization.XmlSerializer> 클래스를 사용하여 `contosoBooks.xml` 파일을 deserialize하고 노드 값을 <xref:System.Xml.Schema.XmlSchemaValidator> 클래스의 메서드에 전달합니다.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 이 예제에서는 `contosoBooks.xml` 파일을 입력으로 사용합니다.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 이 예제에서는 또한 `contosoBooks.xsd`를 입력으로 사용합니다.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> 개체를 만든 직후 또는 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />을 호출한 후가 아닌 시점에 <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> 메서드를 호출한 경우</exception>
        <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (System.Xml.Schema.XmlSchemaObject partialValidationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Initialize(class System.Xml.Schema.XmlSchemaObject partialValidationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize (partialValidationType As XmlSchemaObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Initialize(System::Xml::Schema::XmlSchemaObject ^ partialValidationType);" />
      <MemberSignature Language="F#" Value="member this.Initialize : System.Xml.Schema.XmlSchemaObject -&gt; unit" Usage="xmlSchemaValidator.Initialize partialValidationType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partialValidationType" Type="System.Xml.Schema.XmlSchemaObject" />
      </Parameters>
      <Docs>
        <param name="partialValidationType">부분 유효성 검사를 위해 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 개체의 유효성 검사 컨텍스트를 초기화하는 데 사용할 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />, <see cref="T:System.Xml.Schema.XmlSchemaType" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />입니다.</param>
        <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />를 사용하여 부분 유효성 검사를 위해 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 개체의 상태를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A>를 매개 변수로 사용하는 <xref:System.Xml.Schema.XmlSchemaObject> 메서드는 부분 유효성 검사를 위해 <xref:System.Xml.Schema.XmlSchemaValidator> 개체를 시작 상태로 초기화합니다.  
  
   
  
## Examples  
 다음 예제에서는 부분 유효성 검사를 위해 <xref:System.Xml.Schema.XmlSchemaObject> 메서드를 사용하여 <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A>를 초기화합니다. `orderNumber` 개체의 <xref:System.Xml.XmlQualifiedName> 속성이 반환하는 <xref:System.Xml.Schema.XmlSchemaObjectTable> 컬렉션에서 <xref:System.Xml.Schema.XmlSchemaSet.GlobalElements%2A>으로 스키마 요소를 선택하여 <xref:System.Xml.Schema.XmlSchemaSet> 스키마 요소를 전달합니다. 그러면 <xref:System.Xml.Schema.XmlSchemaValidator> 개체가 이 특정 요소의 유효성을 검사합니다.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "schema.xsd")  
schemaSet.Compile()  
Dim nameTable As NameTable = New NameTable()  
Dim manager As XmlNamespaceManager = New XmlNamespaceManager(nameTable)  
  
Dim validator As XmlSchemaValidator = New XmlSchemaValidator(nameTable, schemaSet, manager, XmlSchemaValidationFlags.None)  
validator.Initialize(schemaSet.GlobalElements.Item(New XmlQualifiedName("orderNumber")))  
  
validator.ValidateElement("orderNumber", "", Nothing)  
validator.GetUnspecifiedDefaultAttributes(New ArrayList())  
validator.ValidateEndOfAttributes(Nothing)  
validator.ValidateText("123")  
validator.ValidateEndElement(Nothing)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "schema.xsd");  
schemaSet.Compile();  
NameTable nameTable = new NameTable();  
XmlNamespaceManager manager = new XmlNamespaceManager(nameTable);  
  
XmlSchemaValidator validator = new XmlSchemaValidator(nameTable, schemaSet, manager, XmlSchemaValidationFlags.None);  
validator.Initialize(schemaSet.GlobalElements[new XmlQualifiedName("orderNumber")]);  
  
validator.ValidateElement("orderNumber", "", null);  
validator.GetUnspecifiedDefaultAttributes(new ArrayList());  
validator.ValidateEndOfAttributes(null);  
validator.ValidateText("123");  
validator.ValidateEndElement(null);  
```  
  
 이 예제에서는 다음 XML 스키마를 입력으로 사용합니다.  
  
 `<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">`  
  
 `<xs:element name="orderNumber" type="xs:int" />`  
  
 `</xs:schema>`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> 개체를 만든 직후 또는 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />을 호출한 후가 아닌 시점에 <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> 메서드를 호출한 경우</exception>
        <exception cref="T:System.ArgumentException"><see cref="T:System.Xml.Schema.XmlSchemaObject" /> 매개 변수가 <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 개체가 아닌 경우</exception>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchemaObject" /> 매개 변수는 <see langword="null" />일 수 없습니다.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaObject" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaElement" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaAttribute" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaType" />
      </Docs>
    </Member>
    <Member MemberName="LineInfoProvider">
      <MemberSignature Language="C#" Value="public System.Xml.IXmlLineInfo LineInfoProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.IXmlLineInfo LineInfoProvider" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property LineInfoProvider As IXmlLineInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::IXmlLineInfo ^ LineInfoProvider { System::Xml::IXmlLineInfo ^ get(); void set(System::Xml::IXmlLineInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LineInfoProvider : System.Xml.IXmlLineInfo with get, set" Usage="System.Xml.Schema.XmlSchemaValidator.LineInfoProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.IXmlLineInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>유효성을 검사할 XML 노드의 줄 번호 정보를 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.IXmlLineInfo" /> 개체</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   모든 줄 정보를 보고 <xref:System.Xml.Schema.XmlSchemaValidationException> 유효성 검사 프로세스 중에 throw 됩니다.  
  
-   기본값 <xref:System.Xml.IXmlLineInfo> 에서 반환 된 개체를 <xref:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider%2A> 속성에 대 한 0을 반환 합니다 <xref:System.Xml.IXmlLineInfo.LineNumber%2A> 및 <xref:System.Xml.IXmlLineInfo.LinePosition%2A> 속성.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.IXmlLineInfo" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
      </Docs>
    </Member>
    <Member MemberName="SkipToEndElement">
      <MemberSignature Language="C#" Value="public void SkipToEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToEndElement(class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToEndElement (schemaInfo As XmlSchemaInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToEndElement(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.SkipToEndElement : System.Xml.Schema.XmlSchemaInfo -&gt; unit" Usage="xmlSchemaValidator.SkipToEndElement schemaInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">현재 요소 콘텐츠를 성공적으로 건너뛴 경우 속성이 설정되는 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 개체입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
        <summary>현재 요소 내용의 유효성 검사를 생략하고 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 개체를 준비하여 부모 요소의 컨텍스트에서 내용의 유효성을 검사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement%2A> 메서드.  
  
-   합니다 <xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement%2A> 메서드는 현재 요소 내용의 유효성 검사를 건너뜁니다 고 준비 합니다 <xref:System.Xml.Schema.XmlSchemaValidator> 부모 요소의 컨텍스트에서 내용의 유효성을 검사 하려면 개체; 현재 요소의 모든 자식에 대 한 유효성 검사를 생략 하는 것과 같습니다 차례로 호출 된 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> 메서드.  
  
-   현재 요소 콘텐츠를 건너뛴 경우 합니다 <xref:System.Xml.Schema.XmlSchemaInfo> 지정 하는 경우 개체의 <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> 속성이 <xref:System.Xml.Schema.XmlSchemaValidity.NotKnown>합니다.  
  
> [!NOTE]
>  건너뛴 콘텐츠 유효성 검사 오류가 보고 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />를 호출한 후 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />를 호출한 경우가 여기에 해당합니다.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="SourceUri">
      <MemberSignature Language="C#" Value="public Uri SourceUri { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri SourceUri" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.SourceUri" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceUri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ SourceUri { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceUri : Uri with get, set" Usage="System.Xml.Schema.XmlSchemaValidator.SourceUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>유효성을 검사할 XML 노드의 소스 URI를 가져오거나 설정합니다.</summary>
        <value>유효성을 검사할 XML 노드의 소스 URI를 나타내는 <see cref="T:System.Uri" /> 개체입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   URI에서 보고 되는 소스 <xref:System.Xml.Schema.XmlSchemaValidationException> 유효성 검사 프로세스 중에 throw 됩니다.  
  
-   경우는 <xref:System.Xml.Schema.XmlSchemaValidator.SourceUri%2A> 속성이 설정 되지 않은, XML 문서에 대 한 파일 이름은 <xref:System.String.Empty> 유효성 검사 오류 메시지에서입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>현재 요소 컨텍스트에서 특성의 유효성을 검사합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateAttribute">
      <MemberSignature Language="C#" Value="public object ValidateAttribute (string localName, string namespaceUri, string attributeValue, System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateAttribute(string localName, string namespaceUri, string attributeValue, class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateAttribute (localName As String, namespaceUri As String, attributeValue As String, schemaInfo As XmlSchemaInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateAttribute(System::String ^ localName, System::String ^ namespaceUri, System::String ^ attributeValue, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.ValidateAttribute : string * string * string * System.Xml.Schema.XmlSchemaInfo -&gt; obj" Usage="xmlSchemaValidator.ValidateAttribute (localName, namespaceUri, attributeValue, schemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="localName">유효성을 검사할 특성의 로컬 이름입니다.</param>
        <param name="namespaceUri">유효성을 검사할 특성의 네임스페이스 URI입니다.</param>
        <param name="attributeValue">유효성을 검사할 특성의 값입니다.</param>
        <param name="schemaInfo">특성의 유효성이 성공적으로 검사될 경우 속성이 설정되는 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 개체입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
        <summary>현재 요소 컨텍스트에서 특성의 이름, 네임스페이스 URI 및 값에 대해 유효성을 검사합니다.</summary>
        <returns>유효성이 검사된 특성의 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> 메서드.  
  
-   합니다 <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> 메서드를 사용 하 여 현재 요소의 모든 특성을 확인 한 후 호출 되어야 합니다는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> 메서드.  
  
-   경우는 <xref:System.Xml.Schema.XmlSchemaAttribute> 개체에 전달 된를 <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> 메서드를 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> 메서드 특성에 대해 유효성을 검사를 <xref:System.Xml.Schema.XmlSchemaAttribute> 개체입니다.  
  
-   현재 요소 컨텍스트에서 특성 확인 되는 경우는 <xref:System.Xml.Schema.XmlSchemaInfo> 지정 하는 경우 개체의 <xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A>를 <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>를 <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>, 및 <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> 속성 유효성 검사의 결과 사용 하 여 설정 합니다.  
  
   
  
## Examples  
 다음 예에서는 유효성을 검사 합니다 `contosoBooks.xml` 에 대 한 파일을 `contosoBooks.xsd` 스키마. 이 예제에서는 <xref:System.Xml.Serialization.XmlSerializer> 클래스를 사용하여 `contosoBooks.xml` 파일을 deserialize하고 노드 값을 <xref:System.Xml.Schema.XmlSchemaValidator> 클래스의 메서드에 전달합니다.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 이 예제에서는 `contosoBooks.xml` 파일을 입력으로 사용합니다.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 이 예제에서는 또한 `contosoBooks.xsd`를 입력으로 사용합니다.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">특성이 현재 요소 컨텍스트에서 유효하지 않은 경우</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />를 호출한 후 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />를 호출한 경우가 여기에 해당합니다.</exception>
        <exception cref="T:System.ArgumentNullException">지정된 매개 변수 중 하나 이상이 <see langword="null" />인 경우</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="ValidateAttribute">
      <MemberSignature Language="C#" Value="public object ValidateAttribute (string localName, string namespaceUri, System.Xml.Schema.XmlValueGetter attributeValue, System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateAttribute(string localName, string namespaceUri, class System.Xml.Schema.XmlValueGetter attributeValue, class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateAttribute (localName As String, namespaceUri As String, attributeValue As XmlValueGetter, schemaInfo As XmlSchemaInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateAttribute(System::String ^ localName, System::String ^ namespaceUri, System::Xml::Schema::XmlValueGetter ^ attributeValue, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.ValidateAttribute : string * string * System.Xml.Schema.XmlValueGetter * System.Xml.Schema.XmlSchemaInfo -&gt; obj" Usage="xmlSchemaValidator.ValidateAttribute (localName, namespaceUri, attributeValue, schemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.Xml.Schema.XmlValueGetter" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="localName">유효성을 검사할 특성의 로컬 이름입니다.</param>
        <param name="namespaceUri">유효성을 검사할 특성의 네임스페이스 URI입니다.</param>
        <param name="attributeValue">특성 값을 특성의 XSD(XML 스키마 정의 언어) 형식과 호환되는 CLR(공용 언어 런타임) 형식으로 전달하는 데 사용되는 <see cref="T:System.Xml.Schema.XmlValueGetter" /><see langword="delegate" />입니다.</param>
        <param name="schemaInfo">특성의 유효성이 성공적으로 검사될 경우 속성이 설정되는 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 개체입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
        <summary>현재 요소 컨텍스트에서 특성의 이름, 네임스페이스 URI 및 값에 대해 유효성을 검사합니다.</summary>
        <returns>유효성이 검사된 특성의 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> 메서드.  
  
-   합니다 <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> 메서드를 사용 하 여 현재 요소의 모든 특성을 확인 한 후 호출 되어야 합니다는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> 메서드.  
  
-   경우는 <xref:System.Xml.Schema.XmlSchemaAttribute> 개체에 전달 된를 <xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> 메서드를 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> 메서드 특성에 대해 유효성을 검사를 <xref:System.Xml.Schema.XmlSchemaAttribute> 개체입니다.  
  
-   현재 요소 컨텍스트에서 특성 확인 되는 경우는 <xref:System.Xml.Schema.XmlSchemaInfo> 지정 하는 경우 개체의 <xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A>를 <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>를 <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>, 및 <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> 속성 유효성 검사의 결과 사용 하 여 설정 합니다.  
  
   
  
## Examples  
 다음 예에서는 유효성을 검사 합니다 `contosoBooks.xml` 에 대 한 파일을 `contosoBooks.xsd` 스키마. 이 예제에서는 <xref:System.Xml.Serialization.XmlSerializer> 클래스를 사용하여 `contosoBooks.xml` 파일을 deserialize하고 노드 값을 <xref:System.Xml.Schema.XmlSchemaValidator> 클래스의 메서드에 전달합니다.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 이 예제에서는 `contosoBooks.xml` 파일을 입력으로 사용합니다.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 이 예제에서는 또한 `contosoBooks.xsd`를 입력으로 사용합니다.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">특성이 현재 요소 컨텍스트에서 유효하지 않은 경우</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />를 호출한 후 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />를 호출한 경우가 여기에 해당합니다.</exception>
        <exception cref="T:System.ArgumentNullException">지정된 매개 변수 중 하나 이상이 <see langword="null" />인 경우</exception>
        <altmember cref="T:System.Xml.Schema.XmlValueGetter" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>현재 컨텍스트에서 요소의 유효성을 검사합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateElement">
      <MemberSignature Language="C#" Value="public void ValidateElement (string localName, string namespaceUri, System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateElement(string localName, string namespaceUri, class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateElement (localName As String, namespaceUri As String, schemaInfo As XmlSchemaInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateElement(System::String ^ localName, System::String ^ namespaceUri, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.ValidateElement : string * string * System.Xml.Schema.XmlSchemaInfo -&gt; unit" Usage="xmlSchemaValidator.ValidateElement (localName, namespaceUri, schemaInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="localName">유효성을 검사할 요소의 로컬 이름입니다.</param>
        <param name="namespaceUri">유효성을 검사할 요소의 네임스페이스 URI입니다.</param>
        <param name="schemaInfo">요소 이름의 유효성이 성공적으로 검사될 경우 속성이 설정되는 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 개체입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
        <summary>현재 컨텍스트에서 요소의 유효성을 검사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A> 메서드.  
  
-   요소 이름을 현재 컨텍스트에서 유효성이 성공적으로 검사 하는 경우는 <xref:System.Xml.Schema.XmlSchemaInfo> 지정 하는 경우 개체의 <xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A>를 <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>를 <xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A>, 및 <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> 속성 유효성 검사의 결과 사용 하 여 설정 합니다.  
  
-   요소 이름 또는 특성 중 하나라도 잘못 된 경우 현재 컨텍스트를는 <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> 속성이로 설정 되어 <xref:System.Xml.Schema.XmlSchemaValidity.Invalid>이 고 그렇지 않으면 합니다 <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> 속성이 <xref:System.Xml.Schema.XmlSchemaValidity.NotKnown>.  
  
   
  
## Examples  
 다음 예에서는 유효성을 검사 합니다 `contosoBooks.xml` 에 대 한 파일을 `contosoBooks.xsd` 스키마. 이 예제에서는 <xref:System.Xml.Serialization.XmlSerializer> 클래스를 사용하여 `contosoBooks.xml` 파일을 deserialize하고 노드 값을 <xref:System.Xml.Schema.XmlSchemaValidator> 클래스의 메서드에 전달합니다.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 이 예제에서는 `contosoBooks.xml` 파일을 입력으로 사용합니다.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 이 예제에서는 또한 `contosoBooks.xsd`를 입력으로 사용합니다.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">요소 이름이 현재 컨텍스트에서 유효하지 않은 경우</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" />를 호출한 후 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 메서드를 호출하는 경우가 여기에 해당합니다.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
      </Docs>
    </Member>
    <Member MemberName="ValidateElement">
      <MemberSignature Language="C#" Value="public void ValidateElement (string localName, string namespaceUri, System.Xml.Schema.XmlSchemaInfo schemaInfo, string xsiType, string xsiNil, string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateElement(string localName, string namespaceUri, class System.Xml.Schema.XmlSchemaInfo schemaInfo, string xsiType, string xsiNil, string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateElement (localName As String, namespaceUri As String, schemaInfo As XmlSchemaInfo, xsiType As String, xsiNil As String, xsiSchemaLocation As String, xsiNoNamespaceSchemaLocation As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateElement(System::String ^ localName, System::String ^ namespaceUri, System::Xml::Schema::XmlSchemaInfo ^ schemaInfo, System::String ^ xsiType, System::String ^ xsiNil, System::String ^ xsiSchemaLocation, System::String ^ xsiNoNamespaceSchemaLocation);" />
      <MemberSignature Language="F#" Value="member this.ValidateElement : string * string * System.Xml.Schema.XmlSchemaInfo * string * string * string * string -&gt; unit" Usage="xmlSchemaValidator.ValidateElement (localName, namespaceUri, schemaInfo, xsiType, xsiNil, xsiSchemaLocation, xsiNoNamespaceSchemaLocation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceUri" Type="System.String" />
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
        <Parameter Name="xsiType" Type="System.String" />
        <Parameter Name="xsiNil" Type="System.String" />
        <Parameter Name="xsiSchemaLocation" Type="System.String" />
        <Parameter Name="xsiNoNamespaceSchemaLocation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">유효성을 검사할 요소의 로컬 이름입니다.</param>
        <param name="namespaceUri">유효성을 검사할 요소의 네임스페이스 URI입니다.</param>
        <param name="schemaInfo">요소 이름의 유효성이 성공적으로 검사될 경우 속성이 설정되는 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 개체입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
        <param name="xsiType">요소의 <c>xsi:Type</c> 특성 값입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
        <param name="xsiNil">요소의 <c>xsi:Nil</c> 특성 값입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
        <param name="xsiSchemaLocation">요소의 <c>xsi:SchemaLocation</c> 특성 값입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
        <param name="xsiNoNamespaceSchemaLocation">요소의 <c>xsi:NoNamespaceSchemaLocation</c> 특성 값입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
        <summary>지정된 <c>xsi:Type</c>, <c>xsi:Nil</c>, <c>xsi:SchemaLocation</c> 및 <c>xsi:NoNamespaceSchemaLocation</c> 특성 값으로 현재 컨텍스트에서 요소의 유효성을 검사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A> 메서드.  
  
-   요소 이름을 현재 컨텍스트에서 유효성이 성공적으로 검사 하는 경우는 <xref:System.Xml.Schema.XmlSchemaInfo> 지정 하는 경우 개체의 <xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A>를 <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>를 <xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A>, 및 <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> 속성 유효성 검사의 결과 사용 하 여 설정 합니다.  
  
-   요소 이름 또는 해당 특성의 모든 유효 하지 않으면 현재 컨텍스트에서 <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> 속성이로 설정 되어 <xref:System.Xml.Schema.XmlSchemaValidity.Invalid>이 고 그렇지 않으면를 <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> 속성이 <xref:System.Xml.Schema.XmlSchemaValidity.NotKnown>합니다.  
  
-   경우는 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 값을 매개 변수로 전달 되지 않았습니다 합니다 <xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A> 생성자 `xsi:SchemaLocation` 및 `xsi:NoNamespaceSchemaLocation` 특성 값은 무시 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">요소 이름이 현재 컨텍스트에서 유효하지 않은 경우</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" />를 호출한 후 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 메서드를 호출하는 경우가 여기에 해당합니다.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateEndElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>단순 콘텐츠를 포함하는 요소에 대해 해당 데이터 형식을 기준으로 요소의 텍스트 콘텐츠가 유효한지 확인하고 복합 콘텐츠를 포함하는 요소에 대해 현재 요소의 콘텐츠가 완전한지 확인합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateEndElement">
      <MemberSignature Language="C#" Value="public object ValidateEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateEndElement(class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateEndElement (schemaInfo As XmlSchemaInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateEndElement(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.ValidateEndElement : System.Xml.Schema.XmlSchemaInfo -&gt; obj" Usage="xmlSchemaValidator.ValidateEndElement schemaInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">요소의 유효성이 성공적으로 검사될 경우 속성이 설정되는 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 개체입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
        <summary>단순 콘텐츠를 포함하는 요소에 대해 해당 데이터 형식을 기준으로 요소의 텍스트 콘텐츠가 유효한지 확인하고 복합 콘텐츠를 포함하는 요소에 대해 현재 요소의 콘텐츠가 완전한지 확인합니다.</summary>
        <returns>요소에 단순 콘텐츠가 있는 경우 요소의 구문 분석되고 형식화된 텍스트 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> 메서드.  
  
-   단순 콘텐츠가 있는 요소에 대 한는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> 메서드 확인 요소의 텍스트 콘텐츠 데이터 형식에 따라 유효 하 고 구문 분석 된 형식화 된 값을 반환 합니다. 요소의 텍스트 콘텐츠에 대 한 이전 호출의 결과에서 가져온 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A>합니다.  
  
-   복합 콘텐츠가 있는 요소에 대 한는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> 메서드는 현재 요소 내용의 전체 인지 확인 합니다.  
  
-   반환 되는 값 요소를 기본 값이 있으면는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> 메서드는 요소에 대 한 기본값입니다.  
  
-   경우는 <xref:System.Xml.Schema.XmlSchemaValidator> 사용 하 여 생성 된 개체를 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> 값을 매개 변수로 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> 요소에 적용 되는 identity 제약 조건 규칙 (있는 경우) 메서드 확인 합니다.  
  
-   현재 컨텍스트에서 요소가 확인 되는 경우는 <xref:System.Xml.Schema.XmlSchemaInfo> 지정 하는 경우 개체의 <xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A>를 <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>, 및 <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> 속성 유효성 검사의 결과 사용 하 여 설정 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">요소의 콘텐츠가 유효하지 않은 경우</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" />를 호출한 후 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 메서드를 호출하는 경우가 여기에 해당합니다.</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEndElement">
      <MemberSignature Language="C#" Value="public object ValidateEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo, object typedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateEndElement(class System.Xml.Schema.XmlSchemaInfo schemaInfo, object typedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateEndElement (schemaInfo As XmlSchemaInfo, typedValue As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateEndElement(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo, System::Object ^ typedValue);" />
      <MemberSignature Language="F#" Value="member this.ValidateEndElement : System.Xml.Schema.XmlSchemaInfo * obj -&gt; obj" Usage="xmlSchemaValidator.ValidateEndElement (schemaInfo, typedValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
        <Parameter Name="typedValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">요소의 텍스트 콘텐츠에 대한 유효성이 성공적으로 검사될 경우 속성이 설정되는 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 개체입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
        <param name="typedValue">요소의 형식화된 텍스트 콘텐츠입니다.</param>
        <summary>지정된 요소의 데이터 형식을 기준으로 해당 요소의 텍스트 콘텐츠가 유효한지 확인합니다.</summary>
        <returns>요소의 구문 분석되고 형식화된 단순 콘텐츠입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  에 대해 유효성을 검사 하는지에 합니다 `xs:key`, `xs:keyref`, 또는 `xs:unique` identity 제약 조건, 사용 하지 마십시오는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> 메서드 오버 로드. 대신, 호출 된 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> 메서드 요소의 값을 전달 합니다. 다음 호출을 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> 를 사용 하는 메서드 오버 로드를 <xref:System.Xml.Schema.XmlSchemaInfo> 인수로, 데이터 형식에 따라 요소의 텍스트 콘텐츠 올바른지 확인 하십시오.  
  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> 메서드.  
  
-   단순 콘텐츠가 있는 요소에 대 한는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A?displayProperty=nameWithType> 메서드 확인 요소의 텍스트 콘텐츠 데이터 형식에 따라 유효 하 고 구문 분석 된 형식화 된 값을 반환 합니다. 요소의 텍스트 콘텐츠는 매개 변수로 전달 된 형식화 된 내용에서 가져옵니다.  
  
-   경우에 대 한 호출을 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> 메서드 이전에 수행한는 <xref:System.InvalidOperationException> throw 됩니다.  
  
-   요소에 복합 콘텐츠가 있는 경우는 <xref:System.InvalidOperationException> throw 됩니다.  
  
-   경우는 <xref:System.Xml.Schema.XmlSchemaValidator> 사용 하 여 생성 된 개체를 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> 값을 매개 변수로 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> 요소에 적용 되는 identity 제약 조건 규칙 (있는 경우) 메서드 확인 합니다.  
  
-   현재 컨텍스트에서 요소가 확인 되는 경우는 <xref:System.Xml.Schema.XmlSchemaInfo> 지정 하는 경우 개체의 <xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A>를 <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>, 및 <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> 속성 유효성 검사의 결과 사용 하 여 설정 합니다.  
  
   
  
## Examples  
 다음 예에서는 유효성을 검사 합니다 `contosoBooks.xml` 에 대 한 파일을 `contosoBooks.xsd` 스키마. 이 예제에서는 <xref:System.Xml.Serialization.XmlSerializer> 클래스를 사용하여 `contosoBooks.xml` 파일을 deserialize하고 노드 값을 <xref:System.Xml.Schema.XmlSchemaValidator> 클래스의 메서드에 전달합니다.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 이 예제에서는 `contosoBooks.xml` 파일을 입력으로 사용합니다.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 이 예제에서는 또한 `contosoBooks.xsd`를 입력으로 사용합니다.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">요소의 텍스트 콘텐츠가 유효하지 않은 경우</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 메서드의 호출 순서가 잘못되거나(예: <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" />를 호출한 후 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />를 호출한 경우), <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 메서드를 이전에 호출했거나, 요소에 복합 콘텐츠가 있는 경우</exception>
        <exception cref="T:System.ArgumentNullException">형식화된 텍스트 콘텐츠 매개 변수가 <see langword="null" />인 경우</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEndOfAttributes">
      <MemberSignature Language="C#" Value="public void ValidateEndOfAttributes (System.Xml.Schema.XmlSchemaInfo schemaInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEndOfAttributes(class System.Xml.Schema.XmlSchemaInfo schemaInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEndOfAttributes (schemaInfo As XmlSchemaInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEndOfAttributes(System::Xml::Schema::XmlSchemaInfo ^ schemaInfo);" />
      <MemberSignature Language="F#" Value="member this.ValidateEndOfAttributes : System.Xml.Schema.XmlSchemaInfo -&gt; unit" Usage="xmlSchemaValidator.ValidateEndOfAttributes schemaInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaInfo" Type="System.Xml.Schema.XmlSchemaInfo" />
      </Parameters>
      <Docs>
        <param name="schemaInfo">요소 컨텍스트의 필수 특성이 모두 있는지를 화인하는 유효성 검사가 성공할 경우 속성이 설정되는 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 개체입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
        <summary>요소 컨텍스트에 필수 특성이 모두 있는지 확인하고 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 개체를 준비하여 요소의 자식 내용의 유효성을 검사합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A> 메서드.  
  
-   합니다 <xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A> 메서드를 하기 전에 항상 호출 해야 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A>합니다.  
  
-   <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes%2A> 요소의 콘텐츠 유효성 검사를 진행 하기 전에 메서드를 호출 해야 합니다.  
  
-   요소 컨텍스트의 필수 특성이 모두 있는 경우에 <xref:System.Xml.Schema.XmlSchemaInfo> 지정 하는 경우 개체의 <xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> 속성이 <xref:System.Xml.Schema.XmlSchemaValidity.Valid>합니다.  
  
   
  
## Examples  
 다음 예에서는 유효성을 검사 합니다 `contosoBooks.xml` 에 대 한 파일을 `contosoBooks.xsd` 스키마. 이 예제에서는 <xref:System.Xml.Serialization.XmlSerializer> 클래스를 사용하여 `contosoBooks.xml` 파일을 deserialize하고 노드 값을 <xref:System.Xml.Schema.XmlSchemaValidator> 클래스의 메서드에 전달합니다.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 이 예제에서는 `contosoBooks.xml` 파일을 입력으로 사용합니다.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 이 예제에서는 또한 `contosoBooks.xsd`를 입력으로 사용합니다.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">현재 요소 컨텍스트의 필수 특성 중 하나 이상이 없는 경우</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />를 호출한 후 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />를 호출한 경우가 여기에 해당합니다.</exception>
        <exception cref="T:System.ArgumentNullException">지정된 매개 변수 중 하나 이상이 <see langword="null" />인 경우</exception>
        <altmember cref="T:System.Xml.Schema.XmlSchemaInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateText">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>현재 요소 컨텍스트에서 텍스트가 허용되는지 확인하고 현재 요소에 단순 내용이 있는지 확인하기 위해 텍스트를 누적합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public void ValidateText (string elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateText(string elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateText (elementValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateText(System::String ^ elementValue);" />
      <MemberSignature Language="F#" Value="member this.ValidateText : string -&gt; unit" Usage="xmlSchemaValidator.ValidateText elementValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementValue">현재 요소 컨텍스트에서 유효성을 검사할 텍스트 <see langword="string" />입니다.</param>
        <summary>지정된 텍스트 <see langword="string" />을 현재 요소 컨텍스트에서 사용할 수 있는지 확인하고, 현재 요소에 단순 콘텐츠가 있는 경우 유효성 검사를 위해 텍스트를 누적시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> 메서드.  
  
-   요소에 단순 콘텐츠를 텍스트 `string` 지정를 호출할 때마다 연결 합니다 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> 때까지 메서드는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> 메서드는. 경우는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> 메서드가 호출 되 면 모든 텍스트의 유효성을 검사 합니다.  
  
-   요소에 복합 콘텐츠가 텍스트가 연결 되지 않습니다 발생 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">지정된 텍스트 <see langword="string" />을 현재 요소 컨텍스트에서 사용할 수 없는 경우</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" />를 호출한 후 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 메서드를 호출하는 경우가 여기에 해당합니다.</exception>
        <exception cref="T:System.ArgumentNullException">텍스트 <see langword="string" /> 매개 변수가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public void ValidateText (System.Xml.Schema.XmlValueGetter elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateText(class System.Xml.Schema.XmlValueGetter elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateText (elementValue As XmlValueGetter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateText(System::Xml::Schema::XmlValueGetter ^ elementValue);" />
      <MemberSignature Language="F#" Value="member this.ValidateText : System.Xml.Schema.XmlValueGetter -&gt; unit" Usage="xmlSchemaValidator.ValidateText elementValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.Xml.Schema.XmlValueGetter" />
      </Parameters>
      <Docs>
        <param name="elementValue">텍스트 값을 특성의 XSD(XML 스키마 정의 언어) 형식과 호환되는 CLR(공용 언어 런타임) 형식으로 전달하는 데 사용되는 <see cref="T:System.Xml.Schema.XmlValueGetter" /><see langword="delegate" />입니다.</param>
        <summary>지정된 <see cref="T:System.Xml.Schema.XmlValueGetter" /> 개체에서 반환된 텍스트를 현재 요소 컨텍스트에서 사용할 수 있는지 확인하고, 현재 요소에 단순 콘텐츠가 있는 경우 유효성 검사를 위해 텍스트를 누적시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음은 사용 하는 경우를 고려해 야 할 중요 한 정보는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> 메서드.  
  
-   요소에 단순 콘텐츠를 텍스트 `string` 지정를 호출할 때마다 연결 합니다 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> 때까지 메서드는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> 메서드는. 경우는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> 메서드가 호출 되 면 모든 텍스트의 유효성을 검사 합니다.  
  
-   요소에 복합 콘텐츠가 텍스트가 연결 되지 않습니다 발생 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">지정된 텍스트 <see langword="string" />을 현재 요소 컨텍스트에서 사용할 수 없는 경우</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" />를 호출한 후 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 메서드를 호출하는 경우가 여기에 해당합니다.</exception>
        <exception cref="T:System.ArgumentNullException">텍스트 <see langword="string" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <altmember cref="T:System.Xml.Schema.XmlValueGetter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateWhitespace">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>현재 요소 컨텍스트에서 공백을 사용할 수 있는지 확인하고, 현재 요소에 단순 콘텐츠가 있는 경우 유효성 검사를 위해 공백을 누적시킵니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateWhitespace">
      <MemberSignature Language="C#" Value="public void ValidateWhitespace (string elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateWhitespace(string elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateWhitespace (elementValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateWhitespace(System::String ^ elementValue);" />
      <MemberSignature Language="F#" Value="member this.ValidateWhitespace : string -&gt; unit" Usage="xmlSchemaValidator.ValidateWhitespace elementValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementValue">현재 요소 컨텍스트에서 유효성을 검사할 공백 <see langword="string" />입니다.</param>
        <summary>지정된 <see langword="string" />에 있는 공백을 현재 요소 컨텍스트에서 사용할 수 있는지 확인하고, 현재 요소에 단순 콘텐츠가 있는 경우 유효성 검사를 위해 공백을 누적시킵니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">현재 요소 컨텍스트에서 공백을 사용할 수 없는 경우</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" />를 호출한 후 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 메서드를 호출하는 경우가 여기에 해당합니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateWhitespace">
      <MemberSignature Language="C#" Value="public void ValidateWhitespace (System.Xml.Schema.XmlValueGetter elementValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateWhitespace(class System.Xml.Schema.XmlValueGetter elementValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateWhitespace (elementValue As XmlValueGetter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateWhitespace(System::Xml::Schema::XmlValueGetter ^ elementValue);" />
      <MemberSignature Language="F#" Value="member this.ValidateWhitespace : System.Xml.Schema.XmlValueGetter -&gt; unit" Usage="xmlSchemaValidator.ValidateWhitespace elementValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementValue" Type="System.Xml.Schema.XmlValueGetter" />
      </Parameters>
      <Docs>
        <param name="elementValue">공백 값을 특성의 XSD(XML 스키마 정의 언어) 형식과 호환되는 CLR(공용 언어 런타임) 형식으로 전달하는 데 사용되는 <see cref="T:System.Xml.Schema.XmlValueGetter" /><see langword="delegate" />입니다.</param>
        <summary>지정된 <see cref="T:System.Xml.Schema.XmlValueGetter" /> 개체에서 반환된 공백을 현재 요소 컨텍스트에서 사용할 수 있는지 확인하고, 현재 요소에 단순 콘텐츠가 있는 경우 유효성 검사를 위해 공백을 누적시킵니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">현재 요소 컨텍스트에서 공백을 사용할 수 없는 경우</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" />를 호출한 후 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 메서드를 호출하는 경우가 여기에 해당합니다.</exception>
        <altmember cref="T:System.Xml.Schema.XmlValueGetter" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스키마 유효성을 검사하는 동안 발생하는 스키마 유효성 검사 경고 및 오류를 받을 <see cref="T:System.Xml.Schema.ValidationEventHandler" />입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 없으면 <xref:System.Xml.Schema.ValidationEventHandler> 지정 된 경우는 <xref:System.Xml.Schema.XmlSchemaValidationException> 사용 하 여 모든 스키마 유효성 검사 오류에 대해 throw 되는 <xref:System.Xml.Schema.XmlSeverityType> 의 값 <xref:System.Xml.Schema.XmlSeverityType.Error>합니다. <xref:System.Xml.Schema.XmlSchemaValidationException> 사용 하 여 유효성 검사 경고에 대 한 throw 되지 않습니다는 <xref:System.Xml.Schema.XmlSeverityType> 의 값 <xref:System.Xml.Schema.XmlSeverityType.Warning>합니다.  
  
   
  
## Examples  
 다음 예에서는 유효성을 검사 합니다 `contosoBooks.xml` 에 대 한 파일을 `contosoBooks.xsd` 스키마. 이 예제에서는 <xref:System.Xml.Serialization.XmlSerializer> 클래스를 사용하여 `contosoBooks.xml` 파일을 deserialize하고 노드 값을 <xref:System.Xml.Schema.XmlSchemaValidator> 클래스의 메서드에 전달합니다.  
  
 [!code-csharp[XmlSchemaValidatorExamples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaValidatorExamples/CS/XmlSchemaValidatorExamples.cs#1)]
 [!code-vb[XmlSchemaValidatorExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaValidatorExamples/VB/XmlSchemaValidatorExamples.vb#1)]  
  
 이 예제에서는 `contosoBooks.xml` 파일을 입력으로 사용합니다.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 이 예제에서는 또한 `contosoBooks.xsd`를 입력으로 사용합니다.  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationException" />
        <altmember cref="T:System.Xml.Schema.XmlSeverityType" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventSender">
      <MemberSignature Language="C#" Value="public object ValidationEventSender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ValidationEventSender" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationEventSender As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ValidationEventSender { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationEventSender : obj with get, set" Usage="System.Xml.Schema.XmlSchemaValidator.ValidationEventSender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>유효성 검사 이벤트의 sender 개체로 보낼 개체를 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Object" />입니다. 기본값은 이 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 유효성 검사 이벤트의 예 참조는 <xref:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler> 이벤트입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Schema.XmlSchemaValidator.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><c>xs:import</c> 및 <c>xs:include</c> 요소뿐만 아니라 <c>xsi:schemaLocation</c> 및 <c>xsi:noNamespaceSchemaLocation</c> 특성을 확인하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" /> 개체를 설정합니다.</summary>
        <value><see cref="T:System.Xml.XmlResolver" /> 개체입니다. 기본값은 <see cref="T:System.Xml.XmlUrlResolver" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> 하 고 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 의 유효성 검사 플래그는 <xref:System.Xml.Schema.XmlSchemaValidator> 개체 집합에는 기본값이 될. 또한 합니다 <xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A> 의 속성을 <xref:System.Xml.Schema.XmlSchemaValidator> 개체가 `null` 기본적으로. 결과적으로, 외부 스키마 참조를 포함 하거나 redefine 요소는 확인 되지 않습니다 기본적으로 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>