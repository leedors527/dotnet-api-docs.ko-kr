<Type Name="XmlArrayItemAttribute" FullName="System.Xml.Serialization.XmlArrayItemAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="df59e75aa5eefaed5a1c2c3dcc0e512ebc75922a" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58698056" /></Metadata><TypeSignature Language="C#" Value="public class XmlArrayItemAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlArrayItemAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlArrayItemAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlArrayItemAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlArrayItemAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type XmlArrayItemAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Serialization</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:System.Xml.Serialization.XmlSerializer" />가 serialize된 배열에 배치할 수 있는 파생 형식을 지정하는 특성을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 제어 하는 특성의 제품군에 속해 방법을 <xref:System.Xml.Serialization.XmlSerializer> serialize 하거나 개체를 deserialize 합니다. 비슷한 특성의 전체 목록은 참조 하세요 [는 XML Serialization을 제어 특성](~/docs/standard/serialization/attributes-that-control-xml-serialization.md)합니다.  
  
 적용할 수 있습니다는 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 공용 읽기/쓰기 멤버 배열을 반환 하거나 하나에 대 한 액세스를 제공 합니다. 필드 컬렉션을 개체의 배열을 반환 하는 예를 들어를 <xref:System.Collections.ArrayList>, 또는 구현 하는 클래스는 <xref:System.Collections.IEnumerable> 인터페이스입니다.  
  
 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 다형성 하면 즉, 지원는 <xref:System.Xml.Serialization.XmlSerializer> 배열에 파생된 개체를 추가 합니다. 예를 들어 클래스가 `Mammal` 라는 기본 클래스에서 파생 된 `Animal`합니다. 추가로 라는 클래스를 가정 `MyAnimals` 배열을 반환 하는 필드가 포함 `Animal` 개체입니다. 수 있도록 합니다 <xref:System.Xml.Serialization.XmlSerializer> 모두 serialize 하려면를 `Animal` 및 `Mammal` 입력, 적용는 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 필드에 두 번, 때마다 두 가지 허용 유형 중 하나를 지정 하 합니다.  
  
> [!NOTE]
>  여러 인스턴스를 적용할 수 있습니다 합니다 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 또는 <xref:System.Xml.Serialization.XmlElementAttribute> 배열에 삽입할 수 있는 개체의 유형을 지정 합니다.  
  
> [!NOTE]
>  필드 또는 인터페이스 또는 인터페이스의 배열을 반환 하는 속성의 serialization이 지원 되지 않습니다.  
  
 특성을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [특성](~/docs/standard/attributes/index.md)합니다.  
  
> [!NOTE]
>  단어를 사용할 수 있습니다 `XmlArrayItem` 대신 코드에서 <xref:System.Xml.Serialization.XmlArrayItemAttribute>합니다.  
  
   
  
## Examples  
 다음 예제에서는 라는 클래스를 직렬화 `Group` 라는 필드를 포함 하는 `Employees` 배열을 반환 하는 `Employee` 개체입니다. 예제에 적용 됩니다는 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 필드 킴으로써 합니다 <xref:System.Xml.Serialization.XmlSerializer> 두 기본 클래스의 개체를 삽입할 수 있는 (`Employee`) 형식 및 파생된 클래스 형식 (`Manager`) serialize 된 배열에 합니다.  
  
 [!code-cpp[Classic XmlArrayItemAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlArrayAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
    <related type="Article" href="~/docs/standard/serialization/introducing-xml-serialization.md">XML Serialization 소개</related>
    <related type="Article" href="~/docs/standard/serialization/how-to-specify-an-alternate-element-name-for-an-xml-stream.md">방법: XML 스트림의 대체 요소 이름 지정</related>
    <related type="Article" href="~/docs/standard/serialization/controlling-xml-serialization-using-attributes.md">특성을 사용하여 XML Serialization 제어</related>
    <related type="Article" href="~/docs/standard/serialization/examples-of-xml-serialization.md">XML Serialization 예제</related>
    <related type="Article" href="~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md">XML Schema Definition Tool (Xsd.exe)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlArrayItemAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlArrayItemAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 라는 클래스를 직렬화 `Transportation` 라는 필드를 포함 하는 `MyVehicles` 배열을 반환 하는 `Vehicle` 개체입니다. 예제에 적용 됩니다는 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 필드 허용 합니다 <xref:System.Xml.Serialization.XmlSerializer> 의 인스턴스를 삽입 하는 `Car` 클래스에서 파생 되는 `Vehicle` 배열로 클래스.  
  
 [!code-cpp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlArrayItemAttribute (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elementName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlArrayItemAttribute(System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlArrayItemAttribute : string -&gt; System.Xml.Serialization.XmlArrayItemAttribute" Usage="new System.Xml.Serialization.XmlArrayItemAttribute elementName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">XML 요소의 이름입니다.</param>
        <summary><see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 클래스의 새 인스턴스를 초기화하고 XML 문서에 생성된 XML 요소의 이름을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 하는이 오버 로드는 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 속성입니다.  
  
 멤버 식별자는 다르게 생성 된 XML 요소의 이름을 지정 하려는 경우이 오버 로드를 사용 합니다.  
  
 네임 스페이스를 포함 하는 XML 문서 요소 이름의 버전이 둘 이상 포함할 수 있습니다. 자세한 내용은 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 속성을 참조하십시오.  
  
   
  
## Examples  
 다음 예제에서는 라는 클래스를 직렬화 `Transportation` 라는 필드를 포함 하는 `MyVehicles` 배열을 반환 하는 `Vehicle` 개체입니다. 예제에 적용 됩니다는 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 필드 허용 합니다 <xref:System.Xml.Serialization.XmlSerializer> 의 인스턴스를 삽입 하는 `Car` 클래스에서 파생 되는 `Vehicle` 배열로 클래스. 이 예제에서는 특성을 적용 하는 동안 설정 합니다 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 사용 하 여 속성을 `elementName` 매개 변수.  
  
 [!code-cpp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlArrayItemAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlArrayItemAttribute(Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlArrayItemAttribute : Type -&gt; System.Xml.Serialization.XmlArrayItemAttribute" Usage="new System.Xml.Serialization.XmlArrayItemAttribute type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">serialize할 개체의 <see cref="T:System.Type" />입니다.</param>
        <summary><see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 클래스의 새 인스턴스를 초기화하고 serialize된 배열에 삽입할 수 있는 <see cref="T:System.Type" />을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 라는 클래스를 직렬화 `Transportation` 라는 필드를 포함 하는 `MyVehicles` 배열을 반환 하는 `Vehicle` 개체입니다. 예제에 적용 됩니다는 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 필드 허용 합니다 <xref:System.Xml.Serialization.XmlSerializer> 의 인스턴스를 삽입 하는 `Car` 클래스에서 파생 되는 `Vehicle` 배열로 클래스. 이 예제에서는 특성을 적용 하는 동안 설정 합니다 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A> 사용 하 여 속성을 `type` 매개 변수.  
  
 [!code-cpp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlArrayItemAttribute (string elementName, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlArrayItemAttribute(System::String ^ elementName, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlArrayItemAttribute : string * Type -&gt; System.Xml.Serialization.XmlArrayItemAttribute" Usage="new System.Xml.Serialization.XmlArrayItemAttribute (elementName, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="elementName">XML 요소의 이름입니다.</param>
        <param name="type">serialize할 개체의 <see cref="T:System.Type" />입니다.</param>
        <summary><see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 클래스의 새 인스턴스를 초기화하고 XML 문서에 생성된 XML 요소의 이름 및 생성된 XML 문서에 삽입할 수 있는 <see cref="T:System.Type" />을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 오버 로드를 설정 합니다 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 하며 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A> 속성입니다.  
  
 멤버 식별자는 다르게 생성 된 XML 요소의 이름을 지정 하려는 경우이 오버 로드를 사용 합니다.  
  
 네임 스페이스를 포함 하는 XML 문서 요소 이름의 버전이 둘 이상 포함할 수 있습니다. 자세한 내용은 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 속성을 참조하십시오.  
  
   
  
## Examples  
 다음 예제에서는 라는 클래스를 직렬화 `Transportation` 라는 필드를 포함 하는 `MyVehicles` 배열을 반환 하는 `Vehicle` 개체입니다. 예제에 적용 됩니다는 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 필드 허용 합니다 <xref:System.Xml.Serialization.XmlSerializer> 의 인스턴스를 삽입 하는 `Car` 클래스에서 파생 되는 `Vehicle` 배열로 클래스. 이 예제에서는 특성을 적용 하는 동안 설정를 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 사용 하 여 속성을 `elementName` 매개 변수를 및 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A> 사용 하 여 속성은 `type` 매개 변수.  
  
 [!code-cpp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataType : string with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>생성된 XML 요소의 XML 데이터 형식을 가져오거나 설정합니다.</summary>
        <value>World Wide Web 컨소시엄(www.w3.org) 문서의 "XML Schema Part 2: Datatypes"에 정의된 XSD(XML 스키마 정의) 데이터 형식입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서.net을 사용 하 여 XML 스키마 단순 데이터 형식을 나열합니다.  
  
 XML 스키마에 대 한 `base64Binary` 및 `hexBinary` 데이터 형식을 사용 하 여 배열을 <xref:System.Byte> 개체 및 적용을 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 사용 하 여는 <xref:System.Xml.Serialization.XmlArrayItemAttribute.DataType%2A> "base64Binary" 또는 "hexBinary" 적절 하 게 설정 하는 속성입니다. XML 스키마에 대 한 `time` 및 `date` 데이터 형식을 사용 하 여는 <xref:System.DateTime> 입력 하 고 적용 합니다 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 사용 하 여는 <xref:System.Xml.Serialization.XmlArrayItemAttribute.DataType%2A> "date" 또는 "시간"으로 설정 합니다.  
  
 문자열에 매핑되는 모든 XML 스키마 형식에 적용 합니다 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 사용 하 여 해당 <xref:System.Xml.Serialization.XmlArrayItemAttribute.DataType%2A> 속성이 XML 스키마 형식으로 설정 합니다. 그러나 serialization 형식으로 멤버에 대 한 스키마만 변경 되지 않습니다.  
  
> [!NOTE]
>  XML 스키마 데이터 형식 중 하나를 정확 하 게 설정 해야 하므로 속성이 대/소문자를 구분 합니다.  
  
> [!NOTE]
>  요소를 XML 형식으로 이진 데이터를 전달 합니다. XML 특성으로 전달 효율적입니다.  
  
 XML 스키마 데이터 형식에 대 한 자세한 내용은 World Wide Web 컨소시엄 (www.w3.org) 문서를 참조 하세요. "XML Schema Part 2: Datatypes입니다. "  
  
|XSD 데이터 형식|.NET 데이터 형식|  
|-------------------|--------------------|  
|anyURI|<xref:System.String>|  
|base64Binary|배열을 <xref:System.Byte> 개체|  
|boolean|<xref:System.Boolean>|  
|byte|<xref:System.SByte>|  
|date|<xref:System.DateTime>|  
|dateTime|<xref:System.DateTime>|  
|decimal|<xref:System.Decimal>|  
|double|<xref:System.Double>|  
|ENTITY|<xref:System.String>|  
|엔터티|<xref:System.String>|  
|float|<xref:System.Single>|  
|gDay|<xref:System.String>|  
|gMonth|<xref:System.String>|  
|gMonthDay|<xref:System.String>|  
|gYear|<xref:System.String>|  
|gYearMonth|<xref:System.String>|  
|hexBinary|배열을 <xref:System.Byte> 개체|  
|ID|<xref:System.String>|  
|IDREF|<xref:System.String>|  
|IDREFS|<xref:System.String>|  
|int|<xref:System.Int32>|  
|정수|<xref:System.String>|  
|language|<xref:System.String>|  
|long|<xref:System.Int64>|  
|name|<xref:System.String>|  
|NCName|<xref:System.String>|  
|negativeInteger|<xref:System.String>|  
|NMTOKEN|<xref:System.String>|  
|NMTOKENS|<xref:System.String>|  
|normalizedString|<xref:System.String>|  
|nonNegativeInteger|<xref:System.String>|  
|nonPositiveInteger|<xref:System.String>|  
|NOTATION|<xref:System.String>|  
|positiveInteger|<xref:System.String>|  
|QName|<xref:System.Xml.XmlQualifiedName>|  
|duration|<xref:System.String>|  
|string|<xref:System.String>|  
|short|<xref:System.Int16>|  
|시간|<xref:System.DateTime>|  
|token|<xref:System.String>|  
|unsignedByte|<xref:System.Byte>|  
|unsignedInt|<xref:System.UInt32>|  
|unsignedLong|<xref:System.UInt64>|  
|unsignedShort|<xref:System.UInt16>|  
  
   
  
## Examples  
 다음 예제에서는 라는 클래스를 직렬화 `PurchaseOrder`합니다. 여러 인스턴스를 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 클래스는 세 명의 멤버에 적용 됩니다 및 <xref:System.Xml.Serialization.XmlArrayItemAttribute.DataType%2A> 각 인스턴스에 대 한 속성 배열에서 허용 하는 형식입니다.  
  
 [!code-cpp[XmlArrayItemAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlArrayItemAttribute Example/CPP/arrayitem.cpp#1)]
 [!code-csharp[XmlArrayItemAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlArrayItemAttribute Example/CS/arrayitem.cs#1)]
 [!code-vb[XmlArrayItemAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlArrayItemAttribute Example/VB/arrayitem.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ElementName : string with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>생성된 XML 요소의 이름을 가져오거나 설정합니다.</summary>
        <value>생성된 XML 요소의 이름입니다. 기본값은 멤버 식별자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정 된 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 멤버 식별자는 다르게 생성 된 XML 요소의 이름을 지정 하려는 경우.  
  
 동일한를 설정할 수 있습니다 <xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A> 명명 된 멤버 생성된 된 XML 문서의 XML 네임 스페이스를 사용 하 여 동일 하 게 구분 하려면 둘 이상의 클래스 멤버에는 값입니다. XML 문서의 네임 스페이스 및 접두사가 붙은 이름을 사용 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.Xml.Serialization.XmlSerializerNamespaces> 클래스입니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 속성에 대 한는 `Vehicle` 및 `Car` XML 요소의 이름을 변경 하 여 클래스는는 <xref:System.Xml.Serialization.XmlSerializer> 해당 클래스에 생성 합니다.  
  
 [!code-cpp[Classic XmlArrayItemAttribute.ElementName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.ElementName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.ElementName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.ElementName Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.ElementName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.ElementName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaForm Form { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaForm Form" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.Form" />
      <MemberSignature Language="VB.NET" Value="Public Property Form As XmlSchemaForm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaForm Form { System::Xml::Schema::XmlSchemaForm get(); void set(System::Xml::Schema::XmlSchemaForm value); };" />
      <MemberSignature Language="F#" Value="member this.Form : System.Xml.Schema.XmlSchemaForm with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.Form" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaForm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>생성된 XML 요소의 이름이 정규화된 이름인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.Schema.XmlSchemaForm" /> 값 중 하나입니다. 기본값은 <see langword="XmlSchemaForm.None" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> 속성이 있는지 여부를 XML 요소 이름 한정 되었는지 "xml에서 네임 스페이스입니다." World Wide Web 컨소시엄 (www.w3.org) 사양을 기반으로 결정  
  
 경우는 <xref:System.Xml.Serialization.XmlAttributeAttribute.Namespace%2A> 모든 값을 설정 하는 속성을 <xref:System.Xml.Serialization.XmlElementAttribute.Form%2A> 속성을 `XmlSchemaForm.Unqualified` 예외를 throw 합니다.  
  
 기본값인 `XmlSchemaForm.None`, 지시를 <xref:System.Xml.Serialization.XmlSerializer> 네임 스페이스 정규화 있는지 여부를 결정 하는 XML 문서에 대 한 스키마를 확인 합니다. 요소에 대 한 합니다 <xref:System.Xml.Serialization.XmlSerializer> 의 스키마 요소 특성의 값을 확인 `elementFormDefault`합니다. 특성에 대 한 스키마 요소 특성의 값을 확인 `attributeFormDefault`합니다. 예를 들어, 다음 XML 스키마를 나타내는 합니다 `Name` 요소가 한정 되었는지 하는 동안는 `Number` 요소 정규화 되지 않은 합니다.  
  
```  
<schema elementFormDefault="qualified"   
attributeFormDefault="unqualified">  
   <element name="Name"/>  
   <attribute name="Number"/>  
</schema>  
```  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Form%2A> 속성에 대 한는 `Vehicle` 클래스를 `XmlSchemaForm.Unqualified`, 및 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Form%2A> 속성에 대 한 합니다 `Car` 클래스를 `XmlSchemaForm.Qualified`.  
  
 [!code-cpp[Classic XmlArrayItemAttribute.Form Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Form Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.Form Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Form Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.Form Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Form Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Form" /> 속성이 <see langword="XmlSchemaForm.Unqualified" />로 설정되어 있으며 <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace" /> 값이 지정되어 있는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlSerializer" />가 멤버를 <see langword="xsi:nil" /> 특성이 <see langword="true" />로 설정된 빈 XML 태그로 serialize해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.Serialization.XmlSerializer" />가 <see langword="true" /> 특성을 생성하면 <see langword="xsi:nil" />이고, 그렇지 않으면 <see langword="false" />이고 인스턴스가 생성되지 않습니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 구조에 대 한 XML 스키마 사양에는 XML 문서를 요소 콘텐츠 누락 된 명시적으로 신호를 수 있습니다. 이러한 요소에 특성이 포함 `xsi:nil` 로 `true`합니다. 자세한 내용은 이라는 World Wide Web 컨소시엄 (www.w3.org) 사양을 참조 "XML Schema Part 1: 구조입니다. "  
  
 경우는 <xref:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable%2A> 속성은 `true`의 `xsi:nil` 특성에 설정 된 클래스 멤버에 대해 생성 됩니다 `null`합니다. 예를 들어, 명명 된 필드를 설정 하면 `MyStringArray` 하 `null`는 <xref:System.Xml.Serialization.XmlSerializer> 다음 XML 코드를 생성 합니다.  
  
```  
<MyStringArray xsi:nil = "true" />  
```  
  
 경우는 <xref:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable%2A> 속성은 `false`, XML 요소가 생성 됩니다.  
  
> [!NOTE]
>  적용할 수 없습니다는 <xref:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable%2A> 멤버에 대 한 속성 값 형식을 포함할 수 없습니다 때문에 값 형식으로 입력 `null`합니다.  
  
   
  
## Examples  
 다음 예제에서는 라는 클래스를 직렬화 `Group`, 라는 필드를 포함 하는 `Employees` 배열을 반환 하는 `Employee` 개체입니다. 두 번째 클래스가 `Manager` 에서 파생 `Employee`합니다. <xref:System.Xml.Serialization.XmlArrayItemAttribute> 지정 합니다 <xref:System.Xml.Serialization.XmlSerializer> 둘 다를 삽입할 수 있습니다 `Employee` 및 `Manager` 배열로 개체입니다. 예제에서는 <xref:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable%2A> 여, 속성을 <xref:System.Xml.Serialization.XmlSerializer> 생성할 수 없는 `xsi:nil` 배열의 개체가 특성으로 설정 `null`합니다.  
  
 [!code-cpp[Classic XmlArrayItemAttribute.IsNullable Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.IsNullable Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.IsNullable Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.IsNullable Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.IsNullable Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.IsNullable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>생성된 XML 요소의 네임스페이스를 가져오거나 설정합니다.</summary>
        <value>생성된 XML 요소의 네임스페이스입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Namespace%2A> 속성 World Wide Web 컨소시엄 (www.w3.org) 사양을 따르는 "xml에서 네임 스페이스입니다."  
  
 XML 문서 및 관련된 접두사에 사용할 네임 스페이스를 만들려면 만들어야는 <xref:System.Xml.Serialization.XmlSerializerNamespaces> 모든 접두사와 네임 스페이스 쌍이 들어 있는입니다. 네임 스페이스 각각에 대해 설정한 <xref:System.Xml.Serialization.XmlArrayAttribute> 에 포함 되어야 합니다는 <xref:System.Xml.Serialization.XmlSerializerNamespaces>합니다. 경우는 <xref:System.Xml.Serialization.XmlSerializer> 문서를 생성할 요소 이름을 각 배열 항목에 대 한 접두사를 붙입니다.  
  
   
  
## Examples  
 다음 예제에서는 적용을 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 설정 및는 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Namespace%2A> 속성입니다.  
  
 [!code-cpp[Classic XmlArrayItemAttribute.Namespace Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Namespace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NestingLevel">
      <MemberSignature Language="C#" Value="public int NestingLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NestingLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property NestingLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NestingLevel { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NestingLevel : int with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 요소 계층 구조에서 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />가 영향을 주는 수준을 가져오거나 설정합니다.</summary>
        <value>배열의 배열에 있는 인덱스 집합의 인덱스(0부터 시작)입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML 문서는 XML 요소의 계층을 포함할 수 있습니다. 이러한 계층을 나타내기 위해 배열의 배열을 사용 됩니다. 이러한 배열에서 각 인덱스는 계층의 수준을 나타냅니다. 따라서 합니다 <xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A> 속성은 적용 하는 경우에 사용 됩니다는 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 배열의 배열을 반환 하는 필드입니다.  
  
 특성을 적용 하는 경우 특성을 설정 하 여 영향을 주는 계층 구조 수준을 지정 합니다 <xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A>합니다. 첫 번째 인덱스는 항상 0의 값은 선택적 설정 되므로 해당 <xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A> -- <xref:System.Xml.Serialization.XmlArrayItemAttribute> 없이 <xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A> 값이 첫 번째 인덱스에 적용 됩니다. 만 후속 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 개체가 필요 <xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A> 값 (1, 2, 3, 및 등)로 지정 합니다.  
  
   
  
## Examples  
 다음 예제에서는 세 가지 적용 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 는 배열로 이루어진 배열 특성입니다. 배열의 각 특성에 적용 되는 지정 된 <xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A> 배열의 인덱스 속성입니다.  
  
 [!code-cpp[NestingLevel#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NestingLevel/cpp/nestinglevel.cpp#1)]
 [!code-csharp[NestingLevel#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NestingLevel/CS/nestinglevel.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>배열에 사용할 수 있는 형식을 가져오거나 설정합니다.</summary>
        <value>배열에 사용할 수 있는 <see cref="T:System.Type" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> 속성을 공용 필드 또는 공용 읽기/쓰기 속성 값에 대 한 재정의 유형을 지정 합니다.  
  
 필드 또는 속성 형식의 배열을 반환 하는 경우 <xref:System.Object>의 여러 인스턴스를 적용 합니다 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 필드 또는 속성에 있습니다. 각 인스턴스에 대해 설정 된 <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> 속성을 배열에 삽입할 수 있는 개체의 형식입니다.  
  
 배열 형식에만 있으면 필요가 없습니다 적용할는 <xref:System.Xml.Serialization.XmlArrayItemAttribute>합니다. 기본적으로 <xref:System.Xml.Serialization.XmlSerializer> 형식의 각 요소는 각 값은 XML 스키마 데이터 형식으로 설정 합니다.에 대 한 일련의 동일한 요소 이름의 각 요소를 생성 합니다. 예를 들어, 다음 코드는  
  
```  
' Visual Basic code  
Public Class Arrays  
   Public XSDTypes ()As Object= New Object(){"one", 2, 3.0}  
End Class  
// C# code  
public class MyArray{  
   // No XmlArrayItemAttribute is applied.  
   public object[] XSDTypes= new object[]{"one", 2, 3.2};  
}  
```  
  
 이 XML 결과:  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
<Arrays xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">  
  <XSDTypes>  
    <Object xsi:type="xsd:string">one</Object>  
    <Object xsi:type="xsd:int">2</Object>  
    <Object xsi:type="xsd:double">3</Object>  
  </XSDTypes>  
</Arrays>  
```  
  
 그러나 지정 하는 경우는 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A> 각 기본 형식에 각 값에 대해 요소 이름에 대 한 속성은.NET 형식 이름을 사용 하 여 생성 됩니다. 이 코드 예를 들어:  
  
```  
' Visual Basic code  
Public Class Arrays  
   <XmlArrayItem(GetType(String)), _  
   XmlArrayItem(GetType(Integer)), _  
   XmlArrayItem(GetType(Double))> _  
   Public PrimitiveTypes () As Object = New Object(){"one", 2, 3.0}  
End Class  
// C# code  
public class Arrays{  
   [XmlArrayItem(typeof(string))]  
   [XmlArrayItem(typeof(int))]  
   [XmlArrayItem(typeof(double))]  
   public object [] PrimitiveTypes = new object[]{"one", 2, 3.0};  
}  
```  
  
 이 XML 결과:  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
<Arrays xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">  
  <PrimitiveTypes>  
    <string>one</string>  
    <int>2</int>  
    <double>3</double>  
  </PrimitiveTypes>  
</Arrays>  
```  
  
   
  
## Examples  
 다음 예제에서는 개체의 배열을 serialize합니다. 두 개의 배열을 반환 하는 필드에서 특성을 사용 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 인스턴스. 각 인스턴스에 지시 합니다 <xref:System.Xml.Serialization.XmlSerializer> 된 적용할 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A> 배열의 합니다.  
  
 [!code-cpp[Classic XmlArrayItemAttribute.Type Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Type Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.Type Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Type Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.Type Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Type Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>