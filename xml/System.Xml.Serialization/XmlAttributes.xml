<Type Name="XmlAttributes" FullName="System.Xml.Serialization.XmlAttributes">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cc23033d5f42bcf52304d4e8f0da38d764bcdcb5" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58727607" /></Metadata><TypeSignature Language="C#" Value="public class XmlAttributes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlAttributes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlAttributes" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlAttributes" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlAttributes" />
  <TypeSignature Language="F#" Value="type XmlAttributes = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Serialization</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Xml.Serialization.XmlSerializer" />가 개체를 serialize 및 deserialize하는 방식을 제어하는 특성 개체의 컬렉션을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 만들기는 <xref:System.Xml.Serialization.XmlAttributes> 기본값을 재정의 하는 프로세스의 일부인 방식으로 <xref:System.Xml.Serialization.XmlSerializer> 클래스 인스턴스를 직렬화 합니다. 예를 들어, DLL에는 액세스할 수 없는 원본에서 생성 되는 개체를 serialize 한다고 가정 합니다. 사용 하 여는 <xref:System.Xml.Serialization.XmlAttributeOverrides>를 보강 하거나 개체 serialize 되는 방식을 제어할 수 있습니다.  
  
 멤버는 <xref:System.Xml.Serialization.XmlAttributes> 클래스와 serialization을 제어 하는 특성 클래스 패밀리를 직접적으로 부합 합니다. 예를 들어,를 <xref:System.Xml.Serialization.XmlAttributes.XmlText%2A> 속성 설정 해야 합니다는 <xref:System.Xml.Serialization.XmlTextAttribute>를 지시 하 여 필드 또는 속성의 serialization을 재정의할 수 있습니다는 <xref:System.Xml.Serialization.XmlSerializer> XML 텍스트로 속성 값을 serialize 하 합니다. Serialization을 제어 하는 특성의 전체 목록은 참조 하세요.를 <xref:System.Xml.Serialization.XmlSerializer>입니다.  
  
 사용 하 여 대 한 자세한 내용은 합니다 <xref:System.Xml.Serialization.XmlAttributeOverrides> 사용 하 여는 <xref:System.Xml.Serialization.XmlAttributes> 클래스를 참조 하십시오 [방법:는 XML Stream에 대 한 대체 요소 이름 지정](~/docs/standard/serialization/how-to-specify-an-alternate-element-name-for-an-xml-stream.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 라는 클래스의 인스턴스를 serialize `Orchestra`, 라는 단일 필드를 포함 하는 `Instruments` 배열을 반환 하는 `Instrument` 개체입니다. 두 번째 클래스가 `Brass` 에서 상속 되는 `Instrument` 클래스입니다. 만듭니다는 <xref:System.Xml.Serialization.XmlAttributes> 재정의할 개체를 `Instrument` 필드를 필드에 적용할 수 있도록 `Brass` -개체를 추가 합니다 <xref:System.Xml.Serialization.XmlAttributes> 개체의 인스턴스를는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 클래스.  
  
 [!code-cpp[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
    <related type="Article" href="~/docs/standard/serialization/introducing-xml-serialization.md">XML Serialization 소개</related>
    <related type="Article" href="~/docs/standard/serialization/how-to-specify-an-alternate-element-name-for-an-xml-stream.md">방법: XML 스트림의 대체 요소 이름 지정</related>
    <related type="Article" href="~/docs/standard/serialization/controlling-xml-serialization-using-attributes.md">특성을 사용하여 XML Serialization 제어</related>
    <related type="Article" href="~/docs/standard/serialization/examples-of-xml-serialization.md">XML Serialization 예제</related>
    <related type="Article" href="~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md">XML Schema Definition Tool (Xsd.exe)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlAttributes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlAttributes.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlAttributes();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlAttributes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 라는 클래스의 인스턴스를 serialize `Orchestra`, 라는 단일 필드를 포함 하는 `Instruments` 배열을 반환 하는 `Instrument` 개체입니다. 두 번째 클래스가 `Brass` 에서 상속 되는 `Instrument` 클래스입니다. 만듭니다는 <xref:System.Xml.Serialization.XmlAttributes> 재정의할 개체를 `Instrument` 필드를 필드에 적용할 수 있도록 `Brass` -개체를 추가 합니다 <xref:System.Xml.Serialization.XmlAttributes> 개체의 인스턴스를는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 클래스.  
  
 [!code-cpp[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlAttributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlAttributes (System.Reflection.ICustomAttributeProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.ICustomAttributeProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlAttributes.#ctor(System.Reflection.ICustomAttributeProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (provider As ICustomAttributeProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlAttributes(System::Reflection::ICustomAttributeProvider ^ provider);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlAttributes : System.Reflection.ICustomAttributeProvider -&gt; System.Xml.Serialization.XmlAttributes" Usage="new System.Xml.Serialization.XmlAttributes provider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="provider" Type="System.Reflection.ICustomAttributeProvider" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="provider">XML serialization을 제어하는 특성의 대체 구현을 제공할 수 있는 클래스입니다.</param>
        <summary><see cref="T:System.Xml.Serialization.XmlAttributes" /> 클래스의 새 인스턴스를 초기화하고 <see cref="T:System.Xml.Serialization.XmlSerializer" />가 개체를 serialize 및 deserialize하는 방법을 사용자 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 기본 생성자를 사용 합니다 <xref:System.Xml.Serialization.XmlAttributes> 이 생성자를 사용 하는 것이 아니라 클래스에 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAnyAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlAnyAttributeAttribute XmlAnyAttribute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlAnyAttributeAttribute XmlAnyAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlAnyAttribute As XmlAnyAttributeAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlAnyAttributeAttribute ^ XmlAnyAttribute { System::Xml::Serialization::XmlAnyAttributeAttribute ^ get(); void set(System::Xml::Serialization::XmlAnyAttributeAttribute ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlAnyAttribute : System.Xml.Serialization.XmlAnyAttributeAttribute with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlAnyAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlAnyAttributeAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>재정의할 <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />를 가져오거나 설정합니다.</summary>
        <value>재정의할 <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Xml.Serialization.XmlAnyAttributeAttribute> 배열을 반환 하는 멤버에 적용할 수 있습니다 <xref:System.Xml.XmlAttribute> deserialization에는 개체입니다. 따라서 합니다 <xref:System.Xml.Serialization.XmlSerializer> 되는 개체에 해당 멤버가 없는 모든 특성을 deserialize 하는 데 역직렬화-따라서 이러한 요소에 알려지지 않은 ""는 <xref:System.Xml.Serialization.XmlSerializer>합니다. XML 스트림을 XML 웹 서비스에 의해 변경 된 경우 또는 알려진 임의 데이터는 항상 XML 스트림을 포함 하는 경우에 유용 합니다.  
  
 합니다 <xref:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute%2A> 속성을 사용 하면 할 멤버의 serialization을 재정의 하는 <xref:System.Xml.Serialization.XmlAnyAttributeAttribute> 적립 되었습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAnyElements">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlAnyElementAttributes XmlAnyElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlAnyElementAttributes XmlAnyElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property XmlAnyElements As XmlAnyElementAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlAnyElementAttributes ^ XmlAnyElements { System::Xml::Serialization::XmlAnyElementAttributes ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlAnyElements : System.Xml.Serialization.XmlAnyElementAttributes" Usage="System.Xml.Serialization.XmlAttributes.XmlAnyElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlAnyElementAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>재정의할 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 개체의 컬렉션을 가져옵니다.</summary>
        <value><see cref="T:System.Xml.Serialization.XmlAnyElementAttributes" /> 개체의 컬렉션을 나타내는 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Xml.Serialization.XmlAnyElementAttribute> 배열을 반환 하는 멤버에 적용할 수 있습니다 <xref:System.Xml.XmlElement> deserialization에는 개체입니다. 따라서 합니다 <xref:System.Xml.Serialization.XmlSerializer> 되는 개체에 해당 멤버가 없는 모든 요소를 deserialize 하려면 역직렬화-따라서 이러한 요소에 알려지지 않은 ""는 <xref:System.Xml.Serialization.XmlSerializer>합니다. XML 스트림을 XML 웹 서비스에 의해 변경 된 경우 또는 알려진 임의 데이터는 항상 XML 스트림을 포함 하는 경우에 유용 합니다.  
  
 합니다 <xref:System.Xml.Serialization.XmlAttributes.XmlAnyElements%2A> 속성을 사용 하면 함수는 멤버와 멤버의 serialization을 재정의 하는 <xref:System.Xml.Serialization.XmlAnyElementAttribute> 적립 되었습니다.  
  
   
  
## Examples  
 다음 예제에서는 새 <xref:System.Xml.Serialization.XmlAnyElementAttribute> 개체를 통해 액세스 하는 개체의 컬렉션에 추가 하 여 <xref:System.Xml.Serialization.XmlAttributes.XmlAnyElements%2A> 속성입니다. <xref:System.Xml.Serialization.XmlAttributes> 개체에 추가 되는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 만드는 데 사용 되는 개체는 <xref:System.Xml.Serialization.XmlSerializer> 개체입니다. <xref:System.Xml.Serialization.XmlSerializer> serialize 하거나 개체를 deserialize 하는 데 사용 됩니다. 사용 하는 효과 확인 하려면 합니다 <xref:System.Xml.Serialization.XmlAnyElementAttributes> 속성을 실행 하 여 "UnknownElements.xml" 라는 XML 문서 만들기를 `SerializeObject` 에서 메서드를 `Main` 메서드. (알 수 없는) 다른 요소를 포함 하려면 결과 문서를 편집 합니다. 주석으로 처리를 `SerializeObject` 에서 호출 합니다 `Main` 메서드를에 대 한 호출을 주석 처리 제거를 `DeserializeObject` 이름과 알 수 없는 XML 요소의 값을 출력 하는 메서드를 합니다.  
  
 [!code-cpp[XmlAttributes.XmlAnyElements#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlAttributes.XmlAnyElements/CPP/xmlanyover.cpp#1)]
 [!code-csharp[XmlAttributes.XmlAnyElements#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlAttributes.XmlAnyElements/CS/xmlanyover.cs#1)]
 [!code-vb[XmlAttributes.XmlAnyElements#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlAttributes.XmlAnyElements/VB/xmlanyover.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute" />
      </Docs>
    </Member>
    <Member MemberName="XmlArray">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlArrayAttribute XmlArray { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlArrayAttribute XmlArray" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlArray" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlArray As XmlArrayAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlArrayAttribute ^ XmlArray { System::Xml::Serialization::XmlArrayAttribute ^ get(); void set(System::Xml::Serialization::XmlArrayAttribute ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlArray : System.Xml.Serialization.XmlArrayAttribute with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlArrayAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlSerializer" />가 배열을 반환하는 공용 필드 또는 읽기/쓰기 속성을 serialize하는 방식을 지정하는 개체를 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.Serialization.XmlArrayAttribute" />가 배열을 반환하는 공용 필드 또는 읽기/쓰기 속성을 serialize하는 방식을 지정하는 <see cref="T:System.Xml.Serialization.XmlSerializer" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 가지 방법으로는 공용 필드 또는 배열을 반환 하는 공용 읽기/쓰기 속성을 통해 serialize 되는 <xref:System.Xml.Serialization.XmlSerializer>: 기본 serialization 및 serialization을 제어 합니다.  
  
 기본 serialization에서는 특성이 없는 멤버에 적용 됩니다. 으로 serialize 될 때 배열 멤버 이름에서 가져온 중첩된 된 시퀀스의 XML 요소 이름 사용 하 여 XML 요소의 중첩 된 시퀀스로 serialize 됩니다.  
  
 Serialization을 보다 정확 하 게 제어 하려면 적용는 <xref:System.Xml.Serialization.XmlArrayAttribute> 필드 또는 속성에 있습니다. 예를 들어 이름을 변경할 수 있습니다는 생성 된 XML 요소 기본값과에서 다른 이름으로 설정 하 여는 <xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A> 속성을 새 값입니다.  
  
 합니다 <xref:System.Xml.Serialization.XmlAttributes.XmlArray%2A> 속성을 사용 하면 제어를 적용 하 여 serialization 뿐만 아니라 기본 serialization을 재정의 하는 <xref:System.Xml.Serialization.XmlArrayAttribute> 멤버입니다. 예를 들어, 새 값으로 기본값 (멤버 식별자)에서 생성 된 XML 요소 이름을 변경할 수 있습니다. 또한 적용 하는 경우에 <xref:System.Xml.Serialization.XmlArrayAttribute> 멤버에 의해 재정의 되지 <xref:System.Xml.Serialization.XmlArrayAttribute> 에 할당 된는 <xref:System.Xml.Serialization.XmlAttributes.XmlArray%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 명명 된 필드를 포함 하는 클래스를 직렬화 `Members` 개체의 배열을 반환 합니다. 합니다 <xref:System.Xml.Serialization.XmlArrayAttribute> 를 사용 하는 필드의 serialization을 재정의 하 고 요소 이름에 `Staff`입니다.  
  
 [!code-cpp[Classic XmlAttributes.XmlArray Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlArray Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlArray Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlArray Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlArray Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlArray Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlArrayItems">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlArrayItemAttributes XmlArrayItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlArrayItemAttributes XmlArrayItems" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property XmlArrayItems As XmlArrayItemAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlArrayItemAttributes ^ XmlArrayItems { System::Xml::Serialization::XmlArrayItemAttributes ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlArrayItems : System.Xml.Serialization.XmlArrayItemAttributes" Usage="System.Xml.Serialization.XmlAttributes.XmlArrayItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlArrayItemAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlSerializer" />가 공용 필드 또는 읽기/쓰기 속성에 의해 반환된 배열 내에 삽입된 항목을 serialize하는 방식을 지정하는 개체 컬렉션을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.Serialization.XmlArrayItemAttributes" /> 개체의 컬렉션을 포함하는 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAttributes.XmlArrayItems%2A> 속성을 사용 하면 공용 필드 또는 공용 읽기/쓰기 속성에 의해 반환 된 배열에 삽입할 수 있는 파생된 된 형식을 지정할 수 있습니다. 만들기 필드나 속성을 허용 하려는 각 새 형식에 대해를 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 개체 및 <xref:System.Xml.Serialization.XmlArrayItemAttributes.Add%2A> 되도록를 <xref:System.Xml.Serialization.XmlArrayItemAttributes>)에서 반환 되는 <xref:System.Xml.Serialization.XmlAttributes.XmlArrayItems%2A> 속성. (새 형식 필드 또는 속성에 이미 적용 된 형식에서 파생 되어야 합니다.) <xref:System.Xml.Serialization.XmlAttributeOverrides.Add%2A> 는 <xref:System.Xml.Serialization.XmlAttributes> 개체는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 개체 및 필드 또는 속성을 포함 하는 개체의 형식 및 필드 또는 속성의 이름을 지정 합니다. 생성을 <xref:System.Xml.Serialization.XmlSerializer> 사용 하 여 합니다 <xref:System.Xml.Serialization.XmlAttributeOverrides> 호출 하기 전에 개체 <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> 또는 <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 명명 된 필드를 포함 하는 클래스를 직렬화 `Members` 개체의 배열을 반환 합니다. 두 개의 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 개체를 필드에 명명 된 기본 클래스에서 파생 되는 개체를 적용할 수 있도록 만들어진 `Member`합니다. 각 개체에 추가 합니다 <xref:System.Xml.Serialization.XmlAttributes> 를 통해를 <xref:System.Xml.Serialization.XmlAttributes.XmlArrayItems%2A> 속성.  
  
 [!code-cpp[Classic XmlAttributes.XmlArrayItems Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlArrayItems Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlArrayItems Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlArrayItems Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlArrayItems Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlArrayItems Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlAttributeAttribute XmlAttribute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlAttributeAttribute XmlAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlAttribute As XmlAttributeAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlAttributeAttribute ^ XmlAttribute { System::Xml::Serialization::XmlAttributeAttribute ^ get(); void set(System::Xml::Serialization::XmlAttributeAttribute ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlAttribute : System.Xml.Serialization.XmlAttributeAttribute with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlAttributeAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlSerializer" />가 공용 필드 또는 공용 읽기/쓰기 속성을 XML 특성으로 serialize하는 방식을 지정하는 개체를 가져오거나 설정합니다.</summary>
        <value>공용 필드 또는 읽기/쓰기 속성을 XML 특성으로 serialize하는 것을 제어하는 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 공용 필드 또는 공용 읽기/쓰기 속성에 특성이 적용 된 경우 XML 요소로 serialize 됩니다. 지시할 수도 있습니다는 <xref:System.Xml.Serialization.XmlSerializer> XML 특성을 적용 하 여 생성 하는 <xref:System.Xml.Serialization.XmlAttributeAttribute> 필드 또는 속성에 합니다.  
  
 합니다 <xref:System.Xml.Serialization.XmlAttributes.XmlAttribute%2A> 속성을 사용 하면 제어를 적용 하 여 serialization 뿐만 아니라 기본 serialization을 재정의 하는 <xref:System.Xml.Serialization.XmlAttributeAttribute> 멤버입니다. 이 작업을 수행 하려면 만듭니다는 <xref:System.Xml.Serialization.XmlAttributeAttribute> 속성을 설정 (같은 <xref:System.Xml.Serialization.XmlAttributeAttribute.AttributeName%2A>). 새 개체를 할당 합니다 <xref:System.Xml.Serialization.XmlAttributes.XmlAttribute%2A> 의 속성을 <xref:System.Xml.Serialization.XmlAttributes> 개체입니다. 추가 합니다 <xref:System.Xml.Serialization.XmlAttributes> 개체는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 개체 및 필드 또는 속성을 포함 하는 개체의 형식 및 필드 또는 속성의 이름을 지정 합니다. 마지막으로, 만들기를 <xref:System.Xml.Serialization.XmlSerializer> 를 사용 하 여는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 개체를 호출 합니다 <xref:System.Xml.Serialization.XmlSerializer.Serialize%2A> 또는 <xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 라는 클래스를 직렬화 `Group` 라는 속성을 포함 하는 `GroupName`, `GroupName` 속성이 XML 특성으로 serialize 됩니다. 이 예에서는 만듭니다는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 및 <xref:System.Xml.Serialization.XmlAttributes> 필드의 기본 serialization을 재정의 하는 개체입니다. 만듭니다는 <xref:System.Xml.Serialization.XmlAttributeAttribute> 명확 하 게 재정의 된 속성 및 개체를로 <xref:System.Xml.Serialization.XmlAttributes.XmlAttribute%2A> 속성을 <xref:System.Xml.Serialization.XmlAttributes> 개체에 추가 됩니다는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 지정 된 재정의 된 멤버의 이름으로 개체. 마지막으로 <xref:System.Xml.Serialization.XmlSerializer> 생성 되 고 사용 하 여 반환 된 <xref:System.Xml.Serialization.XmlAttributeOverrides> 개체입니다.  
  
 [!code-cpp[Classic XmlAttributes.XmlAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlChoiceIdentifier">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlChoiceIdentifierAttribute XmlChoiceIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlChoiceIdentifierAttribute XmlChoiceIdentifier" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property XmlChoiceIdentifier As XmlChoiceIdentifierAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlChoiceIdentifierAttribute ^ XmlChoiceIdentifier { System::Xml::Serialization::XmlChoiceIdentifierAttribute ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlChoiceIdentifier : System.Xml.Serialization.XmlChoiceIdentifierAttribute" Usage="System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlChoiceIdentifierAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>일련의 선택을 명확하게 구별하는 개체를 가져오거나 설정합니다.</summary>
        <value><see langword="xsi:choice" /> 요소로 serialize되는 클래스 멤버에 적용할 수 있는 <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlDefaultValue">
      <MemberSignature Language="C#" Value="public object XmlDefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object XmlDefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlDefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ XmlDefaultValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlDefaultValue : obj with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlDefaultValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 요소 또는 특성의 기본값을 가져오거나 설정합니다.</summary>
        <value>XML 요소 또는 특성의 기본값을 나타내는 <see cref="T:System.Object" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 적용 하 여 XML 요소 또는 XML 특성의 기본값을 지정할 수는 <xref:System.ComponentModel.DefaultValueAttribute> 멤버입니다. 값에 적용 한 결과 검사 하려면 애플리케이션 DLL 이나 실행 파일을 컴파일하고 XML 스키마 정의 도구 (XSD.exe)를 파일에 인수로 전달 합니다. 기본값을 할당할 XML 스키마 문서에는 `default` 특성입니다. 다음 예제에서는 기본값에에서는 \<Animal > 요소는 "Dogs"입니다.  
  
```  
<?xml version="1.0"?>  
 <schema attributeFormDefault="qualified"   
 elementFormDefault="qualified" targetNamespace=""   
 xmlns="http://www.w3.org/2000/10/XMLSchema">  
   <element name="Pets" nullable="true" type="Pets"/>  
   <complexType name="Pets">  
     <sequence>  
       <element default="Dogs" name="Animal" nullable="true"   
        type="string" minOccurs="0"/>  
     </sequence>  
   </complexType>  
 </schema>  
```  
  
 기본값을 재정의 하려면 만들기를 <xref:System.Object> 에 할당 하는 <xref:System.Xml.Serialization.XmlAttributes.XmlDefaultValue%2A>합니다.  
  
 필드 또는 속성에 할당 된 값은 해당 필드 또는 속성에 대 한 기본 값과 같은 경우는 <xref:System.Xml.Serialization.XmlSerializer> XML 인스턴스에 값을 serialize 하지 않습니다. 즉, XML 스키마에서 할당 된 값을 복구할 수 있습니다. 즉, 필드 또는 속성 자체 기본값으로 설정은 전혀 설정 하지 않은 경우에 해당 합니다. 마찬가지로 값이 없는 필드 또는 속성에 대해 설정 된 경우는 <xref:System.Xml.Serialization.XmlSerializer> 사용 스키마에서 기본 값을 찾을 수 있습니다. 둘 다의 경우, (기본값인 속성을 설정 또는 전혀 설정 하지 않은 경우)의 XML 문서 인스턴스에서 속성 값을 들어 있지 않습니다.  
  
 기본 값을 할당 하는 스키마 대신 클래스 생성자를 사용할 수 있습니다. Xsd.exe를 사용 하 여 스키마에서 클래스를 생성 하는, 하는 경우 주석 수도 있고 클래스 파일에서 [System.ComponentModel.DefaultValueAttribute("myFieldName")] 특성을 모두 제거할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 라는 클래스를 보여 줍니다. `Pet` "Dog"로 설정 된 기본 값이 있는 필드를 포함 하는 합니다. 그러나 예제에서는 <xref:System.Xml.Serialization.XmlAttributes> 개체 집합과 해당 <xref:System.Xml.Serialization.XmlAttributes.XmlDefaultValue%2A> 속성을 새 기본 값 ("고양이"). 이 원래 기본값을 재정의합니다. 따라서 필드 값 "고양이"로 설정 된 경우는 <xref:System.Xml.Serialization.XmlSerializer> 기본 값으로 간주 하 고 serialize 되지 않습니다. 다른 값으로 설정 된 경우는 <xref:System.Xml.Serialization.XmlSerializer> 값을 serialize 합니다.  
  
 [!code-cpp[Classic XmlAttributes.XmlDefaultValue Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlDefaultValue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlDefaultValue Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlDefaultValue Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlDefaultValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlDefaultValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElements">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlElementAttributes XmlElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlElementAttributes XmlElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property XmlElements As XmlElementAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlElementAttributes ^ XmlElements { System::Xml::Serialization::XmlElementAttributes ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlElements : System.Xml.Serialization.XmlElementAttributes" Usage="System.Xml.Serialization.XmlAttributes.XmlElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlElementAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlSerializer" />가 공용 필드 또는 읽기/쓰기 속성을 XML 요소로 serialize하는 방식을 지정하는 개체의 컬렉션을 가져옵니다.</summary>
        <value><see cref="T:System.Xml.Serialization.XmlElementAttributes" /> 개체의 컬렉션을 포함하는 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML 요소로 serialize 되는 각 재정의 된 멤버에 대 한 새 추가 해야 합니다 <xref:System.Xml.Serialization.XmlElementAttribute> 에 <xref:System.Xml.Serialization.XmlElementAttributes> 를 호출 하 여는 <xref:System.Xml.Serialization.XmlElementAttributes.Add%2A> 메서드. 기본적으로 <xref:System.Xml.Serialization.XmlElementAttributes> 개체가 생성 되 고 할당 된 <xref:System.Xml.Serialization.XmlAttributes.XmlElements%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 serialize 된 `Transportation` 라는 단일 필드를 포함 하는 클래스 `Vehicles` 를 반환 하는 <xref:System.Collections.ArrayList>합니다. 이 예제에서는 두 개의 적용 <xref:System.Xml.Serialization.XmlElementAttribute> 특성을 `Vehicles` 필드입니다. 이 예제에서는 두 개를 만듭니다 <xref:System.Xml.Serialization.XmlElementAttribute> 개체에 추가 합니다는 <xref:System.Xml.Serialization.XmlElementAttributes> 의 컬렉션을 <xref:System.Xml.Serialization.XmlAttributes> 개체. 다른 개체 형식을 허용 하도록 배열을 허용 하는 <xref:System.Xml.Serialization.XmlAttributes> 개체에 추가 됩니다는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 개체입니다.  
  
 [!code-cpp[Classic XmlAttributes.XmlElements Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlElements Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlElements Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlElements Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlElements Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlElements Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEnum">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlEnumAttribute XmlEnum { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlEnumAttribute XmlEnum" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlEnum" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlEnum As XmlEnumAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlEnumAttribute ^ XmlEnum { System::Xml::Serialization::XmlEnumAttribute ^ get(); void set(System::Xml::Serialization::XmlEnumAttribute ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlEnum : System.Xml.Serialization.XmlEnumAttribute with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlEnumAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlSerializer" />가 열거형 멤버를 serialize하는 방식을 지정하는 개체를 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.Serialization.XmlEnumAttribute" />가 열거형 멤버를 serialize하는 방식을 지정하는 <see cref="T:System.Xml.Serialization.XmlSerializer" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 재정의 하려는 각 식별자를 만들어야 합니다는 <xref:System.Xml.Serialization.XmlAttributes> 개체를 설정 합니다 <xref:System.Xml.Serialization.XmlAttributes.XmlEnum%2A> 속성을는 <xref:System.Xml.Serialization.XmlEnumAttribute> 식별자를 재정의 하 합니다. 추가 합니다 <xref:System.Xml.Serialization.XmlAttributes> 개체를 <xref:System.Xml.Serialization.XmlAttributeOverrides> 개체를 모두 지정를 <xref:System.Type> 열거형 및 재정의 된 멤버 이름을 포함 하는 클래스의 합니다.  
  
   
  
## Examples  
 다음 예제에서는 라는 두 개의 클래스를 직렬화 `Food` 고 `FoodType`입니다. `FoodType` 재정의 되는 두 개의 열거형을 포함 하는 클래스를 만듭니다 각 열거에 대 한는 <xref:System.Xml.Serialization.XmlEnumAttribute> 에 할당 되는 개체를 <xref:System.Xml.Serialization.XmlAttributes.XmlEnum%2A> 의 속성은 <xref:System.Xml.Serialization.XmlAttributes> 개체. 예제에서는 그런를 <xref:System.Xml.Serialization.XmlAttributes> 개체를 <xref:System.Xml.Serialization.XmlAttributeOverrides> 개체를 만드는 데 사용 되는 <xref:System.Xml.Serialization.XmlSerializer>합니다.  
  
 [!code-cpp[Classic XmlAttributes.XmlEnum Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlEnum Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlEnum Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlEnum Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlEnum Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlEnum Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlIgnore">
      <MemberSignature Language="C#" Value="public bool XmlIgnore { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool XmlIgnore" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlIgnore" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlIgnore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool XmlIgnore { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.XmlIgnore : bool with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlIgnore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlSerializer" />가 공용 필드 또는 읽기/쓰기 속성을 serialize하는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.Serialization.XmlSerializer" />가 필드 또는 속성을 serialize하지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 모든 public 필드와 공용 읽기/쓰기 속성 하 여 serialize 되는 <xref:System.Xml.Serialization.XmlSerializer>합니다. 즉, 각 public 필드나 속성의 값은 XML 요소 또는 XML 문서 인스턴스에 XML 특성으로 유지 됩니다.  
  
 만들기 필드나 속성의 기본 serialization을 재정의 하는 <xref:System.Xml.Serialization.XmlAttributes> 개체를 설정 해당 <xref:System.Xml.Serialization.XmlAttributes.XmlIgnore%2A> 속성을 `true`입니다. <xref:System.Xml.Serialization.XmlAttributeOverrides.Add%2A> 개체는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 개체 및 필드 또는 속성을 무시 하 고, 포함 된 개체의 형식 및 필드 또는 무시 하는 속성의 이름을 지정 합니다.  
  
 경우는 <xref:System.Xml.Serialization.XmlIgnoreAttribute> 적용 된 필드나 속성, 필드 또는 속성은 무시 됩니다. 만들어 동작을 재정의할 수는 있지만 <xref:System.Xml.Serialization.XmlAttributes> 개체, 설정 해당 <xref:System.Xml.Serialization.XmlAttributes.XmlIgnore%2A> 속성을 `false`를 추가 하는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 필드 또는 속성을 포함 하는 개체의 형식 및 이름을 지정 하는 개체는 필드 또는 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 라는 클래스를 직렬화 `Group`, 라는 멤버를 포함 하는 `Comment` 는 <xref:System.Xml.Serialization.XmlIgnoreAttribute> 적용 됩니다. 만듭니다는 <xref:System.Xml.Serialization.XmlAttributes> 집합과 개체를 <xref:System.Xml.Serialization.XmlAttributes.XmlIgnore%2A> 속성을 `false`재정의 <xref:System.Xml.Serialization.XmlIgnoreAttribute>합니다.  
  
 [!code-cpp[Classic XmlAttributes.XmlIgnore Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlIgnore Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlIgnore Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlIgnore Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlIgnore Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlIgnore Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlIgnoreAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Xmlns">
      <MemberSignature Language="C#" Value="public bool Xmlns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Xmlns" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.Xmlns" />
      <MemberSignature Language="VB.NET" Value="Public Property Xmlns As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Xmlns { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Xmlns : bool with get, set" Usage="System.Xml.Serialization.XmlAttributes.Xmlns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 개체를 반환하는 멤버가 들어 있는 개체가 재정의될 때 모든 네임스페이스 선언을 유지할지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
        <value>네임스페이스 선언을 유지해야 한다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 클래스를 포함 하는 다음 예제에서는 `Student`합니다. 클래스 라는 멤버가 포함 `MyNamespaces` 를 반환 하는 <xref:System.Xml.Serialization.XmlSerializerNamespaces> 개체입니다. 이 예에서는 만듭니다는 <xref:System.Xml.Serialization.XmlAttributes> 인스턴스에 추가 되는 개체는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 클래스입니다. <xref:System.Xml.Serialization.XmlAttributes.Xmlns%2A> 속성이 `true`, 지시를 <xref:System.Xml.Serialization.XmlSerializer> 네임 스페이스를 유지 하기 위해 때의 serialization를 `Student` 개체 재정의 됩니다.  
  
 [!code-cpp[XmlAttributes.Xmlns property example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlAttributes.Xmlns property example/CPP/xmlns.cpp#1)]
 [!code-csharp[XmlAttributes.Xmlns property example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlAttributes.Xmlns property example/CS/xmlns.cs#1)]
 [!code-vb[XmlAttributes.Xmlns property example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlAttributes.Xmlns property example/VB/xmlns.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlRoot">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlRootAttribute XmlRoot { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlRootAttribute XmlRoot" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlRoot" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlRoot As XmlRootAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlRootAttribute ^ XmlRoot { System::Xml::Serialization::XmlRootAttribute ^ get(); void set(System::Xml::Serialization::XmlRootAttribute ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlRoot : System.Xml.Serialization.XmlRootAttribute with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlRootAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlSerializer" />가 클래스를 XML 루트 요소로 serialize하는 방식을 지정하는 개체를 가져오거나 설정합니다.</summary>
        <value>XML 루트 요소로 지정된 클래스를 재정의하는 <see cref="T:System.Xml.Serialization.XmlRootAttribute" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 개체를 <xref:System.Xml.Serialization.XmlAttributes> 개체 및 <xref:System.Xml.Serialization.XmlRootAttribute> 개체입니다. 예제는 <xref:System.Xml.Serialization.XmlRootAttribute> 에 <xref:System.Xml.Serialization.XmlAttributes.XmlRoot%2A> 의 속성을 <xref:System.Xml.Serialization.XmlAttributes> 개체를 추가 <xref:System.Xml.Serialization.XmlAttributes> 개체를 <xref:System.Xml.Serialization.XmlAttributeOverrides> 개체입니다. 마지막으로,이 예제에서는 가져옵니다는 <xref:System.Xml.Serialization.XmlAttributes> 전달 하 여 개체를 <xref:System.Type> serialize 된 클래스의는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 개체. (이 예는 <xref:System.Type> 는 `Group`.)  
  
 [!code-cpp[Classic XmlAttributes.XmlRoot Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlRoot Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlRoot Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlRoot Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlRoot Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlRoot Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlText">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlTextAttribute XmlText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlTextAttribute XmlText" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlText" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlText As XmlTextAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlTextAttribute ^ XmlText { System::Xml::Serialization::XmlTextAttribute ^ get(); void set(System::Xml::Serialization::XmlTextAttribute ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlText : System.Xml.Serialization.XmlTextAttribute with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlTextAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlSerializer" />가 공용 필드 또는 공용 읽기/쓰기 속성을 XML 텍스트로 serialize하도록 하는 개체를 가져오거나 설정합니다.</summary>
        <value>공용 속성 또는 필드의 기본 serialization을 재정의하는 <see cref="T:System.Xml.Serialization.XmlTextAttribute" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 공용 필드 또는 공용 읽기/쓰기 속성으로 serialize 되는 XML 요소를 <xref:System.Xml.Serialization.XmlSerializer>입니다. 그러나 필드 또는 속성을 적용 하 여 XML 텍스트로 serialize 할 수는는 <xref:System.Xml.Serialization.XmlTextAttribute> 필드 또는 속성에 있습니다.  
  
> [!NOTE]
>  <xref:System.Xml.Serialization.XmlTextAttribute> 필드 또는 배열을 반환 하는 속성에 적용할 수 없습니다.  
  
 만들기 필드나 속성 (즉 배열 반환 하지 않습니다)의 기본 serialization을 재정의 하려면는 <xref:System.Xml.Serialization.XmlTextAttribute> 에 할당 합니다 <xref:System.Xml.Serialization.XmlAttributes.XmlText%2A> 의 속성을 <xref:System.Xml.Serialization.XmlAttributes> 개체. 추가 된 <xref:System.Xml.Serialization.XmlAttributes> 개체는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 개체 및 재정의 된 필드 또는 속성을 포함 하는 개체의 형식과 재정의 필드 또는 속성의 이름을 지정 합니다.  
  
   
  
## Examples  
 다음 예제에서는 라는 클래스를 serialize `Group`, 명명 된 필드를 포함 하는 `Comment`합니다. 기본값을 재정의 하려면 방식으로 <xref:System.Xml.Serialization.XmlSerializer> 필드를 serialize 만듭니다는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 및 <xref:System.Xml.Serialization.XmlAttributes> 개체입니다. 만듭니다는 <xref:System.Xml.Serialization.XmlTextAttribute> 개체에 할당를 <xref:System.Xml.Serialization.XmlAttributes.XmlText%2A> 속성을 추가 합니다 <xref:System.Xml.Serialization.XmlAttributes> 개체 (XML 텍스트로 serialize 될 필드의 이름)으로 <xref:System.Xml.Serialization.XmlAttributeOverrides> 개체. 마지막으로 예제에서는 만듭니다는 <xref:System.Xml.Serialization.XmlSerializer> 를 사용 하 여는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 개체입니다.  
  
 [!code-cpp[Classic XmlAttributes.XmlText Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlText Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlText Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlText Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlText Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlText Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlType">
      <MemberSignature Language="C#" Value="public System.Xml.Serialization.XmlTypeAttribute XmlType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Serialization.XmlTypeAttribute XmlType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlAttributes.XmlType" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlType As XmlTypeAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Serialization::XmlTypeAttribute ^ XmlType { System::Xml::Serialization::XmlTypeAttribute ^ get(); void set(System::Xml::Serialization::XmlTypeAttribute ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlType : System.Xml.Serialization.XmlTypeAttribute with get, set" Usage="System.Xml.Serialization.XmlAttributes.XmlType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Serialization.XmlTypeAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlSerializer" />가 적용된 클래스를 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" />가 serialize하는 방식을 지정하는 개체를 가져오거나 설정합니다.</summary>
        <value>클래스 선언에 적용된 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" />를 재정의하는 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Xml.Serialization.XmlTypeAttribute> 형식으로 serialize 되는 방식을 제어 하는데 사용할 수는 <xref:System.Xml.Serialization.XmlSerializer>합니다. 예를 들어 형식으로 serialize 될 때 기본적으로는 <xref:System.Xml.Serialization.XmlSerializer> XML 요소 이름으로 클래스 이름을 사용 합니다. 만들어를 <xref:System.Xml.Serialization.XmlTypeAttribute>설정 합니다 <xref:System.Xml.Serialization.XmlAttributes.XmlType%2A> 속성을 만들고을 <xref:System.Xml.Serialization.XmlAttributeOverrides> 개체를 XML 요소 이름을 변경할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.Serialization.XmlTypeAttribute> 개체를 할당 합니다 <xref:System.Xml.Serialization.XmlAttributes.XmlType%2A> 의 속성을 <xref:System.Xml.Serialization.XmlAttributes> 개체.  
  
 [!code-cpp[Classic XmlAttributes.XmlType Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlAttributes.XmlType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlAttributes.XmlType Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlAttributes.XmlType Example/CS/source.cs#1)]
 [!code-vb[Classic XmlAttributes.XmlType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlAttributes.XmlType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>