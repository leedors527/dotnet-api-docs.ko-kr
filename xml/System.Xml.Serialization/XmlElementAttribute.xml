<Type Name="XmlElementAttribute" FullName="System.Xml.Serialization.XmlElementAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0df25d3559cc01b13c67f4195228deed8eb8c1fb" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58698762" /></Metadata><TypeSignature Language="C#" Value="public class XmlElementAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlElementAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlElementAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlElementAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlElementAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type XmlElementAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Serialization</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>공용 필드 또는 속성을 포함하는 개체를 <see cref="T:System.Xml.Serialization.XmlSerializer" />가 serialize하거나 deserialize할 때 해당 필드나 속성이 XML 요소를 나타냄을 의미합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlElementAttribute> 제어 하는 특성의 제품군에 속해 방법을 <xref:System.Xml.Serialization.XmlSerializer> serialize 하거나 개체를 deserialize 합니다. 비슷한 특성의 전체 목록은 참조 하세요 [는 XML Serialization을 제어 특성](~/docs/standard/serialization/attributes-that-control-xml-serialization.md)합니다.  
  
 XML 문서에는 일반적으로 세 부분으로 구성 하는 각 XML 요소를 포함 합니다: 가능한 특성을 사용 하 여 여는 태그, 닫는 태그 및 태그 간의 데이터입니다. XML 태그는 중첩 될 수 있습니다, 그리고 태그 사이 데이터는 XML 요소를 수도 있습니다. 묶을 때 다른 하나의 요소로이 용량 문서를를 데이터의 계층 구조가 포함 될 수 있습니다. XML 요소 특성을 포함할 수도 있습니다.  
  
 적용 된 <xref:System.Xml.Serialization.XmlElementAttribute> 공용 필드 또는 특성의 요소 이름과 네임 스페이스와 같은 XML 요소를 제어 하는 공용 읽기/쓰기 속성입니다.  
  
 <xref:System.Xml.Serialization.XmlElementAttribute> 개체의 배열을 반환 하는 필드에 여러 번 적용할 수 있습니다. 지정 하는 것이 목적 (통해를 <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> 속성) 배열에 삽입할 수 있는 다른 형식입니다. 예를 들어 다음 C# 코드의 배열에 문자열 및 정수를 둘 다 허용합니다.  
  
```  
public class Things{  
   [XmlElement(Type = typeof(string)),  
   XmlElement(Type = typeof(int))]  
   public object[] StringsAndInts;  
}  
```  
  
 이 인해 XML은 다음과 유사 합니다.  
  
```  
<Things>  
   <string>Hello</string>  
   <int>999</int>  
   <string>World</string>  
</Things>  
```  
  
 적용할 때 유의 합니다 <xref:System.Xml.Serialization.XmlElementAttribute> 여러 번 지정 하지 않고는 <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> 속성 값 요소는 허용 된 개체의 형식 라고 합니다.  
  
 적용 하는 경우는 <xref:System.Xml.Serialization.XmlElementAttribute> 필드 또는 속성이 배열을 반환 하는 배열에 있는 항목 XML 요소의 시퀀스로 인코딩됩니다.  
  
 반면 경우는 <xref:System.Xml.Serialization.XmlElementAttribute> 적용 되지 않고 이러한 필드나 속성, 필드 또는 속성의 이름을 딴 요소 아래에 중첩 된 요소의 시퀀스로 배열의 항목 인코딩됩니다. (사용 된 <xref:System.Xml.Serialization.XmlArrayAttribute> 및 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 배열을 serialize 되는 방식을 제어 하는 특성입니다.)  
  
 설정할 수 있습니다 합니다 <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> 는 원래 필드 또는 속성-의 형식에서 파생 된 형식을 지정 하는 속성, 필드 또는 속성을 적용 합니다 <xref:System.Xml.Serialization.XmlElementAttribute>합니다.  
  
 필드 또는 속성을 반환 하는 경우는 <xref:System.Collections.ArrayList>의 여러 인스턴스를 적용할 수 있습니다는 <xref:System.Xml.Serialization.XmlElementAttribute> 멤버입니다. 각 인스턴스에 대해 설정 된 <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> 속성을 배열에 삽입할 수 있는 개체의 형식입니다.  
  
 특성을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [특성](~/docs/standard/attributes/index.md)합니다.  
  
> [!NOTE]
>  단어를 사용할 수 있습니다 `XmlElement` 대신 코드에서 <xref:System.Xml.Serialization.XmlElementAttribute>합니다.  
  
   
  
## Examples  
 다음 예제에서는 라는 클래스를 직렬화 `Group` 적용을 <xref:System.Xml.Serialization.XmlElementAttribute> 해당 멤버의 여러. 라는 필드 `Employees` 배열을 반환 `Employee` 개체입니다. 이 경우에 <xref:System.Xml.Serialization.XmlElementAttribute> 는 결과 XML은 중첩 될 수 없습니다 (즉, 배열에 있는 항목의 기본 동작)을 지정 합니다.  
  
 [!code-cpp[Classic XmlElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlArrayAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
    <altmember cref="T:System.Xml.Serialization.XmlElementAttributes" />
    <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlElements" />
    <altmember cref="T:System.Xml.Serialization.XmlRootAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <related type="Article" href="~/docs/standard/serialization/introducing-xml-serialization.md">XML Serialization 소개</related>
    <related type="Article" href="~/docs/standard/serialization/how-to-specify-an-alternate-element-name-for-an-xml-stream.md">방법: XML 스트림의 대체 요소 이름 지정</related>
    <related type="Article" href="~/docs/standard/serialization/controlling-xml-serialization-using-attributes.md">특성을 사용하여 XML Serialization 제어</related>
    <related type="Article" href="~/docs/standard/serialization/examples-of-xml-serialization.md">XML Serialization 예제</related>
    <related type="Article" href="~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md">XML Schema Definition Tool (Xsd.exe)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 적용 된 <xref:System.Xml.Serialization.XmlElementAttribute> 클래스입니다.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elementName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlElementAttribute : string -&gt; System.Xml.Serialization.XmlElementAttribute" Usage="new System.Xml.Serialization.XmlElementAttribute elementName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">serialize된 멤버의 XML 요소 이름입니다.</param>
        <summary><see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 클래스의 새 인스턴스를 초기화하고 XML 요소의 이름을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 <xref:System.Xml.Serialization.XmlSerializer> 클래스 인스턴스를 직렬화 할 때 XML 요소 이름으로 멤버 이름을 사용 합니다. 예를 들어 라는 필드가 `Vehicle` 이라는 XML 요소를 생성 `Vehicle`합니다. 그러나와 같은 다른 요소를 사용 해야 하는 경우 `Cars`를 전달 합니다 `elementName` 매개 변수입니다.  
  
   
  
## Examples  
 다음 예제에서는 라는 단일 필드를 포함 하는 간단한 클래스를 보여 줍니다. `Vehicles`합니다. 예제에 적용 됩니다는 <xref:System.Xml.Serialization.XmlElementAttribute> 필드에 포함 합니다 `elementName` 매개 변수를 통해는 <xref:System.Xml.Serialization.XmlSerializer> "차량" 대신 "자동차" 이라는 XML 요소를 생성 하 합니다.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlElementAttribute : Type -&gt; System.Xml.Serialization.XmlElementAttribute" Usage="new System.Xml.Serialization.XmlElementAttribute type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">멤버의 형식에서 파생된 개체의 <see cref="T:System.Type" />입니다.</param>
        <summary><see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 클래스의 새 인스턴스를 초기화하고 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />가 적용되는 멤버에 대한 형식을 지정합니다. 이 형식은 <see cref="T:System.Xml.Serialization.XmlSerializer" />가 이를 포함하는 개체를 serialize하거나 deserialize할 때 사용됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 `type` 기본 클래스에서 파생 된 형식을 지정 하려면 매개 변수입니다. 예를 들어 명명 된 속성 `MyAnimal` 반환을 `Animal` 개체입니다. 라는 새 클래스를 만들 개체를 향상 시키려는 `Mammal` 에서 상속 되는 `Animal` 클래스입니다. 지시 하는 <xref:System.Xml.Serialization.XmlSerializer> 적용할를 `Mammal` serialize 할 때 클래스를 `MyAnimal` 속성을 전달 합니다 <xref:System.Type> 의 `Mammal` 클래스 생성자에.  
  
   
  
## Examples  
 다음 예제에서는 라는 클래스를 직렬화 `Orchestra` 라는 단일 필드를 포함 하는 `Instruments`의 배열을 반환 하는 `Instrument` 개체입니다. 두 번째 클래스가 `Brass` 에서 상속 되는 `Instrument` 클래스입니다. 예제에 적용 됩니다는 <xref:System.Xml.Serialization.XmlElementAttribute> 에 `Instruments` 필드 및 지정를 `Brass` 입력을 허용 합니다 `Instruments` 적용할 필드 `Brass` 개체. 예제는 또한 XML 요소 이름을 설정 하 여 지정 된 <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> 속성입니다.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlElementAttribute (string elementName, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlElementAttribute(System::String ^ elementName, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlElementAttribute : string * Type -&gt; System.Xml.Serialization.XmlElementAttribute" Usage="new System.Xml.Serialization.XmlElementAttribute (elementName, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="elementName">serialize된 멤버의 XML 요소 이름입니다.</param>
        <param name="type">멤버의 형식에서 파생된 개체의 <see cref="T:System.Type" />입니다.</param>
        <summary><see cref="T:System.Xml.Serialization.XmlElementAttribute" />의 새 인스턴스를 초기화하고 XML 요소의 이름을 지정하며 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />가 적용되는 멤버의 파생 형식도 지정합니다. 이 멤버 형식은 <see cref="T:System.Xml.Serialization.XmlSerializer" />가 이를 포함하는 개체를 serialize할 때 사용됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 <xref:System.Xml.Serialization.XmlSerializer> 클래스 인스턴스를 직렬화 할 때 XML 요소 이름으로 멤버 이름을 사용 합니다. 예를 들어 라는 필드가 `Vehicle` 이라는 XML 요소를 생성 `Vehicle`합니다. 그러나 같은 다른 요소를 사용 해야 하는 경우 `Cars`를 전달 합니다 `elementName` 매개 변수입니다.  
  
 사용 된 `type` 기본 클래스에서 파생 된 형식을 지정 하려면 매개 변수입니다. 예를 들어 명명 된 속성 `MyAnimal` 반환을 `Animal` 개체입니다. 라는 새 클래스를 만들 개체를 향상 시키려는 `Mammal` 에서 상속 되는 `Animal` 클래스입니다. 지시 하는 <xref:System.Xml.Serialization.XmlSerializer> 적용할를 `Mammal` serialize 할 때 클래스를 `MyAnimal` 속성을 전달 합니다 <xref:System.Type> 의 `Mammal` 클래스 생성자에.  
  
   
  
## Examples  
 다음 예제에서는 라는 클래스를 직렬화 `Orchestra` 라는 단일 필드를 포함 하는 `Instruments`의 배열을 반환 하는 `Instrument` 개체입니다. 두 번째 클래스가 `Brass` 에서 상속 되는 `Instrument` 클래스입니다. 예제에 적용 됩니다는 <xref:System.Xml.Serialization.XmlElementAttribute> 에 `Instruments` 필드 및 지정를 `Brass` 입력을 허용 합니다 `Instruments` 적용할 필드 `Brass` 개체. 예제는 또한 XML 요소 이름을 설정 하 여 지정 된 <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> 속성입니다.  
  
 [!code-cpp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.XmlElementAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.XmlElementAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataType : string with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlSerializer" />에 의해 생성된 XML 요소의 XSD(XML 스키마 정의) 데이터 형식을 가져오거나 설정합니다.</summary>
        <value>XML 스키마 데이터 형식에 대한 자세한 내용은 World Wide Web 컨소시엄(www.w3.org) 문서 "XML Schema Part 2: Datatypes"를 참조하십시오.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 테이블 및 해당 하는 XML 스키마 단순 데이터 형식을 나열합니다.  
  
 XML 스키마에 대 한 `base64Binary` 및 `hexBinary` 데이터 형식을 사용 하 여 배열을 <xref:System.Byte> 구조를 및 적용을 <xref:System.Xml.Serialization.XmlElementAttribute> 사용 하 여는 <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> "base64Binary" 또는 "hexBinary" 적절 하 게 설정 합니다. XML 스키마에 대 한 `time` 및 `date` 데이터 형식을 사용 하 여는 <xref:System.DateTime> 입력 하 고 적용 합니다 <xref:System.Xml.Serialization.XmlElementAttribute> 사용 하 여는 <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> "date" 또는 "시간"으로 설정 합니다.  
  
 문자열에 매핑되는 모든 XML 스키마 형식에 적용 합니다 <xref:System.Xml.Serialization.XmlElementAttribute> 사용 하 여 해당 <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> 속성이 XML 스키마 형식으로 설정 합니다. Serialization 형식으로 뿐 아니라 멤버에 대 한 스키마를 변경할 수 있습니다이 가능 합니다.  
  
> [!NOTE]
>  XML 스키마 데이터 형식 중 하나를 정확 하 게 설정 해야 하므로 속성이 대/소문자를 구분 합니다.  
  
> [!NOTE]
>  이진 데이터를 XML 형식으로 전달 요소는 XML 특성으로 전달 보다 더 효율적입니다.  
  
 XML 데이터 형식에 대 한 자세한 내용은 참조는 World Wide Web 컨소시엄 (www.w3.org) 문서 "XML Schema Part 2: Datatypes "로 설정 합니다.  
  
|XSD 데이터 형식|.NET 데이터 형식|  
|-------------------|--------------------|  
|anyURI|<xref:System.String>|  
|base64Binary|배열을 <xref:System.Byte> 개체|  
|boolean|<xref:System.Boolean>|  
|byte|<xref:System.SByte>|  
|date|<xref:System.DateTime>|  
|dateTime|<xref:System.DateTime>|  
|decimal|<xref:System.Decimal>|  
|double|<xref:System.Double>|  
|ENTITY|<xref:System.String>|  
|엔터티|<xref:System.String>|  
|float|<xref:System.Single>|  
|gDay|<xref:System.String>|  
|gMonth|<xref:System.String>|  
|gMonthDay|<xref:System.String>|  
|gYear|<xref:System.String>|  
|gYearMonth|<xref:System.String>|  
|hexBinary|배열을 <xref:System.Byte> 개체|  
|ID|<xref:System.String>|  
|IDREF|<xref:System.String>|  
|IDREFS|<xref:System.String>|  
|int|<xref:System.Int32>|  
|정수|<xref:System.String>|  
|language|<xref:System.String>|  
|long|<xref:System.Int64>|  
|name|<xref:System.String>|  
|NCName|<xref:System.String>|  
|negativeInteger|<xref:System.String>|  
|NMTOKEN|<xref:System.String>|  
|NMTOKENS|<xref:System.String>|  
|normalizedString|<xref:System.String>|  
|nonNegativeInteger|<xref:System.String>|  
|nonPositiveInteger|<xref:System.String>|  
|NOTATION|<xref:System.String>|  
|positiveInteger|<xref:System.String>|  
|QName|<xref:System.Xml.XmlQualifiedName>|  
|duration|<xref:System.String>|  
|string|<xref:System.String>|  
|short|<xref:System.Int16>|  
|시간|<xref:System.DateTime>|  
|token|<xref:System.String>|  
|unsignedByte|<xref:System.Byte>|  
|unsignedInt|<xref:System.UInt32>|  
|unsignedLong|<xref:System.UInt64>|  
|unsignedShort|<xref:System.UInt16>|  
  
   
  
## Examples  
 다음 예제에서는 라는 클래스를 직렬화 `Group` 라는 필드를 포함 하는 `ExtraInfo`를 반환 하는 <xref:System.Collections.ArrayList>합니다. 두 인스턴스를 적용 하는 예제는 <xref:System.Xml.Serialization.XmlElementAttribute> 필드에 다른 지정 <xref:System.Xml.Serialization.XmlElementAttribute.DataType%2A> 각 인스턴스에 대 한 값입니다. 각 인스턴스를 사용 하도록 설정 된 <xref:System.Xml.Serialization.XmlSerializer> 배열에 삽입 하는 지정된 된 형식을 serialize 하 합니다.  
  
 [!code-cpp[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.DataType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.DataType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">지정한 XML 스키마 데이터 형식을 .NET 데이터 형식에 매핑할 수 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ElementName : string with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>생성된 XML 요소의 이름을 가져오거나 설정합니다.</summary>
        <value>생성된 XML 요소의 이름입니다. 기본값은 멤버 식별자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정 된 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 멤버 식별자는 다르게 생성 된 XML 요소의 이름을 지정 하려는 경우.  
  
 동일한를 설정할 수 있습니다 <xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A> 생성된 된 XML 문서의 XML 네임 스페이스를 사용 하 여 이름이 같은 멤버를 구분 하려면 클래스 멤버에 둘 이상의 값입니다. XML 문서의 네임 스페이스 및 접두사가 붙은 이름을 사용 하는 방법에 대 한 내용은 참조는 <xref:System.Xml.Serialization.XmlSerializerNamespaces> 클래스입니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.Xml.Serialization.XmlElementAttribute.ElementName%2A> 의 속성을 <xref:System.Xml.Serialization.XmlElementAttribute> 새 값으로.  
  
 [!code-cpp[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.ElementName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.ElementName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName" />
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaForm Form { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaForm Form" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Form" />
      <MemberSignature Language="VB.NET" Value="Public Property Form As XmlSchemaForm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaForm Form { System::Xml::Schema::XmlSchemaForm get(); void set(System::Xml::Schema::XmlSchemaForm value); };" />
      <MemberSignature Language="F#" Value="member this.Form : System.Xml.Schema.XmlSchemaForm with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Form" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaForm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소가 한정되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.Schema.XmlSchemaForm" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> 속성 정규화 되거나 정규화 되지 않은 XML 요소 인지를 확인 합니다. <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> 속성 "네임 스페이스에서 XML" World Wide Web 컨소시엄 (www.w3.org) 1999 사양을 준수 합니다.  
  
 경우는 <xref:System.Xml.Serialization.XmlAttributeAttribute.Namespace%2A> 모든 값을 설정 하는 속성을 <xref:System.Xml.Serialization.XmlElementAttribute.Form%2A> 속성을 `XmlSchemaForm.Unqualified` 예외를 throw 합니다. 기본 설정 `XmlSchemaForm.None`, 지시를 <xref:System.Xml.Serialization.XmlSerializer> 네임 스페이스 정규화 있는지 여부를 결정 하는 XML 문서에 대 한 스키마를 확인 합니다. 스키마는 개별 요소 또는 특성에 대 한 값을 지정 하지 않는 경우는 <xref:System.Xml.Serialization.XmlSerializer> 사용 합니다 `elementFormDefault` 및 `attributeFormDefault` 요소 또는 특성을 정규화 되었는지 여부를 결정 하는 값입니다. 다음 XML 코드에는 스키마를 보여 줍니다.  
  
```  
<schema elementFormDefault="qualified"   
attributeFormDefault="unqualified"... >  
 <element name="Name"/>  
 <attribute name="Number"/>  
</schema>  
```  
  
 경우는 <xref:System.Xml.Serialization.XmlSerializer> 에서 스키마를 읽으면를 <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> 둘 다에 대 한 값을 `Name` 및 `Number` 는 `XmlSchemaForm.None`, 하지만 `Name` 요소가 한정 되었는지 하는 동안를 `Number` 요소 정규화 되지 않은.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.Xml.Serialization.XmlElementAttribute.Form%2A> 속성을 `XmlSchemaForm.Unqualified`입니다.  
  
 [!code-cpp[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.Form Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.Form Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlSerializer" />가 <see langword="null" />로 설정된 멤버를 <see langword="xsi:nil" /> 특성이 <see langword="true" />로 설정된 빈 태그로 serialize해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.Serialization.XmlSerializer" />가 <see langword="true" /> 특성을 생성하면 <see langword="xsi:nil" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 구조에 대 한 XML 스키마 사양에는 XML 문서를 요소 콘텐츠 누락 된 명시적으로 신호를 수 있습니다. 이러한 요소에 특성이 포함 `xsi:nil` 로 `true`합니다. 자세한 내용은 World Wide Web 컨소시엄 (www.w3.org) 사양의 참조 하세요. "XML Schema Part 1: 구조 "로 설정 합니다.  
  
 경우는 <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> 속성이 `true`의 `xsi:nil` 특성에 설정 된 클래스 멤버에 대해 생성 됩니다 `null`합니다. 예를 들어 명명 된 필드를 설정 하는 경우 `MyStringArray` 하 `null`는 <xref:System.Xml.Serialization.XmlSerializer> 다음 XML 코드를 생성 합니다.  
  
```  
<MyStringArray xsi:nil = "true" />  
```  
  
 경우는 <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> 속성은 `false`에 설정 된 클래스 멤버에 대 한 XML 요소가 생성 됩니다 `null`합니다.  
  
> [!NOTE]
>  적용할 수 없습니다는 <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> 멤버에 대 한 속성 값 형식을 포함할 수 없습니다 때문에 값 형식으로 입력 `null`합니다. 이 속성 설정할 수 없습니다 또한 `false` nullable 값 형식에 대 한 합니다. 이러한 형식은 때 `null`를 설정 하 여 직렬화 됩니다 `xsi:nil` 에 `true`입니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하 여 필드를 표시 합니다 <xref:System.Xml.Serialization.XmlElementAttribute> 적용 및 <xref:System.Xml.Serialization.XmlElementAttribute.IsNullable%2A> 속성이로 설정 `false`.  
  
 [!code-cpp[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.IsNullable Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.IsNullable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>클래스가 serialize될 때 결과로 만들어지는 XML 요소에 할당된 네임스페이스를 가져오거나 설정합니다.</summary>
        <value>XML 요소의 네임스페이스입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Namespace%2A> 속성 "네임 스페이스에서 XML" World Wide Web 컨소시엄 (www.w3.org) 사양을 준수 합니다.  
  
 접두사와 연결 된 네임 스페이스를 만들려면 만들어야는 <xref:System.Xml.Serialization.XmlSerializerNamespaces> 네임 스페이스 및 XML 문서에 사용 되는 접두사를 포함 하는 합니다. 각 네임 스페이스를 설정 하면 <xref:System.Xml.Serialization.XmlArrayAttribute>에서 네임 스페이스 중 하 나와 일치 해야 합니다 <xref:System.Xml.Serialization.XmlSerializerNamespaces>합니다. XML 생성 되 면 각 배열에 연결 된 지정된 된 네임 스페이스 접두사를 사용 하 여 올바르게 접두사로 추가 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C#" Value="public int Order { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Order" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Order" />
      <MemberSignature Language="VB.NET" Value="Public Property Order As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Order { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Order : int with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Order" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요소가 serialize 또는 deserialize되는 명시적 순서를 가져오거나 설정합니다.</summary>
        <value>코드가 생성되는 순서입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Xml.Serialization.CodeGenerationOptions.GenerateOrder> 지시 하는 열거형은 <xref:System.Web.Services.Description.ServiceDescriptionImporter> 설정 하는 코드를 생성 하는 <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A> 속성.  
  
> [!IMPORTANT]
>  한 번의 <xref:System.Xml.Serialization.XmlElementAttribute.Order%2A> 하나의 공용 속성 또는 필드 형식에서 사용 된 속성, 모든 공용 속성 및 해당 형식 및 상속 된 모든 형식에 대 한 필드에 적용 해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlElementAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type with get, set" Usage="System.Xml.Serialization.XmlElementAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 요소를 나타내는 데 사용되는 개체 형식을 가져오거나 설정합니다.</summary>
        <value>멤버의 <see cref="T:System.Type" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> 필드 또는 속성에 대 한 파생된 형식을 지정 하는 속성입니다.  
  
 필드 또는 속성을 반환 하는 경우는 <xref:System.Collections.ArrayList>의 여러 인스턴스를 적용할 수 있습니다는 <xref:System.Xml.Serialization.XmlElementAttribute> 멤버입니다. 각 인스턴스에 대해 설정 된 <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> 속성을 배열에 삽입할 수 있는 개체의 형식입니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> 파생된 개체를 지정 하는 속성을 <xref:System.Xml.Serialization.XmlElementAttribute>입니다. 인스턴스의 수가 세 예제에도 적용 됩니다는 <xref:System.Xml.Serialization.XmlElementAttribute> 를 반환 하는 필드는 <xref:System.Collections.ArrayList>합니다. 각 인스턴스 필드에 허용 된 형식을 지정 합니다.  
  
 [!code-cpp[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/CS/source.cs#1)]
 [!code-vb[Classic XmlElementAttribute.Type Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlElementAttribute.Type Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>