<Type Name="XmlRootAttribute" FullName="System.Xml.Serialization.XmlRootAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c760e2ed7a7c8f72c39c7384164de92669f0102c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58723921" /></Metadata><TypeSignature Language="C#" Value="public class XmlRootAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlRootAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlRootAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlRootAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlRootAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type XmlRootAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Serialization</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Enum | System.AttributeTargets.Interface | System.AttributeTargets.ReturnValue | System.AttributeTargets.Struct)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Interface | System.AttributeTargets.ReturnValue)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>특성 대상의 XML serialization을 XML 루트 요소로 제어합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlRootAttribute> 제어 하는 특성의 제품군에 속해 방법을 <xref:System.Xml.Serialization.XmlSerializer> serialize 하거나 개체를 deserialize 합니다. 비슷한 특성의 전체 목록은 참조 하세요 [는 XML Serialization을 제어 특성](~/docs/standard/serialization/attributes-that-control-xml-serialization.md)합니다.  
  
 적용할 수는 <xref:System.Xml.Serialization.XmlRootAttribute> 클래스, 구조체, 열거형 또는 인터페이스입니다. 또한 XML 웹 서비스 메서드의 반환 값으로 특성을 적용할 수 있습니다.  
  
 모든 XML 문서에는 다른 모든 요소를 포함 하는 단일 루트 요소가 있어야 합니다. 합니다 <xref:System.Xml.Serialization.XmlRootAttribute> 제어할 수 있게 하는 방법을 <xref:System.Xml.Serialization.XmlSerializer> 특정 속성을 설정 하 여 루트 요소를 생성 합니다. 예를 들어, 생성 된 XML 요소의 이름을 설정 하 여 지정 된 <xref:System.Xml.Serialization.XmlRootAttribute.ElementName%2A> 속성입니다.  
  
 특성을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. [특성](~/docs/standard/attributes/index.md)합니다.  
  
> [!NOTE]
>  단어를 사용할 수 있습니다 `XmlRoot` 대신 코드에서 <xref:System.Xml.Serialization.XmlRootAttribute>합니다.  
  
   
  
## Examples  
 다음 예제에서는 적용 된 <xref:System.Xml.Serialization.XmlRootAttribute> 클래스입니다. 특성은 요소 이름, 네임 스페이스를 지정 및 요소가 한정 되었는지 여부와 `xsi:nil` 특성은 클래스 설정 된 경우 생성 `null`합니다.  
  
 [!code-cpp[Classic XmlRootAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlRootAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlRootAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlRootAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlRootAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlRootAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlArrayAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlElementAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
    <related type="Article" href="~/docs/standard/serialization/introducing-xml-serialization.md">XML Serialization 소개</related>
    <related type="Article" href="~/docs/standard/serialization/how-to-specify-an-alternate-element-name-for-an-xml-stream.md">방법: XML 스트림의 대체 요소 이름 지정</related>
    <related type="Article" href="~/docs/standard/serialization/controlling-xml-serialization-using-attributes.md">특성을 사용하여 XML Serialization 제어</related>
    <related type="Article" href="~/docs/standard/serialization/examples-of-xml-serialization.md">XML Serialization 예제</related>
    <related type="Article" href="~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md">XML Schema Definition Tool (Xsd.exe)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlRootAttribute" /> 클래스의 새 인스턴스를 초기화하고 해당 클래스 이름을 XML 루트 요소의 이름으로 사용합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlRootAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlRootAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlRootAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlRootAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 인스턴스를 만듭니다는 <xref:System.Xml.Serialization.XmlRootAttribute> 에 할당 합니다 <xref:System.Xml.Serialization.XmlAttributes.XmlRoot%2A> 의 속성을 <xref:System.Xml.Serialization.XmlAttributes> 개체. 경우는 <xref:System.Xml.Serialization.XmlSerializer> serialize 합니다 `MyClass` 개체를 사용 하 여는 <xref:System.Xml.Serialization.XmlRootAttribute> 기본 루트 요소를 재정의 하는 개체입니다.  
  
 [!code-cpp[Classic XmlRootAttribute.XmlRootAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlRootAttribute.XmlRootAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlRootAttribute.XmlRootAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlRootAttribute.XmlRootAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlRootAttribute.XmlRootAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlRootAttribute.XmlRootAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlRoot" />
        <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlRootAttribute (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elementName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlRootAttribute(System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlRootAttribute : string -&gt; System.Xml.Serialization.XmlRootAttribute" Usage="new System.Xml.Serialization.XmlRootAttribute elementName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">XML 루트 요소의 이름입니다.</param>
        <summary><see cref="T:System.Xml.Serialization.XmlRootAttribute" /> 클래스의 새 인스턴스를 초기화하고 XML 루트 요소의 이름을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 XmlRootAttribute의 인스턴스를 만들고 "학생" 라는 클래스 인스턴스의 serialization을 재정의 하는 데 사용 합니다.  
  
 [!code-cpp[XMLRootAttribute_Constructor#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XMLRootAttribute_Constructor/CPP/xmlrootattribute_constructor.cpp#1)]
 [!code-csharp[XMLRootAttribute_Constructor#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XMLRootAttribute_Constructor/CS/xmlrootattribute_constructor.cs#1)]
 [!code-vb[XMLRootAttribute_Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XMLRootAttribute_Constructor/VB/xmlrootattribute_constructor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Serialization.XmlRootAttribute.ElementName" />
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlRootAttribute.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataType : string with get, set" Usage="System.Xml.Serialization.XmlRootAttribute.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 루트 요소의 XSD 데이터 형식을 가져오거나 설정합니다.</summary>
        <value>World Wide Web 컨소시엄(www.w3.org) 문서의 "XML Schema Part 2: Datatypes"에 정의된 XSD(XML 스키마 문서) 데이터 형식입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 XSD는 단순 데이터 형식은.NET 상응 항목으로 나열합니다.  
  
 XSD에 대 한 `base64Binary` 및 `hexBinary` 데이터 형식을 사용 하 여 배열을 <xref:System.Byte> 구조를 및 적용을 <xref:System.Xml.Serialization.XmlRootAttribute> 사용 하 여는 <xref:System.Xml.Serialization.XmlRootAttribute.DataType%2A> "base64Binary" 또는 "hexBinary" 적절 하 게 설정 하는 속성. XSD에 대 한 `time` 및 `date` 데이터 형식을 사용 하 여는 <xref:System.DateTime> 입력 하 고 적용 합니다 <xref:System.Xml.Serialization.XmlRootAttribute> 사용 하 여는 <xref:System.Xml.Serialization.XmlRootAttribute.DataType%2A> "date" 또는 "시간"으로 설정 합니다.  
  
 문자열에 매핑되는 모든 XSD 형식에 대해 적용을 <xref:System.Xml.Serialization.XmlRootAttribute> 사용 하 여 해당 <xref:System.Xml.Serialization.XmlRootAttribute.DataType%2A> 속성이 XSD 형식으로 설정 합니다. 그러나 serialization 형식으로 멤버에 대 한 스키마만 변경 되지 않습니다.  
  
> [!NOTE]
>  XSD 데이터 유형 중 하나를 정확 하 게 설정 해야 하므로 속성이 대/소문자를 구분 합니다.  
  
> [!NOTE]
>  요소를 XML 형식으로 이진 데이터를 전달 합니다. XML 특성으로 전달할 때 보다 더 효율적입니다.  
  
 XML 데이터 형식에 대 한 자세한 내용은 참조는 World Wide Web 컨소시엄 (www.w3.org) 문서 "XML Schema Part 2: Datatypes "로 설정 합니다.  
  
|XSD 데이터 형식|.NET 데이터 형식|  
|-------------------|--------------------|  
|anyURI|<xref:System.String>|  
|base64Binary|배열을 <xref:System.Byte> 개체|  
|boolean|<xref:System.Boolean>|  
|byte|<xref:System.SByte>|  
|date|<xref:System.DateTime>|  
|dateTime|<xref:System.DateTime>|  
|decimal|<xref:System.Decimal>|  
|double|<xref:System.Double>|  
|ENTITY|<xref:System.String>|  
|엔터티|<xref:System.String>|  
|float|<xref:System.Single>|  
|gDay|<xref:System.String>|  
|gMonth|<xref:System.String>|  
|gMonthDay|<xref:System.String>|  
|gYear|<xref:System.String>|  
|gYearMonth|<xref:System.String>|  
|hexBinary|배열을 <xref:System.Byte> 개체|  
|ID|<xref:System.String>|  
|IDREF|<xref:System.String>|  
|IDREFS|<xref:System.String>|  
|int|<xref:System.Int32>|  
|정수|<xref:System.String>|  
|language|<xref:System.String>|  
|long|<xref:System.Int64>|  
|name|<xref:System.String>|  
|NCName|<xref:System.String>|  
|negativeInteger|<xref:System.String>|  
|NMTOKEN|<xref:System.String>|  
|NMTOKENS|<xref:System.String>|  
|normalizedString|<xref:System.String>|  
|nonNegativeInteger|<xref:System.String>|  
|nonPositiveInteger|<xref:System.String>|  
|NOTATION|<xref:System.String>|  
|positiveInteger|<xref:System.String>|  
|QName|<xref:System.Xml.XmlQualifiedName>|  
|recurringDate|<xref:System.String>|  
|duration|<xref:System.String>|  
|string|<xref:System.String>|  
|short|<xref:System.Int16>|  
|시간|<xref:System.DateTime>|  
|token|<xref:System.String>|  
|unsignedByte|<xref:System.Byte>|  
|unsignedInt|<xref:System.UInt32>|  
|unsignedLong|<xref:System.UInt64>|  
|unsignedShort|<xref:System.UInt16>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlRootAttribute.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ElementName : string with get, set" Usage="System.Xml.Serialization.XmlRootAttribute.ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlSerializer" /> 클래스의 <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> 및 <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> 메서드에 의해 각각 생성되고 인식되는 XML 요소의 이름을 가져오거나 설정합니다.</summary>
        <value>XML 문서 인스턴스에서 생성되고 인식되는 XML 루트 요소의 이름입니다. 기본값은 serialize된 클래스의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 지정 된 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 클래스 이름을 다르게 생성 된 XML 요소의 이름을 지정 하려는 경우.  
  
   
  
## Examples  
 다음 예제에서는 인스턴스를 만듭니다는 <xref:System.Xml.Serialization.XmlRootAttribute> 집합과 클래스는 <xref:System.Xml.Serialization.XmlRootAttribute.ElementName%2A> 속성을 새 값입니다. 개체는 만드는 데 다음는 <xref:System.Xml.Serialization.XmlAttributeOverrides> 개체의 serialization을 재정의 하는 데 사용 되는 개체입니다.  
  
 [!code-cpp[XMLRootAttribute_ElementName#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XMLRootAttribute_ElementName/CPP/xmlrootattribute_elementname.cpp#1)]
 [!code-csharp[XMLRootAttribute_ElementName#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XMLRootAttribute_ElementName/CS/xmlrootattribute_elementname.cs#1)]
 [!code-vb[XMLRootAttribute_ElementName#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XMLRootAttribute_ElementName/VB/xmlrootattribute_elementname.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlRootAttribute.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool with get, set" Usage="System.Xml.Serialization.XmlRootAttribute.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Serialization.XmlSerializer" />가 <see langword="null" />로 설정된 멤버를 <see langword="xsi:nil" />로 설정된 <see langword="true" /> 특성으로 serialize해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value><see cref="T:System.Xml.Serialization.XmlSerializer" />가 <see langword="true" /> 특성을 생성하면 <see langword="xsi:nil" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 구조에 대 한 XML 스키마 사양에는 XML 문서를 요소 콘텐츠 누락 된 명시적으로 신호를 수 있습니다. 이러한 요소에 특성이 포함 `xsi:nil` 로 `true`합니다. 자세한 내용은 참조 하세요. [XML Schema Part 1: Structures Second Edition](https://www.w3.org/TR/xmlschema-1/)합니다.
  
 경우는 <xref:System.Xml.Serialization.XmlRootAttribute.IsNullable%2A> 속성이로 설정 되어 `true`, `xsi:nil` 다음 XML 에서처럼 특성이 생성 됩니다.  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
<Group xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
xmlns:xsd="http://www.w3.org/2001/XMLSchema" xsi:nil="true" />  
```  
  
 경우는 <xref:System.Xml.Serialization.XmlRootAttribute.IsNullable%2A> 속성은 `false`, 빈 요소는 다음 코드에 나와 있는 것 처럼 생성 됩니다.  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
<Group xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
xmlns:xsd="http://www.w3.org/2001/XMLSchema" />  
```  
  
   
  
## Examples  
 다음 예제에서는 라는 클래스를 직렬화 `Group`합니다. 예제에 적용 됩니다는 <xref:System.Xml.Serialization.XmlRootAttribute> 클래스를 설정 합니다 <xref:System.Xml.Serialization.XmlRootAttribute.IsNullable%2A> 속성을 `false`.  
  
 [!code-cpp[Classic XmlRootAttribute.IsNullable Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlRootAttribute.IsNullable Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlRootAttribute.IsNullable Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlRootAttribute.IsNullable Example/CS/source.cs#1)]
 [!code-vb[Classic XmlRootAttribute.IsNullable Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlRootAttribute.IsNullable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlRootAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Xml.Serialization.XmlRootAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 루트 요소의 네임스페이스를 가져오거나 설정합니다.</summary>
        <value>XML 요소의 네임스페이스입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Namespace%2A> 속성 이라는 World Wide Web 컨소시엄 (www.w3.org) 사양을 준수 `Namespaces in XML`합니다.  
  
 접두사가 있는 네임 스페이스에 XML 문서를 만들려면 만들기는 <xref:System.Xml.Serialization.XmlSerializerNamespaces> 모든 접두사-네임 스페이스 쌍이 들어 있는 개체입니다. 네임 스페이스 각각에 대해 설정한 <xref:System.Xml.Serialization.XmlArrayAttribute> 에 포함 되어야 합니다는 <xref:System.Xml.Serialization.XmlSerializerNamespaces> 개체입니다. 경우는 <xref:System.Xml.Serialization.XmlSerializer> 문서를 생성할 요소 이름을 각 배열 항목에 대 한 접두사를 붙입니다.  
  
   
  
## Examples  
 다음 예제에서는 합니다 <xref:System.Xml.Serialization.XmlRootAttribute> 클래스 및 집합은 <xref:System.Xml.Serialization.XmlRootAttribute.Namespace%2A> 속성.  
  
 [!code-cpp[Classic XmlRootAttribute.Namespace Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlRootAttribute.Namespace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlRootAttribute.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlRootAttribute.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic XmlRootAttribute.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlRootAttribute.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
        <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
        <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlRoot" />
      </Docs>
    </Member>
  </Members>
</Type>