<Type Name="XslCompiledTransform" FullName="System.Xml.Xsl.XslCompiledTransform">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0a19c81ff0442a25cf315f67a5186402ce7e8152" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58687791" /></Metadata><TypeSignature Language="C#" Value="public sealed class XslCompiledTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed XslCompiledTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslCompiledTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslCompiledTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslCompiledTransform sealed" />
  <TypeSignature Language="F#" Value="type XslCompiledTransform = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>XSLT 스타일시트를 사용하여 XML 데이터를 변환합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스는 XSLT 1.0 구문을 지 원하는 XSLT 프로세서입니다. 새 구현 이며 사용 되지 않는에 비해 성능 향상을 포함 <xref:System.Xml.Xsl.XslTransform> 클래스입니다. 구조를 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스는 매우 비슷합니다는 <xref:System.Xml.Xsl.XslTransform> 클래스입니다. <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 메서드는 로드 하 고 스타일을 컴파일합니다 하는 동안 시트를 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 메서드는 XSLT 변환을 실행 합니다.  
  
 Xslt 지원 `document()` 함수 및 포함 된 스크립트 블록은 기본적으로 비활성화 됩니다. 이러한 기능을 만들어 사용할 수는 <xref:System.Xml.Xsl.XsltSettings> 개체를 전달 하는 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 메서드.  
  
 자세한 내용은 [XslCompiledTransform 클래스를 사용 하 여](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) 하 고 [the XslTransform 클래스에서 마이그레이션](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
## <a name="security-considerations"></a>보안 고려 사항  
 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스를 사용하는 응용 프로그램을 만드는 경우 다음 항목 및 그 의미에 대해 알아야 합니다.  
  
-   XSLT 스크립트는 기본적으로 비활성화되어 있습니다. XSLT 스크립트는 스크립트 지원이 필요하거나 완전히 신뢰할 수 있는 환경에서 작업하는 경우에만 활성화해야 합니다.  
  
-   XSLT `document()` 함수는 기본적으로 비활성화되어 있습니다. `document()` 함수를 활성화하는 경우 <xref:System.Xml.XmlSecureResolver> 개체를 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 메서드에 전달하여 액세스할 수 있는 리소스를 제한합니다.  
  
-   확장명 개체는 기본적으로 활성화되어 있습니다. 확장 개체가 포함된 <xref:System.Xml.Xsl.XsltArgumentList> 개체를 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 메서드에 전달하면 이 확장 개체가 사용됩니다.  
  
-   XSLT 스타일시트에는 다른 파일에 대한 참조 및 포함 스크립트 블록이 포함될 수 있습니다. 악의적인 사용자는 이 스타일시트를 실행할 경우 리소스에서 컴퓨터가 느리게 실행될 때까지 시스템에서 처리하게 만들 수 있는 데이터 또는 스타일시트를 제공하여 악용할 수 있습니다.  
  
-   혼합 신뢰 환경에서 XSLT 응용 프로그램을 실행하면 스타일시트가 스푸핑될 수 있습니다. 예를 들어, 악의적인 사용자는 해로운 스타일시트가 포함된 개체를 로드한 후 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 메서드를 호출하고 변환을 실행할 다른 사용자에게 전달할 수 있습니다.  
  
 신뢰할 수 있는 소스에서 스타일시트를 가져오지 않은 경우 스크립트 또는 `document()` 함수를 비활성화하여 이러한 보안 문제를 완화하거나 신뢰할 수 없는 소스로부터 <xref:System.Xml.Xsl.XslCompiledTransform> 개체, XSLT 스타일시트 또는 XML 소스 데이터를 차단하여 완화할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 변환을 실행 하 고 파일에 출력 합니다.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 이 샘플에서는 다음 두 개의 입력된 파일 사용:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe><see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 로드 되 면 개체는 스레드로부터 안전 합니다. 즉, 후는 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> 메서드를 완료 합니다 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> 메서드 여러 스레드에서 동시에 호출할 수 있습니다.  
  
경우는 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> 메서드를 하는 동안 한 스레드에서 다시 호출 합니다 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> 다른 스레드에서 메서드가 호출 되는 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 개체의 실행이 완료를 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> 이전 상태를 사용 하 여 호출. 새 상태는 때를 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> 메서드가 성공적으로 완료 합니다.  
  
 <block subset="none" type="note"><para>  
 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> 메서드는 여러 스레드에서 동시에 호출할 경우 스레드로부터 안전 하지 않습니다.  
  
</para></block></threadsafe>
    <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
    <altmember cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />
    <altmember cref="N:System.Xml" />
    <related type="Article" href="https://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03">XSLT 변환</related>
    <related type="Article" href="~/docs/standard/data/xml/index.md">XML 문서 및 데이터</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform (bool enableDebug);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableDebug) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableDebug As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform(bool enableDebug);" />
      <MemberSignature Language="F#" Value="new System.Xml.Xsl.XslCompiledTransform : bool -&gt; System.Xml.Xsl.XslCompiledTransform" Usage="new System.Xml.Xsl.XslCompiledTransform enableDebug" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="enableDebug" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableDebug">디버그 정보를 생성하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 값을 <see langword="true" />로 설정하면 Microsoft Visual Studio Debugger를 사용하여 스타일시트를 디버깅할 수 있습니다.</param>
        <summary>지정된 디버그 설정을 사용하여 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 코드를 한 단계씩 및 스타일 시트를 디버깅 하려면 다음 조건이 충족 되어야 합니다.  
  
-   `enableDebug` 매개 변수가 `true`로 설정된 경우  
  
-   스타일 시트에 전달 되는 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> URI 또는 구현의 메서드는 <xref:System.Xml.XmlReader> 구현 하는 클래스는 <xref:System.Xml.IXmlLineInfo> 인터페이스입니다. 합니다 <xref:System.Xml.IXmlLineInfo> 인터페이스는 모든 텍스트 구문 분석에서 구현 됩니다 <xref:System.Xml.XmlReader> 개체입니다.  
  
     즉, 스타일 시트를 사용 하 여 로드 되 면를 <xref:System.Xml.XPath.IXPathNavigable> 개체를 <xref:System.Xml.XmlDocument> 또는 <xref:System.Xml.XPath.XPathDocument>, 또는 <xref:System.Xml.XmlReader> 구현 하지 않는 구현을 <xref:System.Xml.IXmlLineInfo> 인터페이스 스타일 시트를 디버깅할 수 없습니다.  
  
-   <xref:System.Xml.XmlResolver> 스타일을 로드 하는 데 시트는 파일 기반 <xref:System.Xml.XmlResolver>와 같은 합니다 <xref:System.Xml.XmlUrlResolver> (이것이 기본값 <xref:System.Xml.XmlResolver> 에서 사용 하는 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스).  
  
-   스타일 시트는 로컬 컴퓨터 또는 인트라넷에 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 XSLT 디버깅을 활성화 하는 방법을 보여 줍니다.  
  
 [!code-csharp[XslCompiledTransform.Load#10](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#10)]
 [!code-vb[XslCompiledTransform.Load#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="CompileToType">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerErrorCollection CompileToType (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver, bool debug, System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerErrorCollection CompileToType(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver, bool debug, class System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerErrorCollection ^ CompileToType(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver, bool debug, System::Reflection::Emit::TypeBuilder ^ typeBuilder, System::String ^ scriptAssemblyPath);" />
      <MemberSignature Language="F#" Value="static member CompileToType : System.Xml.XmlReader * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver * bool * System.Reflection.Emit.TypeBuilder * string -&gt; System.CodeDom.Compiler.CompilerErrorCollection" Usage="System.Xml.Xsl.XslCompiledTransform.CompileToType (stylesheet, settings, stylesheetResolver, debug, typeBuilder, scriptAssemblyPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerErrorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="debug" Type="System.Boolean" Index="3" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="typeBuilder" Type="System.Reflection.Emit.TypeBuilder" Index="4" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="scriptAssemblyPath" Type="System.String" Index="5" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">컴파일되는 스타일시트의 시작 부분에 있는 <see cref="T:System.Xml.XmlReader" />입니다.</param>
        <param name="settings">스타일시트에 적용될 <see cref="T:System.Xml.Xsl.XsltSettings" />입니다. 이 값이 <see langword="null" />이면 <see cref="P:System.Xml.Xsl.XsltSettings.Default" />가 적용됩니다.</param>
        <param name="stylesheetResolver"><see cref="T:System.Xml.XmlResolver" />를 사용하여 <see langword="xsl:import" /> 및 <see langword="xsl:include" /> 요소에서 참조된 스타일시트 모듈을 확인합니다. 이 값이 <see langword="null" />이면 외부 리소스가 확인되지 않습니다.</param>
        <param name="debug"><see langword="true" />로 설정하면 디버거로 스타일시트를 디버깅할 수 있습니다.</param>
        <param name="typeBuilder">스타일시트 컴파일에 사용되는 <see cref="T:System.Reflection.Emit.TypeBuilder" />입니다. 제공된 TypeBuilder는 결과 형식을 생성하는 데 사용됩니다.</param>
        <param name="scriptAssemblyPath"><see langword="msxsl:script" /> 요소에서 생성된 어셈블리의 기본 경로입니다. 하나의 스크립트 어셈블리만 생성되는 경우 이 매개 변수는 해당 어셈블리의 경로를 지정합니다. 여러 스크립트 어셈블리가 생성되는 경우에는 어셈블리 이름을 고유하게 구분하도록 구분 접미사가 파일 이름에 추가됩니다.</param>
        <summary>XSLT 스타일시트를 지정된 형식으로 컴파일합니다.</summary>
        <returns>컴파일 결과를 나타내는 컴파일러 오류 및 경고가 들어 있는 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 합니다 `xsltc.exe` 도구는 래퍼를 <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> 메서드. 사용 하 여 스타일 시트를 컴파일하고 `xsltc.exe` 컴파일된 스타일 시트를 사용 하는 대부분의 응용 프로그램의 요구를 충족 됩니다. <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> 컴파일 사용자 지정 도구를 빌드할 때 메서드를 사용 해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>스타일시트를 컴파일합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스의 전체적인 성능이 <xref:System.Xml.Xsl.XslTransform> 클래스보다 좋지만 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스의 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 메서드는 변환에 대해 처음 호출될 때 <xref:System.Xml.Xsl.XslTransform> 클래스의 <xref:System.Xml.Xsl.XslTransform.Load%2A> 메서드보다 느리게 수행될 수 있습니다. 이는 XSLT 파일이 로드되기 전에 컴파일되어야 하기 때문입니다. 자세한 내용은 [XslCompiledTransform Slower than XslTransform?](https://go.microsoft.com/fwlink/?LinkId=130590)(XslCompiledTransform이 XslTransform보다 느린가?)라는 블로그 게시물을 참조하세요.  
  
> [!NOTE]
>  디버그 모드에서 컴파일된 XSLT와 릴리스 모드에서 컴파일된 XSLT 간에는 차이가 있습니다. 경우에 따라 디버그 모드에서 컴파일된 스타일시트는 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 중에 오류를 발생시키지 않지만 이후에 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 중에 실패합니다. 릴리스 모드에서 컴파일된 동일한 스타일시트는 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 중에 실패합니다. 이러한 동작의 예는 노드 집합 형식이 아닌 변수가 노드 집합이 필요한 식에 할당된 경우입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri);" />
      <MemberSignature Language="F#" Value="member this.Load : string -&gt; unit" Usage="xslCompiledTransform.Load stylesheetUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">스타일시트의 URI입니다.</param>
        <summary>지정된 URI에 있는 스타일시트를 로드하고 컴파일합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스는 XSLT 1.0 구문을 지원 합니다. XSLT 스타일 시트를 사용 해야 합니다는 `http://www.w3.org/1999/XSL/Transform` 네임 스페이스입니다.  
  
 이 메서드에 다음과 같은 동작이 있습니다.  
  
-   <xref:System.Xml.XmlUrlResolver> 사용자를 사용 하 여 자격 증명 사용에 스타일 시트 URI를 해결 하 고 처리할 하 `xsl:import` 또는 `xsl:include` 요소입니다.  
  
-   <xref:System.Xml.XmlReader> 기본값 설정을 사용 하 여 스타일 시트를 로드 합니다. 에서는 DTD 처리가 비활성화 됩니다는 <xref:System.Xml.XmlReader>합니다. DTD 처리를 필요로 하는 경우 만들기는 <xref:System.Xml.XmlReader> 이 기능을 사용 하 여 다음을 사용 하 고 전달 하는 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 메서드.  
  
-   `document()` 함수를 사용 하지 않도록 설정 합니다.  
  
-   포함 된 스크립트가 지원 되지 않습니다.  
  
 사용할 수는 <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.String%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> 오버 로드를 지정는 <xref:System.Xml.XmlResolver> 필요한 인증 자격 증명을 사용 하 여 또는 다른 XSLT 설정을 지정할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 변환을 실행 하 고 파일에 출력 합니다.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheetUri" /> 값이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">스타일시트에 오류가 있는 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">스타일시트를 찾을 수 없는 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="stylesheetUri" /> 값에 찾을 수 없는 디렉터리나 파일 이름이 포함된 경우</exception>
        <exception cref="T:System.Net.WebException"><paramref name="stylesheetUri" /> 값을 확인할 수 없는 경우  
  
또는 
이 요청을 처리하는 동안 오류가 발생했습니다.</exception>
        <exception cref="T:System.UriFormatException"><paramref name="stylesheetUri" /> 경로는 유효한 URI가 아닙니다.</exception>
        <exception cref="T:System.Xml.XmlException">스타일시트를 로드하는 동안 구문 분석 오류가 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (Type compiledStylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Type compiledStylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (compiledStylesheet As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(Type ^ compiledStylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : Type -&gt; unit" Usage="xslCompiledTransform.Load compiledStylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compiledStylesheet" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="compiledStylesheet">컴파일된 스타일시트가 들어 있는 클래스의 이름입니다.  
  
일반적으로 스타일시트 이름입니다. 이름이 지정되지 않은 경우 xsltc.exe 도구는 클래스 및 어셈블리 이름으로 스타일시트 이름을 사용합니다.</param>
        <summary><see href="https://docs.microsoft.com/dotnet/standard/data/xml/xslt-compiler-xsltc-exe">XSLT Compiler (xsltc.exe)</see>를 사용하여 만든 컴파일된 스타일시트를 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Xsltc.exe 도구는 스타일 시트를 컴파일 및 스타일 시트에서 어셈블리 생성에 사용 됩니다. <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 메서드는 어셈블리에서 컴파일된 스타일 시트를 로드 합니다.  
  
> [!NOTE]
>  응용 프로그램에서 XSLT 어셈블리를 참조로 포함 해야 합니다.  
  
   
  
## Examples  
 다음 예제에서는 XSLT 어셈블리에서 컴파일된 스타일 시트를 로드 하는 방법을 보여 줍니다. Xsltc.exe 도구 bookOrders.dll bookOrders 라는 클래스를 사용 하 여 명명 된 어셈블리를 만드는 데 사용한 가정 합니다.  
  
> [!NOTE]
>  코드를 컴파일할 때 XSLT 어셈블리를 참조 해야 합니다. 예를 들어, `csc /r:system.dll;system.xml.dll;bookOrders.dll myCode.cs`을 입력합니다.  
  
```csharp  
// Load the type of the class.  
XslCompiledTransform xslt = new XslCompiledTransform();  
xslt.Load(typeof(bookOrders));  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/672a5ac8-8305-4d28-ba10-11089c2c0924">XSLT 어셈블리 도구 (xsltc.exe)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/76ee440b-d134-4f8f-8262-b917ad6dcbf6">방법: 어셈블리를 사용 하 여 XSLT 변형 수행</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader -&gt; unit" Usage="xslCompiledTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">스타일시트가 포함된 <see cref="T:System.Xml.XmlReader" />입니다.</param>
        <summary><see cref="T:System.Xml.XmlReader" />에 포함된 스타일시트를 컴파일합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스는 XSLT 1.0 구문을 지원 합니다. XSLT 스타일 시트를 사용 해야 합니다는 `http://www.w3.org/1999/XSL/Transform` 네임 스페이스입니다.  
  
 스타일 시트의 현재 노드의 로드를 <xref:System.Xml.XmlReader> 모든 자식을 통해. 그러면 스타일 시트와 문서의 일부를 사용할 수 있습니다. 후 합니다 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 메서드가 완료 되 면를 <xref:System.Xml.XmlReader> 스타일 시트의 끝 뒤에 다음 노드에 배치 됩니다. 문서 끝에 도달하면 <xref:System.Xml.XmlReader>가 EOF(파일 끝)에 배치됩니다.  
  
 이 메서드에 다음과 같은 동작이 있습니다.  
  
-   <xref:System.Xml.XmlUrlResolver> 자격 증명 사용 하 여 모든 사용자를 사용 하 여 `xsl:import` 또는 `xsl:include` 요소입니다.  
  
-   `document()` 함수를 사용 하지 않도록 설정 합니다.  
  
-   포함 된 스크립트가 지원 되지 않습니다.  
  
 사용할 수는 <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> 오버 로드를 지정는 <xref:System.Xml.XmlResolver> 필요한 인증 자격 증명을 사용 하 여 또는 다른 XSLT 설정을 지정할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는에 포함 된 스타일 시트를 로드 한 <xref:System.Xml.XmlReader> 개체입니다.  
  
 [!code-csharp[XslCompiledTransform.Load#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Load#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheet" /> 값이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">스타일시트에 오류가 있는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable -&gt; unit" Usage="xslCompiledTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet"><see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. Microsoft .NET Framework에서 이 개체는 스타일시트를 포함하는 <see cref="T:System.Xml.XmlNode" /> 또는 <see cref="T:System.Xml.XmlDocument" />(대개 <see cref="T:System.Xml.XPath.XPathDocument" />)일 수 있습니다.</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" /> 개체에 포함된 스타일시트를 컴파일합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스는 XSLT 1.0 구문을 지원 합니다. XSLT 스타일 시트를 사용 해야 합니다는 `http://www.w3.org/1999/XSL/Transform` 네임 스페이스입니다.  
  
 이 메서드에 다음과 같은 동작이 있습니다.  
  
-   <xref:System.Xml.XmlUrlResolver> 자격 증명 사용 하 여 모든 사용자를 사용 하 여 `xsl:import` 또는 `xsl:include` 요소입니다.  
  
-   `document()` 함수를 사용 하지 않도록 설정 합니다.  
  
-   포함 된 스크립트가 지원 되지 않습니다.  
  
 사용할 수는 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 오버 로드를 지정는 <xref:System.Xml.XmlResolver> 필요한 인증 자격 증명을 사용 하 여 또는 다른 XSLT 설정을 지정할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는에 포함 된 스타일 시트를 로드 한 <xref:System.Xml.XPath.XPathDocument> 개체입니다.  
  
 [!code-csharp[XslCompiledTransform.Load#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Load#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheet" /> 값이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">스타일시트에 오류가 있는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Reflection.MethodInfo executeMethod, byte[] queryData, Type[] earlyBoundTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Reflection.MethodInfo executeMethod, unsigned int8[] queryData, class System.Type[] earlyBoundTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (executeMethod As MethodInfo, queryData As Byte(), earlyBoundTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Reflection::MethodInfo ^ executeMethod, cli::array &lt;System::Byte&gt; ^ queryData, cli::array &lt;Type ^&gt; ^ earlyBoundTypes);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Reflection.MethodInfo * byte[] * Type[] -&gt; unit" Usage="xslCompiledTransform.Load (executeMethod, queryData, earlyBoundTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executeMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="queryData" Type="System.Byte[]" />
        <Parameter Name="earlyBoundTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="executeMethod">컴파일러에서 생성된 컴파일된 스타일시트의 <c>execute</c> 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체입니다.</param>
        <param name="queryData"><see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" /> 메서드에서 생성된 컴파일된 스타일시트의 <c>staticData</c> 필드에 있는 serialize된 데이터 구조의 바이트 배열입니다.</param>
        <param name="earlyBoundTypes">컴파일러에서 생성된 컴파일된 스타일시트의 <c>ebTypes</c> 필드에 저장된 형식의 배열입니다.</param>
        <summary><see langword="XSLTC.exe" /> 유틸리티를 사용하여 컴파일된 스타일시트에서 메서드를 로드합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 형식으로 컴파일된 스타일 시트를 <xref:System.Reflection.MethodInfo> 개체, 바이트 배열 및 형식 배열입니다. <xref:System.Reflection.Emit.DynamicMethod> 컴파일된 스타일 시트 메서드 수를 허용 하도록 개체를 사용 될 때 삭제는 <xref:System.Xml.Xsl.XslCompiledTransform> 개체를 회수 합니다.  
  
   
  
## Examples  
 사용 하 여 아래 코드 예제는 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 컴파일된 스타일 시트를 로드 합니다. 변환 값을 감소는 `Price` 10%는 요소입니다.  
  
 [!code-csharp[XsltDynamicMethodLoad#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltDynamicMethodLoad/CS/XsltDynamicMethodLoad.cs#1)]
 [!code-vb[XsltDynamicMethodLoad#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltDynamicMethodLoad/VB/XsltDynamicMethodLoad.vb#1)]  
  
> [!NOTE]
>  이 예제에서 사용 되는 "변환" 어셈블리는 xsltc.exe 유틸리티를 사용 하 여 빌드 되었습니다. 이 명령줄 도구 사용에 대 한 자세한 내용은 참조 하세요. [방법: 어셈블리를 사용 하 여 XSLT 변형 수행](~/docs/standard/data/xml/how-to-perform-an-xslt-transformation-by-using-an-assembly.md)합니다.  
  
 이전 코드 예제에서는 다음 변환을 사용 합니다.  
 [!code-xml[XsltDynamicMethodLoad-xslt](~/samples/snippets/csharp/VS_Snippets_Data/XsltDynamicMethodLoad/CS/Transform.xslt)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : string * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheetUri, settings, stylesheetResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">스타일시트의 URI입니다.</param>
        <param name="settings">스타일시트에 적용할 <see cref="T:System.Xml.Xsl.XsltSettings" />입니다. 이 값이 <see langword="null" />이면 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 설정이 적용됩니다.</param>
        <param name="stylesheetResolver">스타일시트 URI 및 XSLT <c>import</c> 및 <c>include</c> 요소에서 참조하는 모든 스타일시트를 확인하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다.</param>
        <summary>URI로 지정된 XSLT 스타일시트를 로드하고 컴파일합니다. <see cref="T:System.Xml.XmlResolver" />는 XSLT <c>import</c> 또는 <c>include</c> 요소를 모두 확인하고 XSLT 설정은 스타일시트에 대한 사용 권한을 결정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스는 XSLT 1.0 구문을 지원 합니다. XSLT 스타일 시트를 사용 해야 합니다는 `http://www.w3.org/1999/XSL/Transform` 네임 스페이스입니다.  
  
 <xref:System.Xml.XmlReader> 기본값 설정을 사용 하 여 스타일 시트를 로드 합니다. 에서는 DTD 처리가 비활성화 됩니다는 <xref:System.Xml.XmlReader>합니다. DTD 처리를 필요로 하는 경우 만들기는 <xref:System.Xml.XmlReader> 이 기능을 사용 하 여 다음을 사용 하 고 전달 하는 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 네트워크 리소스에 저장 되는 스타일 시트를 로드 합니다. <xref:System.Xml.XmlSecureResolver> 개체는 스타일시트에 액세스하는 데 필요한 자격 증명을 지정합니다.  
  
 [!code-csharp[XslCompiledTransform.Load#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Load#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheetUri" /> 또는 <paramref name="stylesheetResolver" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">스타일시트에 오류가 있는 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">스타일시트를 찾을 수 없는 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="stylesheetUri" /> 값에 찾을 수 없는 디렉터리나 파일 이름이 포함된 경우</exception>
        <exception cref="T:System.Net.WebException"><paramref name="stylesheetUri" /> 값을 확인할 수 없는 경우  
  
또는 
이 요청을 처리하는 동안 오류가 발생했습니다.</exception>
        <exception cref="T:System.UriFormatException"><paramref name="stylesheetUri" /> 경로는 유효한 URI가 아닙니다.</exception>
        <exception cref="T:System.Xml.XmlException">스타일시트를 로드하는 동안 구문 분석 오류가 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheet, settings, stylesheetResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">스타일시트가 포함된 <see cref="T:System.Xml.XmlReader" />입니다.</param>
        <param name="settings">스타일시트에 적용할 <see cref="T:System.Xml.Xsl.XsltSettings" />입니다. 이 값이 <see langword="null" />이면 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 설정이 적용됩니다.</param>
        <param name="stylesheetResolver">XSLT <c>import</c> 및 <c>include</c> 요소에서 참조하는 모든 스타일시트를 확인하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 외부 리소스가 확인되지 않습니다.</param>
        <summary><see cref="T:System.Xml.XmlReader" />에 포함된 XSLT 스타일시트를 컴파일합니다. <see cref="T:System.Xml.XmlResolver" />는 XSLT <c>import</c> 또는 <c>include</c> 요소를 모두 확인하고 XSLT 설정은 스타일시트에 대한 사용 권한을 결정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스는 XSLT 1.0 구문을 지원 합니다. XSLT 스타일 시트를 사용 해야 합니다는 `http://www.w3.org/1999/XSL/Transform` 네임 스페이스입니다.  
  
 스타일 시트의 현재 노드의 로드를 <xref:System.Xml.XmlReader> 모든 자식을 통해. 그러면 스타일 시트와 문서의 일부를 사용할 수 있습니다. 후 합니다 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 메서드가 완료 되 면를 <xref:System.Xml.XmlReader> 스타일 시트의 끝 뒤에 다음 노드에 배치 됩니다. 문서 끝에 도달하면 <xref:System.Xml.XmlReader>가 EOF(파일 끝)에 배치됩니다.  
  
   
  
## Examples  
 다음 예에서는 스타일 시트를 로드 및 XSLT 스크립트에 대 한 지원을 사용 하도록 설정 합니다.  
  
 [!code-csharp[XslCompiledTransform.Load#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Load#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheet" /> 값이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">스타일시트에 오류가 있는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheet, settings, stylesheetResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet"><see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. Microsoft .NET Framework에서 이 개체는 스타일시트를 포함하는 <see cref="T:System.Xml.XmlNode" /> 또는 <see cref="T:System.Xml.XmlDocument" />(대개 <see cref="T:System.Xml.XPath.XPathDocument" />)일 수 있습니다.</param>
        <param name="settings">스타일시트에 적용할 <see cref="T:System.Xml.Xsl.XsltSettings" />입니다. 이 값이 <see langword="null" />이면 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 설정이 적용됩니다.</param>
        <param name="stylesheetResolver">XSLT <c>import</c> 및 <c>include</c> 요소에서 참조하는 모든 스타일시트를 확인하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 외부 리소스가 확인되지 않습니다.</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" />에 포함된 XSLT 스타일시트를 컴파일합니다. <see cref="T:System.Xml.XmlResolver" />는 XSLT <c>import</c> 또는 <c>include</c> 요소를 모두 확인하고 XSLT 설정은 스타일시트에 대한 사용 권한을 결정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform> 클래스는 XSLT 1.0 구문을 지원 합니다. XSLT 스타일 시트를 사용 해야 합니다는 `http://www.w3.org/1999/XSL/Transform` 네임 스페이스입니다.  
  
   
  
## Examples  
 다음 예에서는 스타일 시트를 로드 합니다. 합니다 <xref:System.Xml.XmlSecureResolver> 개체에 액세스 하는 데 필요한 자격 증명을 포함 `import` 또는 `include` 스타일 시트에서 요소를 찾을 수 있습니다.  
  
 [!code-csharp[XslCompiledTransform.Load#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Load#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheet" /> 값이 <see langword="null" />입니다.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">스타일시트에 오류가 있는 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="OutputSettings">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings OutputSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings OutputSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputSettings As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlWriterSettings ^ OutputSettings { System::Xml::XmlWriterSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputSettings : System.Xml.XmlWriterSettings" Usage="System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스타일시트의 <c>xsl:output</c> 요소에서 파생된 출력 정보를 포함하는 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 가져옵니다.</summary>
        <value>읽기 전용 <see cref="T:System.Xml.XmlWriterSettings" /> 에서 파생 된 출력 정보를 포함 하는 개체를 <c>xsl: output</c> 스타일 시트의 요소입니다. 이 값은 <see langword="null" />일 수 있습니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출에 성공한 후에이 속성은 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 메서드. 파생 된 정보를 포함 하는 `xsl:output` 컴파일된 스타일 시트 요소입니다. 이 <xref:System.Xml.XmlWriterSettings> 개체를 전달할 수는 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 메서드를를 <xref:System.Xml.XmlWriter> 출력 하려고 하는 개체입니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다 합니다 <xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> 만들 속성을 <xref:System.Xml.XmlWriter> 콘솔에 텍스트를 기록 하는 개체입니다.  
  
 [!code-csharp[XslCompiledTransform.OutputSettings#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.OutputSettings/CS/xslt_OutputSettings.cs#1)]
 [!code-vb[XslCompiledTransform.OutputSettings#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.OutputSettings/VB/xslt_OutputSettings.vb#1)]  
  
 이 예제에서는 사용 된 `books.xml` 및 `outputConsole.xsl` 파일을 입력으로 합니다.  
  
 `books.xml`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#2](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/books.xml#2)]  
  
 `outputConsole.xsl`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#3](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/outputConsole.xsl#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="TemporaryFiles">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.TempFileCollection TemporaryFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.TempFileCollection TemporaryFiles" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.TemporaryFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemporaryFiles As TempFileCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::TempFileCollection ^ TemporaryFiles { System::CodeDom::Compiler::TempFileCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemporaryFiles : System.CodeDom.Compiler.TempFileCollection" Usage="System.Xml.Xsl.XslCompiledTransform.TemporaryFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.TempFileCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 메서드가 성공적으로 호출된 이후에 디스크에 생성된 임시 파일이 들어 있는 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" />을 가져옵니다.</summary>
        <value>디스크에 생성된 임시 파일이 들어 있는 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />입니다. <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> 메서드를 호출하지 못했거나 디버깅을 사용하지 않도록 설정한 경우에는 값이 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XSLT 중 생성 된 파일을 식별 하는이 속성을 처리 합니다. 파일이 추가 됩니다 (% TEMP % 환경 변수에 의해 지정 됨) Temp 디렉터리에서 삭제할 수 XSLT 처리가 완료 된 후 이러한 파일입니다.  
  
   
  
## Examples  
 다음 예제에서는 임시 파일의 이름을 콘솔에 씁니다.  
  
> [!NOTE]
>  사용 하 여 시트 스타일을 로드 하는 경우에 임시 파일이 만들어집니다 \<msxsl: script > 블록입니다.  
  
 [!code-csharp[XslCompiledTransform.Transform#8](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#8)]
 [!code-vb[XslCompiledTransform.Transform#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XSLT 변환을 실행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  디버그 모드에서 컴파일된 XSLT와 릴리스 모드에서 컴파일된 XSLT 간에는 차이가 있습니다. 경우에 따라 디버그 모드에서 컴파일된 스타일시트는 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 중에 오류를 발생시키지 않지만 이후에 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 중에 실패합니다. 릴리스 모드에서 컴파일된 동일한 스타일시트는 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 중에 실패합니다. 이러한 동작의 예는 노드 집합 형식이 아닌 변수가 노드 집합이 필요한 식에 할당된 경우입니다.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, string resultsFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, string resultsFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, resultsFile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::String ^ resultsFile);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, resultsFile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="resultsFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputUri">입력 문서의 URI입니다.</param>
        <param name="resultsFile">출력 파일의 URI입니다.</param>
        <summary>URI로 지정된 입력 문서를 사용하여 변환을 실행하고 파일로 결과를 출력합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 <xref:System.Xml.XmlUrlResolver> 입력 및 출력 문서를 해결 하려면 사용자 자격 증명 없이 합니다. 인증을 요구 하는 네트워크 리소스에 있는 이러한 리소스 중 하나를 사용 하는 오버 로드를 사용는 <xref:System.Xml.XmlResolver> 해당 인수 중 하나로 지정 하 고는 <xref:System.Xml.XmlResolver> 에 필요한 자격 증명입니다.  
  
 <xref:System.Xml.XmlReader> 기본값 설정을 사용 하 여 입력된 문서를 로드 합니다. 에서는 DTD 처리가 비활성화 됩니다는 <xref:System.Xml.XmlReader>합니다. DTD 처리를 필요로 하는 경우 만들기는 <xref:System.Xml.XmlReader> 이 기능을 사용 하 여 다음을 사용 하 고 전달 하는 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 변환을 실행 하 고 파일에 출력 합니다.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 이 샘플에서는 다음 두 개의 입력된 파일 사용:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inputUri" /> 또는 <paramref name="resultsFile" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.FileNotFoundException">입력 문서를 찾을 수 없는 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputUri" /> 또는 <paramref name="resultsFile" /> 값에 찾을 수 없는 디렉터리나 파일 이름이 포함된 경우</exception>
        <exception cref="T:System.Net.WebException"><paramref name="inputUri" /> 또는 <paramref name="resultsFile" /> 값을 확인할 수 없는 경우  
  
또는 
요청을 처리하는 동안 오류가 발생한 경우</exception>
        <exception cref="T:System.UriFormatException"><paramref name="inputUri" /> 또는 <paramref name="resultsFile" />이 올바른 URI가 아닌 경우</exception>
        <exception cref="T:System.Xml.XmlException">입력 문서를 로드하는 동안 구문 분석 오류가 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">입력 문서의 URI입니다.</param>
        <param name="results">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.  
  
스타일시트에 <c>xsl:output</c> 요소가 포함된 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성에서 반환된 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 사용하여 <see cref="T:System.Xml.XmlWriter" />를 만들어야 합니다. 이렇게 해야 <see cref="T:System.Xml.XmlWriter" />의 출력 설정이 올바르게 설정됩니다.</param>
        <summary>URI로 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.Xml.XmlWriter" />에 결과를 출력합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 <xref:System.Xml.XmlUrlResolver> 입력된 문서와 XSLT의 모든 인스턴스를 해결 하려면 사용자 자격 증명 없이 `document()` 함수 스타일 시트에서 찾을 수 있습니다. 인증을 요구 하는 네트워크 리소스에 있는 이러한 리소스 중 하나를 사용 하는 오버 로드를 사용는 <xref:System.Xml.XmlResolver> 해당 인수 중 하나로 지정 하 고는 <xref:System.Xml.XmlResolver> 에 필요한 자격 증명입니다.  
  
 <xref:System.Xml.XmlReader> 기본값 설정을 사용 하 여 입력된 문서를 로드 합니다. 에서는 DTD 처리가 비활성화 됩니다는 <xref:System.Xml.XmlReader>합니다. DTD 처리를 필요로 하는 경우 만들기는 <xref:System.Xml.XmlReader> 이 기능을 사용 하 여 다음을 사용 하 고 전달 하는 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 메서드.  
  
 이 메서드를 지원 하지 않습니다는 `xsl:strip-space` 요소입니다. 컴파일된 스타일 시트를 포함 하는 경우는 `xsl:strip-space` 를 사용 해야 요소를 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 오버 로드를 <xref:System.Xml.XmlReader> 입력 인수로 합니다.  
  
   
  
## Examples  
 다음 예제에서는 XSLT 변환을 실행 하 고 출력 하는 <xref:System.Xml.XmlWriter> 개체입니다.  
  
 [!code-csharp[XslCompiledTransform.Transform#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Transform#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inputUri" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputUri" /> 값에 찾을 수 없는 디렉터리나 파일 이름이 포함된 경우</exception>
        <exception cref="T:System.Net.WebException"><paramref name="inputUri" /> 값을 확인할 수 없는 경우  
  
또는 
이 요청을 처리하는 동안 오류가 발생했습니다.</exception>
        <exception cref="T:System.UriFormatException"><paramref name="inputUri" /> 경로는 유효한 URI가 아닙니다.</exception>
        <exception cref="T:System.Xml.XmlException">입력 문서를 로드하는 동안 구문 분석 오류가 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">입력 문서가 포함된 <see cref="T:System.Xml.XmlReader" />입니다.</param>
        <param name="results">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.  
  
스타일시트에 <c>xsl:output</c> 요소가 포함된 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성에서 반환된 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 사용하여 <see cref="T:System.Xml.XmlWriter" />를 만들어야 합니다. 이렇게 해야 <see cref="T:System.Xml.XmlWriter" />의 출력 설정이 올바르게 설정됩니다.</param>
        <summary><see cref="T:System.Xml.XmlReader" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.Xml.XmlWriter" />에 결과를 출력합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 XSLT `document()` 기능을 사용 하는 자동적으로 해결 되므로 사용 하 여는 <xref:System.Xml.XmlUrlResolver> 사용자 자격 증명 없이 합니다. 오버 로드를 사용 하 여 외부 리소스를 인증을 요구 하는 네트워크 리소스에 있는 경우는 <xref:System.Xml.XmlResolver> 해당 인수 중 하나로 지정 하 고는 <xref:System.Xml.XmlResolver> 에 필요한 자격 증명입니다.  
  
   
  
## Examples  
 다음 예제에서는 books.xml 파일의 첫 번째 책을 변환합니다.  
  
 [!code-csharp[XslCompiledTransform.Transform#7](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#7)]
 [!code-vb[XslCompiledTransform.Transform#7](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. Microsoft .NET Framework에서 이 개체는 변환할 데이터를 포함하는 <see cref="T:System.Xml.XmlNode" /> 또는 <see cref="T:System.Xml.XmlDocument" />(대개 <see cref="T:System.Xml.XPath.XPathDocument" />)일 수 있습니다.</param>
        <param name="results">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.  
  
스타일시트에 <c>xsl:output</c> 요소가 포함된 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성에서 반환된 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 사용하여 <see cref="T:System.Xml.XmlWriter" />를 만들어야 합니다. 이렇게 해야 <see cref="T:System.Xml.XmlWriter" />의 출력 설정이 올바르게 설정됩니다.</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.Xml.XmlWriter" />에 결과를 출력합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 XSLT `document()` 기능을 사용 하는 자동적으로 해결 되므로 사용 하 여는 <xref:System.Xml.XmlUrlResolver> 사용자 자격 증명 없이 합니다. 오버 로드를 사용 하 여 외부 리소스를 인증을 요구 하는 네트워크 리소스에 있는 경우는 <xref:System.Xml.XmlResolver> 해당 인수 중 하나로 지정 하 고는 <xref:System.Xml.XmlResolver> 에 필요한 자격 증명입니다.  
  
 이 메서드를 지원 하지 않습니다는 `xsl:strip-space` 요소입니다. 컴파일된 스타일 시트를 포함 하는 경우는 `xsl:strip-space` 를 사용 해야 요소를 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 오버 로드를 <xref:System.Xml.XmlReader> 입력 인수로 합니다.  
  
 <xref:System.Xml.XPath.IXPathNavigable> 인터페이스는 <xref:System.Xml.XmlNode> 및 <xref:System.Xml.XPath.XPathDocument> 클래스에서 구현됩니다. 이 클래스는 XML 데이터의 메모리 내 캐시를 나타냅니다.  
  
-   <xref:System.Xml.XmlNode> 클래스는 W3C DOM(문서 개체 모델)을 기반으로 하며 편집 기능이 있습니다.  
  
-   <xref:System.Xml.XPath.XPathDocument> 클래스는 XPath 데이터 모델을 기반으로 하는 읽기 전용 데이터 저장소입니다. <xref:System.Xml.XPath.XPathDocument>는 XSLT 처리에 권장되는 클래스입니다. 이 클래스는 <xref:System.Xml.XmlNode> 클래스와 비교하여 속도가 더 빠릅니다.  
  
 변환은 문서 전체에 적용됩니다. 즉, 문서 루트 노드 이외의 노드에 전달해도 변환 프로세스에서 로드된 문서의 모든 노드에 액세스할 수 있습니다. 노드 조각을 변형하려면 노드 조각만 포함하는 개체를 만들고 이 개체를 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 메서드에 전달해야 합니다. 자세한 내용은 [방법: 노드 조각 변환](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md)을 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 XSLT 변환을 실행 하 고 출력 하는 <xref:System.Xml.XmlWriter> 개체입니다.  
  
 [!code-csharp[XslCompiledTransform.Transform#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Transform#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="inputUri">입력 문서의 URI입니다.</param>
        <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
        <param name="results">출력할 대상 스트림입니다.</param>
        <summary>URI로 지정된 입력 문서를 사용하여 변환을 실행하고 스트림에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 <xref:System.Xml.XmlUrlResolver> 입력된 문서와 XSLT의 모든 인스턴스를 해결 하려면 사용자 자격 증명 없이 `document()` 함수 스타일 시트에서 찾을 수 있습니다. 인증을 요구 하는 네트워크 리소스에 있는 이러한 리소스 중 하나를 사용 하는 오버 로드를 사용는 <xref:System.Xml.XmlResolver> 해당 인수 중 하나로 지정 하 고는 <xref:System.Xml.XmlResolver> 에 필요한 자격 증명입니다.  
  
 <xref:System.Xml.XmlReader> 기본값 설정을 사용 하 여 입력된 문서를 로드 합니다. 에서는 DTD 처리가 비활성화 됩니다는 <xref:System.Xml.XmlReader>합니다. DTD 처리를 필요로 하는 경우 만들기는 <xref:System.Xml.XmlReader> 이 기능을 사용 하 여 다음을 사용 하 고 전달 하는 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inputUri" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputUri" /> 값에 찾을 수 없는 디렉터리나 파일 이름이 포함된 경우</exception>
        <exception cref="T:System.Net.WebException"><paramref name="inputUri" /> 값을 확인할 수 없는 경우  
  
또는 
요청을 처리하는 동안 오류가 발생한 경우</exception>
        <exception cref="T:System.UriFormatException"><paramref name="inputUri" /> 경로는 유효한 URI가 아닙니다.</exception>
        <exception cref="T:System.Xml.XmlException">입력 문서를 로드하는 동안 구문 분석 오류가 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">입력 문서의 URI입니다.</param>
        <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
        <param name="results">출력을 제공할 대상 <see cref="T:System.IO.TextWriter" />입니다.</param>
        <summary>URI로 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.IO.TextWriter" />에 결과를 출력합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 <xref:System.Xml.XmlUrlResolver> 입력된 문서와 XSLT의 모든 인스턴스를 해결 하려면 사용자 자격 증명 없이 `document()` 함수 스타일 시트에서 찾을 수 있습니다. 인증을 요구 하는 네트워크 리소스에 있는 이러한 리소스 중 하나를 사용 하는 오버 로드를 사용는 <xref:System.Xml.XmlResolver> 해당 인수 중 하나로 지정 하 고는 <xref:System.Xml.XmlResolver> 에 필요한 자격 증명입니다.  
  
 <xref:System.Xml.XmlReader> 기본값 설정을 사용 하 여 입력된 문서를 로드 합니다. 에서는 DTD 처리가 비활성화 됩니다는 <xref:System.Xml.XmlReader>합니다. DTD 처리를 필요로 하는 경우 만들기는 <xref:System.Xml.XmlReader> 이 기능을 사용 하 여 다음을 사용 하 고 전달 하는 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 XSLT 변환을 실행 하 고 문자열을 출력 합니다.  
  
 [!code-csharp[XslCompiledTransform.Transform#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Transform#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inputUri" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputUri" /> 값에 찾을 수 없는 디렉터리나 파일 이름이 포함된 경우</exception>
        <exception cref="T:System.Net.WebException"><paramref name="inputUri" /> 값을 확인할 수 없는 경우  
  
또는 
요청을 처리하는 동안 오류가 발생한 경우</exception>
        <exception cref="T:System.UriFormatException"><paramref name="inputUri" /> 경로는 유효한 URI가 아닙니다.</exception>
        <exception cref="T:System.Xml.XmlException">입력 문서를 로드하는 동안 구문 분석 오류가 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">입력 문서의 URI입니다.</param>
        <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
        <param name="results">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.  
  
스타일시트에 <c>xsl:output</c> 요소가 포함된 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성에서 반환된 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 사용하여 <see cref="T:System.Xml.XmlWriter" />를 만들어야 합니다. 이렇게 해야 <see cref="T:System.Xml.XmlWriter" />의 출력 설정이 올바르게 설정됩니다.</param>
        <summary>URI로 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.Xml.XmlWriter" />에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 기본 <xref:System.Xml.XmlUrlResolver> 입력된 문서와 XSLT의 모든 인스턴스를 해결 하려면 사용자 자격 증명 없이 `document()` 함수 스타일 시트에서 찾을 수 있습니다. 인증을 요구 하는 네트워크 리소스에 있는 이러한 리소스 중 하나를 사용 하는 오버 로드를 사용는 <xref:System.Xml.XmlResolver> 해당 인수 중 하나로 지정 하 고는 <xref:System.Xml.XmlResolver> 에 필요한 자격 증명입니다.  
  
 <xref:System.Xml.XmlReader> 기본값 설정을 사용 하 여 입력된 문서를 로드 합니다. 에서는 DTD 처리가 비활성화 됩니다는 <xref:System.Xml.XmlReader>합니다. DTD 처리를 필요로 하는 경우 만들기는 <xref:System.Xml.XmlReader> 이 기능을 사용 하 여 다음을 사용 하 고 전달 하는 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.Xsl.XsltArgumentList> 현재 날짜 및 시간을 나타내는 매개 변수를 만들려면 개체입니다.  
  
 [!code-csharp[XsltArgumentList.AddParam#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltArgumentList.AddParam/CS/addparam.cs#1)]
 [!code-vb[XsltArgumentList.AddParam#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltArgumentList.AddParam/VB/addparam.vb#1)]  
  
 이 예제에서는 입력으로 다음 두 개의 데이터 파일을 사용합니다.  
  
 order.xml  
  
 [!code-xml[XsltArgumentList.AddParam#2](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xml#2)]  
  
 order.xsl  
  
 [!code-xml[XsltArgumentList.AddParam#3](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inputUri" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputtUri" /> 값에 찾을 수 없는 디렉터리나 파일 이름이 포함된 경우</exception>
        <exception cref="T:System.Net.WebException"><paramref name="inputUri" /> 값을 확인할 수 없는 경우  
  
또는 
이 요청을 처리하는 동안 오류가 발생했습니다.</exception>
        <exception cref="T:System.UriFormatException"><paramref name="inputUri" /> 경로는 유효한 URI가 아닙니다.</exception>
        <exception cref="T:System.Xml.XmlException">입력 문서를 로드하는 동안 구문 분석 오류가 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">입력 문서가 포함된 <see cref="T:System.Xml.XmlReader" />입니다.</param>
        <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
        <param name="results">출력할 대상 스트림입니다.</param>
        <summary><see cref="T:System.Xml.XmlReader" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 스트림에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스타일 시트는 XSLT를 포함 하는 경우 `document()` 를 사용 하 여 해결 되었기 함수는 <xref:System.Xml.XmlUrlResolver> 사용자 자격 증명 없이 합니다. 오버 로드를 사용 하 여 외부 리소스를 인증을 요구 하는 네트워크 리소스에 있는 경우는 <xref:System.Xml.XmlResolver> 해당 인수 중 하나로 지정 하 고는 <xref:System.Xml.XmlResolver> 에 필요한 자격 증명입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">입력 문서가 포함된 <see cref="T:System.Xml.XmlReader" />입니다.</param>
        <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
        <param name="results">출력을 제공할 대상 <see cref="T:System.IO.TextWriter" />입니다.</param>
        <summary><see cref="T:System.Xml.XmlReader" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.IO.TextWriter" />에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스타일 시트는 XSLT를 포함 하는 경우 `document()` 를 사용 하 여 해결 되었기 함수는 <xref:System.Xml.XmlUrlResolver> 사용자 자격 증명 없이 합니다. 오버 로드를 사용 하 여 외부 리소스를 인증을 요구 하는 네트워크 리소스에 있는 경우는 <xref:System.Xml.XmlResolver> 해당 인수 중 하나로 지정 하 고는 <xref:System.Xml.XmlResolver> 에 필요한 자격 증명입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">입력 문서가 포함된 <see cref="T:System.Xml.XmlReader" />입니다.</param>
        <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
        <param name="results">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.  
  
스타일시트에 <c>xsl:output</c> 요소가 포함된 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성에서 반환된 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 사용하여 <see cref="T:System.Xml.XmlWriter" />를 만들어야 합니다. 이렇게 해야 <see cref="T:System.Xml.XmlWriter" />의 출력 설정이 올바르게 설정됩니다.</param>
        <summary><see cref="T:System.Xml.XmlReader" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.Xml.XmlWriter" />에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스타일 시트는 XSLT를 포함 하는 경우 `document()` 를 사용 하 여 해결 되었기 함수는 <xref:System.Xml.XmlUrlResolver> 사용자 자격 증명 없이 합니다. 오버 로드를 사용 하 여 외부 리소스를 인증을 요구 하는 네트워크 리소스에 있는 경우는 <xref:System.Xml.XmlResolver> 해당 인수 중 하나로 지정 하 고는 <xref:System.Xml.XmlResolver> 에 필요한 자격 증명입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. Microsoft .NET Framework에서 이 개체는 변환할 데이터를 포함하는 <see cref="T:System.Xml.XmlNode" /> 또는 <see cref="T:System.Xml.XmlDocument" />(대개 <see cref="T:System.Xml.XPath.XPathDocument" />)일 수 있습니다.</param>
        <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
        <param name="results">출력할 대상 스트림입니다.</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 스트림에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 XSLT `document()` 기능을 사용 하는 자동적으로 해결 되므로 사용 하 여는 <xref:System.Xml.XmlUrlResolver> 사용자 자격 증명 없이 합니다. 오버 로드를 사용 하 여 외부 리소스를 인증을 요구 하는 네트워크 리소스에 있는 경우는 <xref:System.Xml.XmlResolver> 해당 인수 중 하나로 지정 하 고는 <xref:System.Xml.XmlResolver> 에 필요한 자격 증명입니다.  
  
 이 메서드를 지원 하지 않습니다는 `xsl:strip-space` 요소입니다. 컴파일된 스타일 시트를 포함 하는 경우는 `xsl:strip-space` 를 사용 해야 요소를 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 오버 로드를 <xref:System.Xml.XmlReader> 입력 인수로 합니다.  
  
 <xref:System.Xml.XPath.IXPathNavigable> 인터페이스는 <xref:System.Xml.XmlNode> 및 <xref:System.Xml.XPath.XPathDocument> 클래스에서 구현됩니다. 이 클래스는 XML 데이터의 메모리 내 캐시를 나타냅니다.  
  
-   <xref:System.Xml.XmlNode> 클래스는 W3C DOM(문서 개체 모델)을 기반으로 하며 편집 기능이 있습니다.  
  
-   <xref:System.Xml.XPath.XPathDocument> 클래스는 XPath 데이터 모델을 기반으로 하는 읽기 전용 데이터 저장소입니다. <xref:System.Xml.XPath.XPathDocument>는 XSLT 처리에 권장되는 클래스입니다. 이 클래스는 <xref:System.Xml.XmlNode> 클래스와 비교하여 속도가 더 빠릅니다.  
  
 변환은 문서 전체에 적용됩니다. 즉, 문서 루트 노드 이외의 노드에 전달해도 변환 프로세스에서 로드된 문서의 모든 노드에 액세스할 수 있습니다. 노드 조각을 변형하려면 노드 조각만 포함하는 개체를 만들고 이 개체를 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 메서드에 전달해야 합니다. 자세한 내용은 [방법: 노드 조각 변환](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md)을 참조하세요.  
  
   
  
## Examples  
 다음 예제에서는 XSLT 변환을 실행 하 고 출력 하는 <xref:System.IO.FileStream>합니다.  
  
 [!code-csharp[XslCompiledTransform.Transform#6](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#6)]
 [!code-vb[XslCompiledTransform.Transform#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. Microsoft .NET Framework에서 이 개체는 변환할 데이터를 포함하는 <see cref="T:System.Xml.XmlNode" /> 또는 <see cref="T:System.Xml.XmlDocument" />(대개 <see cref="T:System.Xml.XPath.XPathDocument" />)일 수 있습니다.</param>
        <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
        <param name="results">출력을 제공할 대상 <see cref="T:System.IO.TextWriter" />입니다.</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.IO.TextWriter" />에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 XSLT `document()` 기능을 사용 하는 자동적으로 해결 되므로 사용 하 여는 <xref:System.Xml.XmlUrlResolver> 사용자 자격 증명 없이 합니다. 오버 로드를 사용 하 여 외부 리소스를 인증을 요구 하는 네트워크 리소스에 있는 경우는 <xref:System.Xml.XmlResolver> 해당 인수 중 하나로 지정 하 고는 <xref:System.Xml.XmlResolver> 에 필요한 자격 증명입니다.  
  
 이 메서드를 지원 하지 않습니다는 `xsl:strip-space` 요소입니다. 컴파일된 스타일 시트를 포함 하는 경우는 `xsl:strip-space` 를 사용 해야 요소를 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 오버 로드를 <xref:System.Xml.XmlReader> 입력 인수로 합니다.  
  
 <xref:System.Xml.XPath.IXPathNavigable> 인터페이스는 <xref:System.Xml.XmlNode> 및 <xref:System.Xml.XPath.XPathDocument> 클래스에서 구현됩니다. 이 클래스는 XML 데이터의 메모리 내 캐시를 나타냅니다.  
  
-   <xref:System.Xml.XmlNode> 클래스는 W3C DOM(문서 개체 모델)을 기반으로 하며 편집 기능이 있습니다.  
  
-   <xref:System.Xml.XPath.XPathDocument> 클래스는 XPath 데이터 모델을 기반으로 하는 읽기 전용 데이터 저장소입니다. <xref:System.Xml.XPath.XPathDocument>는 XSLT 처리에 권장되는 클래스입니다. 이 클래스는 <xref:System.Xml.XmlNode> 클래스와 비교하여 속도가 더 빠릅니다.  
  
 변환은 문서 전체에 적용됩니다. 즉, 문서 루트 노드 이외의 노드에 전달해도 변환 프로세스에서 로드된 문서의 모든 노드에 액세스할 수 있습니다. 노드 조각을 변형하려면 노드 조각만 포함하는 개체를 만들고 이 개체를 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 메서드에 전달해야 합니다. 자세한 내용은 [방법: 노드 조각 변환](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md)을 참조하세요.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. Microsoft .NET Framework에서 이 개체는 변환할 데이터를 포함하는 <see cref="T:System.Xml.XmlNode" /> 또는 <see cref="T:System.Xml.XmlDocument" />(대개 <see cref="T:System.Xml.XPath.XPathDocument" />)일 수 있습니다.</param>
        <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
        <param name="results">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.  
  
스타일시트에 <c>xsl:output</c> 요소가 포함된 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성에서 반환된 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 사용하여 <see cref="T:System.Xml.XmlWriter" />를 만들어야 합니다. 이렇게 해야 <see cref="T:System.Xml.XmlWriter" />의 출력 설정이 올바르게 설정됩니다.</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.Xml.XmlWriter" />에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 XSLT `document()` 기능을 사용 하는 자동적으로 해결 되므로 사용 하 여는 <xref:System.Xml.XmlUrlResolver> 사용자 자격 증명 없이 합니다. 오버 로드를 사용 하 여 외부 리소스를 인증을 요구 하는 네트워크 리소스에 있는 경우는 <xref:System.Xml.XmlResolver> 해당 인수 중 하나로 지정 하 고는 <xref:System.Xml.XmlResolver> 에 필요한 자격 증명입니다.  
  
 이 메서드를 지원 하지 않습니다는 `xsl:strip-space` 요소입니다. 컴파일된 스타일 시트를 포함 하는 경우는 `xsl:strip-space` 를 사용 해야 요소를 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 오버 로드를 <xref:System.Xml.XmlReader> 입력 인수로 합니다.  
  
 <xref:System.Xml.XPath.IXPathNavigable> 인터페이스는 <xref:System.Xml.XmlNode> 및 <xref:System.Xml.XPath.XPathDocument> 클래스에서 구현됩니다. 이 클래스는 XML 데이터의 메모리 내 캐시를 나타냅니다.  
  
-   <xref:System.Xml.XmlNode> 클래스는 W3C DOM(문서 개체 모델)을 기반으로 하며 편집 기능이 있습니다.  
  
-   <xref:System.Xml.XPath.XPathDocument> 클래스는 XPath 데이터 모델을 기반으로 하는 읽기 전용 데이터 저장소입니다. <xref:System.Xml.XPath.XPathDocument>는 XSLT 처리에 권장되는 클래스입니다. 이 클래스는 <xref:System.Xml.XmlNode> 클래스와 비교하여 속도가 더 빠릅니다.  
  
 변환은 문서 전체에 적용됩니다. 즉, 문서 루트 노드 이외의 노드에 전달해도 변환 프로세스에서 로드된 문서의 모든 노드에 액세스할 수 있습니다. 노드 조각을 변형하려면 노드 조각만 포함하는 개체를 만들고 이 개체를 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 메서드에 전달해야 합니다. 자세한 내용은 [방법: 노드 조각 변환](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md)을 참조하세요.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results, documentResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">입력 문서가 포함된 <see cref="T:System.Xml.XmlReader" />입니다.</param>
        <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
        <param name="results">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.  
  
스타일시트에 <c>xsl:output</c> 요소가 포함된 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성에서 반환된 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 사용하여 <see cref="T:System.Xml.XmlWriter" />를 만들어야 합니다. 이렇게 해야 <see cref="T:System.Xml.XmlWriter" />의 출력 설정이 올바르게 설정됩니다.</param>
        <param name="documentResolver">XSLT <c>document()</c> 함수 확인에 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 <c>document()</c> 함수가 확인되지 않습니다.</param>
        <summary><see cref="T:System.Xml.XmlReader" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.Xml.XmlWriter" />에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공하고 XmlResolver는 XSLT <c>document()</c> 함수를 확인합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제는 <xref:System.Xml.XmlSecureResolver> XSLT를 해결 하려면 `document()` 함수입니다.  
  
 [!code-csharp[XslCompiledTransform.Transform#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Transform#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">XslCompiledTransform 클래스 사용</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results, documentResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.IXPathNavigable" /> 개체에서 지정되는 변환할 문서입니다.</param>
        <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />로 표시되는 인수 목록입니다.</param>
        <param name="results">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.  
  
스타일시트에 <see langword="xsl:output" /> 요소가 포함된 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성에서 반환되는 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 사용하여 <see cref="T:System.Xml.XmlWriter" />를 만들어야 합니다. 이렇게 해야 <see cref="T:System.Xml.XmlWriter" />의 출력 설정이 올바르게 설정됩니다.</param>
        <param name="documentResolver">XSLT <see langword="document()" /> 함수 확인에 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 <see langword="document()" /> 함수가 확인되지 않습니다.</param>
        <summary><see cref="T:System.Xml.XPath.IXPathNavigable" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.Xml.XmlWriter" />에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공하고 <see cref="T:System.Xml.XmlResolver" />는 XSLT <see langword="document()" /> 함수를 확인합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>